int main(int argc, const char **argv, const char **envp)
{
  flags = (uint64_t)[objc_allocWithZone(CPFeatureFlags) init];
  listener.super.isa = (Class)[(id)objc_opt_self(NSXPCListener) serviceListener];
  listener._xconnection = specialized NearbyInvitationServiceHost.__allocating_init(listener:featureFlags:)( listener.super.isa,  (id)flags);
  [*(id *)((char *)listener._xconnection + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener) resume];
  exit(1);
}

uint64_t variable initialization expression of NearbyInvitationAdvertiser.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue( 0xD000000000000025LL,  0x80000001000AF330LL);
}

void *variable initialization expression of BluetoothScanner._devices()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of NearbyInvitationsProviderDataSource._dataReceived()
{
  return 0LL;
}

unint64_t variable initialization expression of NearbyInvitationAdvertiser.connectionRequests()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NWConnection?));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWConnection?>);
  uint64_t v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = *(int *)(v2 + 48);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v26 = a1;
  uint64_t v14 = a1 + v13;
  uint64_t v15 = *(void *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    outlined init with copy of (String, Any)( v14,  (uint64_t)v6,  &demangling cache variable for type metadata for (UUID, NWConnection?));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v19 = v9[6];
    uint64_t v20 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  v6,  v20);
    *(void *)(v9[7] + 8 * v18) = *(void *)&v6[v11];
    uint64_t v21 = v9[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      uint64_t v24 = v26;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of (String, Any)( v7,  (uint64_t)&v16,  &demangling cache variable for type metadata for (String, Any));
    uint64_t v8 = v16;
    v9 = v17;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    unint64_t v13 = v4[2];
    uint64_t v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyInvitationsInviteAdvertiser));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
  uint64_t v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = *(int *)(v2 + 48);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v26 = a1;
  uint64_t v14 = a1 + v13;
  uint64_t v15 = *(void *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    outlined init with copy of (String, Any)( v14,  (uint64_t)v6,  &demangling cache variable for type metadata for (UUID, NearbyInvitationsInviteAdvertiser));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v19 = v9[6];
    uint64_t v20 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  v6,  v20);
    *(void *)(v9[7] + 8 * v18) = *(void *)&v6[v11];
    uint64_t v21 = v9[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      uint64_t v24 = v26;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  id v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  uint64_t v23 = v3 + 64;
  swift_retain(v3);
  BOOL v22 = v1;
  v6 = (id *)(v1 + 72);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 5);
    uint64_t v8 = (uint64_t)*(v6 - 4);
    v9 = (uint64_t)*(v6 - 3);
    uint64_t v10 = (uint64_t)*(v6 - 2);
    uint64_t v11 = *((_BYTE *)v6 - 8);
    uint64_t v12 = *((_BYTE *)v6 - 7);
    unint64_t v13 = *v6;
    uint64_t v14 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    if ((v16 & 1) != 0) {
      break;
    }
    *(void *)(v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v17 = (uint64_t *)(v4[6] + 16 * result);
    *char v17 = v7;
    v17[1] = v8;
    unint64_t v18 = v4[7] + 32 * result;
    *(void *)unint64_t v18 = v9;
    *(void *)(v18 + 8) = v10;
    *(_BYTE *)(v18 + 16) = v11;
    *(_BYTE *)(v18 + 17) = v12;
    *(void *)(v18 + 24) = v13;
    uint64_t v19 = v4[2];
    uint64_t v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v6 += 6;
    v4[2] = v21;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v22;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : [String]]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    unint64_t v13 = v3[2];
    uint64_t v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    uint64_t v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    unint64_t v13 = (void *)(v3[7] + 16 * result);
    *unint64_t v13 = v9;
    v13[1] = v8;
    uint64_t v14 = v3[2];
    uint64_t v15 = __OFADD__(v14, 1LL);
    v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain();
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CBDiscovery.deviceFound.getter()
{
  return 0LL;
}

uint64_t variable initialization expression of Pseudonym.used()
{
  return 0LL;
}

void *variable initialization expression of PseudonymProvider.cleanupConfigurations()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of NearbyInvitationServiceBluetoothController.ongoingBroadcasts()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of Pseudonym.refreshTask()
{
  return 0LL;
}

uint64_t variable initialization expression of NearbyInvitationServiceBluetoothController.queue()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v0);
  return AsyncSerialQueue.init(priority:bufferingPolicy:)(v8, v4);
}

void *variable initialization expression of UserDefaultsPseudonymStorage.inUse()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream( (uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>,  a1);
}

uint64_t variable initialization expression of NearbyInvitationsScanner.deviceFoundContinuation@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream( &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation,  a1);
}

uint64_t variable initialization expression of UserDefaultsPseudonymStorage.lock()
{
  return variable initialization expression of NearbyInvitationsInviteAdvertiser.lock( (uint64_t (*)(void))&type metadata accessor for Lock,  (uint64_t (*)(void))&Lock.init());
}

uint64_t variable initialization expression of NearbyInvitationsInviteScanner.lostInvitations@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream( &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>,  a1);
}

uint64_t variable initialization expression of NearbyInvitationsInviteScanner.lostInvitationContinuation@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream( &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation,  a1);
}

uint64_t variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

double default argument 1 of Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)()
{
  return 3600.0;
}

double default argument 2 of Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)()
{
  return 5.0;
}

uint64_t default argument 0 of PseudonymProvider.init(storage:)@<X0>(void *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  uint64_t v3 = type metadata accessor for UserDefaultsPseudonymStorage();
  uint64_t v4 = (void *)swift_allocObject(v3, 40LL, 7LL);
  uint64_t v5 = type metadata accessor for Lock(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t result = Lock.init()();
  v4[3] = v2;
  v4[4] = &_swiftEmptySetSingleton;
  v4[2] = result;
  a1[3] = v3;
  a1[4] = &protocol witness table for UserDefaultsPseudonymStorage;
  *a1 = v4;
  return result;
}

id default argument 0 of UserDefaultsPseudonymStorage.init(userDefaults:)()
{
  return [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
}

id variable initialization expression of PseudonymProvider.lock()
{
  return [objc_allocWithZone(NSRecursiveLock) init];
}

uint64_t variable initialization expression of NearbyInvitationScanner.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue( 0xD000000000000022LL,  0x80000001000AF360LL);
}

uint64_t variable initialization expression of NearbyInvitationAdvertiser.queue(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v16);
  BOOL v22 = &_swiftEmptyArrayStorage;
  unint64_t v17 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v19 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v8, v17);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v3);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a1, v21, v15, v11, v7, 0LL);
}

uint64_t variable initialization expression of NearbyProtoSessionMessage._version()
{
  return 0x100000000LL;
}

uint64_t variable initialization expression of NearbyProtoSessionMessage._type()
{
  return 0LL;
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.handle()
{
  return 0LL;
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.operation@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation( type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation,  a1);
}

uint64_t variable initialization expression of NearbyGroup_Group.Initialization.groupUuid()
{
  return 0LL;
}

uint64_t variable initialization expression of NearbyProtoJoinRequest.Content._wantsTokenUri()
{
  return 2LL;
}

uint64_t variable initialization expression of NearbyProtoJoinResponse.Content.operation@<X0>( uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation( type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation,  a1);
}

uint64_t variable initialization expression of NearbyInvitationServiceHost.dataSource()
{
  return variable initialization expression of NearbyInvitationsInviteAdvertiser.lock( type metadata accessor for NearbyInvitationsProviderDataSource,  (uint64_t (*)(void))NearbyInvitationsProviderDataSource.init());
}

uint64_t variable initialization expression of NearbyInvitationsProviderDataSource.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue( 0xD00000000000002DLL,  0x80000001000AF3D0LL);
}

uint64_t variable initialization expression of NearbyGroupHostManager.abcReporter()
{
  uint64_t v0 = type metadata accessor for ABCReporter(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return ABCReporter.init(domain:type:)( 0xD000000000000017LL,  0x80000001000AF390LL,  0xD000000000000016LL,  0x80000001000AF3B0LL);
}

void default argument 1 of NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)( void *a1@<X8>)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithService:v3];

  if (v4)
  {
    a1[3] = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSService,  &OBJC_CLASS___IDSService_ptr);
    a1[4] = &protocol witness table for IDSService;
    *a1 = v4;
  }

  else
  {
    __break(1u);
  }
}

uint64_t variable initialization expression of NearbyInvitationsInviteAdvertiser.lock( uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v3 = a1(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return a2();
}

uint64_t variable initialization expression of NearbySession._rangedDevice()
{
  return 3LL;
}

id variable initialization expression of NearbySession.session()
{
  return [objc_allocWithZone(NISession) init];
}

uint64_t variable initialization expression of FilteredBluetoothScanner._filteredDevices( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice(0LL, a1, a2, a4);
  return Array.init()(v4);
}

uint64_t variable initialization expression of NearbyGroupHostIDSService._incomingMessages()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return PassthroughSubject.init()();
}

uint64_t variable initialization expression of _PublisherElements.Iterator.Inner.lock()
{
  return swift_slowAlloc(4LL, -1LL);
}

uint64_t variable initialization expression of _PublisherElements.Iterator.Inner.pending( uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a2,  a1,  &protocol requirements base descriptor for Publisher,  &associated type descriptor for Publisher.Output);
  uint64_t v3 = type metadata accessor for Optional(255LL, AssociatedTypeWitness);
  uint64_t v4 = type metadata accessor for UnsafeContinuation( 0LL,  v3,  &type metadata for Never,  &protocol witness table for Never);
  return Array.init()(v4);
}

double variable initialization expression of _PublisherElements.Iterator.Inner.state@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of _PublisherElements.Iterator.inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _PublisherElements.Iterator.Inner.__allocating_init()();
}

uint64_t variable initialization expression of NearbyGroup_Group.event@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation( type metadata accessor for NearbyGroup_Group.OneOf_Event,  a1);
}

uint64_t variable initialization expression of NearbyGroup_Group.MemberRemoved._member@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation( type metadata accessor for NearbyGroup_Member,  a1);
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.operation@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

uint64_t AdvertisementProtocol.stop(framer:)()
{
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CBNearbyInfoV2InvitationRouteType(uint64_t a1)
{
}

void type metadata accessor for NIDevicePresencePreset(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void PseudonymProvider.cleanupConfigurations.setter()
{
}

uint64_t ConnectionMessageType.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionMessageType( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConnectionMessageType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConnectionMessageType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionMessageType( uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionMessageType@<X0>( unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized ConnectionMessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionMessageType( _DWORD *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t static AdvertisementProtocol.label.getter()
{
  return 0xD00000000000001DLL;
}

dispatch_queue_s *one-time initialization function for definition()
{
  uint64_t v0 = type metadata accessor for AdvertisementProtocol();
  uint64_t v2 = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( &lazy protocol witness table cache variable for type AdvertisementProtocol and conformance AdvertisementProtocol,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for AdvertisementProtocol,  (uint64_t)&protocol conformance descriptor for AdvertisementProtocol);
  uint64_t v3 = type metadata accessor for NWProtocolFramer.Definition(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t result = (dispatch_queue_s *)NWProtocolFramer.Definition.init(implementation:)(v0, v2);
  listener._userQueue = result;
  return result;
}

dispatch_queue_t *AdvertisementProtocol.definition.unsafeMutableAddressor()
{
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  return &listener._userQueue;
}

uint64_t static AdvertisementProtocol.definition.getter()
{
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  return swift_retain(listener._userQueue);
}

uint64_t AdvertisementProtocol.__allocating_init(framer:)()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t AdvertisementProtocol.init(framer:)()
{
  return v0;
}

uint64_t AdvertisementProtocol.start(framer:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for NWProtocolFramer.StartResult.ready(_:);
  uint64_t started = type metadata accessor for NWProtocolFramer.StartResult(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 104LL))(a1, v2, started);
}

uint64_t AdvertisementProtocol.handleInput(framer:)()
{
  unint64_t v15 = 0LL;
  char v16 = 1;
  uint64_t v0 = 8LL;
  uint64_t v11 = 8LL;
  uint64_t v12 = &v15;
  if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)( 8LL,  8LL,  partial apply for closure #1 in AdvertisementProtocol.handleInput(framer:),  v10) & 1) != 0)
  {
    uint64_t v0 = 8LL;
    while ((v16 & 1) == 0)
    {
      unint64_t v1 = v15;
      else {
        char v2 = v15;
      }
      type metadata accessor for NWProtocolFramer.Message(0LL);
      if (one-time initialization token for definition != -1) {
        swift_once(&one-time initialization token for definition, one-time initialization function for definition);
      }
      uint64_t v3 = swift_retain(listener._userQueue);
      uint64_t v4 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v3);
      uint64_t v14 = &type metadata for ConnectionMessageType;
      v13[0] = v2;
      dispatch thunk of NWProtocolFramer.Message.subscript.setter(v13, 0xD000000000000015LL, 0x80000001000AAED0LL);
      char v5 = NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)(HIDWORD(v1), v4, 1LL);
      uint64_t v6 = swift_release(v4);
      if ((v5 & 1) == 0) {
        return 0LL;
      }
      unint64_t v15 = 0LL;
      char v16 = 1;
      __chkstk_darwin(v6, v7);
      v9[2] = 8LL;
      v9[3] = &v15;
      if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)( 8LL,  8LL,  partial apply for closure #1 in AdvertisementProtocol.handleInput(framer:),  v9) & 1) == 0) {
        return v0;
      }
    }
  }

  return v0;
}

uint64_t static AdvertisementProtocolHeader.encodedSize.getter()
{
  return 8LL;
}

uint64_t NWProtocolFramer.Message.init(connectionMessageType:)(char a1)
{
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v2 = swift_retain(listener._userQueue);
  uint64_t v3 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v2);
  uint64_t v6 = &type metadata for ConnectionMessageType;
  v5[0] = a1;
  swift_retain(v3);
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v5, 0xD000000000000015LL, 0x80000001000AAED0LL);
  swift_release(v3);
  return v3;
}

void AdvertisementProtocol.handleOutput(framer:message:messageLength:isComplete:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (v22)
  {
    if ((swift_dynamicCast( __src,  &v20,  (char *)&type metadata for Any + 8,  &type metadata for ConnectionMessageType,  6LL) & 1) != 0)
    {
      if ((a3 & 0x8000000000000000LL) == 0)
      {
        if (!HIDWORD(a3))
        {
          LODWORD(v4) = __src[0];
          goto LABEL_9;
        }

        goto LABEL_13;
      }

LABEL_12:
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_14:
      __break(1u);
      return;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
  }

  if ((a3 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  unint64_t v4 = HIDWORD(a3);
  if (HIDWORD(a3))
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_14;
  }

  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v6;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  int v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v16 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

    uint64_t v16 = 0;
  }

  return v16 & 1;
}

LABEL_9:
  *(_DWORD *)__src = v4;
  int v19 = a3;
  uint64_t v20 = specialized Data.InlineData.init(_:)(__src, &__src[4]);
  uint64_t v21 = v5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v6 = specialized Data.InlineData.init(_:)(&v19, &v20);
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFLL;
  Data.append(_:)(v6, v7 & 0xFFFFFFFFFFFFFFLL);
  outlined consume of Data._Representation(v6, v8);
  uint64_t v9 = v20;
  unint64_t v10 = v21;
  NWProtocolFramer.Instance.writeOutput(data:)(v20, v21);
  outlined consume of Data._Representation(v9, v10);
  NWProtocolFramer.Instance.writeOutputNoCopy(length:)(a3);
  if (v11)
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v13 = swift_allocObject(v12, 64LL, 7LL);
    *(_OWORD *)(v13 + 16) = xmmword_1000AAE80;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    v14._object = (void *)0x80000001000AF480LL;
    v14._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v14);
    *(void *)__src = v11;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)( __src,  &v20,  v15,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 32) = v16;
    *(void *)(v13 + 40) = v17;
    print(_:separator:terminator:)(v13, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v11);
  }

  uint64_t v13 = *(int *)(a3 + 20);
  Swift::String v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  return a1;
}

  uint64_t v13 = *(int *)(a3 + 20);
  Swift::String v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t NWProtocolFramer.Message.connectionMessageType.getter()
{
  if (v2[3])
  {
    uint64_t result = swift_dynamicCast( &v1,  v2,  (char *)&type metadata for Any + 8,  &type metadata for ConnectionMessageType,  6LL);
    if ((_DWORD)result) {
      return v1;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  return result;
}

com_apple_SharePlay_NearbyInvitationsService::AdvertisementProtocolHeader __swiftcall AdvertisementProtocolHeader.init(type:length:)( Swift::UInt32 type, Swift::UInt32 length)
{
  return (com_apple_SharePlay_NearbyInvitationsService::AdvertisementProtocolHeader)(type | (*(void *)&length << 32));
}

uint64_t AdvertisementProtocolHeader.encodedData.getter(uint64_t a1)
{
  int v6 = HIDWORD(a1);
  int __src = a1;
  v8[0] = specialized Data.InlineData.init(_:)(&__src, v8);
  v8[1] = v1 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v2 = specialized Data.InlineData.init(_:)(&v6, &__src);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFLL;
  Data.append(_:)(v2, v3 & 0xFFFFFFFFFFFFFFLL);
  outlined consume of Data._Representation(v2, v4);
  return v8[0];
}

uint64_t AdvertisementProtocol.deinit()
{
  return v0;
}

uint64_t AdvertisementProtocol.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t protocol witness for NWProtocolFramerImplementation.init(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.start(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleInput(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.wakeup(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.stop(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.cleanup(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

unint64_t AdvertisementProtocolHeader.length.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AdvertisementProtocolHeader.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AdvertisementProtocolHeader.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AdvertisementProtocolHeader.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AdvertisementProtocolHeader.CodingKeys( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AdvertisementProtocolHeader.CodingKeys()
{
  if (*v0) {
    return 0x6874676E656CLL;
  }
  else {
    return 1701869940LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AdvertisementProtocolHeader.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AdvertisementProtocolHeader.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t NearbyProtoNearbySessionMessageType.init()()
{
  return 0LL;
}

void protocol witness for CodingKey.init(intValue:) in conformance AdvertisementProtocolHeader.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AdvertisementProtocolHeader.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AdvertisementProtocolHeader.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AdvertisementProtocolHeader.encode(to:)(void *a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AdvertisementProtocolHeader.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  unint64_t v12 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1000C9F20, &unk_1000C9F20, v12, v10, v11);
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v16, v5);
  if (!v2)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v15, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t AdvertisementProtocolHeader.init(from:)(void *a1)
{
  return specialized AdvertisementProtocolHeader.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AdvertisementProtocolHeader@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized AdvertisementProtocolHeader.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AdvertisementProtocolHeader(void *a1)
{
  return AdvertisementProtocolHeader.encode(to:)(a1, *v1);
}

uint64_t UserDefaultsPseudonymStorage.inUse.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t UserDefaultsPseudonymStorage.inUse.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*UserDefaultsPseudonymStorage.inUse.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t property wrapper backing initializer of NearbyInvitationAdvertiser.connections(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t NearbyInvitationAdvertiser.connections.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF08);
  uint64_t v2 = swift_getKeyPath(&unk_1000AAF30);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t NearbyInvitationAdvertiser.connections.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF08);
  uint64_t v4 = swift_getKeyPath(&unk_1000AAF30);
  uint64_t v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t (*NearbyInvitationAdvertiser.connections.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF08);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000AAF30);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t NearbyInvitationAdvertiser.$connections.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter( &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections,  &demangling cache variable for type metadata for Published<[NWConnection]>);
}

uint64_t NearbyInvitationAdvertiser.$connections.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter( a1,  &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections,  &demangling cache variable for type metadata for Published<[NWConnection]>);
}

uint64_t (*NearbyInvitationAdvertiser.$connections.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t property wrapper backing initializer of NearbyInvitationsProviderDataSource.dataReceived( uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  return Published.init(initialValue:)(v4, v2);
}

uint64_t NearbyInvitationAdvertiser.dataReceived.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF50);
  uint64_t v2 = swift_getKeyPath(&unk_1000AAF78);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t NearbyInvitationAdvertiser.dataReceived.setter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF50);
  uint64_t v6 = swift_getKeyPath(&unk_1000AAF78);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t (*NearbyInvitationAdvertiser.dataReceived.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AAF50);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000AAF78);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

void NearbyInvitationAdvertiser.connections.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t NearbyInvitationAdvertiser.$dataReceived.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter( &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived,  &demangling cache variable for type metadata for Published<Data?>);
}

uint64_t NearbyInvitationAdvertiser.$connections.getter(void *a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  Published.projectedValue.getter(v4);
  return swift_endAccess(v6);
}

uint64_t NearbyInvitationAdvertiser.$dataReceived.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter( a1,  &demangling cache variable for type metadata for Published<Data?>.Publisher,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived,  &demangling cache variable for type metadata for Published<Data?>);
}

uint64_t NearbyInvitationAdvertiser.$connections.setter(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  swift_beginAccess(v4 + *a3, v16, 33LL, 0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter(v12, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
}

uint64_t (*NearbyInvitationAdvertiser.$dataReceived.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

void NearbyInvitationAdvertiser.$connections.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88LL) + 16LL);
  v4(*(void *)(*(void *)a1 + 104LL), v3[14], v3[10]);
  uint64_t v5 = v3[15];
  uint64_t v6 = v3[16];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = (void *)v3[14];
  uint64_t v10 = v3[11];
  uint64_t v9 = (void *)v3[12];
  uint64_t v11 = v3[9];
  uint64_t v12 = v3[10];
  uint64_t v13 = v11 + v5;
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess(v13, v3 + 3, 33LL, 0LL);
    Published.projectedValue.setter(v9, v6);
    swift_endAccess(v3 + 3);
    uint64_t v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v7, v12);
  }

  else
  {
    swift_beginAccess(v11 + v5, v3 + 6, 33LL, 0LL);
    Published.projectedValue.setter(v7, v6);
    swift_endAccess(v3 + 6);
    uint64_t v14 = *(void (**)(void *, uint64_t))(v10 + 8);
  }

  v14(v8, v12);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

uint64_t NearbyInvitationAdvertiser.delegate.getter()
{
  uint64_t v1 = (char *)listener.reserved0 + v0;
  swift_beginAccess((char *)listener.reserved0 + v0, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t NearbyInvitationAdvertiser.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)listener.reserved0 + v2;
  swift_beginAccess(v5, v7, 1LL, 0LL);
  *((void *)v5 + 1) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*NearbyInvitationAdvertiser.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  reserved0 = (char *)listener.reserved0;
  v3[5] = v1;
  v3[6] = reserved0;
  uint64_t v5 = &reserved0[v1];
  swift_beginAccess(&reserved0[v1], v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *((void *)v5 + 1);
  v3[3] = Strong;
  v3[4] = v7;
  return NearbyInvitationAdvertiser.delegate.modify;
}

void NearbyInvitationAdvertiser.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 40LL) + *(void *)(*(void *)a1 + 48LL);
  *(void *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t NearbyInvitationAdvertiser.receiveNextMessage(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "*** NearbyInvitationsAdvertiser received data", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = swift_allocObject(&unk_1000C9D18, 32LL, 7LL);
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = v2;
  swift_retain(a1);
  swift_retain(v2);
  NWConnection.receiveMessage(completion:)( partial apply for closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:),  v9);
  return swift_release(v9);
}

void closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  outlined copy of Data?(a1, a2);
  swift_retain(a3);
  outlined copy of Data?(a1, a2);
  uint64_t v14 = swift_retain(a3);
  char v15 = (void *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v15, v16))
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);

    swift_release_n(a3, 2LL);
    if (a3) {
      goto LABEL_13;
    }
LABEL_32:
    uint64_t v44 = type metadata accessor for NWError(0LL);
    return;
  }

  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v17 = swift_slowAlloc(22LL, -1LL);
  uint64_t v18 = swift_slowAlloc(64LL, -1LL);
  *(_DWORD *)uint64_t v17 = 136315394;
  uint64_t v49 = v18;
  if (a2 >> 60 == 15)
  {
    unint64_t v19 = 0xE300000000000000LL;
    uint64_t v20 = 7104878LL;
  }

  else
  {
    uint64_t v50 = a1;
    v51[0] = a2;
    outlined copy of Data._Representation(a1, a2);
    uint64_t v20 = String.init<A>(reflecting:)(&v50, &type metadata for Data);
    unint64_t v19 = v21;
  }

  uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease(v19);
  outlined consume of Data?(a1, a2);
  outlined consume of Data?(a1, a2);
  *(_WORD *)(v17 + 12) = 2080;
  if (a3)
  {
    uint64_t v50 = a3;
    uint64_t v22 = type metadata accessor for NWConnection.ContentContext(0LL);
    swift_retain(a3);
    uint64_t v23 = String.init<A>(reflecting:)(&v50, v22);
    unint64_t v25 = v24;
  }

  else
  {
    unint64_t v25 = 0xE300000000000000LL;
    uint64_t v23 = 7104878LL;
  }

  uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v17 + 14, v17 + 22);
  swift_release_n(a3, 2LL);
  swift_bridgeObjectRelease(v25);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v16,  "*** Received message - with data %s with contentContext %s",  (uint8_t *)v17,  0x16u);
  swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v18, -1LL, -1LL);
  swift_slowDealloc(v17, -1LL, -1LL);

  a7 = v46;
  a6 = v45;
  if (!a3) {
    goto LABEL_32;
  }
LABEL_13:
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v26 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)(listener._userQueue);
  if (!v26) {
    goto LABEL_32;
  }
  uint64_t v27 = v26;
  outlined copy of Data?(a1, a2);
  uint64_t v28 = outlined copy of Data?(a1, a2);
  v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v47 = a7;
    uint64_t v48 = a5;
    v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = v32;
    *(_DWORD *)v31 = 136315138;
    if (a2 >> 60 == 15)
    {
      uint64_t v33 = 7104878LL;
      unint64_t v34 = 0xE300000000000000LL;
    }

    else
    {
      uint64_t v50 = a1;
      v51[0] = a2;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v33 = String.init<A>(reflecting:)(&v50, &type metadata for Data);
      unint64_t v34 = v35;
    }

    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v34);
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "*** Received message - will now send over to delegate %s",  v31,  0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    a7 = v47;
    a5 = v48;
  }

  else
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
  }

  uint64_t v36 = type metadata accessor for NWProtocolFramer.Message(0LL);
  if (swift_dynamicCastClass(v27, v36))
  {
    swift_retain(v27);
    dispatch thunk of NWProtocolFramer.Message.subscript.getter(&v50, 0xD000000000000015LL, 0x80000001000AAED0LL);
    if (v51[2])
    {
      uint64_t v37 = swift_dynamicCast( &v49,  &v50,  (char *)&type metadata for Any + 8,  &type metadata for ConnectionMessageType,  6LL);
      if ((v37 & 1) != 0) {
        __asm { BR              X10 }
      }
    }

    else
    {
      uint64_t v37 = outlined destroy of Any?((uint64_t)&v50, &demangling cache variable for type metadata for Any?);
    }

    v41 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Connection was invalid", v43, 2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    swift_release_n(v27, 2LL);
    goto LABEL_32;
  }

  v38 = (os_log_s *)Logger.logObject.getter(0LL);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "*** Could not cast message context", v40, 2u);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_release(v27);
  }

  else
  {

    swift_release(v27);
  }

uint64_t NearbyInvitationAdvertiser.__allocating_init(listenerConfiguration:delegate:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v9 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(a1, a2, v7, ObjectType, a3);
  swift_unknownObjectRelease(a2);
  return v9;
}

uint64_t NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v8 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(a1, a2, v3, ObjectType, a3);
  swift_unknownObjectRelease(a2);
  return v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationAdvertiser.advertise()()
{
  uint64_t v0 = type metadata accessor for NWListener.Service.Invitation(0LL);
  __chkstk_darwin(v0, v1);
  v84 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for NWListener.Service(0LL);
  __chkstk_darwin(v3, v4);
  v83 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = type metadata accessor for NWListener.Service.Invitation.Route(0LL);
  uint64_t v87 = *(void *)(v85 - 8);
  uint64_t v7 = __chkstk_darwin(v85, v6);
  uint64_t v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  v86 = (char *)&v81 - v11;
  uint64_t v12 = type metadata accessor for NWListener.Service.Invitation.Scope(0LL);
  uint64_t v91 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  os_log_type_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  unint64_t v19 = (char *)&v81 - v18;
  type metadata accessor for NWParameters(0LL);
  nw_parameters_t v20 = specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(0);
  uint64_t v21 = NWParameters.__allocating_init(_:)(v20);
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  dispatch_queue_t userQueue = listener._userQueue;
  uint64_t v23 = type metadata accessor for NWProtocolFramer.Options(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = swift_retain(userQueue);
  uint64_t v25 = NWProtocolFramer.Options.init(definition:)(v24);
  uint64_t v90 = v21;
  uint64_t v26 = NWParameters.defaultProtocolStack.getter();
  swift_retain(v25);
  uint64_t v28 = dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify(&v93);
  uint64_t v29 = *v27;
  if ((unint64_t)*v27 >> 62)
  {
    uint64_t v79 = v29 < 0 ? *v27 : v29 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(*v27);
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v29);
    if (v88 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
  }

  uint64_t v88 = v25;
  specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, v25);
  ((void (*)(uint64_t *, void))v28)(&v93, 0LL);
  uint64_t v30 = swift_release(v26);
  unsigned int v31 = NearbyInvitationParameters.browserType.getter(v30);
  if (v31 >= 3)
  {
    LODWORD(v93) = v31;
    v80 = &type metadata for NearbyInvitationScopeType;
LABEL_33:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v80, &v93, v80, &type metadata for UInt32);
    __break(1u);
    return;
  }

  uint64_t v28 = v91;
  uint64_t v26 = v12;
  (*(void (**)(char *, void, uint64_t))(v91 + 104))(v16, *(unsigned int *)*(&off_1000C9F80 + (int)v31), v12);
  uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v19, v16, v12);
  uint64_t v33 = NearbyInvitationParameters.routeType.getter(v32);
  if ((v33 & 0x100000000LL) != 0)
  {
    uint64_t v12 = v88;
    if (one-time initialization token for client == -1)
    {
LABEL_13:
      uint64_t v54 = type metadata accessor for Logger(0LL);
      uint64_t v55 = __swift_project_value_buffer(v54, (uint64_t)static Log.client);
      v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Client has not implemented listener parameters", v58, 2u);
        v59 = v58;
        uint64_t v28 = v91;
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      swift_release(v12);

      swift_release(v90);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v26);
      return;
    }

LABEL_30:
    swift_once(&one-time initialization token for client, one-time initialization function for client);
    goto LABEL_13;
  }

  uint64_t v81 = v12;
  v82 = v19;
  if (v33 >= 3)
  {
    LODWORD(v93) = v33;
    v80 = &type metadata for NearbyInvitationRouteType;
    goto LABEL_33;
  }

  uint64_t v34 = v87;
  uint64_t v35 = v85;
  (*(void (**)(char *, void, uint64_t))(v87 + 104))(v9, *(unsigned int *)*(&off_1000C9F98 + (int)v33), v85);
  uint64_t v36 = v86;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v86, v9, v35);
  uint64_t v37 = type metadata accessor for NWListener(0LL);
  uint64_t v38 = NearbyInvitationParameters.serviceName.getter();
  uint64_t v40 = v39;
  v41 = v84;
  static NWListener.Service.Invitation.wrangler(route:scope:)(v36, v82);
  os_log_type_t v42 = v83;
  NWListener.Service.init(applicationService:invitation:)(v38, v40, v41);
  uint64_t v43 = v90;
  swift_retain(v90);
  uint64_t v44 = v92;
  uint64_t v45 = NWListener.__allocating_init(service:using:)(v42, v43);
  if (v44)
  {
    swift_release(v43);
    swift_release(v88);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v82, v81);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v46, (uint64_t)static Log.client);
    swift_errorRetain(v44);
    uint64_t v47 = swift_errorRetain(v44);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v51 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v50 = 138412290;
      swift_errorRetain(v44);
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError(v44);
      uint64_t v93 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v50 + 4, v50 + 12);
      uint64_t *v51 = v52;
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error %@", v50, 0xCu);
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v51, 1LL, v53);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);

      swift_errorRelease(v44);
    }

    else
    {
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      swift_errorRelease(v44);
    }
  }

  else
  {
    uint64_t v60 = v45;
    uint64_t v92 = v37;
    uint64_t v61 = swift_allocObject(&unk_1000C9D40, 24LL, 7LL);
    v62 = v89;
    swift_weakInit(v61 + 16, v89);
    swift_retain(v61);
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)partial apply for closure #1 in NearbyInvitationAdvertiser.advertise(),  v61);
    NWListener.newConnectionHandler.setter(partial apply for closure #1 in NearbyInvitationAdvertiser.advertise(), v61);
    swift_release_n(v61, 2LL);
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)closure #2 in NearbyInvitationAdvertiser.advertise(),  0LL);
    NWListener.stateUpdateHandler.setter(closure #2 in NearbyInvitationAdvertiser.advertise(), 0LL);
    v63 = *(uint64_t (**)(uint64_t *))(*v62 + 152LL);
    swift_retain(v60);
    v64 = (void (*)(uint64_t *, void))v63(&v93);
    v66 = v65;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v64);
    unint64_t v68 = *(void *)((*v66 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v67 = *(void *)((*v66 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v68 >= v67 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1LL);
    }
    uint64_t v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v60);
    specialized Array._endMutation()(v69);
    v64(&v93, 0LL);
    NWListener.start(queue:)(v62[2]);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v70, (uint64_t)static Log.client);
    uint64_t v71 = swift_retain_n(v60, 2LL);
    v72 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v75 = swift_slowAlloc(32LL, -1LL);
      uint64_t v93 = v75;
      *(_DWORD *)v74 = 136315138;
      uint64_t v95 = v60;
      swift_retain(v60);
      uint64_t v76 = String.init<A>(reflecting:)(&v95, v92);
      unint64_t v78 = v77;
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease(v78);
      swift_release_n(v60, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "*** Starting new listener, %s", v74, 0xCu);
      swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1LL, -1LL);
      swift_slowDealloc(v74, -1LL, -1LL);

      swift_release(v60);
      swift_release(v90);
      swift_release(v88);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v85);
    }

    else
    {

      swift_release_n(v60, 3LL);
      swift_release(v90);
      swift_release(v88);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v35);
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v82, v81);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    os_log_type_t v16 = (v23 - 1) & v23;
    uint64_t v17 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_31:
    uint64_t v21 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (v21)
    {
      while (1)
      {
        uint64_t v25 = [v21 vettedAliases];
        if (!v25) {
          goto LABEL_37;
        }
        uint64_t v26 = v25;
        uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);

        specialized Array.append<A>(contentsOf:)(v27);
        uint64_t v10 = v18;
        uint64_t v11 = v16;
        if ((v5 & 0x8000000000000000LL) == 0) {
          goto LABEL_12;
        }
LABEL_14:
        unint64_t v19 = __CocoaSet.Iterator.next()(v6);
        if (v19)
        {
          nw_parameters_t v20 = v19;
          uint64_t v30 = v19;
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v28, 7LL);
          uint64_t v21 = (id)v31[0];
          swift_unknownObjectRelease(v20);
          uint64_t v18 = v10;
          os_log_type_t v16 = v11;
          if (v21) {
            continue;
          }
        }

        break;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

          uint64_t v11 = (v27 - 1) & v27;
          uint64_t v21 = __clz(__rbit64(v27)) + (v10 << 6);
        }

        uint64_t v25 = *(id *)(*(void *)(object + 48) + 8 * v21);
        if (!v25) {
          goto LABEL_51;
        }
      }

      if (v16)
      {
      }

      else
      {
        v120 = v11;
        uint64_t v29 = [v25 aliasStrings];
        if (v29)
        {
          uint64_t v30 = v29;
          v106 = v10;
          v119 = v0;
          unsigned int v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String);

          uint64_t v32 = *(void *)(v31 + 16);
          v107 = v31;
          if (v32)
          {
            uint64_t v33 = (void **)(v31 + 40);
            uint64_t v34 = &_swiftEmptyArrayStorage;
            v118 = object;
            do
            {
              uint64_t v35 = (uint64_t)*(v33 - 1);
              uint64_t v36 = *v33;
              v119[12]._countAndFlagsBits = v35;
              v119[12]._object = v36;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
              uint64_t v38 = v37;
              uint64_t v39 = String.lowercased()();
              swift_bridgeObjectRetain(v36);
              swift_bridgeObjectRelease(v38);
              v119[10] = v39;
              uint64_t v40 = lazy protocol witness table accessor for type String and conformance String();
              LOBYTE(v38) = StringProtocol.contains<A>(_:)( v123,  &type metadata for String,  &type metadata for String,  v40,  v40);
              swift_bridgeObjectRelease(v39._object);
              if ((v38 & 1) != 0)
              {
                swift_bridgeObjectRelease(v36);
                object = v118;
                uint64_t v11 = v120;
              }

              else
              {
                v129[0] = (uint64_t)v34;
                if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v34[2] + 1LL,  1);
                  uint64_t v34 = (void *)v129[0];
                }

                object = v118;
                uint64_t v11 = v120;
                os_log_type_t v42 = v34[2];
                v41 = v34[3];
                if (v42 >= v41 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v41 > 1,  v42 + 1,  1);
                  uint64_t v11 = v120;
                  uint64_t v34 = (void *)v129[0];
                }

                v34[2] = v42 + 1;
                uint64_t v43 = &v34[2 * v42];
                v43[4] = v35;
                v43[5] = v36;
              }

              v33 += 2;
              --v32;
            }

            while (v32);
          }

          else
          {
            uint64_t v34 = &_swiftEmptyArrayStorage;
            uint64_t v11 = v120;
          }

          swift_bridgeObjectRelease(v107);
          if (v34[2])
          {
            uint64_t v15 = v34[4];
            os_log_type_t v16 = v34[5];
            swift_bridgeObjectRetain(v16);
          }

          else
          {
            uint64_t v15 = 0LL;
            os_log_type_t v16 = 0LL;
          }

          uint64_t v0 = v119;
          uint64_t v17 = v117;
          uint64_t v10 = v106;
          swift_release(v34);
        }

        else
        {
          uint64_t v15 = 0LL;
          os_log_type_t v16 = 0LL;
        }
      }
    }
  }

  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v40, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v10 = (id *)result;
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v11, (uint64_t)static Log.client);
    uint64_t v12 = swift_retain_n(a1, 4LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v37 = swift_slowAlloc(64LL, -1LL);
      v39[0] = v37;
      *(_DWORD *)uint64_t v16 = 136315394;
      HIDWORD(v36) = v15;
      uint64_t v17 = NWConnection.endpoint.getter();
      uint64_t v18 = NWEndpoint.debugDescription.getter(v17);
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v20);
      swift_release_n(a1, 2LL);
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v38 = a1;
      uint64_t v21 = type metadata accessor for NWConnection(0LL);
      swift_retain(a1);
      uint64_t v22 = String.init<A>(describing:)(&v38, v21);
      unint64_t v24 = v23;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(a1, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  BYTE4(v36),  "*** Received connection [%s] - '%s",  (uint8_t *)v16,  0x16u);
      uint64_t v25 = v37;
      swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a1, 4LL);
    }

    uint64_t v26 = (uint64_t (*)(uint64_t *))*((void *)*v10 + 22);
    swift_retain(a1);
    uint64_t v27 = (void (*)(uint64_t *, void))v26(v39);
    uint64_t v29 = v28;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
    unint64_t v31 = *(void *)((*v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v30 = *(void *)((*v29 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v31 >= v30 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1LL);
    }
    uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, a1);
    specialized Array._endMutation()(v32);
    v27(v39, 0LL);
    uint64_t v33 = swift_allocObject(&unk_1000C9D40, 24LL, 7LL);
    swift_weakInit(v33 + 16, v10);
    uint64_t v34 = swift_allocObject(&unk_1000C9F68, 32LL, 7LL);
    *(void *)(v34 + 16) = v33;
    *(void *)(v34 + 24) = a1;
    swift_retain(a1);
    swift_retain(v33);
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise(),  v34);
    NWConnection.stateUpdateHandler.setter( partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise(),  v34);
    swift_release(v34);
    swift_release(v33);
    id v35 = v10[2];
    NWConnection.start(queue:)();

    return swift_release(v10);
  }

  return result;
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.State?);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = type metadata accessor for NWConnection.State(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v45 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v45 - v24;
  a2 += 16LL;
  swift_beginAccess(a2, v53, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v27 = result;
    uint64_t v49 = a3;
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)static Log.client);
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v30 = v29(v25, v50, v13);
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    int v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v48))
    {
      os_log_t v47 = v31;
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      v52[0] = v46;
      *(_DWORD *)uint64_t v32 = 136315138;
      v29(v12, (uint64_t)v25, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0LL, 1LL, v13);
      outlined init with copy of (String, Any)( (uint64_t)v12,  (uint64_t)v9,  &demangling cache variable for type metadata for NWConnection.State?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1LL, v13) == 1)
      {
        unint64_t v33 = 0xE300000000000000LL;
        uint64_t v34 = 7104878LL;
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v9, v13);
        v29(v18, (uint64_t)v22, v13);
        uint64_t v34 = String.init<A>(reflecting:)(v18, v13);
        unint64_t v33 = v36;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
      }

      outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for NWConnection.State?);
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v33);
      id v35 = *(void (**)(char *, uint64_t))(v14 + 8);
      v35(v25, v13);
      os_log_t v37 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v48,  "*** NearbyInvitationsAdvertiser New Connection - State=%s",  v32,  0xCu);
      uint64_t v38 = v46;
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      id v35 = *(void (**)(char *, uint64_t))(v14 + 8);
      v35(v25, v13);
    }

    uint64_t v39 = *(void (**)(char *, void, uint64_t))(v14 + 104);
    v39(v22, enum case for NWConnection.State.ready(_:), v13);
    char v40 = static NWConnection.State.== infix(_:_:)(v50, v22);
    v35(v22, v13);
    if ((v40 & 1) != 0) {
      (*(void (**)(uint64_t))(*(void *)v27 + 304LL))(v49);
    }
    v39(v22, enum case for NWConnection.State.cancelled(_:), v13);
    char v41 = static NWConnection.State.== infix(_:_:)(v50, v22);
    v35(v22, v13);
    if ((v41 & 1) != 0)
    {
      os_log_type_t v42 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v27 + 152LL))(v52);
      uint64_t v44 = *v43;
      uint64_t *v43 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v44);
      v42(v52, 0LL);
    }

    return swift_release(v27);
  }

  return result;
}

void closure #2 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWListener.State?);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for NWListener.State(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v33 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v33 - v21;
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)static Log.client);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v25 = v24(v22, a1, v10);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  int v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    int v34 = v27;
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v33;
    *(_DWORD *)uint64_t v28 = 136315138;
    v24(v9, (uint64_t)v22, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
    outlined init with copy of (String, Any)( (uint64_t)v9,  (uint64_t)v6,  &demangling cache variable for type metadata for NWListener.State?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1LL, v10) == 1)
    {
      unint64_t v29 = 0xE300000000000000LL;
      uint64_t v30 = 7104878LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v6, v10);
      v24(v15, (uint64_t)v19, v10);
      uint64_t v30 = String.init<A>(reflecting:)(v15, v10);
      unint64_t v29 = v31;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    }

    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for NWListener.State?);
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v34, "*** Listener state update, state=%s", v28, 0xCu);
    uint64_t v32 = v33;
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
  }
}

uint64_t NearbyInvitationAdvertiser.stopAdvertising()()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(NearbyInvitationAdvertiser.stopAdvertising(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = (void *)swift_allocObject(&unk_1000C9D68, 40LL, 7LL);
  void v4[2] = 0LL;
  v4[3] = 0LL;
  v4[4] = v1;
  swift_retain(v1);
  uint64_t v5 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v2,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising(),  (uint64_t)v4);
  swift_release(v5);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stopAdvertising()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(closure #1 in NearbyInvitationAdvertiser.stopAdvertising(), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stopAdvertising()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 136LL))();
  uint64_t v2 = v1;
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n(v2, 2LL);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (v1 < 0) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v7);
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      }

      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * i + 32);
        swift_retain(v6);
      }

      NWListener.cancel()();
      swift_release(v6);
    }

    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1000C9F40, 32LL, 7LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create( v8,  v17,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v16);
}

uint64_t NearbyInvitationAdvertiser.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests));
  outlined destroy of weak PeerConnectionDelegate?((uint64_t)listener.reserved0 + v0);
  return v0;
}

uint64_t NearbyInvitationAdvertiser.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests));
  outlined destroy of weak PeerConnectionDelegate?((uint64_t)listener.reserved0 + v0);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t NearbyInvitationAdvertiser.approveConnectionRequest(id:localInvitation:connection:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v9 = type metadata accessor for NWConnection.SendCompletion(0LL);
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for InvitationRequestData(0LL);
  uint64_t v47 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NWProtocolFramer.Message(0LL);
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v17 = swift_retain();
  uint64_t v18 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v17);
  v49[3] = &type metadata for ConnectionMessageType;
  LOBYTE(v49[0]) = 2;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v49, 0xD000000000000015LL, 0x80000001000AAED0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1000AAE90;
  *(void *)(v20 + 32) = v18;
  v49[0] = v20;
  specialized Array._endMutation()(v20);
  uint64_t v21 = v49[0];
  uint64_t v22 = type metadata accessor for NWConnection.ContentContext(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  swift_retain();
  uint64_t v23 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0xD000000000000012LL,  0x80000001000AF510LL,  0LL,  0LL,  0LL,  v21,  0.5);
  if (a2)
  {
    unint64_t v24 = a2;
  }

  else
  {
    a1 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain(a2);
  outlined copy of Data._Representation(a3, a4);
  InvitationRequestData.init(invitationData:id:pseudo:)(a3, a4, a1, v24, 0LL, 0LL, v25);
  uint64_t v26 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = JSONEncoder.init()();
  uint64_t v28 = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( &lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for InvitationRequestData,  (uint64_t)&protocol conformance descriptor for InvitationRequestData);
  uint64_t v48 = v13;
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v13, v28);
  unint64_t v31 = v30;
  uint64_t v32 = v23;
  uint64_t v34 = v43;
  uint64_t v33 = v44;
  (*(void (**)(char *, void, uint64_t))(v43 + 104))( v12,  enum case for NWConnection.SendCompletion.idempotent(_:),  v44);
  outlined copy of Data._Representation(v29, v31);
  uint64_t v42 = v32;
  uint64_t v35 = v45;
  NWConnection.send(content:contentContext:isComplete:completion:)(v29, v31, v32, 1LL, v12);
  outlined consume of Data._Representation(v29, v31);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v33);
  (*(void (**)(uint64_t))(*(void *)v46 + 304LL))(v35);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Log.client);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    char v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "NearbyInvitationsAdvertiser sent data for LMI", v40, 2u);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  swift_release(v42);
  swift_release(v27);
  outlined consume of Data._Representation(v29, v31);
  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v16, v48);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_0Tm(v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

    goto LABEL_14;
  }

  uint64_t v4 = v3;
  uint64_t v5 = [a1 model];
  if (!v5)
  {

    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    uint64_t v10 = a1;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    int v14 = static os_log_type_t.error.getter(v11, v23, v24);
    if (os_log_type_enabled(v11, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      unint64_t v30 = (uint64_t)v10;
      unint64_t v31 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      __n128 v25 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
      uint64_t v10 = v10;
      uint64_t v26 = String.init<A>(reflecting:)(&v30, v25);
      uint64_t v28 = v27;
      unint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);

      swift_bridgeObjectRelease(v28);
      uint64_t v21 = "Can't create NIBTSample for device: %s. No model.";
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  uint64_t v6 = v5;
  uint64_t v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  uint64_t v8 = objc_msgSend( v7,  "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:",  v4,  v6,  objc_msgSend(a1, "bleChannel"),  (double)(int)objc_msgSend(a1, "bleRSSI"),  (double)mach_continuous_time());

  return v8;
}

  uint64_t v28 = 0;
  return v28 & 1;
}

  uint64_t v33 = *(int *)(a3 + 28);
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 24LL))(v34, v35, v36);
  return a1;
}

  uint64_t v29 = *(int *)(a3 + 28);
  unint64_t v30 = (char *)a1 + v29;
  unint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40LL))(v30, v31, v32);
  return a1;
}

  uint64_t v29 = *(int *)(a3 + 24);
  unint64_t v30 = (char *)a1 + v29;
  unint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40LL))(v30, v31, v32);
  return a1;
}

    swift_once(&one-time initialization token for host, one-time initialization function for host);
    goto LABEL_4;
  }

  uint64_t v52 = *(void (**)(char *, char *, uint64_t (*)(void)))(v26 + 32);
  uint64_t v94 = v25;
  v52(v98, v24, v25);
  uint64_t v53 = v85;
  outlined init with copy of (String, Any)( (uint64_t)a3 + *(int *)(v97 + 24),  v85,  &demangling cache variable for type metadata for NearbyGroup_Member?);
  uint64_t v54 = v86;
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v53, 1LL, v86);
  if ((_DWORD)v55 == 1)
  {
    *uint64_t v20 = 0LL;
    v20[1] = 0xE000000000000000LL;
    UnknownStorage.init()(v55);
    v56 = (uint64_t *)((char *)v20 + *(int *)(v54 + 24));
    os_log_s *v56 = 0LL;
    v56[1] = 0LL;
    outlined destroy of Any?(v53, &demangling cache variable for type metadata for NearbyGroup_Member?);
  }

  else
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v53,  (uint64_t)v20,  type metadata accessor for NearbyGroup_Member);
  }

  uint64_t v61 = *v20;
  v62 = v20[1];
  v63 = (uint64_t *)((char *)v20 + *(int *)(v54 + 24));
  v65 = *v63;
  v64 = v63[1];
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v62);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v20,  type metadata accessor for NearbyGroup_Member);
  uint64_t v81 = v26;
  v66 = (uint64_t)v92;
  unint64_t v67 = v98;
  unint64_t v68 = v94;
  (*(void (**)(char *, char *, uint64_t (*)(uint64_t)))(v26 + 16))(v92, v98, v94);
  uint64_t v69 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0LL);
  uint64_t v70 = (void *)(v66 + *(int *)(v69 + 20));
  uint64_t v71 = v87;
  v72 = v93;
  *uint64_t v70 = v88;
  v70[1] = v72;
  os_log_type_t v73 = v66 + *(int *)(v69 + 24);
  *(void *)os_log_type_t v73 = v61;
  *(void *)(v73 + 8) = v62;
  *(void *)(v73 + 16) = v65;
  *(void *)(v73 + 24) = v64;
  *(_BYTE *)(v73 + 32) = v91 & 1;
  swift_storeEnumTagMultiPayload(v66, v71, 1LL);
  swift_bridgeObjectRetain(v72);
  uint64_t v75 = (void *)voucher_copy(v74);
  uint64_t v76 = v95;
  unint64_t v77 = *(void *)(v96
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService__incomingMessages);
  unint64_t v78 = *(int *)(v89 + 48);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v66,  v95,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  *(void *)(v76 + v78) = v75;
  swift_retain();
  uint64_t v79 = v75;
  PassthroughSubject.send(_:)(v76);

  swift_release(v77);
  outlined destroy of Any?( v76,  (uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v66,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return (*(uint64_t (**)(char *, uint64_t (*)(uint64_t)))(v81 + 8))(v67, v68);
}

    __break(1u);
    JUMPOUT(0x10008B2F8LL);
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  uint64_t v8 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v14[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Dropping message due to invalid fromID %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    unint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *uint64_t v22 = v24 & v23;
  __n128 v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  unint64_t v24 = __OFSUB__(v23, 1LL);
  __n128 v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

    outlined copy of Data?(v13, v14);
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v13, v14);
    uint64_t v18 = v16;
    uint64_t v19 = v17;
LABEL_12:
    outlined consume of Data?(v18, v19);
    goto LABEL_13;
  }

  if (v17 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v22 = *(int *)(v11 + 24);
  uint64_t v23 = *(void *)(a1 + v22);
  unint64_t v24 = *(void *)(a1 + v22 + 8);
  __n128 v25 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  if (v24 >> 60 == 15)
  {
    if (v27 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

  if (v27 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v23, v24);
    outlined copy of Data?(v26, v27);
    outlined consume of Data?(v23, v24);
    uint64_t v18 = v26;
    uint64_t v19 = v27;
    goto LABEL_12;
  }

  outlined copy of Data?(v23, v24);
  outlined copy of Data?(v26, v27);
  specialized static Data.== infix(_:_:)(v23, v24);
  unint64_t v31 = v30;
  outlined consume of Data?(v26, v27);
  outlined consume of Data?(v23, v24);
  if ((v31 & 1) != 0)
  {
LABEL_16:
    uint64_t v32 = v38;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
    v33(v10, a1, v4);
    uint64_t v34 = v37;
    v33(v37, a2, v4);
    uint64_t v35 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    uint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v34, v4, v35);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
    v36(v34, v4);
    v36(v10, v4);
    return v28 & 1;
  }

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v9 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v7 < 0) {
    uint64_t v24 = v7;
  }
  else {
    uint64_t v24 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0) {
      uint64_t v26 = v7;
    }
    else {
      uint64_t v26 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }

LABEL_37:
  if (v7 < 0) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v7;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1LL;
  }

  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v7);
  swift_bridgeObjectRelease(*v4);
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  uint64_t v16 = type metadata accessor for NWProtocolOptions(0LL);
  uint64_t v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *uint64_t v15 = v3;
    return specialized Array._endMutation()(v17);
  }

  if (!((unint64_t)v7 >> 62))
  {
    uint64_t v18 = *(void *)(v13 + 16);
    uint64_t v19 = v18 - v5;
    if (!__OFSUB__(v18, v5)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v7 < 0) {
    uint64_t v27 = v7;
  }
  else {
    uint64_t v27 = v13;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  uint64_t v19 = v28 - v5;
  if (__OFSUB__(v28, v5)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (char *)(v15 + 1);
    uint64_t v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (void *)v20 || v17 >= &v20[8 * v19]) {
      uint64_t v17 = (char *)memmove(v17, v20, 8 * v19);
    }
    if (!((unint64_t)v7 >> 62))
    {
      uint64_t v21 = *(void *)(v13 + 16);
      uint64_t v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(void *)(v13 + 16) = v22;
        goto LABEL_28;
      }

      goto LABEL_58;
    }

  if (v5 < 0) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *uint64_t v3 = v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  size_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    size_t v12 = v9;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v13 = type metadata accessor for NWConnection(0LL);
  uint64_t v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v15 = *(void *)(v11 + 16);
    uint64_t v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v11;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  uint64_t v14 = (void *)swift_bridgeObjectRelease(v5);
  uint64_t v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

LABEL_53:
    if (v7 < 0) {
      uint64_t v29 = v7;
    }
    else {
      uint64_t v29 = v13;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    uint64_t v17 = (char *)swift_bridgeObjectRelease(v7);
    uint64_t v22 = v30 + v8;
    if (!__OFADD__(v30, v8)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    uint64_t v14 = (void *)swift_bridgeObjectRelease(v5);
    uint64_t v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized ConnectionMessageType.init(rawValue:)(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t partial apply for closure #1 in AdvertisementProtocol.handleInput(framer:)( uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (v4 <= 0) {
      goto LABEL_4;
    }
    return 0LL;
  }

  if (a2 - a1 < v4) {
    return 0LL;
  }
LABEL_4:
  *(void *)uint64_t v5 = specialized AdvertisementProtocolHeader.init(_:)(a1);
  *(_BYTE *)(v5 + 8) = 0;
  return v4;
}

unint64_t specialized AdvertisementProtocolHeader.init(_:)(uint64_t a1)
{
  uint64_t v4 = 0LL;
  if (!a1) {
    __break(1u);
  }
  uint64_t v2 = a1 + 4;
  ((void (*)(void))UnsafeMutableRawBufferPointer.copyMemory(from:))();
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, a1 + 8, &v4, (char *)&v4 + 4);
  return HIDWORD(v4) | ((unint64_t)v4 << 32);
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AdvertisementProtocolHeader.CodingKeys,  &unk_1000C9F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AdvertisementProtocolHeader.CodingKeys,  &unk_1000C9F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AdvertisementProtocolHeader.CodingKeys,  &unk_1000C9F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AdvertisementProtocolHeader.CodingKeys,  &unk_1000C9F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }

  return result;
}

uint64_t specialized AdvertisementProtocolHeader.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6874676E656CLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized AdvertisementProtocolHeader.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AdvertisementProtocolHeader.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000C9F20, &unk_1000C9F20, v10, v8, v9);
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }
  char v16 = 0;
  unsigned int v11 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  char v15 = 1;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v11 | (unint64_t)(v12 << 32);
}

uint64_t sub_10000B974@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10000B9A4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_10000B9D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10000BA04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 216LL);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void partial apply for closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a5;
  uint64_t v57 = a2;
  id v55 = a1;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v54 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v6);
  uint64_t v53 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8, v9);
  unsigned int v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  char v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v50 = type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter(v50);
  *(void *)&v59[0] = &_swiftEmptyArrayStorage;
  uint64_t v25 = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v27 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(v59, v26, v27, v17, v25);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v12);
  *(void *)(a3 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000025LL,  0x80000001000AF330LL,  v24,  v20,  v16,  0LL);
  *(void *)(a3 + 32) = &_swiftEmptyArrayStorage;
  uint64_t v28 = a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  *(void *)&v59[0] = &_swiftEmptyArrayStorage;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  Published.init(initialValue:)(v59, v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v28, v11, v52);
  uint64_t v30 = a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  v59[0] = xmmword_1000AAEA0;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  uint64_t v32 = v53;
  Published.init(initialValue:)(v59, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v30, v32, v58);
  uint64_t v33 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests;
  *(void *)(a3 + v33) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v34 = &full type metadata for NearbyGroup_Group.MemberRemoved;
  uint64_t v58 = a3;
  uint64_t v35 = (char *)listener.reserved0 + a3;
  *((void *)v35 + 1) = 0LL;
  swift_unknownObjectWeakInit(v35, 0LL);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v36, (uint64_t)static Log.client);
  id v37 = v55;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    char v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v41 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v40 = 138412290;
    *(void *)&v59[0] = v37;
    id v42 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, (char *)v59 + 8, v40 + 4, v40 + 12);
    void *v41 = v37;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "NearbyInvitationsAdvertiser init %@", v40, 0xCu);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v41, 1LL, v43);
    swift_slowDealloc(v41, -1LL, -1LL);
    uint64_t v44 = v40;
    uint64_t v34 = (void *)&full type metadata for NearbyGroup_Group.MemberRemoved;
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {

    uint64_t v38 = (os_log_s *)v37;
  }

  uint64_t v45 = v58;
  *(void *)(v58 + 24) = v37;
  uint64_t v46 = v45 + v34[90];
  swift_beginAccess(v46, v59, 1LL, 0LL);
  uint64_t v47 = v57;
  *(void *)(v46 + 8) = v56;
  swift_unknownObjectWeakAssign(v46, v47);
  return v45;
}

nw_parameters_t specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(char a1)
{
  nw_parameters_t application_service = nw_parameters_create_application_service();
  swift_unknownObjectRetain(application_service);
  if ((a1 & 1) != 0)
  {
    xpc_object_t v3 = xpc_array_create(0LL, 0LL);
    size_t v4 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v3, v4, "com.apple.rapport.browse");
    xpc_object_t v5 = xpc_array_create(0LL, 0LL);
    size_t v6 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v5, v6, "RapportBrowseAgent");
    uint64_t v7 = swift_unknownObjectRetain(application_service);
    nw_parameters_set_required_netagent_classes(v7, v3, v5);
    nw_parameters_set_server_mode(application_service, 0LL);
    swift_unknownObjectRelease(application_service);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v8, (uint64_t)static Log.client);
    uint64_t v9 = swift_unknownObjectRetain(application_service);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      xpc_object_t v29 = v3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      id v14 = -[nw_parameters description](application_service, "description");
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      unint64_t v17 = v16;

      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 4, v12 + 12);
      swift_unknownObjectRelease_n(application_service, 2LL);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Create Parameters are browsing with %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_unknownObjectRelease(v29);
      swift_unknownObjectRelease(v5);
    }

    else
    {

      swift_unknownObjectRelease_n(application_service, 2LL);
      swift_unknownObjectRelease(v5);
      swift_unknownObjectRelease(v3);
    }
  }

  else
  {
    nw_parameters_set_server_mode(application_service, 1LL);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v18, (uint64_t)static Log.client);
    uint64_t v19 = swift_unknownObjectRetain(application_service);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      id v24 = -[nw_parameters description](application_service, "description");
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      unint64_t v27 = v26;

      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
      swift_unknownObjectRelease_n(application_service, 2LL);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Create Parameters are listening with %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease_n(application_service, 2LL);
    }
  }

  return application_service;
}

uint64_t sub_10000C310()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  return closure #1 in NearbyInvitationAdvertiser.advertise()(a1, v1);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10000C34C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  xpc_object_t v3 = (void *)swift_task_alloc(dword_1000D452C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *xpc_object_t v3 = v1;
  v3[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v3[2] = v2;
  return swift_task_switch(closure #1 in NearbyInvitationAdvertiser.stopAdvertising(), 0LL, 0LL);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  size_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  size_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t outlined destroy of weak PeerConnectionDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t lazy protocol witness table accessor for type ConnectionMessageType and conformance ConnectionMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType;
  if (!lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ConnectionMessageType,  &type metadata for ConnectionMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType);
  }

  return result;
}

uint64_t sub_10000C4D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 280LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10000C500(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  xpc_object_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 288LL);
  uint64_t v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    swift_once(&one-time initialization token for group, one-time initialization function for group);
    goto LABEL_5;
  }

  uint64_t v32 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v2) + 0xC0LL))(v64);
  uint64_t v33 = (void *)specialized Set._Variant.remove(_:)(v6);
  v32(v64, 0LL);

  if (v33)
  {
LABEL_8:

    return;
  }

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v34, (uint64_t)static Log.group);
  uint64_t v35 = v2;
  uint64_t v36 = v6;
  id v37 = v35;
  uint64_t v38 = v36;
  os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  id v42 = static os_log_type_t.error.getter(v39, v40, v41);
  uint64_t v43 = v42;
  v63 = v39;
  if (os_log_type_enabled(v39, v42))
  {
    uint64_t v44 = swift_slowAlloc(22LL, -1LL);
    uint64_t v60 = v43;
    uint64_t v45 = v44;
    v59 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    v64[0] = v61;
    *(_DWORD *)uint64_t v45 = 138412546;
    v65 = (uint64_t)v37;
    uint64_t v46 = v37;
    v62 = v38;
    uint64_t v47 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v45 + 4, v45 + 12);
    uint64_t v48 = v59;
    uint8_t *v59 = v37;

    uint64_t v38 = v62;
    *(_WORD *)(v45 + 12) = 2080;
    v65 = (uint64_t)v38;
    uint64_t v49 = v38;
    unint64_t v50 = String.init<A>(reflecting:)(&v65, v14);
    uint64_t v52 = v51;
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease(v52);

    uint64_t v53 = v63;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  (os_log_type_t)v60,  "%@ Couldn't find member %s to remove",  (uint8_t *)v45,  0x16u);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v48, 1LL, v54);
    swift_slowDealloc(v48, -1LL, -1LL);
    id v55 = v61;
    swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v56 = lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
  swift_allocError(&type metadata for NearbyGroupHost.Errors, v56, 0LL, 0LL);
  *uint64_t v57 = 2;
  swift_willThrow();
}

  uint64_t v58 = lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors();
  v59 = swift_allocError(&type metadata for NearbyGroupHostManager.Errors, v58, 0LL, 0LL);
  *uint64_t v60 = v57;
  swift_willThrow(v59);
  uint64_t v61 = *(void *)(v0 + 224);
  v63 = *(void *)(v0 + 208);
  v62 = *(void *)(v0 + 216);
  v65 = *(void *)(v0 + 168);
  v64 = *(void *)(v0 + 176);
  v66 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  id v55 = *(void **)(v0 + 144);
  uint64_t v56 = lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors();
  uint64_t v57 = swift_allocError(&type metadata for NearbyGroupHostManager.Errors, v56, 0LL, 0LL);
  uint8_t *v58 = v54;
  swift_willThrow(v57);

  v59 = *(void *)(v0 + 248);
  uint64_t v61 = *(void *)(v0 + 232);
  uint64_t v60 = *(void *)(v0 + 240);
  v63 = *(void *)(v0 + 192);
  v62 = *(void *)(v0 + 200);
  v64 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  char v40 = *(int *)(a3 + 24);
  char v41 = (char *)a1 + v40;
  id v42 = (char *)a2 + v40;
  uint64_t v43 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 24LL))(v41, v42, v43);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ConnectionMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10000C62C + 4 * byte_1000AAEDA[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10000C660 + 4 * byte_1000AAED5[v4]))();
}

uint64_t sub_10000C660(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000C670LL);
  }
  return result;
}

uint64_t sub_10000C67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000C684LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10000C688(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C690(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ConnectionMessageType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ConnectionMessageType(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMessageType()
{
  return &type metadata for ConnectionMessageType;
}

uint64_t type metadata accessor for AdvertisementProtocol()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService21AdvertisementProtocol);
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvertisementProtocolHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AdvertisementProtocolHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementProtocolHeader()
{
  return &type metadata for AdvertisementProtocolHeader;
}

uint64_t ObjC metadata update function for NearbyInvitationAdvertiser()
{
  return type metadata accessor for NearbyInvitationAdvertiser(0LL);
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationAdvertiser;
  if (!type metadata singleton initialization cache for NearbyInvitationAdvertiser) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyInvitationAdvertiser);
  }
  return result;
}

void type metadata completion function for NearbyInvitationAdvertiser(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  type metadata accessor for Published<[NWConnection]>( 319LL,  (unint64_t *)&lazy cache variable for type metadata for Published<[NWConnection]>,  &demangling cache variable for type metadata for [NWConnection]);
  if (v3 <= 0x3F)
  {
    v6[3] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for Published<[NWConnection]>( 319LL,  (unint64_t *)&lazy cache variable for type metadata for Published<Data?>,  &demangling cache variable for type metadata for Data?);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = &unk_1000AB1C0;
      swift_updateClassMetadata2(a1, 256LL, 7LL, v6, a1 + 80);
    }
  }

void type metadata accessor for Published<[NWConnection]>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v6 = type metadata accessor for Published(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t getEnumTagSinglePayload for AdvertisementProtocolHeader.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for AdvertisementProtocolHeader.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10000C980 + 4 * byte_1000AAEE4[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000C9B4 + 4 * byte_1000AAEDF[v4]))();
}

uint64_t sub_10000C9B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C9BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000C9C4LL);
  }
  return result;
}

uint64_t sub_10000C9D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000C9D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10000C9DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C9E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AdvertisementProtocolHeader.CodingKeys(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for AdvertisementProtocolHeader.CodingKeys()
{
  return &unk_1000C9F20;
}

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v11,  1,  v4);
  }

  uint64_t result = (void *)swift_arrayDestroy(&v4[16 * a1 + 32], v7, &type metadata for String);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    unint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *int v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

LABEL_28:
  char v19 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  unint64_t v27 = *v32;
  *(void *)(*v32 + 8 * (a5 >> 6) + 56) |= 1LL << a5;
  uint64_t v28 = (void *)(*(void *)(v27 + 48) + 32 * a5);
  *uint64_t v28 = a1;
  v28[1] = a2;
  v28[2] = a3;
  v28[3] = a4;
  xpc_object_t v29 = *(void *)(v27 + 16);
  uint64_t v30 = __OFADD__(v29, 1LL);
  uint64_t v31 = v29 + 1;
  if (v30) {
    __break(1u);
  }
  else {
    *(void *)(v27 + swift_weakDestroy(v0 + 16) = v31;
  }
}

  __break(1u);
}

  uint64_t v61 = *(void *)(v0 + 216);
  v62 = *(void *)(v0 + 224);
  v64 = *(void *)(v0 + 200);
  v63 = *(void *)(v0 + 208);
  v65 = *(void *)(v0 + 192);
  unint64_t v67 = *(void *)(v0 + 160);
  v66 = *(void *)(v0 + 168);
  unint64_t v68 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v62);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    swift_once(&one-time initialization token for host, one-time initialization function for host);
    goto LABEL_23;
  }

  swift_bridgeObjectRelease(v87);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v60,  type metadata accessor for NearbyProtoConnectionRequest);
  v64 = (uint64_t)v50;
  return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v64,  type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }

uint64_t sub_10000CF18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000D5F8C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t objectdestroyTm()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }

  return result;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10000D16C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x80000001000AF290LL);
}

void *one-time initialization function for defaultNearbyGroupPseudonymConfig()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AB4C0;
  *(void *)(inited + 32) = 0xD000000000000031LL;
  *(void *)(inited + 40) = 0x80000001000AF250LL;
  *(void *)(inited + 48) = 36000LL;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 80) = 0xD00000000000003CLL;
  *(void *)(inited + 88) = 0x80000001000AF290LL;
  *(void *)(inited + 96) = 3600LL;
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 128) = 0xD000000000000031LL;
  *(void *)(inited + 136) = 0x80000001000AF2D0LL;
  *(void *)(inited + 144) = 5LL;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 176) = 0xD000000000000017LL;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Int;
  *(void *)(inited + 184) = 0x80000001000AF310LL;
  *(void *)(inited + 192) = 4LL;
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  defaultNearbyGroupPseudonymConfig._rawValue = result;
  return result;
}

uint64_t NearbyGroupServerBag.BagKey.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10000D2BC + 4 * byte_1000AB2F4[a1]))( 0xD000000000000031LL,  0x80000001000AF250LL);
}

uint64_t sub_10000D2BC(uint64_t a1)
{
  return a1 + 11;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NearbyGroupServerBag.BagKey( unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = NearbyGroupServerBag.BagKey.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = NearbyGroupServerBag.BagKey.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyGroupServerBag.BagKey()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = NearbyGroupServerBag.BagKey.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyGroupServerBag.BagKey(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroupServerBag.BagKey( uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = NearbyGroupServerBag.BagKey.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyGroupServerBag.BagKey@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized NearbyGroupServerBag.BagKey.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NearbyGroupServerBag.BagKey@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = NearbyGroupServerBag.BagKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void IDSServiceError.hash(into:)()
{
}

Swift::Int IDSServiceError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroupServerBag.Errors( uint64_t a1)
{
  return Hasher._finalize()();
}

double NearbyGroupServerBag.nearbyGroupPseudonymTTL.getter()
{
  unsigned __int8 v1 = v0;
  [v0 doubleValue];
  double v3 = v2;

  return v3;
}

double NearbyGroupServerBag.nearbyGroupPseudonymTTLSingleUse.getter()
{
  unsigned __int8 v1 = v0;
  [v0 doubleValue];
  double v3 = v2;

  return v3;
}

double NearbyGroupServerBag.nearbyGroupPseudonymRefreshSkew.getter()
{
  unsigned __int8 v1 = v0;
  [v0 doubleValue];
  double v3 = v2;

  return v3;
}

id NearbyGroupServerBag.nearbyGroupHostLimit.getter()
{
  unsigned __int8 v1 = v0;
  id v2 = [v0 integerValue];

  return v2;
}

double NearbyGroupServerBag.pseudonymConfig(service:reusable:)@<D0>( void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  if (!v3)
  {
    __int128 v6 = v7[1];
    *a3 = v7[0];
    a3[1] = v6;
    double result = *(double *)&v8;
    a3[2] = v8;
  }

  return result;
}

void __swiftcall NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)( com_apple_SharePlay_NearbyInvitationsService::Pseudonym::Configuration *__return_ptr retstr, Swift::String featureID, Swift::Bool reusable)
{
  __int128 v4 = v5[1];
  retstr->featureID = (Swift::String)v5[0];
  *(_OWORD *)&retstr->minimumExpirationInSeconds = v4;
  retstr->reuseIdentifier = (Swift::String_optional)v5[2];
}

unint64_t specialized NearbyGroupServerBag.BagKey.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of NearbyGroupServerBag.BagKey.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

void specialized NearbyGroupServerBag.numericConfig(for:)(char a1)
{
  if ([(id)objc_opt_self(FTServerBag) sharedInstance]) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10000D984LL);
}

void specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  specialized NearbyGroupServerBag.numericConfig(for:)((a3 & 1) == 0);
  uint64_t v9 = v8;
  [v8 doubleValue];
  uint64_t v11 = v10;

  specialized NearbyGroupServerBag.numericConfig(for:)(2);
  uint64_t v13 = v12;
  [v12 doubleValue];
  uint64_t v15 = v14;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = v11;
  a4[3] = v15;
  a4[4] = 0LL;
  a4[5] = 0LL;
}

void specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)( void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    if (v7 == 0xD000000000000030LL && v8 == 0x80000001000AF400LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000030LL, 0x80000001000AF400LL, v7, v8, 0LL) & 1) != 0
      || v9 == 0xD000000000000032LL && v10 == 0x80000001000AF8F0LL)
    {
      swift_bridgeObjectRelease(v10);
LABEL_8:
      char v11 = a2 & 1;
      uint64_t v12 = v21;
      uint64_t v13 = v21;
      uint64_t v14 = 0x72656C676E617257LL;
      uint64_t v15 = 0xE800000000000000LL;
LABEL_12:
      specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)(v14, v15, v11, v13);
      uint64_t v17 = *((void *)v12 + 1);
      __int128 v18 = *((_OWORD *)v12 + 1);
      __int128 v19 = *((_OWORD *)v12 + 2);
      *(void *)a3 = *(void *)v12;
      *(void *)(a3 + 8) = v17;
      *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = v18;
      *(_OWORD *)(a3 + 32) = v19;
      return;
    }

    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032LL, 0x80000001000AF8F0LL, v9, v10, 0LL);
    uint64_t v7 = swift_bridgeObjectRelease(v10);
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if (_TUIsInternalInstall(v7))
  {
    char v11 = a2 & 1;
    uint64_t v12 = v22;
    uint64_t v13 = v22;
    uint64_t v14 = 0x6C6F6F74736469LL;
    uint64_t v15 = 0xE700000000000000LL;
    goto LABEL_12;
  }

  unint64_t v20 = lazy protocol witness table accessor for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors();
  swift_allocError(&type metadata for NearbyGroupServerBag.Errors, v20, 0LL, 0LL);
  swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupServerBag.BagKey,  &type metadata for NearbyGroupServerBag.BagKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupServerBag.Errors,  &type metadata for NearbyGroupServerBag.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupServerBag.Errors,  &type metadata for NearbyGroupServerBag.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors);
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag()
{
  return &type metadata for NearbyGroupServerBag;
}

uint64_t getEnumTagSinglePayload for NearbyGroupServerBag.BagKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for NearbyGroupServerBag.BagKey( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10000DD50 + 4 * byte_1000AB2FD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000DD84 + 4 * byte_1000AB2F8[v4]))();
}

uint64_t sub_10000DD84(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DD8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000DD94LL);
  }
  return result;
}

uint64_t sub_10000DDA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000DDA8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10000DDAC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DDB4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag.BagKey()
{
  return &type metadata for NearbyGroupServerBag.BagKey;
}

uint64_t getEnumTagSinglePayload for NearbyGroupServerBag.Errors(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NearbyGroupServerBag.Errors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10000DE64 + 4 * byte_1000AB302[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10000DE84 + 4 * byte_1000AB307[v4]))();
  }
}

_BYTE *sub_10000DE64(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10000DE84(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000DE8C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000DE94(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000DE9C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000DEA4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag.Errors()
{
  return &type metadata for NearbyGroupServerBag.Errors;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

void IDSService.allAliases.getter()
{
  v31[1] = &_swiftEmptyArrayStorage;
  id v1 = [v0 accounts];
  if (!v1) {
    goto LABEL_38;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSAccount,  &OBJC_CLASS___IDSAccount_ptr);
  unint64_t v4 = lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  uint64_t v28 = v3;
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    if (v5 < 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v8, v3, v4);
    uint64_t v5 = v31[2];
    uint64_t v29 = v31[3];
    uint64_t v9 = v31[4];
    uint64_t v10 = v31[5];
    unint64_t v11 = v31[6];
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v12 = -1LL << *(_BYTE *)(v5 + 32);
    uint64_t v29 = v5 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(v5 + 56);
  }

  int64_t v15 = (unint64_t)(v9 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_14;
  }
LABEL_12:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    uint64_t v18 = v10;
    goto LABEL_31;
  }

  int64_t v22 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v22 >= v15) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v29 + 8 * v22);
    uint64_t v18 = v10 + 1;
    if (!v23)
    {
      uint64_t v18 = v10 + 2;
      if (v10 + 2 >= v15) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v29 + 8 * v18);
      if (!v23)
      {
        uint64_t v18 = v10 + 3;
        if (v10 + 3 >= v15) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v29 + 8 * v18);
        if (!v23)
        {
          uint64_t v18 = v10 + 4;
          if (v10 + 4 >= v15) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v29 + 8 * v18);
          if (!v23)
          {
            uint64_t v24 = v10 + 5;
            while (v15 != v24)
            {
              unint64_t v23 = *(void *)(v29 + 8 * v24++);
              if (v23)
              {
                uint64_t v18 = v24 - 1;
                goto LABEL_30;
              }
            }

            goto LABEL_35;
          }
        }
      }
    }

LABEL_35:
    outlined consume of Set<IDSAccount>.Iterator._Variant(v5);
    return;
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

      v71 += 4;
      if (!--v70)
      {
        swift_bridgeObjectRelease(v58);
        v63 = v115;
        goto LABEL_48;
      }
    }
  }

  swift_bridgeObjectRelease(v58);
LABEL_48:
  swift_bridgeObjectRelease(v69);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v94 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v94, (uint64_t)static Log.host);
  uint64_t v95 = swift_bridgeObjectRetain_n(v63, 2LL);
  uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
  v99 = static os_log_type_t.error.getter(v96, v97, v98);
  if (os_log_type_enabled(v96, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v101 = swift_slowAlloc(32LL, -1LL);
    v122 = v101;
    *(_DWORD *)v100 = 136315138;
    swift_bridgeObjectRetain(v63);
    v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v63, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v100 + 4, v100 + 12);
    swift_bridgeObjectRelease_n(v63, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v96,  v99,  "Failed message verification. fromID %s not present in membership list.",  v100,  0xCu);
    swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v100, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v63, 2LL);
  }

  v102 = v112;
  v103 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
  v104 = swift_allocError(&type metadata for NearbyGroupHostIDSService.Errors, v103, 0LL, 0LL);
  *v105 = 0;
  swift_willThrow(v104);
  return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v114, v43);
}

unint64_t lazy protocol witness table accessor for type IDSAccount and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSAccount and conformance NSObject;
  if (!lazy protocol witness table cache variable for type IDSAccount and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue( 255LL,  &lazy cache variable for type metadata for IDSAccount,  &OBJC_CLASS___IDSAccount_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject);
  }

  return result;
}

uint64_t outlined consume of Set<IDSAccount>.Iterator._Variant(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v14,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

LABEL_23:
  __break(1u);
LABEL_24:
  char v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v7 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }

    uint64_t v31 = *(void *)(v13 + 40);
    uint64_t v32 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    uint64_t v33 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      id v21 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v36 = 0;
      id v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        os_log_type_t v39 = *(void *)(v18 + 8 * v35);
      }

      while (v39 == -1);
      id v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v13 + 48) + v28 * v21,  v10,  v6);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  uint64_t v3 = v42;
  id v25 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v40 = 1LL << *(_BYTE *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v25 = -1LL << v40;
  }
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v11);
  *uint64_t v3 = v13;
  return result;
}

    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v7 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }

    uint64_t v31 = *(void *)(v13 + 40);
    uint64_t v32 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    uint64_t v33 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      id v21 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v36 = 0;
      id v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        os_log_type_t v39 = *(void *)(v18 + 8 * v35);
      }

      while (v39 == -1);
      id v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v13 + 48) + v28 * v21,  v10,  v6);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  uint64_t v3 = v42;
  id v25 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v40 = 1LL << *(_BYTE *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v25 = -1LL << v40;
  }
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v11);
  *uint64_t v3 = v13;
  return result;
}

    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v7 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      uint64_t v44 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v23);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      uint64_t v44 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v23);
      swift_retain();
    }

    uint64_t v30 = *(void *)(v13 + 40);
    uint64_t v31 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6))) != 0)
    {
      id v21 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v18 + 8 * v34);
      }

      while (v38 == -1);
      id v21 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v13 + 48) + v28 * v21,  v10,  v6);
    *(_OWORD *)(*(void *)(v13 + 56) + 16 * v21) = v44;
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  uint64_t v3 = v40;
  id v25 = v42;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  os_log_type_t v39 = 1LL << *(_BYTE *)(v11 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v25 = -1LL << v39;
  }
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v11);
  *uint64_t v3 = v13;
  return result;
}

    uint64_t v19 = (v28 - 1) & v28;
    id v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    uint64_t v30 = *(void *)(v9 + 72);
    uint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v12, v31, v8);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, v31, v8);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain(v32);
    }

    uint64_t v33 = *(void *)(v15 + 40);
    uint64_t v34 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v8, v34);
    uint64_t v35 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v38 = 0;
      os_log_type_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        char v41 = *(void *)(v20 + 8 * v37);
      }

      while (v41 == -1);
      unint64_t v23 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v15 + 48) + v30 * v23,  v12,  v8);
    *(void *)(*(void *)(v15 + 56) + 8 * v23) = v32;
    ++*(void *)(v15 + 16);
  }

  swift_release(v13);
  int64_t v5 = v44;
  uint64_t v27 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v42 = 1LL << *(_BYTE *)(v13 + 32);
  if (v42 >= 64) {
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v27 = -1LL << v42;
  }
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v13);
  *int64_t v5 = v15;
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  unint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NearbyAdvertisement(0LL);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    uint64_t v10 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = v9[5];
    uint64_t v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    id v21 = result & ~v20;
    int64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      id v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          int64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  unint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  char v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    char v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  unint64_t v9 = __CocoaSet.element(at:)(a1, a2, v8);
  id v21 = v9;
  uint64_t v10 = type metadata accessor for NearbyGroupMember(0LL);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

void *NearbyInvitationJoinRequestController.invitationReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyInvitationJoinRequestController.invitationReuseIdentifier;
}

unint64_t static NearbyInvitationJoinRequestController.invitationReuseIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

BOOL static NearbyInvitationServiceBluetoothController.Errors.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationServiceBluetoothController.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NearbyInvitationServiceBluetoothController.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

id NearbyInvitationJoinRequestController.__allocating_init(sessionProvider:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestController.init(sessionProvider:)(a1);
}

id NearbyInvitationJoinRequestController.init(sessionProvider:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_sessionProvider] = a1;
  if (a1 == 1)
  {
    id v2 = objc_allocWithZone(&OBJC_CLASS___IDSService);
    id v3 = v1;
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t v1 = (char *)[v2 initWithService:v4];

    if (v1)
    {
      *(void *)&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service] = v1;

      v7.receiver = v3;
      v7.super_class = (Class)type metadata accessor for NearbyInvitationJoinRequestController();
      return objc_msgSendSuper2(&v7, "init");
    }

    __break(1u);
  }

  uint64_t v8 = a1;
  uint64_t v6 = v1;
  id result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for NearbyInvitationSessionProvider,  &v8,  &type metadata for NearbyInvitationSessionProvider,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t NearbyInvitationSessionProvider.serviceName.getter(uint64_t a1)
{
  if (a1 == 1) {
    return 0xD000000000000030LL;
  }
  v4[1] = v1;
  void v4[2] = v2;
  v4[0] = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for NearbyInvitationSessionProvider,  v4,  &type metadata for NearbyInvitationSessionProvider,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NearbyInvitationJoinRequestController()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController);
}

uint64_t NearbyInvitationJoinRequestController.generateInvitation()(uint64_t a1)
{
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = v1;
  return swift_task_switch(NearbyInvitationJoinRequestController.generateInvitation(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  id v3 = *(void **)v2;
  NSString v4 = *(void *)(*(void *)v2 + 312LL);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    int64_t v5 = NearbyInvitationJoinRequestController.generateInvitation();
  }

  else
  {
    swift_bridgeObjectRelease(v3[38]);
    int64_t v5 = NearbyInvitationJoinRequestController.generateInvitation();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t NearbyInvitationJoinRequestController.generateInvitation()()
{
  uint64_t v1 = v0 + 14;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v2 = (void *)v0[36];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v0[37] = __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  NSString v4 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  objc_super v7 = (void *)v0[36];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[34] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v8 + 4, v8 + 12);
    *uint64_t v19 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Received request to generate invitation.", v8, 0xCu);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v19, 1LL, v10);
    uint64_t v1 = v0 + 14;
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v11 = *(void **)(v0[36]
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service);
  v0[17] = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSService,  &OBJC_CLASS___IDSService_ptr);
  v0[18] = &protocol witness table for IDSService;
  v0[14] = v11;
  id v12 = v11;
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v1, 1, (uint64_t)(v0 + 8));
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  v0[38] = v14;
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  outlined init with take of String?((uint64_t)(v0 + 12), (uint64_t)(v0 + 28));
  outlined release of String?((uint64_t)(v0 + 28));
  v0[2] = v13;
  v0[3] = v14;
  v0[4] = v15;
  v0[5] = v16;
  v0[6] = 0xD00000000000001BLL;
  v0[7] = 0x80000001000AF930LL;
  unint64_t v17 = (void *)swift_task_alloc(unk_1000D5504);
  v0[39] = v17;
  *unint64_t v17 = v0;
  v17[1] = NearbyInvitationJoinRequestController.generateInvitation();
  return v20((uint64_t)v1, (uint64_t)(v0 + 2));
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  os_log_s *v19;
  os_log_type_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[5];
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 19;
  uint64_t v3 = v0[40];
  NSString v4 = (char *)v0[36];
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 14);
  swift_beginAccess(v3 + 16, v0 + 22, 0LL, 0LL);
  os_log_type_t v5 = [*(id *)(v3 + 16) URI];
  BOOL v6 = [v5 prefixedURI];

  objc_super v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  id v9 = v8;

  uint64_t v10 = type metadata accessor for Pseudonym();
  v38[3] = v10;
  id v37 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym,  (uint64_t (*)(uint64_t))type metadata accessor for Pseudonym,  (uint64_t)&protocol conformance descriptor for Pseudonym);
  v38[0] = v3;
  v38[4] = v37;
  swift_beginAccess( &v4[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle],  v1 + 25,  33LL,  0LL);
  swift_bridgeObjectRetain(v9);
  swift_retain(v3);
  specialized Dictionary.subscript.setter((uint64_t)v38, v7, v9);
  swift_endAccess(v1 + 25);
  uint64_t v11 = type metadata accessor for OwnerCredentials(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  id v12 = OwnerCredentials.init()();
  uint64_t v13 = &v4[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle];
  swift_beginAccess( &v4[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle],  v2,  33LL,  0LL);
  swift_bridgeObjectRetain(v9);
  swift_retain(v12);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v13);
  v38[0] = *(void *)v13;
  *(void *)uint64_t v13 = 0x8000000000000000LL;
  uint64_t v35 = v7;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v12,  v7,  v9,  isUniquelyReferenced_nonNull_native,  &demangling cache variable for type metadata for _DictionaryStorage<String, OwnerCredentials>);
  uint64_t v15 = *(void *)v13;
  *(void *)uint64_t v13 = v38[0];
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v9);
  swift_endAccess(v2);
  uint64_t v16 = v4;
  swift_retain_n(v12, 2LL);
  unint64_t v17 = v16;
  uint64_t v18 = swift_bridgeObjectRetain(v9);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  uint64_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v36 = v10;
    id v21 = (void *)v1[36];
    int64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    v1[30] = v21;
    v38[0] = v34;
    *(_DWORD *)int64_t v22 = 138412802;
    uint64_t v33 = v11;
    unint64_t v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 30, v1 + 31, v22 + 4, v22 + 12);
    *uint64_t v32 = v21;
    uint64_t v10 = v36;

    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    v1[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v9, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 31, v1 + 32, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v22 + 22) = 2080;
    v1[32] = v12;
    swift_retain(v12);
    uint64_t v24 = String.init<A>(reflecting:)(v1 + 32, v33);
    uint64_t v26 = v25;
    v1[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 33, v1 + 34, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease(v26);
    swift_release_n(v12, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Generated invitation, [%s] = %s", (uint8_t *)v22, 0x20u);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v32, 1LL, v27);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    uint64_t v28 = (void *)v1[36];

    swift_bridgeObjectRelease_n(v9, 2LL);
    swift_release_n(v12, 2LL);
  }

  uint64_t v29 = v1[40];
  uint64_t v30 = (void *)v1[35];
  v30[3] = v10;
  v30[4] = v37;
  *uint64_t v30 = v29;
  return ((uint64_t (*)(uint64_t))v1[1])(v12);
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 304));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = v3;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of PseudonymProtocol((__int128 *)a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *NSString v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for PseudonymProtocol?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for PseudonymProtocol?);
  }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1LL, v10) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for NWBrowser.Result?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(a2, v15);
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for NWBrowser.Result?);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v18 = *v3;
    *uint64_t v3 = v21;
    swift_bridgeObjectRelease(v18);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a2, v19);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationJoinRequestController.releaseInvitation(for:)( Swift::String a1)
{
  uint64_t object = (uint64_t)a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = v1;
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v6 = (char *)v5;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v35 = v6;
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    v43[0] = v34;
    *(_DWORD *)uint64_t v9 = 138412546;
    uint64_t v41 = (uint64_t)v35;
    unint64_t v10 = object;
    uint64_t v11 = countAndFlagsBits;
    uint64_t v12 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v9 + 4, v9 + 12);
    *uint64_t v33 = v35;

    uint64_t countAndFlagsBits = v11;
    uint64_t object = v10;
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain(v10);
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v10, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v10, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%@ Received request to release invitation owned by: %s",  (uint8_t *)v9,  0x16u);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v33, 1LL, v13);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v14 = v9;
    uint64_t v6 = v35;
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 2LL);
  }

  uint64_t v15 = &v6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle];
  swift_beginAccess( &v6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle],  v44,  0LL,  0LL);
  uint64_t v16 = *(void *)v15;
  if (*(void *)(*(void *)v15 + 16LL)
    && (swift_bridgeObjectRetain(object),
        swift_bridgeObjectRetain(v16),
        specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, object),
        char v18 = v17,
        swift_bridgeObjectRelease(object),
        swift_bridgeObjectRelease(v16),
        (v18 & 1) != 0))
  {
    swift_beginAccess(v15, v43, 33LL, 0LL);
    uint64_t v19 = specialized Dictionary._Variant.removeValue(forKey:)( countAndFlagsBits,  object,  &demangling cache variable for type metadata for _DictionaryStorage<String, OwnerCredentials>);
    swift_endAccess(v43);
    swift_release(v19);
    swift_beginAccess( &v6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle],  &v41,  33LL,  0LL);
    specialized Dictionary._Variant.removeValue(forKey:)(countAndFlagsBits, object, (uint64_t)v43);
    swift_endAccess(&v41);
    outlined init with copy of (String, Any)( (uint64_t)v43,  (uint64_t)&v41,  &demangling cache variable for type metadata for PseudonymProtocol?);
    uint64_t v20 = v6;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v36;
      *(_DWORD *)uint64_t v23 = 138412546;
      *(void *)&__int128 v39 = v20;
      id v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8, v23 + 4, v23 + 12);
      *uint64_t v24 = v20;

      *(_WORD *)(v23 + 12) = 2080;
      outlined init with copy of (String, Any)( (uint64_t)&v41,  (uint64_t)&v39,  &demangling cache variable for type metadata for PseudonymProtocol?);
      if (v40)
      {
        outlined init with take of PseudonymProtocol(&v39, (uint64_t)v38);
        outlined init with copy of PseudonymProtocol((uint64_t)v38, (uint64_t)v37);
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProtocol);
        uint64_t v27 = String.init<A>(reflecting:)(v37, v26);
        unint64_t v29 = v28;
        __swift_destroy_boxed_opaque_existential_0Tm(v38);
      }

      else
      {
        unint64_t v29 = 0xE300000000000000LL;
        uint64_t v27 = 7104878LL;
      }

      *(void *)&__int128 v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease(v29);
      outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for PseudonymProtocol?);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Released: %s", (uint8_t *)v23, 0x16u);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v24, 1LL, v32);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for PseudonymProtocol?);
    }

    outlined destroy of Any?((uint64_t)v43, &demangling cache variable for type metadata for PseudonymProtocol?);
  }

  else
  {
    unint64_t v30 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v30, 0LL, 0LL);
    _BYTE *v31 = 0;
    swift_willThrow();
  }

os_log_s *NearbyInvitationJoinRequestController.encrypt(_:responseKey:invitation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  uint64_t v12 = swift_bridgeObjectRetain_n(a6, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v34 = a5;
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = a3;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    v37[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain(a6);
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a6, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a6, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Attempting encryption for: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v17 = v16;
    a3 = v32;
    swift_slowDealloc(v17, -1LL, -1LL);
    char v18 = v15;
    a5 = v34;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a6, 2LL);
  }

  uint64_t v19 = (uint64_t *)(v35
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle);
  swift_beginAccess( v35 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle,  v37,  0LL,  0LL);
  uint64_t v20 = *v19;
  if (*(void *)(v20 + 16))
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(v20);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_retain(v23);
      swift_bridgeObjectRelease(a6);
      swift_bridgeObjectRelease(v20);
      uint64_t v24 = (os_log_s *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 136LL))( a1,  a2,  a3,  a4);
      swift_release(v23);
      return v24;
    }

    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v20);
  }

  uint64_t v25 = swift_bridgeObjectRetain_n(a6, 2LL);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain(a6);
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(a6, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "Failed to find credentials for invitation %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a6, 2LL);
  }

  unint64_t v29 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v29, 0LL, 0LL);
  *unint64_t v30 = 0;
  swift_willThrow();
  return v24;
}

uint64_t NearbyInvitationJoinRequestController.decrypt(_:to:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v76 = a3;
  uint64_t v71 = a1;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v70 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinRequest?);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v68 - v15;
  uint64_t v17 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v72 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v68 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v68 - v27;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  uint64_t v73 = a2;
  uint64_t v31 = outlined init with copy of NearbyProtoJoinRequest(a2, (uint64_t)v28);
  uint64_t v75 = v30;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v69 = a4;
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v68 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v78[0] = v68;
    *(_DWORD *)uint64_t v34 = 136315138;
    outlined init with copy of NearbyProtoJoinRequest((uint64_t)v28, (uint64_t)v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0LL, 1LL, v17);
    outlined init with copy of (String, Any)( (uint64_t)v16,  v13,  &demangling cache variable for type metadata for NearbyProtoJoinRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v13, 1LL, v17) == 1)
    {
      unint64_t v35 = 0xE300000000000000LL;
      uint64_t v13 = 7104878LL;
    }

    else
    {
      outlined init with take of NearbyProtoJoinRequest(v13, (uint64_t)v25);
      uint64_t v36 = v72;
      outlined init with copy of NearbyProtoJoinRequest((uint64_t)v25, v72);
      uint64_t v13 = String.init<A>(reflecting:)(v36, v17);
      unint64_t v35 = v37;
      outlined destroy of NearbyProtoJoinRequest((uint64_t)v25);
    }

    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for NearbyProtoJoinRequest?);
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v35, (uint64_t *)v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease(v35);
    outlined destroy of NearbyProtoJoinRequest((uint64_t)v28);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Attempting decryption of: %s", v34, 0xCu);
    uint64_t v38 = v68;
    swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);

    a4 = v69;
  }

  else
  {
    outlined destroy of NearbyProtoJoinRequest((uint64_t)v28);
  }

  uint64_t v39 = v77
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle;
  swift_beginAccess( v77 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle,  &v80,  0LL,  0LL);
  uint64_t v40 = *(void *)v39;
  if (*(void *)(*(void *)v39 + 16LL))
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v40);
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v76, a4);
    if ((v42 & 1) != 0)
    {
      uint64_t v43 = *(void *)(*(void *)(v40 + 56) + 8 * v41);
      swift_retain(v43);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v40);
      uint64_t v44 = (uint64_t *)(v73 + *(int *)(v17 + 24));
      unint64_t v45 = v44[1];
      if (v45 >> 60 == 15) {
        uint64_t v46 = 0LL;
      }
      else {
        uint64_t v46 = *v44;
      }
      if (v45 >> 60 == 15) {
        unint64_t v47 = 0xC000000000000000LL;
      }
      else {
        unint64_t v47 = v44[1];
      }
      uint64_t v48 = (uint64_t *)(v73 + *(int *)(v17 + 20));
      uint64_t v49 = *v48;
      unint64_t v50 = v48[1];
      if (v50 >> 60 == 15) {
        uint64_t v51 = 0LL;
      }
      else {
        uint64_t v51 = *v48;
      }
      if (v50 >> 60 == 15) {
        unint64_t v52 = 0xC000000000000000LL;
      }
      else {
        unint64_t v52 = v48[1];
      }
      uint64_t v13 = *(void *)(*(void *)v43 + 128LL);
      outlined copy of Data?(*v44, v45);
      outlined copy of Data?(v49, v50);
      uint64_t v53 = v74;
      uint64_t v54 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t))v13)(v46, v47, v51, v52);
      if (v53)
      {
        outlined consume of Data._Representation(v51, v52);
        outlined consume of Data._Representation(v46, v47);
      }

      else
      {
        uint64_t v63 = v55;
        uint64_t v13 = v56;
        uint64_t v77 = v54;
        outlined consume of Data._Representation(v51, v52);
        outlined consume of Data._Representation(v46, v47);
        uint64_t v64 = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
        uint64_t v79 = 0LL;
        memset(v78, 0, sizeof(v78));
        v65 = v70;
        BinaryDecodingOptions.init()();
        uint64_t v66 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
        Message.init(serializedData:extensions:partial:options:)(v77, v63, v78, 0LL, v65, v64, v66);
      }

      swift_release(v43);
      return v13;
    }

    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v40);
  }

  uint64_t v57 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v78[0] = v13;
    *(_DWORD *)uint64_t v60 = 136315138;
    swift_bridgeObjectRetain(a4);
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, a4, (uint64_t *)v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to find credentials for invitation %s", v60, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  unint64_t v61 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v61, 0LL, 0LL);
  _BYTE *v62 = 0;
  swift_willThrow();
  return v13;
}

Swift::Void __swiftcall NearbyInvitationJoinRequestController.markAllPseudonymsUsed()()
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle,  v31,  0LL,  0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = one-time initialization token for default;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1) {
LABEL_30:
  }
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v28[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v2);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProtocol);
    uint64_t v11 = Dictionary.Values.description.getter(v2, &type metadata for String, v10, &protocol witness table for String);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(v2);
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v2, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Marking all generated pseudonyms as used: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v2, 2LL);
  }

  uint64_t v14 = v2 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v2 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(v2);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_9;
    }

    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v18) {
      goto LABEL_27;
    }
    unint64_t v25 = *(void *)(v14 + 8 * v24);
    ++v19;
    if (!v25)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v18) {
        goto LABEL_27;
      }
      unint64_t v25 = *(void *)(v14 + 8 * v19);
      if (!v25)
      {
        int64_t v19 = v24 + 2;
        if (v24 + 2 >= v18) {
          goto LABEL_27;
        }
        unint64_t v25 = *(void *)(v14 + 8 * v19);
        if (!v25)
        {
          int64_t v19 = v24 + 3;
          if (v24 + 3 >= v18) {
            goto LABEL_27;
          }
          unint64_t v25 = *(void *)(v14 + 8 * v19);
          if (!v25) {
            break;
          }
        }
      }
    }

LABEL_26:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v21 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_9:
    outlined init with copy of PseudonymProtocol(*(void *)(v2 + 56) + 40 * v21, (uint64_t)v28);
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v23 + 56))(v22, v23);
    __swift_destroy_boxed_opaque_existential_0Tm(v28);
  }

  int64_t v26 = v24 + 4;
  if (v26 < v18)
  {
    unint64_t v25 = *(void *)(v14 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int64_t v19 = v26 + 1;
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_29;
        }
        if (v19 >= v18) {
          goto LABEL_27;
        }
        unint64_t v25 = *(void *)(v14 + 8 * v19);
        ++v26;
        if (v25) {
          goto LABEL_26;
        }
      }
    }

    int64_t v19 = v26;
    goto LABEL_26;
  }

    unint64_t v20 = (v31 - 1) & v31;
    uint64_t v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_27:
    os_log_type_t v33 = v55;
    uint64_t v34 = *(void *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v25))(v12, *(void *)(v55 + 48) + v34 * v28, v9);
    unint64_t v35 = *(void *)(v33 + 56);
    uint64_t v36 = *(void *)(v58 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + v25))(v57, v35 + v36 * v28, v59);
    unint64_t v37 = *(void *)(v16 + 40);
    uint64_t v38 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v9, v38);
    uint64_t v39 = -1LL << *(_BYTE *)(v16 + 32);
    uint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1LL << v40) & ~*(void *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      int64_t v26 = __clz(__rbit64((-1LL << v40) & ~*(void *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v42 = 0;
      uint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }

        uint64_t v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0LL;
        }
        v42 |= v44;
        unint64_t v45 = *(void *)(v21 + 8 * v41);
      }

      while (v45 == -1);
      int64_t v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }

    *(void *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(void *)(v16 + 48) + v34 * v26, v12, v9);
    uint64_t result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v58 + 32))( *(void *)(v16 + 56) + v36 * v26,  v57,  v59);
    ++*(void *)(v16 + 16);
  }

  uint64_t v32 = v29 + 2;
  if (v32 >= v52)
  {
LABEL_37:
    unint64_t v47 = v55;
    swift_release(v55);
    uint64_t v3 = v51;
    if ((v50 & 1) != 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }

  uint64_t v31 = v53[v32];
  if (v31)
  {
    uint64_t v23 = v32;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v23 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v23 >= v52) {
      goto LABEL_37;
    }
    uint64_t v31 = v53[v23];
    ++v32;
    if (v31) {
      goto LABEL_26;
    }
  }

        uint64_t v9 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      int64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      int64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            int64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      unint64_t v20 = v3;
      unint64_t v21 = *(void *)(v3 + 48) + 24 * v16;
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      int64_t v24 = *(_BYTE *)(v21 + 16);
      Hasher.init(_seed:)(v36, *(void *)(v6 + 40));
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v36, v22, v23);
      swift_bridgeObjectRelease(v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v10 + 8 * v27);
        }

        while (v31 == -1);
        unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
      *(void *)uint64_t v14 = v22;
      *(void *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v24;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v20;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      unint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v23 = result & ~v22;
      int64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            int64_t v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v9 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }

      int64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
      unint64_t v20 = *(void *)(v6 + 40);
      unint64_t v21 = type metadata accessor for AnyCancellable(0LL);
      uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v10 + 8 * v25);
        }

        while (v29 == -1);
        unint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      unint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 32 * v16);
      unint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      int64_t v24 = v20[2];
      uint64_t v23 = v20[3];
      Hasher.init(_seed:)(v36, *(void *)(v6 + 40));
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v36, v21, v22);
      swift_bridgeObjectRelease(v22);
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v23);
        String.hash(into:)(v36, v24, v23);
        swift_bridgeObjectRelease(v23);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v10 + 8 * v27);
        }

        while (v31 == -1);
        unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = (void *)(*(void *)(v6 + 48) + 32 * v13);
      *uint64_t v14 = v21;
      v14[1] = v22;
      v14[2] = v24;
      v14[3] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    int64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    int64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          int64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  int64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    int64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(v3 + 48) + 24 * v16;
    unint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(_BYTE *)(v20 + 16);
    Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
    swift_bridgeObjectRetain_n(v22, 2LL);
    String.hash(into:)(v34, v21, v22);
    swift_bridgeObjectRelease(v22);
    uint64_t result = Hasher._finalize()();
    int64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    int64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          int64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v10 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v33)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  int64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18)
  {
    unint64_t v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v33) {
      goto LABEL_36;
    }
    int64_t v18 = *(void *)(v32 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    unint64_t v21 = *(void *)(v6 + 40);
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  int64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    int64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    int64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    unint64_t v20 = *(void *)(v6 + 40);
    unint64_t v21 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v10 + 8 * v25);
      }

      while (v29 == -1);
      unint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  unint64_t v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    unint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 32 * v16);
    unint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v24 = v20[2];
    uint64_t v23 = v20[3];
    Hasher.init(_seed:)(v35, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain_n(v22, 2LL);
    String.hash(into:)(v35, v21, v22);
    swift_bridgeObjectRelease(v22);
    if (v23)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v35, v24, v23);
      swift_bridgeObjectRelease(v23);
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    uint64_t result = Hasher._finalize()();
    unint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v10 + 8 * v27);
      }

      while (v31 == -1);
      unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = (void *)(*(void *)(v6 + 48) + 32 * v13);
    *uint64_t v14 = v21;
    v14[1] = v22;
    v14[2] = v24;
    v14[3] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v34)
  {
LABEL_39:
    uint64_t result = swift_release_n(v3);
    uint64_t v2 = v32;
    goto LABEL_41;
  }

  int64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18)
  {
    unint64_t v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_39;
    }
    int64_t v18 = *(void *)(v33 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v32 = *v5;
    uint64_t v8 = v5[1];
    if ((unint64_t)*v5 >> 62)
    {
      if (v32 < 0) {
        os_log_type_t v33 = *v5;
      }
      else {
        os_log_type_t v33 = v32 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v5);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v32);
      if (v8 == v34) {
        goto LABEL_3;
      }
    }

    else if (v8 == *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_3;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

LABEL_27:
  swift_release(v2);
  swift_bridgeObjectRelease(v2);
}

  __break(1u);
  return result;
}

    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v19 = *(void *)v17;
    int64_t v18 = *(void *)(v17 + 8);
    LOBYTE(v17) = *(_BYTE *)(v17 + 16);
    unint64_t v20 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v20 = v19;
    *(void *)(v20 + 8) = v18;
    *(_BYTE *)(v20 + swift_weakDestroy(v0 + 16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    uint64_t result = v17;
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  int64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    unint64_t v20 = v17[2];
    int64_t v19 = v17[3];
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v18);
  }

  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    swift_once(&one-time initialization token for host, one-time initialization function for host);
    goto LABEL_8;
  }

  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v48 = v47;

  uint64_t v49 = (objc_class *)type metadata accessor for NearbyGroupMember(0LL);
  unint64_t v50 = objc_allocWithZone(v49);
  swift_bridgeObjectRetain(v48);
  uint64_t v51 = (void *)NearbyGroupMember.init(handle:tokenID:)(v46, v48, 0LL, 0LL);
  unint64_t v52 = objc_allocWithZone(v49);
  swift_bridgeObjectRetain(v41);
  uint64_t v53 = (_BYTE *)NearbyGroupMember.init(handle:tokenID:)(v46, v48, v42, v41);
  uint64_t v54 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB0LL);
  uint64_t v55 = v54();
  uint64_t v56 = specialized Set.contains(_:)(v51, v55);
  uint64_t v57 = swift_bridgeObjectRelease(v55);
  if ((v56 & 1) != 0
    || (uint64_t v58 = ((uint64_t (*)(uint64_t))v54)(v57),
        os_log_type_t v59 = specialized Set.contains(_:)(v53, v58),
        swift_bridgeObjectRelease(v58),
        (v59 & 1) != 0))
  {
    uint64_t v60 = a1 + *(int *)(v128 + 24);
    unint64_t v61 = *(com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member *)v60;
    if ((*(_BYTE *)(v60 + 32) & 1) != 0) {
      NearbyGroupHost.handle(removedMember:)(v61);
    }
    else {
      NearbyGroupHost.handle(addedMember:)(v61);
    }
  }

  else
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v74 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v74, (uint64_t)static Log.group);
    uint64_t v75 = v123;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( a1,  (uint64_t)v123,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    uint64_t v76 = a1;
    uint64_t v77 = v126;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v76,  (uint64_t)v126,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    unint64_t v78 = v2;
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    uint64_t v82 = static os_log_type_t.error.getter(v79, v80, v81);
    if (os_log_type_enabled(v79, (os_log_type_t)v82))
    {
      v116 = v82;
      v124 = v53;
      v127 = v51;
      uint64_t v83 = (uint64_t)v75;
      v84 = swift_slowAlloc(32LL, -1LL);
      uint64_t v85 = (void *)swift_slowAlloc(8LL, -1LL);
      v118 = (_BYTE *)swift_slowAlloc(64LL, -1LL);
      v131 = v118;
      *(_DWORD *)v84 = 138412802;
      v129 = (uint64_t)v78;
      v86 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v84 + 4, v84 + 12);
      v117 = v85;
      *uint64_t v85 = v78;

      *(_WORD *)(v84 + 12) = 2080;
      uint64_t v87 = v128;
      uint64_t v88 = (uint64_t *)(v83 + *(int *)(v128 + 20));
      v89 = *v88;
      uint64_t v90 = v88[1];
      swift_bridgeObjectRetain(v90);
      v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v84 + 14, v84 + 22);
      swift_bridgeObjectRelease(v90);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v83,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      *(_WORD *)(v84 + 22) = 2080;
      uint64_t v91 = (uint64_t)v120;
      uint64_t v92 = v87;
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v126,  (uint64_t)v120,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      uint64_t v93 = v125;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v91, 0LL, 1LL, v87);
      uint64_t v94 = v119;
      outlined init with copy of (String, Any)( v91,  (uint64_t)v119,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
      if ((*(unsigned int (**)(os_log_s *, uint64_t, uint64_t))(v93 + 48))(v94, 1LL, v92) == 1)
      {
        uint64_t v95 = 7104878LL;
        uint64_t v96 = 0xE300000000000000LL;
      }

      else
      {
        v106 = (uint64_t)v94;
        v107 = v122;
        outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v106,  (uint64_t)v122,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        v108 = v121;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v107,  (uint64_t)v121,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        uint64_t v95 = String.init<A>(reflecting:)(v108, v92);
        uint64_t v96 = v109;
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v107,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      }

      outlined destroy of Any?( v91,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
      v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, (uint64_t *)&v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v84 + 24, v84 + 32);
      swift_bridgeObjectRelease(v96);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v126,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      _os_log_impl( (void *)&_mh_execute_header,  v79,  (os_log_type_t)v116,  "%@ couldn't find member %s in membership list. Failing membership mutation: %s",  (uint8_t *)v84,  0x20u);
      v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v111 = v117;
      swift_arrayDestroy(v117, 1LL, v110);
      swift_slowDealloc(v111, -1LL, -1LL);
      v112 = v118;
      swift_arrayDestroy(v118, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1LL, -1LL);
      swift_slowDealloc(v84, -1LL, -1LL);

      uint64_t v51 = v127;
      uint64_t v53 = v124;
    }

    else
    {

      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v75,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v77,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    }

    v113 = lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
    swift_allocError(&type metadata for NearbyGroupHost.Errors, v113, 0LL, 0LL);
    *v114 = 0;
    swift_willThrow();
  }
}

      uint64_t v16 = 0;
    }
  }

  return v16 & 1;
}

  __break(1u);
  return result;
}

    uint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    int64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    int64_t v19 = v18[1];
    unint64_t v20 = *(void **)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v41[0] = *v18;
    *((void *)&v41[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    unint64_t v21 = v20;
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7LL);
    uint64_t v32 = v21;
    uint64_t v22 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NSObject,  &OBJC_CLASS___NSObject_ptr);
    swift_dynamicCast(v36, &v32, v22, (char *)&type metadata for Any + 8, 7LL);
    unint64_t v37 = v33;
    uint64_t v38 = v34;
    uint64_t v39 = v35;
    outlined init with take of Any(v36, v40);
    os_log_type_t v33 = v37;
    uint64_t v34 = v38;
    unint64_t v35 = v39;
    outlined init with take of Any(v40, v41);
    outlined init with take of Any(v41, &v37);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v23 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)&v7[8 * v25];
      }

      while (v29 == -1);
      uint64_t v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v33;
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = v34;
    *(void *)(v11 + 32) = v35;
    uint64_t result = (uint64_t)outlined init with take of Any(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  unint64_t v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of Set<IDSAccount>.Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v31 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v31 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    uint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    int64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    unint64_t v20 = *v18;
    int64_t v19 = v18[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    outlined init with take of Any(v39, v33);
    uint64_t v34 = v30;
    unint64_t v35 = v31;
    uint64_t v36 = v32;
    outlined init with take of Any(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    uint64_t v32 = v36;
    outlined init with take of Any(v37, v38);
    outlined init with take of Any(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)outlined init with take of Any(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  unint64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of Set<IDSAccount>.Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    os_log_type_t v7 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    uint64_t v11 = v18;
LABEL_28:
    unint64_t v20 = (void *)(*(void *)(a1 + 48) + 16 * v15);
    unint64_t v21 = v20[1];
    *(void *)&uint64_t v29 = *v20;
    *((void *)&v29 + 1) = v21;
    swift_bridgeObjectRetain(v21);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7LL);
    uint64_t v29 = v32[0];
    uint64_t v30 = v32[1];
    uint64_t v31 = v33;
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v23 = result & ~v22;
    int64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v9[8 * (v23 >> 6)]) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v9[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          int64_t v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v9[8 * v24];
      }

      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v9[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v12;
    unint64_t v13 = v3[6] + 40 * v12;
    *(_OWORD *)unint64_t v13 = v29;
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = v30;
    *(void *)(v13 + 32) = v31;
    ++v3[2];
  }

  int64_t v19 = v11 + 5;
  if (v11 + 5 >= v8)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of Set<IDSAccount>.Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v11 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v18 >= v8) {
      goto LABEL_37;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_27;
    }
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationJoinRequestController.markUsed(for:)( Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle);
  swift_beginAccess(v4, v23, 0LL, 0LL);
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(v5);
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of PseudonymProtocol(*(void *)(v5 + 56) + 40 * v6, (uint64_t)&v20);
    }

    else
    {
      uint64_t v22 = 0LL;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
    }

    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v5);
    if (*((void *)&v21 + 1))
    {
      outlined init with take of PseudonymProtocol(&v20, (uint64_t)v24);
      uint64_t v8 = v25;
      uint64_t v9 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
      __swift_destroy_boxed_opaque_existential_0Tm(v24);
      return;
    }
  }

  else
  {
    uint64_t v22 = 0LL;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
  }

  outlined destroy of Any?((uint64_t)&v20, &demangling cache variable for type metadata for PseudonymProtocol?);
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  uint64_t v11 = swift_bridgeObjectRetain_n(object, 2LL);
  unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v15 = static os_log_type_t.error.getter(v12, v13, v14);
  if (os_log_type_enabled(v12, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain(object);
    *(void *)&__int128 v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( countAndFlagsBits,  (unint64_t)object,  v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 8, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(object, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v12, v15, "Failed to find pseudonym for handle: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 2LL);
  }

  unint64_t v18 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v18, 0LL, 0LL);
  *int64_t v19 = 0;
  swift_willThrow();
}

os_log_s *NearbyInvitationJoinRequestController.existingInvitationInfo(for:)(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  uint64_t v7 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = v3;
    uint64_t v11 = a1;
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v42[0] = v12;
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, (unint64_t)a2, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting lookup for existing invitation for: %s", v10, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v13 = v12;
    a1 = v11;
    uint64_t v3 = v40;
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v14 = (uint64_t *)(v3
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle);
  swift_beginAccess( v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle,  v42,  0LL,  0LL);
  uint64_t v15 = *v14;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v15);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v15);
LABEL_13:
    uint64_t v28 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v32 = static os_log_type_t.error.getter(v29, v30, v31);
    if (os_log_type_enabled(v29, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v34;
      *(_DWORD *)os_log_type_t v33 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v29, v32, "Failed to find credentials for handle: %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    unint64_t v35 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v35, 0LL, 0LL);
    *uint64_t v36 = 0;
    swift_willThrow();
    return a2;
  }

  uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_retain(v18);
  swift_bridgeObjectRelease(a2);
  uint64_t v19 = swift_bridgeObjectRelease(v15);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 96LL))(v19);
  if (v21 >> 60 == 15)
  {
    a2 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v24 = static os_log_type_t.error.getter(a2, v22, v23);
    if (os_log_type_enabled(a2, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, a2, v24, "Invitation expired. PublicKey data not found.", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    unint64_t v26 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError(&type metadata for NearbyInvitationJoinRequestController.Errors, v26, 0LL, 0LL);
    *uint64_t v27 = 1;
    swift_willThrow();
    swift_release(v18);
  }

  else
  {
    uint64_t v38 = v20;
    unint64_t v39 = v21;
    objc_allocWithZone((Class)type metadata accessor for NearbyInvitationJoinRequestMetadata(0LL));
    swift_bridgeObjectRetain(a2);
    a2 = (os_log_s *)NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)(v38, v39, a1, a2);
    swift_release(v18);
  }

  return a2;
}

id NearbyInvitationServiceHost.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void NearbyInvitationJoinRequestController.init()()
{
}

id NearbyInvitationJoinRequestController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyInvitationJoinRequestController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void protocol witness for IDSServiceProtocol.allAliases.getter in conformance IDSService()
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  os_log_type_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v6 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5);
      uint64_t v15 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    outlined init with take of PseudonymProtocol((__int128 *)(*(void *)(v12 + 56) + 40 * v9), a3);
    specialized _NativeDictionary._delete(at:)(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(v4);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  specialized _NativeDictionary._delete(at:)(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, PassthroughSubject<Data, Error>>);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v19;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = type metadata accessor for NWBrowser.Result(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(void *)(v15 + 72) * v7, v14);
    specialized _NativeDictionary._delete(at:)(v7, v10);
    uint64_t v16 = *v3;
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for NWBrowser.Result(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = v3;
  uint64_t v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v12 = *v5;
  uint64_t v16 = *v5;
  *unint64_t v5 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(a3);
    uint64_t v12 = v16;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
  uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v9);
  specialized _NativeDictionary._delete(at:)(v9, v12);
  uint64_t v14 = *v5;
  *unint64_t v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

Swift::Int specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PseudonymProtocol>);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    uint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  void v40[9];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NearbyAdvertisement>);
  unint64_t v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  char v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = v3;
  uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      uint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        uint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            uint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  uint64_t i;
  char v44;
  char v45;
  char v46;
  void v47[9];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v44 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  char v42 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    uint64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    uint64_t v24 = v42;
    uint64_t v25 = v42[v23];
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      uint64_t v25 = v42[v14];
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        uint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            uint64_t v25 = v42[v14];
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

LABEL_24:
    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    unint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      outlined init with take of PseudonymProtocol(v26, (uint64_t)v40);
    }

    else
    {
      outlined init with copy of PseudonymProtocol((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    Swift::Int result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      unint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    *uint64_t v16 = v25;
    v16[1] = v24;
    Swift::Int result = outlined init with take of PseudonymProtocol(v40, *(void *)(v8 + 56) + 40 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v25, v38);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      Swift::Int result = Hasher._finalize()();
      unint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v29 = 0;
        char v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          unint64_t v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          BOOL v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      Swift::Int result = (uint64_t)outlined init with take of Any(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        __break(1u);
        goto LABEL_25;
      }

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v42 = v2;
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, UInt>);
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
    unint64_t v39 = v42;
LABEL_44:
    *unint64_t v39 = v11;
    return result;
  }

  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v44 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v43 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  HIDWORD(v41) = a2;
  uint64_t v19 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v19 = 32LL;
  }
  uint64_t v45 = v19;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v23 >= v43)
    {
      swift_release(v9);
      unint64_t v39 = v42;
      uint64_t v24 = v44;
      if ((v41 & 0x100000000LL) != 0)
      {
LABEL_39:
        uint64_t v40 = 1LL << *(_BYTE *)(v9 + 32);
        if (v40 >= 64) {
          bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v24 = -1LL << v40;
        }
        *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
      }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v58 = *(void *)(v6 - 8);
  os_log_type_t v59 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v57 = &v49[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v56 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v49[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = *(void *)(*v3 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWBrowser.Result>);
  unint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)(v13, v14, a2);
  uint64_t v16 = v15;
  if (!*(void *)(v13 + 16))
  {
    uint64_t v46 = v13;
LABEL_45:
    uint64_t result = swift_release(v46);
    *uint64_t v3 = v16;
    return result;
  }

  unint64_t v17 = 1LL << *(_BYTE *)(v13 + 32);
  int64_t v18 = *(void *)(v13 + 64);
  uint64_t v53 = (void *)(v13 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1LL << v17);
  }
  else {
    uint64_t v19 = -1LL;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v51 = v3;
  unint64_t v52 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v21 = v15 + 64;
  uint64_t v55 = v13;
  uint64_t result = swift_retain();
  int64_t v23 = 0LL;
  unint64_t v50 = a2;
  uint64_t v24 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v24 = 32LL;
  }
  uint64_t v54 = v24;
  unint64_t v25 = v24;
  while (1)
  {
    if (v20)
    {
      uint64_t v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      uint64_t v28 = v27 | (v23 << 6);
      goto LABEL_27;
    }

    uint64_t v29 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    if (v29 >= v52)
    {
      unint64_t v47 = v55;
      swift_release(v55);
      uint64_t v3 = v51;
      uint64_t v30 = v53;
      if ((v50 & 1) != 0)
      {
LABEL_40:
        uint64_t v48 = 1LL << *(_BYTE *)(v47 + 32);
        if (v48 >= 64) {
          bzero(v30, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v30 = -1LL << v48;
        }
        *(void *)(v47 + swift_weakDestroy(v0 + 16) = 0LL;
      }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  uint64_t i;
  int v46;
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  uint64_t v46 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  int64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0LL;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v43) {
      break;
    }
    unint64_t v25 = v44;
    int64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_36;
      }
      int64_t v26 = v44[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_36:
          swift_release(v11);
          uint64_t v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        int64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v43) {
              goto LABEL_36;
            }
            int64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        unint64_t v20 = v27;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  uint64_t i;
  int v46;
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupHost>);
  uint64_t v46 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  int64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0LL;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v43) {
      break;
    }
    unint64_t v25 = v44;
    int64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_36;
      }
      int64_t v26 = v44[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_36:
          swift_release(v11);
          uint64_t v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        int64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v43) {
              goto LABEL_36;
            }
            int64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        unint64_t v20 = v27;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  void v37[9];
  _OWORD v38[2];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        uint64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          uint64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                unint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v14 = v21;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  int v43;
  __int128 v44;
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:_:)>);
  int64_t v43 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 64);
  char v42 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v40 = v2;
  uint64_t v41 = (unint64_t)(v14 + 63) >> 6;
  int64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v11);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v41) {
              goto LABEL_36;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        unint64_t v20 = v27;
      }
    }

LABEL_43:
      uint64_t result = swift_release(v9);
      goto LABEL_44;
    }

    uint64_t v24 = v44;
    unint64_t v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v25 = v44[v18];
      if (!v25) {
        break;
      }
    }

  __break(1u);
  return result;
}

LABEL_25:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_26:
    uint64_t v27 = *(void *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + v45))(v8, *(void *)(v9 + 48) + v27 * v22, v5);
    uint64_t v28 = v9;
    uint64_t v29 = *(void *)(*(void *)(v9 + 56) + 8 * v22);
    uint64_t v30 = *(void *)(v11 + 40);
    uint64_t v31 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v5, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))( *(void *)(v11 + 48) + v27 * v20,  v8,  v5);
    *(void *)(*(void *)(v11 + 56) + 8 * v20) = v29;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v28;
  }

  int64_t v26 = v23 + 2;
  if (v26 >= v43)
  {
LABEL_36:
    swift_release(v9);
    unint64_t v39 = v42;
    if ((v41 & 0x100000000LL) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  unint64_t v25 = v44[v26];
  if (v25)
  {
    int64_t v18 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v18 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v18 >= v43) {
      goto LABEL_36;
    }
    unint64_t v25 = v44[v18];
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    int64_t v18 = v17[1];
    unint64_t v20 = 40 * v15;
    outlined init with copy of PseudonymProtocol(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of PseudonymProtocol(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    int64_t v18 = *(void *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v18, v1);
    uint64_t v19 = 8 * v17;
    unint64_t v20 = *(void *)(*(void *)(v6 + 56) + v19);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v8 + 48) + v18,  v5,  v1);
    *(void *)(*(void *)(v8 + 56) + v19) = v20;
  }

  int64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = v20;
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v31 - 1) & v31;
    unint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = *v17;
    uint64_t v19 = v17[1];
    unint64_t v20 = 32 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    unint64_t v22 = *(void *)v21;
    int64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(_BYTE *)(v21 + 16);
    unint64_t v25 = *(_BYTE *)(v21 + 17);
    int64_t v26 = *(void **)(v21 + 24);
    uint64_t v27 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v27 = v18;
    v27[1] = v19;
    uint64_t v28 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v28 = v22;
    *(void *)(v28 + 8) = v23;
    *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = v24;
    *(_BYTE *)(v28 + 17) = v25;
    *(void *)(v28 + 24) = v26;
    uint64_t v29 = v26;
    swift_bridgeObjectRetain(v19);
    uint64_t result = (void *)swift_bridgeObjectRetain(v23);
  }

  uint64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    uint64_t v9 = v32;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    unint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    int64_t v18 = *(void *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v18, v1);
    uint64_t v19 = 8 * v17;
    unint64_t v20 = *(void *)(*(void *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v18, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v19) = v20;
    uint64_t result = (void *)swift_retain();
  }

  int64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    int64_t v18 = *(void *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v18, v1);
    uint64_t v19 = 8 * v17;
    unint64_t v20 = *(void **)(*(void *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v18, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v19) = v20;
    uint64_t result = v20;
  }

  int64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    int64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v19 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v20, v2);
    unint64_t v21 = 16 * v19;
    unint64_t v22 = *(void *)(v9 + 48) + v20;
    int64_t v23 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v29 = *(_OWORD *)(*(void *)(v7 + 56) + v21);
    v23(v22, v6, v2);
    *(_OWORD *)(*(void *)(v9 + 56) + v21) = v29;
    uint64_t result = (void *)swift_retain();
  }

  int64_t v26 = v24 + 2;
  if (v26 >= v17)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v7);
    uint64_t v1 = v27;
    goto LABEL_28;
  }

  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v13 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v13);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    unint64_t v17 = (v24 - 1) & v24;
    uint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(void *)(v8 + 48) + v20, v3);
    unint64_t v21 = 8 * v19;
    unint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v10 + 48) + v20, v7, v3);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    uint64_t result = (void *)swift_retain(v22);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v14 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    unint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = (void *)swift_retain(v21);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

LABEL_26:
    uint64_t v74 = v115;
    return swift_release(v74);
  }

  if ((_DWORD)v38 == enum case for NWConnection.State.ready(_:))
  {
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v38);
    uint64_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "*** NearbyInvitationScanner connected and going to append connections",  v77,  2u);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    unint64_t v78 = *(uint64_t (**)(uint64_t *))(*(void *)v115 + 192LL);
    swift_retain();
    uint64_t v63 = (void (*)(uint64_t *, void))v78(&v118);
    uint64_t v80 = v79;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
    uint64_t v66 = *(void *)((*v80 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v68 = *(void *)((*v80 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v66 < v68 >> 1) {
      goto LABEL_33;
    }
    goto LABEL_48;
  }

  uint64_t v85 = v12;
  v86 = enum case for NWConnection.State.cancelled(_:);
  uint64_t v87 = Logger.logObject.getter(v38);
  uint64_t v90 = (os_log_s *)v87;
  if (v56 == v86)
  {
    uint64_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "*** NearbyInvitationScanner state - Cancelled", v92, 2u);
      swift_slowDealloc(v92, -1LL, -1LL);
    }

    uint64_t v93 = *(uint64_t (**)(uint64_t *))(*(void *)v115 + 192LL);
    uint64_t v94 = v111;
    swift_retain();
    uint64_t v95 = (void (*)(uint64_t *, void))v93(&v118);
    v97 = v96;
    v98 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v96, v94);
    uint64_t result = swift_release(v94);
    v99 = *v97;
    if ((unint64_t)*v97 >> 62)
    {
      if (v99 < 0) {
        v104 = *v97;
      }
      else {
        v104 = v99 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v97);
      v100 = _CocoaArrayWrapper.endIndex.getter(v104);
      uint64_t result = swift_bridgeObjectRelease(v99);
      if (v100 >= v98) {
        goto LABEL_39;
      }
    }

    else
    {
      v100 = *(void *)((v99 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v100 >= v98)
      {
LABEL_39:
        specialized Array.replaceSubrange<A>(_:with:)(v98, v100);
        v95(&v118, 0LL);
        NWConnection.cancel()();
        goto LABEL_26;
      }
    }

    __break(1u);
    return result;
  }

  v101 = static os_log_type_t.error.getter(v87, v88, v89);
  if (os_log_type_enabled(v90, v101))
  {
    v102 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v102 = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, v101, "NearbyInvitationScanner - case not handled", v102, 2u);
    swift_slowDealloc(v102, -1LL, -1LL);
  }

  swift_release(v115);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v85);
}

LABEL_46:
  __break(1u);
  return result;
}

LABEL_33:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      unint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      int64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    unint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    unint64_t v34 = *(void *)(v5 + 56) + 32 * v22;
    char v35 = *(void *)v34;
    unint64_t v36 = *(void *)(v34 + 8);
    uint64_t v45 = *(_BYTE *)(v34 + 17);
    uint64_t v46 = *(_BYTE *)(v34 + 16);
    BOOL v37 = *(void **)(v34 + 24);
    if ((v44 & 1) == 0)
    {
      uint64_t v38 = v37;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v36);
    }

    Hasher.init(_seed:)(v47, *(void *)(v8 + 40));
    String.hash(into:)(v47, v33, v32);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      int64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v33;
    v19[1] = v32;
    unint64_t v20 = *(void *)(v8 + 56) + 32 * v18;
    *(void *)unint64_t v20 = v35;
    *(void *)(v20 + 8) = v36;
    *(_BYTE *)(v20 + swift_weakDestroy(v0 + 16) = v46;
    *(_BYTE *)(v20 + 17) = v45;
    *(void *)(v20 + 24) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  uint64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    unint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    unint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }

    Hasher.init(_seed:)(v39, *(void *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v17 = result & ~v16;
    int64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          int64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *unint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    unint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    unint64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }

    Hasher.init(_seed:)(v39, *(void *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v17 = result & ~v16;
    int64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          int64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *unint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v36) {
      break;
    }
    uint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v36) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  uint64_t i;
  int v48;
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v48 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  int64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_43;
  }
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  unint64_t v17 = *(void *)(v13 + 64);
  uint64_t v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    unint64_t v18 = ~(-1LL << v16);
  }
  else {
    unint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v44 = v5;
  uint64_t v45 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v20 = v14 + 64;
  uint64_t result = swift_retain(v13);
  unint64_t v22 = 0LL;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v19)
    {
      uint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v45) {
      break;
    }
    char v27 = v46;
    unint64_t v28 = v46[v26];
    ++v22;
    if (!v28)
    {
      unint64_t v22 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_36;
      }
      unint64_t v28 = v46[v22];
      if (!v28)
      {
        BOOL v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v13);
          uint64_t v5 = v44;
          if ((v48 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            unint64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v22 >= v45) {
              goto LABEL_36;
            }
            unint64_t v28 = v46[v22];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        unint64_t v22 = v29;
      }
    }

LABEL_44:
      uint64_t v46 = v47;
      goto LABEL_45;
    }

    uint64_t v30 = v53;
    uint64_t v31 = v53[v29];
    ++v23;
    if (!v31)
    {
      int64_t v23 = v29 + 1;
      if (v29 + 1 >= v52) {
        goto LABEL_37;
      }
      uint64_t v31 = v53[v23];
      if (!v31) {
        break;
      }
    }

LABEL_47:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v36) {
      break;
    }
    uint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v36) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }

        else if (v15 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          unint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            *unint64_t v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          unint64_t v20 = v19 + 40 * v3;
          unint64_t v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            __int128 v9 = *v21;
            __int128 v10 = v21[1];
            *(void *)(v20 + 32) = *((void *)v21 + 4);
            *(_OWORD *)unint64_t v20 = v9;
            *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = v10;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void v26[9];
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        __int128 v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        uint64_t v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          Swift::Int v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          unint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v5);
  unint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1LL << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1LL << v11)) != 0)
    {
      unint64_t v44 = (result + 1) & v12;
      uint64_t v13 = *(void *)(v45 + 72);
      int64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      uint64_t v14 = v12;
      do
      {
        uint64_t v15 = v9;
        uint64_t v16 = v13;
        int64_t v17 = v13 * v11;
        uint64_t v18 = v14;
        v43(v8, *(void *)(a2 + 48) + v13 * v11, v4);
        uint64_t v19 = *(void *)(a2 + 40);
        uint64_t v20 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v8, v4);
        uint64_t v14 = v18;
        unint64_t v22 = v21 & v18;
        if (a1 >= (uint64_t)v44)
        {
          if (v22 >= v44 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            uint64_t v25 = *(void *)(a2 + 48);
            unint64_t v26 = v25 + v16 * a1;
            uint64_t v27 = v25 + v17;
            uint64_t v9 = v15;
            if (v16 * a1 < v17 || v26 >= v27 + v16)
            {
              swift_arrayInitWithTakeFrontToBack(v26, v27, 1LL, v4);
            }

            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }

            uint64_t v28 = *(void *)(a2 + 56);
            uint64_t v29 = type metadata accessor for NWBrowser.Result(0LL);
            uint64_t v30 = *(void *)(*(void *)(v29 - 8) + 72LL);
            int64_t v31 = v30 * a1;
            unint64_t result = v28 + v30 * a1;
            int64_t v32 = v30 * v11;
            uint64_t v33 = v28 + v30 * v11;
            unint64_t v34 = v33 + v30;
            if (v31 < v32 || result >= v34)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v33, 1LL, v29);
              a1 = v11;
              uint64_t v14 = v18;
            }

            else
            {
              a1 = v11;
              uint64_t v14 = v18;
              if (v31 != v32)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v14 = v18;
                a1 = v11;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v22 >= v44 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }

        uint64_t v9 = v15;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v14;
        uint64_t v13 = v16;
      }

      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
    }

    int64_t v36 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v36;
    uint64_t v38 = (-1LL << a1) - 1;
  }

  else
  {
    int64_t v36 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v38 = *v36;
    uint64_t v37 = (-1LL << a1) - 1;
  }

  *int64_t v36 = v38 & v37;
  uint64_t v39 = *(void *)(a2 + 16);
  BOOL v40 = __OFSUB__(v39, 1LL);
  uint64_t v41 = v39 - 1;
  if (v40)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v41;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v5);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1LL << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1LL << v11)) != 0)
    {
      uint64_t v38 = (result + 1) & v12;
      uint64_t v13 = *(void *)(v39 + 72);
      uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      uint64_t v14 = v12;
      do
      {
        uint64_t v15 = v9;
        uint64_t v16 = v13;
        int64_t v17 = v13 * v11;
        uint64_t v18 = v14;
        v37(v8, *(void *)(a2 + 48) + v13 * v11, v4);
        uint64_t v19 = *(void *)(a2 + 40);
        uint64_t v20 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        uint64_t v14 = v18;
        unint64_t v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            uint64_t v25 = *(void *)(a2 + 48);
            unint64_t result = v25 + v16 * a1;
            unint64_t v26 = v25 + v17;
            uint64_t v9 = v15;
            if (v16 * a1 < v17 || (uint64_t v13 = v16, result >= v26 + v16))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v26, 1LL, v4);
LABEL_21:
              uint64_t v14 = v18;
              uint64_t v13 = v16;
            }

            else if (v16 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = (void *)(v27 + 8 * a1);
            uint64_t v29 = (void *)(v27 + 8 * v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *uint64_t v28 = *v29;
              a1 = v11;
            }

            goto LABEL_5;
          }
        }

        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }

        uint64_t v9 = v15;
        uint64_t v13 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v14;
      }

      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
    }

    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    int64_t v31 = *v30;
    int64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    int64_t v32 = *v30;
    int64_t v31 = (-1LL << a1) - 1;
  }

  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  unint64_t v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v5);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1LL << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1LL << v11)) != 0)
    {
      uint64_t v38 = (result + 1) & v12;
      uint64_t v13 = *(void *)(v39 + 72);
      uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      uint64_t v14 = v12;
      do
      {
        uint64_t v15 = v9;
        uint64_t v16 = v13;
        int64_t v17 = v13 * v11;
        uint64_t v18 = v14;
        v37(v8, *(void *)(a2 + 48) + v13 * v11, v4);
        uint64_t v19 = *(void *)(a2 + 40);
        uint64_t v20 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        uint64_t v14 = v18;
        unint64_t v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            uint64_t v25 = *(void *)(a2 + 48);
            unint64_t result = v25 + v16 * a1;
            unint64_t v26 = v25 + v17;
            uint64_t v9 = v15;
            if (v16 * a1 < v17 || (uint64_t v13 = v16, result >= v26 + v16))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v26, 1LL, v4);
LABEL_21:
              uint64_t v14 = v18;
              uint64_t v13 = v16;
            }

            else if (v16 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = (_OWORD *)(v27 + 16 * a1);
            uint64_t v29 = (_OWORD *)(v27 + 16 * v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *uint64_t v28 = *v29;
              a1 = v11;
            }

            goto LABEL_5;
          }
        }

        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }

        uint64_t v9 = v15;
        uint64_t v13 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v14;
      }

      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
    }

    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    int64_t v31 = *v30;
    int64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    int64_t v32 = *v30;
    int64_t v31 = (-1LL << a1) - 1;
  }

  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  unint64_t v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  a4,  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : [String]]>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  a4,  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _DictionaryStorage<String, RequesterCredentials>);
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v5 = (void **)v4;
  uint64_t v29 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)*v4;
  uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  int64_t v17 = v14[2];
  uint64_t v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 16 * v16);
      unint64_t result = swift_release(v23[1]);
      uint64_t v25 = v29;
      *uint64_t v23 = a1;
      v23[1] = v25;
      return result;
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  uint64_t v16 = v26;
  unint64_t v22 = *v5;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, a1, v29, v22);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _DictionaryStorage<String, PassthroughSubject<Data, Error>>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( __int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 40 * v12);
        __swift_destroy_boxed_opaque_existential_0Tm(v19);
        return outlined init with take of PseudonymProtocol(a1, (uint64_t)v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  &demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v3;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(void *)(v21[7] + 8 * v15) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  uint64_t v15 = result;
  unint64_t v21 = *v4;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v3;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    uint64_t v19 = v14;
    uint64_t v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        char v22 = v21[7];
        uint64_t v23 = type metadata accessor for NWBrowser.Result(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40LL))( v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * v15,  a1,  v23);
      }

      goto LABEL_11;
    }

    if (v20 >= v18 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
    uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v26 & 1))
    {
      uint64_t v15 = v25;
      unint64_t v21 = *v4;
      if ((v19 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v3;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      char v22 = v21[7];
      uint64_t result = swift_release(*(void *)(v22 + 8 * v15));
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  uint64_t v15 = v24;
  unint64_t v21 = *v4;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  &demangling cache variable for type metadata for _DictionaryStorage<UUID, FilteredBluetoothScanner<NearbyRangingFilter>>);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

LABEL_11:
    v18[(v12 >> 6) + 8] |= 1LL << v12;
    char v22 = (uint64_t *)(v18[6] + 16 * v12);
    *char v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v23 = v18[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v25 = a2;
    v25[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    unint64_t v26 = v20[2];
    uint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) == (v24 & 1))
  {
    BOOL v14 = v23;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v25 = a2;
    v25[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    unint64_t v26 = v20[2];
    uint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) == (v24 & 1))
  {
    BOOL v14 = v23;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_bridgeObjectRetain(a7);
  char v21 = specialized __RawDictionaryStorage.find<A>(_:)(a6, a7);
  if ((v22 & 1) != 0)
  {
    unint64_t v20 = *(void **)(*(void *)(v19 + 56) + 8 * v21);
    swift_bridgeObjectRetain(v20);
  }

  else
  {
    unint64_t v20 = &_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(a7);
LABEL_19:
  v34[0] = v20;
  a8(v34);
  uint64_t v23 = v34[0];
  swift_bridgeObjectRetain(a7);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  *(void *)&v33[0] = v19;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, a6, a7, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *(void *)&v33[0];
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v25);
  unint64_t v26 = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)&v33[0] = v16;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, a4, a5, v26);
  uint64_t v27 = *(void *)&v33[0];
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRetain(v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  uint64_t v29 = String._bridgeToObjectiveC()();
  [v32 setObject:isa forKey:v29];

  swift_bridgeObjectRelease(v27);
  return swift_bridgeObjectRelease(v25);
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  uint64_t v10 = NSObject._rawHashValue(seed:)(v9);
  char v11 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for NearbyGroupMember(0LL);
  uint64_t v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  BOOL v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      char v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      uint64_t v17 = static NSObject.== infix(_:_:)(v16);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v19 = *v2;
  char v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v19 = v22;
  }

  unint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  specialized _NativeSet._delete(at:)(v12);
  unint64_t v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

    char v16 = 0;
    return v16 & 1;
  }

  if (!v22) {
    goto LABEL_15;
  }
  if (*v19 == *(void *)v21 && v20 == v22) {
    goto LABEL_16;
  }
  char v16 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, *(void *)v21, v22, 0LL) & 1) != 0) {
    goto LABEL_16;
  }
  return v16 & 1;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unint64_t v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }

  else
  {
    char v21 = v16;
    uint64_t v22 = v15[3];
    if (v22 >= v20 && (a7 & 1) != 0)
    {
LABEL_7:
      uint64_t v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        uint64_t v24 = v23[7] + 32 * v17;
        uint64_t v25 = *(void **)(v24 + 24);
        swift_bridgeObjectRelease(*(void *)(v24 + 8));

        *(void *)uint64_t v24 = a1;
        *(void *)(v24 + 8) = a2;
        *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = a3 & 1;
        *(_BYTE *)(v24 + 17) = HIBYTE(a3) & 1;
        *(void *)(v24 + 24) = a4;
        return;
      }

      goto LABEL_11;
    }

    if (v22 >= v20 && (a7 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a7 & 1);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
    if ((v21 & 1) == (v27 & 1))
    {
      unint64_t v17 = v26;
      uint64_t v23 = *v8;
      if ((v21 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3 & 0x101, a4, v23);
      swift_bridgeObjectRetain(a6);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

{
  void *v5;
  void *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v3;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v15 = v23;
  uint64_t v21 = *v4;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        char v19 = (void *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0Tm(v19);
        outlined init with take of Any(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  unint64_t v6 = (void **)v4;
  uint64_t v28 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v14 = (void *)*v4;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release(*(void *)(v23 + 8 * v16));
      *(void *)(v23 + 8 * vswift_weakDestroy(v0 + 16) = v28;
      return result;
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1, a4);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v16 = v25;
  uint64_t v22 = *v6;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, v28, v22);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of PseudonymProtocol(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1LL << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = a5;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = a6 & 1;
  *(_BYTE *)(v9 + 17) = HIBYTE(a6) & 1;
  *(void *)(v9 + 24) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PseudonymProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, UInt>);
  unint64_t v25 = v0;
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    *unint64_t v25 = v8;
    return result;
  }

  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  unint64_t v12 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  unint64_t v14 = -1LL;
  if (v13 < 64) {
    unint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  char v26 = v6 + 64;
  uint64_t v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }

    uint64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v27) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      unint64_t v12 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v30 >= v13) {
      goto LABEL_26;
    }
    int64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  unint64_t v25 = v0;
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    *unint64_t v25 = v8;
    return result;
  }

  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  char v26 = v6 + 64;
  unint64_t v12 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  unint64_t v14 = -1LL;
  if (v13 < 64) {
    unint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }

    uint64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v27) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      unint64_t v12 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, char *, uint64_t);
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:_:)>);
  unint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v0);
  int64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_28:
    *uint64_t v1 = v9;
    return result;
  }

  uint64_t v27 = v1;
  uint64_t result = (void *)(v8 + 64);
  uint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v28 = v7 + 64;
  int64_t v13 = 0LL;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = *(void *)(v7 + 16);
  unint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  unint64_t v15 = -1LL;
  if (v14 < 64) {
    unint64_t v15 = ~(-1LL << v14);
  }
  uint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      uint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v17) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v24 + 1;
      if (v24 + 1 >= v17) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v13);
      if (!v25) {
        break;
      }
    }

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NearbyAdvertisement>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupHost>);
  unint64_t v25 = v0;
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v6);
    *unint64_t v25 = v8;
    return result;
  }

  id result = (id)(v7 + 64);
  uint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  unint64_t v12 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  unint64_t v14 = -1LL;
  if (v13 < 64) {
    unint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  char v26 = v6 + 64;
  uint64_t v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }

    uint64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v27) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      unint64_t v12 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22) {
        break;
      }
    }

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v27 = v1;
  unint64_t v8 = *v1;
  int64_t v9 = static _DictionaryStorage.copy(original:)(*v1);
  int64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v8);
    *uint64_t v27 = v10;
    return result;
  }

  id result = (void *)(v9 + 64);
  uint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0LL;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = *(void *)(v8 + 16);
  unint64_t v15 = 1LL << *(_BYTE *)(v8 + 32);
  unint64_t v16 = -1LL;
  if (v15 < 64) {
    unint64_t v16 = ~(-1LL << v15);
  }
  uint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      uint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

char *specialized _NativeDictionary.copy()()
{
  uint64_t v43 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v39 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v1);
  uint64_t v42 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v3);
  BOOL v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWBrowser.Result>);
  uint64_t v35 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v45 = v6;
  if (!v7)
  {
    id result = (char *)swift_release(v5);
    uint64_t v34 = v45;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }

  uint64_t v8 = v6;
  id result = (char *)(v6 + 64);
  int64_t v10 = (char *)(v5 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v36 = v5 + 64;
  if (v8 != v5 || result >= &v10[8 * v11])
  {
    id result = (char *)memmove(result, v10, 8 * v11);
    uint64_t v8 = v45;
  }

  int64_t v12 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v44 = v5;
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v38;
  uint64_t v17 = v39;
  uint64_t v19 = v40;
  uint64_t v18 = v41;
  uint64_t v20 = v43;
  uint64_t v21 = v45;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v46 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v44;
      goto LABEL_9;
    }

    int64_t v29 = v12 + 1;
    uint64_t v24 = v44;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }

LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v46 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v16 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, *(void *)(v24 + 48) + v25, v18);
    unint64_t v26 = *(void *)(v17 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    uint64_t v28 = v42;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v42, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 48) + v25, v19, v18);
    id result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))( *(void *)(v21 + 56) + v26,  v28,  v20);
    int64_t v12 = v46;
  }

  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (char *)swift_release(v44);
    uint64_t v33 = v35;
    uint64_t v34 = v45;
    goto LABEL_25;
  }

  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }

  unint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  unint64_t v25 = *(void *)(v23 + 16);
  unint64_t v26 = __OFADD__(v25, 1LL);
  unint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v27;
  }
  return result;
}

    uint64_t v5 = (v11 - 1) & v11;
    int64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(a1 + 48) + 24 * v9;
    unint64_t v15 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v16 = *(unsigned __int8 *)(v13 + 16);
    swift_bridgeObjectRetain(v14);
    uint64_t v17 = [a2 stableIdentifier];
    if (!v17) {
      goto LABEL_4;
    }
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v15 == v19 && v14 == v21)
    {
      swift_bridgeObjectRelease(v14);
LABEL_31:
      uint64_t v24 = [a2 nearbyInfoV2InvitationCounter];
      id result = swift_bridgeObjectRelease(v14);
      if (v16 == v24)
      {
        unint64_t v25 = 1LL;
LABEL_34:
        swift_release(a1);
        return v25;
      }
    }

    else
    {
      unint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v19, v21, 0LL);
      swift_bridgeObjectRelease(v21);
      if ((v23 & 1) != 0) {
        goto LABEL_31;
      }
LABEL_4:
      id result = swift_bridgeObjectRelease(v14);
    }
  }

  int64_t v12 = v10 + 4;
  if (v12 >= v27)
  {
LABEL_33:
    unint64_t v25 = 0LL;
    goto LABEL_34;
  }

  unint64_t v11 = *(void *)(v26 + 8 * v12);
  if (v11)
  {
    uint64_t v7 = v12;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v27) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }

void specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return;
  }

  unint64_t v25 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationJoinRequestController.Errors,  &type metadata for NearbyInvitationJoinRequestController.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationJoinRequestController.Errors,  &type metadata for NearbyInvitationJoinRequestController.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors);
  }

  return result;
}

uint64_t outlined init with take of PseudonymProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of PseudonymProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NearbyProtoJoinRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with take of NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationJoinRequestController.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100017C00 + 4 * byte_1000AB4E5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100017C34 + 4 * byte_1000AB4E0[v4]))();
}

uint64_t sub_100017C34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017C3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100017C44LL);
  }
  return result;
}

uint64_t sub_100017C50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100017C58LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100017C5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017C64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationJoinRequestController.Errors()
{
  return &type metadata for NearbyInvitationJoinRequestController.Errors;
}

uint64_t NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)log);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(18LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v13;
    *(_DWORD *)uint64_t v12 = 67109378;
    LODWORD(v22) = NearbyInvitationActivityType.rawValue.getter(a2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v12 + 4, v12 + 8);
    *(_WORD *)(v12 + 8) = 2080;
    if ((a3 & 1) != 0) {
      uint64_t v14 = 0x69676E6172206F6ELL;
    }
    else {
      uint64_t v14 = 0x676E69676E6172LL;
    }
    if ((a3 & 1) != 0) {
      unint64_t v15 = 0xEA0000000000676ELL;
    }
    else {
      unint64_t v15 = 0xE700000000000000LL;
    }
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 10, v12 + 18);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Finding invitations for %u with %s", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v16 = type metadata accessor for NearbyInvitationsInviteScanner(0LL);
  uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  NearbyInvitationsInviteScanner.init(ignoringDistance:)(a3 & 1);
  uint64_t v18 = *(void *)(v4
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan);
  *(void *)(v4
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan) = v17;
  swift_retain();
  swift_release(v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyInvitationActivityType>);
  uint64_t v20 = swift_allocObject(v19, 36LL, 7LL);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1000AAE80;
  *(_DWORD *)(v20 + 32) = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 536LL))(a1, v20);
  swift_release(v17);
  return swift_bridgeObjectRelease(v20);
}

uint64_t NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)( a1,  (void (*)(uint64_t))NearbyInvitationsInviteScanner.init(ignoringDistance:));
}

uint64_t NearbyInvitationServiceBluetoothController.lostInvitations()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan;
  if (*(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan))
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)log);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      uint64_t v10 = "Monitoring for lost invitations";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)log);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7, v13, v14);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      uint64_t v10 = "No ongoing scan, can't monitor for lost invitations. Call findInvitations() first";
      goto LABEL_10;
    }
  }

  uint64_t v15 = *(void *)(v2 + v4);
  if (v15)
  {
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v15 + 440LL);
    uint64_t v17 = swift_retain();
    v16(v17);
    return swift_release(v15);
  }

  else
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( a1,  1LL,  1LL,  v19);
  }

Swift::Void __swiftcall NearbyInvitationServiceBluetoothController.stopFindingInvitations()()
{
  uint64_t v1 = *(void *)(v0
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 336LL);
    uint64_t v3 = swift_retain(v1);
    v2(v3);
    swift_release(v1);
  }

uint64_t NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0LL, 0LL);
}

uint64_t NearbyInvitationServiceBluetoothController.broadcast(invitation:)()
{
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[9] = __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[7];
  if (v5)
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v7 = 138412290;
    v0[6] = v6;
    id v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 4, v7 + 12);
    *uint64_t v19 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received request to start broadcasting invitation %@", v7, 0xCu);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v19, 1LL, v9);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v11 = (void *)v0[7];
  uint64_t v10 = (void *)v0[8];
  v0[10] = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_queue;
  uint64_t v12 = swift_allocObject(&unk_1000CA3C0, 32LL, 7LL);
  v0[11] = v12;
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  id v14 = v11;
  id v15 = v10;
  uint64_t v16 = (void *)swift_task_alloc(v13);
  v0[12] = v16;
  uint64_t v17 = type metadata accessor for NearbyInvitationsInviteAdvertiser(0LL);
  *uint64_t v16 = v0;
  v16[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)( v0 + 2,  &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:),  v12,  v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }

  else
  {
    swift_release(*(void *)(v2 + 88));
    os_log_type_t v4 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  void *v3;
  uint64_t (*v5)(void);
  uint64_t v1 = v0[2];
  v0[14] = v1;
  uint64_t v2 = *(int **)(*(void *)v1 + 104LL);
  BOOL v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  v0[15] = v3;
  *uint64_t v3 = v0;
  v3[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  else {
    uint64_t v3 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  os_log_s *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  os_log_s *log;
  uint64_t v31;
  uint64_t v32;
  uint64_t v1 = (void *)v0;
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(id *)(v0 + 56);
  swift_errorRetain(v2);
  os_log_type_t v4 = v3;
  BOOL v5 = swift_errorRetain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v9 = static os_log_type_t.error.getter(v6, v7, v8);
  if (os_log_type_enabled(v6, v9))
  {
    uint64_t v10 = v1[16];
    uint64_t v11 = (void *)v1[7];
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    log = v6;
    uint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    int64_t v31 = swift_slowAlloc(32LL, -1LL);
    int64_t v32 = v31;
    *(_DWORD *)uint64_t v12 = 138412546;
    v1[3] = v11;
    id v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v12 + 4, v12 + 12);
    id v15 = v13;
    *uint64_t v13 = v11;

    *(_WORD *)(v12 + 12) = 2080;
    v1[4] = v10;
    swift_errorRetain(v10);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)(v1 + 4, v16);
    uint64_t v19 = v18;
    v1[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    uint64_t v6 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v9,  "Failed to start advertising invitation: %@, reason: %s",  (uint8_t *)v12,  0x16u);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v15, 1LL, v20);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    uint64_t v21 = v1[16];
    uint64_t v22 = (void *)v1[7];

    swift_errorRelease(v21);
    swift_errorRelease(v21);
  }

  uint64_t v24 = (void *)v1[7];
  uint64_t v23 = (void *)v1[8];
  unint64_t v25 = swift_allocObject(&unk_1000CA3E8, 32LL, 7LL);
  v1[17] = v25;
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = v23;
  *(void *)(v25 + 24) = v24;
  unint64_t v26 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  unint64_t v27 = v24;
  v23;
  uint64_t v28 = (void *)swift_task_alloc(v26);
  v1[18] = v28;
  *uint64_t v28 = v1;
  v28[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_release(v1);
  return swift_task_switch(NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_willThrow();
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[14] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[15] = swift_task_alloc(v6);
  v3[16] = swift_task_alloc(v6);
  return swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)()
{
  uint64_t v1 = v0[11];
  ((void (*)(void))NearbyAdvertisementRequest.identifier.getter)();
  uint64_t v2 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts);
  swift_beginAccess(v2, v0 + 2, 32LL, 0LL);
  if (*(void *)(*v2 + 16LL) && (specialized __RawDictionaryStorage.find<A>(_:)(v0[16]), (v3 & 1) != 0))
  {
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[14];
    swift_endAccess(v0 + 2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    id v8 = (void *)v0[11];
    unint64_t v7 = (void *)v0[12];
    uint64_t v9 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v9, (uint64_t)log);
    id v10 = v7;
    id v11 = v8;
    id v12 = v10;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v16 = static os_log_type_t.error.getter(v13, v14, v15);
    if (os_log_type_enabled(v13, v16))
    {
      uint64_t v17 = (void *)v0[12];
      uint64_t v48 = v0[13];
      uint64_t v49 = (void *)v0[11];
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v50;
      *(_DWORD *)uint64_t v18 = 138412546;
      v0[8] = v17;
      id v20 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v18 + 4, v18 + 12);
      *uint64_t v19 = v17;

      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v21 = *v2;
      uint64_t v22 = type metadata accessor for NearbyInvitationsInviteAdvertiser(0LL);
      uint64_t v23 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v24 = swift_bridgeObjectRetain(v21);
      uint64_t v25 = Dictionary.description.getter(v24, v48, v22, v23);
      unint64_t v27 = v26;
      swift_bridgeObjectRelease(v21);
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease(v27);

      _os_log_impl( (void *)&_mh_execute_header,  v13,  v16,  "Advertiser already started for %@, all broadcasts: %s",  (uint8_t *)v18,  0x16u);
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v19, 1LL, v28);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      uint64_t v42 = (void *)v0[11];
      uint64_t v41 = (void *)v0[12];
    }

    uint64_t v43 = v0[15];
    uint64_t v44 = v0[16];
    unint64_t v45 = lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    swift_allocError(&type metadata for NearbyInvitationServiceBluetoothController.Errors, v45, 0LL, 0LL);
    *int64_t v46 = 0;
    swift_willThrow();
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    BOOL v40 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v29 = v0[15];
    uint64_t v30 = v0[16];
    uint64_t v32 = v0[13];
    uint64_t v31 = v0[14];
    uint64_t v33 = (void *)v0[12];
    uint64_t v51 = (uint64_t *)v0[10];
    swift_endAccess(v0 + 2);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v34(v30, v32);
    uint64_t v35 = type metadata accessor for NearbyInvitationsInviteAdvertiser(0LL);
    uint64_t v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    uint64_t v37 = NearbyInvitationsInviteAdvertiser.init(invitation:)(v33);
    NearbyAdvertisementRequest.identifier.getter(v37);
    swift_beginAccess(v2, v0 + 5, 33LL, 0LL);
    swift_retain(v36);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v52 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v29, isUniquelyReferenced_nonNull_native);
    uint64_t v39 = *v2;
    *uint64_t v2 = v52;
    swift_bridgeObjectRelease(v39);
    v34(v29, v32);
    swift_endAccess(v0 + 5);
    uint64_t *v51 = v36;
    swift_task_dealloc(v30);
    swift_task_dealloc(v29);
    BOOL v40 = (uint64_t (*)(void))v0[1];
  }

  return v40();
}

uint64_t NearbyInvitationsInviteAdvertiser.__allocating_init(invitation:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)( a1,  (void (*)(uint64_t))NearbyInvitationsInviteAdvertiser.init(invitation:));
}

uint64_t closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  void v3[9] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0LL, 0LL);
}

uint64_t closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 40);
  NearbyAdvertisementRequest.identifier.getter(a1);
  swift_beginAccess( v5 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts,  v1 + 16,  33LL,  0LL);
  uint64_t v6 = specialized Dictionary._Variant.removeValue(forKey:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_endAccess(v1 + 16);
  swift_release(v6);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(uint64_t a1)
{
  void v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[8] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  return swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0LL, 0LL);
}

uint64_t NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)()
{
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v5 = (void *)v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[4];
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[11] = v7;
  v7(v1, v6, v4);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_1000CA410, v9 + v2, v8 | 7);
  v0[12] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  uint64_t v11 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  id v12 = v5;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  v0[13] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *uint64_t v13 = v0;
  v13[1] = NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)( v0 + 2,  &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:),  v10,  v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 104LL));
  swift_release(v1);
  return swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_s *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v1 = v0[2];
  v0[14] = v1;
  if (v1)
  {
    uint64_t v2 = *(int **)(*(void *)v1 + 112LL);
    uint64_t v3 = v2[1];
    uint64_t v31 = (uint64_t (*)(void))((char *)v2 + *v2);
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[15] = v4;
    *uint64_t v4 = v0;
    v4[1] = NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:);
    uint64_t v5 = v31;
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v6 = v0[4];
    unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[11];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[6];
    uint64_t v10 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v10, (uint64_t)log);
    uint64_t v11 = v7(v8, v6, v9);
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    uint64_t v15 = static os_log_type_t.error.getter(v12, v13, v14);
    os_log_type_t v16 = os_log_type_enabled(v12, v15);
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[7];
    if (v16)
    {
      id v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v32;
      *(_DWORD *)id v20 = 136315138;
      uint64_t v21 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      uint64_t v24 = v23;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v15, "Broadcaster for %s not found", v20, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v19 + 8))(v0[9], v0[6]);
    }

    uint64_t v25 = v0[9];
    unint64_t v26 = v0[10];
    unint64_t v27 = lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    uint64_t v28 = swift_allocError(&type metadata for NearbyInvitationServiceBluetoothController.Errors, v27, 0LL, 0LL);
    os_log_s *v29 = 1;
    swift_willThrow(v28);
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }

  return v5();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_release_n(*(void *)(v0 + 112), 2LL);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(uint64_t **)(v0 + 40);
  swift_beginAccess( *(void *)(v0 + 48)
  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts,
    v0 + 16,
    33LL,
    0LL);
  *uint64_t v2 = specialized Dictionary._Variant.removeValue(forKey:)(v1);
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[9] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[10] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[11] = swift_task_alloc(v8);
  v4[12] = swift_task_alloc(v8);
  return swift_task_switch(NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0LL, 0LL);
}

uint64_t NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v5 = (void *)v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[13] = v7;
  v7(v1, v6, v4);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_1000CA438, v9 + v2, v8 | 7);
  v0[14] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  uint64_t v11 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  id v12 = v5;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  v0[15] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *uint64_t v13 = v0;
  v13[1] = NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)( v0 + 2,  &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:),  v10,  v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  swift_release(v1);
  return swift_task_switch(NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v33;
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v3 = v0[11];
    uint64_t v2 = v0[12];
    uint64_t v4 = v0[6];
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v1 + 176LL);
    swift_retain();
    v5(v4);
    swift_release_n(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[13];
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[5];
    uint64_t v11 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v11, (uint64_t)log);
    id v12 = v7(v8, v10, v9);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v16 = static os_log_type_t.error.getter(v13, v14, v15);
    uint64_t v17 = os_log_type_enabled(v13, v16);
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[8];
    id v20 = v0[9];
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v19, v23);
      unint64_t v26 = v25;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v13, v16, "Broadcaster for %s not found", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[11], v0[8]);
    }

    unint64_t v27 = v0[11];
    uint64_t v28 = v0[12];
    uint64_t v29 = lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    uint64_t v30 = swift_allocError(&type metadata for NearbyInvitationServiceBluetoothController.Errors, v29, 0LL, 0LL);
    uint64_t *v31 = 1;
    swift_willThrow(v30);
    swift_task_dealloc(v28);
    swift_task_dealloc(v27);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }

  return v6();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)()
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 56)), (v4 & 1) != 0))
  {
    uint64_t v5 = swift_retain(*(void *)(*(void *)(v2 + 56) + 8 * v3));
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  **(void **)(v0 + 40) = v5;
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)( uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  void v3[9] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  return swift_task_switch( NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:),  0LL,  0LL);
}

uint64_t NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)()
{
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = (void *)v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[4];
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v7;
  v7(v1, v6, v4);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_1000CA460, v9 + v2, v8 | 7);
  v0[13] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  uint64_t v11 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  id v12 = v5;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  v0[14] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *uint64_t v13 = v0;
  v13[1] = NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)( v0 + 2,  &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:),  v10,  v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 104LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release(v1);
  return swift_task_switch( NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:),  0LL,  0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v3 = v0[10];
    uint64_t v2 = v0[11];
    uint64_t v4 = v0[5];
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v1 + 184LL);
    swift_retain();
    v5(v4);
    swift_release_n(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    unint64_t v7 = v0[4];
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[12];
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[7];
    uint64_t v11 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v11, (uint64_t)log);
    id v12 = v8(v9, v7, v10);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v16 = static os_log_type_t.error.getter(v13, v14, v15);
    uint64_t v17 = os_log_type_enabled(v13, v16);
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[7];
    id v20 = v0[8];
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v32;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v19, v22);
      uint64_t v25 = v24;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v13, v16, "Broadcaster for %s not found", v21, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[10], v0[7]);
    }

    unint64_t v26 = v0[10];
    unint64_t v27 = v0[11];
    uint64_t v28 = lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    uint64_t v29 = swift_allocError(&type metadata for NearbyInvitationServiceBluetoothController.Errors, v28, 0LL, 0LL);
    *uint64_t v30 = 1;
    swift_willThrow(v29);
    swift_task_dealloc(v27);
    swift_task_dealloc(v26);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }

  return v6();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:),  0LL,  0LL);
}

id NearbyInvitationServiceBluetoothController.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v2);
  id v12 = v0;
  AsyncSerialQueue.init(priority:bufferingPolicy:)(v10, v6);
  uint64_t v13 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts;
  *(void *)&v12[v13] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v12[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan] = 0LL;
  *(void *)&v12[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingInviteRequests] = 0LL;

  v15.receiver = v12;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

id NearbyInvitationServiceBluetoothController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id NearbyInvitationsAdvertiser.advertiser.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t NearbyInvitationsAdvertiser.queue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)listener._delegate + v2;
  uint64_t v5 = type metadata accessor for AsyncSerialQueue(0LL, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t NearbyInvitationsAdvertiser.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  NearbyInvitationsAdvertiser.init()();
  return v1;
}

id *NearbyInvitationsAdvertiser.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v2);
  AsyncSerialQueue.init(priority:bufferingPolicy:)(v10, v6);
  id v12 = [objc_allocWithZone(CBAdvertiser) init];
  v1[2] = v12;
  id v13 = v12;
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setLabel:v14];

  [v1[2] setAdvertiseRate:42];
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v15, (uint64_t)log);
  uint64_t v16 = swift_retain_n(v1, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = (uint64_t (*)(uint64_t))*((void *)*v1 + 15);
    uint64_t v22 = swift_retain(v1);
    uint64_t v23 = v21(v22);
    unint64_t v25 = v24;
    swift_release(v1);
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Init %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  return v1;
}

uint64_t NearbyInvitationsAdvertiser.start()()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(NearbyInvitationsAdvertiser.start(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    os_log_type_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL);
    uint64_t v11 = swift_retain(v7);
    id v12 = v10(v11);
    NSString v14 = v13;
    swift_release(v7);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Request to start advertiser", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0[3], 2LL);
  }

  uint64_t v15 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  swift_retain(v0[3]);
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[4] = v16;
  *uint64_t v16 = v0;
  v16[1] = NearbyInvitationsAdvertiser.start();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = NearbyInvitationsAdvertiser.start();
  }

  else
  {
    swift_release(*(void *)(v2 + 24));
    uint64_t v4 = NearbyInvitationsAdvertiser.start();
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.start()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.start(), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.start()()
{
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v1 = v0[15];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[15];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v17 = v9;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL);
    uint64_t v11 = swift_retain(v7);
    uint64_t v12 = v10(v11);
    unint64_t v14 = v13;
    swift_release(v7);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Activating advertiser", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0[15], 2LL);
  }

  uint64_t v15 = *(void **)(v0[15] + 16LL);
  v0[2] = v0;
  v0[3] = closure #1 in NearbyInvitationsAdvertiser.start();
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_90;
  [v15 activateWithCompletion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 128LL) = v1;
  if (v1) {
    uint64_t v2 = closure #1 in NearbyInvitationsAdvertiser.start();
  }
  else {
    uint64_t v2 = NearbyInvitationsAdvertiser.start();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t NearbyInvitationsAdvertiser.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v7;
    *(_DWORD *)BOOL v6 = 136315138;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 120LL);
    uint64_t v9 = swift_retain(v0);
    uint64_t v10 = v8(v9);
    unint64_t v12 = v11;
    swift_release(v1);
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 4, v6 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deinit %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
  }

  unint64_t v13 = *(void **)(v1 + 16);
  [v13 invalidate];

  unint64_t v14 = (char *)listener._delegate + v1;
  uint64_t v16 = type metadata accessor for AsyncSerialQueue(0LL, v15);
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v14, v16);
  return v1;
}

uint64_t NearbyInvitationsAcceptInviteAdvertiser.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t NearbyInvitationsAdvertiser.stop()()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(NearbyInvitationsAdvertiser.stop(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL);
    unint64_t v11 = swift_retain(v7);
    unint64_t v12 = v10(v11);
    unint64_t v14 = v13;
    swift_release(v7);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Request to stop advertiser", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0[3], 2LL);
  }

  uint64_t v15 = async function pointer to AsyncSerialQueue.performAndWaitFor<A>(_:)[1];
  swift_retain(v0[3]);
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[4] = v16;
  *uint64_t v16 = v0;
  v16[1] = NearbyInvitationsAdvertiser.stop();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  swift_release(v1);
  return swift_task_switch(NearbyInvitationsAdvertiser.stop(), 0LL, 0LL);
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.stop()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a2;
  return swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.stop(), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.stop()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsAdvertiser.description.getter()
{
  uint64_t v1 = *v0;
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
  uint64_t object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x203A666C657328LL;
  v4._uint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v4);
  unint64_t v14 = v0;
  _print_unlocked<A, B>(_:_:)( &v14,  v15,  &type metadata for UnsafeMutableRawPointer,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v5._uint64_t countAndFlagsBits = 0x747265766461202CLL;
  v5._uint64_t object = (void *)0xEE00203A72657369LL;
  String.append(_:)(v5);
  id v6 = (id)v0[2];
  id v7 = [v6 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._uint64_t object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease(v10);
  v12._uint64_t countAndFlagsBits = 41LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return v15[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationsAdvertiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t FilteredBluetoothScanner.FilteredDevice.stableIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t NearbyInvitationRangedHost.counter.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

id NearbyInvitationRangedHost.matches(device:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  id result = [a1 stableIdentifier];
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v10 == a2 && v12 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }

    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v10, v12, 0LL);
      swift_bridgeObjectRelease(v12);
      id result = 0LL;
      if ((v14 & 1) == 0) {
        return result;
      }
    }

    return (id)([a1 nearbyInfoV2InvitationCounter] == a4);
  }

  return result;
}

uint64_t NearbyInvitationRangedHost.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

BOOL static NearbyInvitationRangedHost.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a1 == a4 && a2 == a5) {
    return a3 == a6;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
  BOOL result = 0LL;
  if ((v8 & 1) != 0) {
    return a3 == a6;
  }
  return result;
}

Swift::Int NearbyInvitationRangedHost.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationRangedHost()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyInvitationRangedHost(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationRangedHost( uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationRangedHost( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == *(void *)a2 && v5 == v7) {
    return v6 == v8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v7, 0LL);
  BOOL result = 0LL;
  if ((v10 & 1) != 0) {
    return v6 == v8;
  }
  return result;
}

uint64_t key path setter for NearbyInvitationsScanner.rangedHosts : NearbyInvitationsScanner( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 16, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t FilteredBluetoothScanner.cancellables.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t NearbyInvitationsScanner.ignoringDistance.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t NearbyInvitationsScanner.ignoringDistance.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 32, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 32) = a1;
  return result;
}

uint64_t (*_PublisherElements.Iterator.Inner.state.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

id NearbyInvitationsScanner.rangingSession.getter()
{
  return *(id *)(v0 + 40);
}

void NearbyInvitationsScanner.rangingSession.setter(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
  id v4 = a1;
  [v3 invalidate];
}

void (*NearbyInvitationsScanner.rangingSession.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 40, v3, 1LL, 0LL);
  id v4 = *(void **)(v1 + 40);
  v3[3] = v4;
  id v5 = v4;
  return NearbyInvitationsScanner.rangingSession.modify;
}

void NearbyInvitationsScanner.rangingSession.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v5 = (void **)(*(void *)a1 + 24LL);
  id v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = *v5;
  id v8 = v4;
  uint64_t v9 = v8;
  if ((a2 & 1) != 0)
  {
    id v10 = v8;
    [v7 invalidate];

    uint64_t v7 = *v5;
  }

  else
  {
    [v7 invalidate];
  }

  free(v3);
}

id NearbyInvitationsScanner.scanner.getter()
{
  return *(id *)(v0 + 48);
}

uint64_t key path setter for NearbyInvitationsScanner.deviceFoundStream : NearbyInvitationsScanner( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 280LL))(v7);
}

uint64_t NearbyInvitationsScanner.deviceFoundStream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10, v13);
  uint64_t v15 = &v21[-v14];
  uint64_t v16 = v1
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  v22,  0LL,  0LL);
  outlined init with copy of (String, Any)( v16,  (uint64_t)v15,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v18 = *(void *)(v17 - 8);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  (*(void (**)(_BYTE *, void, uint64_t))(v4 + 104))( v7,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v3);
  AsyncStream.init(_:bufferingPolicy:_:)( v19,  v7,  partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter,  v1,  v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v12, a1, v17);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v18 + 56))(v12, 0LL, 1LL, v17);
  swift_beginAccess(v16, v21, 33LL, 0LL);
  outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v12,  v16,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  return swift_endAccess(v21);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 304LL))(v7);
}

uint64_t NearbyInvitationsScanner.deviceFoundStream.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 32))(v6, a1, v7);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  uint64_t v9 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  v12,  33LL,  0LL);
  outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v6,  v9,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  return swift_endAccess(v12);
}

void (*NearbyInvitationsScanner.deviceFoundStream.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  NearbyInvitationsScanner.deviceFoundStream.getter((uint64_t)v8);
  return NearbyInvitationsScanner.deviceFoundStream.modify;
}

void NearbyInvitationsScanner.deviceFoundStream.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v8 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v2[10], v2[11], v5);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v7, v4, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v7, 0LL, 1LL, v5);
    uint64_t v9 = v8
       + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
    swift_beginAccess(v9, v2, 33LL, 0LL);
    outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v7,  v9,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
    swift_endAccess(v2);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }

  else
  {
    uint64_t v10 = v2[8];
    uint64_t v11 = v2[9];
    uint64_t v12 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void *, void, uint64_t))(v11 + 32))(v7, v2[11], v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0LL, 1LL, v10);
    uint64_t v13 = v12
        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
    swift_beginAccess( v12 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  v2 + 3,  33LL,  0LL);
    outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v7,  v13,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
    swift_endAccess(v2 + 3);
  }

  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

uint64_t key path setter for NearbyInvitationsScanner.deviceFoundContinuation : NearbyInvitationsScanner( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v4, v5);
  size_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of (String, Any)( a1,  (uint64_t)v7,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 304LL))(v7);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.getter( &listener._serviceName,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?,  a1);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.setter(uint64_t a1)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.setter( a1,  &listener._serviceName,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
}

uint64_t (*NearbyInvitationsScanner.deviceFoundContinuation.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsScanner.__allocating_init(ignoringDistance:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)( a1,  (void (*)(uint64_t))NearbyInvitationsScanner.init(ignoringDistance:));
}

uint64_t NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)( uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  a2(a1);
  return v5;
}

uint64_t *NearbyInvitationsScanner.init(ignoringDistance:)(char a1)
{
  uint64_t v3 = *v1;
  v1[2] = (uint64_t)&_swiftEmptySetSingleton;
  v1[5] = (uint64_t)[objc_allocWithZone(NISession) init];
  v1[8] = 0LL;
  uint64_t v4 = (uint64_t)v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)v1 + (unint64_t)listener._serviceName;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  *((_BYTE *)v1 + 32) = a1;
  id v8 = [objc_allocWithZone(CBDiscovery) init];
  v1[6] = (uint64_t)v8;
  v1[7] = 200LL;
  uint64_t v9 = (char *)[objc_allocWithZone((Class)type metadata accessor for NISessionDelegate()) init];
  v1[3] = (uint64_t)v9;
  swift_weakAssign( &v9[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner],  v1);
  id v10 = v8;
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setLabel:v11];

  uint64_t v12 = (void *)v1[6];
  [v12 setBleScanRate:20];
  uint64_t v13 = swift_allocObject(&unk_1000CA488, 24LL, 7LL);
  swift_weakInit(v13 + 16, v1);
  uint64_t v14 = swift_allocObject(&unk_1000CA4B0, 40LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v13;
  *(_BYTE *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = v3;
  void v19[4] = partial apply for closure #1 in NearbyInvitationsScanner.init(ignoringDistance:);
  uint64_t v20 = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  v19[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  v19[3] = &block_descriptor;
  uint64_t v15 = _Block_copy(v19);
  uint64_t v16 = v20;
  id v17 = v12;
  swift_release(v16);
  [v17 setDeviceFoundHandler:v15];
  _Block_release(v15);

  return v1;
}

uint64_t closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)( void *a1, uint64_t a2, char a3, os_log_s *a4)
{
  v65 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  NSString v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v66 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v68, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v21 = result;
    (*(void (**)(void))(*(void *)result + 296LL))();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
    {
      swift_release(v21);
      return outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
    }

    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v66, v15, v16);
    if (([a1 nearbyInfoV2Flags] & 4) != 0
      || [a1 nearbyInfoV2InvitationCounter])
    {
      if ((a3 & 1) != 0
        || (uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v21 + 152LL))(),
            id v23 = a1,
            char v24 = specialized Sequence.contains(where:)(v22, v23),
            swift_bridgeObjectRelease(v22),
            v23,
            (v24 & 1) != 0))
      {
        uint64_t v69 = (uint64_t)a1;
        id v25 = a1;
        unint64_t v26 = v66;
        AsyncStream.Continuation.yield(_:)(&v69, v16);
        swift_release(v21);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v26, v16);
      }

      if (one-time initialization token for log != -1) {
        swift_once(&one-time initialization token for log, one-time initialization function for log);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)log);
      id v29 = v23;
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.default.getter();
      uint64_t v64 = v30;
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        uint64_t v63 = v28;
        uint64_t v33 = v32;
        unint64_t v61 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v62 = swift_slowAlloc(32LL, -1LL);
        uint64_t v67 = v62;
        *(_DWORD *)uint64_t v33 = 136315394;
        uint64_t v69 = (uint64_t)v65;
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
        uint64_t v35 = >> prefix<A>(_:)((uint64_t)&v69, MetatypeMetadata);
        unint64_t v37 = v36;
        uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease(v37);
        *(_WORD *)(v33 + 12) = 2112;
        uint64_t v69 = (uint64_t)v29;
        id v38 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v33 + 14, v33 + 22);
        uint64_t v39 = v61;
        *unint64_t v61 = v29;

        BOOL v40 = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  v31,  "%s: Attempting to perform ranging on device: %@",  (uint8_t *)v33,  0x16u);
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v39, 1LL, v41);
        swift_slowDealloc(v39, -1LL, -1LL);
        uint64_t v42 = v62;
        swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {
      }

      type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample,  &OBJC_CLASS___NIBluetoothSample_ptr);
      id v51 = v29;
      id v52 = NIBluetoothSample.init(with:)(v51);
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = (*(uint64_t (**)(void))(*(void *)v21 + 368LL))();
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 200LL))(v54);
        id v56 = [v55 devicePresenceNotifier];

        [v56 notifyBluetoothSample:v53];
LABEL_25:
        swift_release(v21);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v66, v16);
      }

      id v44 = v51;
      unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.error.getter(v45, v57, v58);
      if (os_log_type_enabled(v45, v46))
      {
        v65 = v45;
        unint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v64 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)unint64_t v47 = 138412290;
        uint64_t v69 = (uint64_t)v44;
        id v59 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v47 + 4, v47 + 12);
        uint64_t v49 = v64;
        *(void *)uint64_t v64 = v44;

        unint64_t v45 = v65;
        uint64_t v50 = "Couldn't create BTSample for device: %@";
        goto LABEL_22;
      }
    }

    else
    {
      if (one-time initialization token for log != -1) {
        swift_once(&one-time initialization token for log, one-time initialization function for log);
      }
      uint64_t v43 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v43, (uint64_t)log);
      id v44 = a1;
      unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v65 = v45;
        unint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v64 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)unint64_t v47 = 138412290;
        uint64_t v69 = (uint64_t)v44;
        id v48 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v47 + 4, v47 + 12);
        uint64_t v49 = v64;
        *(void *)uint64_t v64 = v44;

        unint64_t v45 = v65;
        uint64_t v50 = "%@ not being ingested for ranging since it doesn't have an invitation.";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v45, v46, v50, v47, 0xCu);
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v49, 1LL, v60);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
LABEL_24:

        goto LABEL_25;
      }
    }

    goto LABEL_24;
  }

  return result;
}

BOOL CBDevice.hasInvitation.getter()
{
  return ([v0 nearbyInfoV2Flags] & 4) != 0
      || [v0 nearbyInfoV2InvitationCounter] != 0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t NearbyInvitationsScanner.startScan()()
{
  *(void *)(v1 + 120) = v0;
  return swift_task_switch(NearbyInvitationsScanner.startScan(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v1 = v0[15];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[16] = __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  id v5 = static os_log_type_t.default.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[15];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = _typeName(_:qualified:)(*v7, 0LL);
    uint64_t v12 = v11;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Scan starting", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0[15], 2LL);
  }

  uint64_t v13 = *(void **)(v0[15] + 48LL);
  v0[2] = v0;
  v0[3] = NearbyInvitationsScanner.startScan();
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_40;
  [v13 activateWithCompletion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 136LL) = v1;
  if (v1) {
    uint64_t v2 = NearbyInvitationsScanner.startScan();
  }
  else {
    uint64_t v2 = NearbyInvitationsScanner.startScan();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v1 = swift_retain_n(*(void *)(v0 + 120), 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 120);
    id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    NSString v11 = v6;
    *(_DWORD *)id v5 = 136315138;
    uint64_t v7 = _typeName(_:qualified:)(*v4, 0LL);
    uint64_t v9 = v8;
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    swift_release_n(v4, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: Scan started", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 120), 2LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall NearbyInvitationsScanner.stopScan()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    v17[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = _typeName(_:qualified:)(*v1, 0LL);
    unint64_t v10 = v9;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4, v6 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Scan stopping", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  NSString v11 = (void *)(*(uint64_t (**)(id))(*v1 + 200))([(id)v1[6] invalidate]);
  [v11 invalidate];

  swift_beginAccess(v1 + 2, v17, 1LL, 0LL);
  uint64_t v12 = v1[2];
  v1[2] = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = (uint64_t *)(v1[3]
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess(v13, &v15, 1LL, 0LL);
  uint64_t v14 = *v13;
  *uint64_t v13 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v14);
}

id NearbyInvitationsScanner.enableRanging(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)log);
  uint64_t v5 = swift_retain_n(v1, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v20 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = _typeName(_:qualified:)(*v2, 0LL);
    unint64_t v12 = v11;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v8 + 4, v8 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v13 = CBScanRateToString(a1);
    uint64_t v14 = String.init(cString:)(v13);
    unint64_t v16 = v15;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: Scan with ranging enabled at %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v2, 2LL);
  }

  uint64_t v17 = (void *)v2[6];
  objc_msgSend(v17, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v17, "discoveryFlags") | 0x8000000000000000);
  objc_msgSend(v17, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v17, "discoveryFlags") | 0x10000000000);
  return [v17 setBleScanRate:a1];
}

Swift::Void __swiftcall NearbyInvitationsScanner.disableRanging()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = _typeName(_:qualified:)(*v1, 0LL);
    unint64_t v10 = v9;
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Scan without ranging", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  unint64_t v11 = (void *)v1[6];
  objc_msgSend(v11, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v11, "discoveryFlags") & 0x7FFFFFFFFFFFFFFFLL);
  objc_msgSend(v11, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v11, "discoveryFlags") & 0xFFFFFEFFFFFFFFFFLL);
  [v11 setBleScanRate:20];
}

Swift::Void __swiftcall NearbyInvitationsScanner.resetDelay()()
{
  *(void *)(v0 + 56) = 200LL;
}

Swift::Void __swiftcall NearbyInvitationsScanner.restartRanging()()
{
  uint64_t v1 = v0;
  uint64_t v50 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v3);
  os_log_type_t v5 = (char **)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v49 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v48 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v48, v14);
  unint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  uint64_t v18 = swift_retain_n(v0);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v45 = v7;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    id v51 = v1;
    aBlock[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v47 = v6;
    uint64_t v24 = type metadata accessor for NearbyInvitationsScanner(0LL);
    id v44 = v16;
    uint64_t v25 = v24;
    swift_retain(v1);
    os_log_type_t v46 = v13;
    uint64_t v26 = String.init<A>(reflecting:)(&v51, v25);
    unint64_t v28 = v27;
    id v51 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v22 + 4, v22 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v22 + 12) = 2048;
    id v29 = (void *)v1[7];
    swift_release(v1);
    id v51 = v29;
    unint64_t v16 = v44;
    uint64_t v13 = v46;
    uint64_t v6 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v22 + 14, v22 + 22);
    swift_release(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "%s Scheduling NISession recreation in %ldms",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v30 = v22;
    uint64_t v7 = v45;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 4LL);
  }

  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsScanner.restartRanging();
  uint64_t v53 = v1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_44;
  os_log_type_t v31 = _Block_copy(aBlock);
  id v51 = &_swiftEmptyArrayStorage;
  uint64_t v32 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain(v1);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  unint64_t v34 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v33, v34, v48, v32);
  uint64_t v35 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = DispatchWorkItem.init(flags:block:)(v16, v31);
  swift_release(v53);
  uint64_t v37 = v1[8];
  v1[8] = v36;
  uint64_t v38 = swift_retain_n(v36);
  if (v37)
  {
    dispatch thunk of DispatchWorkItem.cancel()(v38);
    swift_release(v37);
  }

  swift_release(v36);
  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v39 = (void *)static OS_dispatch_queue.main.getter();
  BOOL v40 = v49;
  static DispatchTime.now()();
  *os_log_type_t v5 = v1[7];
  uint64_t v41 = v50;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))( v5,  enum case for DispatchTimeInterval.milliseconds(_:),  v50);
  + infix(_:_:)(v40, v5);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v41);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v40, v6);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v13, v36);
  swift_release(v36);

  v42(v13, v6);
  uint64_t v43 = v1[7];
  if (v43 <= 9999)
  {
    else {
      v1[7] = 2 * v43;
    }
  }

uint64_t closure #1 in NearbyInvitationsScanner.restartRanging()(uint64_t a1)
{
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = swift_retain_n(a1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = a1;
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = type metadata accessor for NearbyInvitationsScanner(0LL);
    swift_retain(a1);
    uint64_t v9 = String.init<A>(reflecting:)(&v14, v8);
    unint64_t v11 = v10;
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s NISession recreated", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  uint64_t v12 = (*(uint64_t (**)(id))(*(void *)a1 + 208))([objc_allocWithZone(NISession) init]);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376LL))(v12);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall NearbyInvitationsScanner.runSession()()
{
  uint64_t v1 = (void *)v0;
  id v2 = [*(id *)(v0 + 48) discoveredDevices];
  uint64_t v3 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  swift_retain(v1);
  LOBYTE(v2) = specialized Sequence.contains(where:)(v4, (uint64_t)v1);
  swift_bridgeObjectRelease(v4);
  swift_release(v1);
  if ((v2 & 1) != 0)
  {
    id v5 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithName:v6 devicePresencePreset:3];

    id v8 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 initWithName:v9 devicePresencePreset:5];

    id v11 = objc_allocWithZone(&OBJC_CLASS___NIDevicePresenceConfiguration);
    id v44 = 0LL;
    id v12 = v7;
    id v13 = v10;
    id v14 = [v11 initWithInnerBoundary:v12 outerBoundary:v13 error:&v44];
    id v15 = v44;
    if (v14)
    {
      unint64_t v16 = v14;
      id v17 = v44;

      [v16 setAllowedDevices:4];
      id v18 = [v16 setMonitoringOption:1];
      uint64_t v19 = *(uint64_t (**)(void))(*v1 + 200LL);
      os_log_type_t v20 = (void *)((uint64_t (*)(id))v19)(v18);
      [v20 setDelegate:v1[3]];

      uint64_t v21 = (void *)v19();
      type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v22 = (void *)static OS_dispatch_queue.main.getter();
      [v21 setDelegateQueue:v22];

      uint64_t v23 = (void *)v19();
      [v23 runWithConfiguration:v16];

      (*(void (**)(uint64_t))(*v1 + 344LL))(60LL);
      return;
    }

    id v33 = v44;
    uint64_t v32 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)log);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v29 = static os_log_type_t.error.getter(v26, v27, v28);
    if (os_log_type_enabled(v26, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v29,  "Tried to run session with no devices that have an invitation. Disabling ranging.",  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    unint64_t v31 = lazy protocol witness table accessor for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors();
    uint64_t v32 = swift_allocError(&type metadata for NearbyInvitationsScanner.Errors, v31, 0LL, 0LL);
    swift_willThrow();
  }

  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v34, (uint64_t)log);
  swift_errorRetain(v32);
  uint64_t v35 = swift_errorRetain(v32);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v39 = static os_log_type_t.error.getter(v36, v37, v38);
  if (os_log_type_enabled(v36, v39))
  {
    BOOL v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v40 = 138412290;
    swift_errorRetain(v32);
    uint64_t v42 = (void *)_swift_stdlib_bridgeErrorToNSError(v32);
    id v44 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v40 + 4, v40 + 12);
    void *v41 = v42;
    swift_errorRelease(v32);
    swift_errorRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v36, v39, "NIDevicePresenceConfiguration failed with %@", v40, 0xCu);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v41, 1LL, v43);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v32);
    swift_errorRelease(v32);
  }

  (*(void (**)(void))(*v1 + 352LL))();
  swift_errorRelease(v32);
}

uint64_t NearbyInvitationsScanner.findDevices()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t NearbyInvitationsScanner.lostDevices()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v5,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v1);
  return AsyncStream.init(_:bufferingPolicy:_:)( v6,  v5,  partial apply for closure #1 in NearbyInvitationsScanner.lostDevices(),  v0,  v6);
}

void closure #1 in NearbyInvitationsScanner.lostDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = *(void **)(a2 + 48);
  uint64_t v9 = swift_allocObject(&unk_1000CA488, 24LL, 7LL);
  swift_weakInit(v9 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1000CA9D0, v11 + v6, v10 | 7);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v9;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v12 + v11,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices();
  uint64_t v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  aBlock[3] = &block_descriptor_89;
  id v13 = _Block_copy(aBlock);
  swift_release(v15);
  [v8 setDeviceLostHandler:v13];
  _Block_release(v13);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [a1 idsDeviceID];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0xE000000000000000LL;
  }

  swift_beginAccess(a2 + 16, v43, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2 + 16);
  if (!Strong) {
    return swift_bridgeObjectRelease(v15);
  }
  uint64_t v17 = Strong;
  id v18 = (char *)*(id *)(Strong + 24);
  swift_release(v17);
  uint64_t v19 = &v18[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices];
  swift_beginAccess( &v18[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices],  v42,  0LL,  0LL);
  uint64_t v20 = *(void *)v19;
  swift_bridgeObjectRetain(v20);

  if (*(void *)(v20 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
    char v22 = v21;
    swift_bridgeObjectRelease(v15);
    uint64_t result = swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
    {
      if (one-time initialization token for log != -1) {
        swift_once(&one-time initialization token for log, one-time initialization function for log);
      }
      uint64_t v24 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v24, (uint64_t)log);
      swift_retain_n(a2);
      id v25 = a1;
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(22LL, -1LL);
        uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        uint64_t v41 = v38;
        *(_DWORD *)uint64_t v28 = 136315394;
        uint64_t v39 = a3;
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000022LL,  0x80000001000B0010LL,  &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v28 + 4, v28 + 12);
        swift_release_n(a2, 2LL);
        *(_WORD *)(v28 + 12) = 2112;
        os_log_t v36 = v26;
        uint64_t v40 = (uint64_t)v25;
        id v29 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v28 + 14, v28 + 22);
        uint64_t v30 = v37;
        *uint64_t v37 = v25;

        os_log_t v31 = v36;
        _os_log_impl((void *)&_mh_execute_header, v36, v27, "%s: Lost unfiltered device: %@", (uint8_t *)v28, 0x16u);
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v30, 1LL, v32);
        swift_slowDealloc(v30, -1LL, -1LL);
        uint64_t v33 = v38;
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 2LL);
      }

      uint64_t v41 = (uint64_t)v25;
      id v34 = v25;
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
      AsyncStream.Continuation.yield(_:)(&v41, v35);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v15);
    return swift_bridgeObjectRelease(v20);
  }

  return result;
}

Swift::Void __swiftcall NearbyInvitationsScanner.foundDeviceInRange(identifier:)(Swift::String identifier)
{
  uint64_t v2 = v1;
  uint64_t object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v89 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  *(void *)&__int128 v91 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v88 = &v82[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v8, v9);
  id v11 = &v82[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = &v82[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v16 = (void *)v1[6];
  id v17 = [v16 discoveredDevices];
  uint64_t v18 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  swift_bridgeObjectRetain(object);
  uint64_t v90 = countAndFlagsBits;
  uint64_t v20 = specialized Sequence.first(where:)(v19, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(object);
  if (!v20)
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v44, (uint64_t)log);
    uint64_t v45 = swift_bridgeObjectRetain_n(object, 2LL);
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v49 = static os_log_type_t.error.getter(v46, v47, v48);
    if (os_log_type_enabled(v46, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = v51;
      *(_DWORD *)uint64_t v50 = 136315138;
      swift_bridgeObjectRetain(object);
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, (unint64_t)object, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease_n(object, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v49,  "Failed to find ranged device %s in bluetooth's discovered devices:",  v50,  0xCu);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(object, 2LL);
    }

    id v65 = [v16 discoveredDevices];
    uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v18);

    if ((unint64_t)v66 >> 62)
    {
      if (v66 < 0) {
        uint64_t v81 = v66;
      }
      else {
        uint64_t v81 = v66 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v66);
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter(v81);
      if (!v67) {
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v67 = *(void *)((v66 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v66);
      if (!v67) {
        goto LABEL_37;
      }
    }

    if (v67 < 1)
    {
      __break(1u);
      return;
    }

    uint64_t v69 = 0LL;
    *(void *)&__int128 v68 = 138412290LL;
    __int128 v91 = v68;
    do
    {
      if ((v66 & 0xC000000000000001LL) != 0) {
        id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v69, v66);
      }
      else {
        id v71 = *(id *)(v66 + 8 * v69 + 32);
      }
      uint64_t v72 = (os_log_s *)v71;
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v75 = static os_log_type_t.error.getter(v70, v73, v74);
      if (os_log_type_enabled(v70, v75))
      {
        uint64_t v76 = swift_slowAlloc(12LL, -1LL);
        uint64_t v77 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v76 = v91;
        *(void *)(v76 + 4) = v72;
        *uint64_t v77 = v72;
        _os_log_impl((void *)&_mh_execute_header, v70, v75, "device: %@", (uint8_t *)v76, 0xCu);
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v77, 1LL, v78);
        swift_slowDealloc(v77, -1LL, -1LL);
        swift_slowDealloc(v76, -1LL, -1LL);
      }

      else
      {

        uint64_t v70 = v72;
      }

      ++v69;
    }

    while (v67 != v69);
LABEL_37:
    swift_bridgeObjectRelease_n(v66, 2LL);
    return;
  }

  id v21 = v20;
  uint64_t v22 = specialized NearbyInvitationRangedHost.init(with:)(v21);
  if (v23)
  {
    uint64_t v25 = v22;
    uint64_t v26 = v23;
    uint64_t v87 = v15;
    unsigned __int8 v27 = v24;
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)log);
    swift_bridgeObjectRetain_n(object, 2LL);
    uint64_t v29 = swift_bridgeObjectRetain_n(v26, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      id v85 = v21;
      uint64_t v34 = v33;
      uint64_t v84 = swift_slowAlloc(96LL, -1LL);
      uint64_t v95 = v84;
      *(_DWORD *)uint64_t v34 = 136315650;
      uint64_t v86 = v25;
      uint64_t v35 = _typeName(_:qualified:)(v89, 0LL);
      int v83 = v32;
      unint64_t v37 = v36;
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v92 = v86;
      uint64_t v93 = v26;
      unsigned __int8 v94 = v27;
      swift_bridgeObjectRetain(v26);
      uint64_t v89 = v5;
      uint64_t v38 = String.init<A>(reflecting:)(&v92, &type metadata for NearbyInvitationRangedHost);
      unint64_t v40 = v39;
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease_n(v26, 2LL);
      unint64_t v41 = v40;
      uint64_t v25 = v86;
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v34 + 22) = 2080;
      swift_bridgeObjectRetain(object);
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, (unint64_t)object, &v95);
      uint64_t v5 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v34 + 24, v34 + 32);
      swift_bridgeObjectRelease_n(object, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  (os_log_type_t)v83,  "%s: Found ranged device: %s with identifier: %s",  (uint8_t *)v34,  0x20u);
      uint64_t v42 = v84;
      swift_arrayDestroy(v84, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      uint64_t v43 = v34;
      id v21 = v85;
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(object, 2LL);
      swift_bridgeObjectRelease_n(v26, 2LL);
    }

    uint64_t v61 = v91;
    swift_beginAccess(v2 + 2, &v92, 33LL, 0LL);
    specialized Set._Variant.insert(_:)((uint64_t)&v95, v25, v26, v27);
    swift_endAccess(&v92);
    uint64_t v62 = swift_bridgeObjectRelease(v96[0]);
    (*(void (**)(uint64_t))(*v2 + 296))(v62);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v11, 1LL, v5))
    {

      outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
      uint64_t v64 = (uint64_t)v87;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v87, 1LL, 1LL, v63);
    }

    else
    {
      uint64_t v79 = v88;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(v88, v11, v5);
      outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
      uint64_t v92 = (uint64_t)v21;
      uint64_t v64 = (uint64_t)v87;
      AsyncStream.Continuation.yield(_:)(&v92, v5);
      (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v79, v5);
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v64, 0LL, 1LL, v80);
    }

    outlined destroy of Any?( v64,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult?);
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v52, (uint64_t)log);
    *(void *)&__int128 v91 = v21;
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v91);
    os_log_type_t v56 = static os_log_type_t.error.getter(v53, v54, v55);
    if (os_log_type_enabled(v53, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v57 = 138412290;
      uint64_t v92 = v91;
      id v59 = (id)v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v57 + 4, v57 + 12);
      void *v58 = v20;

      _os_log_impl((void *)&_mh_execute_header, v53, v56, "Failed to get Bluetooth device after ranging: %@", v57, 0xCu);
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v58, 1LL, v60);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t NearbyInvitationsScanner.deinit()
{
  swift_release(*(void *)(v0 + 64));
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?( (uint64_t)listener._serviceName + v0,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return v0;
}

uint64_t NearbyInvitationsScanner.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 64));
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?( (uint64_t)listener._serviceName + v0,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t NearbyInvitationsInviteAdvertiser.lock.getter()
{
  return swift_retain(*(void *)(v0 + listener._state));
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log == -1) {
    goto LABEL_2;
  }
LABEL_39:
  swift_once(&one-time initialization token for log, one-time initialization function for log);
LABEL_2:
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &full type metadata for NearbyGroup_Group.MemberRemoved;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    v43[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = (uint64_t *)((char *)listener._reserved1 + v1);
    swift_beginAccess((char *)listener._reserved1 + v1, v41, 0LL, 0LL);
    uint64_t v10 = *v9;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = swift_bridgeObjectRetain(v10);
    uint64_t v14 = Dictionary.description.getter(v13, v11, &type metadata for UInt, v12);
    unint64_t v16 = v15;
    uint64_t v17 = v10;
    uint64_t v6 = (void *)&full type metadata for NearbyGroup_Group.MemberRemoved;
    swift_bridgeObjectRelease(v17);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v7 + 4, v7 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "new assertions: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  Lock.assertOwned()();
  uint64_t v18 = (void *)(v1 + v6[94]);
  swift_beginAccess(v18, v43, 0LL, 0LL);
  uint64_t v19 = *v18;
  uint64_t v20 = *v18 + 64LL;
  uint64_t v21 = 1LL << *(_BYTE *)(*v18 + 32LL);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & *(void *)(*v18 + 64LL);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(*v18);
  int64_t v26 = 0LL;
  unsigned __int8 v27 = &_swiftEmptyArrayStorage;
  if (v23)
  {
LABEL_8:
    unint64_t v28 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v29 = v28 | (v26 << 6);
    goto LABEL_9;
  }

  while (1)
  {
    int64_t v31 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v31 >= v24) {
      goto LABEL_35;
    }
    unint64_t v32 = *(void *)(v20 + 8 * v31);
    ++v26;
    if (!v32)
    {
      int64_t v26 = v31 + 1;
      if (v31 + 1 >= v24) {
        goto LABEL_35;
      }
      unint64_t v32 = *(void *)(v20 + 8 * v26);
      if (!v32)
      {
        int64_t v26 = v31 + 2;
        if (v31 + 2 >= v24) {
          goto LABEL_35;
        }
        unint64_t v32 = *(void *)(v20 + 8 * v26);
        if (!v32)
        {
          int64_t v26 = v31 + 3;
          if (v31 + 3 >= v24) {
            goto LABEL_35;
          }
          unint64_t v32 = *(void *)(v20 + 8 * v26);
          if (!v32)
          {
            int64_t v26 = v31 + 4;
            if (v31 + 4 >= v24) {
              goto LABEL_35;
            }
            unint64_t v32 = *(void *)(v20 + 8 * v26);
            if (!v32) {
              break;
            }
          }
        }
      }
    }

LABEL_34:
    unint64_t v23 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_9:
    uint64_t v30 = *(void *)(*(void *)(v19 + 56) + 8 * v29);
    if (v30)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v27);
      uint64_t v42 = (uint64_t)v27;
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v27[2] + 1LL,  1);
        unsigned __int8 v27 = (void *)v42;
      }

      unint64_t v35 = v27[2];
      unint64_t v34 = v27[3];
      if (v35 >= v34 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v34 > 1,  v35 + 1,  1);
        unsigned __int8 v27 = (void *)v42;
      }

      v27[2] = v35 + 1;
      v27[v35 + 4] = v30;
      if (v23) {
        goto LABEL_8;
      }
    }

    else if (v23)
    {
      goto LABEL_8;
    }
  }

  int64_t v33 = v31 + 5;
  if (v33 >= v24)
  {
LABEL_35:
    swift_release(v19);
    uint64_t v36 = v27[2];
    uint64_t v37 = swift_release(v27);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v40 = 67109120;
      LODWORD(v42) = v36 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, (char *)&v42 + 4, v40 + 4, v40 + 8);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "NearbyInvitationsInviteAdvertiser: Re-calculated needsPublicBit: %{BOOL}d",  v40,  8u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    return (uint64_t)[*(id *)(v1 + 16) setNearbyInfoV2Flags:4 * (v36 != 0)];
  }

  unint64_t v32 = *(void *)(v20 + 8 * v33);
  if (v32)
  {
    int64_t v26 = v33;
    goto LABEL_34;
  }

  while (1)
  {
    int64_t v26 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v26 >= v24) {
      goto LABEL_35;
    }
    unint64_t v32 = *(void *)(v20 + 8 * v26);
    ++v33;
    if (v32) {
      goto LABEL_34;
    }
  }

  __break(1u);
  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.getter()
{
  uint64_t v1 = (char *)listener._reserved1 + v0;
  swift_beginAccess((char *)listener._reserved1 + v0, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)((char *)listener._reserved1 + v1);
  swift_beginAccess((char *)listener._reserved1 + v1, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  return NearbyInvitationsInviteAdvertiser.publicAssertions.didset();
}

uint64_t (*NearbyInvitationsInviteAdvertiser.publicAssertions.modify( uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess((char *)listener._reserved1 + v1, a1, 33LL, 0LL);
  return NearbyInvitationsInviteAdvertiser.publicAssertions.modify;
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return NearbyInvitationsInviteAdvertiser.publicAssertions.didset();
  }
  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.init(invitation:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t state = listener._state;
  uint64_t v10 = type metadata accessor for Lock(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = swift_retain(v1);
  *(void *)(v1 + state) = Lock.init()(v11);
  *(void *)((char *)listener._reserved1 + v1) = &_swiftEmptyDictionarySingleton;
  swift_release(v1);
  NearbyInvitationsAdvertiser.init()();
  uint64_t v12 = *(void **)(v1 + 16);
  swift_retain(v2);
  [v12 setAdvertiseRate:42];
  [v12 setUseCase:131091];
  id v13 = v12;
  [v13 setNearbyInfoV2InvitationRouteType:NearbyAdvertisementRequest.route.getter()];

  id v14 = *(id *)(v2 + 16);
  uint64_t v15 = NearbyAdvertisementRequest.identifier.getter();
  LOBYTE(v12) = UUID.hashValue.getter(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  [v14 setNearbyInfoV2InvitationCounter:v12];

  id v16 = *(id *)(v2 + 16);
  uint64_t v17 = NearbyAdvertisementRequest.activityType.getter();
  LODWORD(v12) = NearbyInvitationActivityType.rawValue.getter(v17);
  [v16 setNearbyInfoV2DecryptedFlags:(_DWORD)v12 == NearbyInvitationActivityType.rawValue.getter(1)];

  uint64_t v18 = *(void **)(v2 + 16);
  uint64_t v19 = swift_allocObject(&unk_1000CA540, 24LL, 7LL);
  swift_weakInit(v19 + 16, v2);
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:);
  uint64_t v39 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_50;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v39;
  id v22 = v18;
  swift_release(v21);
  [v22 setAdvertisingAddressChangedHandler:v20];
  _Block_release(v20);

  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)log);
  uint64_t v24 = swift_retain_n(v2, 8LL);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc(21LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315906;
    uint64_t v29 = _typeName(_:qualified:)(*(void *)v2, 0LL);
    unint64_t v31 = v30;
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v27 + 4, v27 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v27 + 12) = 256;
    unsigned __int8 v32 = [*(id *)(v2 + 16) nearbyInfoV2InvitationRouteType];
    swift_release(v2);
    LOBYTE(v37) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 1, v27 + 14, v27 + 15);
    swift_release(v2);
    *(_WORD *)(v27 + 15) = 256;
    unsigned __int8 v33 = [*(id *)(v2 + 16) nearbyInfoV2InvitationCounter];
    swift_release(v2);
    LOBYTE(v37) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 1, v27 + 17, v27 + 18);
    swift_release(v2);
    *(_WORD *)(v27 + 18) = 256;
    unsigned __int8 v34 = [*(id *)(v2 + 16) nearbyInfoV2DecryptedFlags];
    swift_release(v2);
    LOBYTE(v37) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 1, v27 + 20, v27 + 21);
    swift_release(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "%s: Begin advertising with parameters: routeType=%hhu counter=%hhu types=%hhu",  (uint8_t *)v27,  0x15u);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);

    swift_release(v2);
  }

  else
  {

    swift_release_n(v2, 9LL);
  }

  return v2;
}

BOOL CBNearbyInfoV2EncryptedFlags.init(invitation:)()
{
  int v0 = ((uint64_t (*)(void))NearbyInvitationActivityType.rawValue.getter)();
  return v0 == NearbyInvitationActivityType.rawValue.getter(1LL);
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 192LL))(result);
    return swift_release(v3);
  }

  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  v3[3] = a1;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  return Lock.withLock<A>(_:)( partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:),  v3,  v1);
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a3, v6);
  uint64_t v12 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)a1 + 160LL))(v20);
  id v14 = v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  uint64_t v19 = *v14;
  *id v14 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = *v14;
  *id v14 = v19;
  swift_bridgeObjectRelease(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  return v12(v20, 0LL);
}

uint64_t NearbyInvitationsInviteAdvertiser.releasePublicAssertion(identifier:)(uint64_t a1)
{
  v2[3] = a1;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.releasePublicAssertion(identifier:),  v2,  (char *)&type metadata for () + 8);
}

Swift::Void __swiftcall NearbyInvitationsInviteAdvertiser.addressChanged()()
{
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()(uint64_t a1)
{
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)log);
  uint64_t v3 = swift_retain_n(a1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v17;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 144LL))();
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v10 = Dictionary.description.getter(v7, v8, &type metadata for UInt, v9);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v7);
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 4, v6 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Notified about address rotation, assertions: %s", v6, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    uint64_t v13 = swift_release_n(a1, 2LL);
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(v13);
  uint64_t v15 = specialized Dictionary.compactMapValues<A>(_:)(v14);
  swift_bridgeObjectRelease(v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(v15);
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: UInt));
  uint64_t v3 = __chkstk_darwin(v47, v2);
  uint64_t v50 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v44 - v7;
  __chkstk_darwin(v6, v9);
  unint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v46 = a1 + 64;
  uint64_t v51 = &_swiftEmptyDictionarySingleton;
  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1LL << -(char)v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v12;
  uint64_t v44 = -1LL << *(_BYTE *)(a1 + 32);
  int64_t v45 = (unint64_t)(63 - v13) >> 6;
  uint64_t v48 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v15) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v19 = i + 1;
  if (!__OFADD__(i, 1LL))
  {
    if (v19 < v45)
    {
      unint64_t v20 = *(void *)(v46 + 8 * v19);
      int64_t v21 = i + 1;
      if (v20) {
        goto LABEL_23;
      }
      int64_t v21 = i + 2;
      if (i + 2 >= v45) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v46 + 8 * v21);
      if (v20) {
        goto LABEL_23;
      }
      int64_t v21 = i + 3;
      if (i + 3 >= v45) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v46 + 8 * v21);
      if (v20) {
        goto LABEL_23;
      }
      int64_t v21 = i + 4;
      if (i + 4 >= v45) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v46 + 8 * v21);
      if (v20)
      {
LABEL_23:
        unint64_t v15 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
        for (i = v21; ; unint64_t v18 = v17 | (i << 6))
        {
          uint64_t v23 = v48;
          uint64_t v24 = *(void *)(v48 + 48);
          uint64_t v25 = type metadata accessor for UUID(0LL);
          uint64_t v26 = *(void *)(v25 - 8);
          uint64_t v27 = *(void *)(v26 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v11, v24 + v27 * v18, v25);
          uint64_t v28 = v47;
          *(void *)&v11[*(int *)(v47 + 48)] = *(void *)(*(void *)(v23 + 56) + 8 * v18);
          outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v11,  (uint64_t)v8,  &demangling cache variable for type metadata for (key: UUID, value: UInt));
          unint64_t v29 = *(void *)&v8[*(int *)(v28 + 48)];
          if (v29 < 2)
          {
            uint64_t result = outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for (key: UUID, value: UInt));
            if (!v15) {
              goto LABEL_8;
            }
          }

          else
          {
            unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
            v30(v50, v8, v25);
            unint64_t v31 = v51;
            unint64_t v32 = v51[2];
            if (v51[3] <= v32)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32 + 1, 1LL);
              unint64_t v31 = v51;
            }

            uint64_t v33 = v31[5];
            uint64_t v34 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v25, v34);
            unint64_t v35 = v31 + 8;
            uint64_t v36 = -1LL << *((_BYTE *)v31 + 32);
            unint64_t v37 = result & ~v36;
            unint64_t v38 = v37 >> 6;
            if (((-1LL << v37) & ~v31[(v37 >> 6) + 8]) != 0)
            {
              unint64_t v39 = __clz(__rbit64((-1LL << v37) & ~v31[(v37 >> 6) + 8])) | v37 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v40 = 0;
              unint64_t v41 = (unint64_t)(63 - v36) >> 6;
              do
              {
                if (++v38 == v41 && (v40 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_40;
                }

                BOOL v42 = v38 == v41;
                if (v38 == v41) {
                  unint64_t v38 = 0LL;
                }
                v40 |= v42;
                uint64_t v43 = v35[v38];
              }

              while (v43 == -1);
              unint64_t v39 = __clz(__rbit64(~v43)) + (v38 << 6);
            }

            *(void *)((char *)v35 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v39;
            uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(v31[6] + v39 * v27, v50, v25);
            *(void *)(v31[7] + 8 * v39) = v29 - 1;
            ++v31[2];
            if (!v15) {
              goto LABEL_8;
            }
          }

LABEL_7:
          unint64_t v17 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
        }
      }

      int64_t v22 = i + 5;
      if (i + 5 < v45)
      {
        unint64_t v20 = *(void *)(v46 + 8 * v22);
        if (v20)
        {
          int64_t v21 = i + 5;
          goto LABEL_23;
        }

        while (1)
        {
          int64_t v21 = v22 + 1;
          if (__OFADD__(v22, 1LL)) {
            goto LABEL_41;
          }
          if (v21 >= v45) {
            break;
          }
          unint64_t v20 = *(void *)(v46 + 8 * v21);
          ++v22;
          if (v20) {
            goto LABEL_23;
          }
        }
      }
    }

    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v11, v12, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_13;
  }

  if (v17)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }

  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      uint64_t v26 = *v12;
      uint64_t v27 = v12[1];
      outlined copy of Data._Representation(*v12, v27);
      *unint64_t v11 = v26;
      v11[1] = v27;
      uint64_t v28 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      unint64_t v29 = (char *)v11 + v28;
      unint64_t v30 = (char *)v12 + v28;
      unint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
      swift_storeEnumTagMultiPayload(v11, v13, 1LL);
    }

    else
    {
      unint64_t v38 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v38 - 8) + 16LL))(v11, v12, v38);
      swift_storeEnumTagMultiPayload(v11, v13, 0LL);
    }
  }

    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v11, v12, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  if (v17)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }

  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *unint64_t v11 = *v12;
      uint64_t v24 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      uint64_t v25 = (char *)v11 + v24;
      uint64_t v26 = (char *)v12 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
      swift_storeEnumTagMultiPayload(v11, v13, 1LL);
    }

    else
    {
      uint64_t v34 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v11, v12, v34);
      swift_storeEnumTagMultiPayload(v11, v13, 0LL);
    }
  }

    int64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v9, v10, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  if (v15)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }

  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      v9[2] = v10[2];
      uint64_t v23 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v24 = *(int *)(v23 + 24);
      uint64_t v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
      *(_OWORD *)((char *)v9 + *(int *)(v23 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v23 + 28));
      swift_storeEnumTagMultiPayload(v9, v11, 1LL);
    }

    else
    {
      uint64_t v34 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v9, v10, v34);
      swift_storeEnumTagMultiPayload(v9, v11, 0LL);
    }
  }

    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)a1);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_1((void *)a1, a2);
  return a1;
}

  __break(1u);
}

LABEL_39:
    outlined consume of Set<IDSAccount>.Iterator._Variant(v48);
    return (uint64_t)v51;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  outlined consume of Set<IDSAccount>.Iterator._Variant(v6);
}

  __break(1u);
  return result;
}

LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void NearbyInvitationsInviteAdvertiser.init()()
{
}

uint64_t NearbyInvitationsInviteAdvertiser.__ivar_destroyer()
{
  return swift_bridgeObjectRelease(*(void *)((char *)listener._reserved1 + v0));
}

uint64_t NearbyInvitationsInviteAdvertiser.deinit()
{
  return v0;
}

uint64_t NearbyInvitationsInviteAdvertiser.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t key path setter for NearbyInvitationsInviteScanner.lostInvitations : NearbyInvitationsInviteScanner( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of (String, Any)( a1,  (uint64_t)v7,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 448LL))(v7);
}

uint64_t NearbyInvitationsInviteScanner.lostInvitations.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.getter( &listener._reserved2,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?,  a1);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.getter@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess(v6, v8, 0LL, 0LL);
  return outlined init with copy of (String, Any)(v6, a3, a2);
}

uint64_t NearbyInvitationsInviteScanner.lostInvitations.setter(uint64_t a1)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.setter( a1,  &listener._reserved2,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess(v6, v8, 33LL, 0LL);
  outlined assign with take of AsyncStream<CBDevice>?(a1, v6, a3);
  return swift_endAccess(v8);
}

uint64_t (*NearbyInvitationsInviteScanner.lostInvitations.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationsInviteScanner.advertisements.getter()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t NearbyInvitationsInviteScanner.advertisements.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*NearbyInvitationsInviteScanner.advertisements.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsInviteScanner.init(ignoringDistance:)(char a1)
{
  uint64_t v3 = (char *)listener._reserved2 + v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(void *)(v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements) = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation,  1LL,  1LL,  v6);
  NearbyInvitationsScanner.init(ignoringDistance:)(a1);
  uint64_t v8 = *(void **)(v1 + 48);
  swift_retain(v1);
  [v8 setUseCase:131092];
  id v9 = v8;
  [v9 addDiscoveryType:21];

  swift_release(v1);
  return v1;
}

uint64_t NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v34 = a2;
  uint64_t v35 = a1;
  uint64_t v32 = *v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.BufferingPolicy);
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v17);
  int64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  uint64_t v21 = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v16,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v12);
  AsyncStream.init(_:bufferingPolicy:_:)( v20,  v16,  partial apply for closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(),  v3,  v20);
  uint64_t v22 = type metadata accessor for NearbyAdvertisement(0LL);
  uint64_t v23 = v30;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 104);
  v24(v7, v21, v30);
  uint64_t v25 = v32;
  uint64_t v44 = v3;
  uint64_t v45 = v32;
  AsyncStream.init(_:bufferingPolicy:_:)( v22,  v7,  partial apply for closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(),  v43,  v22);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v11, 0LL, 1LL, v26);
  (*(void (**)(char *))(*v3 + 448))(v11);
  v24(v7, v21, v23);
  unint64_t v38 = v3;
  unint64_t v39 = v19;
  uint64_t v40 = v34;
  uint64_t v41 = v35;
  uint64_t v42 = v25;
  AsyncStream.init(_:bufferingPolicy:_:)( v22,  v7,  partial apply for closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:),  v37,  v22);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v19, v33);
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v63 = a4;
  uint64_t v64 = a6;
  uint64_t v60 = a3;
  uint64_t v61 = a5;
  uint64_t v58 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  uint64_t v62 = *(void *)(v66 + 64);
  __chkstk_darwin(v7, v8);
  uint64_t v69 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  unint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = v10;
  uint64_t v59 = v11[8];
  __chkstk_darwin(v10, v13);
  __int128 v68 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v65 = *(void *)(v57 - 8);
  uint64_t v15 = *(void *)(v65 + 64);
  __chkstk_darwin(v57, v16);
  os_log_type_t v56 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v52 - v27;
  uint64_t v54 = v11;
  uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v29((char *)&v52 - v27, a1, v12);
  uint64_t v30 = (void (*)(char *, void, uint64_t, uint64_t))v11[7];
  uint64_t v31 = v12;
  uint64_t v53 = v12;
  v30(v28, 0LL, 1LL, v12);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v28,  (uint64_t)v25,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v32 = v58;
  uint64_t v33 = v58
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  swift_beginAccess( v58 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation,  v70,  33LL,  0LL);
  outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v25,  v33,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  swift_endAccess(v70);
  uint64_t v34 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v20, 1LL, 1LL, v34);
  uint64_t v35 = v65;
  unint64_t v37 = v56;
  uint64_t v36 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v56, v60, v57);
  v29(v68, a1, v31);
  uint64_t v38 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v69, v61, v67);
  uint64_t v39 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v40 = (v39 + 40) & ~v39;
  unint64_t v41 = (v15 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v42 = v54;
  uint64_t v43 = *((unsigned __int8 *)v54 + 80);
  uint64_t v44 = (v43 + v41 + 8) & ~v43;
  uint64_t v45 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v46 = (v59 + v45 + v44) & ~v45;
  unint64_t v47 = (v62 + v46 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v48 = (char *)swift_allocObject(&unk_1000CA958, v47 + 8, v39 | v43 | v45 | 7);
  *((void *)v48 + 2) = 0LL;
  *((void *)v48 + 3) = 0LL;
  *((void *)v48 + 4) = v32;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v48[v40], v37, v36);
  uint64_t v49 = v63;
  *(void *)&v48[v41] = v63;
  ((void (*)(char *, char *, uint64_t))v42[4])(&v48[v44], v68, v53);
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v48[v46], v69, v67);
  *(void *)&v48[v47] = v64;
  swift_retain(v32);
  swift_bridgeObjectRetain(v49);
  uint64_t v50 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v55,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:),  (uint64_t)v48);
  return swift_release(v50);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a8;
  v8[15] = v20;
  v8[12] = a6;
  v8[13] = a7;
  v8[10] = a4;
  v8[11] = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  v8[16] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[17] = v11;
  v8[18] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  v8[19] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[20] = v13;
  v8[21] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v8[22] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[23] = v15;
  _BYTE v8[24] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(int **)(*(void *)a4 + 328LL);
  uint64_t v19 = (uint64_t (*)(void))((char *)v16 + *v16);
  uint64_t v17 = (void *)swift_task_alloc(v16[1]);
  v8[25] = v17;
  *uint64_t v17 = v8;
  v17[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
  return v19();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 200);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:),  0LL,  0LL);
  }
  uint64_t v5 = v2[24];
  uint64_t v6 = v2[21];
  uint64_t v7 = v2[18];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  AsyncStream.makeAsyncIterator()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
  return AsyncStream.Iterator.next(isolation:)(v0 + 48, 0LL, 0LL, *(void *)(v0 + 176));
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 208LL));
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t (*v30)(uint64_t);
  id v31;
  void (*v32)(uint64_t, void);
  uint64_t *v33;
  uint64_t *v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  id v37;
  os_log_s *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  os_log_s *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v2 = v0 + 48;
  uint64_t v1 = *(void **)(v0 + 48);
  if (!v1)
  {
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v12 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 8LL))(v10, *(void *)(v0 + 176));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)log);
  uint64_t v4 = v1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v7 + 4) = v4;
    *uint64_t v8 = v1;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "!!! Found device %@", (uint8_t *)v7, 0xCu);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v8, 1LL, v9);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v15 = (unint64_t)[v4 nearbyInfoV2DecryptedFlags] & 1;
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v18 = *(unsigned int *)(v17 + 32);
  swift_bridgeObjectRetain(v17);
  LODWORD(v18) = NearbyInvitationActivityType.rawValue.getter(v18);
  if ((_DWORD)v18 == NearbyInvitationActivityType.rawValue.getter(v15))
  {
LABEL_12:
    swift_bridgeObjectRelease(*(void *)(v0 + 96));
    uint64_t v20 = [v4 stableIdentifier];
    if (!v20)
    {
      uint64_t v49 = v4;
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      uint64_t v53 = static os_log_type_t.error.getter(v50, v51, v52);
      if (os_log_type_enabled(v50, v53))
      {
        uint64_t v54 = swift_slowAlloc(12LL, -1LL);
        uint64_t v55 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v54 = 138412290;
        *(void *)(v54 + 4) = v49;
        *uint64_t v55 = v1;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v53,  "Device contains invitation, but no stableIdentifier. device: %@",  (uint8_t *)v54,  0xCu);
        os_log_type_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v55, 1LL, v56);
        swift_slowDealloc(v55, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      else
      {
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
      AsyncStream.Continuation.finish()();

      goto LABEL_35;
    }

    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 152);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v27 = v26;

    type metadata accessor for NearbyAdvertisement(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v25, v24);
    uint64_t v28 = v4;
    uint64_t v29 = (void *)NearbyAdvertisement.init(id:device:)(v23, v28);
    if (v29)
    {
      uint64_t v89 = v28;
      uint64_t v88 = v29;
      uint64_t v30 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 80) + 480LL);
      uint64_t v31 = v29;
      uint64_t v32 = (void (*)(uint64_t, void))v30(v0 + 16);
      uint64_t v34 = v33;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
      uint64_t v93 = *v34;
      *uint64_t v34 = 0x8000000000000000LL;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)( (uint64_t)v31,  v90,  v27,  isUniquelyReferenced_nonNull_native);
      uint64_t v36 = *v34;
      *uint64_t v34 = v93;
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v27);
      v32(v0 + 16, 0LL);
      unint64_t v37 = v31;
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      uint64_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = *(void *)(v0 + 120);
        unint64_t v41 = swift_slowAlloc(22LL, -1LL);
        uint64_t v42 = (void *)swift_slowAlloc(8LL, -1LL);
        __int128 v91 = swift_slowAlloc(32LL, -1LL);
        uint64_t v93 = v91;
        *(_DWORD *)unint64_t v41 = 136315394;
        uint64_t v43 = _typeName(_:qualified:)(v40, 0LL);
        uint64_t v45 = v44;
        *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2112;
        *(void *)(v0 + 72) = v37;
        uint64_t v46 = v37;
        unint64_t v47 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v41 + 14, v41 + 22);
        *uint64_t v42 = v88;

        unint64_t v37 = v46;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s: !!! Yielded invite %@", (uint8_t *)v41, 0x16u);
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v42, 1LL, v48);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v65 = *(void *)(v0 + 136);
      uint64_t v66 = *(void *)(v0 + 144);
      uint64_t v67 = *(void *)(v0 + 128);
      *(void *)(v0 + 56) = v37;
      __int128 v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
      AsyncStream.Continuation.yield(_:)(v0 + 56, v68);

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
      uint64_t v2 = v0 + 48;
      goto LABEL_35;
    }

    swift_bridgeObjectRelease(v27);
    uint64_t v4 = v28;
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v4);
    uint64_t v60 = static os_log_type_t.error.getter(v57, v58, v59);
    uint64_t v2 = v0 + 48;
    if (os_log_type_enabled(v57, v60))
    {
      uint64_t v61 = swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v61 = 138412290;
      *(void *)(v61 + 4) = v4;
      _BYTE *v62 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v60,  "Unable to create NearbyAdvertisement from device: %@",  (uint8_t *)v61,  0xCu);
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v62, 1LL, v63);
      swift_slowDealloc(v62, -1LL, -1LL);
      uint64_t v64 = v61;
LABEL_30:
      swift_slowDealloc(v64, -1LL, -1LL);

LABEL_35:
      uint64_t v87 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(void *)(v0 + 208) = v87;
      *uint64_t v87 = v0;
      v87[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
      return AsyncStream.Iterator.next(isolation:)(v2, 0LL, 0LL, *(void *)(v0 + 176));
    }

    goto LABEL_32;
  }

  if (v16 == 1) {
    goto LABEL_27;
  }
  uint64_t v19 = NearbyInvitationActivityType.rawValue.getter(*(unsigned int *)(*(void *)(v0 + 96) + 36LL));
  uint64_t result = NearbyInvitationActivityType.rawValue.getter(v15);
  if (v19 == (_DWORD)result) {
    goto LABEL_12;
  }
  if (v16 == 2)
  {
LABEL_27:
    swift_bridgeObjectRelease(*(void *)(v0 + 96));
LABEL_28:
    uint64_t v72 = swift_bridgeObjectRetain_n(*(void *)(v0 + 96), 2LL);
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v75 = static os_log_type_t.error.getter(v57, v73, v74);
    uint64_t v76 = os_log_type_enabled(v57, v75);
    uint64_t v77 = *(void *)(v0 + 96);
    if (v76)
    {
      uint64_t v78 = swift_slowAlloc(22LL, -1LL);
      uint64_t v92 = swift_slowAlloc(64LL, -1LL);
      uint64_t v93 = v92;
      *(_DWORD *)uint64_t v78 = 136315394;
      uint64_t v79 = swift_bridgeObjectRetain(v77);
      uint64_t v80 = Array.description.getter(v79, &type metadata for NearbyInvitationActivityType);
      uint64_t v82 = v81;
      swift_bridgeObjectRelease(v77);
      *(void *)(v78 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, &v93);
      int v83 = v82;
      uint64_t v2 = v0 + 48;
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease_n(v77, 2LL);
      *(_WORD *)(v78 + 12) = 2080;
      *(_DWORD *)(v0 + 2swift_weakDestroy(v0 + 16) = v15;
      uint64_t v84 = String.init<A>(reflecting:)(v0 + 216, &type metadata for NearbyInvitationActivityType);
      uint64_t v86 = v85;
      *(void *)(v78 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v93);
      swift_bridgeObjectRelease(v86);
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v75,  "Ignoring device. Activity types don't match. Looking for activities: %s but got %s",  (uint8_t *)v78,  0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v64 = v78;
      goto LABEL_30;
    }

    swift_bridgeObjectRelease_n(v77, 2LL);
LABEL_32:

    goto LABEL_35;
  }

  uint64_t v69 = 10LL;
  while (1)
  {
    uint64_t v70 = v69 - 7;
    if (__OFADD__(v69 - 8, 1LL)) {
      break;
    }
    id v71 = NearbyInvitationActivityType.rawValue.getter(*(unsigned int *)(*(void *)(v0 + 96) + 4 * v69));
    uint64_t result = NearbyInvitationActivityType.rawValue.getter(v15);
    if (v71 == (_DWORD)result) {
      goto LABEL_12;
    }
    ++v69;
    if (v70 == v16) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

uint64_t NearbySession.RangedDevice.Location.showDevice.getter(char a1)
{
  return a1 & 1;
}

uint64_t NearbyAdvertisement.init(id:device:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v42 - v12;
  id v14 = [a2 stableIdentifier];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v47 = v2;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    unsigned __int8 v19 = [a2 nearbyInfoV2InvitationCounter];
    LOBYTE(v46) = [a2 nearbyInfoV2DecryptedFlags] & 1;
    unsigned int v46 = v46;
    unsigned int v45 = [a2 nearbyInfoV2InvitationRouteType];
    if (([a2 deviceFlags] & 0x80) != 0)
    {
      type metadata accessor for NearbyAdvertisement(0LL);
      uint64_t v25 = static NearbyAdvertisement.meContactID.getter();
      uint64_t v43 = v26;
      uint64_t v44 = v25;
    }

    else
    {
      id v20 = [a2 contactID];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v43 = v23;
        uint64_t v44 = v22;
      }

      else
      {
        uint64_t v43 = 0LL;
        uint64_t v44 = 0LL;
      }
    }

    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v48 = a1;
    v27(v13, a1, v5);
    v27(v10, (uint64_t)v13, v5);
    uint64_t v50 = v16;
    uint64_t v51 = v18;
    v28._uint64_t countAndFlagsBits = 45LL;
    v28._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    unsigned __int8 v49 = v19;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    uint64_t object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    uint64_t v31 = v50;
    uint64_t v32 = v51;
    id v33 = [a2 accountID];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v37 = v36;
    }

    else
    {
      uint64_t v35 = 0LL;
      uint64_t v37 = 0LL;
    }

    LOBYTE(v50) = v45;
    uint64_t v38 = specialized Data.init<A>(_:)((uint64_t)&v50, (uint64_t)&v50 + 1);
    uint64_t v24 = dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)( v10,  v31,  v32,  v46,  v44,  v43,  v35,  v37,  0LL,  0LL,  v38,  v39,  0LL,  1,  0LL,  0LL,  0LL,  0LL);

    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v40(v48, v5);
    v40((uint64_t)v13, v5);
  }

  else
  {

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return 0LL;
  }

  return v24;
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  id v20 = (char *)&v31 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21((char *)&v31 - v19, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v20, 0LL, 1LL, v4);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v20,  (uint64_t)v17,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v22 = v32;
  uint64_t v23 = v32
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation;
  swift_beginAccess( v32 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation,  v34,  33LL,  0LL);
  outlined assign with take of AsyncStream<CBDevice>?( (uint64_t)v17,  v23,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  swift_endAccess(v34);
  uint64_t v24 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v12, 1LL, 1LL, v24);
  v21(v8, a1, v4);
  uint64_t v25 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v26 = (v25 + 40) & ~v25;
  unint64_t v27 = (v6 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  Swift::String v28 = (char *)swift_allocObject(&unk_1000CA980, v27 + 8, v25 | 7);
  *((void *)v28 + 2) = 0LL;
  *((void *)v28 + 3) = 0LL;
  *((void *)v28 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v28[v26], v8, v4);
  *(void *)&v28[v27] = v33;
  swift_retain(v22);
  uint64_t v29 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v12,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(),  (uint64_t)v28);
  return swift_release(v29);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  v6[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[17] = v8;
  v6[18] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  v6[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[20] = v10;
  v6[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v6[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[23] = v12;
  _BYTE v6[24] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(), 0LL, 0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  (*(void (**)(void))(**(void **)(v0 + 104) + 392LL))();
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 200) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations();
  return AsyncStream.Iterator.next(isolation:)(v0 + 64, 0LL, 0LL, *(void *)(v0 + 176));
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  return swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void);
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  os_log_s *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  os_log_s *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  os_log_s *v49;
  os_log_type_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v1 = *(void **)(v0 + 64);
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8LL))(*(void *)(v0 + 192), *(void *)(v0 + 176));
LABEL_23:
    uint64_t v69 = *(void *)(v0 + 168);
    uint64_t v70 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 192));
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = [*(id *)(v0 + 64) stableIdentifier];
  if (!v2)
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v32, (uint64_t)log);
    uint64_t v33 = v1;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    uint64_t v35 = static os_log_type_t.default.getter();
    uint64_t v36 = os_log_type_enabled(v34, v35);
    uint64_t v38 = *(void *)(v0 + 184);
    uint64_t v37 = *(void *)(v0 + 192);
    uint64_t v39 = *(void *)(v0 + 176);
    if (v36)
    {
      uint64_t v78 = *(void *)(v0 + 176);
      uint64_t v40 = *(void *)(v0 + 120);
      uint64_t v76 = *(void *)(v0 + 184);
      unint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v73;
      *(_DWORD *)unint64_t v41 = 136315394;
      uint64_t v42 = _typeName(_:qualified:)(v40, 0LL);
      uint64_t v44 = v43;
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v41 + 12) = 2112;
      *(void *)(v0 + 56) = v33;
      unsigned int v45 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v41 + 14, v41 + 22);
      os_log_s *v72 = v1;

      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "%s Don't have a stableIdentifier for device: %@, can't tell if it had an advertisement.",  (uint8_t *)v41,  0x16u);
      unsigned int v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v72, 1LL, v46);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v37, v78);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    }

    goto LABEL_23;
  }

  uint64_t v3 = v2;
  uint64_t v77 = v1;
  uint64_t v4 = (uint64_t *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v8 = v7;

  uint64_t v9 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v5 + 480LL))(v0 + 16);
  uint64_t v11 = v10;
  uint64_t v12 = *v10;
  swift_bridgeObjectRetain(*v10);
  uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  if ((v15 & 1) == 0)
  {
    v9(v0 + 16, 0LL);
    swift_bridgeObjectRelease(v8);
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v47, (uint64_t)log);
    uint64_t v48 = v77;
    unsigned __int8 v49 = (os_log_s *)Logger.logObject.getter(v48);
    uint64_t v50 = static os_log_type_t.info.getter();
    uint64_t v51 = os_log_type_enabled(v49, v50);
    uint64_t v53 = *(void *)(v0 + 184);
    uint64_t v52 = *(void *)(v0 + 192);
    uint64_t v54 = *(void *)(v0 + 176);
    if (v51)
    {
      os_log_type_t v75 = *(void *)(v0 + 176);
      uint64_t v55 = *(void *)(v0 + 120);
      os_log_type_t v56 = swift_slowAlloc(22LL, -1LL);
      uint64_t v74 = v52;
      uint64_t v57 = (void *)swift_slowAlloc(8LL, -1LL);
      id v71 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v71;
      *(_DWORD *)os_log_type_t v56 = 136315394;
      uint64_t v58 = _typeName(_:qualified:)(v55, 0LL);
      uint64_t v60 = v59;
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v56 + 12) = 2112;
      *(void *)(v0 + 80) = v48;
      uint64_t v61 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v56 + 14, v56 + 22);
      *uint64_t v57 = v77;

      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "%s Lost device %@ didn't have an advertisement.",  (uint8_t *)v56,  0x16u);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v57, 1LL, v62);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v74, v75);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    }

    goto LABEL_23;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  *uint64_t v4 = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _NativeDictionary.copy()();
  }
  uint64_t v17 = *v4;
  swift_bridgeObjectRelease(*(void *)(*(void *)(*v4 + 48) + 16 * v13 + 8));
  uint64_t v18 = *(void **)(*(void *)(v17 + 56) + 8 * v13);
  specialized _NativeDictionary._delete(at:)(v13, v17);
  uint64_t v19 = *v11;
  *uint64_t v11 = v17;
  swift_bridgeObjectRelease(v19);
  v9(v0 + 16, 0LL);
  swift_bridgeObjectRelease(v8);
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  id v20 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v20, (uint64_t)log);
  uint64_t v21 = v18;
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  uint64_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
    unint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v79 = v27;
    *(_DWORD *)uint64_t v25 = 136315394;
    Swift::String v28 = _typeName(_:qualified:)(v24, 0LL);
    uint64_t v30 = v29;
    *(void *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v79);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v25 + 12) = 2112;
    *(void *)(v25 + 14) = v21;
    *uint64_t v26 = v21;

    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "%s lost advertisement %@ because of BT device being lost.",  (uint8_t *)v25,  0x16u);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v26, 1LL, v31);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v64 = *(void *)(v0 + 136);
  uint64_t v63 = *(void *)(v0 + 144);
  uint64_t v65 = *(void *)(v0 + 128);
  *(void *)(v0 + 96) = v21;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  AsyncStream.Continuation.yield(_:)(v0 + 96, v66);

  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  uint64_t v67 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 200) = v67;
  *uint64_t v67 = v0;
  v67[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations();
  return AsyncStream.Iterator.next(isolation:)(v0 + 64, 0LL, 0LL, *(void *)(v0 + 176));
}

Swift::Void __swiftcall NearbyInvitationsInviteScanner.stopScan()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = v1
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation,  v13,  0LL,  0LL);
  outlined init with copy of (String, Any)( v11,  (uint64_t)v10,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1LL, v2))
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  NearbyInvitationsScanner.stopScan()();
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = (v13 + 40) & ~v13;
  uint64_t v15 = (char *)swift_allocObject(&unk_1000CA9A8, v14 + v6, v13 | 7);
  *((void *)v15 + 2) = 0LL;
  *((void *)v15 + 3) = 0LL;
  *((void *)v15 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v15[v14],  (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain(a2);
  uint64_t v16 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v11,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(),  (uint64_t)v15);
  return swift_release(v16);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  void v5[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[10] = v9;
  v5[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v5[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[13] = v11;
  v5[14] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 32) + 384LL))();
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations();
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 96));
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    NearbyInvitationsInviteScanner.handleChanged(device:)(*(void **)(v0 + 16));
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v3, (uint64_t)log);
    swift_retain_n(v2);
    uint64_t v4 = v1;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    uint64_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void **)(v0 + 32);
    if (v7)
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v24;
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v11 = _typeName(_:qualified:)(*v8, 0LL);
      uint64_t v13 = v12;
      *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v25);
      swift_bridgeObjectRelease(v13);
      swift_release_n(v8, 2LL);
      *(_WORD *)(v9 + 12) = 2112;
      *(void *)(v9 + 14) = v4;
      *uint64_t v10 = v1;

      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "%s: found filtered invitation device: %@",  (uint8_t *)v9,  0x16u);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v10, 1LL, v14);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 32), 2LL);
    }

    id v20 = *(void *)(v0 + 56);
    uint64_t v19 = *(void *)(v0 + 64);
    uint64_t v21 = *(void *)(v0 + 48);
    *(void *)(v0 + 24) = v4;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
    AsyncStream.Continuation.yield(_:)(v0 + 24, v22);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    uint64_t v23 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 120) = v23;
    *uint64_t v23 = v0;
    v23[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations();
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 96));
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 8LL))(v15, *(void *)(v0 + 96));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

void NearbyInvitationsInviteScanner.handleChanged(device:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v74 = *(void *)v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  __chkstk_darwin(v4, v5);
  os_log_type_t v75 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v11 = *(void *)(v80 - 8);
  __chkstk_darwin(v80, v12);
  uint64_t v79 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for log != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = (os_log_s *)__swift_project_value_buffer(v14, (uint64_t)log);
  id v16 = a1;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v20 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v73 = v15;
    *(_DWORD *)uint64_t v19 = 138412290;
    id v71 = v19 + 4;
    uint64_t v82 = (uint64_t)v16;
    id v21 = v16;
    uint64_t v72 = v2;
    uint64_t v78 = v11;
    id v22 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v71, v19 + 12);
    *id v20 = v16;

    uint64_t v11 = v78;
    uint64_t v2 = v72;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Device changed: %@", v19, 0xCu);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v20, 1LL, v23);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v24 = v2
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation;
  swift_beginAccess( v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation,  v84,  0LL,  0LL);
  outlined init with copy of (String, Any)( v24,  (uint64_t)v10,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v80) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
    id v25 = v16;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v29 = static os_log_type_t.error.getter(v26, v27, v28);
    if (os_log_type_enabled(v26, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v30 = 138412290;
      uint64_t v82 = (uint64_t)v25;
      id v32 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v30 + 4, v30 + 12);
      void *v31 = v25;

      _os_log_impl((void *)&_mh_execute_header, v26, v29, "Not able to tell anyone about lost device: %@", v30, 0xCu);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v31, 1LL, v33);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
    }

    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v79, v10, v80);
  id v34 = [v16 stableIdentifier];
  if (!v34)
  {
    id v58 = v16;
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v59, v60))
    {

      goto LABEL_23;
    }

    uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v62 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v61 = 138412290;
    uint64_t v82 = (uint64_t)v58;
    id v63 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v61 + 4, v61 + 12);
    void *v62 = v58;

    uint64_t v64 = "Couldn't find a stableIdentifier for device: %@";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v59, v60, v64, v61, 0xCu);
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v62, 1LL, v67);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);
LABEL_23:

    (*(void (**)(char *, uint64_t))(v11 + 8))(v79, v80);
    return;
  }

  uint64_t v35 = v34;
  uint64_t v78 = v11;
  uint64_t v36 = v16;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v39 = v38;

  uint64_t v40 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 480LL))(&v82);
  unint64_t v41 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v37, v39);
  v40(&v82, 0LL);
  swift_bridgeObjectRelease(v39);
  if (!v41)
  {
    id v65 = v36;
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v59, v60))
    {

      uint64_t v11 = v78;
      goto LABEL_23;
    }

    uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v62 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v61 = 138412290;
    uint64_t v82 = (uint64_t)v65;
    id v66 = v65;
    uint64_t v11 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v61 + 4, v61 + 12);
    void *v62 = v65;

    uint64_t v64 = "No stored advertisement found for %@";
    goto LABEL_18;
  }

  id v42 = v36;
  id v43 = v41;
  id v44 = v42;
  id v45 = v43;
  unsigned int v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v47 = static os_log_type_t.default.getter();
  uint64_t v73 = v46;
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    unsigned __int8 v49 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    uint64_t v82 = v72;
    *(_DWORD *)uint64_t v48 = 136315650;
    uint64_t v50 = _typeName(_:qualified:)(v74, 0LL);
    unint64_t v52 = v51;
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v48 + 12) = 2112;
    uint64_t v81 = (uint64_t)v44;
    id v53 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v48 + 14, v48 + 22);
    *unsigned __int8 v49 = v44;

    *(_WORD *)(v48 + 22) = 2112;
    uint64_t v81 = (uint64_t)v45;
    id v54 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v48 + 24, v48 + 32);
    v49[1] = v41;

    uint64_t v55 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  v47,  "%s: Lost device: %@ with advertisement: %@",  (uint8_t *)v48,  0x20u);
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v49, 2LL, v56);
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v57 = v72;
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v82 = (uint64_t)v45;
  __int128 v68 = v75;
  uint64_t v69 = v79;
  uint64_t v70 = v80;
  AsyncStream.Continuation.yield(_:)(&v82, v80);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v68, v77);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v69, v70);
}

uint64_t NearbyInvitationsInviteScanner.__ivar_destroyer()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements));
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  return outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
}

uint64_t NearbyInvitationsInviteScanner.deinit()
{
  swift_release(*(void *)(v0 + 64));
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream,  &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?( (uint64_t)listener._serviceName + v0,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  outlined destroy of Any?( (uint64_t)listener._reserved2 + v0,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements));
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  outlined destroy of Any?( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  return v0;
}

uint64_t NearbyInvitationsInviteScanner.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t NISessionDelegate.NIDevice.description.getter(uint64_t a1, void *a2, __int16 a3, id a4)
{
  if (a4)
  {
    id v7 = [a4 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v10 = (void *)0xE700000000000000LL;
    uint64_t v8 = 0x74655320746F4ELL;
  }

  _StringGuts.grow(_:)(29LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_bridgeObjectRetain(a2);
  v11._uint64_t countAndFlagsBits = a1;
  v11._uint64_t object = a2;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(a2);
  v12._uint64_t countAndFlagsBits = 0x204E49202CLL;
  v12._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v12);
  if ((a3 & 1) != 0) {
    uint64_t v13 = 1702195828LL;
  }
  else {
    uint64_t v13 = 0x65736C6166LL;
  }
  if ((a3 & 1) != 0) {
    unint64_t v14 = 0xE400000000000000LL;
  }
  else {
    unint64_t v14 = 0xE500000000000000LL;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._uint64_t countAndFlagsBits = 0x20554F202CLL;
  v16._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v16);
  if ((a3 & 0x100) != 0) {
    uint64_t v17 = 1702195828LL;
  }
  else {
    uint64_t v17 = 0x65736C6166LL;
  }
  if ((a3 & 0x100) != 0) {
    unint64_t v18 = 0xE400000000000000LL;
  }
  else {
    unint64_t v18 = 0xE500000000000000LL;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease(v18);
  v20._uint64_t countAndFlagsBits = 0x27205453202CLL;
  v20._uint64_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v8;
  v21._uint64_t object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v10);
  v22._uint64_t countAndFlagsBits = 39LL;
  v22._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  return 542327881LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NISessionDelegate.NIDevice()
{
  if (*(_BYTE *)(v0 + 17)) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return NISessionDelegate.NIDevice.description.getter( *(void *)v0,  *(void **)(v0 + 8),  v1 | *(unsigned __int8 *)(v0 + 16),  *(id *)(v0 + 24));
}

uint64_t protocol witness for Identifiable.id.getter in conformance NISessionDelegate.NIDevice@<X0>( void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t NISessionDelegate.sessionDidStartRunning(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = (uint64_t)v5;
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v11 = v5;
    uint64_t v12 = String.init<A>(reflecting:)(&v17, v10);
    unint64_t v14 = v13;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NISession %s Running", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t result = swift_weakLoadStrong( v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner);
  if (result)
  {
    uint64_t v16 = result;
    (*(void (**)(uint64_t))(*(void *)result + 360LL))(result);
    return swift_release(v16);
  }

  return result;
}

uint64_t NISessionDelegate.session(_:didFailWithError:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  id v7 = a1;
  swift_errorRetain(a2);
  id v8 = v7;
  uint64_t v9 = swift_errorRetain(a2);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    unint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = (uint64_t)v8;
    v26[0] = v14;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v15 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v16 = v8;
    uint64_t v17 = String.init<A>(reflecting:)(&v25, v15);
    unint64_t v19 = v18;
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(a2);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a2);
    uint64_t v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v12 + 14, v12 + 22);
    *unint64_t v13 = v20;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "NISession %s Failed: %@", (uint8_t *)v12, 0x16u);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v13, 1LL, v21);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  Swift::String v22 = (uint64_t *)(v3
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess(v22, v26, 1LL, 0LL);
  uint64_t v23 = *v22;
  *Swift::String v22 = (uint64_t)&_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v23);
}

uint64_t NISessionDelegate.session(_:didInvalidateWith:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  id v7 = a1;
  swift_errorRetain(a2);
  id v8 = v7;
  uint64_t v9 = swift_errorRetain(a2);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v13 = static os_log_type_t.error.getter(v10, v11, v12);
  if (os_log_type_enabled(v10, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = (uint64_t)v8;
    uint64_t v27 = v16;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v17 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v18 = v8;
    uint64_t v19 = String.init<A>(reflecting:)(&v26, v17);
    unint64_t v21 = v20;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(a2);
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(a2);
    uint64_t v26 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
    *uint64_t v15 = v22;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v13, "NISession %s Invalidated: %@", (uint8_t *)v14, 0x16u);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v15, 1LL, v23);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  uint64_t result = swift_weakLoadStrong( v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner);
  if (result)
  {
    uint64_t v25 = result;
    (*(void (**)(uint64_t))(*(void *)result + 368LL))(result);
    return swift_release(v25);
  }

  return result;
}

uint64_t NISessionDelegate.session(_:suspensionReasonEnded:isNoLongerSuspended:)( void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  id v9 = a1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v13 = static os_log_type_t.error.getter(v10, v11, v12);
  if (os_log_type_enabled(v10, v13))
  {
    uint64_t v14 = swift_slowAlloc(28LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = (uint64_t)v9;
    uint64_t v27 = v15;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v16 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v17 = v9;
    uint64_t v18 = String.init<A>(reflecting:)(&v26, v16);
    unint64_t v20 = v19;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v26 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 1024;
    LODWORD(v26) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4, v14 + 24, v14 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v13,  "NISession %s Suspension Ended: %ld, isActive: %{BOOL}d",  (uint8_t *)v14,  0x1Cu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v21 = v4
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner;
  uint64_t Strong = swift_weakLoadStrong(v21);
  if (Strong)
  {
    uint64_t v23 = Strong;
    (*(void (**)(uint64_t))(*(void *)Strong + 368LL))(Strong);
    swift_release(v23);
  }

  uint64_t result = swift_weakLoadStrong(v21);
  if (result)
  {
    uint64_t v25 = result;
    (*(void (**)(uint64_t))(*(void *)result + 376LL))(result);
    return swift_release(v25);
  }

  return result;
}

id NISessionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NISessionDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NearbyInvitationsAcceptInviteAdvertiser.__allocating_init(to:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)( a1,  (void (*)(uint64_t))NearbyInvitationsAcceptInviteAdvertiser.init(to:));
}

void *NearbyInvitationsAcceptInviteAdvertiser.init(to:)(void *a1)
{
  objc_super v2 = v1;
  NearbyInvitationsAdvertiser.init()();
  uint64_t v4 = one-time initialization token for log;
  swift_retain_n(v2);
  if (v4 != -1) {
    swift_once(&one-time initialization token for log, one-time initialization function for log);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v5, (uint64_t)log);
  uint64_t v6 = swift_retain(v2);
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v10;
    *(_DWORD *)id v9 = 136315138;
    uint64_t v11 = _typeName(_:qualified:)(*v2, 0LL);
    unint64_t v13 = v12;
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Advertising AcceptInvite", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v2, 2LL);
  }

  uint64_t v14 = (void *)v2[2];
  [v14 setUseCase:131092];
  [v14 setNearbyActionType:56];
  [v14 setNearbyActionFlags:640];
  [v14 setAdvertiseRate:60];
  id v15 = v14;
  swift_release(v2);
  uint64_t v16 = (objc_class *)[a1 nearbyInfoV2AuthTagData];
  Class isa = v16;
  if (v16)
  {
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v20 = v19;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v18, v20);
  }

  [v15 setNearbyActionTargetData:isa];

  return v2;
}

void NearbyInvitationsAcceptInviteAdvertiser.init()()
{
}

uint64_t one-time initialization function for log()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

BOOL NearbyInvitationMessageType.init(rawValue:)(__int16 a1)
{
  return a1 != 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationMessageType()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationMessageType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationMessageType( uint64_t a1)
{
  return Hasher._finalize()();
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationMessageType@<X0>( _WORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationMessageType( _WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (uint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_0Tm(v8);
  return v6;
}

uint64_t CBDevice.invitationContactID.getter()
{
  if (([v0 deviceFlags] & 0x80) != 0)
  {
    type metadata accessor for NearbyAdvertisement(0LL);
    return static NearbyAdvertisement.meContactID.getter();
  }

  else
  {
    id v1 = [v0 contactID];
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

uint64_t type metadata accessor for NearbyInvitationsInviteScanner(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsInviteScanner,  (uint64_t)&nominal type descriptor for NearbyInvitationsInviteScanner);
}

uint64_t sub_100024D14()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)( uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1000D4A34);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(a1, v5, v4);
}

uint64_t type metadata accessor for NearbyInvitationsInviteAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsInviteAdvertiser,  (uint64_t)&nominal type descriptor for NearbyInvitationsInviteAdvertiser);
}

uint64_t partial apply for closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)( uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1000D4A44);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(a1, v5, v4);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)( uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((v4 + 24) & ~v4);
  id v7 = (void *)swift_task_alloc(dword_1000D4A6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:),  0LL,  0LL);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationServiceBluetoothController.Errors,  &type metadata for NearbyInvitationServiceBluetoothController.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationServiceBluetoothController.Errors,  &type metadata for NearbyInvitationServiceBluetoothController.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors);
  }

  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)( uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((v4 + 24) & ~v4);
  id v7 = (void *)swift_task_alloc(dword_1000D4A9C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:),  0LL,  0LL);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)( uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((v4 + 24) & ~v4);
  id v7 = (void *)swift_task_alloc(dword_1000D4AB4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return swift_task_switch( closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:),  0LL,  0LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsAdvertiser.start()()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000D4ADC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v2[15] = v0;
  return swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.start(), 0LL, 0LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsAdvertiser.stop()()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000D4AF4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v2[2] = v0;
  return swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.stop(), 0LL, 0LL);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      id v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)(v25, *(void *)(*v4 + 40LL));
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v25, a2, a3);
  swift_bridgeObjectRelease(a3);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      uint64_t v15 = v14 + 24 * v12;
      uint64_t v16 = *(void *)(v15 + 8);
      int v17 = *(unsigned __int8 *)(v15 + 16);
      BOOL v18 = *(void *)v15 == a2 && v16 == a3;
      if ((v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v15, v16, a2, a3, 0LL) & 1) != 0)
        && v17 == a4)
      {
        break;
      }

      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v9);
    uint64_t v22 = *(void *)(*v4 + 48LL) + 24 * v12;
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *(void *)(v22 + 8);
    LOBYTE(v22) = *(_BYTE *)(v22 + 16);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v23;
    *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v22;
    swift_bridgeObjectRetain(v23);
    return 0LL;
  }

  else
  {
LABEL_11:
    swift_bridgeObjectRelease(v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v25[0] = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    swift_bridgeObjectRetain(a3);
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v20 = *v4;
    *uint64_t v4 = v25[0];
    swift_bridgeObjectRelease(v20);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = a4;
  }

  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v31 = v9;
      uint64_t v10 = type metadata accessor for NearbyGroupMember(0LL);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v32 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v29 = v24 + 1;
      id v30 = v8;
      specialized _NativeSet.resize(capacity:)(v29);
      uint64_t v25 = v32;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v25);
    uint64_t v28 = *v3;
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      type metadata accessor for NearbyGroupMember(0LL);
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        BOOL v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        id v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v32 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v32;
  }

  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v31 = a2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain();
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v29 = v9;
      uint64_t v10 = type metadata accessor for AnyCancellable(0LL);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v30;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v24 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v30 = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v27 = v25 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v27);
      uint64_t v26 = v30;
    }

    else
    {
      uint64_t v26 = v24;
      swift_retain();
    }

    specialized _NativeSet._unsafeInsertNew(_:)(a2, v26);
    uint64_t v28 = *v3;
    *uint64_t v3 = v26;
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
    return 1LL;
  }

  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v14 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_bridgeObjectRetain(v6);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v21 = v31;
    uint64_t v30 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v22 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = *v2;
    *uint64_t v2 = v30;
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1LL;
  }

  uint64_t v18 = ~v16;
  uint64_t v19 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  while (1)
  {
    uint64_t v30 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v30, &v31, v13, v19) & 1) != 0) {
      break;
    }
    unint64_t v17 = (v17 + 1) & v18;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0LL;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  Hasher.init(_seed:)(v35, *(void *)(*v5 + 40LL));
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v35, a2, a3);
  swift_bridgeObjectRelease(a3);
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a5);
    String.hash(into:)(v35, a4, a5);
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    uint64_t v33 = v5;
    id v34 = a1;
    uint64_t v17 = ~v14;
    uint64_t v32 = v12;
    uint64_t v18 = *(void *)(v12 + 48);
    do
    {
      uint64_t v19 = (void *)(v18 + 32 * v15);
      uint64_t v20 = v19[1];
      uint64_t v22 = v19[2];
      uint64_t v21 = v19[3];
      BOOL v23 = *v19 == a2 && v20 == a3;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0)
      {
        if (v21)
        {
          if (a5)
          {
            BOOL v24 = v22 == a4 && v21 == a5;
            if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, a4, a5, 0LL) & 1) != 0)
            {
LABEL_20:
              swift_bridgeObjectRelease(a3);
              swift_bridgeObjectRelease(v32);
              swift_bridgeObjectRelease(a5);
              unint64_t v25 = (uint64_t *)(*(void *)(*v33 + 48LL) + 32 * v15);
              uint64_t v26 = v25[1];
              uint64_t v28 = v25[2];
              uint64_t v27 = v25[3];
              *id v34 = *v25;
              v34[1] = v26;
              v34[2] = v28;
              v34[3] = v27;
              swift_bridgeObjectRetain(v27);
              swift_bridgeObjectRetain(v26);
              return 0LL;
            }
          }
        }

        else if (!a5)
        {
          goto LABEL_20;
        }
      }

      unint64_t v15 = (v15 + 1) & v17;
    }

    while (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0);
    swift_bridgeObjectRelease(v32);
    uint64_t v6 = v33;
    a1 = v34;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v35[0] = *v6;
  void *v6 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
  uint64_t v31 = *v6;
  void *v6 = v35[0];
  swift_bridgeObjectRelease(v31);
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1LL;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1LL << v7);
    }
    else {
      unint64_t v9 = -1LL;
    }
    int64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          unint64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            unint64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                BOOL v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  unint64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              unint64_t v14 = v20;
            }
          }
        }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    uint64_t v31 = (unint64_t)(v7 + 63) >> 6;
    int64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }

      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          uint64_t v12 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_36;
          }
          unint64_t v17 = v32[v12];
          if (!v17)
          {
            uint64_t v12 = v16 + 2;
            if (v16 + 2 >= v31) {
              goto LABEL_36;
            }
            unint64_t v17 = v32[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v32 = -1LL << v30;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v32[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              uint64_t v12 = v18;
            }
          }
        }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  void *v35;
  void v36[9];
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v33 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v35 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    id v34 = (unint64_t)(v7 + 63) >> 6;
    int64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        unint64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v17 >= v34) {
          goto LABEL_39;
        }
        int64_t v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          uint64_t v12 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_39;
          }
          int64_t v18 = v35[v12];
          if (!v18)
          {
            uint64_t v12 = v17 + 2;
            if (v17 + 2 >= v34) {
              goto LABEL_39;
            }
            int64_t v18 = v35[v12];
            if (!v18)
            {
              unint64_t v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_39:
                swift_release(v3);
                uint64_t v2 = v33;
                uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v35 = -1LL << v32;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              int64_t v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  uint64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_45;
                  }
                  if (v12 >= v34) {
                    goto LABEL_39;
                  }
                  int64_t v18 = v35[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              uint64_t v12 = v19;
            }
          }
        }

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v35 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    uint64_t v33 = v2;
    int64_t v34 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v34) {
          goto LABEL_36;
        }
        unint64_t v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v18 = v35[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v34) {
              goto LABEL_36;
            }
            unint64_t v18 = v35[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v33;
                uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v35 = -1LL << v32;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v34) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v35[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v19;
            }
          }
        }

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  Swift::Int v4 = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_22;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( uint64_t result, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v9 = result;
  int v10 = a3;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v13);
  }

  else
  {
    if (v12 > v11)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_18;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v13);
  }

  uint64_t v14 = *v5;
  Hasher.init(_seed:)(v28, *(void *)(*v5 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v28, v9, a2);
  swift_bridgeObjectRelease(a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v15 = -1LL << *(_BYTE *)(v14 + 32);
  a4 = result & ~v15;
  uint64_t v16 = v14 + 56;
  if (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0)
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v14 + 48);
    do
    {
      uint64_t v19 = v18 + 24 * a4;
      unint64_t result = *(void *)v19;
      uint64_t v20 = *(void *)(v19 + 8);
      int v21 = *(unsigned __int8 *)(v19 + 16);
      BOOL v22 = *(void *)v19 == v9 && v20 == a2;
      if (v22 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v20, v9, a2, 0LL), (result & 1) != 0))
      {
        if (v21 == v10) {
          goto LABEL_21;
        }
      }

      a4 = (a4 + 1) & v17;
    }

    while (((*(void *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0);
  }

LABEL_18:
  uint64_t v23 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  uint64_t v24 = *(void *)(v23 + 48) + 24 * a4;
  *(void *)uint64_t v24 = v9;
  *(void *)(v24 + 8) = a2;
  *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = v10;
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_21:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NearbyInvitationRangedHost);
  __break(1u);
  return result;
}

  uint64_t v32 = 0;
  return v32 & 1;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9);
  }

  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for NearbyGroupMember(0LL);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v22;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v6 = result;
  uint64_t v21 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9);
  }

  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v9);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v12 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v13 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = ~v13;
    uint64_t v15 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    do
    {
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void specialized _NativeSet.insertNew(_:at:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_28;
  }
  uint64_t v14 = v12 + 1;
  if ((a6 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14);
  }

  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_28;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v14);
  }

  uint64_t v15 = *v6;
  Hasher.init(_seed:)(v33, *(void *)(*v6 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v33, a1, a2);
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a4);
    String.hash(into:)(v33, a3, a4);
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a5 = v16 & ~v17;
  uint64_t v18 = v15 + 56;
  if (((*(void *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) != 0)
  {
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v15 + 48);
    do
    {
      uint64_t v21 = (void *)(v20 + 32 * a5);
      uint64_t v22 = v21[1];
      uint64_t v24 = v21[2];
      uint64_t v23 = v21[3];
      BOOL v25 = *v21 == a1 && v22 == a2;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0)
      {
        if (v23)
        {
          if (a4)
          {
            BOOL v26 = v24 == a3 && v23 == a4;
            if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, a3, a4, 0LL) & 1) != 0)
            {
LABEL_27:
              ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NearbyGroupHostIDSService.MessageEvent.Member);
              __break(1u);
              break;
            }
          }
        }

        else if (!a4)
        {
          goto LABEL_27;
        }
      }

      a5 = (a5 + 1) & v19;
    }

    while (((*(void *)(v18 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) != 0);
  }

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v13) {
      goto LABEL_28;
    }
    int64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  unint64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      unint64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        unint64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v30 = v2;
  uint64_t v31 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }

    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v32) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  void v35[9];
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_41:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  int64_t v32 = v2;
  uint64_t v33 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v34 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    unint64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    if (v17 >= v34) {
      goto LABEL_39;
    }
    int64_t v18 = *(void *)(v33 + 8 * v17);
    ++v12;
    if (!v18)
    {
      unint64_t v12 = v17 + 1;
      if (v17 + 1 >= v34) {
        goto LABEL_39;
      }
      int64_t v18 = *(void *)(v33 + 8 * v12);
      if (!v18)
      {
        unint64_t v12 = v17 + 2;
        if (v17 + 2 >= v34) {
          goto LABEL_39;
        }
        int64_t v18 = *(void *)(v33 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v31 = v2;
  uint64_t v32 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v33) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v32 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized NearbyInvitationRangedHost.init(with:)(void *a1)
{
  id v2 = [a1 stableIdentifier];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

    [a1 nearbyInfoV2InvitationCounter];
  }

  else
  {
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v5, (uint64_t)log);
    id v6 = a1;
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v10 = static os_log_type_t.error.getter(v7, v8, v9);
    if (os_log_type_enabled(v7, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int64_t v12 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v11 = 138412290;
      id v16 = v6;
      id v13 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
      *int64_t v12 = v6;

      _os_log_impl( (void *)&_mh_execute_header,  v7,  v10,  "Device: %@ doesn't have a stableIdentifier, can't create rangedHost object.",  v11,  0xCu);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v12, 1LL, v14);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    return 0LL;
  }

  return v4;
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter( uint64_t a1)
{
  return closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter(a1, v1);
}

uint64_t type metadata accessor for NISessionDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate);
}

uint64_t sub_100028E68()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100028E8C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)(void *a1)
{
  return closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)( a1,  *(void *)(v1 + 16),  *(_BYTE *)(v1 + 24),  *(os_log_s **)(v1 + 32));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

const char *CBScanRateToString(int a1)
{
  if (a1 > 34)
  {
    if (a1 > 49)
    {
      if (a1 == 50) {
        return "High";
      }
      if (a1 == 60) {
        return "Max";
      }
    }

    else
    {
      if (a1 == 35) {
        return "MediumLow";
      }
      if (a1 == 40) {
        return "Medium";
      }
    }
  }

  else if (a1 > 19)
  {
    if (a1 == 20) {
      return "Background";
    }
    if (a1 == 30) {
      return "Low";
    }
  }

  else
  {
    if (!a1) {
      return "Default";
    }
    if (a1 == 10) {
      return "Periodic";
    }
  }

  return "?";
}

uint64_t partial apply for closure #1 in NearbyInvitationsScanner.restartRanging()()
{
  return closure #1 in NearbyInvitationsScanner.restartRanging()(v0);
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }

  return result;
}

uint64_t type metadata accessor for NearbyInvitationsScanner(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsScanner,  (uint64_t)&nominal type descriptor for NearbyInvitationsScanner);
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, void *a2)
{
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_23;
    }

    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v10 >= v27) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v11 = *(void *)(v26 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v27) {
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v26 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t i;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  unint64_t v5 = -1LL;
  if (v4 < 64) {
    unint64_t v5 = ~(-1LL << v4);
  }
  id v6 = v5 & *(void *)(a1 + 56);
  uint64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    int64_t v10 = v9 | (i << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 24 * v10);
    int v16 = *v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain_n(v15, 2LL);
    id v17 = [a2 stableIdentifier];
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v16 == v19 && v15 == v21)
      {
        swift_release(a1);
        swift_bridgeObjectRelease_n(v15, 3LL);
        return 1LL;
      }

      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v19, v21, 0LL);
      swift_bridgeObjectRelease_n(v15, 2LL);
      uint64_t result = swift_bridgeObjectRelease(v21);
      if ((v23 & 1) != 0)
      {
        swift_release(a1);
        return 1LL;
      }
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease_n(v15, 2LL);
    }
  }

  unint64_t v11 = i + 1;
  if (!__OFADD__(i, 1LL))
  {
    if (v11 >= v25) {
      goto LABEL_29;
    }
    int64_t v12 = *(void *)(v24 + 8 * v11);
    ++i;
    if (!v12)
    {
      int64_t i = v11 + 1;
      if (v11 + 1 >= v25) {
        goto LABEL_29;
      }
      int64_t v12 = *(void *)(v24 + 8 * i);
      if (!v12)
      {
        int64_t i = v11 + 2;
        if (v11 + 2 >= v25) {
          goto LABEL_29;
        }
        int64_t v12 = *(void *)(v24 + 8 * i);
        if (!v12)
        {
          int64_t i = v11 + 3;
          if (v11 + 3 >= v25) {
            goto LABEL_29;
          }
          int64_t v12 = *(void *)(v24 + 8 * i);
          if (!v12)
          {
            uint64_t v13 = v11 + 4;
            if (v13 >= v25)
            {
LABEL_29:
              swift_release(a1);
              return 0LL;
            }

            int64_t v12 = *(void *)(v24 + 8 * v13);
            for (int64_t i = v13; !v12; ++v13)
            {
              int64_t i = v13 + 1;
              if (__OFADD__(v13, 1LL)) {
                goto LABEL_33;
              }
              if (i >= v25) {
                goto LABEL_29;
              }
              int64_t v12 = *(void *)(v24 + 8 * i);
            }
          }
        }
      }
    }

    id v6 = (v12 - 1) & v12;
    int64_t v10 = __clz(__rbit64(v12)) + (i << 6);
    goto LABEL_22;
  }

  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

LABEL_36:
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      int64_t v10 = v9;
      uint64_t v11 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      if (([v9 nearbyInfoV2Flags] & 4) != 0
        || [v10 nearbyInfoV2InvitationCounter])
      {
        uint64_t v6 = (*(uint64_t (**)(void))(*(void *)a2 + 152LL))();
        id v7 = v10;
        char v8 = specialized Sequence.contains(where:)(v6, v7);
        swift_bridgeObjectRelease(v6);

        if ((v8 & 1) == 0)
        {
          uint64_t v12 = 1LL;
          goto LABEL_20;
        }
      }

      else
      {
      }

      ++v5;
      if (v11 == v4) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_19:
  uint64_t v12 = 0LL;
LABEL_20:
  swift_bridgeObjectRelease(a1);
  return v12;
}

        swift_bridgeObjectRelease_n(v28, 2LL);
LABEL_22:
        swift_bridgeObjectRelease(v12);
        goto LABEL_23;
      }

unint64_t lazy protocol witness table accessor for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationsScanner.Errors,  &type metadata for NearbyInvitationsScanner.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationsScanner.Errors,  &type metadata for NearbyInvitationsScanner.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors);
  }

  return result;
}

void partial apply for closure #1 in NearbyInvitationsScanner.lostDevices()(uint64_t a1)
{
}

void *specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v7)
  {
    uint64_t v20 = v4;
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      int64_t v10 = v9;
      uint64_t v4 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v11 = [v9 idsDeviceID];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        if (v13 == a2 && v15 == a3)
        {
          swift_bridgeObjectRelease(a3);
        }

        else
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, a2, a3, 0LL);
          swift_bridgeObjectRelease(v15);
          if ((v17 & 1) == 0) {
            goto LABEL_4;
          }
        }

        if ((objc_msgSend(v10, "nearbyInfoV2Flags", v20) & 4) != 0
          || [v10 nearbyInfoV2InvitationCounter])
        {
          swift_bridgeObjectRelease(a1);
          return v10;
        }
      }

LABEL_4:
      ++v8;
      if (v4 == v7) {
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v18);
  }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

  if (a4) {
    id v9 = _convertErrorToNSError(_:)(a4);
  }
  else {
    id v9 = 0LL;
  }
  int64_t v10 = (id)v9;
  (*(void (**)(uint64_t, NSString, Class))(a5 + 16))(a5, v8, isa);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)()
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)(v0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)@<X0>( uint64_t a1@<X8>)
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)( *(void *)(v1 + 16),  *(void *)(v1 + 24),  a1);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.releasePublicAssertion(identifier:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(**(void **)(v0 + 16) + 160LL))(v4);
  specialized Dictionary._Variant.removeValue(forKey:)(v1);
  return v2(v4, 0LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()()
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()(v0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()( uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( a1,  v1[2],  v1[3],  v1[4],  v1[5],  v1[6]);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationRangedHost,  &type metadata for NearbyInvitationRangedHost);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationError and conformance NearbyInvitationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError;
  if (!lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationError,  &type metadata for NearbyInvitationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationMessageType,  &type metadata for NearbyInvitationMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType);
  }

  return result;
}

uint64_t sub_100029A38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100029A6C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100029AA0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184LL))(*a1);
}

uint64_t sub_100029ACC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100029AFC(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 208LL))(*a1);
}

uint64_t sub_100029B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 272LL))();
}

uint64_t sub_100029B58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 296LL))();
}

uint64_t sub_100029B84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100029BB4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100029BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 440LL))();
}

uint64_t sub_100029C10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 464LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100029C40(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 472LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationServiceBluetoothController()
{
  return type metadata accessor for NearbyInvitationServiceBluetoothController(0LL);
}

uint64_t type metadata accessor for NearbyInvitationServiceBluetoothController(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationServiceBluetoothController,  (uint64_t)&nominal type descriptor for NearbyInvitationServiceBluetoothController);
}

uint64_t type metadata completion function for NearbyInvitationServiceBluetoothController( uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for AsyncSerialQueue(319LL, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[2] = "\b";
    _OWORD v5[3] = "\b";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v5, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationServiceBluetoothController.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100029D5C + 4 * byte_1000AB615[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100029D90 + 4 * byte_1000AB610[v4]))();
}

uint64_t sub_100029D90(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029D98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100029DA0LL);
  }
  return result;
}

uint64_t sub_100029DAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100029DB4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100029DB8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029DC0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationServiceBluetoothController.Errors()
{
  return &type metadata for NearbyInvitationServiceBluetoothController.Errors;
}

uint64_t ObjC metadata update function for NearbyInvitationsAdvertiser()
{
  return type metadata accessor for NearbyInvitationsAdvertiser(0LL);
}

uint64_t type metadata accessor for NearbyInvitationsAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsAdvertiser,  (uint64_t)&nominal type descriptor for NearbyInvitationsAdvertiser);
}

uint64_t type metadata completion function for NearbyInvitationsAdvertiser(uint64_t a1, uint64_t a2)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for AsyncSerialQueue(319LL, a2);
  if (v4 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v5, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for NearbyInvitationRangedHost(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationRangedHost(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationRangedHost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationRangedHost()
{
  return &type metadata for NearbyInvitationRangedHost;
}

uint64_t ObjC metadata update function for NearbyInvitationsScanner()
{
  return type metadata accessor for NearbyInvitationsScanner(0LL);
}

void type metadata completion function for NearbyInvitationsScanner(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = &unk_1000ABA50;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[6] = "\b";
  type metadata accessor for AsyncStream<CBDevice>?( 319LL,  &lazy cache variable for type metadata for AsyncStream<CBDevice>?,  (uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  if (v3 <= 0x3F)
  {
    void v6[7] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for AsyncStream<CBDevice>?( 319LL,  &lazy cache variable for type metadata for AsyncStream<CBDevice>.Continuation?,  &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 9LL, v6, a1 + 80);
    }
  }

ValueMetadata *type metadata accessor for NearbyInvitationsScanner.Errors()
{
  return &type metadata for NearbyInvitationsScanner.Errors;
}

uint64_t ObjC metadata update function for NearbyInvitationsInviteAdvertiser()
{
  return type metadata accessor for NearbyInvitationsInviteAdvertiser(0LL);
}

uint64_t type metadata completion function for NearbyInvitationsInviteAdvertiser(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_updateClassMetadata2(a1, 256LL, 2LL, v2, a1 + 128);
}

uint64_t ObjC metadata update function for NearbyInvitationsInviteScanner()
{
  return type metadata accessor for NearbyInvitationsInviteScanner(0LL);
}

void type metadata completion function for NearbyInvitationsInviteScanner(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    type metadata accessor for AsyncStream<CBDevice>?( 319LL,  &lazy cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?,  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      swift_updateClassMetadata2(a1, 256LL, 4LL, v6, a1 + 408);
    }
  }

void type metadata accessor for AsyncStream<CBDevice>?(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t ObjC metadata update function for NearbyInvitationsAcceptInviteAdvertiser()
{
  return type metadata accessor for NearbyInvitationsAcceptInviteAdvertiser(0LL);
}

uint64_t type metadata accessor for NearbyInvitationsAcceptInviteAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsAcceptInviteAdvertiser,  (uint64_t)&nominal type descriptor for NearbyInvitationsAcceptInviteAdvertiser);
}

uint64_t type metadata accessor for NearbyInvitationsInviteScanner(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t type metadata completion function for NearbyInvitationsAcceptInviteAdvertiser(uint64_t a1)
{
  return swift_updateClassMetadata2(a1, 256LL, 0LL, v2, a1 + 128);
}

ValueMetadata *type metadata accessor for NearbyInvitationError()
{
  return &type metadata for NearbyInvitationError;
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationsScanner.Errors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10002A32C + 4 * byte_1000AB61A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10002A34C + 4 * byte_1000AB61F[v4]))();
  }
}

_BYTE *sub_10002A32C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10002A34C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10002A354(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10002A35C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10002A364(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10002A36C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationMessageType()
{
  return &type metadata for NearbyInvitationMessageType;
}

uint64_t initializeBufferWithCopyOfBuffer for NISessionDelegate.NIDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void destroy for NISessionDelegate.NIDevice(uint64_t a1)
{
}

uint64_t initializeWithCopy for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  unint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  id v8 = v7;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  unint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for NISessionDelegate.NIDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NISessionDelegate.NIDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for NISessionDelegate.NIDevice()
{
  return &unk_1000CA928;
}

void *associated type witness table accessor for Identifiable.ID : Hashable in NISessionDelegate.NIDevice()
{
  return &protocol witness table for String;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

void specialized NISessionDelegate.session(_:suspendedWith:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v14 = a1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v15 = (uint64_t)v14;
    uint64_t v9 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v10 = v14;
    uint64_t v11 = String.init<A>(reflecting:)(&v15, v9);
    unint64_t v13 = v12;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);

    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v7 + 12) = 2048;
    uint64_t v15 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "NISession %s Suspended: %ld", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

uint64_t specialized NISessionDelegate.nearbyDeviceID(_:)(void *a1)
{
  id v1 = [a1 deviceIdentifer];
  if (v1)
  {
    unint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  else
  {
    if (one-time initialization token for default != -1) {
      swift_once(&one-time initialization token for default, one-time initialization function for default);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v9 = static os_log_type_t.error.getter(v6, v7, v8);
    if (os_log_type_enabled(v6, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v9, "Nearby Device: (nil)", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    return 0LL;
  }

  return v3;
}

uint64_t specialized NISessionDelegate.session(_:didDiscover:)(void *a1)
{
  uint64_t result = specialized NISessionDelegate.nearbyDeviceID(_:)(a1);
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = v3;
  os_log_type_t v6 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices,  v46,  0LL,  0LL);
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16))
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(v7 + 56) + 32 * v8;
      uint64_t v12 = *(void *)v10;
      uint64_t v11 = *(void **)(v10 + 8);
      __int16 v13 = *(unsigned __int8 *)(v10 + 16);
      int v14 = *(unsigned __int8 *)(v10 + 17);
      uint64_t v15 = *(void **)(v10 + 24);
      id v16 = v15;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v7);
      if (v14) {
        __int16 v17 = 256;
      }
      else {
        __int16 v17 = 0;
      }
      goto LABEL_9;
    }

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v7);
  }

  swift_bridgeObjectRetain(v5);
  __int16 v13 = 0;
  __int16 v17 = 0;
  uint64_t v15 = 0LL;
  uint64_t v12 = v4;
  uint64_t v11 = (void *)v5;
LABEL_9:
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  id v19 = v15;
  swift_bridgeObjectRetain_n(v11, 2LL);
  id v20 = v19;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  id v43 = v15;
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v42 = v20;
    uint64_t v41 = v4;
    char v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v45[0] = v40;
    uint64_t v24 = v12;
    buf = v23;
    *(_DWORD *)char v23 = 136315138;
    uint64_t v25 = v23 + 12;
    uint64_t v37 = v23 + 4;
    LOWORD(v23) = v17 | v13;
    __int16 v38 = v17 | v13;
    swift_bridgeObjectRetain(v11);
    id v26 = v42;
    uint64_t v27 = NISessionDelegate.NIDevice.description.getter(v24, v11, (__int16)v23, v43);
    unint64_t v29 = v28;

    swift_bridgeObjectRelease(v11);
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v45);
    uint64_t v30 = v25;
    uint64_t v12 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v37, v30);

    swift_bridgeObjectRelease_n(v11, 2LL);
    unint64_t v31 = v29;
    id v20 = v42;
    swift_bridgeObjectRelease(v31);
    os_log_type_t v32 = v22;
    __int16 v33 = v38;
    _os_log_impl((void *)&_mh_execute_header, v21, v32, "Device Discovered: %s", buf, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v4 = v41;
    swift_slowDealloc(buf, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
    __int16 v33 = v17 | v13;
  }

  swift_beginAccess(v6, v45, 33LL, 0LL);
  swift_bridgeObjectRetain(v11);
  id v34 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v44 = *v6;
  uint64_t *v6 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v12,  (uint64_t)v11,  v33,  (uint64_t)v43,  v4,  v5,  isUniquelyReferenced_nonNull_native);
  uint64_t v36 = *v6;
  uint64_t *v6 = v44;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v36);
  swift_endAccess(v45);

  return swift_bridgeObjectRelease(v11);
}

void specialized NISessionDelegate.session(_:object:didUpdateRegion:previousRegion:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = specialized NISessionDelegate.nearbyDeviceID(_:)(a1);
  if (!v6) {
    return;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  char v9 = &v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices];
  swift_beginAccess( &v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices],  v103,  0LL,  0LL);
  uint64_t v95 = v9;
  uint64_t v10 = *(void *)v9;
  if (!*(void *)(*(void *)v9 + 16LL))
  {
LABEL_7:
    uint64_t v104 = v7;
    v105 = (void *)v8;
    __int16 v106 = 0;
    id v107 = 0LL;
    swift_bridgeObjectRetain(v8);
    id v20 = &off_1000D4000;
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    goto LABEL_7;
  }

  uint64_t v13 = *(void *)(v10 + 56) + 32 * v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void **)(v13 + 8);
  char v16 = *(_BYTE *)(v13 + 16);
  char v17 = *(_BYTE *)(v13 + 17);
  uint64_t v18 = *(void **)(v13 + 24);
  id v19 = v18;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  uint64_t v104 = v14;
  v105 = v15;
  LOBYTE(v106) = v16;
  HIBYTE(v106) = v17;
  id v107 = v18;
  id v20 = &off_1000D4000;
  if (!a2)
  {
LABEL_5:
    __int16 v106 = 0;
    goto LABEL_28;
  }

LABEL_8:
  id v21 = [a2 name];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  unint64_t v24 = v23;

  if (v22 == 0x72656E6E69LL && v24 == 0xE500000000000000LL)
  {
    unint64_t v26 = 0xE500000000000000LL;
    goto LABEL_15;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E6E69LL, 0xE500000000000000LL, v22, v24, 0LL) & 1) != 0)
  {
    unint64_t v26 = v24;
LABEL_15:
    swift_bridgeObjectRelease(v26);
    uint64_t v92 = v7;
    __int16 v106 = 257;
    if (one-time initialization token for log != -1) {
      swift_once(&one-time initialization token for log, one-time initialization function for log);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v27, (uint64_t)log);
    unint64_t v28 = v3;
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      v102[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v90 = v3;
      uint64_t ObjectType = swift_getObjectType(v28);
      uint64_t v34 = _typeName(_:qualified:)(ObjectType, 0LL);
      unint64_t v36 = v35;
      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v31 + 4, v31 + 12);

      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2080;
      swift_beginAccess(&v104, v96, 0LL, 0LL);
      uint64_t v37 = v8;
      uint64_t v39 = v104;
      unint64_t v38 = (unint64_t)v105;
      swift_bridgeObjectRetain(v105);
      uint64_t v40 = v39;
      uint64_t v3 = v90;
      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v38, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v31 + 14, v31 + 22);
      unint64_t v41 = v38;
      uint64_t v8 = v37;
      id v20 = &off_1000D4000;
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: Found inner device: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v7 = v92;
    uint64_t Strong = swift_weakLoadStrong(&v28[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner]);
    if (Strong)
    {
      uint64_t v43 = Strong;
      swift_beginAccess(&v104, v97, 0LL, 0LL);
      uint64_t v44 = v104;
      id v45 = v105;
      unsigned int v46 = *(void (**)(uint64_t, void *))(*(void *)v43 + 400LL);
      swift_bridgeObjectRetain(v105);
      v46(v44, v45);
      swift_release(v43);
      swift_bridgeObjectRelease(v45);
    }

    goto LABEL_28;
  }

  if (v22 == 0x726574756FLL && v24 == 0xE500000000000000LL)
  {
    unint64_t v47 = 0xE500000000000000LL;
  }

  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726574756FLL, 0xE500000000000000LL, v22, v24, 0LL) & 1) == 0)
    {
      uint64_t v94 = v8;
      uint64_t v78 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v78, (uint64_t)static Log.default);
      uint64_t v79 = swift_bridgeObjectRetain(v24);
      uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v83 = static os_log_type_t.error.getter(v80, v81, v82);
      if (os_log_type_enabled(v80, v83))
      {
        uint64_t v84 = v7;
        id v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v86 = swift_slowAlloc(32LL, -1LL);
        v102[0] = v86;
        *(_DWORD *)id v85 = 136446210;
        swift_bridgeObjectRetain(v24);
        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease_n(v24, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v80, v83, "Unexpected Region: %{public}s", v85, 0xCu);
        swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1LL, -1LL);
        uint64_t v87 = v85;
        uint64_t v7 = v84;
        id v20 = &off_1000D4000;
        swift_slowDealloc(v87, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v24, 2LL);
      }

      uint64_t v8 = v94;
      goto LABEL_28;
    }

    unint64_t v47 = v24;
  }

  swift_bridgeObjectRelease(v47);
  __int16 v106 = 256;
LABEL_28:
  uint64_t v48 = type metadata accessor for Logger(0LL);
  uint64_t v49 = __swift_project_value_buffer(v48, (uint64_t)static Log.default);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    unint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v91 = swift_slowAlloc(32LL, -1LL);
    v102[0] = v91;
    uint64_t v93 = v8;
    *(_DWORD *)unint64_t v52 = 136315138;
    id v53 = v52 + 12;
    uint64_t v88 = v52 + 4;
    buf = v52;
    swift_beginAccess(&v104, v98, 0LL, 0LL);
    uint64_t v54 = v104;
    uint64_t v55 = v105;
    id v56 = v107;
    if (HIBYTE(v106)) {
      __int16 v57 = 256;
    }
    else {
      __int16 v57 = 0;
    }
    __int16 v58 = v57 | v106;
    swift_bridgeObjectRetain(v105);
    uint64_t v59 = v7;
    os_log_type_t v60 = v3;
    id v61 = v56;
    uint64_t v62 = NISessionDelegate.NIDevice.description.getter(v54, v55, v58, v56);
    unint64_t v64 = v63;

    uint64_t v3 = v60;
    uint64_t v7 = v59;
    swift_bridgeObjectRelease(v55);
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, v102);
    id v65 = v53;
    uint64_t v8 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v88, v65);
    swift_bridgeObjectRelease(v64);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Region updated: %s", buf, 0xCu);
    swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v91, -1LL, -1LL);
    swift_slowDealloc(buf, -1LL, -1LL);
  }

  swift_beginAccess(&v104, v102, 0LL, 0LL);
  uint64_t v66 = v104;
  uint64_t v67 = (uint64_t)v105;
  __int16 v68 = v106;
  int v69 = HIBYTE(v106);
  id v70 = v107;
  swift_beginAccess(v95, &v100, 33LL, 0LL);
  id v71 = v70;
  uint64_t v72 = *(void *)v95;
  swift_bridgeObjectRetain(v67);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
  uint64_t v99 = *(void *)v95;
  *(void *)uint64_t v95 = 0x8000000000000000LL;
  if (v69) {
    __int16 v74 = 256;
  }
  else {
    __int16 v74 = 0;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v66,  v67,  v74 | v68,  (uint64_t)v70,  v7,  v8,  isUniquelyReferenced_nonNull_native);
  uint64_t v75 = *(void *)v95;
  *(void *)uint64_t v95 = v99;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v75);
  swift_endAccess(&v100);
  uint64_t v76 = swift_weakLoadStrong(&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_scanner]);
  if (v76)
  {
    uint64_t v77 = v76;
    (*(void (**)(uint64_t))(*(void *)v76 + 352LL))(v76);
    swift_release(v77);
  }

  swift_bridgeObjectRelease(v105);
}

    unint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v9, v10, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_17;
  }

  if (v15)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_8;
  }

  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      char *v9 = *v10;
      uint64_t v27 = v10[1];
      v9[1] = v27;
      unint64_t v28 = v10[2];
      v9[2] = v28;
      unint64_t v29 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      os_log_type_t v30 = *(int *)(v29 + 24);
      os_log_type_t v51 = (char *)v10 + v30;
      id v53 = (char *)v9 + v30;
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v49 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v31 - 8) + 16LL);
      swift_bridgeObjectRetain(v27);
      uint64_t v32 = swift_bridgeObjectRetain(v28);
      v49(v53, v51, v31, v32);
      __int16 v33 = *(int *)(v29 + 28);
      uint64_t v34 = (char *)v9 + v33;
      unint64_t v35 = (char *)v10 + v33;
      unint64_t v36 = *((void *)v35 + 1);
      if (v36 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      }

      else
      {
        unsigned int v46 = *(void *)v35;
        outlined copy of Data._Representation(*(void *)v35, *((void *)v35 + 1));
        *(void *)uint64_t v34 = v46;
        *((void *)v34 + 1) = v36;
      }

      swift_storeEnumTagMultiPayload(v9, v11, 1LL);
    }

    else
    {
      id v45 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 16LL))(v9, v10, v45);
      swift_storeEnumTagMultiPayload(v9, v11, 0LL);
    }
  }

void specialized NISessionDelegate.session(_:didUpdateAlgorithmState:for:)(void *a1, void *a2)
{
  uint64_t v4 = specialized NISessionDelegate.nearbyDeviceID(_:)(a2);
  if (!v5) {
    return;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess(v8, v37, 0LL, 0LL);
  uint64_t v9 = *v8;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
LABEL_6:
    id v17 = 0LL;
    uint64_t v38 = v6;
    uint64_t v39 = (void *)v7;
    __int16 v40 = 0;
    goto LABEL_7;
  }

  uint64_t v12 = *(void *)(v9 + 56) + 32 * v10;
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *(void **)(v12 + 8);
  char v15 = *(_BYTE *)(v12 + 16);
  char v16 = *(_BYTE *)(v12 + 17);
  id v17 = *(id *)(v12 + 24);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease_n(v7, 2LL);
  swift_bridgeObjectRelease(v9);
  uint64_t v38 = v14;
  uint64_t v39 = v13;
  LOBYTE(v40) = v15;
  HIBYTE(v40) = v16;
LABEL_7:
  id v41 = a1;
  id v18 = a1;

  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  id v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v24;
    *(_DWORD *)unint64_t v23 = 136315138;
    swift_beginAccess(&v38, v35, 0LL, 0LL);
    uint64_t v26 = v38;
    uint64_t v25 = v39;
    id v27 = v41;
    if (HIBYTE(v40)) {
      __int16 v28 = 256;
    }
    else {
      __int16 v28 = 0;
    }
    __int16 v29 = v28 | v40;
    swift_bridgeObjectRetain(v39);
    id v30 = v27;
    uint64_t v31 = NISessionDelegate.NIDevice.description.getter(v26, v25, v29, v27);
    unint64_t v33 = v32;

    swift_bridgeObjectRelease(v25);
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Algorithm state updated: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    swift_bridgeObjectRelease(v25);
  }

  else
  {

    swift_bridgeObjectRelease(v39);
  }

uint64_t outlined assign with take of AsyncStream<CBDevice>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002B8BC()
{
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v1 = *(void *)(v18 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = v4;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v5 = *(void *)(v17 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v13 = v2 | v6 | v11 | 7;
  unint64_t v14 = ((*(void *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v18);
  swift_bridgeObjectRelease(*(void *)(v0 + v16));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v14, v13);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( uint64_t a1)
{
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation)
                 - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = *(void *)((char *)v1 + v6);
  uint64_t v16 = (uint64_t)v1 + v11;
  uint64_t v17 = (void *)swift_task_alloc(dword_1000D5434);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)( a1,  v12,  v13,  v14,  (uint64_t)v1 + v5,  v15,  (uint64_t)v1 + v8,  v16);
}

uint64_t sub_10002BB18()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()( uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v11 = (void *)swift_task_alloc(dword_1000D544C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10002BC54()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()( uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation)
                                      - 8)
                          + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1000D545C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(a1, v5, v6, v7, v8);
}

uint64_t outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002BDB0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation)
                                      - 8)
                          + 80LL);
  return closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()( a1,  *(void *)(v1 + 16),  v1 + ((v3 + 24) & ~v3));
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void __swiftcall Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)( com_apple_SharePlay_NearbyInvitationsService::Pseudonym::Configuration *__return_ptr retstr, Swift::String featureID, Swift::Double minimumExpirationInSeconds, Swift::Double refreshSkewInSeconds, Swift::String_optional reuseIdentifier)
{
  retstr->featureID = featureID;
  retstr->minimumExpirationInSeconds = minimumExpirationInSeconds;
  retstr->refreshSkewInSeconds = refreshSkewInSeconds;
  retstr->reuseIdentifier = reuseIdentifier;
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return swift_task_switch(static Pseudonym.reusable(for:reuseIdentifier:), 0LL, 0LL);
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  v0[19] = v4;
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(v0 + 12),  (uint64_t)(v0 + 14),  &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)(v0 + 14));
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v2;
  v0[7] = v1;
  uint64_t v7 = unk_1000D5504;
  swift_bridgeObjectRetain(v1);
  uint64_t v8 = (void *)swift_task_alloc(v7);
  v0[20] = v8;
  *uint64_t v8 = v0;
  v8[1] = static Pseudonym.reusable(for:reuseIdentifier:);
  return v10(v0[16], (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 160);
  uint64_t v5 = *v2;
  *(void *)(v5 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(static Pseudonym.reusable(for:reuseIdentifier:), 0LL, 0LL);
  }
  uint64_t v7 = *(void *)(v5 + 144);
  swift_bridgeObjectRelease(*(void *)(v5 + 152));
  swift_bridgeObjectRelease(v7);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

BOOL static Pseudonym.Errors.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Pseudonym.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Pseudonym.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t Pseudonym.Configuration.featureID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t Pseudonym.Configuration.featureID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

void (__swiftcall *Pseudonym.Configuration.featureID.modify())()
{
  return Log.init();
}

double Pseudonym.Configuration.minimumExpirationInSeconds.getter()
{
  return *(double *)(v0 + 16);
}

void Pseudonym.Configuration.minimumExpirationInSeconds.setter(double a1)
{
  *(double *)(v1 + swift_weakDestroy(v0 + 16) = a1;
}

void (__swiftcall *Pseudonym.Configuration.minimumExpirationInSeconds.modify())()
{
  return Log.init();
}

double Pseudonym.Configuration.refreshSkewInSeconds.getter()
{
  return *(double *)(v0 + 24);
}

void Pseudonym.Configuration.refreshSkewInSeconds.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

void (__swiftcall *Pseudonym.Configuration.refreshSkewInSeconds.modify())()
{
  return Log.init();
}

uint64_t Pseudonym.Configuration.reuseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t Pseudonym.Configuration.reuseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

void (__swiftcall *Pseudonym.Configuration.reuseIdentifier.modify())()
{
  return Log.init();
}

uint64_t Pseudonym.Configuration.description.getter()
{
  v16[0] = 0LL;
  v16[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(51LL);
  v1._uint64_t countAndFlagsBits = 60LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = 0x72756769666E6F43LL;
  v2._uint64_t object = (void *)0xED00006E6F697461LL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x657275746165663ALL;
  v3._uint64_t object = (void *)0xEB000000003D4449LL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)v0;
  uint64_t v5 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v5);
  v6._uint64_t countAndFlagsBits = v4;
  v6._uint64_t object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._uint64_t countAndFlagsBits = 0x3D70786520LL;
  v7._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v7);
  Double.write<A>(to:)( v16,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  *(double *)(v0 + 16));
  v8._uint64_t countAndFlagsBits = 0x3D77656B7320LL;
  v8._uint64_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v8);
  Double.write<A>(to:)( v16,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  *(double *)(v0 + 24));
  v9._uint64_t object = (void *)0x80000001000B0080LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + 40);
  if (v10) {
    uint64_t v11 = *(void *)(v0 + 32);
  }
  else {
    uint64_t v11 = 0x3E454E4F4E3CLL;
  }
  if (v10) {
    uint64_t v12 = *(void **)(v0 + 40);
  }
  else {
    uint64_t v12 = (void *)0xE600000000000000LL;
  }
  swift_bridgeObjectRetain(v10);
  v13._uint64_t countAndFlagsBits = v11;
  v13._uint64_t object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._uint64_t countAndFlagsBits = 62LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return v16[0];
}

id Pseudonym.pseudonym.getter()
{
  return *(id *)(v0 + 16);
}

void Pseudonym.pseudonym.setter(uint64_t a1)
{
  Swift::String v3 = *(void **)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
}

uint64_t (*Pseudonym.pseudonym.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t Pseudonym.handle.getter()
{
  id v1 = [*(id *)(v0 + 16) URI];
  id v2 = [v1 prefixedURI];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void Pseudonym.expirationDate.getter()
{
  id v1 = [*(id *)(v0 + 16) properties];
  id v2 = [v1 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v2);
}

uint64_t Pseudonym.refreshTask.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

uint64_t Pseudonym.refreshTask.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  return swift_release(v3);
}

uint64_t (*Pseudonym.refreshTask.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t Pseudonym.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  *(void *)a1 = *(void *)(v1 + 72);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t one-time initialization function for provider()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  uint64_t v1 = type metadata accessor for UserDefaultsPseudonymStorage();
  uint64_t v2 = (void *)swift_allocObject(v1, 40LL, 7LL);
  uint64_t v3 = type metadata accessor for Lock(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = Lock.init()();
  v2[3] = v0;
  void v2[4] = &_swiftEmptySetSingleton;
  void v2[2] = v4;
  uint64_t v9 = v1;
  uint64_t v10 = &protocol witness table for UserDefaultsPseudonymStorage;
  *(void *)&__int128 v8 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProvider<Pseudonym>);
  uint64_t v6 = swift_allocObject(v5, 80LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x4014000000000000LL;
  *(void *)(v6 + 24) = [objc_allocWithZone(NSRecursiveLock) init];
  *(void *)(v6 + 72) = &_swiftEmptyDictionarySingleton;
  uint64_t result = outlined init with take of PseudonymProtocol(&v8, v6 + 32);
  static Pseudonym.provider = (_UNKNOWN *)v6;
  return result;
}

uint64_t PseudonymProvider.__allocating_init(storage:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 80LL, 7LL);
  PseudonymProvider.init(storage:)(a1);
  return v3;
}

uint64_t static Pseudonym.markUsed(handle:for:reuseIdentifier:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a3, v10);
  return specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)(a1, a2, (uint64_t)v12, a4, a5, v5, v10, v11);
}

uint64_t static Pseudonym.reusable(for:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(unk_1000D5504);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = static Pseudonym.reusable(for:configuration:);
  return v7(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(unk_1000D551C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = Pseudonym.__allocating_init(service:configuration:);
  return v7(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:configuration:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t static Pseudonym.existing(for:reuseIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)a1;
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(a1, 1, (uint64_t)v12);
  if (!v3)
  {
    uint64_t v8 = v12[0];
    uint64_t v7 = v12[1];
    uint64_t v9 = v12[2];
    uint64_t v10 = v12[3];
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)&v13,  (uint64_t)v14,  &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v14);
    *(void *)&__int128 v15 = v8;
    *((void *)&v15 + 1) = v7;
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v6 = specialized static Pseudonym.existing(for:configuration:)(v6, &v15);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v7);
  }

  return v6;
}

uint64_t static Pseudonym.existing(for:configuration:)(uint64_t a1, __int128 *a2)
{
  return specialized static Pseudonym.existing(for:configuration:)(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:)(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return swift_task_switch(Pseudonym.__allocating_init(service:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 112);
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = Pseudonym.__allocating_init(service:);
  }

  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v6 = Pseudonym.__allocating_init(service:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t Pseudonym.__allocating_init(service:)()
{
  uint64_t v1 = (void *)swift_task_alloc(unk_1000D551C);
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = Pseudonym.__allocating_init(service:);
  return v3(v0 + 64, v0 + 16);
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_0Tm(*(void **)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 128));
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_0Tm(*(void **)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t Pseudonym.__allocating_init(service:pseudonym:)( void *a1, uint64_t a2, unint64_t a3)
{
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v8);
    a3 = specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v8, a2, a3, v9);
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }

  return a3;
}

unint64_t Pseudonym.__allocating_init(service:pseudonym:configuration:)( void *a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  return specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(a1, a2, a3, a4);
}

uint64_t Pseudonym.__allocating_init(service:pseudonym:configuration:)(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = swift_allocObject(v3, 121LL, 7LL);
  Pseudonym.init(service:pseudonym:configuration:)(a1, a2, a3);
  return v7;
}

uint64_t Pseudonym.init(service:pseudonym:configuration:)(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  *(void *)(v3 + 24) = 0LL;
  uint64_t v12 = (uint64_t *)(v3 + 24);
  *(_BYTE *)(v3 + 120) = 0;
  outlined init with copy of PseudonymProtocol((uint64_t)a1, v3 + 32);
  __int128 v13 = a3[1];
  *(_OWORD *)(v3 + 72) = *a3;
  *(_OWORD *)(v3 + 88) = v13;
  *(_OWORD *)(v3 + 104) = a3[2];
  *(void *)(v3 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = a2;
  Swift::String v14 = (void **)(v3 + 16);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v11, 1LL, 1LL, v15);
  uint64_t v16 = swift_allocObject(&unk_1000CAAE8, 24LL, 7LL);
  swift_weakInit(v16 + 16, v4);
  swift_beginAccess(v14, v26, 0LL, 0LL);
  uint64_t v17 = *v14;
  uint64_t v18 = swift_allocObject(&unk_1000CAB10, 96LL, 7LL);
  *(void *)(v18 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  *(void *)(v18 + 32) = v17;
  __int128 v19 = *a3;
  __int128 v20 = a3[1];
  *(_OWORD *)(v18 + 40) = *a3;
  *(_OWORD *)(v18 + 56) = v20;
  *(_OWORD *)(v18 + 72) = a3[2];
  *(void *)(v18 + 88) = v16;
  __int128 v28 = v19;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a3 + 2),  (uint64_t)v27,  &demangling cache variable for type metadata for String?);
  outlined retain of String((uint64_t)&v28);
  outlined retain of String((uint64_t)v27);
  id v21 = v17;
  uint64_t v22 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5( (uint64_t)v11,  (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.init(service:pseudonym:configuration:),  v18);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  swift_beginAccess(v12, v25, 1LL, 0LL);
  uint64_t v23 = *v12;
  *uint64_t v12 = v22;
  swift_release(v23);
  return v4;
}

uint64_t closure #1 in Pseudonym.init(service:pseudonym:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  void v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  v6[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[12] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[13] = swift_task_alloc(v11);
  v6[14] = swift_task_alloc(v11);
  return swift_task_switch(closure #1 in Pseudonym.init(service:pseudonym:configuration:), 0LL, 0LL);
}

uint64_t closure #1 in Pseudonym.init(service:pseudonym:configuration:)()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 48);
  id v6 = [*(id *)(v0 + 40) properties];
  id v7 = [v6 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v7);
  Date.init()(v8);
  double v9 = Date.timeIntervalSince(_:)(v2);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v2, v3);
  uint64_t v11 = ((uint64_t (*)(uint64_t, uint64_t))v10)(v1, v3);
  uint64_t v12 = static Duration.seconds(_:)(v11, v9 - *(double *)(v5 + 24));
  uint64_t v14 = v13;
  ContinuousClock.init()();
  uint64_t v15 = (void *)swift_task_alloc(unk_1000D57A4);
  *(void *)(v0 + 120) = v15;
  *uint64_t v15 = v0;
  v15[1] = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  return v17(v12, v14, 0LL, 0LL, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[9] + 8LL))(v2[10], v2[8]);
  if (v0) {
    uint64_t v4 = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  }
  else {
    uint64_t v4 = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v1 = *(void *)(v0 + 128);
  static Task<>.checkCancellation()();
  if (v1
    || (uint64_t v5 = *(void *)(v0 + 56) + 16LL,
        swift_beginAccess(v5, v0 + 16, 0LL, 0LL),
        uint64_t Strong = swift_weakLoadStrong(v5),
        (*(void *)(v0 + 136) = Strong) == 0LL))
  {
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v3 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    id v7 = (void *)swift_task_alloc(dword_1000D553C);
    *(void *)(v0 + 144) = v7;
    *id v7 = v0;
    v7[1] = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
    return Pseudonym.refreshPseudonym()();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in Pseudonym.init(service:pseudonym:configuration:), 0LL, 0LL);
  }
  swift_release(*(void *)(v3 + 136));
  uint64_t v5 = *(void *)(v3 + 104);
  id v6 = *(void *)(v3 + 80);
  swift_task_dealloc(*(void *)(v3 + 112));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  swift_release(*(void *)(v0 + 136));
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Pseudonym.refreshPseudonym()()
{
  *(void *)(v1 + 96) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 104) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(Pseudonym.refreshPseudonym(), 0LL, 0LL);
}

{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  int *v18;
  uint64_t v19;
  id v20;
  double **v21;
  uint64_t (*v23)(id, uint64_t, uint64_t, double);
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v1 = *((void *)v0 + 12);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Log.group);
  uint64_t v3 = swift_retain_n(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.default.getter();
  id v6 = os_log_type_enabled(v4, v5);
  id v7 = *((void *)v0 + 12);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    double v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_beginAccess(v7 + 16, v0 + 8, 0LL, 0LL);
    uint64_t v10 = *(void **)(v7 + 16);
    *((void *)v0 + 11) = v10;
    uint64_t v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v8 + 4, v8 + 12);
    void *v9 = v10;
    swift_release_n(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempting to refresh pseudonym %@", v8, 0xCu);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*((void *)v0 + 12));
  }

  uint64_t v13 = (double *)*((void *)v0 + 12);
  uint64_t v14 = *((void *)v13 + 7);
  uint64_t v15 = *((void *)v13 + 8);
  __swift_project_boxed_opaque_existential_1((void *)v13 + 4, v14);
  swift_beginAccess(v13 + 2, v0 + 2, 1LL, 0LL);
  uint64_t v16 = (void *)*((void *)v13 + 2);
  *((void *)v0 + 14) = v16;
  uint64_t v17 = v13[11];
  v0[15] = v17;
  uint64_t v18 = *(int **)(v15 + 32);
  __int128 v19 = v18[1];
  uint64_t v23 = (uint64_t (*)(id, uint64_t, uint64_t, double))((char *)v18 + *v18);
  __int128 v20 = v16;
  id v21 = (double **)swift_task_alloc(v19);
  *((void *)v0 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v21;
  *id v21 = v0;
  v21[1] = (double *)Pseudonym.refreshPseudonym();
  return v23(v20, v14, v15, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = (void *)v2[2];
  void v2[2] = *(void *)(v0 + 144);

  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v3, 1LL, 1LL, v5);
  id v6 = swift_allocObject(&unk_1000CAAE8, 24LL, 7LL);
  swift_weakInit(v6 + 16, v2);
  uint64_t v8 = v2[9];
  id v7 = v2[10];
  double v9 = v2[12];
  uint64_t v10 = v2[14];
  uint64_t v18 = v2[13];
  uint64_t v11 = (void *)v2[2];
  swift_beginAccess(v2 + 3, v0 + 40, 1LL, 0LL);
  uint64_t v12 = v2[3];
  uint64_t v13 = (void *)swift_allocObject(&unk_1000CAB38, 104LL, 7LL);
  v13[2] = 0LL;
  v13[3] = 0LL;
  v13[4] = v12;
  v13[5] = v11;
  v13[6] = v8;
  v13[7] = v7;
  v13[8] = v1;
  v13[9] = v9;
  v13[10] = v18;
  v13[11] = v10;
  v13[12] = v6;
  swift_retain();
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  uint64_t v14 = v11;
  uint64_t v15 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5( v3,  (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.refreshPseudonym(),  (uint64_t)v13);
  outlined destroy of Any?(v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = v2[3];
  v2[3] = v15;
  swift_release(v16);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 104);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Pseudonym.refreshPseudonym()(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 128);
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    id v6 = Pseudonym.refreshPseudonym();
  }

  else
  {

    *(void *)(v4 + 144) = a1;
    id v6 = Pseudonym.refreshPseudonym();
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6, v7);
  double v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v12 = 4096LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      __int128 v19 = 0LL;
      return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v12 = v20 | 0x1000LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13) {
      goto LABEL_6;
    }
  }

  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  uint64_t v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16)) {
    goto LABEL_6;
  }
  v22[0] = 0LL;
  v22[1] = 0LL;
  __int128 v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t Pseudonym.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v14 = 60LL;
  unint64_t v15 = 0xE100000000000000LL;
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
  uint64_t object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x3D49525520LL;
  v4._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v4);
  swift_beginAccess(v0 + 2, v13, 0LL, 0LL);
  id v5 = [(id)v0[2] URI];
  id v6 = [v5 prefixedURI];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  double v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._uint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._uint64_t countAndFlagsBits = 62LL;
  v11._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return v14;
}

Swift::Void __swiftcall Pseudonym.markUsed()()
{
  uint64_t v1 = *v0;
  *((_BYTE *)v0 + 120) = 1;
  unint64_t v2 = v0[14];
  if (v2)
  {
    uint64_t v3 = v0;
    uint64_t v4 = v0[13];
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v5, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v6 = swift_retain_n(v0);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v37 = v35;
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain(v2);
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(v2, 3LL);
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v38 = 60LL;
      v39[0] = 0xE100000000000000LL;
      swift_retain();
      v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
      uint64_t object = v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      v12._uint64_t countAndFlagsBits = 0x3D49525520LL;
      v12._uint64_t object = (void *)0xE500000000000000LL;
      String.append(_:)(v12);
      swift_beginAccess(v0 + 2, v36, 0LL, 0LL);
      id v13 = [(id)v0[2] URI];
      id v14 = [v13 prefixedURI];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v16 = v4;
      uint64_t v18 = v17;

      v19._uint64_t countAndFlagsBits = v15;
      v19._uint64_t object = v18;
      String.append(_:)(v19);
      unsigned __int8 v20 = v18;
      uint64_t v4 = v16;
      swift_bridgeObjectRelease(v20);
      v21._uint64_t countAndFlagsBits = 62LL;
      v21._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      swift_release(v3);
      unint64_t v22 = v39[0];
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39[0], &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v9 + 14, v9 + 22);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v22);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Marked reusable pseudonym with identifier: %s as used: %s",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v0);
      swift_bridgeObjectRelease_n(v2, 2LL);
    }

    if (one-time initialization token for provider != -1) {
      swift_once(&one-time initialization token for provider, one-time initialization function for provider);
    }
    uint64_t v23 = static Pseudonym.provider;
    swift_beginAccess(v3 + 2, &v38, 0LL, 0LL);
    id v24 = [(id)v3[2] URI];
    id v25 = [v24 prefixedURI];

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    __int16 v29 = v3 + 4;
    uint64_t v30 = v3[7];
    uint64_t v31 = v3[8];
    __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    if (v33)
    {
      uint64_t v34 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v23 + 176LL))( v26,  v28,  v32,  v33,  v4,  v2);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v34);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t closure #1 in Pseudonym.refreshPseudonym()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  void v7[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  v7[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[13] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[14] = swift_task_alloc(v12);
  v7[15] = swift_task_alloc(v12);
  return swift_task_switch(closure #1 in Pseudonym.refreshPseudonym(), 0LL, 0LL);
}

uint64_t closure #1 in Pseudonym.refreshPseudonym()()
{
  uint64_t v1 = ((uint64_t (*)(void))static Task<>.checkCancellation())();
  uint64_t v2 = *(void *)(v0 + 40);
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 128) = v3;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v3 = v0;
    v3[1] = closure #1 in Pseudonym.refreshPseudonym();
    return Task.value.getter( v4,  v2,  (char *)&type metadata for () + 8,  v4,  &protocol self-conformance witness table for Error);
  }

  else
  {
    static Task<>.checkCancellation()(v1);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 56);
    id v11 = [*(id *)(v0 + 48) properties];
    id v12 = [v11 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);
    Date.init()(v13);
    double v14 = Date.timeIntervalSince(_:)(v7);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v7, v8);
    uint64_t v16 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v6, v8);
    uint64_t v17 = static Duration.seconds(_:)(v16, v14 - *(double *)(v10 + 24));
    uint64_t v19 = v18;
    ContinuousClock.init()();
    unsigned __int8 v20 = (void *)swift_task_alloc(unk_1000D57A4);
    *(void *)(v0 + 144) = v20;
    *unsigned __int8 v20 = v0;
    v20[1] = closure #1 in Pseudonym.refreshPseudonym();
    return v21(v17, v19, 0LL, 0LL, 1);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = closure #1 in Pseudonym.refreshPseudonym();
  }

  else
  {
    uint64_t v3 = closure #1 in Pseudonym.refreshPseudonym();
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  double v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v1 = *(void *)(v0 + 136);
  static Task<>.checkCancellation()();
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = [*(id *)(v0 + 48) properties];
    uint64_t v10 = [v9 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v10);
    Date.init()(v11);
    id v12 = Date.timeIntervalSince(_:)(v3);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v13(v3, v6);
    double v14 = ((uint64_t (*)(uint64_t, uint64_t))v13)(v2, v6);
    uint64_t v15 = static Duration.seconds(_:)(v14, v12 - *(double *)(v8 + 24));
    uint64_t v17 = v16;
    ContinuousClock.init()();
    uint64_t v18 = (void *)swift_task_alloc(unk_1000D57A4);
    *(void *)(v0 + 144) = v18;
    *uint64_t v18 = v0;
    v18[1] = closure #1 in Pseudonym.refreshPseudonym();
    return v19(v15, v17, 0LL, 0LL, 1);
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[10] + 8LL))(v2[11], v2[9]);
  if (v0) {
    uint64_t v4 = closure #1 in Pseudonym.refreshPseudonym();
  }
  else {
    uint64_t v4 = closure #1 in Pseudonym.refreshPseudonym();
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v1 = *(void *)(v0 + 152);
  static Task<>.checkCancellation()();
  if (v1
    || (uint64_t v5 = *(void *)(v0 + 64) + 16LL,
        swift_beginAccess(v5, v0 + 16, 0LL, 0LL),
        uint64_t Strong = swift_weakLoadStrong(v5),
        (*(void *)(v0 + 160) = Strong) == 0LL))
  {
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_1000D553C);
    *(void *)(v0 + 168) = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in Pseudonym.refreshPseudonym();
    return Pseudonym.refreshPseudonym()();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v2 = *(void *)(*v1 + 168);
  uint64_t v3 = *v1;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in Pseudonym.refreshPseudonym(), 0LL, 0LL);
  }
  swift_release(*(void *)(v3 + 160));
  uint64_t v5 = *(void *)(v3 + 112);
  uint64_t v6 = *(void *)(v3 + 88);
  swift_task_dealloc(*(void *)(v3 + 120));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  double v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  static Task<>.checkCancellation()();
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = [*(id *)(v0 + 48) properties];
  uint64_t v7 = [v6 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v7);
  Date.init()(v8);
  uint64_t v9 = Date.timeIntervalSince(_:)(v2);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v2, v3);
  id v11 = ((uint64_t (*)(uint64_t, uint64_t))v10)(v1, v3);
  id v12 = static Duration.seconds(_:)(v11, v9 - *(double *)(v5 + 24));
  double v14 = v13;
  ContinuousClock.init()();
  uint64_t v15 = (void *)swift_task_alloc(unk_1000D57A4);
  *(void *)(v0 + 144) = v15;
  *uint64_t v15 = v0;
  v15[1] = closure #1 in Pseudonym.refreshPseudonym();
  return v17(v12, v14, 0LL, 0LL, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  swift_release(*(void *)(v0 + 160));
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *Pseudonym.deinit()
{
  uint64_t v23 = *v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v22 = v4;
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  swift_beginAccess(v0 + 2, v26, 0LL, 0LL);
  id v6 = [(id)v0[2] URI];
  id v7 = [v6 prefixedURI];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  id v11 = (void *)v0[2];
  swift_beginAccess(v0 + 3, v25, 0LL, 0LL);
  uint64_t v12 = v0[3];
  char v13 = *((_BYTE *)v0 + 120);
  uint64_t v14 = v0[13];
  uint64_t v15 = v0[14];
  outlined init with copy of PseudonymProtocol((uint64_t)(v0 + 4), (uint64_t)v24);
  uint64_t v16 = swift_allocObject(&unk_1000CAB60, 136LL, 7LL);
  *(void *)(v16 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = 0LL;
  *(void *)(v16 + 24) = 0LL;
  *(void *)(v16 + 32) = v12;
  *(void *)(v16 + 40) = v14;
  *(void *)(v16 + 48) = v15;
  *(_BYTE *)(v16 + 56) = v13;
  *(void *)(v16 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v11;
  *(void *)(v16 + 72) = v8;
  *(void *)(v16 + 80) = v10;
  outlined init with take of PseudonymProtocol(v24, v16 + 88);
  *(void *)(v16 + 128) = v23;
  swift_bridgeObjectRetain(v15);
  id v17 = v11;
  swift_retain(v12);
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v22,  (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.deinit,  v16);
  swift_release(v18);

  swift_release(v0[3]);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 4);
  uint64_t v19 = v0[14];
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v19);
  return v0;
}

uint64_t closure #1 in Pseudonym.deinit( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  *(_BYTE *)(v8 + 184) = a7;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a5;
  uint64_t v9 = type metadata accessor for Date(0LL);
  *(void *)(v8 + 128) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 136) = v10;
  *(void *)(v8 + 144) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in Pseudonym.deinit, 0LL, 0LL);
}

uint64_t closure #1 in Pseudonym.deinit()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    Task.cancel()();
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in Pseudonym.deinit;
    return Task.value.getter( v3,  v1,  (char *)&type metadata for () + 8,  v2,  &protocol self-conformance witness table for Error);
  }

  unint64_t v5 = *(void *)(v0 + 88);
  if (v5 && (*(_BYTE *)(v0 + 184) & 1) == 0)
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v33 = *(void **)(v0 + 96);
    uint64_t v34 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v34, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v36 = static os_log_type_t.info.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void **)(v0 + 96);
    if (v37)
    {
      os_log_t log = *(os_log_t *)(v0 + 80);
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v54 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v57 = v55;
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_bridgeObjectRetain(v5);
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)log, v5, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(v5, 3LL);
      *(_WORD *)(v39 + 12) = 2112;
      *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v38;
      id v40 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v39 + 14, v39 + 22);
      *uint64_t v54 = v38;

      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Not revoking unused reusable pseudonym with reuse identifier %s: %@",  (uint8_t *)v39,  0x16u);
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v54, 1LL, v41);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    if (one-time initialization token for provider != -1) {
      swift_once(&one-time initialization token for provider, one-time initialization function for provider);
    }
    unint64_t v47 = *(void **)(v0 + 120);
    uint64_t v48 = static Pseudonym.provider;
    uint64_t v49 = v47[3];
    uint64_t v50 = v47[4];
    __swift_project_boxed_opaque_existential_1(v47, v49);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
    if (!v51)
    {
      __break(1u);
      return result;
    }

    uint64_t v52 = v51;
    (*(void (**)(void, void, uint64_t, uint64_t, void, unint64_t))(*(void *)v48 + 192LL))( *(void *)(v0 + 104),  *(void *)(v0 + 112),  result,  v51,  *(void *)(v0 + 80),  v5);
    swift_bridgeObjectRelease(v52);
LABEL_27:
    swift_task_dealloc(*(void *)(v0 + 144));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 128);
  id v9 = [*(id *)(v0 + 96) properties];
  id v10 = [v9 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v10);
  double v12 = Date.timeIntervalSinceNow.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if (v12 <= 0.0)
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v23 = *(void **)(v0 + 96);
    uint64_t v24 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v24, (uint64_t)static Log.group);
    id v25 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = *(void **)(v0 + 96);
    if (v27)
    {
      __int16 v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)__int16 v29 = 138412290;
      *(void *)(v0 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v28;
      id v31 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v29 + 4, v29 + 12);
      *uint64_t v30 = v28;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not revoking expired pseudonym: %@", v29, 0xCu);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v30, 1LL, v32);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
    }

    specialized $defer #1 () in closure #1 in Pseudonym.deinit( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void **)(v0 + 120));
    goto LABEL_27;
  }

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v13 = *(void **)(v0 + 96);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 160) = __swift_project_value_buffer(v14, (uint64_t)static Log.group);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void **)(v0 + 96);
  if (v17)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unsigned __int8 v20 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v19 = 138412290;
    *(void *)(v0 + 48) = v18;
    id v21 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 4, v19 + 12);
    *unsigned __int8 v20 = v18;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Revoking pseudonym: %@", v19, 0xCu);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v20, 1LL, v22);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
  }

  id v42 = *(void **)(v0 + 120);
  uint64_t v43 = v42[3];
  uint64_t v44 = v42[4];
  __swift_project_boxed_opaque_existential_1(v42, v43);
  id v45 = *(int **)(v44 + 40);
  id v56 = (int *)((char *)v45 + *v45);
  unsigned int v46 = (void *)swift_task_alloc(v45[1]);
  *(void *)(v0 + 168) = v46;
  *unsigned int v46 = v0;
  v46[1] = closure #1 in Pseudonym.deinit;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v56)(*(void *)(v0 + 96), v43, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  swift_task_dealloc(*(void *)(*(void *)v1 + 152LL));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = closure #1 in Pseudonym.deinit;
  }

  else
  {
    uint64_t v2 = closure #1 in Pseudonym.deinit;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  BOOL v22;
  void *v23;
  uint8_t *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  os_log_s *v30;
  os_log_type_t v31;
  BOOL v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  void *v42;
  uint64_t result;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v1 = *(void *)(v0 + 88);
  if (v1 && (*(_BYTE *)(v0 + 184) & 1) == 0)
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v28 = *(void **)(v0 + 96);
    __int16 v29 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v29, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n(v1, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v28);
    id v31 = static os_log_type_t.info.getter();
    uint64_t v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void **)(v0 + 96);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 80);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v50 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v52;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain(v1);
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v1, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v1, 3LL);
      *(_WORD *)(v35 + 12) = 2112;
      *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v33;
      os_log_type_t v36 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v35 + 14, v35 + 22);
      *uint64_t v50 = v33;

      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Not revoking unused reusable pseudonym with reuse identifier %s: %@",  (uint8_t *)v35,  0x16u);
      BOOL v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v50, 1LL, v37);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v1, 2LL);
    }

    if (one-time initialization token for provider != -1) {
      swift_once(&one-time initialization token for provider, one-time initialization function for provider);
    }
    uint64_t v44 = *(void **)(v0 + 120);
    id v45 = static Pseudonym.provider;
    unsigned int v46 = v44[3];
    unint64_t v47 = v44[4];
    __swift_project_boxed_opaque_existential_1(v44, v46);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
    if (!v48)
    {
      __break(1u);
      return result;
    }

    uint64_t v49 = v48;
    (*(void (**)(void, void, uint64_t, uint64_t, void, unint64_t))(*(void *)v45 + 192LL))( *(void *)(v0 + 104),  *(void *)(v0 + 112),  result,  v48,  *(void *)(v0 + 80),  v1);
    swift_bridgeObjectRelease(v49);
LABEL_25:
    swift_task_dealloc(*(void *)(v0 + 144));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v5 = [*(id *)(v0 + 96) properties];
  uint64_t v6 = [v5 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v8 = Date.timeIntervalSinceNow.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v8 <= 0.0)
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v18 = *(void **)(v0 + 96);
    uint64_t v19 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v19, (uint64_t)static Log.group);
    unsigned __int8 v20 = (os_log_s *)Logger.logObject.getter(v18);
    id v21 = static os_log_type_t.default.getter();
    uint64_t v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void **)(v0 + 96);
    if (v22)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v25 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v0 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v23;
      os_log_type_t v26 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v24 + 4, v24 + 12);
      *id v25 = v23;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not revoking expired pseudonym: %@", v24, 0xCu);
      BOOL v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v25, 1LL, v27);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
    }

    specialized $defer #1 () in closure #1 in Pseudonym.deinit( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void **)(v0 + 120));
    goto LABEL_25;
  }

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  id v9 = *(void **)(v0 + 96);
  id v10 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 160) = __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v9);
  double v12 = static os_log_type_t.info.getter();
  uint64_t v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = *(void **)(v0 + 96);
  if (v13)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v15 = 138412290;
    *(void *)(v0 + 48) = v14;
    os_log_type_t v16 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v15 + 4, v15 + 12);
    void *v51 = v14;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Revoking pseudonym: %@", v15, 0xCu);
    BOOL v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v51, 1LL, v17);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v38 = *(void **)(v0 + 120);
  uint64_t v39 = v38[3];
  id v40 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v39);
  uint64_t v41 = *(int **)(v40 + 40);
  id v53 = (int *)((char *)v41 + *v41);
  id v42 = (void *)swift_task_alloc(v41[1]);
  *(void *)(v0 + 168) = v42;
  *id v42 = v0;
  v42[1] = closure #1 in Pseudonym.deinit;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v53)(*(void *)(v0 + 96), v39, v40);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in Pseudonym.deinit;
  }
  else {
    uint64_t v3 = closure #1 in Pseudonym.deinit;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  os_log_s *v1;
  os_log_type_t v2;
  void *v3;
  uint8_t *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 96));
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 96);
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    *(void *)(v0 + 40) = v3;
    unint64_t v5 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v4 + 4, v4 + 12);
    void *v9 = v3;

    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully revoked used pseudonym %@", v4, 0xCu);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v9, 1LL, v6);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
    uint64_t v7 = *(void **)(v0 + 96);
  }

  specialized $defer #1 () in closure #1 in Pseudonym.deinit( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void **)(v0 + 120));
  swift_task_dealloc(*(void *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  os_log_s *log;
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(id *)(v0 + 96);
  swift_errorRetain(v1);
  uint64_t v3 = v2;
  uint64_t v4 = swift_errorRetain(v1);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v8 = static os_log_type_t.error.getter(v5, v6, v7);
  if (os_log_type_enabled(v5, v8))
  {
    uint64_t v18 = *(void *)(v0 + 176);
    id v9 = *(void **)(v0 + 96);
    os_log_t log = v5;
    id v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(16LL, -1LL);
    *(void *)(v0 + 24) = v9;
    *(_DWORD *)id v10 = 138412546;
    double v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    *uint64_t v11 = v9;

    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v18);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v18);
    *(void *)(v0 + 32) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 14, v10 + 22);
    v11[1] = v13;
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v8,  "Failed to revoke used pseudonym %@, reason: %@",  (uint8_t *)v10,  0x16u);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v11, 2LL, v14);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v18);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 176);
    os_log_type_t v16 = *(void **)(v0 + 96);
    swift_errorRelease(v15);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  specialized $defer #1 () in closure #1 in Pseudonym.deinit( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void **)(v0 + 120));
  swift_task_dealloc(*(void *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Pseudonym.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 121LL, 7LL);
}

uint64_t protocol witness for PseudonymProtocol.handle.getter in conformance Pseudonym()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v6, 0LL, 0LL);
  id v2 = [*(id *)(v1 + 16) URI];
  id v3 = [v2 prefixedURI];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void protocol witness for PseudonymProtocol.expirationDate.getter in conformance Pseudonym()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 16, v4, 0LL, 0LL);
  id v2 = [*(id *)(v1 + 16) properties];
  id v3 = [v2 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);
}

uint64_t protocol witness for PseudonymProtocol.service.getter in conformance Pseudonym@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol(*v1 + 32LL, a1);
}

uint64_t protocol witness for PseudonymProtocol.configuration.getter in conformance Pseudonym@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = *(void *)(*v1 + 112);
  *(void *)a1 = *(void *)(*v1 + 72);
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = *(_OWORD *)(v2 + 88);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v5);
}

unint64_t protocol witness for static PseudonymProtocol.create(service:pseudonym:configuration:) in conformance Pseudonym@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int128 *a4@<X3>, unint64_t *a5@<X8>)
{
  __int128 v13 = *a4;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a4 + 2),  (uint64_t)v12,  &demangling cache variable for type metadata for String?);
  swift_bridgeObjectRetain(a3);
  outlined retain of String((uint64_t)&v13);
  outlined retain of String((uint64_t)v12);
  unint64_t result = specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v11, a2, a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

unint64_t static Pseudonym.create(service:pseudonym:configuration:)( uint64_t a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  __int128 v10 = *a4;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a4 + 2),  (uint64_t)v9,  &demangling cache variable for type metadata for String?);
  swift_bridgeObjectRetain(a3);
  outlined retain of String((uint64_t)&v10);
  outlined retain of String((uint64_t)v9);
  return specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v8, a2, a3, a4);
}

void protocol witness for PseudonymProtocol.markUsed() in conformance Pseudonym()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Pseudonym()
{
  return Pseudonym.description.getter();
}

uint64_t protocol witness for PseudonymServiceManager.serviceIdentifier.getter in conformance IDSService()
{
  id v1 = [*v0 serviceIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t protocol witness for PseudonymServiceManager.accounts.getter in conformance IDSService()
{
  id v1 = [*v0 accounts];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSAccount,  &OBJC_CLASS___IDSAccount_ptr);
  unint64_t v4 = lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  return v5;
}

id protocol witness for PseudonymServiceManager.pseudonym(forPseudonymURI:) in conformance IDSService( uint64_t a1)
{
  return [*v1 pseudonymForPseudonymURI:a1];
}

uint64_t protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService( uint64_t a1, double a2)
{
  uint64_t v6 = v3 + 2;
  uint64_t v7 = *v2;
  v3[7] = v3 + 15;
  v3[2] = v3;
  v3[3] = protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService;
  uint64_t v8 = swift_continuation_init(v3 + 2, 1LL);
  v3[10] = _NSConcreteStackBlock;
  id v9 = v3 + 10;
  v9[1] = 0x40000000LL;
  v9[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym;
  __int128 v9[3] = &block_descriptor_47;
  void v9[4] = v8;
  [v7 renewPseudonym:a1 forUpdatedDuration:v9 completion:a2];
  return swift_continuation_await(v6);
}

uint64_t protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService()
{
  uint64_t v1 = *v0;
  if (!*(void *)(v1 + 48)) {
    return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 120));
  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym( uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 4swift_beginAccess(v1 + 24, v5, 1LL, 0LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService( uint64_t a1)
{
  unint64_t v4 = v2 + 2;
  uint64_t v5 = *v1;
  v2[7] = v2 + 15;
  void v2[2] = v2;
  v2[3] = protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService;
  uint64_t v6 = swift_continuation_init(v2 + 2, 1LL);
  v2[10] = _NSConcreteStackBlock;
  uint64_t v7 = v2 + 10;
  v7[1] = 0x40000000LL;
  _OWORD v7[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
  v7[3] = &block_descriptor_45;
  v7[4] = v6;
  [v5 revokePseudonym:a1 completion:v7];
  return swift_continuation_await(v4);
}

uint64_t protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService()
{
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 120);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  }

  return v2(v3);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool( uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(_BYTE **)(*(void *)(v3 + 64) + 4swift_beginAccess(v1 + 24, v5, 1LL, 0LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t protocol witness for PseudonymServiceManager.provisionPseudonym(for:with:) in conformance IDSService( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3 + 2;
  uint64_t v7 = *v2;
  v3[7] = v3 + 15;
  v3[2] = v3;
  v3[3] = protocol witness for PseudonymServiceManager.provisionPseudonym(for:with:) in conformance IDSService;
  uint64_t v8 = swift_continuation_init(v3 + 2, 1LL);
  v3[10] = _NSConcreteStackBlock;
  id v9 = v3 + 10;
  v9[1] = 0x40000000LL;
  v9[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym;
  __int128 v9[3] = &block_descriptor_0;
  void v9[4] = v8;
  [v7 provisionPseudonymForURI:a1 withProperties:a2 completion:v9];
  return swift_continuation_await(v6);
}

const char *UserDefaultsPseudonymStorage.reusableKey.unsafeMutableAddressor()
{
  return "reusable";
}

uint64_t static UserDefaultsPseudonymStorage.reusableKey.getter()
{
  return 0x656C626173756572LL;
}

const char *UserDefaultsPseudonymStorage.inUseKey.unsafeMutableAddressor()
{
  return "inUse";
}

uint64_t static UserDefaultsPseudonymStorage.inUseKey.getter()
{
  return 0x6573556E69LL;
}

const char *UserDefaultsPseudonymStorage.pendingRevokeKey.unsafeMutableAddressor()
{
  return "pendingRevoke";
}

uint64_t static UserDefaultsPseudonymStorage.pendingRevokeKey.getter()
{
  return 0x52676E69646E6570LL;
}

uint64_t UserDefaultsPseudonymStorage.lock.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

void *UserDefaultsPseudonymStorage.__allocating_init(userDefaults:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_allocObject(v1, 40LL, 7LL);
  uint64_t v4 = type metadata accessor for Lock(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = Lock.init()();
  v3[3] = a1;
  v3[4] = &_swiftEmptySetSingleton;
  v3[2] = v5;
  return v3;
}

void *UserDefaultsPseudonymStorage.init(userDefaults:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Lock(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = Lock.init()();
  v1[3] = a1;
  v1[4] = &_swiftEmptySetSingleton;
  v1[2] = v4;
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)( Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Swift::String v9 = id;
  v3[4] = 0xE800000000000000LL;
  Swift::String v4 = serviceIdentifier;
  Swift::String v5 = reuseIdentifier;
  uint64_t v6 = partial apply for closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:);
  uint64_t v7 = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v3);
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v7;
  swift_endAccess(v19);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v9 + 40);
    uint64_t v12 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v11 - 1);
      uint64_t v14 = *v11;
      if (result == a3 && v14 == a4) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, a3, a4, 0LL);
      if ((result & 1) != 0) {
        break;
      }
      v11 += 2;
      if (!--v12) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRetain(a4);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v9);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10 + 1,  1,  (char *)v9);
      uint64_t v9 = result;
    }

    unint64_t v17 = *(void *)(v9 + 16);
    unint64_t v16 = *(void *)(v9 + 24);
    if (v17 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  (char *)v9);
      uint64_t v9 = result;
    }

    *(void *)(v9 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v17 + 1;
    unint64_t v18 = v9 + 16 * v17;
    *(void *)(v18 + 32) = a3;
    *(void *)(v18 + 40) = a4;
    *a1 = v9;
  }

  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)( Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  uint64_t v12 = 0LL;
  __int128 v13 = 0LL;
  uint64_t v11 = &v12;
  void v5[4] = 0xE800000000000000LL;
  Swift::String v6 = serviceIdentifier;
  Swift::String v7 = reuseIdentifier;
  uint64_t v8 = partial apply for closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:);
  uint64_t v9 = &v10;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v5);
  uint64_t v2 = v12;
  uint64_t v3 = v13;
  result.value._uint64_t object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  Swift::String v4 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v31 = v5 + 32;
    Swift::String v7 = (uint64_t *)(a3 + 32);
    uint64_t v28 = v5;
    swift_bridgeObjectRetain_n(v5, 2LL);
    swift_beginAccess(v3 + 32, v34, 0LL, 0LL);
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      uint64_t v9 = (uint64_t *)(v31 + 16 * i);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      uint64_t v12 = *v7;
      if (!*(void *)(*v7 + 16))
      {
        swift_bridgeObjectRetain(v10);
        uint64_t v12 = v28;
        swift_bridgeObjectRelease(v28);
        goto LABEL_22;
      }

      Hasher.init(_seed:)(v33, *(void *)(v12 + 40));
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      String.hash(into:)(v33, v11, v10);
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
      unint64_t v15 = v13 & ~v14;
      if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v16 = *(void *)(v12 + 48);
      unint64_t v17 = (void *)(v16 + 16 * v15);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == v11 && v18 == v10;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v11, v10, 0LL) & 1) == 0)
      {
        uint64_t v20 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v20;
          if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
            break;
          }
          id v21 = (void *)(v16 + 16 * v15);
          uint64_t v22 = v21[1];
          BOOL v23 = *v21 == v11 && v22 == v10;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v11, v10, 0LL) & 1) != 0) {
            goto LABEL_3;
          }
        }

LABEL_3:
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v12);
    }

    swift_bridgeObjectRelease_n(v28, 2LL);
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
LABEL_23:
    Swift::String v4 = a2;
    uint64_t v3 = a3;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v24 = v4[1];
  *Swift::String v4 = v11;
  v4[1] = v10;
  uint64_t result = swift_bridgeObjectRelease(v24);
  uint64_t v26 = v4[1];
  if (v26)
  {
    uint64_t v27 = *v4;
    swift_beginAccess(v3 + 32, v33, 33LL, 0LL);
    swift_bridgeObjectRetain(v26);
    specialized Set._Variant.insert(_:)(v32, v27, v26);
    swift_endAccess(v33);
    return swift_bridgeObjectRelease(v32[1]);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)( Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Swift::String v9 = id;
  v3[4] = 0xE800000000000000LL;
  Swift::String v4 = serviceIdentifier;
  Swift::String v5 = reuseIdentifier;
  uint64_t v6 = partial apply for closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:);
  Swift::String v7 = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v3);
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 16);
  if (v8)
  {
    Swift::String v9 = (uint64_t *)(v7 + 40);
    uint64_t v10 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v9 - 1);
      uint64_t v12 = *v9;
      if (result == a3 && v12 == a4) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v12, a3, a4, 0LL);
      if ((result & 1) != 0) {
        break;
      }
      v9 += 2;
      if (!--v10) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRetain(a4);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8 + 1,  1,  (char *)v7);
      uint64_t v7 = result;
    }

    unint64_t v15 = *(void *)(v7 + 16);
    unint64_t v14 = *(void *)(v7 + 24);
    if (v15 >= v14 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v14 > 1),  v15 + 1,  1,  (char *)v7);
      uint64_t v7 = result;
    }

    *(void *)(v7 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v15 + 1;
    unint64_t v16 = v7 + 16 * v15;
    *(void *)(v16 + 32) = a3;
    *(void *)(v16 + 40) = a4;
    *a1 = v7;
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)( Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Swift::String v9 = id;
  v3[4] = 0xE800000000000000LL;
  Swift::String v4 = serviceIdentifier;
  Swift::String v5 = reuseIdentifier;
  uint64_t v6 = partial apply for closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:);
  uint64_t v7 = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v3);
}

void *closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)( char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v7;
  swift_endAccess(v12);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(a4);
  uint64_t v9 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a3, a4);
  uint64_t result = (void *)swift_bridgeObjectRelease(a4);
  int64_t v11 = *((void *)*a1 + 2);
  if (v11 >= v9) {
    return specialized Array.replaceSubrange<A>(_:with:)(v9, v11);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)( Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Swift::String v9 = id;
  v3[4] = 0xED0000656B6F7665LL;
  Swift::String v4 = serviceIdentifier;
  Swift::String v5 = reuseIdentifier;
  uint64_t v6 = partial apply for closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:);
  uint64_t v7 = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v3);
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 16);
  if (v7)
  {
    char v8 = (uint64_t *)(v6 + 40);
    uint64_t v9 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v8 - 1);
      uint64_t v11 = *v8;
      if (result == a2 && v11 == a3) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, a2, a3, 0LL);
      if ((result & 1) != 0) {
        break;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRetain(a3);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v6);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7 + 1,  1,  (char *)v6);
      uint64_t v6 = result;
    }

    unint64_t v14 = *(void *)(v6 + 16);
    unint64_t v13 = *(void *)(v6 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  (char *)v6);
      uint64_t v6 = result;
    }

    *(void *)(v6 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = v14 + 1;
    unint64_t v15 = v6 + 16 * v14;
    *(void *)(v15 + 32) = a2;
    *(void *)(v15 + 40) = a3;
    *a1 = v6;
  }

  return result;
}

void *UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = &_swiftEmptyArrayStorage;
  uint64_t v7 = &v8;
  void v5[4] = 0xED0000656B6F7665LL;
  void v5[5] = a1;
  v5[6] = a2;
  v5[7] = a3;
  v5[8] = a4;
  void v5[9] = partial apply for closure #1 in UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:);
  v5[10] = &v6;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v5);
  return v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)( Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Swift::String v9 = id;
  v3[4] = 0xED0000656B6F7665LL;
  Swift::String v4 = serviceIdentifier;
  Swift::String v5 = reuseIdentifier;
  char v6 = partial apply for closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:);
  uint64_t v7 = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v3);
}

void *closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)( char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2, a3);
  uint64_t result = (void *)swift_bridgeObjectRelease(a3);
  int64_t v8 = *((void *)*a1 + 2);
  if (v8 >= v6) {
    return specialized Array.replaceSubrange<A>(_:with:)(v6, v8);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *))
{
  uint64_t v12 = *(void **)(a1 + 24);
  NSString v13 = String._bridgeToObjectiveC()();
  id v32 = v12;
  id v14 = [v12 objectForKey:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v33, v14);
    swift_unknownObjectRelease(v14);
  }

  else
  {
    memset(v33, 0, sizeof(v33));
  }

  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v33,  (uint64_t)v34,  &demangling cache variable for type metadata for Any?);
  if (v34[3])
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : [String]]]);
    if (swift_dynamicCast(&v35, v34, (char *)&type metadata for Any + 8, v15, 6LL))
    {
      unint64_t v16 = v35;
      goto LABEL_9;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
  }

  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
LABEL_9:
  if (!*(void *)(v16 + 16)) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain(a5);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease(a5);
LABEL_14:
    unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    if (!*(void *)(v19 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }

  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(a5);
  if (!*(void *)(v19 + 16))
  {
LABEL_12:
    uint64_t v20 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

uint64_t UserDefaultsPseudonymStorage.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t UserDefaultsPseudonymStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t protocol witness for PseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *v6;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  void v8[2] = v10;
  v8[3] = 0x656C626173756572LL;
  v8[4] = 0xE800000000000000LL;
  void v8[5] = a3;
  v8[6] = a4;
  v8[7] = a5;
  v8[8] = a6;
  v8[9] = closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)partial apply;
  v8[10] = &v9;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v8);
}

uint64_t protocol witness for PseudonymStorage.pop(serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  v11[0] = 0LL;
  v11[1] = 0LL;
  char v9 = v11;
  uint64_t v10 = v5;
  _OWORD v7[2] = v5;
  v7[3] = 0x656C626173756572LL;
  v7[4] = 0xE800000000000000LL;
  v7[5] = a1;
  v7[6] = a2;
  v7[7] = a3;
  v7[8] = a4;
  void v7[9] = closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)partial apply;
  v7[10] = &v8;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v7);
  return v11[0];
}

uint64_t protocol witness for PseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *v6;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  void v8[2] = v10;
  v8[3] = 0x656C626173756572LL;
  v8[4] = 0xE800000000000000LL;
  void v8[5] = a3;
  v8[6] = a4;
  v8[7] = a5;
  v8[8] = a6;
  v8[9] = closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)partial apply;
  v8[10] = &v9;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v8);
}

uint64_t protocol witness for PseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *v6;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  void v8[2] = v10;
  v8[3] = 0x656C626173756572LL;
  v8[4] = 0xE800000000000000LL;
  void v8[5] = a3;
  v8[6] = a4;
  v8[7] = a5;
  v8[8] = a6;
  v8[9] = closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)partial apply;
  v8[10] = &v9;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v8);
}

uint64_t protocol witness for PseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *v6;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  v9[2] = v7;
  strcpy((char *)v10, "pendingRevoke");
  v10[7] = -4864;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)partial apply;
  unint64_t v16 = &v17;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v9);
}

uint64_t protocol witness for PseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *v6;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  v9[2] = v7;
  strcpy((char *)v10, "pendingRevoke");
  v10[7] = -4864;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)partial apply;
  unint64_t v16 = &v17;
  return Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v9);
}

void *protocol witness for PseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  char v17 = &_swiftEmptyArrayStorage;
  unint64_t v16 = &v17;
  _OWORD v7[2] = v5;
  strcpy((char *)v8, "pendingRevoke");
  v8[7] = -4864;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = partial apply for closure #1 in UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:);
  uint64_t v14 = &v15;
  Lock.withLock<A>(_:)( partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:),  v7);
  return v17;
}

id PseudonymProvider.lock.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t PseudonymProvider.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol(v1 + 32, a1);
}

void *PseudonymProvider.init(storage:)(__int128 *a1)
{
  v1[2] = 0x4014000000000000LL;
  v1[3] = [objc_allocWithZone(NSRecursiveLock) init];
  void v1[9] = &_swiftEmptyDictionarySingleton;
  outlined init with take of PseudonymProtocol(a1, (uint64_t)(v1 + 4));
  return v1;
}

id PseudonymProvider.existingPseudonym(for:configuration:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v180 = a3;
  uint64_t v6 = *(os_log_s **)v3;
  uint64_t v7 = (void (*)(char *, uint64_t))type metadata accessor for Date(0LL);
  uint64_t v177 = *((void *)v7 - 1);
  v178 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  v176 = (uint64_t *)((char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v179 = v6;
  uint64_t v11 = *((void *)v6 + 10);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v9, v13);
  v174 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  v175 = (char *)&v159 - v18;
  __chkstk_darwin(v17, v19);
  unint64_t v21 = (char *)&v159 - v20;
  uint64_t v182 = v3;
  [*(id *)(v3 + 24) lock];
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  if (!v25) {
    goto LABEL_8;
  }
  unint64_t v26 = v25;
  unint64_t v27 = *(void *)(a2 + 40);
  if (!v27)
  {
    swift_bridgeObjectRelease(v25);
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v180, 1LL, 1LL, v11);
    return [*(id *)(v182 + 24) unlock];
  }

  uint64_t v170 = v12;
  uint64_t v171 = *(void *)(a2 + 32);
  uint64_t v172 = v24;
  uint64_t v28 = one-time initialization token for group;
  swift_bridgeObjectRetain(v27);
  if (v28 != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v166 = a2;
  v167 = v21;
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n(v27, 2LL);
  uint64_t v31 = swift_bridgeObjectRetain_n(v26, 2LL);
  uint64_t v169 = v30;
  id v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v168 = v11;
  unint64_t v181 = v27;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(42LL, -1LL);
    uint64_t v173 = swift_slowAlloc(128LL, -1LL);
    v185[0] = v173;
    *(_DWORD *)uint64_t v35 = 136315906;
    uint64_t v36 = _typeName(_:qualified:)(v179, 0LL);
    unint64_t v38 = v37;
    uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025LL, 0x80000001000B00A0LL, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v35 + 14, v35 + 22);
    *(_WORD *)(v35 + 22) = 2080;
    swift_bridgeObjectRetain(v181);
    uint64_t v39 = v171;
    uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v181, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v35 + 24, v35 + 32);
    swift_bridgeObjectRelease_n(v181, 3LL);
    *(_WORD *)(v35 + 32) = 2080;
    swift_bridgeObjectRetain(v26);
    uint64_t v40 = v172;
    uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v26, v185);
    unint64_t v27 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v35 + 34, v35 + 42);
    swift_bridgeObjectRelease_n(v26, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s %s - %s %s ", (uint8_t *)v35, 0x2Au);
    unint64_t v41 = v173;
    swift_arrayDestroy(v173, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v26, 2LL);
    swift_bridgeObjectRelease_n(v27, 2LL);
    uint64_t v39 = v171;
    uint64_t v40 = v172;
  }

  id v42 = (void *)v182;
  PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(a1, v39, v27);
  unint64_t v43 = v27;
  uint64_t v44 = v42[7];
  uint64_t v45 = v42[8];
  __swift_project_boxed_opaque_existential_1(v42 + 4, v44);
  unsigned int v46 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v45 + 16);
  uint64_t v173 = v26;
  unint64_t v47 = v183;
  uint64_t v48 = v46(v40, v26, v39, v43, v44, v45);
  v183 = v47;
  if (v47)
  {
    unint64_t v50 = v173;
    unint64_t v51 = v181;
LABEL_12:
    swift_bridgeObjectRelease(v50);
    unint64_t v52 = v51;
LABEL_13:
    swift_bridgeObjectRelease(v52);
    return [*(id *)(v182 + 24) unlock];
  }

  unint64_t v54 = v49;
  v165 = v42 + 4;
  if (v49)
  {
    uint64_t v55 = v48;
    unint64_t v56 = v181;
    swift_bridgeObjectRetain_n(v181, 2LL);
    unint64_t v57 = v173;
    swift_bridgeObjectRetain_n(v173, 2LL);
    uint64_t v58 = swift_bridgeObjectRetain_n(v54, 2LL);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.info.getter();
    int v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v62 = swift_slowAlloc(52LL, -1LL);
      LODWORD(v162) = v61;
      uint64_t v63 = v62;
      uint64_t v164 = swift_slowAlloc(160LL, -1LL);
      v185[0] = v164;
      *(_DWORD *)uint64_t v63 = 136316162;
      unint64_t v64 = v179;
      uint64_t v65 = _typeName(_:qualified:)(v179, 0LL);
      unint64_t v67 = v66;
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v63 + 12) = 2080;
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B00A0LL,  v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v63 + 14, v63 + 22);
      *(_WORD *)(v63 + 22) = 2080;
      swift_bridgeObjectRetain(v54);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v63 + 24, v63 + 32);
      swift_bridgeObjectRelease_n(v54, 3LL);
      *(_WORD *)(v63 + 32) = 2080;
      swift_bridgeObjectRetain(v181);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v181, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v63 + 34, v63 + 42);
      swift_bridgeObjectRelease_n(v181, 3LL);
      *(_WORD *)(v63 + 42) = 2080;
      swift_bridgeObjectRetain(v173);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v173, v185);
      unint64_t v57 = v173;
      unint64_t v56 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v63 + 44, v63 + 52);
      swift_bridgeObjectRelease_n(v57, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v59,  (os_log_type_t)v162,  "%s %s - Found reusable pseudonym candidate: %s %s %s",  (uint8_t *)v63,  0x34u);
      uint64_t v68 = v164;
      swift_arrayDestroy(v164, 5LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);

      id v70 = v167;
      uint64_t v69 = v168;
      uint64_t v71 = v55;
    }

    else
    {

      swift_bridgeObjectRelease_n(v57, 2LL);
      swift_bridgeObjectRelease_n(v56, 2LL);
      swift_bridgeObjectRelease_n(v54, 2LL);
      id v70 = v167;
      uint64_t v69 = v168;
      uint64_t v71 = v55;
      unint64_t v64 = v179;
    }

    uint64_t v83 = *((void *)v64 + 11);
    uint64_t v84 = *(void (**)(void *))(v83 + 48);
    uint64_t v164 = v71;
    id v85 = v183;
    v84(a1);
    v183 = v85;
    if (v85)
    {
      v179 = v183;
      uint64_t v86 = v165;
    }

    else
    {
      uint64_t v94 = *(uint64_t (**)(uint64_t))(v83 + 24);
      uint64_t v95 = v83;
      uint64_t v96 = v176;
      uint64_t v162 = v95;
      uint64_t v97 = v94(v69);
      double v98 = Date.timeIntervalSinceNow.getter(v97);
      (*(void (**)(uint64_t *, uint64_t (*)(void, void, void)))(v177 + 8))( v96,  (uint64_t (*)(void, void, void))v178);
      if (v98 > 5.0)
      {
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        uint64_t v99 = swift_bridgeObjectRetain(v54);
        unint64_t v100 = v57;
        v101 = (os_log_s *)Logger.logObject.getter(v99);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        int v103 = v102;
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v104 = swift_slowAlloc(52LL, -1LL);
          LODWORD(v181) = v103;
          uint64_t v105 = v104;
          uint64_t v106 = swift_slowAlloc(160LL, -1LL);
          v185[0] = v106;
          *(_DWORD *)uint64_t v105 = 136316162;
          uint64_t v107 = _typeName(_:qualified:)(v179, 0LL);
          unint64_t v108 = v54;
          unint64_t v110 = v109;
          uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v105 + 4, v105 + 12);
          swift_bridgeObjectRelease(v110);
          *(_WORD *)(v105 + 12) = 2080;
          uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B00A0LL,  v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v105 + 14, v105 + 22);
          *(_WORD *)(v105 + 22) = 2080;
          swift_bridgeObjectRetain(v108);
          uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v108, v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v105 + 24, v105 + 32);
          swift_bridgeObjectRelease_n(v108, 3LL);
          *(_WORD *)(v105 + 32) = 2080;
          swift_bridgeObjectRetain(v56);
          uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v56, v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v105 + 34, v105 + 42);
          swift_bridgeObjectRelease_n(v56, 3LL);
          *(_WORD *)(v105 + 42) = 2080;
          swift_bridgeObjectRetain(v100);
          uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v100, v185);
          uint64_t v111 = v170;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v105 + 44, v105 + 52);
          swift_bridgeObjectRelease_n(v100, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v181,  "%s %s - Reusing pseudonym: %s %s %s",  (uint8_t *)v105,  0x34u);
          swift_arrayDestroy(v106, 5LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v106, -1LL, -1LL);
          swift_slowDealloc(v105, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v100, 2LL);
          swift_bridgeObjectRelease_n(v56, 2LL);
          swift_bridgeObjectRelease_n(v54, 2LL);
          uint64_t v111 = v170;
        }

        uint64_t v155 = v168;
        uint64_t v156 = v180;
        (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v180, v167, v168);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v156, 0LL, 1LL, v155);
        return [*(id *)(v182 + 24) unlock];
      }

      v178 = *(void (**)(char *, uint64_t))(v170 + 16);
      uint64_t v117 = ((uint64_t (*)(char *, char *, uint64_t))v178)(v175, v70, v69);
      uint64_t v118 = v69;
      v119 = (os_log_s *)Logger.logObject.getter(v117);
      os_log_type_t v120 = static os_log_type_t.default.getter();
      v179 = v119;
      LODWORD(v177) = v120;
      if (os_log_type_enabled(v119, v120))
      {
        uint64_t v121 = swift_slowAlloc(32LL, -1LL);
        v176 = (uint64_t *)swift_slowAlloc(96LL, -1LL);
        v185[0] = (uint64_t)v176;
        *(_DWORD *)uint64_t v121 = 136315650;
        uint64_t v122 = v118;
        uint64_t v123 = _typeName(_:qualified:)(v64, 0LL);
        unint64_t v124 = v54;
        unint64_t v126 = v125;
        uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v125, v185);
        v161 = v185;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v121 + 4, v121 + 12);
        swift_bridgeObjectRelease(v126);
        *(_WORD *)(v121 + 12) = 2080;
        uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B00A0LL,  v185);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v121 + 14, v121 + 22);
        *(_WORD *)(v121 + 22) = 2080;
        unint64_t v54 = v124;
        uint64_t v160 = v121 + 24;
        v128 = v174;
        v127 = v175;
        ((void (*)(char *, char *, uint64_t))v178)(v174, v175, v122);
        v129 = *(void (**)(char *, uint64_t))(v170 + 8);
        v129(v127, v122);
        uint64_t v130 = v162;
        uint64_t v131 = dispatch thunk of CustomStringConvertible.description.getter(v122, *(void *)(v162 + 8));
        unint64_t v133 = v132;
        v178 = v129;
        v129(v128, v122);
        uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v133, v185);
        unint64_t v56 = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v161, v160, v121 + 32);
        unint64_t v134 = v133;
        v135 = v167;
        swift_bridgeObjectRelease(v134);
        v136 = v179;
        _os_log_impl( (void *)&_mh_execute_header,  v179,  (os_log_type_t)v177,  "%s %s - Reusable pseudonym: %s is expired. Attempting to use next available reusable pseudonym",  (uint8_t *)v121,  0x20u);
        v137 = v176;
        swift_arrayDestroy(v176, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1LL, -1LL);
        uint64_t v138 = v121;
        unint64_t v57 = v173;
        swift_slowDealloc(v138, -1LL, -1LL);

        uint64_t v86 = v165;
      }

      else
      {
        v135 = v70;
        v178 = *(void (**)(char *, uint64_t))(v170 + 8);
        v178(v175, v118);

        uint64_t v86 = v165;
        uint64_t v130 = v162;
      }

      uint64_t v157 = v168;
      (*(void (**)(uint64_t, uint64_t))(v130 + 56))(v168, v130);
      v158 = v183;
      (*(void (**)(void *, uint64_t))(*(void *)v182 + 160LL))(a1, v166);
      v183 = v158;
      if (!v158)
      {
        v178(v135, v157);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v54);
        unint64_t v52 = v57;
        goto LABEL_13;
      }

      v178(v135, v157);
      v179 = v183;
    }

    unint64_t v163 = v54;
    uint64_t v87 = *(void *)(v182 + 64);
    __swift_project_boxed_opaque_existential_1(v86, *(void *)(v182 + 56));
    uint64_t v88 = v164;
    unint64_t v89 = v54;
    uint64_t v90 = v172;
    unint64_t v91 = v173;
    uint64_t v92 = v171;
    unint64_t v93 = v181;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v87 + 32))(v164, v89, v172);
    v183 = 0LL;
    uint64_t v112 = *(void *)(v182 + 56);
    uint64_t v113 = *(void *)(v182 + 64);
    __swift_project_boxed_opaque_existential_1(v165, v112);
    uint64_t v114 = v88;
    unint64_t v51 = v163;
    unint64_t v115 = v91;
    v116 = v183;
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v113 + 48))( v114,  v163,  v90,  v91,  v92,  v93,  v112,  v113);
    v183 = v116;
    if (v116)
    {
      swift_errorRelease(v179);
      swift_bridgeObjectRelease(v91);
      unint64_t v50 = v93;
      goto LABEL_12;
    }

    v139 = v179;
    swift_errorRetain(v179);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v51);
    uint64_t v140 = swift_errorRetain(v139);
    v141 = (void (*)(char *, uint64_t))Logger.logObject.getter(v140);
    os_log_type_t v144 = static os_log_type_t.error.getter(v141, v142, v143);
    int v145 = v144;
    v178 = v141;
    unint64_t v146 = v93;
    unint64_t v147 = v51;
    if (os_log_type_enabled((os_log_t)v141, v144))
    {
      v148 = v139;
      uint64_t v149 = swift_slowAlloc(42LL, -1LL);
      v176 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v177 = swift_slowAlloc(96LL, -1LL);
      v185[0] = v177;
      *(_DWORD *)uint64_t v149 = 136315906;
      swift_bridgeObjectRetain(v147);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v147, v185);
      LODWORD(v175) = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v149 + 4, v149 + 12);
      swift_bridgeObjectRelease_n(v147, 3LL);
      *(_WORD *)(v149 + 12) = 2080;
      swift_bridgeObjectRetain(v146);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v146, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v149 + 14, v149 + 22);
      swift_bridgeObjectRelease_n(v146, 3LL);
      *(_WORD *)(v149 + 22) = 2080;
      swift_bridgeObjectRetain(v115);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v115, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v149 + 24, v149 + 32);
      swift_bridgeObjectRelease_n(v115, 3LL);
      *(_WORD *)(v149 + 32) = 2112;
      swift_errorRetain(v148);
      uint64_t v150 = _swift_stdlib_bridgeErrorToNSError(v148);
      uint64_t v184 = v150;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v149 + 34, v149 + 42);
      v151 = v176;
      uint64_t *v176 = v150;
      swift_errorRelease(v148);
      swift_errorRelease(v148);
      v152 = v178;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v178,  (os_log_type_t)v175,  "Failed to use reusable pseudonym: %s %s %s: %@",  (uint8_t *)v149,  0x2Au);
      uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v151, 1LL, v153);
      swift_slowDealloc(v151, -1LL, -1LL);
      uint64_t v154 = v177;
      swift_arrayDestroy(v177, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v154, -1LL, -1LL);
      swift_slowDealloc(v149, -1LL, -1LL);

      swift_errorRelease(v148);
    }

    else
    {
      swift_errorRelease(v139);
      swift_bridgeObjectRelease_n(v115, 2LL);
      swift_bridgeObjectRelease_n(v146, 2LL);
      swift_bridgeObjectRelease_n(v51, 2LL);
      swift_errorRelease(v139);
      swift_errorRelease(v139);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56))(v180, 1LL, 1LL, v168);
  }

  else
  {
    uint64_t v72 = v170;
    unint64_t v73 = v181;
    swift_bridgeObjectRetain(v181);
    unint64_t v74 = v173;
    uint64_t v75 = swift_bridgeObjectRetain(v173);
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = swift_slowAlloc(42LL, -1LL);
      uint64_t v79 = swift_slowAlloc(128LL, -1LL);
      v185[0] = v79;
      *(_DWORD *)uint64_t v78 = 136315906;
      uint64_t v80 = _typeName(_:qualified:)(v179, 0LL);
      unint64_t v82 = v81;
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease(v82);
      *(_WORD *)(v78 + 12) = 2080;
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B00A0LL,  v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v78 + 14, v78 + 22);
      *(_WORD *)(v78 + 22) = 2080;
      swift_bridgeObjectRetain(v73);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v73, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v78 + 24, v78 + 32);
      swift_bridgeObjectRelease_n(v73, 3LL);
      *(_WORD *)(v78 + 32) = 2080;
      swift_bridgeObjectRetain(v74);
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v74, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v78 + 34, v78 + 42);
      swift_bridgeObjectRelease_n(v74, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "%s %s - No reusable pseudonyms available for %s %s",  (uint8_t *)v78,  0x2Au);
      swift_arrayDestroy(v79, 4LL, (char *)&type metadata for Any + 8);
      uint64_t v72 = v170;
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v74, 2LL);
      swift_bridgeObjectRelease_n(v73, 2LL);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v180, 1LL, 1LL, v168);
  }

  return [*(id *)(v182 + 24) unlock];
}

Swift::Void __swiftcall PseudonymProvider.register(handle:for:reuseIdentifier:)( Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  Swift::String v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  uint64_t v10 = *v4;
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v23 = v7;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n(v8, 2LL);
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v6, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(52LL, -1LL);
    uint64_t v22 = swift_slowAlloc(160LL, -1LL);
    v27[0] = v22;
    *(_DWORD *)uint64_t v15 = 136316162;
    uint64_t v16 = _typeName(_:qualified:)(v10, 0LL);
    uint64_t v24 = v9;
    unint64_t v18 = v17;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025LL, 0x80000001000B00D0LL, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, (unint64_t)v8, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v15 + 32) = 2080;
    swift_bridgeObjectRetain(object);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 34, v15 + 42);
    swift_bridgeObjectRelease_n(object, 3LL);
    *(_WORD *)(v15 + 42) = 2080;
    swift_bridgeObjectRetain(v6);
    uint64_t v19 = v23;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, (unint64_t)v6, v27);
    uint64_t v9 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 44, v15 + 52);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s %s - %s %s %s", (uint8_t *)v15, 0x34u);
    swift_arrayDestroy(v22, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_bridgeObjectRelease_n(object, 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);
    uint64_t v19 = v23;
  }

  uint64_t v20 = v4[7];
  uint64_t v21 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v20);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v21 + 24))( v9,  v8,  v19,  v6,  countAndFlagsBits,  object,  v20,  v21);
}

Swift::Void __swiftcall PseudonymProvider.markUsed(handle:for:reuseIdentifier:)( Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  Swift::String v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v7 = a2._object;
  uint64_t v8 = a2._countAndFlagsBits;
  uint64_t v9 = handle._object;
  uint64_t v27 = handle._countAndFlagsBits;
  uint64_t v10 = *v3;
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n(v9, 2LL);
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v26 = countAndFlagsBits;
    uint64_t v15 = swift_slowAlloc(52LL, -1LL);
    uint64_t v25 = swift_slowAlloc(160LL, -1LL);
    v29[0] = v25;
    *(_DWORD *)uint64_t v15 = 136316162;
    uint64_t v16 = _typeName(_:qualified:)(v10, 0LL);
    unint64_t v18 = v17;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025LL, 0x80000001000B0100LL, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain(v9);
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, (unint64_t)v9, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v15 + 32) = 2080;
    swift_bridgeObjectRetain(object);
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, (unint64_t)object, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 34, v15 + 42);
    swift_bridgeObjectRelease_n(object, 3LL);
    *(_WORD *)(v15 + 42) = 2080;
    swift_bridgeObjectRetain(v7);
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v7, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 44, v15 + 52);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s %s - %s %s %s", (uint8_t *)v15, 0x34u);
    swift_arrayDestroy(v25, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v19 = v15;
    uint64_t countAndFlagsBits = v26;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease_n(object, 2LL);
    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  uint64_t v20 = v4 + 4;
  uint64_t v21 = v4[7];
  uint64_t v22 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v21);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v22 + 32))( v27,  v9,  v8,  v7,  countAndFlagsBits,  object,  v21,  v22);
  uint64_t v24 = v4[7];
  uint64_t v23 = v4[8];
  __swift_project_boxed_opaque_existential_1(v20, v24);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v23 + 40))( v27,  v9,  v8,  v7,  countAndFlagsBits,  object,  v24,  v23);
}

Swift::Void __swiftcall PseudonymProvider.markRevoked(handle:for:reuseIdentifier:)( Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  Swift::String v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  uint64_t v10 = *v4;
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v23 = v7;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n(v8, 2LL);
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v6, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(52LL, -1LL);
    uint64_t v22 = swift_slowAlloc(160LL, -1LL);
    v27[0] = v22;
    *(_DWORD *)uint64_t v15 = 136316162;
    uint64_t v16 = _typeName(_:qualified:)(v10, 0LL);
    uint64_t v24 = v9;
    unint64_t v18 = v17;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028LL, 0x80000001000B0130LL, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, (unint64_t)v8, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v15 + 32) = 2080;
    swift_bridgeObjectRetain(object);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 34, v15 + 42);
    swift_bridgeObjectRelease_n(object, 3LL);
    *(_WORD *)(v15 + 42) = 2080;
    swift_bridgeObjectRetain(v6);
    uint64_t v19 = v23;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, (unint64_t)v6, v27);
    uint64_t v9 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 44, v15 + 52);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s %s - %s %s %s", (uint8_t *)v15, 0x34u);
    swift_arrayDestroy(v22, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_bridgeObjectRelease_n(object, 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);
    uint64_t v19 = v23;
  }

  uint64_t v20 = v4[7];
  uint64_t v21 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v20);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v21 + 48))( v9,  v8,  v19,  v6,  countAndFlagsBits,  object,  v20,  v21);
}

Swift::Void __swiftcall PseudonymProvider.release(handle:for:reuseIdentifier:)( Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  Swift::String v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  uint64_t v10 = *v4;
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v23 = v7;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n(v8, 2LL);
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v6, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(52LL, -1LL);
    uint64_t v22 = swift_slowAlloc(160LL, -1LL);
    v27[0] = v22;
    *(_DWORD *)uint64_t v15 = 136316162;
    uint64_t v16 = _typeName(_:qualified:)(v10, 0LL);
    uint64_t v24 = v9;
    unint64_t v18 = v17;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024LL, 0x80000001000B0160LL, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, (unint64_t)v8, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v15 + 32) = 2080;
    swift_bridgeObjectRetain(object);
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 34, v15 + 42);
    swift_bridgeObjectRelease_n(object, 3LL);
    *(_WORD *)(v15 + 42) = 2080;
    swift_bridgeObjectRetain(v6);
    uint64_t v19 = v23;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, (unint64_t)v6, v27);
    uint64_t v9 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 44, v15 + 52);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s %s - %s %s %s", (uint8_t *)v15, 0x34u);
    swift_arrayDestroy(v22, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_bridgeObjectRelease_n(object, 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);
    uint64_t v19 = v23;
  }

  uint64_t v20 = v4[7];
  uint64_t v21 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v20);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v21 + 8))( v9,  v8,  v19,  v6,  countAndFlagsBits,  object,  v20,  v21);
}

uint64_t PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(void *a1, uint64_t a2, unint64_t a3)
{
  Swift::String v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9, v10);
  uint64_t v58 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (v15)
  {
    uint64_t v16 = result;
    unint64_t v17 = v15;
    swift_beginAccess(v3 + 9, v61, 0LL, 0LL);
    uint64_t v18 = v3[9];
    if (*(void *)(v18 + 16))
    {
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      if ((v20 & 1) != 0)
      {
        uint64_t v21 = *(void **)(*(void *)(v18 + 56) + 8 * v19);
        swift_bridgeObjectRetain(v21);
      }

      else
      {
        uint64_t v21 = &_swiftEmptySetSingleton;
      }

      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v18);
    }

    else
    {
      uint64_t v21 = &_swiftEmptySetSingleton;
    }

    uint64_t v62 = (uint64_t)v21;
    swift_bridgeObjectRetain(v21);
    char v22 = specialized Set.contains(_:)(a2, a3, (uint64_t)v21);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
    {
      swift_bridgeObjectRelease(v17);
      unint64_t v23 = (unint64_t)v21;
      return swift_bridgeObjectRelease(v23);
    }

    uint64_t v57 = v8;
    swift_bridgeObjectRetain(a3);
    specialized Set._Variant.insert(_:)((uint64_t *)v59, a2, a3);
    swift_bridgeObjectRelease(*((void *)&v59[0] + 1));
    uint64_t v24 = v62;
    swift_beginAccess(v4 + 9, v59, 33LL, 0LL);
    swift_bridgeObjectRetain(v17);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4[9]);
    uint64_t v60 = v4[9];
    void v4[9] = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v16, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v26 = v4[9];
    void v4[9] = v60;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v26);
    swift_endAccess(v59);
    uint64_t v27 = v4[7];
    uint64_t v28 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v27);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 56))( v16,  v17,  a2,  a3,  v27,  v28);
    uint64_t v30 = v29;
    if (!*(void *)(v29 + 16))
    {
      swift_bridgeObjectRelease(v29);
      unint64_t v23 = v17;
      return swift_bridgeObjectRelease(v23);
    }

    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v31, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n(v17, 2LL);
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v32 = swift_bridgeObjectRetain_n(v30, 2LL);
    os_log_type_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc(52LL, -1LL);
      int v55 = v35;
      uint64_t v37 = v36;
      uint64_t v56 = swift_slowAlloc(160LL, -1LL);
      *(void *)&v59[0] = v56;
      *(_DWORD *)uint64_t v37 = 136316162;
      uint64_t v52 = v37 + 4;
      uint64_t v38 = _typeName(_:qualified:)(v57, 0LL);
      os_log_t v54 = v33;
      unint64_t v40 = v39;
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)v59);
      id v53 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v52, v37 + 12);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v37 + 14, v37 + 22);
      *(_WORD *)(v37 + 22) = 2080;
      uint64_t v52 = v37 + 24;
      uint64_t v41 = swift_bridgeObjectRetain(v30);
      uint64_t v42 = Array.description.getter(v41, &type metadata for String);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease(v30);
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, (uint64_t *)v59);
      uint64_t v45 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v53, v52, v37 + 32);
      swift_bridgeObjectRelease_n(v30, 2LL);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v37 + 32) = 2080;
      swift_bridgeObjectRetain(v17);
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v45, v37 + 34, v37 + 42);
      swift_bridgeObjectRelease_n(v17, 3LL);
      *(_WORD *)(v37 + 42) = 2080;
      swift_bridgeObjectRetain(a3);
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v45, v37 + 44, v37 + 52);
      swift_bridgeObjectRelease_n(a3, 3LL);
      os_log_t v46 = v54;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  (os_log_type_t)v55,  "%s %s - Revoking pending pseudonyms: %s for %s %s",  (uint8_t *)v37,  0x34u);
      uint64_t v47 = v56;
      swift_arrayDestroy(v56, 5LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease_n(v30, 2LL);
    }

    uint64_t v48 = type metadata accessor for TaskPriority(0LL);
    uint64_t v49 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v58, 1LL, 1LL, v48);
    outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v59);
    unint64_t v50 = (void *)swift_allocObject(&unk_1000CAE80, 128LL, 7LL);
    v50[2] = 0LL;
    v50[3] = 0LL;
    v50[4] = v30;
    v50[5] = v4;
    v50[6] = v16;
    v50[7] = v17;
    v50[8] = a2;
    v50[9] = a3;
    outlined init with take of PseudonymProtocol(v59, (uint64_t)(v50 + 10));
    v50[15] = v57;
    swift_bridgeObjectRetain(a3);
    swift_retain();
    uint64_t v51 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v49,  (uint64_t)&async function pointer to partial apply for closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:),  (uint64_t)v50);
    return swift_release(v51);
  }

  return result;
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = a4;
  return swift_task_switch(closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:), 0LL, 0LL);
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 80) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = 0LL;
  while (1)
  {
    *(void *)(v0 + 88) = v3;
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 32);
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v13 = *(void **)(v0 + 24);
    uint64_t v14 = *(void *)(v0 + 16) + 16 * v3;
    uint64_t v15 = *(void *)(v14 + 32);
    *(void *)(v0 + 96) = v15;
    unint64_t v16 = *(void *)(v14 + 40);
    *(void *)(v0 + 104) = v16;
    uint64_t v17 = v13[7];
    uint64_t v18 = v13[8];
    __swift_project_boxed_opaque_existential_1(v13 + 4, v17);
    unint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v18 + 48);
    __n128 v20 = swift_bridgeObjectRetain(v16);
    v19(v15, v16, v12, v11, v10, v41, v17, v18, v20);
    id v21 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain(v16);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    id v23 = [v21 initWithPrefixedURI:v22];
    *(void *)(v0 + 112) = v23;

    if (v23) {
      break;
    }
LABEL_8:
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)static Log.group);
    swift_bridgeObjectRetain(v16);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v33 = static os_log_type_t.error.getter(v30, v31, v32);
    if (os_log_type_enabled(v30, v33))
    {
      uint64_t v4 = *(void *)(v0 + 72);
      uint64_t v5 = swift_slowAlloc(32LL, -1LL);
      uint64_t v6 = swift_slowAlloc(96LL, -1LL);
      v43[0] = v6;
      *(_DWORD *)uint64_t v5 = 136315650;
      uint64_t v7 = _typeName(_:qualified:)(v4, 0LL);
      unint64_t v9 = v8;
      *(void *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v43);
      swift_bridgeObjectRelease(v9);
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  v43);
      *(_WORD *)(v5 + 22) = 2080;
      swift_bridgeObjectRetain(v16);
      *(void *)(v5 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v43);
      swift_bridgeObjectRelease_n(v16, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v33,  "%s %s - Failed to find pending revoke pseudonym: %s",  (uint8_t *)v5,  0x20u);
      swift_arrayDestroy(v6, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v16, 2LL);
    }

    uint64_t v3 = *(void *)(v0 + 88) + 1LL;
    if (v3 == *(void *)(v0 + 80))
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 16));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v24 = *(void **)(v0 + 64);
  uint64_t v25 = v24[3];
  uint64_t v26 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v25);
  uint64_t v27 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v26 + 24))(v23, v25, v26);
  *(void *)(v0 + 120) = v27;
  if (!v27)
  {

    goto LABEL_8;
  }

  uint64_t v35 = v27;
  uint64_t v36 = *(void **)(v0 + 64);
  uint64_t v37 = v36[3];
  uint64_t v38 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v37);
  unint64_t v39 = *(int **)(v38 + 40);
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v39 + *v39);
  unint64_t v40 = (void *)swift_task_alloc(v39[1]);
  *(void *)(v0 + 128) = v40;
  void *v40 = v0;
  v40[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v42(v35, v37, v38);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v34;
  uint64_t v35;
  NSString v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_s *v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60[2];
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v1 = v0[13];
  os_log_t v54 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v54, (uint64_t)static Log.group);
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *((unsigned __int8 *)v0 + 144);
    uint64_t v6 = v0[13];
    int v55 = (void *)v0[14];
    uint64_t v57 = (void *)v0[15];
    uint64_t v7 = v0[12];
    unint64_t v8 = v0[9];
    unint64_t v9 = swift_slowAlloc(38LL, -1LL);
    uint64_t v10 = swift_slowAlloc(96LL, -1LL);
    v60[0] = v10;
    *(_DWORD *)unint64_t v9 = 136315906;
    uint64_t v11 = _typeName(_:qualified:)(v8, 0LL);
    uint64_t v13 = v12;
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v60);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v9 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  v60);
    *(_WORD *)(v9 + 22) = 1024;
    *(_DWORD *)(v9 + 24) = v5;
    *(_WORD *)(v9 + 28) = 2080;
    swift_bridgeObjectRetain(v6);
    *(void *)(v9 + 30) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v60);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "%s %s - Revoke returned %{BOOL}d for pending pseudonym: %s",  (uint8_t *)v9,  0x26u);
    swift_arrayDestroy(v10, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v14 = (void *)v0[15];
    uint64_t v15 = v0[13];

    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  unint64_t v16 = v0[11] + 1LL;
  if (v16 == v0[10])
  {
LABEL_7:
    swift_bridgeObjectRelease(v0[2]);
    return ((uint64_t (*)(void))v0[1])();
  }

  uint64_t v18 = v0[17];
  id v53 = v0;
  while (1)
  {
    v0[11] = v16;
    uint64_t v25 = v0[5];
    uint64_t v56 = v0[6];
    uint64_t v58 = v0[7];
    uint64_t v26 = (void *)v0[3];
    uint64_t v27 = v0[4];
    uint64_t v28 = v0[2] + 16 * v16;
    uint64_t v29 = *(void *)(v28 + 32);
    v0[12] = v29;
    uint64_t v30 = *(void *)(v28 + 40);
    v0[13] = v30;
    uint64_t v32 = v26[7];
    uint64_t v31 = v26[8];
    __swift_project_boxed_opaque_existential_1(v26 + 4, v32);
    os_log_type_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain(v30);
    v33(v29, v30, v27, v25, v56, v58, v32, v31);
    if (v18) {
      swift_errorRelease(v18);
    }
    os_log_type_t v34 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain(v30);
    uint64_t v35 = v29;
    uint64_t v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    uint64_t v37 = [v34 initWithPrefixedURI:v36];
    uint64_t v0 = v53;
    v53[14] = v37;

    if (!v37) {
      goto LABEL_16;
    }
    uint64_t v38 = (void *)v53[8];
    unint64_t v39 = v38[3];
    unint64_t v40 = v38[4];
    __swift_project_boxed_opaque_existential_1(v38, v39);
    uint64_t v41 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v40 + 24))(v37, v39, v40);
    v53[15] = v41;
    if (v41) {
      break;
    }

LABEL_16:
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    __swift_project_value_buffer(v54, (uint64_t)static Log.group);
    uint64_t v42 = swift_bridgeObjectRetain(v30);
    unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_t v46 = static os_log_type_t.error.getter(v43, v44, v45);
    if (os_log_type_enabled(v43, v46))
    {
      unint64_t v19 = v53[9];
      __n128 v20 = swift_slowAlloc(32LL, -1LL);
      id v21 = swift_slowAlloc(96LL, -1LL);
      v60[0] = v21;
      *(_DWORD *)__n128 v20 = 136315650;
      NSString v22 = _typeName(_:qualified:)(v19, 0LL);
      uint64_t v24 = v23;
      *(void *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v60);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v20 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  v60);
      *(_WORD *)(v20 + 22) = 2080;
      swift_bridgeObjectRetain(v30);
      *(void *)(v20 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v30, v60);
      swift_bridgeObjectRelease_n(v30, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v46,  "%s %s - Failed to find pending revoke pseudonym: %s",  (uint8_t *)v20,  0x20u);
      swift_arrayDestroy(v21, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v30, 2LL);
    }

    uint64_t v18 = 0LL;
    unint64_t v16 = v53[11] + 1LL;
    if (v16 == v53[10]) {
      goto LABEL_7;
    }
  }

  uint64_t v47 = v41;
  uint64_t v48 = (void *)v53[8];
  uint64_t v49 = v48[3];
  unint64_t v50 = v48[4];
  __swift_project_boxed_opaque_existential_1(v48, v49);
  uint64_t v51 = *(int **)(v50 + 40);
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v51 + *v51);
  uint64_t v52 = (void *)swift_task_alloc(v51[1]);
  v53[16] = v52;
  *uint64_t v52 = v53;
  v52[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v59(v47, v49, v50);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  NSString v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_s *v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59[2];
  uint64_t v1 = (void *)v0[15];

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v2 = v0[13];
  uint64_t v56 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v56, (uint64_t)static Log.group);
  uint64_t v3 = swift_bridgeObjectRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v7 = static os_log_type_t.error.getter(v4, v5, v6);
  unint64_t v8 = os_log_type_enabled(v4, v7);
  unint64_t v9 = v0[17];
  uint64_t v10 = v0[13];
  if (v8)
  {
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[9];
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = swift_slowAlloc(96LL, -1LL);
    v59[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v15 = _typeName(_:qualified:)(v12, 0LL);
    uint64_t v17 = v16;
    *(void *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v59);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v13 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  v59);
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain(v10);
    *(void *)(v13 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v59);
    swift_bridgeObjectRelease_n(v10, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v7,  "%s %s - Failed to revoke pending pseudonym: %s",  (uint8_t *)v13,  0x20u);
    swift_arrayDestroy(v14, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_errorRelease(v9);
  }

  else
  {
    swift_errorRelease(v0[17]);
    swift_bridgeObjectRelease_n(v10, 2LL);
  }

  uint64_t v18 = v0[11] + 1LL;
  if (v18 == v0[10])
  {
LABEL_7:
    swift_bridgeObjectRelease(v0[2]);
    return ((uint64_t (*)(void))v0[1])();
  }

  int v55 = v0;
  while (1)
  {
    v0[11] = v18;
    uint64_t v26 = v0[6];
    uint64_t v57 = v0[7];
    uint64_t v28 = v0[4];
    uint64_t v27 = v0[5];
    uint64_t v29 = (void *)v0[3];
    uint64_t v30 = v0[2] + 16 * v18;
    uint64_t v31 = *(void *)(v30 + 32);
    v0[12] = v31;
    uint64_t v32 = *(void *)(v30 + 40);
    v0[13] = v32;
    os_log_type_t v33 = v29[7];
    os_log_type_t v34 = v29[8];
    __swift_project_boxed_opaque_existential_1(v29 + 4, v33);
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain(v32);
    v35(v31, v32, v28, v27, v26, v57, v33, v34);
    uint64_t v36 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain(v32);
    uint64_t v37 = v31;
    uint64_t v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    unint64_t v39 = [v36 initWithPrefixedURI:v38];
    uint64_t v0 = v55;
    v55[14] = v39;

    if (v39) {
      break;
    }
LABEL_14:
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    __swift_project_value_buffer(v56, (uint64_t)static Log.group);
    unint64_t v44 = swift_bridgeObjectRetain(v32);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    uint64_t v48 = static os_log_type_t.error.getter(v45, v46, v47);
    if (os_log_type_enabled(v45, v48))
    {
      __n128 v20 = v55[9];
      id v21 = swift_slowAlloc(32LL, -1LL);
      NSString v22 = swift_slowAlloc(96LL, -1LL);
      v59[0] = v22;
      *(_DWORD *)id v21 = 136315650;
      id v23 = _typeName(_:qualified:)(v20, 0LL);
      uint64_t v25 = v24;
      *(void *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v59);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v21 + 12) = 2080;
      *(void *)(v21 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000025LL,  0x80000001000B0300LL,  v59);
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain(v32);
      *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v32, v59);
      swift_bridgeObjectRelease_n(v32, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v48,  "%s %s - Failed to find pending revoke pseudonym: %s",  (uint8_t *)v21,  0x20u);
      swift_arrayDestroy(v22, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v32, 2LL);
    }

    uint64_t v18 = v55[11] + 1LL;
    if (v18 == v55[10]) {
      goto LABEL_7;
    }
  }

  unint64_t v40 = (void *)v55[8];
  uint64_t v41 = v40[3];
  uint64_t v42 = v40[4];
  __swift_project_boxed_opaque_existential_1(v40, v41);
  unint64_t v43 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v42 + 24))(v39, v41, v42);
  v55[15] = v43;
  if (!v43)
  {

    goto LABEL_14;
  }

  uint64_t v49 = v43;
  unint64_t v50 = (void *)v55[8];
  uint64_t v51 = v50[3];
  uint64_t v52 = v50[4];
  __swift_project_boxed_opaque_existential_1(v50, v51);
  id v53 = *(int **)(v52 + 40);
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v53 + *v53);
  os_log_t v54 = (void *)swift_task_alloc(v53[1]);
  v55[16] = v54;
  *os_log_t v54 = v55;
  v54[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v58(v49, v51, v52);
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 128);
  *(_BYTE *)(v3 + 144) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  }
  else {
    uint64_t v5 = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t PseudonymProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t PseudonymProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 80) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(specialized Clock.sleep(for:tolerance:), 0LL, 0LL);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( &lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( &lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  unint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *unint64_t v8 = v0;
  v8[1] = specialized Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(specialized Clock.sleep(for:tolerance:), 0LL, 0LL);
  }
  unint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin(a1, a2);
  unint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v18);
  if (one-time initialization token for provider != -1) {
    swift_once(&one-time initialization token for provider, one-time initialization function for provider);
  }
  unint64_t v19 = static Pseudonym.provider;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  if (v21)
  {
    uint64_t v22 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 176LL))( a1,  a2,  result,  v21,  a4,  a5);
    swift_bridgeObjectRelease(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a7);
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)( void *a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  id v8 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(a3);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v10 = [v8 initWithPrefixedURI:v9];

  if (v10)
  {
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    uint64_t v13 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    if (v13)
    {
      uint64_t v14 = v13;
      swift_bridgeObjectRelease(a3);
      outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v27);
      uint64_t v15 = type metadata accessor for Pseudonym();
      a3 = swift_allocObject(v15, 121LL, 7LL);
      Pseudonym.init(service:pseudonym:configuration:)(v27, v14, a4);

      goto LABEL_12;
    }

    __int128 v29 = *a4;
    outlined release of String?((uint64_t)&v29);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a4 + 2),  (uint64_t)v28,  &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v28);
  }

  else
  {
    __int128 v31 = *a4;
    outlined release of String?((uint64_t)&v31);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a4 + 2),  (uint64_t)v30,  &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v30);
  }

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Log.group);
  uint64_t v17 = swift_bridgeObjectRetain(a3);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v21 = static os_log_type_t.error.getter(v18, v19, v20);
  if (os_log_type_enabled(v18, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    v27[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v18, v21, "Couldn't find IDSPseudonym for %s on account", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  unint64_t v24 = lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
  swift_allocError(&type metadata for Pseudonym.Errors, v24, 0LL, 0LL);
  *uint64_t v25 = 0;
  swift_willThrow();
LABEL_12:
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return a3;
}

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)(uint64_t a1, uint64_t a2)
{
  v2[34] = a1;
  v2[35] = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[36] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[37] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v5);
  v2[39] = swift_task_alloc(v5);
  return swift_task_switch(specialized Pseudonym.__allocating_init(service:configuration:), 0LL, 0LL);
}

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)()
{
  uint64_t countAndFlagsBits = (void *)v0[17]._countAndFlagsBits;
  uint64_t v2 = countAndFlagsBits[3];
  uint64_t v3 = countAndFlagsBits[4];
  __swift_project_boxed_opaque_existential_1(countAndFlagsBits, v2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  if (result)
  {
    uint64_t object = result;
    uint64_t v123 = v0 + 10;
    uint64_t v115 = (uint64_t)&v0[9];
    v116 = countAndFlagsBits;
    unint64_t v110 = v0 + 14;
    p_uint64_t object = &v0[14]._object;
    unint64_t v109 = &v0[13]._object;
    uint64_t v113 = (uint64_t)&v0[7];
    if ((result & 0xC000000000000001LL) != 0)
    {
      if (result >= 0) {
        result &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v6 = __CocoaSet.makeIterator()(result);
      uint64_t v7 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSAccount,  &OBJC_CLASS___IDSAccount_ptr);
      unint64_t v8 = lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
      uint64_t result = Set.Iterator.init(_cocoa:)(v6, v7, v8);
      uint64_t object = (uint64_t)v0[3]._object;
      v127 = (void *)v0[4]._countAndFlagsBits;
      uint64_t v9 = (uint64_t)v0[4]._object;
      uint64_t v10 = v0[5]._countAndFlagsBits;
      unint64_t v11 = (unint64_t)v0[5]._object;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v12 = -1LL << *(_BYTE *)(result + 32);
      v127 = (void *)(result + 56);
      uint64_t v9 = ~v12;
      uint64_t v13 = -v12;
      if (v13 < 64) {
        uint64_t v14 = ~(-1LL << v13);
      }
      else {
        uint64_t v14 = -1LL;
      }
      unint64_t v11 = v14 & *(void *)(result + 56);
    }

    uint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    uint64_t v112 = v0 + 6;
    uint64_t v114 = v0 + 11;
    unint64_t v108 = (uint64_t *)&v0[15]._object;
    uint64_t v17 = (id *)&v0[16];
    uint64_t v121 = (uint64_t *)&v0[16]._object;
    int64_t v126 = (unint64_t)(v9 + 64) >> 6;
    uint64_t v122 = kIDSServiceDefaultsSentinelAlias;
    uint64_t v117 = (id *)&v0[16];
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v11;
      if (object < 0)
      {
        uint64_t v22 = __CocoaSet.Iterator.next()(result);
        if (!v22) {
          goto LABEL_51;
        }
        uint64_t v23 = v22;
        *uint64_t v121 = v22;
        uint64_t v24 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSAccount,  &OBJC_CLASS___IDSAccount_ptr);
        swift_unknownObjectRetain(v23);
        swift_dynamicCast(v17, v121, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
        id v25 = *v17;
        swift_unknownObjectRelease(v23);
        unint64_t v11 = v19;
        if (!v25) {
          goto LABEL_51;
        }
      }

      else
      {
        if (v11)
        {
          unint64_t v20 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
          unint64_t v21 = v20 | (v10 << 6);
        }

        else
        {
          int64_t v26 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
            goto LABEL_71;
          }

          if (v26 >= v126) {
            goto LABEL_51;
          }
          unint64_t v27 = v127[v26];
          ++v10;
          if (!v27)
          {
            uint64_t v10 = v18 + 2;
            if (v18 + 2 >= v126) {
              goto LABEL_51;
            }
            unint64_t v27 = v127[v10];
            if (!v27)
            {
              uint64_t v10 = v18 + 3;
              if (v18 + 3 >= v126) {
                goto LABEL_51;
              }
              unint64_t v27 = v127[v10];
              if (!v27)
              {
                uint64_t v10 = v18 + 4;
                if (v18 + 4 >= v126) {
                  goto LABEL_51;
                }
                unint64_t v27 = v127[v10];
                if (!v27)
                {
                  uint64_t v28 = v18 + 5;
                  while (v126 != v28)
                  {
                    unint64_t v27 = v127[v28++];
                    if (v27)
                    {
                      uint64_t v10 = v28 - 1;
                      goto LABEL_30;
                    }
                  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  os_log_s *v18;
  os_log_type_t v19;
  BOOL v20;
  void *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = one-time initialization token for provider;
    swift_bridgeObjectRetain(v2);
    if (v4 != -1) {
      swift_once(&one-time initialization token for provider, one-time initialization function for provider);
    }
    unint64_t v5 = *(void **)(v0 + 272);
    uint64_t v6 = static Pseudonym.provider;
    uint64_t v7 = [*(id *)(v0 + 360) URI];
    unint64_t v8 = [v7 prefixedURI];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    uint64_t v12 = v5[3];
    uint64_t v13 = v5[4];
    __swift_project_boxed_opaque_existential_1(v5, v12);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    if (!v15)
    {
      __break(1u);
      return result;
    }

    unint64_t v16 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 168LL))( v9,  v11,  result,  v15,  v3,  v2);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v2);
  }

  uint64_t v17 = (void *)(v0 + 16);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 360));
  unint64_t v19 = static os_log_type_t.default.getter();
  unint64_t v20 = os_log_type_enabled(v18, v19);
  unint64_t v21 = *(void **)(v0 + 360);
  if (v20)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v42;
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v0 + 240) = v21;
    uint64_t v24 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for IDSPseudonym,  &OBJC_CLASS___IDSPseudonym_ptr);
    id v25 = v21;
    int64_t v26 = String.init<A>(reflecting:)(v0 + 240, v24);
    uint64_t v28 = v27;
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v28);

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Provisioned pseudonym: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    id v29 = v23;
    uint64_t v17 = (void *)(v0 + 16);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v32 = *(_OWORD **)(v0 + 280);
  outlined init with copy of PseudonymProtocol(*(void *)(v0 + 272), (uint64_t)v17);
  uint64_t v33 = type metadata accessor for Pseudonym();
  os_log_type_t v34 = swift_allocObject(v33, 121LL, 7LL);
  Pseudonym.init(service:pseudonym:configuration:)(v17, v30, v32);
  uint64_t v35 = *(void **)(v0 + 336);
  uint64_t v36 = *(void **)(v0 + 320);
  if (v31)
  {

    uint64_t v37 = *(void *)(v0 + 304);
    uint64_t v38 = *(void *)(v0 + 312);
    __swift_destroy_boxed_opaque_existential_0Tm(*(void **)(v0 + 272));
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    unint64_t v40 = *(void *)(v0 + 304);
    Swift::String v39 = *(void *)(v0 + 312);
    unint64_t v41 = *(void **)(v0 + 272);

    __swift_destroy_boxed_opaque_existential_0Tm(v41);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v34);
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void **)(v0 + 320);

  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  __swift_destroy_boxed_opaque_existential_0Tm(*(void **)(v0 + 272));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

LABEL_51:
                  outlined consume of Set<IDSAccount>.Iterator._Variant(object);
                  if (v16)
                  {
                    id v44 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
                    swift_bridgeObjectRetain(v16);
                    NSString v45 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease(v16);
                    os_log_t v46 = [v44 initWithUnprefixedURI:v45];
                    v0[20]._uint64_t countAndFlagsBits = (uint64_t)v46;

                    if (v46)
                    {
                      v127 = v46;
                      uint64_t v47 = v0[19]._countAndFlagsBits;
                      uint64_t v48 = v0[19]._object;
                      uint64_t v49 = v0;
                      unint64_t v50 = v0[18]._object;
                      uint64_t v52 = v49[17]._object;
                      uint64_t v51 = v49[18]._countAndFlagsBits;
                      id v53 = (void *)v49[17]._countAndFlagsBits;
                      swift_bridgeObjectRelease(v16);
                      os_log_t v54 = (void *)*((void *)v52 + 1);
                      v49[20]._uint64_t object = v54;
                      uint64_t v55 = swift_bridgeObjectRetain(v54);
                      uint64_t v56 = Date.init()(v55);
                      Date.addingTimeInterval(_:)(v56, *((double *)v52 + 2));
                      uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t))v50[1];
                      uint64_t v58 = v57(v47, v51);
                      double v59 = Date.timeIntervalSince1970.getter(v58);
                      v57((uint64_t)v48, v51);
                      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                      uint64_t v61 = swift_allocObject(v60, 96LL, 7LL);
                      *(_OWORD *)(v61 + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16) = xmmword_1000AB4C0;
                      unint64_t v16 = (unint64_t)v116;
                      uint64_t v62 = v116[3];
                      uint64_t v63 = v116[4];
                      __swift_project_boxed_opaque_existential_1(v53, v62);
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
                      if (!v64) {
                        goto LABEL_73;
                      }
                      *(void *)(v61 + 32) = result;
                      *(void *)(v61 + 40) = v64;
                      *(void *)(v61 + 48) = 0xD000000000000032LL;
                      *(void *)(v61 + 56) = 0x80000001000AF8F0LL;
                      *(void *)(v61 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = 0xD000000000000034LL;
                      *(void *)(v61 + 72) = 0x80000001000B0330LL;
                      *(void *)(v61 + 80) = 0xD000000000000029LL;
                      *(void *)(v61 + 88) = 0x80000001000B0370LL;
                      id v65 = objc_allocWithZone(&OBJC_CLASS___IDSPseudonymProperties);
                      NSString v66 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease(v54);
                      Class isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease(v61);
                      unint64_t v11 = (unint64_t)[v65 initWithFeatureID:v66 scopeID:0 expiryEpoch:isa allowedServices:v59];
                      v49[21]._uint64_t countAndFlagsBits = v11;

                      uint64_t v0 = v49;
                      if (one-time initialization token for group == -1)
                      {
LABEL_55:
                        uint64_t v68 = type metadata accessor for Logger(0LL);
                        v0[21]._uint64_t object = (void *)__swift_project_value_buffer(v68, (uint64_t)static Log.group);
                        uint64_t v69 = v127;
                        id v70 = (id)v11;
                        uint64_t v71 = v69;
                        id v72 = v70;
                        unint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
                        os_log_type_t v74 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v73, v74))
                        {
                          os_log_type_t v124 = v74;
                          uint64_t v75 = swift_slowAlloc(22LL, -1LL);
                          uint64_t v76 = (void *)swift_slowAlloc(8LL, -1LL);
                          uint64_t v125 = swift_slowAlloc(32LL, -1LL);
                          v129[0] = v125;
                          *(_DWORD *)uint64_t v75 = 138412546;
                          v0[13]._uint64_t object = v71;
                          os_log_type_t v77 = v71;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, v110, v75 + 4, v75 + 12);
                          *uint64_t v76 = v127;

                          *(_WORD *)(v75 + 12) = 2080;
                          v0[14]._uint64_t countAndFlagsBits = (uint64_t)v72;
                          uint64_t v78 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSPseudonymProperties,  &OBJC_CLASS___IDSPseudonymProperties_ptr);
                          id v79 = v72;
                          uint64_t v80 = String.init<A>(reflecting:)(v110, v78);
                          unint64_t v82 = v81;
                          v0[14]._uint64_t object = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v80,  v81,  v129);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(p_object, &v0[15], v75 + 14, v75 + 22);
                          swift_bridgeObjectRelease(v82);

                          _os_log_impl( (void *)&_mh_execute_header,  v73,  v124,  "Attempting to provision pseudonym with URI: %@ and properties: %s",  (uint8_t *)v75,  0x16u);
                          uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                          swift_arrayDestroy(v76, 1LL, v83);
                          swift_slowDealloc(v76, -1LL, -1LL);
                          swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
                          swift_slowDealloc(v125, -1LL, -1LL);
                          swift_slowDealloc(v75, -1LL, -1LL);
                        }

                        else
                        {
                        }

                        uint64_t v98 = *(void *)(v16 + 24);
                        uint64_t v99 = *(void *)(v16 + 32);
                        __swift_project_boxed_opaque_existential_1((void *)v0[17]._countAndFlagsBits, v98);
                        unint64_t v100 = *(int **)(v99 + 48);
                        v128 = (int *)((char *)v100 + *v100);
                        v101 = (Swift::String **)swift_task_alloc(v100[1]);
                        v0[22]._uint64_t countAndFlagsBits = (uint64_t)v101;
                        os_log_s *v101 = v0;
                        v101[1] = (Swift::String *)specialized Pseudonym.__allocating_init(service:configuration:);
                        return ((uint64_t (*)(void *, id, uint64_t, uint64_t))v128)(v71, v72, v98, v99);
                      }

LABEL_71:
                      swift_once(&one-time initialization token for group, one-time initialization function for group);
                      goto LABEL_55;
                    }

                    unint64_t v91 = (Swift::String *)v0[17]._object;
                    *uint64_t v112 = *v91;
                    outlined release of String?((uint64_t)v112);
                    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)&v91[2],  v113,  &demangling cache variable for type metadata for String?);
                    outlined release of String?(v113);
                    if (one-time initialization token for group != -1) {
                      swift_once(&one-time initialization token for group, one-time initialization function for group);
                    }
                    uint64_t v92 = type metadata accessor for Logger(0LL);
                    __swift_project_value_buffer(v92, (uint64_t)static Log.group);
                    uint64_t v93 = swift_bridgeObjectRetain(v16);
                    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v93);
                    os_log_type_t v94 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v87, v94))
                    {
                      uint64_t v95 = v15;
                      uint64_t v96 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      uint64_t v97 = swift_slowAlloc(32LL, -1LL);
                      v129[0] = v97;
                      *(_DWORD *)uint64_t v96 = 136315138;
                      swift_bridgeObjectRetain(v16);
                      *unint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v16, v129);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, v117, v96 + 4, v96 + 12);
                      swift_bridgeObjectRelease_n(v16, 3LL);
                      _os_log_impl( (void *)&_mh_execute_header,  v87,  v94,  "Failed to create an IDSURI from localMember: %s",  v96,  0xCu);
                      swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v97, -1LL, -1LL);
                      uint64_t v90 = v96;
LABEL_65:
                      swift_slowDealloc(v90, -1LL, -1LL);
                    }

                    else
                    {
                      swift_bridgeObjectRelease_n(v16, 2LL);
                    }
                  }

                  else
                  {
                    uint64_t v84 = (Swift::String *)v0[17]._object;
                    *uint64_t v114 = *v84;
                    outlined release of String?((uint64_t)v114);
                    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)&v84[2],  v115,  &demangling cache variable for type metadata for String?);
                    outlined release of String?(v115);
                    if (one-time initialization token for group != -1) {
                      swift_once(&one-time initialization token for group, one-time initialization function for group);
                    }
                    uint64_t v85 = type metadata accessor for Logger(0LL);
                    uint64_t v86 = __swift_project_value_buffer(v85, (uint64_t)static Log.group);
                    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
                    os_log_type_t v88 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v87, v88))
                    {
                      unint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                      *(_WORD *)unint64_t v89 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to find a localMember", v89, 2u);
                      uint64_t v90 = v89;
                      goto LABEL_65;
                    }
                  }

                  unint64_t v102 = lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
                  swift_allocError(&type metadata for Pseudonym.Errors, v102, 0LL, 0LL);
                  *int v103 = 0;
                  swift_willThrow();
                  uint64_t v105 = v0[19]._countAndFlagsBits;
                  uint64_t v104 = v0[19]._object;
                  __swift_destroy_boxed_opaque_existential_0Tm((void *)v0[17]._countAndFlagsBits);
                  swift_task_dealloc(v104);
                  swift_task_dealloc(v105);
                  return ((uint64_t (*)(void))v0->_object)();
                }
              }
            }
          }

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 352LL);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = (uint64_t)(v3 + 16);
    uint64_t v6 = v3[41];
    uint64_t v7 = v3[35];
    swift_bridgeObjectRelease(v6);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( v7 + 32,  v5,  &demangling cache variable for type metadata for String?);
    outlined release of String?(v5);
    unint64_t v8 = specialized Pseudonym.__allocating_init(service:configuration:);
  }

  else
  {
    unint64_t v8 = specialized Pseudonym.__allocating_init(service:configuration:);
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return swift_task_switch(specialized static Pseudonym.reusable(for:configuration:), 0LL, 0LL);
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)()
{
  uint64_t v1 = (uint64_t *)(v0 + 120);
  if (one-time initialization token for provider != -1) {
    swift_once(&one-time initialization token for provider, one-time initialization function for provider);
  }
  (*(void (**)(void, void))(*(void *)static Pseudonym.provider + 160LL))( *(void *)(v0 + 160),  *(void *)(v0 + 168));
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v3 = *(_OWORD **)(v0 + 168);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v4, (uint64_t)static Log.group);
    *(_OWORD *)(v0 + 72) = *v3;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(v3 + 2),  v0 + 88,  &demangling cache variable for type metadata for String?);
    swift_retain(v2);
    outlined retain of String(v0 + 72);
    outlined retain of String(v0 + 88);
    swift_retain(v2);
    outlined retain of String(v0 + 72);
    uint64_t v5 = outlined retain of String(v0 + 88);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = swift_slowAlloc(64LL, -1LL);
      v31[0] = v29;
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_retain(v2);
      os_log_t log = v6;
      uint64_t v9 = Pseudonym.description.getter();
      os_log_type_t type = v7;
      unint64_t v11 = v10;
      swift_release(v2);
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v11);
      swift_release_n(v2, 2LL);
      *(_WORD *)(v8 + 12) = 2080;
      outlined retain of String(v0 + 72);
      outlined retain of String(v0 + 88);
      uint64_t v12 = Pseudonym.Configuration.description.getter();
      unint64_t v14 = v13;
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v14);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      uint64_t v6 = log;
      _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Found reusable pseudonym: %s for configuration: %s",  (uint8_t *)v8,  0x16u);
      swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
    }

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }

  else
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v15 = *(_OWORD **)(v0 + 168);
    uint64_t v16 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v16, (uint64_t)static Log.group);
    *(_OWORD *)(v0 + 104) = *v15;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(v15 + 2),  v0 + 56,  &demangling cache variable for type metadata for String?);
    outlined retain of String(v0 + 104);
    outlined retain of String(v0 + 56);
    outlined retain of String(v0 + 104);
    uint64_t v17 = outlined retain of String(v0 + 56);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v31[0] = v21;
      *(_DWORD *)unint64_t v20 = 136315138;
      outlined retain of String(v0 + 104);
      outlined retain of String(v0 + 56);
      uint64_t v22 = Pseudonym.Configuration.description.getter();
      unint64_t v24 = v23;
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "No pseudonym available for reuse for configuration: %s - Creating new one",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
    }

    outlined init with copy of PseudonymProtocol(*(void *)(v0 + 160), v0 + 16);
    outlined retain of String(v0 + 104);
    outlined retain of String(v0 + 56);
    id v25 = (void *)swift_task_alloc(unk_1000D551C);
    *(void *)(v0 + 176) = v25;
    *id v25 = v0;
    v25[1] = specialized static Pseudonym.reusable(for:configuration:);
    return v30(v0 + 16, *(void *)(v0 + 168));
  }

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 176);
  uint64_t v5 = *v2;
  *(void *)(v5 + 184) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(specialized static Pseudonym.reusable(for:configuration:), 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t specialized static Pseudonym.existing(for:configuration:)(uint64_t a1, __int128 *a2)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for provider != -1) {
    swift_once(&one-time initialization token for provider, one-time initialization function for provider);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(void *)static Pseudonym.provider + 160LL))( v44,  a1,  a2);
  if (v2) {
    return v3;
  }
  uint64_t v3 = v44[0];
  if (v44[0])
  {
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    __swift_project_value_buffer(v6, (uint64_t)static Log.group);
    __int128 v48 = *a2;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a2 + 2),  (uint64_t)v47,  &demangling cache variable for type metadata for String?);
    swift_retain(v3);
    outlined retain of String((uint64_t)&v48);
    outlined retain of String((uint64_t)v47);
    swift_retain(v3);
    outlined retain of String((uint64_t)&v48);
    uint64_t v11 = outlined retain of String((uint64_t)v47);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(64LL, -1LL);
      v44[0] = v42;
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_retain(v3);
      LODWORD(v41) = v14;
      uint64_t v16 = Pseudonym.description.getter();
      unint64_t v18 = v17;
      swift_release(v3);
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v15 + 4, v15 + 12);
      swift_release_n(v3, 2LL);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v15 + 12) = 2080;
      outlined retain of String((uint64_t)&v48);
      outlined retain of String((uint64_t)v47);
      uint64_t v19 = Pseudonym.Configuration.description.getter();
      unint64_t v21 = v20;
      outlined release of String?((uint64_t)&v48);
      outlined release of String?((uint64_t)v47);
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v21);
      outlined release of String?((uint64_t)&v48);
      outlined release of String?((uint64_t)v47);
      outlined release of String?((uint64_t)&v48);
      outlined release of String?((uint64_t)v47);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  (os_log_type_t)v41,  "Found reusable pseudonym: %s for configuration: %s",  (uint8_t *)v15,  0x16u);
      uint64_t v22 = v42;
      swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v3, 2LL);
      outlined release of String?((uint64_t)&v48);
      outlined release of String?((uint64_t)v47);
      outlined release of String?((uint64_t)&v48);
      outlined release of String?((uint64_t)v47);
    }

    return v3;
  }

  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v23 = __swift_project_value_buffer(v6, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v23, v6);
  outlined init with copy of PseudonymProtocol(a1, (uint64_t)v44);
  __int128 v50 = *a2;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a2 + 2),  (uint64_t)v49,  &demangling cache variable for type metadata for String?);
  outlined retain of String((uint64_t)&v50);
  outlined retain of String((uint64_t)v49);
  outlined retain of String((uint64_t)&v50);
  uint64_t v24 = outlined retain of String((uint64_t)v49);
  id v25 = (os_log_s *)Logger.logObject.getter(v24);
  int v28 = static os_log_type_t.error.getter(v25, v26, v27);
  if (!os_log_type_enabled(v25, (os_log_type_t)v28))
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v44);
    outlined release of String?((uint64_t)&v50);
    outlined release of String?((uint64_t)v49);
    outlined release of String?((uint64_t)&v50);
    outlined release of String?((uint64_t)v49);
    goto LABEL_18;
  }

  LODWORD(v42) = v28;
  uint64_t v3 = swift_slowAlloc(22LL, -1LL);
  uint64_t v41 = swift_slowAlloc(64LL, -1LL);
  uint64_t v51 = v41;
  *(_DWORD *)uint64_t v3 = 136315394;
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
  if (v32)
  {
    unint64_t v33 = v32;
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v3 + 4, v3 + 12);
    swift_bridgeObjectRelease(v33);
    __swift_destroy_boxed_opaque_existential_0Tm(v44);
    *(_WORD *)(v3 + 12) = 2080;
    outlined retain of String((uint64_t)&v50);
    outlined retain of String((uint64_t)v49);
    uint64_t v34 = Pseudonym.Configuration.description.getter();
    unint64_t v36 = v35;
    outlined release of String?((uint64_t)&v50);
    outlined release of String?((uint64_t)v49);
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v3 + 14, v3 + 22);
    swift_bridgeObjectRelease(v36);
    outlined release of String?((uint64_t)&v50);
    outlined release of String?((uint64_t)v49);
    outlined release of String?((uint64_t)&v50);
    outlined release of String?((uint64_t)v49);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v42,  "No existing pseudonym for service %s configuration: %s",  (uint8_t *)v3,  0x16u);
    uint64_t v37 = v41;
    swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v3, -1LL, -1LL);
LABEL_18:

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    unint64_t v39 = lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
    swift_allocError(&type metadata for Pseudonym.Errors, v39, 0LL, 0LL);
    _BYTE *v40 = 2;
    swift_willThrow();
    return v3;
  }

  outlined release of String?((uint64_t)&v50);
  outlined release of String?((uint64_t)v49);
  outlined release of String?((uint64_t)&v50);
  uint64_t result = outlined release of String?((uint64_t)v49);
  __break(1u);
  return result;
}

uint64_t sub_100037D40()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100037D64()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t partial apply for closure #1 in Pseudonym.init(service:pseudonym:configuration:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v8 = v1[11];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000D552C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in Pseudonym.init(service:pseudonym:configuration:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t sub_100037E54()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t partial apply for closure #1 in Pseudonym.refreshPseudonym()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)(v1 + 6);
  uint64_t v9 = v1[12];
  unint64_t v10 = (void *)swift_task_alloc(dword_1000D5544);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in Pseudonym.refreshPseudonym()(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100037F30()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 88));
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t partial apply for closure #1 in Pseudonym.deinit(uint64_t a1)
{
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  char v6 = *(_BYTE *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = (void *)swift_task_alloc(dword_1000D5554);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in Pseudonym.deinit(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)()
{
  return partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)();
}

{
  uint64_t v0;
  return closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void (**)(void *))(v0 + 72));
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)( uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)( a1,  *(uint64_t **)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)( a1,  v1[2],  v1[3],  v1[4]);
}

void *partial apply for closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)( char **a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)( uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

void *partial apply for closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)( char **a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors;
  if (!lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Pseudonym.Errors,  &type metadata for Pseudonym.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors;
  if (!lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Pseudonym.Errors,  &type metadata for Pseudonym.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Pseudonym(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData( &lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Pseudonym,  (uint64_t)&protocol conformance descriptor for Pseudonym);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Pseudonym()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService9Pseudonym);
}

uint64_t getEnumTagSinglePayload for Pseudonym.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for Pseudonym.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003820C + 4 * byte_1000ABBC5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100038240 + 4 * byte_1000ABBC0[v4]))();
}

uint64_t sub_100038240(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100038250LL);
  }
  return result;
}

uint64_t sub_10003825C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100038264LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100038268(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038270(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Pseudonym.Errors()
{
  return &type metadata for Pseudonym.Errors;
}

uint64_t destroy for Pseudonym.Configuration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

uint64_t initializeWithCopy for Pseudonym.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for Pseudonym.Configuration(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Pseudonym.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Pseudonym.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Pseudonym.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Pseudonym.Configuration()
{
  return &type metadata for Pseudonym.Configuration;
}

uint64_t type metadata accessor for UserDefaultsPseudonymStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService28UserDefaultsPseudonymStorage);
}

uint64_t type metadata completion function for PseudonymProvider(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v2[2] = "(";
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 96);
}

uint64_t type metadata accessor for PseudonymProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PseudonymProvider);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:)( uint64_t *a1)
{
  unint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  *unint64_t v2 = v3;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100038574()
{
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t partial apply for closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)()
{
  __int128 v8 = *(_OWORD *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = swift_task_alloc(dword_1000D577C);
  __int128 v6 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  *(void *)(v5 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v0 + 80;
  *(void *)(v5 + 72) = v4;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v3;
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v8;
  return swift_task_switch(closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:), 0LL, 0LL);
}

uint64_t specialized $defer #1 () in closure #1 in Pseudonym.deinit( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a2)
  {
    uint64_t v9 = result;
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v10, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    uint64_t v21 = a3;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = swift_slowAlloc(64LL, -1LL);
      uint64_t v23 = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, a2, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Marking reusable pseudonym %s as revoked with reuse identifier %s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    if (one-time initialization token for provider != -1) {
      swift_once(&one-time initialization token for provider, one-time initialization function for provider);
    }
    uint64_t v16 = static Pseudonym.provider;
    uint64_t v17 = a5[3];
    uint64_t v18 = a5[4];
    __swift_project_boxed_opaque_existential_1(a5, v17);
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    if (v19)
    {
      uint64_t v20 = v19;
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v16 + 184LL))( v21,  a4,  result,  v19,  v9,  a2);
      return swift_bridgeObjectRelease(v20);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)( char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 2);
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  while (1)
  {
    uint64_t result = *(void *)&v3[v7 + 32];
    uint64_t v10 = *(void *)&v3[v7 + 40];
    if (result == a2 && v10 == a3) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, a2, a3, 0LL);
    if ((result & 1) != 0) {
      break;
    }
    ++v8;
    v7 += 16LL;
    if (v4 == v8) {
      return v4;
    }
  }

  unint64_t v12 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v12 == v4) {
      return v8;
    }
    while (1)
    {
      unint64_t v14 = *((void *)v3 + 2);
      if (v12 >= v14) {
        break;
      }
      uint64_t v15 = &v3[v7];
      uint64_t result = *(void *)&v3[v7 + 48];
      uint64_t v16 = *(void *)&v3[v7 + 56];
      if (result != a2 || v16 != a3)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v16, a2, a3, 0LL);
        if ((result & 1) == 0)
        {
          if (v12 != v8)
          {
            if (v8 >= v14) {
              goto LABEL_31;
            }
            uint64_t v18 = &v3[16 * v8 + 32];
            uint64_t v19 = *((void *)v18 + 1);
            uint64_t v26 = *(void *)v18;
            uint64_t v20 = *((void *)v15 + 6);
            uint64_t v21 = *((void *)v15 + 7);
            swift_bridgeObjectRetain(v19);
            swift_bridgeObjectRetain(v21);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
              uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
            }
            uint64_t v22 = &v3[16 * v8];
            uint64_t v23 = *((void *)v22 + 5);
            *((void *)v22 + 4) = v20;
            *((void *)v22 + 5) = v21;
            uint64_t result = swift_bridgeObjectRelease(v23);
            if (v12 >= *((void *)v3 + 2)) {
              goto LABEL_32;
            }
            uint64_t v24 = &v3[v7];
            uint64_t v25 = *(void *)&v3[v7 + 56];
            *((void *)v24 + 6) = v26;
            *((void *)v24 + 7) = v19;
            uint64_t result = swift_bridgeObjectRelease(v25);
            *a1 = v3;
          }

          if (__OFADD__(v8++, 1LL)) {
            goto LABEL_30;
          }
        }
      }

      ++v12;
      v7 += 16LL;
      if (v12 == *((void *)v3 + 2)) {
        return v8;
      }
    }

    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t NearbyInvitationScanner.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

uint64_t NearbyInvitationScanner.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  return swift_unknownObjectRelease(a1);
}

void (*NearbyInvitationScanner.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[5] = v1;
  swift_beginAccess(v1 + 32, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = Strong;
  v3[4] = v5;
  return NearbyInvitationScanner.delegate.modify;
}

void NearbyInvitationScanner.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 40) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 32, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t NearbyInvitationScanner.browser.getter()
{
  return swift_retain(*(void *)(v0 + 48));
}

uint64_t NearbyInvitationScanner.browser.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = a1;
  return swift_release(v3);
}

uint64_t (*NearbyInvitationScanner.browser.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationScanner.scannerID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t NearbyInvitationScanner.connections.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ABE80);
  uint64_t v2 = swift_getKeyPath(&unk_1000ABEA8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_100038EAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100038EDC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t NearbyInvitationScanner.connections.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ABE80);
  uint64_t v4 = swift_getKeyPath(&unk_1000ABEA8);
  uint64_t v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*NearbyInvitationScanner.connections.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ABE80);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000ABEA8);
  void v3[5] = v5;
  void v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t NearbyInvitationScanner.$connections.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t NearbyInvitationScanner.$connections.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections,  v11,  33LL,  0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  Published.projectedValue.setter(v7, v8);
  swift_endAccess(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*NearbyInvitationScanner.$connections.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

void *NearbyInvitationScanner.__allocating_init(scannerID:configuration:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v11 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(a1, a2, a3, v9, ObjectType, a4);
  swift_unknownObjectRelease(a3);
  return v11;
}

void *NearbyInvitationScanner.init(scannerID:configuration:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v10 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(a1, a2, a3, v4, ObjectType, a4);
  swift_unknownObjectRelease(a3);
  return v10;
}

Swift::Void __swiftcall NearbyInvitationScanner.scan()()
{
  uint64_t v1 = type metadata accessor for NWBrowser.Descriptor(0LL);
  uint64_t v45 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1, v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (uint64_t *)((char *)&v40 - v7);
  uint64_t v9 = type metadata accessor for NWBrowser.Invitation.Scope(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v40 - v16;
  type metadata accessor for NWParameters(0LL);
  nw_parameters_t v18 = specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(1);
  uint64_t v19 = NWParameters.__allocating_init(_:)(v18);
  unsigned int v20 = NearbyInvitationParameters.browserType.getter(v19);
  if (v20 >= 3)
  {
    LODWORD(v47) = v20;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for NearbyInvitationScopeType,  &v47,  &type metadata for NearbyInvitationScopeType,  &type metadata for UInt32);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v14,  *(unsigned int *)*(&off_1000CAFF0 + (int)v20),  v9);
    uint64_t v43 = v10;
    uint64_t v44 = v9;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v14, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, invitation: NWBrowser.Invitation));
    *uint64_t v8 = NearbyInvitationParameters.serviceName.getter();
    v8[1] = v21;
    uint64_t v42 = v17;
    static NWBrowser.Invitation.wrangler(scope:)(v17);
    uint64_t v22 = v45;
    (*(void (**)(void *, void, uint64_t))(v45 + 104))( v8,  enum case for NWBrowser.Descriptor.applicationServiceWithInvitation(_:),  v1);
    (*(void (**)(char *, void *, uint64_t))(v22 + 16))(v5, v8, v1);
    uint64_t v23 = type metadata accessor for NWBrowser(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    swift_retain();
    uint64_t v41 = v19;
    uint64_t v24 = NWBrowser.init(for:using:)(v5, v19);
    uint64_t v25 = *(void (**)(uint64_t))(*v0 + 160LL);
    uint64_t v26 = swift_retain();
    v25(v26);
    uint64_t v27 = swift_allocObject(&unk_1000CAF18, 24LL, 7LL);
    swift_weakInit(v27 + 16);
    uint64_t v28 = swift_allocObject(&unk_1000CAF40, 32LL, 7LL);
    *(void *)(v28 + swift_weakDestroy(v0 + 16) = v27;
    *(void *)(v28 + 24) = v24;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)partial apply for closure #1 in NearbyInvitationScanner.scan(),  v28);
    NWBrowser.stateUpdateHandler.setter(partial apply for closure #1 in NearbyInvitationScanner.scan(), v28);
    swift_release(v28);
    swift_release(v27);
    uint64_t v29 = swift_allocObject(&unk_1000CAF18, 24LL, 7LL);
    swift_weakInit(v29 + 16);
    uint64_t v30 = swift_allocObject(&unk_1000CAF68, 32LL, 7LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v29;
    *(void *)(v30 + 24) = v24;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)partial apply for closure #2 in NearbyInvitationScanner.scan(),  v30);
    NWBrowser.browseResultsChangedHandler.setter(partial apply for closure #2 in NearbyInvitationScanner.scan(), v30);
    swift_release(v30);
    swift_release(v29);
    NWBrowser.start(queue:)(v0[2]);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v31, (uint64_t)static Log.client);
    uint64_t v32 = swift_retain_n(v24);
    unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v40 = v1;
      unint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v24;
      uint64_t v47 = v36;
      *(_DWORD *)unint64_t v35 = 136315138;
      swift_retain();
      uint64_t v37 = String.init<A>(reflecting:)(&v46, v23);
      unint64_t v39 = v38;
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v39);
      swift_release_n(v24);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "*** NearbyInvitationScanner new browser, %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      swift_release(v24);
      swift_release(v41);
      (*(void (**)(void *, uint64_t))(v45 + 8))(v8, v40);
    }

    else
    {

      swift_release_n(v24);
      swift_release(v41);
      (*(void (**)(void *, uint64_t))(v45 + 8))(v8, v1);
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }

uint64_t closure #1 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.State?);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v84 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v85 = (char *)&v83 - v10;
  uint64_t v11 = type metadata accessor for NWError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  unint64_t v89 = (char *)&v83 - v18;
  uint64_t v19 = type metadata accessor for NWBrowser.State(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v22, v25);
  uint64_t v28 = (char *)&v83 - v27;
  uint64_t v30 = __chkstk_darwin(v26, v29);
  uint64_t v86 = (char *)&v83 - v31;
  __chkstk_darwin(v30, v32);
  os_log_type_t v34 = (char *)&v83 - v33;
  a2 += 16LL;
  swift_beginAccess(a2, v92, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v87 = result;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v36(v34, a1, v19);
    int v37 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v34, v19);
    if (v37 == enum case for NWBrowser.State.failed(_:))
    {
      (*(void (**)(char *, uint64_t))(v20 + 96))(v34, v19);
      unint64_t v38 = v89;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v89, v34, v11);
      if (one-time initialization token for client != -1) {
        swift_once(&one-time initialization token for client, one-time initialization function for client);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v39, (uint64_t)static Log.client);
      uint64_t v40 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
      uint64_t v41 = v40(v16, v38, v11);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v45 = static os_log_type_t.error.getter(v42, v43, v44);
      if (os_log_type_enabled(v42, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v46 = 138412290;
        uint64_t v86 = (char *)(v46 + 4);
        uint64_t v48 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NWError and conformance NWError,  (uint64_t (*)(uint64_t))&type metadata accessor for NWError,  (uint64_t)&protocol conformance descriptor for NWError);
        uint64_t v49 = swift_allocError(v11, v48, 0LL, 0LL);
        v40(v50, v16, v11);
        uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(v49);
        unint64_t v91 = (char *)v51;
        unint64_t v38 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v86, v46 + 12);
        *uint64_t v47 = v51;
        uint64_t v52 = *(void (**)(char *, uint64_t))(v12 + 8);
        v52(v16, v11);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v45,  "*** NearbyInvitationScanner failed with error = %@",  v46,  0xCu);
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v47, 1LL, v53);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {
        uint64_t v52 = *(void (**)(char *, uint64_t))(v12 + 8);
        v52(v16, v11);
      }

      uint64_t v61 = v87;

      NWBrowser.cancel()();
      uint64_t v62 = (*(uint64_t (**)(void))(*(void *)v61 + 128LL))();
      if (v62)
      {
        uint64_t v64 = v62;
        uint64_t v65 = v63;
        uint64_t ObjectType = swift_getObjectType(v62);
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 24))(v38, ObjectType, v65);
        swift_unknownObjectRelease(v64);
        swift_release(v61);
        return ((uint64_t (*)(char *, uint64_t))v52)(v38, v11);
      }

      else
      {
        v52(v38, v11);
        return swift_release(v61);
      }
    }

    else if (v37 == enum case for NWBrowser.State.ready(_:))
    {
      if (one-time initialization token for client != -1) {
        swift_once(&one-time initialization token for client, one-time initialization function for client);
      }
      uint64_t v54 = type metadata accessor for Logger(0LL);
      uint64_t v55 = __swift_project_value_buffer(v54, (uint64_t)static Log.client);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = v87;
      if (v58)
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "*** NearbyInvitationScanner ready and posting results",  v60,  2u);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      return swift_release(v59);
    }

    else
    {
      if (one-time initialization token for client != -1) {
        swift_once(&one-time initialization token for client, one-time initialization function for client);
      }
      uint64_t v67 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v67, (uint64_t)static Log.client);
      uint64_t v68 = v86;
      uint64_t v69 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v86, a1, v19);
      id v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        id v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v89 = (char *)swift_slowAlloc(32LL, -1LL);
        unint64_t v91 = v89;
        *(_DWORD *)id v72 = 136315138;
        unint64_t v73 = v68;
        uint64_t v74 = (uint64_t)v85;
        v36(v85, (uint64_t)v73, v19);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v74, 0LL, 1LL, v19);
        uint64_t v75 = v74;
        uint64_t v76 = v84;
        outlined init with copy of (String, Any)( v75,  v84,  &demangling cache variable for type metadata for NWBrowser.State?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v76, 1LL, v19) == 1)
        {
          unint64_t v77 = 0xE300000000000000LL;
          uint64_t v78 = 7104878LL;
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v28, v76, v19);
          v36(v24, (uint64_t)v28, v19);
          uint64_t v78 = String.init<A>(reflecting:)(v24, v19);
          unint64_t v77 = v80;
          (*(void (**)(char *, uint64_t))(v20 + 8))(v28, v19);
        }

        outlined destroy of Any?((uint64_t)v85, &demangling cache variable for type metadata for NWBrowser.State?);
        uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v77, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v72 + 4, v72 + 12);
        swift_bridgeObjectRelease(v77);
        unint64_t v81 = *(void (**)(char *, uint64_t))(v20 + 8);
        v81(v86, v19);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "*** NearbyInvitationScanner state update: %s", v72, 0xCu);
        unint64_t v82 = v89;
        swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        swift_slowDealloc(v72, -1LL, -1LL);

        swift_release(v87);
        return ((uint64_t (*)(char *, uint64_t))v81)(v34, v19);
      }

      else
      {
        swift_release(v87);
        id v79 = *(void (**)(char *, uint64_t))(v20 + 8);
        v79(v68, v19);

        return ((uint64_t (*)(char *, uint64_t))v79)(v34, v19);
      }
    }
  }

  return result;
}

uint64_t closure #2 in NearbyInvitationScanner.scan()( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t))
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v24, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = (uint8_t *)result;
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v10, (uint64_t)static Log.client);
    uint64_t v11 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v21 = a2;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      v23[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      type metadata accessor for NWBrowser.Result(0LL);
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NWBrowser.Result and conformance NWBrowser.Result,  (uint64_t (*)(uint64_t))&type metadata accessor for NWBrowser.Result,  (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
      __n128 v16 = swift_bridgeObjectRetain(a1);
      uint64_t v17 = Set.description.getter(v16);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(a1);
      uint64_t v20 = v17;
      a2 = v21;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "*** NearbyInvitationScanner results: %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    swift_retain();
    swift_retain();
    specialized Sequence.forEach(_:)(a2, v9, a4);
    swift_release_n(v9);
    return swift_release(a4);
  }

  return result;
}

void closure #1 in closure #2 in NearbyInvitationScanner.scan()( uint64_t a1, uint8_t *a2, void (*a3)(char *, uint64_t))
{
  v200 = a2;
  uint64_t v199 = a1;
  v189 = a3;
  uint64_t v184 = *(void (**)(char *, uint64_t, uint64_t))a3;
  uint64_t v198 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v194 = *(void *)(v198 - 8);
  uint64_t v4 = __chkstk_darwin(v198, v3);
  v197 = (char *)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  v196 = (char *)&v183 - v8;
  __chkstk_darwin(v7, v9);
  v195 = (char *)&v183 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v192 = *(void *)(v11 - 8);
  uint64_t v193 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  v191 = (char *)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v15);
  v201 = (char *)&v183 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v183 = (uint64_t)&v183 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  v188 = (os_log_s *)((char *)&v183 - v23);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  v187 = (char *)&v183 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v183 - v28;
  uint64_t v30 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  v190 = (os_log_s *)((char *)&v183 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = __chkstk_darwin(v33, v35);
  unint64_t v38 = (char *)&v183 - v37;
  uint64_t v40 = __chkstk_darwin(v36, v39);
  v185 = (char *)&v183 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  v186 = (char *)&v183 - v44;
  uint64_t v46 = __chkstk_darwin(v43, v45);
  uint64_t v48 = (char *)&v183 - v47;
  __chkstk_darwin(v46, v49);
  uint64_t v51 = (char *)&v183 - v50;
  uint64_t v52 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v53 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v54);
  uint64_t v56 = (char *)&v183 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v56, v199, v52);
  int v57 = (*(uint64_t (**)(char *, uint64_t))(v53 + 88))(v56, v52);
  uint64_t v199 = v30;
  if (v57 == enum case for NWBrowser.Result.Change.added(_:))
  {
    (*(void (**)(char *, uint64_t))(v53 + 96))(v56, v52);
    BOOL v58 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v58(v51, v56, v30);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v59, (uint64_t)static Log.client);
    uint64_t v60 = *(uint64_t (**)(char *, char *, uint64_t))(v31 + 16);
    uint64_t v61 = v60(v48, v51, v30);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    int v63 = static os_log_type_t.default.getter();
    v190 = v62;
    if (os_log_type_enabled(v62, (os_log_type_t)v63))
    {
      uint64_t v184 = (void (*)(char *, uint64_t, uint64_t))v58;
      LODWORD(v188) = v63;
      uint64_t v64 = v30;
      uint64_t v65 = v31;
      NSString v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v67 = swift_slowAlloc(32LL, -1LL);
      v204 = (char *)v67;
      *(_DWORD *)NSString v66 = 136315138;
      v60(v29, v48, v64);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v29, 0LL, 1LL, v64);
      uint64_t v68 = (uint64_t)v187;
      outlined init with copy of (String, Any)( (uint64_t)v29,  (uint64_t)v187,  &demangling cache variable for type metadata for NWBrowser.Result?);
      v189 = (void (*)(char *, uint64_t))v65;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v68, 1LL, v64) == 1)
      {
        uint64_t v69 = 7104878LL;
        unint64_t v70 = 0xE300000000000000LL;
      }

      else
      {
        uint64_t v183 = v67;
        uint64_t v97 = v186;
        v184(v186, v68, v64);
        uint64_t v98 = v185;
        v60(v185, v97, v64);
        uint64_t v69 = String.init<A>(reflecting:)(v98, v64);
        unint64_t v70 = v99;
        unint64_t v100 = v97;
        uint64_t v67 = v183;
        (*((void (**)(char *, uint64_t))v189 + 1))(v100, v64);
      }

      outlined destroy of Any?((uint64_t)v29, &demangling cache variable for type metadata for NWBrowser.Result?);
      uint64_t v202 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease(v70);
      v189 = (void (*)(char *, uint64_t))*((void *)v189 + 1);
      v189(v48, v64);
      v101 = v190;
      _os_log_impl( (void *)&_mh_execute_header,  v190,  (os_log_type_t)v188,  "*** NearbyInvitationScanner added result, %s",  v66,  0xCu);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      v189 = *(void (**)(char *, uint64_t))(v31 + 8);
      v189(v48, v30);
    }

    uint64_t v103 = v192;
    uint64_t v102 = v193;
    uint64_t v104 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v192 + 16))( v201,  &v200[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID],  v193);
    uint64_t v105 = v195;
    uint64_t v106 = NWBrowser.Result.endpoint.getter(v104);
    uint64_t v107 = v191;
    NWEndpoint.endpointUUID()(v106);
    unint64_t v108 = *(uint64_t (**)(char *, uint64_t))(v194 + 8);
    uint64_t v109 = v198;
    uint64_t v110 = v108(v105, v198);
    uint64_t v194 = UUID.uuidString.getter(v110);
    v190 = v111;
    uint64_t v112 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v107, v102);
    uint64_t v113 = NWBrowser.Result.endpoint.getter(v112);
    uint64_t v114 = NWEndpoint.contactID.getter(v113);
    uint64_t v192 = v115;
    uint64_t v193 = v114;
    uint64_t v116 = v108(v105, v109);
    uint64_t v117 = v196;
    uint64_t v118 = NWBrowser.Result.endpoint.getter(v116);
    unsigned int v119 = NWEndpoint.deviceColor.getter(v118);
    uint64_t v120 = v108(v117, v109);
    uint64_t v121 = v119;
    uint64_t v122 = NWBrowser.Result.endpoint.getter(v120);
    uint64_t v123 = NWEndpoint.deviceModel.getter(v122);
    uint64_t v125 = v124;
    uint64_t v126 = v108(v117, v109);
    v127 = v197;
    uint64_t v128 = NWBrowser.Result.endpoint.getter(v126);
    uint64_t v129 = NWEndpoint.deviceID.getter(v128);
    uint64_t v131 = v130;
    v108(v127, v109);
    id v132 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement(0LL));
    unint64_t v133 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)( v201,  v194,  v190,  1LL,  v193,  v192,  0LL,  0xE000000000000000LL,  0x646F50656D6F48LL,  0xE700000000000000LL,  0LL,  0xF000000000000000LL,  v121,  0,  v123,  v125,  v129,  v131);
    uint64_t v134 = (*(uint64_t (**)(void))(*(void *)v200 + 128LL))();
    if (v134)
    {
      uint64_t v136 = v134;
      uint64_t v137 = v135;
      uint64_t ObjectType = swift_getObjectType(v134);
      (*(void (**)(void *, char *, uint64_t, uint64_t))(v137 + 8))(v133, v51, ObjectType, v137);
      swift_unknownObjectRelease(v136);

      v189(v51, v199);
    }

    else
    {
      v189(v51, v199);
    }
  }

  else if (v57 == enum case for NWBrowser.Result.Change.removed(_:))
  {
    (*(void (**)(char *, uint64_t))(v53 + 96))(v56, v52);
    uint64_t v71 = v31;
    id v72 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    unint64_t v73 = v38;
    uint64_t v74 = v199;
    v72(v38, v56, v199);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v75 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v75, (uint64_t)static Log.client);
    uint64_t v76 = *(uint64_t (**)(os_log_s *, char *, uint64_t))(v31 + 16);
    unint64_t v77 = v190;
    uint64_t v78 = v76(v190, v38, v74);
    id v79 = (os_log_s *)Logger.logObject.getter(v78);
    int v80 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v79, (os_log_type_t)v80))
    {
      LODWORD(v189) = v80;
      unint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v187 = (char *)swift_slowAlloc(32LL, -1LL);
      v204 = v187;
      *(_DWORD *)unint64_t v81 = 136315138;
      uint64_t v82 = (uint64_t)v188;
      v76(v188, (char *)v77, v74);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v82, 0LL, 1LL, v74);
      uint64_t v83 = v82;
      uint64_t v84 = v183;
      outlined init with copy of (String, Any)( v83,  v183,  &demangling cache variable for type metadata for NWBrowser.Result?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v84, 1LL, v74) == 1)
      {
        uint64_t v85 = 7104878LL;
        unint64_t v86 = 0xE300000000000000LL;
      }

      else
      {
        v139 = v186;
        v72(v186, (char *)v84, v74);
        uint64_t v140 = v185;
        v76((os_log_s *)v185, v139, v74);
        uint64_t v85 = String.init<A>(reflecting:)(v140, v74);
        unint64_t v86 = v141;
        uint64_t v142 = v139;
        unint64_t v77 = v190;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v142, v74);
      }

      outlined destroy of Any?((uint64_t)v188, &demangling cache variable for type metadata for NWBrowser.Result?);
      uint64_t v202 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203, v81 + 4, v81 + 12);
      swift_bridgeObjectRelease(v86);
      v190 = *(os_log_s **)(v71 + 8);
      ((void (*)(os_log_s *, uint64_t))v190)(v77, v74);
      _os_log_impl( (void *)&_mh_execute_header,  v79,  (os_log_type_t)v189,  "*** NearbyInvitationScanner removed result, %s",  v81,  0xCu);
      uint64_t v143 = (uint64_t)v187;
      swift_arrayDestroy(v187, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1LL, -1LL);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    else
    {
      v190 = *(os_log_s **)(v31 + 8);
      ((void (*)(os_log_s *, uint64_t))v190)(v77, v74);
    }

    os_log_type_t v144 = v200;
    uint64_t v146 = v192;
    uint64_t v145 = v193;
    uint64_t v147 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v192 + 16))( v201,  &v200[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID],  v193);
    v148 = v195;
    uint64_t v149 = NWBrowser.Result.endpoint.getter(v147);
    uint64_t v150 = v191;
    NWEndpoint.endpointUUID()(v149);
    v151 = *(uint64_t (**)(char *, uint64_t))(v194 + 8);
    v152 = v73;
    uint64_t v153 = v198;
    uint64_t v154 = v151(v148, v198);
    uint64_t v194 = UUID.uuidString.getter(v154);
    v189 = v155;
    uint64_t v156 = (*(uint64_t (**)(char *, uint64_t))(v146 + 8))(v150, v145);
    uint64_t v157 = NWBrowser.Result.endpoint.getter(v156);
    uint64_t v158 = NWEndpoint.contactID.getter(v157);
    uint64_t v192 = v159;
    uint64_t v193 = v158;
    uint64_t v160 = v151(v148, v153);
    v161 = v196;
    uint64_t v162 = NWBrowser.Result.endpoint.getter(v160);
    unsigned int v163 = NWEndpoint.deviceColor.getter(v162);
    uint64_t v164 = v151(v161, v153);
    uint64_t v165 = v163;
    uint64_t v166 = NWBrowser.Result.endpoint.getter(v164);
    uint64_t v167 = NWEndpoint.deviceModel.getter(v166);
    uint64_t v169 = v168;
    uint64_t v170 = v151(v161, v153);
    uint64_t v171 = v197;
    v196 = v152;
    uint64_t v172 = NWBrowser.Result.endpoint.getter(v170);
    uint64_t v173 = NWEndpoint.deviceID.getter(v172);
    uint64_t v175 = v174;
    v151(v171, v153);
    id v176 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement(0LL));
    uint64_t v177 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)( v201,  v194,  v189,  1LL,  v193,  v192,  0LL,  0xE000000000000000LL,  0x646F50656D6F48LL,  0xE700000000000000LL,  0LL,  0xF000000000000000LL,  v165,  0,  v167,  v169,  v173,  v175);
    uint64_t v178 = (*(uint64_t (**)(void))(*(void *)v144 + 128LL))();
    uint64_t v180 = v178;
    if (v178)
    {
      uint64_t v181 = v179;
      uint64_t v182 = swift_getObjectType(v178);
      (*(void (**)(void *, uint64_t, uint64_t))(v181 + 16))(v177, v182, v181);
      swift_unknownObjectRelease(v180);

      ((void (*)(char *, uint64_t))v190)(v196, v199);
    }

    else
    {
      ((void (*)(char *, uint64_t))v190)(v196, v199);
    }
  }

  else
  {
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v87 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v87, (uint64_t)static Log.client);
    uint64_t v88 = (uint64_t)v189;
    uint64_t v89 = swift_retain_n(v189);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v201 = (char *)swift_slowAlloc(32LL, -1LL);
      uint64_t v202 = v88;
      v204 = v201;
      *(_DWORD *)uint64_t v92 = 136315138;
      v200 = v92 + 4;
      swift_retain();
      uint64_t v93 = String.init<A>(reflecting:)(&v202, v184);
      unint64_t v95 = v94;
      uint64_t v202 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, (uint64_t *)&v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203, v200, v92 + 12);
      swift_release_n(v88);
      swift_bridgeObjectRelease(v95);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "*** NearbyInvitationScanner new browser, %s", v92, 0xCu);
      uint64_t v96 = v201;
      swift_arrayDestroy(v201, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_slowDealloc(v92, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v88);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v52);
  }

void NearbyInvitationScanner.connect(to:)(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  uint64_t v3 = __chkstk_darwin(v1, v2);
  uint64_t v60 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3, v5);
  uint64_t v67 = (uint64_t)&v58 - v6;
  uint64_t v7 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v59 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v68 = (char *)&v58 - v14;
  uint64_t v64 = v15;
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v58 - v17;
  type metadata accessor for NWParameters(0LL);
  nw_parameters_t v19 = specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(0);
  uint64_t v20 = NWParameters.__allocating_init(_:)(v19);
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v21 = type metadata accessor for NWProtocolFramer.Options(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = swift_retain();
  uint64_t v23 = NWProtocolFramer.Options.init(definition:)(v22);
  uint64_t v24 = NWParameters.defaultProtocolStack.getter();
  swift_retain();
  uint64_t v26 = (void (*)(uint64_t *, void))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify(v70);
  uint64_t v27 = *v25;
  if ((unint64_t)*v25 >> 62
    && (v27 < 0 ? (uint64_t v56 = *v25) : (uint64_t v56 = v27 & 0xFFFFFFFFFFFFFF8LL),
        swift_bridgeObjectRetain(*v25),
        uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v56),
        swift_bridgeObjectRelease(v27),
        v57 < 0))
  {
    __break(1u);
  }

  else
  {
    uint64_t v62 = v23;
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, v23);
    v26(v70, 0LL);
    swift_release(v24);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v29 = v66;
    v28(v18, v66, v7);
    uint64_t v30 = type metadata accessor for NWConnection(0LL);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    swift_retain();
    uint64_t v63 = v20;
    uint64_t v31 = v20;
    uint64_t v20 = v29;
    uint64_t v26 = (void (*)(uint64_t *, void))NWConnection.init(to:using:)(v18, v31);
    uint64_t v32 = swift_allocObject(&unk_1000CAF18, 24LL, 7LL);
    uint64_t v33 = v65;
    swift_weakInit(v32 + 16);
    uint64_t v61 = (void (*)(uint64_t, char *, uint64_t))v28;
    v28(v18, v29, v7);
    uint64_t v34 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = (v34 + 24) & ~v34;
    unint64_t v36 = (v64 + v35 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v37 = swift_allocObject(&unk_1000CAF90, v36 + 8, v34 | 7);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v32;
    uint64_t v64 = v8;
    uint64_t v8 = *(void *)(v8 + 32);
    BOOL v58 = v18;
    ((void (*)(uint64_t, char *, uint64_t))v8)(v37 + v35, v18, v7);
    *(void *)(v37 + v36) = v26;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)partial apply for closure #1 in NearbyInvitationScanner.connect(to:),  v37);
    NWConnection.stateUpdateHandler.setter(partial apply for closure #1 in NearbyInvitationScanner.connect(to:), v37);
    swift_release(v37);
    swift_release(v32);
    NWConnection.start(queue:)(v33[2]);
    if (one-time initialization token for client == -1) {
      goto LABEL_5;
    }
  }

  swift_once(&one-time initialization token for client, one-time initialization function for client);
LABEL_5:
  uint64_t v38 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v38, (uint64_t)static Log.client);
  uint64_t v39 = v68;
  uint64_t v40 = v61;
  uint64_t v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v68, v20, v7);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v65 = (void *)v8;
    uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    v70[0] = v66;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v45 = v67;
    v40(v67, v39, v7);
    uint64_t v46 = v64;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v45, 0LL, 1LL, v7);
    uint64_t v47 = v60;
    outlined init with copy of (String, Any)(v45, v60, &demangling cache variable for type metadata for NWEndpoint?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1LL, v7) == 1)
    {
      unint64_t v48 = 0xE300000000000000LL;
      uint64_t v49 = 7104878LL;
    }

    else
    {
      uint64_t v50 = v26;
      uint64_t v51 = v58;
      ((void (*)(char *, uint64_t, uint64_t))v65)(v58, v47, v7);
      uint64_t v52 = v59;
      v40((uint64_t)v59, v51, v7);
      uint64_t v49 = String.init<A>(reflecting:)(v52, v7);
      unint64_t v48 = v53;
      uint64_t v54 = v51;
      uint64_t v26 = v50;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v7);
    }

    outlined destroy of Any?(v67, &demangling cache variable for type metadata for NWEndpoint?);
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v48, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v68, v7);
    _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "NearbyInvitationScanner Starting connection request to endpoint %s",  v44,  0xCu);
    uint64_t v55 = v66;
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);

    swift_release(v26);
    swift_release(v63);
    swift_release(v62);
  }

  else
  {
    swift_release(v62);
    swift_release(v63);
    swift_release(v26);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v39, v7);
  }

uint64_t closure #1 in NearbyInvitationScanner.connect(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v111 = a4;
  uint64_t v114 = a1;
  uint64_t v110 = type metadata accessor for NWError(0LL);
  uint64_t v112 = *(void *)(v110 - 8);
  uint64_t v7 = __chkstk_darwin(v110, v6);
  uint64_t v9 = (char *)v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v113 = (char *)v105 - v11;
  uint64_t v12 = type metadata accessor for NWConnection.State(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v120, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  uint64_t v115 = result;
  if (!result) {
    return result;
  }
  uint64_t v108 = v13;
  uint64_t v109 = v16;
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.client);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a3, v17);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc(12LL, -1LL);
    uint64_t v107 = v12;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    v105[1] = v24;
    uint64_t v31 = v30;
    uint64_t v118 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v106 = v9;
    uint64_t v32 = NWEndpoint.debugDescription.getter(v30);
    unint64_t v34 = v33;
    uint64_t v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v118);
    uint64_t v9 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "*** NearbyInvitationScanner making a connection update handler for device %s",  v29,  0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v35 = v29;
    uint64_t v12 = v107;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }

  uint64_t v37 = v108;
  unint64_t v36 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v109, v114, v12);
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v36, v12);
  if ((_DWORD)v38 == enum case for NWConnection.State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v37 + 96))(v36, v12);
    uint64_t v40 = v112;
    uint64_t v39 = v113;
    uint64_t v41 = v110;
    (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v113, v36, v110);
    uint64_t v42 = *(uint64_t (**)(char *, char *, uint64_t))(v40 + 16);
    uint64_t v43 = v42(v9, v39, v41);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v47 = static os_log_type_t.error.getter(v44, v45, v46);
    if (os_log_type_enabled(v44, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v48 = 138412290;
      uint64_t v50 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NWError and conformance NWError,  (uint64_t (*)(uint64_t))&type metadata accessor for NWError,  (uint64_t)&protocol conformance descriptor for NWError);
      uint64_t v51 = swift_allocError(v41, v50, 0LL, 0LL);
      v42(v52, v9, v41);
      uint64_t v53 = _swift_stdlib_bridgeErrorToNSError(v51);
      uint64_t v118 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v48 + 4, v48 + 12);
      *uint64_t v49 = v53;
      uint64_t v54 = *(void (**)(char *, uint64_t))(v112 + 8);
      v54(v9, v41);
      _os_log_impl((void *)&_mh_execute_header, v44, v47, "NearbyInvitationScanner state - Waiting: %@", v48, 0xCu);
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v49, 1LL, v55);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);

      swift_release(v115);
    }

    else
    {

      swift_release(v115);
      uint64_t v54 = *(void (**)(char *, uint64_t))(v40 + 8);
      v54(v9, v41);
    }

    return ((uint64_t (*)(char *, uint64_t))v54)(v113, v41);
  }

  int v56 = v38;
  if ((_DWORD)v38 == enum case for NWConnection.State.failed(_:))
  {
    uint64_t v57 = v12;
    BOOL v58 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "*** NearbyInvitationScanner state - failed: Removing connection",  v60,  2u);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    uint64_t v61 = *(uint64_t (**)(uint64_t *))(*(void *)v115 + 192LL);
    uint64_t v62 = v111;
    swift_retain();
    uint64_t v63 = (void (*)(uint64_t *, void))v61(&v118);
    uint64_t v65 = v64;
    uint64_t v66 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v64, v62);
    swift_release(v62);
    uint64_t v67 = *v65;
    if ((unint64_t)*v65 >> 62)
    {
      if (v67 < 0) {
        uint64_t v103 = *v65;
      }
      else {
        uint64_t v103 = v67 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v65);
      uint64_t v69 = _CocoaArrayWrapper.endIndex.getter(v103);
      swift_bridgeObjectRelease(v67);
      if (v69 >= v66) {
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v68 = v67 & 0xFFFFFFFFFFFFF8LL;
      uint64_t v69 = *(void *)((v67 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v69 >= v66)
      {
LABEL_15:
        specialized Array.replaceSubrange<A>(_:with:)(v66, v69);
        v63(&v118, 0LL);
        NWConnection.cancel()();
        swift_release(v115);
        return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v57);
      }
    }

    __break(1u);
LABEL_48:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v66 + 1, 1LL);
LABEL_33:
    uint64_t v81 = v66;
    uint64_t v82 = v111;
    uint64_t v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v111);
    specialized Array._endMutation()(v83);
    v63(&v118, 0LL);
    uint64_t v84 = v115;
    (*(void (**)(uint64_t))(*(void *)v115 + 264LL))(v82);
    uint64_t v74 = v84;
    return swift_release(v74);
  }

  if ((_DWORD)v38 == enum case for NWConnection.State.setup(_:))
  {
    unint64_t v70 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v72 = 0;
      unint64_t v73 = "NearbyInvitationScanner state - Setup";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v70, v71, v73, v72, 2u);
      swift_slowDealloc(v72, -1LL, -1LL);
      goto LABEL_25;
    }

    goto LABEL_25;
  }

  if ((_DWORD)v38 == enum case for NWConnection.State.preparing(_:))
  {
    unint64_t v70 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v72 = 0;
      unint64_t v73 = "NearbyInvitationScanner state - Preparing";
      goto LABEL_24;
    }

uint64_t NearbyInvitationScanner.sendRequestConnection(fromHandle:nearbyAdvertisement:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v38[1] = a4;
  uint64_t v39 = type metadata accessor for NWConnection.SendCompletion(0LL);
  v38[0] = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for InvitationRequestData(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NWProtocolFramer.Message(0LL);
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v13 = swift_retain();
  uint64_t v14 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v13);
  uint64_t v42[3] = &type metadata for ConnectionMessageType;
  LOBYTE(v42[0]) = 1;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v42, 0xD000000000000015LL, 0x80000001000B03A0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1000AAE90;
  *(void *)(v16 + 32) = v14;
  v42[0] = v16;
  specialized Array._endMutation()(v16);
  uint64_t v17 = v42[0];
  uint64_t v18 = type metadata accessor for NWConnection.ContentContext(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  swift_retain();
  uint64_t v19 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0xD000000000000011LL,  0x80000001000B03C0LL,  0LL,  0LL,  0LL,  v17,  0.5);
  uint64_t v20 = NearbyAdvertisement.identifier.getter();
  uint64_t v22 = v21;
  __n128 v23 = swift_bridgeObjectRetain(a2);
  InvitationRequestData.init(invitationData:id:pseudo:)(0LL, 0xF000000000000000LL, v20, v22, a1, a2, v23);
  uint64_t v24 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = JSONEncoder.init()();
  uint64_t v26 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData,  (uint64_t (*)(uint64_t))&type metadata accessor for InvitationRequestData,  (uint64_t)&protocol conformance descriptor for InvitationRequestData);
  uint64_t v41 = v9;
  uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)(v12, v9, v26);
  unint64_t v29 = v28;
  uint64_t v30 = v38[0];
  uint64_t v31 = v39;
  (*(void (**)(char *, void, uint64_t))(v38[0] + 104LL))( v8,  enum case for NWConnection.SendCompletion.idempotent(_:),  v39);
  outlined copy of Data._Representation(v27, v29);
  NWConnection.send(content:contentContext:isComplete:completion:)(v27, v29, v19, 1LL, v8);
  outlined consume of Data._Representation(v27, v29);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Log.client);
  unint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "NearbyInvitationScanner sending data over for preLMI", v36, 2u);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  swift_release(v19);
  swift_release(v25);
  outlined consume of Data._Representation(v27, v29);
  swift_release(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v12, v41);
}

uint64_t NearbyInvitationScanner.sendApprovalReceivedResponse(to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWConnection.SendCompletion(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NWProtocolFramer.Message(0LL);
  if (one-time initialization token for definition != -1) {
    swift_once(&one-time initialization token for definition, one-time initialization function for definition);
  }
  uint64_t v7 = swift_retain();
  uint64_t v8 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v7);
  v34[3] = (uint64_t)&type metadata for ConnectionMessageType;
  LOBYTE(v34[0]) = 4;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v34, 0xD000000000000015LL, 0x80000001000B03A0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1000AAE90;
  *(void *)(v10 + 32) = v8;
  v34[0] = v10;
  specialized Array._endMutation()(v10);
  uint64_t v11 = v34[0];
  uint64_t v12 = type metadata accessor for NWConnection.ContentContext(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_retain();
  uint64_t v13 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0xD000000000000012LL,  0x80000001000B03E0LL,  0LL,  0LL,  0LL,  v11,  0.5);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  uint64_t v15 = swift_retain_n(a1);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v32 = v2;
    uint64_t v18 = swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = v3;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = a1;
    v34[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = type metadata accessor for NWConnection(0LL);
    uint64_t v30 = v6;
    uint64_t v22 = v13;
    uint64_t v23 = v21;
    swift_retain();
    uint64_t v24 = String.init<A>(reflecting:)(&v33, v23);
    unint64_t v26 = v25;
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v34);
    uint64_t v2 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v19 + 4, v19 + 12);
    swift_release_n(a1);
    unint64_t v27 = v26;
    uint64_t v13 = v22;
    uint64_t v6 = v30;
    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "*** NearbyInvitationScanner send approval to connection %s",  v19,  0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    unint64_t v28 = v19;
    uint64_t v3 = v31;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1);
  }

  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for NWConnection.SendCompletion.idempotent(_:),  v2);
  NWConnection.send(content:contentContext:isComplete:completion:)(0LL, 0xC000000000000000LL, v13, 1LL, v6);
  swift_release(v8);
  swift_release(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t NearbyInvitationScanner.receiveNextMessage(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "*** NearbyInvitationScanner received data", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = swift_allocObject(&unk_1000CAFB8, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v9 + 24) = a1;
  swift_retain();
  swift_retain();
  NWConnection.receiveMessage(completion:)( partial apply for closure #1 in NearbyInvitationScanner.receiveNextMessage(from:),  v9);
  return swift_release(v9);
}

uint64_t closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 >> 60 != 15 && a3 != 0)
  {
    outlined copy of Data._Representation(a1, a2);
    if (one-time initialization token for definition != -1) {
      swift_once(&one-time initialization token for definition, one-time initialization function for definition);
    }
    uint64_t v13 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)(listener._userQueue);
    if (v13)
    {
      uint64_t v14 = v13;
      if (one-time initialization token for client != -1) {
        swift_once(&one-time initialization token for client, one-time initialization function for client);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v15, (uint64_t)static Log.client);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v16 = outlined copy of Data._Representation(a1, a2);
      os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      uint64_t v41 = a5;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = a7;
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        unint64_t v43 = a2;
        uint64_t v44 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        uint64_t v42 = a1;
        outlined copy of Data._Representation(a1, a2);
        uint64_t v21 = String.init<A>(reflecting:)(&v42, &type metadata for Data);
        unint64_t v23 = v22;
        uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease(v23);
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(a1, a2);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "*** NearbyInvitationScanner received data in bytes: %s",  v19,  0xCu);
        swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v24 = v20;
        a7 = v40;
        swift_slowDealloc(v24, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(a1, a2);
      }

      uint64_t v25 = (*(uint64_t (**)(void))(*(void *)a6 + 128LL))();
      if (v25)
      {
        uint64_t v27 = v25;
        uint64_t v28 = v26;
        uint64_t ObjectType = swift_getObjectType(v25);
        uint64_t v30 = type metadata accessor for NWProtocolFramer.Message(0LL);
        uint64_t v31 = swift_dynamicCastClassUnconditional(v14, v30, 0LL, 0LL, 0LL);
        uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32);
        outlined copy of Data?(a1, a2);
        swift_retain();
        v32(a1, a2, v31, ObjectType, v28);
        outlined consume of Data?(a1, a2);
        swift_unknownObjectRelease(v27);
        swift_release_n(v14);
        outlined consume of Data?(a1, a2);
      }

      else
      {
        outlined consume of Data?(a1, a2);
        swift_release(v14);
      }

      a5 = v41;
    }

    else
    {
      outlined consume of Data?(a1, a2);
    }
  }

  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Log.client);
  os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "*** NearbyInvitationScanner going to send received message to HP",  v37,  2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  (*(void (**)(uint64_t))(*(void *)a6 + 256LL))(a7);
  uint64_t v38 = type metadata accessor for NWError(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(a5, 1LL, v38);
  if ((_DWORD)result == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a6 + 264LL))(a7);
  }
  return result;
}

uint64_t NearbyInvitationScanner.deinit()
{
  outlined destroy of weak PeerConnectionDelegate?(v0 + 32);
  swift_release(*(void *)(v0 + 48));
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return v0;
}

uint64_t NearbyInvitationScanner.__deallocating_deinit()
{
  outlined destroy of weak PeerConnectionDelegate?(v0 + 32);
  swift_release(*(void *)(v0 + 48));
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint8_t *a2, void (*a3)(char *, uint64_t))
{
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for NWBrowser.Result.Change(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v27 = (unint64_t)(v16 + 63) >> 6;
  __n128 v19 = swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v21 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))( v14,  *(void *)(a1 + 48) + *(void *)(v7 + 72) * i,  v6,  v19);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v14, v6);
    closure #1 in closure #2 in NearbyInvitationScanner.scan()((uint64_t)v11, a2, v28);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
LABEL_26:
      swift_release(a1);
      return;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v27) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v20);
    if (!v24) {
      break;
    }
LABEL_17:
    unint64_t v18 = (v24 - 1) & v24;
  }

  int64_t v25 = v20 + 1;
  if (v20 + 1 >= v27) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v20 + 2;
  if (v20 + 2 >= v27) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v20 + 3;
  if (v20 + 3 >= v27) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v20 + 4;
  if (v20 + 4 >= v27) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
LABEL_16:
    int64_t v20 = v25;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v27) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_17;
    }
  }

void *specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a6;
  uint64_t v51 = a3;
  id v49 = a2;
  uint64_t v52 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v47 = *(void *)(v7 - 8);
  unint64_t v48 = (uint8_t *)v7;
  __chkstk_darwin(v7, v8);
  uint64_t v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v15, v16);
  unint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v19, v20);
  unint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v23 = type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter(v23);
  v54[0] = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v24 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v26 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(v54, v25, v26, v15, v24);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v14,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v10);
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x80000001000AF360LL,  v22,  v18,  v14,  0LL);
  id v27 = a4 + 4;
  a4[5] = 0LL;
  swift_unknownObjectWeakInit(a4 + 4, 0LL);
  a4[6] = 0LL;
  uint64_t v28 = (char *)a4
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v54[0] = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v30 = v46;
  Published.init(initialValue:)(v54, v29);
  (*(void (**)(char *, char *, uint8_t *))(v47 + 32))(v28, v30, v48);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v31, (uint64_t)static Log.client);
  id v32 = v49;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    os_log_type_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v36;
    id v49 = a4 + 4;
    *(_DWORD *)os_log_type_t v35 = 136315138;
    unint64_t v48 = v35 + 4;
    id v37 = [v32 debugDescription];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    unint64_t v40 = v39;

    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v54);
    id v27 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v48, v35 + 12);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "NearbyInvitationScanner init with parameters %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
  }

  a4[3] = v32;
  swift_beginAccess(v27, v54, 1LL, 0LL);
  uint64_t v41 = v51;
  a4[5] = v50;
  swift_unknownObjectWeakAssign(v27, v41);
  uint64_t v42 = (char *)a4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v43 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32LL))(v42, v52, v43);
  return a4;
}

uint64_t sub_10003D3B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.scan()(uint64_t a1)
{
  return closure #1 in NearbyInvitationScanner.scan()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2)
{
  return closure #2 in NearbyInvitationScanner.scan()( a1,  a2,  *(void *)(v2 + 16),  *(void (**)(char *, uint64_t))(v2 + 24));
}

uint64_t sub_10003D3F4()
{
  uint64_t v1 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.connect(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for NWEndpoint(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in NearbyInvitationScanner.connect(to:)( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 16),  *(void *)(v5 + 24));
}

uint64_t sub_10003D4E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10003D514(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136LL);
  uint64_t v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

uint64_t sub_10003D554@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10003D584(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationScanner()
{
  return type metadata accessor for NearbyInvitationScanner(0LL);
}

uint64_t type metadata accessor for NearbyInvitationScanner(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationScanner;
  if (!type metadata singleton initialization cache for NearbyInvitationScanner) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyInvitationScanner);
  }
  return result;
}

void type metadata completion function for NearbyInvitationScanner(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[2] = &unk_1000ABF28;
  void v6[3] = &unk_1000ABF40;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[4] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for Published<[NWConnection]>(319LL);
    if (v5 <= 0x3F)
    {
      v6[5] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 6LL, v6, a1 + 80);
    }
  }

void type metadata accessor for Published<[NWConnection]>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Published<[NWConnection]>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NWConnection]);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<[NWConnection]>);
    }
  }

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2) {
          return v5;
        }
      }

      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }

      if (__OFADD__(v5, 1LL)) {
        break;
      }
      if (++v5 == v4) {
        return 0LL;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  unint64_t v7 = specialized Collection.firstIndex(where:)(v6, a2);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2) {
    return v7;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_57;
    }
    unint64_t v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000LL) != 0LL) {
        uint64_t v29 = v9;
      }
      else {
        uint64_t v29 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30) {
        goto LABEL_6;
      }
    }

    else if (v10 != *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v7 + 5; ; ++i)
      {
        unint64_t v9 = i - 4;
        unint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0) {
          break;
        }
        if ((v9 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

        if (v9 >= *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_48;
        }
        if (*(void *)(v12 + 8 * i) != a2) {
          goto LABEL_11;
        }
LABEL_31:
        uint64_t v10 = i - 3;
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_49;
        }
        uint64_t v23 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v23 < 0) {
            uint64_t v26 = *a1;
          }
          else {
            uint64_t v26 = v23 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*a1);
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v23);
        }

        else
        {
          uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v10 == v24) {
          return v7;
        }
      }

      uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
      swift_unknownObjectRelease(v25);
      if (v25 == a2) {
        goto LABEL_31;
      }
LABEL_11:
      if (v9 == v7)
      {
LABEL_30:
        if (__OFADD__(v7++, 1LL)) {
          goto LABEL_50;
        }
        goto LABEL_31;
      }

      uint64_t v10 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        uint64_t v10 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_16:
          if ((v9 & 0x8000000000000000LL) != 0) {
            goto LABEL_53;
          }
          if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          uint64_t v14 = *(void *)(v10 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }

      else
      {
        if ((v7 & 0x8000000000000000LL) != 0) {
          goto LABEL_51;
        }
        if (v7 >= *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_52;
        }
        uint64_t v13 = *(void *)(v10 + 8 * v7 + 32);
        swift_retain();
        if ((v10 & 0xC000000000000001LL) == 0) {
          goto LABEL_16;
        }
      }

      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      uint64_t v10 = *a1;
LABEL_19:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000LL) != 0)
      {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        *a1 = v10;
      }

      uint64_t v16 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20);
      *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20) = v14;
      uint64_t v17 = swift_release(v16);
      specialized Array._endMutation()(v17);
      uint64_t v10 = *a1;
      int v18 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v10;
      if (!v18 || v10 < 0 || (v10 & 0x4000000000000000LL) != 0)
      {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        *a1 = v10;
      }

      if ((v9 & 0x8000000000000000LL) != 0) {
        goto LABEL_55;
      }
      uint64_t v19 = v10 & 0xFFFFFFFFFFFFFF8LL;
      if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_56;
      }
      uint64_t v20 = *(void *)(v19 + 8 * i);
      *(void *)(v19 + 8 * i) = v13;
      uint64_t v21 = swift_release(v20);
      specialized Array._endMutation()(v21);
      goto LABEL_30;
    }

    return v7;
  }

  uint64_t v27 = *a1;
  if (v27 < 0) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = v27 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v27);
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

uint64_t NearbyRangingFilter.Config.innerBubbleMaxScanningRegion.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NearbyRangingFilter.rangingConfig.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

id NearbyRangingFilter.rangingSession.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t NearbyRangingFilter.stableIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t NearbyRangingFilter.rangingAssertion.getter()
{
  return swift_retain(*(void *)(v0 + 56));
}

uint64_t NearbyRangingFilter.rangingAssertion.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  return swift_release(v3);
}

uint64_t (*NearbyRangingFilter.rangingAssertion.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyRangingFilter.device.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  char v5 = *(_BYTE *)(v1 + 80);
  unint64_t v7 = *(void **)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  int v9 = *(_DWORD *)(v1 + 112);
  uint64_t v10 = *(void *)(v1 + 136);
  uint64_t v17 = *(void *)(v1 + 128);
  uint64_t v18 = *(void *)(v1 + 120);
  char v16 = *(_BYTE *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 152);
  uint64_t v12 = *(void *)(v1 + 160);
  uint64_t v15 = v11;
  id v13 = v7;
  swift_bridgeObjectRetain(v3);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v6, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v17;
  *(void *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v10);
  return swift_retain();
}

uint64_t outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void *NearbyRangingFilter.device.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 72);
  char v5 = *(void **)(v1 + 88);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v6 = *(void *)(v1 + 104);
  uint64_t v7 = *(void *)(v1 + 136);
  uint64_t v8 = *(void *)(v1 + 160);
  __int128 v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 144) = v9;
  *(void *)(v1 + 160) = *(void *)(a1 + 96);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v10;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 112) = v11;
  outlined retain of BluetoothScanner.Device(a1);
  swift_bridgeObjectRelease(v3);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v4, v6);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  uint64_t v12 = *(void **)(v1 + 32);
  __int128 v13 = *(_OWORD *)(v1 + 144);
  void v19[4] = *(_OWORD *)(v1 + 128);
  void v19[5] = v13;
  uint64_t v20 = *(void *)(v1 + 160);
  __int128 v14 = *(_OWORD *)(v1 + 80);
  v19[0] = *(_OWORD *)(v1 + 64);
  v19[1] = v14;
  __int128 v15 = *(_OWORD *)(v1 + 112);
  v19[2] = *(_OWORD *)(v1 + 96);
  v19[3] = v15;
  char v16 = *(void (**)(_OWORD *))((swift_isaMask & *v12) + 0xD8LL);
  outlined retain of BluetoothScanner.Device((uint64_t)v19);
  v16(v19);
  outlined release of BluetoothScanner.Device(v19);
  return outlined release of BluetoothScanner.Device((void *)a1);
}

uint64_t outlined retain of BluetoothScanner.Device(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 72);
  id v6 = *(id *)(a1 + 24);
  swift_bridgeObjectRetain(v2);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain();
  return a1;
}

uint64_t outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *outlined release of BluetoothScanner.Device(void *a1)
{
  uint64_t v3 = (void *)a1[3];
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[12];
  swift_bridgeObjectRelease(a1[1]);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void (*NearbyRangingFilter.device.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 64, v3 + 13, 33LL, 0LL);
  return NearbyRangingFilter.device.modify;
}

void NearbyRangingFilter.device.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess(*a1 + 104);
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v3 + 128);
    uint64_t v5 = *(void **)(v4 + 32);
    __int128 v7 = *(_OWORD *)(v4 + 80);
    __int128 v6 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v7;
    *(_OWORD *)(v3 + 32) = v6;
    __int128 v9 = *(_OWORD *)(v4 + 128);
    __int128 v8 = *(_OWORD *)(v4 + 144);
    __int128 v10 = *(_OWORD *)(v4 + 112);
    *(void *)(v3 + 96) = *(void *)(v4 + 160);
    *(_OWORD *)(v3 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v9;
    *(_OWORD *)(v3 + 80) = v8;
    *(_OWORD *)(v3 + 48) = v10;
    __int128 v11 = *(void (**)(uint64_t))((swift_isaMask & *v5) + 0xD8LL);
    outlined retain of BluetoothScanner.Device(v3);
    v11(v3);
    outlined release of BluetoothScanner.Device((void *)v3);
  }

  free((void *)v3);
}

uint64_t NearbyRangingFilter.cancellables.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 168));
}

uint64_t NearbyRangingFilter.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 168);
  *(void *)(v1 + 168) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*NearbyRangingFilter.cancellables.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyRangingFilter.handle(updatedScannerDevice:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 160LL);
  outlined retain of BluetoothScanner.Device(a1);
  return v4(a1);
}

uint64_t NearbyRangingFilter.showDevice.getter()
{
  unsigned __int8 v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98LL))();
  return (v1 != 3) & v1;
}

uint64_t NearbyRangingFilter.__allocating_init(scannerDevice:config:)(uint64_t a1, char a2, uint64_t a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = swift_allocObject(v3, 176LL, 7LL);
  NearbyRangingFilter.init(scannerDevice:config:)(a1, v6, a3);
  return v7;
}

uint64_t NearbyRangingFilter.init(scannerDevice:config:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v7 = a2 & 1;
  *(void *)(v4 + 56) = 0LL;
  *(void *)(v4 + 168) = &_swiftEmptySetSingleton;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(v4 + 40) = *(void *)a1;
  *(void *)(v4 + 48) = v9;
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 16) = a2 & 1;
  *(void *)(v4 + 24) = a3;
  objc_allocWithZone((Class)type metadata accessor for NearbySession(0LL));
  swift_bridgeObjectRetain_n(v9, 2LL);
  __int128 v10 = (void *)NearbySession.init(stableIdentifier:rangingConfig:)(v8, v9, v7, a3);
  *(void *)(v4 + 32) = v10;
  __int128 v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 144) = v11;
  *(void *)(v4 + 160) = *(void *)(a1 + 96);
  __int128 v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 80) = v12;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 112) = v13;
  __int128 v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v10) + 0x90LL);
  uint64_t v15 = outlined retain of BluetoothScanner.Device(a1);
  v29[0] = v14(v15);
  uint64_t v16 = swift_allocObject(&unk_1000CB018, 24LL, 7LL);
  swift_weakInit(v16 + 16);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  uint64_t v18 = lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  uint64_t v19 = Publisher<>.sink(receiveValue:)( partial apply for closure #1 in NearbyRangingFilter.init(scannerDevice:config:),  v16,  v17,  v18);
  swift_release(v16);
  swift_release(v29[0]);
  swift_beginAccess(v4 + 168, v29, 33LL, 0LL);
  AnyCancellable.store(in:)(v4 + 168);
  swift_endAccess(v29);
  uint64_t v20 = swift_release(v19);
  v29[0] = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v4 + 32)) + 0xB0LL))(v20);
  uint64_t v21 = swift_allocObject(&unk_1000CB018, 24LL, 7LL);
  swift_weakInit(v21 + 16);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<NearbySession.RangedDevice?, Never>);
  uint64_t v23 = lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type CurrentValueSubject<NearbySession.RangedDevice?, Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<NearbySession.RangedDevice?, Never>);
  uint64_t v24 = Publisher<>.sink(receiveValue:)( partial apply for closure #2 in NearbyRangingFilter.init(scannerDevice:config:),  v21,  v22,  v23);
  swift_release(v21);
  swift_release(v29[0]);
  swift_beginAccess(v4 + 168, v29, 33LL, 0LL);
  AnyCancellable.store(in:)(v4 + 168);
  swift_endAccess(v29);
  swift_release(v24);
  uint64_t v25 = *(void **)(v4 + 32);
  uint64_t v26 = *(void (**)(uint64_t))((swift_isaMask & *v25) + 0xD8LL);
  uint64_t v27 = v25;
  v26(a1);
  outlined release of BluetoothScanner.Device((void *)a1);

  return v4;
}

uint64_t closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(unsigned __int8 *a1, uint64_t a2)
{
  void (*v14)(uint64_t *__return_ptr);
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  void v18[11];
  __int128 v19;
  __int128 v20;
  int v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v17, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Log.host);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      __int128 v10 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)__int128 v10 = 67109120;
      LODWORD(v18[0]) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, (char *)v18 + 4, v10 + 4, v10 + 8);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RangingSession isRunning: %{BOOL}d", v10, 8u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)v5;
    if (v2)
    {
      uint64_t v12 = (*(uint64_t (**)(void))(v11 + 128))();
      uint64_t v13 = swift_release(v12);
      if (v12) {
        return swift_release(v5);
      }
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v5 + 152LL))(v18, v13);
      uint64_t v20 = v19;
      __int128 v14 = (void (*)(uint64_t *__return_ptr))v19;
      swift_retain();
      v14(&v16);
      outlined release of IgnoreHashable<IgnoreEquatable<()>>((uint64_t)&v20);
      outlined release of BluetoothScanner.Device(v18);
      uint64_t v15 = v16;
      uint64_t v11 = *(void *)v5;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    (*(void (**)(uint64_t))(v11 + 136))(v15);
    return swift_release(v5);
  }

  return result;
}

uint64_t closure #2 in NearbyRangingFilter.init(scannerDevice:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for NearbyRangingFilter();
    unint64_t v6 = lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter();
    uint64_t v7 = ObservableObject<>.objectWillChange.getter(v5, v6);
    ObservableObjectPublisher.send()();
    swift_release(v4);
    return swift_release(v7);
  }

  return result;
}

void *NearbyRangingFilter.deinit()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = (void *)v0[4];
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0LL))();

  swift_bridgeObjectRelease(v1[6]);
  swift_release(v1[7]);
  uint64_t v4 = (void *)v1[11];
  uint64_t v3 = v1[12];
  uint64_t v5 = v1[13];
  uint64_t v6 = v1[17];
  uint64_t v7 = v1[20];
  swift_bridgeObjectRelease(v1[9]);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v1[21]);
  return v1;
}

uint64_t NearbyRangingFilter.__deallocating_deinit()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = (void *)v0[4];
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0LL))();

  swift_bridgeObjectRelease(v1[6]);
  swift_release(v1[7]);
  uint64_t v4 = (void *)v1[11];
  uint64_t v3 = v1[12];
  uint64_t v5 = v1[13];
  uint64_t v6 = v1[17];
  uint64_t v7 = v1[20];
  swift_bridgeObjectRelease(v1[9]);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v1[21]);
  return swift_deallocClassInstance(v1, 176LL, 7LL);
}

uint64_t protocol witness for DeviceFilter.init(scannerDevice:config:) in conformance NearbyRangingFilter( uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 216))(a1, *a2, *((void *)a2 + 1));
}

uint64_t protocol witness for DeviceFilter.handle(updatedScannerDevice:) in conformance NearbyRangingFilter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t protocol witness for DeviceFilter.showDevice.getter in conformance NearbyRangingFilter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

__n128 protocol witness for DeviceFilter.device.getter in conformance NearbyRangingFilter@<Q0>( uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v1 + 152LL))(v6);
  __int128 v3 = v6[5];
  *(_OWORD *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v6[4];
  *(_OWORD *)(a1 + 80) = v3;
  *(void *)(a1 + 96) = v7;
  __int128 v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NearbyRangingFilter@<X0>( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbyRangingFilter();
  uint64_t result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003E834()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(unsigned __int8 *a1)
{
  return closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(a1, v1);
}

uint64_t partial apply for closure #2 in NearbyRangingFilter.init(scannerDevice:config:)(uint64_t a1)
{
  return closure #2 in NearbyRangingFilter.init(scannerDevice:config:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode;
  if (!lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyRangingFilter.Config.Mode,  &type metadata for NearbyRangingFilter.Config.Mode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for NearbyRangingFilter( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter;
  if (!lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter)
  {
    uint64_t v1 = type metadata accessor for NearbyRangingFilter();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NearbyRangingFilter, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter);
  }

  return result;
}

uint64_t type metadata accessor for NearbyRangingFilter()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService19NearbyRangingFilter);
}

void *associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NearbyRangingFilter()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10003E984@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10003E9B4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

__n128 sub_10003E9E4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 152LL))(v6);
  __int128 v3 = v6[5];
  *(_OWORD *)(a2 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(void *)(a2 + 96) = v7;
  __int128 v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_10003EA48(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v2;
  uint64_t v8 = *(void *)(a1 + 96);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  void v7[3] = v4;
  uint64_t v5 = *(uint64_t (**)(_OWORD *))(**(void **)a2 + 160LL);
  outlined retain of BluetoothScanner.Device((uint64_t)v7);
  return v5(v7);
}

uint64_t sub_10003EAA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10003EAD4(void *a1, uint64_t a2)
{
  __int128 v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyRangingFilter.Config(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyRangingFilter.Config( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbyRangingFilter.Config()
{
  return &type metadata for NearbyRangingFilter.Config;
}

uint64_t storeEnumTagSinglePayload for NearbyRangingFilter.Config.Mode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10003EBF0 + 4 * byte_1000ABF65[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003EC24 + 4 * byte_1000ABF60[v4]))();
}

uint64_t sub_10003EC24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003EC2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003EC34LL);
  }
  return result;
}

uint64_t sub_10003EC40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003EC48LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_10003EC4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003EC54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyRangingFilter.Config.Mode()
{
  return &type metadata for NearbyRangingFilter.Config.Mode;
}

uint64_t outlined release of IgnoreHashable<IgnoreEquatable<()>>(uint64_t a1)
{
  return a1;
}

uint64_t Log.client.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for client,  (uint64_t)static Log.client,  (uint64_t)one-time initialization function for client);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  void v4[2] = a2;
  type metadata accessor for Optional(0LL, a2);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:),  (uint64_t)v4,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for String,  v2,  (uint64_t)v5);
  if (v5[1]) {
    return v5[0];
  }
  else {
    return 7104878LL;
  }
}

uint64_t Log.default.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for default,  (uint64_t)static Log.default,  (uint64_t)one-time initialization function for default);
}

uint64_t Log.client.unsafeMutableAddressor(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return __swift_project_value_buffer(v4, a2);
}

uint64_t Log.host.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for host,  (uint64_t)static Log.host,  (uint64_t)one-time initialization function for host);
}

uint64_t Log.group.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for group,  (uint64_t)static Log.group,  (uint64_t)one-time initialization function for group);
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.default, 0x746C7561666544LL, 0xE700000000000000LL);
}

uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for default,  (uint64_t)static Log.default,  (uint64_t)one-time initialization function for default,  a1);
}

uint64_t one-time initialization function for client(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.client, 0x746E65696C43LL, 0xE600000000000000LL);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for client,  (uint64_t)static Log.client,  (uint64_t)one-time initialization function for client,  a1);
}

uint64_t static Log.default.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.host, 1953722184LL, 0xE400000000000000LL);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for host,  (uint64_t)static Log.host,  (uint64_t)one-time initialization function for host,  a1);
}

uint64_t one-time initialization function for firewall(uint64_t a1)
{
  return one-time initialization function for default( a1,  static Log.firewall,  0x6C6C617765726946LL,  0xE800000000000000LL);
}

uint64_t Log.firewall.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for firewall,  (uint64_t)static Log.firewall,  (uint64_t)one-time initialization function for firewall);
}

uint64_t static Log.firewall.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for firewall,  (uint64_t)static Log.firewall,  (uint64_t)one-time initialization function for firewall,  a1);
}

uint64_t one-time initialization function for service(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.service, 0x65636976726553LL, 0xE700000000000000LL);
}

uint64_t Log.service.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for service,  (uint64_t)static Log.service,  (uint64_t)one-time initialization function for service);
}

uint64_t static Log.service.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for service,  (uint64_t)static Log.service,  (uint64_t)one-time initialization function for service,  a1);
}

uint64_t one-time initialization function for group(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.group, 0x70756F7247LL, 0xE500000000000000LL);
}

uint64_t static Log.group.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for group,  (uint64_t)static Log.group,  (uint64_t)one-time initialization function for group,  a1);
}

uint64_t one-time initialization function for abcReporter(uint64_t a1)
{
  return one-time initialization function for default( a1,  static Log.abcReporter,  0x726F706552434241LL,  0xEB00000000726574LL);
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000027LL, 0x80000001000B0510LL, a3, a4);
}

uint64_t Log.abcReporter.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor( &one-time initialization token for abcReporter,  (uint64_t)static Log.abcReporter,  (uint64_t)one-time initialization function for abcReporter);
}

uint64_t static Log.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter( &one-time initialization token for abcReporter,  (uint64_t)static Log.abcReporter,  (uint64_t)one-time initialization function for abcReporter,  a1);
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t result = String.init<A>(reflecting:)(v6, a2);
  *a3 = result;
  a3[1] = v9;
  return result;
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a2;
  uint64_t v30 = a4;
  uint64_t v29 = a1;
  uint64_t v26 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1, a2);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v10, v16);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v23 + 16))(v22, v6);
  uint64_t v24 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v22, v14);
    v29(v19, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27, v12, v26);
    }
    uint64_t v24 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(a6, v24, 1LL);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }

  type metadata accessor for NearbyGroupMember(0LL);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }

      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
      return v12 & 1;
    }

    goto LABEL_11;
  }

  char v12 = 1;
  return v12 & 1;
}

void *NearbyGroupHost.remoteJoinReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyGroupHost.remoteJoinReuseIdentifier;
}

unint64_t static NearbyGroupHost.remoteJoinReuseIdentifier.getter()
{
  return 0xD000000000000016LL;
}

void *NearbyGroupHost.hostedReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyGroupHost.hostedReuseIdentifier;
}

unint64_t static NearbyGroupHost.hostedReuseIdentifier.getter()
{
  return 0xD000000000000012LL;
}

uint64_t NearbyGroupHost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

id NearbyGroupHost.listener.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener));
}

id NearbyGroupHost.endpoint.getter()
{
  return  [*(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener) endpoint];
}

id NearbyGroupHost.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
}

uint64_t property wrapper backing initializer of NearbyGroupHost.members(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t key path getter for NearbyGroupHost.members : NearbyGroupHost@<X0>( void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB0LL))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyGroupHost.members : NearbyGroupHost(void *a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xB8LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t NearbyGroupHost.members.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC0B8);
  uint64_t v2 = swift_getKeyPath(&unk_1000AC0E0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10003F77C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB0LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10003F7BC(void *a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xB8LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t NearbyGroupHost.members.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC0B8);
  uint64_t v4 = swift_getKeyPath(&unk_1000AC0E0);
  uint64_t v6 = a1;
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t (*NearbyGroupHost.members.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC0B8);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000AC0E0);
  void v3[5] = v5;
  void v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyGroupHost.$members : NearbyGroupHost(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))((swift_isaMask & **a2) + 0xD0LL))(v7);
}

uint64_t NearbyGroupHost.$members.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter( &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members,  &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
}

uint64_t NearbyGroupHost.$members.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter( a1,  &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members,  &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
}

uint64_t (*NearbyGroupHost.$members.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t NearbyGroupHost.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of PseudonymProtocol(v3, a1);
}

uint64_t NearbyGroupHost.localMember.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of PseudonymProtocol(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*NearbyGroupHost.localMember.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyGroupHost.localMemberHandle.getter()
{
  (*(void (**)(void *__return_ptr))((swift_isaMask & *v0) + 0xE0LL))(v5);
  uint64_t v1 = v6;
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v5);
  return v3;
}

uint64_t NearbyGroupHost.localMemberToken.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken,  v4,  0LL,  0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t NearbyGroupHost.localMemberToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*NearbyGroupHost.localMemberToken.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t property wrapper backing initializer of NearbyGroupHost.state(char a1)
{
  char v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for NearbyGroupHost.State);
}

uint64_t key path getter for NearbyGroupHost.state : NearbyGroupHost@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x118LL))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyGroupHost.state : NearbyGroupHost(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x120LL))(*a1);
}

uint64_t NearbyGroupHost.state.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC100);
  uint64_t v2 = swift_getKeyPath(&unk_1000AC128);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10003FDF4@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x118LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10003FE34(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x120LL))(*a1);
}

uint64_t NearbyGroupHost.state.setter(char a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC100);
  uint64_t v4 = swift_getKeyPath(&unk_1000AC128);
  char v6 = a1;
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t (*NearbyGroupHost.state.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC100);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000AC128);
  void v3[5] = v5;
  void v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyGroupHost.$state : NearbyGroupHost(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))((swift_isaMask & **a2) + 0x138LL))(v7);
}

uint64_t NearbyGroupHost.$state.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter( &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state,  &demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
}

uint64_t NearbyGroupHost.$state.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter( a1,  &demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state,  &demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
}

uint64_t (*NearbyGroupHost.$state.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

void NearbyGroupHost.connection.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&one-time initialization token for group, one-time initialization function for group);
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  char v11 = v1;
  char v12 = (void *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v12, v13))
  {

    if (!a1) {
      return;
    }
    goto LABEL_10;
  }

  uint64_t v27 = a1;
  uint64_t v14 = swift_slowAlloc(22LL, -1LL);
  id v15 = (char **)swift_slowAlloc(8LL, -1LL);
  uint64_t v16 = swift_slowAlloc(32LL, -1LL);
  uint64_t v31 = v16;
  *(_DWORD *)uint64_t v14 = 138412546;
  uint64_t v29 = v11;
  uint64_t v17 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 4, v14 + 12);
  *id v15 = v11;

  *(_WORD *)(v14 + 12) = 2080;
  uint64_t v18 = (void **)&v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection];
  swift_beginAccess( &v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection],  &v29,  0LL,  0LL);
  BOOL v19 = *v18;
  if (*v18)
  {
    uint64_t v28 = (uint64_t)*v18;
    uint64_t v20 = type metadata accessor for NearbyGroupHostConnection(0LL);
    id v21 = v19;
    uint64_t v22 = String.init<A>(reflecting:)(&v28, v20);
    unint64_t v24 = v23;
  }

  else
  {
    unint64_t v24 = 0xE300000000000000LL;
    uint64_t v22 = 7104878LL;
  }

  uint64_t v25 = v27;
  uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 14, v14 + 22);

  swift_bridgeObjectRelease(v24);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  v13,  "%@ changed XPC connection to %s",  (uint8_t *)v14,  0x16u);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy(v15, 1LL, v26);
  swift_slowDealloc(v15, -1LL, -1LL);
  swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v16, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  if (v25) {
LABEL_10:
  }
    dispatch thunk of XPCHostConnection.destroyConnection()();
}

void *NearbyGroupHost.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection,  v5,  0LL,  0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void NearbyGroupHost.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection);
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection,  v6,  1LL,  0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;
  NearbyGroupHost.connection.didset((uint64_t)v4);
}

void (*NearbyGroupHost.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection;
  v3[4] = v1;
  void v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1LL, 0LL);
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return NearbyGroupHost.connection.modify;
}

void NearbyGroupHost.connection.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24LL);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  id v7 = *(void **)(v6 + v5);
  *(void *)(v6 + specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)( featureID._countAndFlagsBits,  (uint64_t)featureID._object,  reusable, v5) = *v4;
  if ((a2 & 1) != 0)
  {
    id v8 = v3;
    NearbyGroupHost.connection.didset((uint64_t)v7);

    id v7 = *v4;
  }

  else
  {
    id v9 = v3;
    NearbyGroupHost.connection.didset((uint64_t)v7);
  }

  free(v2);
}

uint64_t NearbyGroupHost.incomingMessageListenerTask.getter()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask,  v3,  0LL,  0LL);
  return swift_retain(*v1);
}

uint64_t NearbyGroupHost.incomingMessageListenerTask.setter(uint64_t a1)
{
  id v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_release(v4);
}

uint64_t (*NearbyGroupHost.incomingMessageListenerTask.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHost.cancellables.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t NearbyGroupHost.cancellables.setter(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*NearbyGroupHost.cancellables.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHost.__allocating_init(remoteInitialization:idsService:localMemberToken:)( uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = a4;
  uint64_t v86 = a3;
  uint64_t v83 = type metadata accessor for UUID(0LL);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v7);
  uint64_t v84 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v9 = *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0LL) + 20);
  uint64_t v89 = a1;
  uint64_t v81 = v9;
  uint64_t v10 = *(void *)(a1 + v9);
  swift_bridgeObjectRetain(v10);
  char v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy44com_apple_SharePlay_NearbyInvitationsService0H19GroupHostIDSServiceC12MessageEventO6MemberVG_SSs5NeverOTg508_s44com_e1_fg1_hi10Service0E9kl37C20remoteInitialization03idsG016localp14TokenAcA0ehI10m3C12nO87O06RemotehK0V_AHS2ScSgtKcfcSSAJ0N0Vcfu_32fa9956de96d0eac289a8d33e15b59ca7AOSSTf3nnnpk_nTf1cn_n(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v94 = specialized Set.init<A>(_:)((uint64_t)v12);
  swift_bridgeObjectRelease(v12);
  id v88 = a2;
  os_log_type_t v13 = &a2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
  unint64_t v92 = (unint64_t)"InvitationsProviderDataSource";
  unint64_t v93 = 0x80000001000AF400LL;
  unint64_t v90 = (unint64_t)"RapportBrowseAgent";
  unint64_t v91 = 0x80000001000AF8F0LL;
  while (1)
  {
    uint64_t v14 = *((void *)v13 + 3);
    uint64_t v15 = *((void *)v13 + 4);
    uint64_t v16 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v99 = v14;
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v100 = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16LL))( boxed_opaque_existential_1,  v16,  v14);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v14, v17);
    if (v20)
    {
      uint64_t v21 = v19;
      uint64_t v14 = v20;
      if (v19 == 0xD000000000000030LL && v20 == v93
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000030LL, v92 | 0x8000000000000000LL, v19, v20, 0LL) & 1) != 0
        || v21 == 0xD000000000000032LL && v14 == v91)
      {
        swift_bridgeObjectRelease(v14);
LABEL_9:
        uint64_t v14 = 0xE800000000000000LL;
        uint64_t v22 = 0x72656C676E617257LL;
        goto LABEL_13;
      }

      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032LL, v90 | 0x8000000000000000LL, v21, v14, 0LL);
      uint64_t v19 = swift_bridgeObjectRelease(v14);
      if ((v23 & 1) != 0) {
        goto LABEL_9;
      }
    }

    if ((_TUIsInternalInstall(v19) & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v14 = 0xE700000000000000LL;
    uint64_t v22 = 0x6C6F6F74736469LL;
LABEL_13:
    specialized NearbyGroupServerBag.numericConfig(for:)(0);
    uint64_t v25 = v24;
    [v24 doubleValue];
    uint64_t v27 = v26;

    specialized NearbyGroupServerBag.numericConfig(for:)(2);
    uint64_t v29 = v28;
    [v28 doubleValue];
    uint64_t v31 = v30;

    *(void *)&__int128 v101 = v22;
    *((void *)&v101 + 1) = v14;
    uint64_t v102 = v27;
    uint64_t v103 = v31;
    unint64_t v104 = 0xD000000000000016LL;
    unint64_t v105 = 0x80000001000B0540LL;
    uint64_t v32 = specialized static Pseudonym.existing(for:configuration:)((uint64_t)v98, &v101);
    if (v4) {
      break;
    }
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v14);
    __swift_destroy_boxed_opaque_existential_0Tm(v98);
    if (v106)
    {
      uint64_t v34 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
      unint64_t v36 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v35 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v36 >= v35 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
      }
      uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v33);
      specialized Array._endMutation()(v37);
    }

    swift_beginAccess(v33 + 16, v95, 0LL, 0LL);
    id v38 = [*(id *)(v33 + 16) URI];
    id v39 = [v38 prefixedURI];

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v42 = v41;

    LOBYTE(v40) = specialized Set.contains(_:)(v40, v42, v94);
    swift_bridgeObjectRelease(v42);
    if ((v40 & 1) != 0)
    {
      uint64_t v56 = one-time initialization token for host;
      swift_retain();
      if (v56 != -1) {
        swift_once(&one-time initialization token for host, one-time initialization function for host);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v57, (uint64_t)static Log.host);
      uint64_t v58 = swift_retain_n(v33);
      os_log_type_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v62 = swift_slowAlloc(32LL, -1LL);
        v98[0] = v62;
        *(_DWORD *)uint64_t v61 = 136446210;
        unint64_t v93 = (unint64_t)(v61 + 4);
        swift_retain();
        uint64_t v63 = Pseudonym.description.getter();
        unint64_t v65 = v64;
        swift_release(v33);
        uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v93, v61 + 12);
        swift_release_n(v33);
        swift_bridgeObjectRelease(v65);
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Found existing pseudonym matching members: %{public}s",  v61,  0xCu);
        swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_bridgeObjectRelease(v94);
        swift_release(v33);
      }

      else
      {
        swift_bridgeObjectRelease(v94);

        swift_release_n(v33);
      }

      uint64_t v66 = v106;
      uint64_t v106 = 0LL;
      swift_bridgeObjectRelease(v66);
      swift_retain();
      Pseudonym.markUsed()();
      uint64_t v67 = v84;
      uint64_t v68 = v89;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v84, v89, v83);
      uint64_t v69 = *(void *)(v68 + v81);
      swift_bridgeObjectRetain(v69);
      os_log_type_t v71 = specialized Sequence.compactMap<A>(_:)(v70);
      swift_bridgeObjectRelease(v69);
      uint64_t v72 = specialized Set.init<A>(_:)((uint64_t)v71);
      swift_bridgeObjectRelease(v71);
      uint64_t v99 = type metadata accessor for Pseudonym();
      uint64_t v100 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym,  (uint64_t (*)(uint64_t))type metadata accessor for Pseudonym,  (uint64_t)&protocol conformance descriptor for Pseudonym);
      v98[0] = v33;
      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t *, id, uint64_t, uint64_t))(v85 + 400))( v67,  v72,  v98,  v88,  v86,  v87);
      swift_release(v33);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v68,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      swift_bridgeObjectRelease(v106);
      return v14;
    }

    swift_release(v33);
  }

  swift_bridgeObjectRelease(v14);
  swift_errorRelease(v4);
LABEL_21:
  __swift_destroy_boxed_opaque_existential_0Tm(v98);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v43, (uint64_t)static Log.host);
  uint64_t v44 = v94;
  swift_bridgeObjectRetain(v94);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v49 = static os_log_type_t.error.getter(v46, v47, v48);
  if (os_log_type_enabled(v46, v49))
  {
    uint64_t v50 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(64LL, -1LL);
    uint64_t v97 = v51;
    *(_DWORD *)uint64_t v50 = 136446466;
    swift_beginAccess(&v106, v98, 0LL, 0LL);
    if (v106)
    {
      uint64_t v96 = v106;
      swift_bridgeObjectRetain(v106);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Pseudonym]);
      uint64_t v53 = String.init<A>(reflecting:)(&v96, v52);
      unint64_t v55 = v54;
    }

    else
    {
      unint64_t v55 = 0xE300000000000000LL;
      uint64_t v53 = 7104878LL;
    }

    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v50 + 12) = 2082;
    uint64_t v14 = v50 + 14;
    __n128 v73 = swift_bridgeObjectRetain(v44);
    uint64_t v74 = Set.description.getter(v73);
    unint64_t v76 = v75;
    swift_bridgeObjectRelease(v44);
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease_n(v44, 2LL);
    swift_bridgeObjectRelease(v76);
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v49,  "Exhausted existing pseudonyms: %{public}s and couldn't find one matching members: %{public}s",  (uint8_t *)v50,  0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v44, 2LL);
  }

  unint64_t v77 = lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
  uint64_t v78 = swift_allocError(&type metadata for NearbyGroupHost.Errors, v77, 0LL, 0LL);
  *id v79 = 1;
  swift_willThrow(v78);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v86, v87);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v89,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  swift_bridgeObjectRelease(v106);
  return v14;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy44com_apple_SharePlay_NearbyInvitationsService0H19GroupHostIDSServiceC12MessageEventO6MemberVG_SSs5NeverOTg508_s44com_e1_fg1_hi10Service0E9kl37C20remoteInitialization03idsG016localp14TokenAcA0ehI10m3C12nO87O06RemotehK0V_AHS2ScSgtKcfcSSAJ0N0Vcfu_32fa9956de96d0eac289a8d33e15b59ca7AOSSTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = (void *)specialized Set.startIndex.getter(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6) {
      goto LABEL_14;
    }
    char v17 = v8;
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 32 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain(v11);
    if (v13 >= v12 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    uint64_t v14 = (char *)&_swiftEmptyArrayStorage[2 * v13];
    *((void *)v14 + 4) = v10;
    *((void *)v14 + 5) = v11;
    uint64_t result = (void *)specialized _NativeSet.index(after:)(v4, v6, v17 & 1, a1);
    uint64_t v4 = (uint64_t)result;
    uint64_t v6 = v15;
    char v8 = v16 & 1;
    if (!--v1)
    {
      outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 32 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = v14[3];
    objc_allocWithZone((Class)type metadata accessor for NearbyGroupMember(0LL));
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v16);
    uint64_t v19 = NearbyGroupMember.init(handle:tokenID:)(v15, v16, v17, v18);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v21 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v20 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v21 >= v20 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
    }
    uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    uint64_t result = (void *)specialized Array._endMutation()(v22);
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v15 = *(uint64_t (**)(void))((swift_isaMask & *v14) + 0x1C8LL);
    uint64_t v16 = v14;
    uint64_t v17 = v15();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v19 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v18 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v19 >= v18 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
    }
    unint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
    uint64_t result = (void *)specialized Array._endMutation()(v20);
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v5 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

        uint64_t v16 = 0;
        return v16 & 1;
      }
    }

    else if (v29 >> 60 != 15)
    {
      outlined copy of Data?(v25, v26);
      outlined copy of Data?(v28, v29);
      specialized static Data.== infix(_:_:)(v25, v26);
      uint64_t v41 = v31;
      outlined consume of Data?(v28, v29);
      outlined consume of Data?(v25, v26);
      if ((v41 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }

    outlined copy of Data?(v25, v26);
    outlined copy of Data?(v28, v29);
    outlined consume of Data?(v25, v26);
    outlined consume of Data?(v28, v29);
    goto LABEL_20;
  }

  return v16 & 1;
}

  ;
}

    unint64_t v5 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[29] = a4;
  v5[30] = v4;
  v5[27] = a2;
  v5[28] = a3;
  v5[26] = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[31] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[32] = v7;
  v5[33] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:), 0LL, 0LL);
}

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = NearbyGroupCreationRequest.id.getter();
  v0[34] = NearbyGroupCreationRequest.members.getter(v2);
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                 + 24);
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                 + 32);
  unint64_t v5 = __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service),  v3);
  v0[22] = v3;
  v0[23] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 19);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))(boxed_opaque_existential_1, v5, v3);
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v0 + 19, 1, (uint64_t)(v0 + 8));
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  v0[35] = v8;
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  outlined init with take of String?((uint64_t)(v0 + 12), (uint64_t)(v0 + 24));
  outlined release of String?((uint64_t)(v0 + 24));
  v0[2] = v7;
  v0[3] = v8;
  v0[4] = v9;
  v0[5] = v10;
  v0[6] = 0xD000000000000012LL;
  v0[7] = 0x80000001000B0560LL;
  int64_t v11 = (void *)swift_task_alloc(unk_1000D5504);
  v0[36] = v11;
  *int64_t v11 = v0;
  v11[1] = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  return v13((uint64_t)(v0 + 19), (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t);
  id v9;
  void *v10;
  void (*v11)(void);
  void *v12;
  void *v14;
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  unint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v7 = *(void **)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v14 = *(void **)(v0 + 208);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 152));
  *(void *)(v0 + 136) = type metadata accessor for Pseudonym();
  *(void *)(v0 + 144) = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym,  (uint64_t (*)(uint64_t))type metadata accessor for Pseudonym,  (uint64_t)&protocol conformance descriptor for Pseudonym);
  *(void *)(v0 + 112) = v1;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t))(v4 + 400);
  uint64_t v9 = v7;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v6, v5);
  uint64_t v10 = (void *)v8(v2, v3, v0 + 112, v9, v6, v5);
  int64_t v11 = *(void (**)(void))((swift_isaMask & *v10) + 0x1C0LL);
  unint64_t v12 = v10;
  v11();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v6, v5);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void *))(v0 + 8))(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  swift_bridgeObjectRelease(*(void *)(v0 + 280));
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v6 = *(void **)(v0 + 208);
  unint64_t v5 = *(void **)(v0 + 216);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 8LL))(v2, *(void *)(v0 + 248));
  swift_bridgeObjectRelease(v1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v4, v3);

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 152));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 288);
  *(void *)(*v2 + 296) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 280));
    *(void *)(v4 + 304) = a1;
    uint64_t v6 = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

char *NearbyGroupHost.__allocating_init(id:members:localMember:idsService:localMemberToken:)( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(a1, a2, a3, a4, a5, a6);
}

char *NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v154 = a6;
  uint64_t v156 = (uint64_t (*)(uint64_t))a5;
  id v145 = a4;
  uint64_t v157 = a3;
  uint64_t v140 = a2;
  uint64_t v158 = a1;
  uint64_t ObjectType = swift_getObjectType(v6);
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151, v8);
  uint64_t v149 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v147 = v13;
  v148 = (char *)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v14, v15);
  uint64_t v155 = (uint64_t)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v144 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v143 = *(void (***)(char *, void, uint64_t))(v144 - 8);
  __chkstk_darwin(v144, v17);
  uint64_t v142 = (char *)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v140 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v140 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v140 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = &v7[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken];
  *(void *)uint64_t v32 = 0LL;
  *((void *)v32 + 1) = 0LL;
  uint64_t v33 = &v7[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state];
  LOBYTE(v165) = 0;
  uint64_t v34 = v7;
  Published.init(initialValue:)(&v165, &type metadata for NearbyGroupHost.State);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v33, v31, v27);
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection] = 0LL;
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask] = 0LL;
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables] = &_swiftEmptySetSingleton;
  uint64_t v152 = v11;
  unint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v153 = v10;
  uint64_t v146 = v35;
  v35(&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id], v158, v10);
  id v36 = [(id)objc_opt_self(NSXPCListener) anonymousListener];
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener] = v36;
  swift_beginAccess( &v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members],  &v165,  33LL,  0LL);
  uint64_t v163 = v140;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
  Published.init(initialValue:)(&v163, v37);
  swift_endAccess(&v165);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v165 = (void *)_typeName(_:qualified:)(ObjectType, 0LL);
  uint64_t v166 = v38;
  v39._uint64_t countAndFlagsBits = 46LL;
  v39._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v39);
  v41._uint64_t countAndFlagsBits = UUID.uuidString.getter(v40);
  uint64_t object = v41._object;
  String.append(_:)(v41);
  uint64_t v43 = swift_bridgeObjectRelease(object);
  uint64_t v44 = v165;
  uint64_t v45 = v166;
  static DispatchQoS.unspecified.getter(v43);
  uint64_t v165 = &_swiftEmptyArrayStorage;
  uint64_t v46 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v48 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v165, v47, v48, v19, v46);
  os_log_type_t v49 = v142;
  v143[13](v142, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v144);
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v44, v45, v26, v22, v49, 0LL);
  uint64_t v50 = v145;
  *(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_idsService] = v145;
  uint64_t v51 = v156;
  outlined init with copy of PseudonymProtocol( (uint64_t)v157,  (uint64_t)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember]);
  id v145 = v50;

  uint64_t v52 = (objc_class *)type metadata accessor for NearbyGroupHost(0LL);
  v159.receiver = v34;
  v159.super_class = v52;
  uint64_t v144 = (uint64_t)v52;
  uint64_t v53 = objc_msgSendSuper2(&v159, "init");
  unint64_t v54 = v53;
  if (v51)
  {
    unint64_t v55 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v53) + 0xF8LL);
    uint64_t v56 = v53;
    uint64_t v57 = v154;
    uint64_t v58 = outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)v51,  v154);
    uint64_t v59 = (uint64_t)v51;
    uint64_t v60 = v55(v58);
    uint64_t v62 = v61;
    uint64_t v63 = v51(v60);
    uint64_t v65 = v64;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v59, v57);
    swift_bridgeObjectRelease(v62);
    uint64_t v66 = (void *)((char *)v56
                   + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
    swift_beginAccess( (char *)v56 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken,  &v165,  1LL,  0LL);
    uint64_t v67 = v66[1];
    uint64_t *v66 = v63;
    v66[1] = v65;
    goto LABEL_16;
  }

  uint64_t v68 = v53;
  if (_TUIsInternalInstall(v68)
    && (v165 = 0LL, IMGetConferenceSettings(0LL, &v165, 0LL, 0LL, 0LL), (uint64_t v69 = v165) != 0LL))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
    uint64_t v71 = v70;
    uint64_t v143 = v69;
  }

  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
    uint64_t v71 = v72;
    uint64_t v143 = 0LL;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(APSConnectionOverrideNamedDelegatePort);
  uint64_t v74 = v73;
  unint64_t v75 = *(void **)((char *)v68 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  id v76 = objc_allocWithZone(&OBJC_CLASS___APSConnection);
  id v77 = v75;
  NSString v78 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v71);
  NSString v79 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v74);
  id v80 = [v76 initWithEnvironmentName:v78 namedDelegatePort:v79 queue:v77];

  if (!v80)
  {
    Class isa = 0LL;
    goto LABEL_11;
  }

  uint64_t v81 = (objc_class *)[v80 publicToken];
  Class isa = v81;
  if (!v81)
  {
LABEL_11:
    uint64_t v83 = 0LL;
    unint64_t v85 = 0xF000000000000000LL;
    goto LABEL_12;
  }

  uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
  unint64_t v85 = v84;

  outlined copy of Data._Representation(v83, v85);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v81 = (objc_class *)outlined consume of Data._Representation(v83, v85);
LABEL_12:
  (*(void (**)(objc_class *))((swift_isaMask & *v68) + 0xF8LL))(v81);
  uint64_t v87 = v86;
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v87);
  uint64_t v89 = (void *)IDSCopyIDForTokenWithID(isa, v88);

  if (v89)
  {
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v92 = v91;

    outlined consume of Data?(v83, v85);
  }

  else
  {

    outlined consume of Data?(v83, v85);
    uint64_t v90 = 0LL;
    uint64_t v92 = 0LL;
  }

  unint64_t v93 = (void *)((char *)v68
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
  swift_beginAccess(v93, &v165, 1LL, 0LL);
  uint64_t v67 = v93[1];
  *unint64_t v93 = v90;
  v93[1] = v92;

LABEL_16:
  swift_bridgeObjectRelease(v67);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v94 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v94, (uint64_t)static Log.host);
  unint64_t v95 = v54;
  uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v99 = swift_slowAlloc(32LL, -1LL);
    v161 = (void *)v99;
    *(_DWORD *)uint64_t v98 = 136315138;
    uint64_t v100 = (uint64_t *)&v95[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken];
    swift_beginAccess( &v95[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken],  v160,  0LL,  0LL);
    uint64_t v101 = v100[1];
    if (v101)
    {
      uint64_t v163 = *v100;
      uint64_t v164 = v101;
      swift_bridgeObjectRetain(v101);
      uint64_t v102 = String.init<A>(reflecting:)(&v163, &type metadata for String);
      unint64_t v104 = v103;
    }

    else
    {
      unint64_t v104 = 0xE300000000000000LL;
      uint64_t v102 = 7104878LL;
    }

    uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, (uint64_t *)&v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease(v104);

    _os_log_impl((void *)&_mh_execute_header, v96, v97, "Provisioning token for localMember %s", v98, 0xCu);
    swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1LL, -1LL);
    swift_slowDealloc(v98, -1LL, -1LL);
  }

  else
  {
  }

  id v105 = [objc_allocWithZone(NSLock) init];
  [v105 lock];
  uint64_t v106 = v95;
  uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
  os_log_type_t v108 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v110 = swift_slowAlloc(32LL, -1LL);
    uint64_t v163 = v110;
    *(_DWORD *)uint64_t v109 = 136315138;
    v161 = v106;
    uint64_t v111 = v106;
    uint64_t v112 = String.init<A>(reflecting:)(&v161, v144);
    unint64_t v114 = v113;
    v161 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, &v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162, v109 + 4, v109 + 12);
    swift_bridgeObjectRelease(v114);

    _os_log_impl((void *)&_mh_execute_header, v107, v108, "%s Setting up incomingMessageListener", v109, 0xCu);
    swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1LL, -1LL);
    swift_slowDealloc(v109, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v115 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56LL))(v155, 1LL, 1LL, v115);
  uint64_t v116 = swift_allocObject(&unk_1000CB220, 24LL, 7LL);
  swift_unknownObjectWeakInit(v116 + 16, v106);
  uint64_t v117 = v148;
  uint64_t v118 = v153;
  v146(v148, v158, v153);
  uint64_t v119 = v152;
  uint64_t v120 = *(unsigned __int8 *)(v152 + 80);
  uint64_t v121 = (v120 + 48) & ~v120;
  unint64_t v122 = (v147 + v121 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v123 = (char *)swift_allocObject(&unk_1000CB248, v122 + 8, v120 | 7);
  *((void *)v123 + 2) = 0LL;
  *((void *)v123 + 3) = 0LL;
  *((void *)v123 + 4) = v105;
  uint64_t v124 = v105;
  uint64_t v125 = v145;
  *((void *)v123 + 5) = v145;
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(&v123[v121], v117, v118);
  *(void *)&v123[v122] = v116;
  id v126 = v125;
  id v127 = v124;
  uint64_t v128 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v155,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  (uint64_t)v123);
  uint64_t v129 = (uint64_t *)&v106[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask];
  swift_beginAccess( &v106[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask],  &v163,  1LL,  0LL);
  uint64_t v130 = *v129;
  *uint64_t v129 = v128;
  swift_release(v130);
  [v127 lock];
  closure #2 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(v106);
  id v131 = [v127 unlock];
  id v132 = v149;
  (*(void (**)(id))((swift_isaMask & *(void *)v106) + 0xC8LL))(v131);
  uint64_t v133 = swift_allocObject(&unk_1000CB220, 24LL, 7LL);
  swift_unknownObjectWeakInit(v133 + 16, v106);
  uint64_t v134 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Published<Set<NearbyGroupMember>>.Publisher and conformance Published<A>.Publisher,  &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v135 = v151;
  uint64_t v136 = Publisher<>.sink(receiveValue:)( partial apply for closure #3 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  v133,  v151,  v134);
  swift_release(v133);
  (*(void (**)(char *, uint64_t))(v150 + 8))(v132, v135);
  uint64_t v137 = &v106[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables];
  swift_beginAccess( &v106[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables],  &v161,  33LL,  0LL);
  AnyCancellable.store(in:)(v137);
  swift_endAccess(&v161);
  swift_release(v136);
  uint64_t v138 = *(void **)&v106[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener];
  [v138 setDelegate:v106];
  [v138 resume];

  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v156, v154);
  __swift_destroy_boxed_opaque_existential_0Tm(v157);
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v158, v118);
  return v106;
}

uint64_t closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[19] = swift_task_alloc(v8);
  v7[20] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0LL);
  v7[21] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0LL);
  v7[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[23] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  _BYTE v7[24] = swift_task_alloc(v12);
  v7[25] = swift_task_alloc(v12);
  v7[26] = swift_task_alloc(v12);
  v7[27] = swift_task_alloc(v12);
  v7[28] = swift_task_alloc(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v7[29] = v13;
  v7[30] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 144) + 16LL;
  [*(id *)(v0 + 120) unlock];
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages);
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v5 = swift_allocObject(v4, 80LL, 7LL);
  swift_retain();
  uint64_t v6 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 24) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = 0LL;
  *(void *)(v5 + 72) = static Subscribers.Demand.none.getter();
  _DWORD *v6 = 0;
  *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v8 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v9 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner,  (uint64_t)&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner);
  Publisher.subscribe<A>(_:)(v0 + 64, v7, v4, v8, v9);
  swift_release(v3);
  *(void *)(v0 + 80) = v5;
  swift_beginAccess(v2, v0 + 40, 0LL, 0LL);
  return swift_task_switch( closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  0LL,  0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = v0[10];
  v0[31] = v1;
  uint64_t v2 = swift_task_alloc(32LL);
  v0[32] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v0 + 10;
  uint64_t v3 = async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[30],  &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(),  v2,  partial apply for specialized closure #1 in _PublisherElements.Iterator.next(),  v1,  0LL,  0LL,  v0[29]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 272LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_task_dealloc(v3);
  return swift_task_switch( closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_s *v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  os_log_type_t v80;
  os_log_s *v81;
  uint64_t v82;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) != 1)
  {
    uint64_t v19 = *(void **)(v1 + *(int *)(v2 + 48));
    uint64_t v20 = outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v1,  *(void *)(v0 + 224),  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    uint64_t v21 = (void *)voucher_copy(v20);
    if (v19)
    {
      uint64_t v22 = v19;
      uint64_t v23 = (void *)voucher_adopt();
    }

    uint64_t v24 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 176);
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( *(void *)(v0 + 224),  v24,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
    uint64_t v27 = *(void *)(v0 + 216);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = *(void *)(v0 + 168);
      uint64_t v29 = *(void *)(v0 + 136);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v27,  v28,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      if ((static UUID.== infix(_:_:)(v28, v29) & 1) == 0
        || (uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 144) + 16LL)) == 0)
      {
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( *(void *)(v0 + 168),  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        if (v21)
        {
          uint64_t v57 = v21;
          uint64_t v58 = (void *)voucher_adopt();
        }

        uint64_t v59 = *(void *)(v0 + 224);

        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v59,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        swift_release(*(void *)(v0 + 80));
        goto LABEL_28;
      }

      uint64_t v31 = (void *)Strong;
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v33 = *(void *)(v0 + 168);
      uint64_t v34 = swift_task_alloc(32LL);
      *(void *)(v34 + swift_weakDestroy(v0 + 16) = v31;
      *(void *)(v34 + 24) = v33;
      OS_dispatch_queue.sync<A>(execute:)( partial apply for closure #1 in closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  v34,  (char *)&type metadata for () + 8);
      unint64_t v35 = *(void *)(v0 + 168);

      swift_task_dealloc(v34);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v35,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      if (v32)
      {
        if (one-time initialization token for group != -1) {
          swift_once(&one-time initialization token for group, one-time initialization function for group);
        }
        id v36 = *(void *)(v0 + 224);
        uint64_t v37 = *(void *)(v0 + 192);
        uint64_t v38 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v38, (uint64_t)static Log.group);
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v36,  v37,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        swift_errorRetain(v32);
        Swift::String v39 = swift_errorRetain(v32);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        uint64_t v43 = static os_log_type_t.error.getter(v40, v41, v42);
        uint64_t v44 = os_log_type_enabled(v40, v43);
        uint64_t v45 = *(void *)(v0 + 192);
        if (v44)
        {
          id v80 = v43;
          uint64_t v81 = v40;
          NSString v78 = (uint64_t *)(v0 + 104);
          uint64_t v47 = *(void *)(v0 + 176);
          uint64_t v46 = *(void *)(v0 + 184);
          uint64_t v48 = *(void *)(v0 + 152);
          os_log_type_t v49 = *(void *)(v0 + 160);
          uint64_t v50 = swift_slowAlloc(22LL, -1LL);
          NSString v79 = swift_slowAlloc(64LL, -1LL);
          *(void *)(v0 + 104) = v79;
          *(_DWORD *)uint64_t v50 = 136315394;
          outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v45,  v49,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v49, 0LL, 1LL, v47);
          outlined init with copy of (String, Any)( v49,  v48,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v48, 1LL, v47) == 1)
          {
            uint64_t v51 = 7104878LL;
            uint64_t v52 = 0xE300000000000000LL;
          }

          else
          {
            uint64_t v70 = *(void *)(v0 + 200);
            uint64_t v69 = *(void *)(v0 + 208);
            uint64_t v71 = *(void *)(v0 + 176);
            outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( *(void *)(v0 + 152),  v69,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
            outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v69,  v70,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
            uint64_t v51 = String.init<A>(reflecting:)(v70, v71);
            uint64_t v52 = v72;
            outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v69,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          }

          uint64_t v73 = *(void *)(v0 + 192);
          outlined destroy of Any?( *(void *)(v0 + 160),  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
          *(void *)(v50 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v78);
          swift_bridgeObjectRelease(v52);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v73,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          *(_WORD *)(v50 + 12) = 2080;
          *(void *)(v0 + 112) = v32;
          swift_errorRetain(v32);
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
          unint64_t v75 = String.init<A>(reflecting:)(v0 + 112, v74);
          id v77 = v76;
          *(void *)(v50 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v78);
          swift_bridgeObjectRelease(v77);
          swift_errorRelease(v32);
          swift_errorRelease(v32);
          _os_log_impl( (void *)&_mh_execute_header,  v81,  v80,  "Failed to handle event: %s, reason: %s",  (uint8_t *)v50,  0x16u);
          swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1LL, -1LL);
          swift_slowDealloc(v50, -1LL, -1LL);

          swift_errorRelease(v32);
          if (!v21) {
            goto LABEL_21;
          }
        }

        else
        {
          swift_errorRelease(v32);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v45,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          swift_errorRelease(v32);
          swift_errorRelease(v32);

          if (!v21) {
            goto LABEL_21;
          }
        }
      }

      else if (!v21)
      {
        goto LABEL_21;
      }
    }

    else
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v27,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      if (!v21)
      {
LABEL_21:
        unint64_t v55 = *(void *)(v0 + 224);

        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v55,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        return swift_task_switch( closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:),  0LL,  0LL);
      }
    }

    uint64_t v53 = v21;
    unint64_t v54 = (void *)voucher_adopt();

    goto LABEL_21;
  }

  uint64_t v3 = swift_release(*(void *)(v0 + 80));
  if ((static Task<>.isCancelled.getter(v3) & 1) == 0)
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v5, (uint64_t)static Log.host);
    uint64_t v6 = swift_retain_n(v4);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    uint64_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 144);
    if (v9)
    {
      uint64_t v11 = v10 + 16;
      unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v82 = v13;
      *(_DWORD *)unint64_t v12 = 136315138;
      swift_beginAccess(v11, v0 + 16, 0LL, 0LL);
      uint64_t v14 = swift_unknownObjectWeakLoadStrong(v11);
      if (v14)
      {
        *(void *)(v0 + 96) = v14;
        uint64_t v15 = type metadata accessor for NearbyGroupHost(0LL);
        uint64_t v16 = String.init<A>(reflecting:)(v0 + 96, v15);
        uint64_t v18 = v17;
      }

      else
      {
        uint64_t v16 = 7104878LL;
        uint64_t v18 = 0xE300000000000000LL;
      }

      uint64_t v60 = *(void *)(v0 + 144);
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v12 + 4, v12 + 12);
      swift_release_n(v60);
      swift_bridgeObjectRelease(v18);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%s stopped listening for incoming messages. This shouldn't ever happen until cancellation.",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v10);
    }
  }

void NearbyGroupHost.handle(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v124 = &v115[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = &v115[-v10];
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v119 = (os_log_s *)&v115[-v14];
  __chkstk_darwin(v13, v15);
  uint64_t v120 = (uint64_t *)&v115[-v16];
  uint64_t v17 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0LL);
  uint64_t v125 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = &v115[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v121 = &v115[-v24];
  uint64_t v26 = __chkstk_darwin(v23, v25);
  unint64_t v122 = &v115[-v27];
  uint64_t v29 = __chkstk_darwin(v26, v28);
  id v126 = &v115[-v30];
  __chkstk_darwin(v29, v31);
  uint64_t v123 = &v115[-v32];
  uint64_t v33 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = &v115[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v38 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v37 = v38;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  id v39 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)(v37);
  (*(void (**)(void *, uint64_t))(v34 + 8))(v37, v33);
  if ((v38 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v128 = v17;
  uint64_t v40 = (uint64_t *)(a1 + *(int *)(v17 + 20));
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  NSString v43 = String._bridgeToObjectiveC()();
  uint64_t v44 = (void *)IDSCopyAddressDestinationForDestination();

  uint64_t v45 = (void *)IDSCopyRawAddressForDestination(v44);
  if (!v45)
  {
    if (one-time initialization token for host == -1)
    {
LABEL_8:
      uint64_t v62 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v62, (uint64_t)static Log.host);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( a1,  (uint64_t)v21,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      uint64_t v63 = v2;
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      int v65 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v64, (os_log_type_t)v65))
      {
        uint64_t v119 = v64;
        LODWORD(v127) = v65;
        uint64_t v66 = swift_slowAlloc(22LL, -1LL);
        uint64_t v67 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v123 = (_BYTE *)swift_slowAlloc(32LL, -1LL);
        id v131 = v123;
        *(_DWORD *)uint64_t v66 = 138412546;
        uint64_t v129 = (uint64_t)v63;
        uint64_t v68 = v63;
        uint64_t v120 = &v130;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v66 + 4, v66 + 12);
        id v126 = v67;
        *uint64_t v67 = v63;

        *(_WORD *)(v66 + 12) = 2080;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v21,  (uint64_t)v11,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        uint64_t v69 = v125;
        uint64_t v70 = v128;
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v125 + 56))(v11, 0LL, 1LL, v128);
        uint64_t v71 = v124;
        outlined init with copy of (String, Any)( (uint64_t)v11,  (uint64_t)v124,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v69 + 48))(v71, 1LL, v70) == 1)
        {
          uint64_t v72 = 7104878LL;
          unint64_t v73 = 0xE300000000000000LL;
        }

        else
        {
          uint64_t v97 = (uint64_t)v71;
          uint64_t v98 = v122;
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v97,  (uint64_t)v122,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
          uint64_t v99 = v121;
          outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v98,  (uint64_t)v121,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
          uint64_t v72 = String.init<A>(reflecting:)(v99, v70);
          unint64_t v73 = v100;
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v98,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        }

        uint64_t v64 = v119;
        outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
        uint64_t v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v120, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease(v73);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        _os_log_impl( (void *)&_mh_execute_header,  v64,  (os_log_type_t)v127,  "%@ Failed to convert ID into Raw IDS Destination: %s",  (uint8_t *)v66,  0x16u);
        uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v102 = v126;
        swift_arrayDestroy(v126, 1LL, v101);
        swift_slowDealloc(v102, -1LL, -1LL);
        unint64_t v103 = v123;
        swift_arrayDestroy(v123, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);
      }

      else
      {

        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      }

      unint64_t v104 = lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
      swift_allocError(&type metadata for NearbyGroupHost.Errors, v104, 0LL, 0LL);
      _BYTE *v105 = 3;
      swift_willThrow();
      return;
    }

void closure #2 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v3 = a1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v13 = (uint64_t)v3;
    uint64_t v8 = type metadata accessor for NearbyGroupHost(0LL);
    id v9 = v3;
    uint64_t v10 = String.init<A>(reflecting:)(&v13, v8);
    unint64_t v12 = v11;
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v12);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Finished setting up incomingMessageListener", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

void closure #3 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v33, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    os_log_type_t v5 = (void *)Strong;
    if (one-time initialization token for group != -1) {
      swift_once(&one-time initialization token for group, one-time initialization function for group);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v6, (uint64_t)static Log.group);
    id v7 = v5;
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v8 = v7;
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v29 = v10;
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      unint64_t v12 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v31 = (uint64_t)v8;
      uint64_t v32 = (void *)v30;
      *(_DWORD *)uint64_t v11 = 138412802;
      uint64_t v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v11 + 4, v11 + 12);
      *unint64_t v12 = v5;

      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v31 = v2;
      swift_bridgeObjectRetain(v2);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
      uint64_t v15 = String.init<A>(reflecting:)(&v31, v14);
      unint64_t v17 = v16;
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease_n(v2, 2LL);
      uint64_t v18 = swift_bridgeObjectRelease(v17);
      *(_WORD *)(v11 + 22) = 2080;
      uint64_t v19 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v13) + 0x148LL))(v18);
      if (v19)
      {
        uint64_t v31 = v19;
        uint64_t v20 = type metadata accessor for NearbyGroupHostConnection(0LL);
        uint64_t v21 = String.init<A>(reflecting:)(&v31, v20);
        unint64_t v23 = v22;
      }

      else
      {
        unint64_t v23 = 0xE300000000000000LL;
        uint64_t v21 = 7104878LL;
      }

      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v11 + 24, v11 + 32);

      swift_bridgeObjectRelease(v23);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v29,  "%@ learned about updated members: %s, updating client %s",  (uint8_t *)v11,  0x20u);
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v12, 1LL, v24);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v2, 2LL);
    }

    uint64_t v25 = (*(uint64_t (**)(void))((swift_isaMask & *v8) + 0x148LL))();
    if (v25)
    {
      uint64_t v26 = (void *)v25;
      XPCHostConnection.clientObject.getter(&v32);

      uint64_t v27 = v32;
      type metadata accessor for NearbyGroupMember(0LL);
      lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      [v27 setMembers:isa];

      swift_unknownObjectRelease(v27);
    }
  }

uint64_t NearbyGroupHost.join(withNearbyGroupMembers:)( void (*a1)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v9 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&one-time initialization token for group, one-time initialization function for group);
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received join message from client. We're now synced", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x120LL))(1LL);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xF8LL))(v16);
  uint64_t v19 = v18;
  uint64_t v20 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB0LL))();
  a1(v17, v19, v20, 0LL);
  swift_bridgeObjectRelease(v19);
  return swift_bridgeObjectRelease(v20);
}

uint64_t NearbyGroupHost.addMember(nearbyGroupMember:completion:)( void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint8_t **)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)((char *)v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    uint64_t v50 = a3;
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&one-time initialization token for group, one-time initialization function for group);
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Log.group);
  id v17 = a1;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    v53[0] = v48;
    os_log_type_t v49 = a2;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v47 = v20 + 4;
    id v21 = [v17 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v24 = v23;

    id v52 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v53);
    a2 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v47, v20 + 12);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received request to add member: %s", v20, 0xCu);
    uint64_t v25 = v48;
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *(void *)v4) + 0xE0LL))(v53);
  uint64_t v26 = v54;
  uint64_t v27 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  (*(void (**)(uint64_t, uint64_t))(v27 + 56))(v26, v27);
  __swift_destroy_boxed_opaque_existential_0Tm(v53);
  uint64_t v28 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *(void *)v4) + 0xC0LL);
  id v29 = v17;
  uint64_t v30 = (void (*)(uint64_t *, void))v28(v53);
  char v31 = specialized Set._Variant.insert(_:)((Swift::Int *)&v52, v29);

  v30(v53, 0LL);
  if ((v31 & 1) != 0)
  {
    NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(v4, v29);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject(v41, v51);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AAE90;
    *(void *)(inited + 32) = v29;
    v53[0] = inited;
    specialized Array._endMutation()(inited);
    uint64_t v43 = v53[0];
    id v44 = v29;
    uint64_t v45 = specialized Set.init<A>(_:)(v43);
    swift_bridgeObjectRelease(v43);
    NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(v4, v45);
    swift_bridgeObjectRelease(v45);
  }

  else
  {
    uint64_t v32 = v4;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v35 = 136315138;
      v53[0] = v36;
      id v52 = (id)(*(uint64_t (**)(void))((swift_isaMask & *(void *)v32) + 0xB0LL))();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
      uint64_t v38 = String.init<A>(reflecting:)(&v52, v37);
      unint64_t v40 = v39;
      id v52 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v35 + 4, v35 + 12);

      swift_bridgeObjectRelease(v40);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Ignoring addMember since member is already part of NearbyGroup: %s",  v35,  0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
    }
  }

  return a2(0LL);
}

void NearbyGroupHost.kickMember(nearbyGroupMember:completion:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (os_log_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)((char *)v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&one-time initialization token for group, one-time initialization function for group);
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.group);
  id v17 = a1;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v54 = a3;
  if (v20)
  {
    uint64_t v52 = v16;
    id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v53 = v4;
    *(_DWORD *)id v21 = 138412290;
    uint64_t v56 = (uint64_t)v17;
    id v23 = v17;
    uint64_t v4 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v21 + 4, v21 + 12);
    *uint64_t v22 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received request to kick member: %@", v21, 0xCu);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v22, 1LL, v24);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    uint64_t v18 = (os_log_s *)v17;
  }

  uint64_t v26 = (void *)specialized Set._Variant.remove(_:)(v17);
  v25(&v56, 0LL);
  if (v26)
  {
    NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(v4, v17);
    ((void (*)(void))a2)(0LL);
  }

  else
  {
    uint64_t v27 = v4;
    id v28 = v17;
    id v29 = v27;
    id v30 = v28;
    char v31 = v29;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v35 = static os_log_type_t.error.getter(v32, v33, v34);
    if (os_log_type_enabled(v32, v35))
    {
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = (void (**)(void))swift_slowAlloc(16LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = (uint64_t)v31;
      uint64_t v56 = v52;
      *(_DWORD *)uint64_t v36 = 138412802;
      uint64_t v53 = a2;
      uint64_t v38 = v31;
      os_log_t v51 = v32;
      unint64_t v39 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 4, v36 + 12);
      *uint64_t v37 = v31;

      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v55 = (uint64_t)v30;
      id v40 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 14, v36 + 22);
      v37[1] = (void (*)(void))v30;

      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v41 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v39) + 0xB0LL))();
      type metadata accessor for NearbyGroupMember(0LL);
      lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v43 = Set.description.getter(v42);
      unint64_t v45 = v44;
      swift_bridgeObjectRelease(v41);
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v56);
      a2 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease(v45);

      uint64_t v32 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  v35,  "%@ Not able to kick member since member isn't found in membership list, member: %@, list: %s",  (uint8_t *)v36,  0x20u);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v37, 2LL, v46);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v47 = v52;
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v48 = lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
    uint64_t v49 = swift_allocError(&type metadata for NearbyGroupHost.Errors, v48, 0LL, 0LL);
    *uint64_t v50 = 2;
    a2();
    swift_errorRelease(v49);
  }

uint64_t NearbyGroupHost.leave(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  id v23 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) != 0)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&one-time initialization token for group, one-time initialization function for group);
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Log.group);
  uint64_t v13 = v2;
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(8LL, -1LL);
    v22[1] = a2;
    uint64_t v18 = (void *)v17;
    *(_DWORD *)uint64_t v16 = 138412290;
    uint64_t v24 = v13;
    os_log_type_t v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);
    *uint64_t v18 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Received request to leave", v16, 0xCu);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v18, 1LL, v20);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    id v14 = (os_log_s *)v13;
  }

  NearbyGroupHostIDSService.distributeLeave(for:)(v13);
  (*(void (**)(void))((swift_isaMask & *(void *)v13) + 0x1B8LL))();
  return v23(0LL);
}

Swift::Void __swiftcall NearbyGroupHost.invalidate()()
{
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  uint64_t v2 = v0;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v9 = v2;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    void *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ invalidating", v5, 0xCu);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x120LL))(2LL);
  (*(void (**)(void))((swift_isaMask & *v2) + 0x150LL))(0LL);
}

Swift::Void __swiftcall NearbyGroupHost.distributeGroupInitialization()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  uint64_t v11 = swift_allocObject(&unk_1000CB270, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in NearbyGroupHost.distributeGroupInitialization();
  uint64_t v19 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_1;
  uint64_t v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t v13 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v15 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_release(v19);
}

void closure #1 in NearbyGroupHost.distributeGroupInitialization()(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB0LL))();
  NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(a1, v2);
  swift_bridgeObjectRelease(v2);
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Log.group);
  osos_log_t log = a1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(oslog);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (os_log_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    os_log_t v11 = oslog;
    uint64_t v8 = oslog;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    *uint64_t v7 = oslog;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Successfully distributed groupInitialization", v6, 0xCu);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

uint64_t NearbyGroupHost.connectionInfo.getter()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (*(uint64_t (**)(char *, uint64_t))(v5 + 16))( v4,  (uint64_t)v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA8LL))(v6);
  uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xF8LL))();
  uint64_t v10 = v9;
  id v11 = objc_allocWithZone((Class)type metadata accessor for NearbyGroupConnectionInfo(0LL));
  return NearbyGroupConnectionInfo.init(id:endpoint:localMember:)(v4, v7, v8, v10);
}

void NearbyGroupHost.init()()
{
}

id NearbyGroupHost.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyGroupHost(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyGroupHost.handle(addedMember:)( com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member addedMember)
{
  objc_super v2 = v1;
  uint64_t object = addedMember.token.value._object;
  uint64_t countAndFlagsBits = addedMember.token.value._countAndFlagsBits;
  uint64_t v5 = addedMember.handle._object;
  uint64_t v6 = addedMember.handle._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *id v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    objc_allocWithZone((Class)type metadata accessor for NearbyGroupMember(0LL));
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(v5);
    uint64_t v14 = (void *)NearbyGroupMember.init(handle:tokenID:)(v6, v5, countAndFlagsBits, object);
    uint64_t v15 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v2) + 0xC0LL);
    id v16 = v14;
    uint64_t v17 = (void (*)(_BYTE *, void))v15(v19);
    specialized Set._Variant.insert(_:)((Swift::Int *)&v20, v16);

    v17(v19, 0LL);
  }

  else
  {
    __break(1u);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyGroupHost.handle(removedMember:)( com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member removedMember)
{
  objc_super v2 = v1;
  uint64_t object = removedMember.token.value._object;
  uint64_t countAndFlagsBits = removedMember.token.value._countAndFlagsBits;
  uint64_t v5 = removedMember.handle._object;
  uint64_t v6 = (void *)removedMember.handle._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (uint64_t *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *id v11 = v12;
  (*((void (**)(void *, void, uint64_t))v8 + 13))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*((void (**)(void *, uint64_t))v8 + 1))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v14 = (objc_class *)type metadata accessor for NearbyGroupMember(0LL);
  objc_allocWithZone(v14);
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = (void *)NearbyGroupMember.init(handle:tokenID:)(v6, v5, countAndFlagsBits, object);
  uint64_t v8 = &swift_isaMask;
  uint64_t v15 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xF8LL);
  uint64_t v16 = v15();
  uint64_t v18 = v17;
  id v19 = objc_allocWithZone(v14);
  uint64_t object = (void *)NearbyGroupMember.init(handle:tokenID:)(v16, v18, 0LL, 0LL);
  uint64_t v20 = v15();
  uint64_t v22 = v21;
  uint64_t v23 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x100LL))();
  uint64_t v25 = v24;
  id v26 = objc_allocWithZone(v14);
  uint64_t v5 = (void *)NearbyGroupMember.init(handle:tokenID:)(v20, v22, v23, v25);
  if ((static NSObject.== infix(_:_:)(v6) & 1) != 0 || (static NSObject.== infix(_:_:)(v6) & 1) != 0)
  {
    if (one-time initialization token for group == -1)
    {
LABEL_5:
      uint64_t v27 = type metadata accessor for Logger(0LL);
      uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Log.group);
      id v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        char v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v31 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Removed member is localMember, invalidating session.",  v31,  2u);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      (*(void (**)(void))((*(void *)v8 & *v2) + 0x1B8LL))();
      goto LABEL_8;
    }

Swift::Bool __swiftcall NearbyGroupHost.listener(_:shouldAcceptNewConnection:)( NSXPCListener *_, NSXPCConnection *shouldAcceptNewConnection)
{
  return specialized NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection);
}

void closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(void **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  uint64_t v6 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbyGroupHostConnection(0LL));
  swift_unknownObjectWeakInit(&v6[direct field offset for NearbyGroupHostConnection.delegate], 0LL);
  uint64_t v7 = XPCHostConnection.init(connection:queue:)(a2, v5);
  uint64_t v8 = *a1;
  *a1 = (void *)v7;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *objc_super v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  uint64_t v16 = *v2;
  *objc_super v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = specialized Set._Variant._migrateToNative(_:removing:)(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = specialized _NativeSet.init(_:capacity:)(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    type metadata accessor for NearbyGroupMember(0LL);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      specialized _NativeSet._delete(at:)(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *uint64_t v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          id v16 = (_OWORD *)(v15 + 16 * v2);
          char v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *id v16 = *v17;
            int64_t v2 = v6;
          }
        }

{
  void *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        uint64_t v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            id v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *char v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  BOOL v19 = *(void *)(v3 + 16);
  uint64_t v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      specialized Set._Variant.insert(_:)(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      Swift::Int v13 = a1;
    }
    else {
      Swift::Int v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = type metadata accessor for NearbyGroupMember(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    unint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v7) {
      return v15;
    }
  }

  else
  {
    unint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (unint64_t i = 0LL; i != v7; ++i)
      {
        unint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v14, v10);
      }
    }

    else
    {
      uint64_t v11 = (void **)(a1 + 32);
      do
      {
        uint64_t v12 = *v11++;
        specialized Set._Variant.insert(_:)((Swift::Int *)&v14, v12);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  unint64_t v7 = result;
  unint64_t v14 = result;
  if (v2)
  {
    if (a1 < 0) {
      unint64_t v9 = a1;
    }
    else {
      unint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v8) {
      return v7;
    }
  }

  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v8) {
      return v7;
    }
  }

  if (v8 >= 1)
  {
    for (unint64_t i = 0LL; i != v8; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }

      else
      {
        uint64_t v11 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }

      specialized Set._Variant.insert(_:)(&v13, v11);
      swift_release(v13);
    }

    return v14;
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[4];
  uint64_t v11;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for NearbyGroupHostIDSService.MessageEvent.Member, v3);
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v5 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *(v5 - 3);
      unint64_t v7 = *(v5 - 2);
      uint64_t v8 = *(v5 - 1);
      unint64_t v9 = *v5;
      swift_bridgeObjectRetain(*v5);
      swift_bridgeObjectRetain(v7);
      specialized Set._Variant.insert(_:)(v10, v6, v7, v8, v9);
      swift_bridgeObjectRelease(v10[1]);
      swift_bridgeObjectRelease(v10[3]);
      v5 += 4;
      --v2;
    }

    while (v2);
    return v11;
  }

  return result;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  unint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHost.Errors,  &type metadata for NearbyGroupHost.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHost.Errors,  &type metadata for NearbyGroupHost.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors);
  }

  return result;
}

uint64_t type metadata accessor for NearbyGroupHost(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHost;
  if (!type metadata singleton initialization cache for NearbyGroupHost) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyGroupHost);
  }
  return result;
}

uint64_t sub_100047428()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004744C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = (void *)swift_task_alloc(dword_1000D5B84);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( a1,  v6,  v7,  v8,  v9,  v10,  v11);
}

void partial apply for closure #3 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)( uint64_t *a1)
{
}

uint64_t sub_1000475AC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for closure #1 in NearbyGroupHost.distributeGroupInitialization()()
{
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t specialized NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.group);
  unint64_t v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    aBlock = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v37, v8 + 4, v8 + 12);
    unint64_t *v9 = v5;

    uint64_t v2 = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  os_log_type_t v42 = 0LL;
  uint64_t v12 = *(dispatch_queue_s **)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  Swift::Int v13 = (void *)swift_allocObject(&unk_1000CB470, 40LL, 7LL);
  v13[2] = &v42;
  v13[3] = v5;
  v13[4] = v2;
  uint64_t v14 = swift_allocObject(&unk_1000CB498, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = partial apply for closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
  *(void *)(v14 + 24) = v13;
  uint64_t v40 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v41 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256LL;
  id v38 = thunk for @escaping @callee_guaranteed () -> ();
  unint64_t v39 = &block_descriptor_41;
  uint64_t v15 = _Block_copy(&aBlock);
  uint64_t v16 = v41;
  char v17 = v5;
  uint64_t v18 = v2;
  swift_retain();
  swift_release(v16);
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v14, "", 98LL, 353LL, 25LL, 1LL);
  uint64_t result = swift_release(v14);
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = v42;
    if (!v42)
    {
      os_log_type_t v30 = v17;
      char v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v33 = 67109120;
        LODWORD(aBlock) = [v30 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v33 + 4, v33 + 8);

        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "NearbyGroupHostConnection could not be created; rejecting connection from PID %d.",
          v33,
          8u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {
      }

      id v29 = 0LL;
      uint64_t v22 = 0LL;
      goto LABEL_14;
    }

    uint64_t v21 = &v42[direct field offset for NearbyGroupHostConnection.delegate];
    swift_beginAccess(&v42[direct field offset for NearbyGroupHostConnection.delegate], v35, 1LL, 0LL);
    swift_unknownObjectWeakAssign(v21, v18);
    uint64_t v22 = swift_allocObject(&unk_1000CB4E8, 32LL, 7LL);
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
    *(void *)(v22 + 24) = v20;
    uint64_t v23 = swift_allocObject(&unk_1000CB510, 32LL, 7LL);
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
    *(void *)(v23 + 24) = v22;
    uint64_t v40 = thunk for @callee_guaranteed () -> ()partial apply;
    uint64_t v41 = v23;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    id v38 = thunk for @escaping @callee_guaranteed () -> ();
    unint64_t v39 = &block_descriptor_51;
    uint64_t v24 = _Block_copy(&aBlock);
    uint64_t v25 = v41;
    id v26 = v20;
    uint64_t v27 = v18;
    id v28 = v26;
    swift_retain();
    swift_release(v25);
    dispatch_sync(v12, v24);

    _Block_release(v24);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation(v23, "", 98LL, 363LL, 25LL, 1LL);
    uint64_t result = swift_release(v23);
    if ((v28 & 1) == 0)
    {
      id v29 = partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
LABEL_14:
      uint64_t v34 = v42;
      swift_release(v13);

      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v29, v22);
      return v20 != 0LL;
    }
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHost.State and conformance NearbyGroupHost.State()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHost.State,  &type metadata for NearbyGroupHost.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State);
  }

  return result;
}

uint64_t sub_100047D64(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC8LL))();
}

uint64_t sub_100047DA0(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE0LL))();
}

uint64_t sub_100047DD8(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))((swift_isaMask & **a2) + 0xE8LL))(v4);
}

uint64_t sub_100047E28@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x100LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100047E68(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x108LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_100047EBC(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x130LL))();
}

uint64_t sub_100047EF8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x148LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100047F38(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x150LL);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_100047F84@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x160LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100047FC4(void *a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x168LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_100048004@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x178LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100048044(void *a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x180LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyGroupHost()
{
  return type metadata accessor for NearbyGroupHost(0LL);
}

void type metadata completion function for NearbyGroupHost(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    type metadata accessor for Published<Set<NearbyGroupMember>>(319LL);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      v8[4] = "(";
      void v8[5] = &unk_1000AC2B8;
      v8[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      type metadata accessor for Published<NearbyGroupHost.State>();
      if (v7 <= 0x3F)
      {
        v8[7] = *(void *)(v6 - 8) + 64LL;
        _WORD v8[8] = &unk_1000AC2D0;
        v8[9] = &unk_1000AC2D0;
        v8[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256LL, 11LL, v8, a1 + 80);
      }
    }
  }

void type metadata accessor for Published<Set<NearbyGroupMember>>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Published<Set<NearbyGroupMember>>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyGroupMember>>);
    }
  }

void type metadata accessor for Published<NearbyGroupHost.State>()
{
  if (!lazy cache variable for type metadata for Published<NearbyGroupHost.State>)
  {
    unint64_t v0 = type metadata accessor for Published(0LL, &type metadata for NearbyGroupHost.State);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<NearbyGroupHost.State>);
    }
  }

uint64_t storeEnumTagSinglePayload for NearbyGroupHost.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100048260 + 4 * byte_1000AC0A5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100048294 + 4 * byte_1000AC0A0[v4]))();
}

uint64_t sub_100048294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004829C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000482A4LL);
  }
  return result;
}

uint64_t sub_1000482B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000482B8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000482BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000482C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHost.Errors()
{
  return &type metadata for NearbyGroupHost.Errors;
}

uint64_t storeEnumTagSinglePayload for NearbyGroupHost.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10004832C + 4 * byte_1000AC0AF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100048360 + 4 * byte_1000AC0AA[v4]))();
}

uint64_t sub_100048360(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100048370LL);
  }
  return result;
}

uint64_t sub_10004837C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100048384LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100048388(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048390(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHost.State()
{
  return &type metadata for NearbyGroupHost.State;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHostIDSService.MessageEvent.Member,  &type metadata for NearbyGroupHostIDSService.MessageEvent.Member);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHostIDSService.MessageEvent.Member,  &type metadata for NearbyGroupHostIDSService.MessageEvent.Member);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member);
  }

  return result;
}

uint64_t sub_1000483F0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void partial apply for closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)()
{
}

uint64_t sub_100048428()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_100048468()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)()
{
  __int16 v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  int v3 = *(uint64_t (**)(void *))((swift_isaMask & *v1) + 0x150LL);
  id v4 = v2;
  return v3(v2);
}

uint64_t sub_1000484E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized closure #1 in _PublisherElements.Iterator.next()();
}

uint64_t partial apply for specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_1000D5F6C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return specialized closure #2 in _PublisherElements.Iterator.next()(a1, v4);
}

uint64_t outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void partial apply for closure #1 in closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
}

uint64_t outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant( uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

id NIBluetoothSample.init(with:)(void *a1)
{
  id v3 = [a1 stableIdentifier];
  if (!v3)
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v9, (uint64_t)static Log.host);
    id v10 = a1;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v14 = static os_log_type_t.error.getter(v11, v12, v13);
    if (os_log_type_enabled(v11, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = (uint64_t)v10;
      uint64_t v31 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
      id v10 = v10;
      uint64_t v18 = String.init<A>(reflecting:)(&v30, v17);
      unint64_t v20 = v19;
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);

      swift_bridgeObjectRelease(v20);
      uint64_t v21 = "Can't create NIBTSample for device: %s. No stableIdentifier.";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, v14, v21, v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);

LABEL_14:
      return 0LL;
    }

uint64_t BluetoothScanner.Device.acquireScanRateAssertion()()
{
  __int128 v3 = *(_OWORD *)(v0 + 88);
  swift_retain();
  ((void (*)(uint64_t *__return_ptr))v3)(&v2);
  outlined release of IgnoreHashable<IgnoreEquatable<()>>((uint64_t)&v3);
  return v2;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.hasInvitation.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void *BluetoothScannerDiscoveryEngineDevice.sample.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.contact.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.activityType.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.invitationCounter.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.accountID.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.routeType.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.init(stableIdentifier:hasInvitation:sample:contact:activityType:invitationCounter:accountID:routeType:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(_DWORD *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  return result;
}

uint64_t NearbyAdvertisement.init(scannerID:device:)(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(a2 + 2),  (uint64_t)v32,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo?);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v32,  (uint64_t)&v33,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo?);
  if (*((void *)&v33 + 1) == 1LL)
  {
    outlined release of BluetoothScannerDiscoveryEngineDevice(a2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return 0LL;
  }

  else
  {
    outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(&v33, &v34);
    outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(&v34, &v35);
    uint64_t v28 = v2;
    if (*((void *)&v35 + 1))
    {
      uint64_t v26 = *((void *)&v35 + 1);
      uint64_t v27 = v35;
    }

    else
    {
      type metadata accessor for NearbyAdvertisement(0LL);
      uint64_t v11 = static NearbyAdvertisement.meContactID.getter();
      uint64_t v26 = v12;
      uint64_t v27 = v11;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    __int128 v30 = *a2;
    __int128 v31 = v30;
    outlined retain of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v32);
    outlined retain of String((uint64_t)&v31);
    uint64_t v25 = a1;
    v13._uint64_t countAndFlagsBits = 45LL;
    v13._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    uint64_t v29 = *((void *)a2 + 7);
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    uint64_t v17 = *((void *)&v30 + 1);
    uint64_t v16 = v30;
    uint64_t v18 = *((unsigned int *)a2 + 12);
    uint64_t v19 = *((void *)a2 + 8);
    uint64_t v20 = *((void *)a2 + 9);
    LOBYTE(v30) = *((_BYTE *)a2 + 80);
    swift_bridgeObjectRetain(v20);
    uint64_t v21 = specialized Data.init<A>(_:)((uint64_t)&v30, (uint64_t)&v30 + 1);
    uint64_t v10 = dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)( v9,  v16,  v17,  v18,  v27,  v26,  v19,  v20,  0LL,  0LL,  v21,  v22,  0LL,  1,  0LL,  0LL,  0LL,  0LL);
    outlined release of BluetoothScannerDiscoveryEngineDevice(a2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v5);
  }

  return v10;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v4,  a2,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
}

__n128 BluetoothScanner.Device.cbDevice.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = v1[1];
  __int128 v14 = *v1;
  *(_OWORD *)uint64_t v15 = v3;
  __int128 v4 = v1[3];
  *(_OWORD *)&v15[16] = v1[2];
  *(_OWORD *)uint64_t v16 = v4;
  *(_OWORD *)&v16[16] = v1[4];
  char v5 = *((_BYTE *)v1 + 80);
  char v17 = v5;
  __int128 v6 = v14;
  uint64_t v7 = *(void *)&v15[24];
  int v8 = v4;
  __n128 v12 = *(__n128 *)&v16[8];
  __int128 v13 = *(_OWORD *)&v15[8];
  uint64_t v9 = *(void *)&v16[24];
  char v10 = v15[0] & 1;
  outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>((uint64_t)&v14);
  *(_OWORD *)a1 = v6;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = v8;
  __n128 result = v12;
  *(__n128 *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = v5;
  return result;
}

__n128 property wrapper backing initializer of BluetoothScanner.Device.cbDevice@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 72);
  char v6 = *(_BYTE *)(a1 + 80);
  char v7 = *(_BYTE *)(a1 + 16) & 1;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(a2 + 56) = result;
  *(void *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  return result;
}

uint64_t _PublisherElements.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

double key path getter for BluetoothScanner.Device.cbDevice : BluetoothScanner.Device@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(_BYTE *)(a1 + 16);
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(_BYTE *)(a1 + 80);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 80) = v9;
  id v10 = v4;
  swift_bridgeObjectRetain(v2);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v5, v6);
  *(void *)&double result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t key path setter for BluetoothScanner.Device.cbDevice : BluetoothScanner.Device( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v20 = *a1;
  uint64_t v5 = (void *)a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a1[5];
  int v18 = *((_DWORD *)a1 + 12);
  char v19 = *((_BYTE *)a1 + 16);
  uint64_t v7 = a1[9];
  uint64_t v16 = a1[8];
  uint64_t v17 = a1[7];
  char v15 = *((_BYTE *)a1 + 80);
  uint64_t v8 = *(void *)(a2 + 8);
  id v10 = *(void **)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 72);
  id v12 = v5;
  swift_bridgeObjectRetain(v3);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v4, v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v9, v11);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v16;
  *(void *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v15;
  return result;
}

__n128 BluetoothScanner.Device.cbDevice.setter(uint64_t *a1)
{
  uint64_t v14 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v2 = a1[5];
  int v3 = *((_DWORD *)a1 + 12);
  __n128 v12 = *(__n128 *)(a1 + 7);
  __int128 v13 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = a1[9];
  char v5 = *((_BYTE *)a1 + 80);
  char v6 = a1[2] & 1;
  uint64_t v8 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 72);
  swift_bridgeObjectRelease(*(void *)(v1 + 8));

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v7, v9);
  swift_bridgeObjectRelease(v10);
  *(void *)uint64_t v1 = v15;
  *(void *)(v1 + 8) = v14;
  *(_BYTE *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(_OWORD *)(v1 + 24) = v13;
  *(void *)(v1 + 40) = v2;
  *(_DWORD *)(v1 + 48) = v3;
  __n128 result = v12;
  *(__n128 *)(v1 + 56) = v12;
  *(void *)(v1 + 72) = v4;
  *(_BYTE *)(v1 + 80) = v5;
  return result;
}

uint64_t IgnoreHashable.wrappedValue.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for IgnoreEquatable(0LL, v6, a2, a3);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a4, v10, v6);
}

void (*BluetoothScanner.Device.cbDevice.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = Pseudonym.Configuration.featureID.modify();
  return BluetoothScanner.Device.cbDevice.modify;
}

void BluetoothScanner.Device.cbDevice.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

uint64_t (*property wrapper backing initializer of BluetoothScanner.Device.acquireScanRateAssertionClosure( uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = swift_allocObject(&unk_1000CB5C0, 32LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?);
}

uint64_t (*BluetoothScanner.Device.acquireScanRateAssertionClosure.getter())()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = swift_allocObject(&unk_1000CB5E8, 32LL, 7LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed () -> (@out AssertionManager.Assertion?);
}

__n128 BluetoothScanner.Device.init(device:acquireScanRateAssertionClosure:)@<Q0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[5];
  int v10 = *((_DWORD *)a1 + 12);
  __n128 v16 = *(__n128 *)(a1 + 7);
  __int128 v17 = *(_OWORD *)(a1 + 3);
  uint64_t v11 = a1[9];
  char v12 = *((_BYTE *)a1 + 80);
  char v13 = a1[2] & 1;
  uint64_t v14 = swift_allocObject(&unk_1000CB610, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *(_OWORD *)(a4 + 24) = v17;
  *(void *)(a4 + 40) = v9;
  *(_DWORD *)(a4 + 48) = v10;
  __n128 result = v16;
  *(__n128 *)(a4 + 56) = v16;
  *(void *)(a4 + 72) = v11;
  *(_BYTE *)(a4 + 80) = v12;
  *(void *)(a4 + 88) = thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)partial apply;
  *(void *)(a4 + 96) = v14;
  return result;
}

uint64_t BluetoothScanner.scanner.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t property wrapper backing initializer of BluetoothScanner.devices(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
  return CurrentSubject.init(wrappedValue:)(&v3, v1);
}

uint64_t BluetoothScanner.devices.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( v5,  v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices,  v1);
  CurrentSubject.wrappedValue.getter(&v8, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v8;
}

uint64_t BluetoothScanner.devices.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v7,  v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices,  v3);
  uint64_t v10 = a1;
  CurrentSubject.wrappedValue.setter(&v10, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void (*BluetoothScanner.devices.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  void v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  void v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify(v2, v3);
  return BluetoothScanner.devices.modify;
}

void BluetoothScanner.devices.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  uint64_t v4 = *(void *)(*a1 + 40LL);
  (*(void (**)(void, void))(*a1 + 56LL))(*a1, 0LL);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t BluetoothScanner.$devices.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( v5,  v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices,  v1);
  uint64_t v6 = CurrentSubject.projectedValue.getter(v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t BluetoothScanner.maxScanAssertion.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion,  v3,  0LL,  0LL);
  return swift_retain(*v1);
}

uint64_t BluetoothScanner.maxScanAssertion.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*BluetoothScanner.maxScanAssertion.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t BluetoothScanner.__allocating_init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t ObjectType = swift_getObjectType(a1);
  return specialized BluetoothScanner.init(discoveryEngine:)(a1, v5, ObjectType, a2);
}

uint64_t BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  return specialized BluetoothScanner.init(discoveryEngine:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a2 + 24);
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.host);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)char v12 = 134217984;
      uint64_t v19 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "ScanRate assertions changed: %ld", v12, 0xCu);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t ObjectType = swift_getObjectType(v6);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32);
    uint64_t v15 = v14(ObjectType, v7);
    __n128 v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 40);
    if (a1)
    {
      v16(v15 | 0x8000000000000000LL, ObjectType, v7);
      unint64_t v17 = v14(ObjectType, v7) | 0x10000000000LL;
      uint64_t v18 = 60LL;
    }

    else
    {
      v16(v15 & 0x7FFFFFFFFFFFFFFFLL, ObjectType, v7);
      unint64_t v17 = v14(ObjectType, v7) & 0xFFFFFEFFFFFFFFFFLL;
      uint64_t v18 = 20LL;
    }

    v16(v17, ObjectType, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v18, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }

  return result;
}

uint64_t closure #2 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v6, (uint64_t)static Log.host);
    outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
    uint64_t v7 = outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      __int128 v12 = *(_OWORD *)(a1 + 48);
      v17[2] = *(_OWORD *)(a1 + 32);
      uint64_t v17[3] = v12;
      v17[4] = *(_OWORD *)(a1 + 64);
      char v18 = *(_BYTE *)(a1 + 80);
      __int128 v13 = *(_OWORD *)(a1 + 16);
      v17[0] = *(_OWORD *)a1;
      v17[1] = v13;
      outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
      uint64_t v14 = String.init<A>(reflecting:)(v17, &type metadata for BluetoothScannerDiscoveryEngineDevice);
      unint64_t v16 = v15;
      *(void *)&v17[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, (char *)v17 + 8, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v16);
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Learned about updated BT device: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
    }

    (*(void (**)(void))(*(void *)v5 + 168LL))();
    return swift_release(v5);
  }

  return result;
}

uint64_t closure #3 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v43[1];
  uint64_t v5 = v45;
  uint64_t v27 = v43[0];
  char v28 = v44;
  uint64_t v6 = v46;
  uint64_t v7 = v47;
  int v8 = v48;
  uint64_t v9 = v49;
  uint64_t v11 = v50;
  uint64_t v10 = v51;
  a2 += 16LL;
  char v29 = v52;
  swift_beginAccess(a2, v42, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v24 = v11;
    uint64_t v25 = v9;
    int v26 = v8;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v14, (uint64_t)static Log.host);
    outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of BluetoothScannerDiscoveryEngineDevice?);
    uint64_t v15 = outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of BluetoothScannerDiscoveryEngineDevice?);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v23;
      *(_DWORD *)char v18 = 136315138;
      outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( a1,  (uint64_t)v53,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
      if (v54)
      {
        uint64_t v30 = v27;
        uint64_t v31 = v4;
        char v32 = v28 & 1;
        __int128 v33 = v5;
        uint64_t v34 = v6;
        uint64_t v35 = v7;
        int v36 = v26;
        uint64_t v37 = v25;
        uint64_t v38 = v24;
        uint64_t v39 = v10;
        char v40 = v29;
        id v19 = v5;
        swift_bridgeObjectRetain(v4);
        outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v6, v7);
        swift_bridgeObjectRetain(v10);
        uint64_t v20 = String.init<A>(reflecting:)(&v30, &type metadata for BluetoothScannerDiscoveryEngineDevice);
        unint64_t v22 = v21;
      }

      else
      {
        unint64_t v22 = 0xE300000000000000LL;
        uint64_t v20 = 7104878LL;
      }

      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v22);
      outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Learned about BT device lost: %s", v18, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      outlined retain of BluetoothScannerDiscoveryEngineDevice?( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
    }

    (*(void (**)(void))(*(void *)v13 + 168LL))();
    return swift_release(v13);
  }

  return result;
}

uint64_t closure #4 in BluetoothScanner.init(discoveryEngine:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  return swift_task_switch(closure #4 in BluetoothScanner.init(discoveryEngine:), 0LL, 0LL);
}

uint64_t closure #4 in BluetoothScanner.init(discoveryEngine:)()
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v0[5] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Activating scanner.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[4];

  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t ObjectType = swift_getObjectType(v8);
  uint64_t v10 = *(int **)(v7 + 112);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[6] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #4 in BluetoothScanner.init(discoveryEngine:);
  return v13(ObjectType, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #4 in BluetoothScanner.init(discoveryEngine:);
  }
  else {
    uint64_t v3 = closure #4 in BluetoothScanner.init(discoveryEngine:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  os_log_s *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Activated scanner.", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v1 = *(void *)(v0 + 56);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v15 = v7;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
    swift_errorRetain(v5);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v9 = String.init<A>(reflecting:)(v0 + 16, v8);
    uint64_t v11 = v10;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to activate the scanner. Reason: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    __int128 v12 = *(void *)(v0 + 56);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  swift_willThrow(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall BluetoothScanner.handleDiscoveryEngineDevicesChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v0 + 16));
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(ObjectType, v2);
  swift_retain();
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_release(v1);
  swift_bridgeObjectRelease(v4);
  (*(void (**)(char *))(*(void *)v1 + 112LL))(v5);
}

uint64_t closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)Strong + 136LL))();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v4 + 160LL))();
  swift_release(v3);
  swift_release(v4);
  return v5;
}

uint64_t BluetoothScanner.__allocating_init()()
{
  id v1 = [objc_allocWithZone(CBDiscovery) init];
  [v1 setUseCase:131092];
  [v1 addDiscoveryType:21];
  return (*(uint64_t (**)(id, _UNKNOWN **))(v0 + 160))(v1, &protocol witness table for CBDiscovery);
}

uint64_t BluetoothScanner.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t ObjectType = swift_getObjectType(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 120))(ObjectType, v3);
  swift_unknownObjectRelease(v2);
  uint64_t v5 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_release(*(void *)(v1
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion));
  return v1;
}

uint64_t BluetoothScanner.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[2];
  uint64_t v3 = v1[3];
  uint64_t ObjectType = swift_getObjectType(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 120))(ObjectType, v3);
  swift_unknownObjectRelease(v2);
  uint64_t v5 = (char *)v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_release(*(void *)((char *)v1
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48LL), *(unsigned __int16 *)(*v1 + 52LL));
}

uint64_t _PublisherElements.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t IgnoreEquatable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t key path setter for IgnoreHashable.wrappedValue : <A>IgnoreHashable<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  __chkstk_darwin(a1, a1);
  uint64_t v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  uint64_t v10 = type metadata accessor for IgnoreHashable(0LL, v4, v8, v9);
  return IgnoreEquatable.wrappedValue.setter((uint64_t)v6, v10);
}

Swift::Int IgnoreHashable.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IgnoreHashable<A>(uint64_t a1)
{
  return Hasher._finalize()();
}

void CBDiscovery.devices.getter()
{
  id v1 = [v0 discoveredDevices];
  uint64_t v2 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v33 = v3;
    }
    else {
      uint64_t v33 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v4) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease_n(v3, 2LL);
    return;
  }

  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4) {
    goto LABEL_30;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v3 & 0xC000000000000001LL;
    uint64_t v7 = (char *)&_swiftEmptyArrayStorage;
    p_name = &OBJC_PROTOCOL___NSNearbyGroupXPCHost.name;
    uint64_t v9 = &OBJC_PROTOCOL___NSNearbyGroupXPCHost.name;
    uint64_t v35 = v4;
    uint64_t v36 = v3;
    unint64_t v34 = v3 & 0xC000000000000001LL;
    while (1)
    {
      if (v6) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else {
        id v10 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, p_name[424]);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v15 = v14;

        id v16 = [v11 accountID];
        if (v16)
        {
          os_log_type_t v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          uint64_t v39 = v19;
          uint64_t v40 = v18;

          BOOL v20 = ([v11 nearbyInfoV2Flags] & 4) != 0
             || [v11 v9[425]] != 0;
          BOOL v38 = v20;
          unsigned int v37 = [v11 v9[425]];
          unsigned __int8 v21 = [v11 nearbyInfoV2DecryptedFlags];
          if (([v11 deviceFlags] & 0x80) != 0)
          {
            uint64_t v24 = 0LL;
            uint64_t v26 = 0LL;
          }

          else
          {
            id v22 = [v11 contactID];
            if (v22)
            {
              uint64_t v23 = v22;
              uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
              uint64_t v26 = v25;
            }

            else
            {
              uint64_t v24 = 0LL;
              uint64_t v26 = 1LL;
            }
          }

          type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample,  &OBJC_CLASS___NIBluetoothSample_ptr);
          id v27 = v11;
          id v28 = NIBluetoothSample.init(with:)(v27);
          unsigned __int8 v29 = [v27 nearbyInfoV2InvitationRouteType];

          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v7 + 2) + 1LL,  1,  v7);
          }
          unint64_t v31 = *((void *)v7 + 2);
          unint64_t v30 = *((void *)v7 + 3);
          if (v31 >= v30 >> 1) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v30 > 1),  v31 + 1,  1,  v7);
          }
          *((void *)v7 + 2) = v31 + 1;
          char v32 = &v7[88 * v31];
          *((void *)v32 + 4) = v41;
          *((void *)v32 + 5) = v15;
          v32[48] = v38;
          *((void *)v32 + 7) = v28;
          *((void *)v32 + 8) = v24;
          *((void *)v32 + 9) = v26;
          *((_DWORD *)v32 + 20) = v21 & 1;
          *((void *)v32 + 11) = v37;
          *((void *)v32 + 12) = v40;
          *((void *)v32 + 13) = v39;
          v32[112] = v29;
          uint64_t v4 = v35;
          uint64_t v3 = v36;
          unint64_t v6 = v34;
          p_name = (char **)(&OBJC_PROTOCOL___NSNearbyGroupXPCHost + 8);
          uint64_t v9 = (char **)(&OBJC_PROTOCOL___NSNearbyGroupXPCHost + 8);
          goto LABEL_7;
        }

        swift_bridgeObjectRelease(v15);
      }

LABEL_7:
      if (v4 == ++v5) {
        goto LABEL_30;
      }
    }
  }

  __break(1u);
}

id key path setter for CBDiscovery.deviceLost : CBDiscovery(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject(&unk_1000CBB80, 32LL, 7LL);
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice?) -> (@out ());
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v1, v2);
  return CBDiscovery.deviceLost.setter((uint64_t)v4, v3);
}

id CBDiscovery.deviceLost.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (!a1) {
    return [v2 setDeviceFoundHandler:0];
  }
  uint64_t v6 = swift_allocObject(&unk_1000CB638, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v10[4] = partial apply for closure #1 in CBDiscovery.deviceLost.setter;
  uint64_t v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  v10[3] = &block_descriptor_2;
  uint64_t v7 = _Block_copy(v10);
  uint64_t v8 = v11;
  swift_retain();
  swift_release(v8);
  [v3 setDeviceLostHandler:v7];
  _Block_release(v7);
  return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1, a2);
}

uint64_t closure #1 in CBDiscovery.deviceLost.setter(void *a1, void (*a2)(_BYTE *))
{
  return outlined retain of BluetoothScannerDiscoveryEngineDevice?( (uint64_t)v4,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
}

void (*CBDiscovery.deviceLost.modify(void *a1))(void ****a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = 0LL;
  v3[8] = v1;
  void v3[6] = 0LL;
  return CBDiscovery.deviceLost.modify;
}

void CBDiscovery.deviceLost.modify(void ****a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1)[6];
  uint64_t v4 = (*a1)[8];
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      uint64_t v5 = (uint64_t)v2[7];
      uint64_t v6 = swift_allocObject(&unk_1000CB688, 32LL, 7LL);
      *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
      *(void *)(v6 + 24) = v5;
      void v2[4] = (void **)closure #1 in CBDiscovery.deviceLost.setterpartial apply;
      v2[5] = (void **)v6;
      *uint64_t v2 = _NSConcreteStackBlock;
      v2[1] = (void **)1107296256;
      void v2[2] = (void **)thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
      v2[3] = (void **)&block_descriptor_17;
      uint64_t v7 = _Block_copy(v2);
      uint64_t v8 = v2[5];
      swift_retain_n(v5);
      swift_release(v8);
      [v4 setDeviceLostHandler:v7];
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3, v5);
    }

    else
    {
      [(*a1)[8] setDeviceFoundHandler:0];
    }

    uint64_t v13 = (uint64_t)v2[6];
    uint64_t v14 = (uint64_t)v2[7];
  }

  else
  {
    if (!v3)
    {
      [(*a1)[8] setDeviceFoundHandler:0];
      goto LABEL_10;
    }

    uint64_t v9 = (uint64_t)v2[7];
    uint64_t v10 = swift_allocObject(&unk_1000CB6D8, 32LL, 7LL);
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(v10 + 24) = v9;
    void v2[4] = (void **)closure #1 in CBDiscovery.deviceLost.setterpartial apply;
    v2[5] = (void **)v10;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (void **)1107296256;
    void v2[2] = (void **)thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    v2[3] = (void **)&block_descriptor_24;
    uint64_t v11 = _Block_copy(v2);
    id v12 = v2[5];
    swift_retain();
    swift_release(v12);
    [v4 setDeviceLostHandler:v11];
    _Block_release(v11);
    uint64_t v13 = v3;
    uint64_t v14 = v9;
  }

  outlined consume of (@escaping @callee_guaranteed () -> ())?(v13, v14);
LABEL_10:
  free(v2);
}

id key path setter for CBDiscovery.deviceFound : CBDiscovery(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject(&unk_1000CBB58, 32LL, 7LL);
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice) -> (@out ());
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v1, v2);
  return CBDiscovery.deviceFound.setter((uint64_t)v4, v3);
}

id CBDiscovery.deviceFound.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (!a1) {
    return [v2 setDeviceFoundHandler:0];
  }
  uint64_t v6 = swift_allocObject(&unk_1000CB728, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16, v3);
  uint64_t v7 = (void *)swift_allocObject(&unk_1000CB750, 40LL, 7LL);
  uint64_t v7[2] = v6;
  void v7[3] = a1;
  v7[4] = a2;
  v11[4] = partial apply for closure #1 in CBDiscovery.deviceFound.setter;
  id v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  void v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  v11[3] = &block_descriptor_33;
  uint64_t v8 = _Block_copy(v11);
  uint64_t v9 = v12;
  swift_retain();
  swift_release(v9);
  [v3 setDeviceFoundHandler:v8];
  _Block_release(v8);
  return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1, a2);
}

void closure #1 in CBDiscovery.deviceFound.setter(void *a1, uint64_t a2, void (*a3)(_OWORD *))
{
  id v5 = a1;
  specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(v5, (uint64_t)v20);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v20,  (uint64_t)v21,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
  if (*((void *)&v21[0] + 1))
  {
    uint64_t v23[2] = v21[2];
    v23[3] = v21[3];
    v23[4] = v21[4];
    char v24 = v22;
    v23[0] = v21[0];
    v23[1] = v21[1];
    a3(v23);
    outlined retain of BluetoothScannerDiscoveryEngineDevice?( (uint64_t)v20,  (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
  }

  else
  {
    uint64_t v6 = a2 + 16;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v7, (uint64_t)static Log.host);
    id v8 = v5;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v23[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v19 = (uint64_t)v8;
      uint64_t v13 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for CBDevice,  &OBJC_CLASS___CBDevice_ptr);
      id v14 = v8;
      uint64_t v15 = String.init<A>(reflecting:)(&v19, v13);
      unint64_t v17 = v16;
      uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease(v17);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Couldn't generate device for CBDevice: %s, notifying as lost.",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    swift_beginAccess(v6, v23, 0LL, 0LL);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
    if (Strong) {
  }
    }

void (*CBDiscovery.deviceFound.modify(void *a1))(void ****a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = 0LL;
  v3[8] = v1;
  void v3[6] = 0LL;
  return CBDiscovery.deviceFound.modify;
}

void CBDiscovery.deviceFound.modify(void ****a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    uint64_t v4 = (uint64_t)v2[7];
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?( (uint64_t)(*a1)[6],  v4);
    CBDiscovery.deviceFound.setter(v3, v4);
    uint64_t v5 = (uint64_t)v2[6];
    uint64_t v6 = (uint64_t)v2[7];
  }

  else
  {
    uint64_t v7 = v2[8];
    if (!v3)
    {
      [v2[8] setDeviceFoundHandler:0];
      goto LABEL_7;
    }

    uint64_t v8 = (uint64_t)v2[7];
    uint64_t v9 = swift_allocObject(&unk_1000CB728, 24LL, 7LL);
    swift_unknownObjectWeakInit(v9 + 16, v7);
    os_log_type_t v10 = (void **)swift_allocObject(&unk_1000CB7A0, 40LL, 7LL);
    v10[2] = (void *)v9;
    v10[3] = (void *)v3;
    v10[4] = (void *)v8;
    void v2[4] = (void **)closure #1 in CBDiscovery.deviceFound.setterpartial apply;
    v2[5] = v10;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (void **)1107296256;
    void v2[2] = (void **)thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    v2[3] = (void **)&block_descriptor_41_0;
    uint64_t v11 = _Block_copy(v2);
    uint64_t v12 = v2[5];
    swift_retain();
    swift_release(v12);
    [v7 setDeviceFoundHandler:v11];
    _Block_release(v11);
    uint64_t v5 = v3;
    uint64_t v6 = v8;
  }

  outlined consume of (@escaping @callee_guaranteed () -> ())?(v5, v6);
LABEL_7:
  free(v2);
}

id CBDiscovery.scanRate.getter()
{
  return [v0 bleScanRate];
}

id CBDiscovery.scanRate.setter(uint64_t a1)
{
  return [v1 setBleScanRate:a1];
}

id (*CBDiscovery.scanRate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = [v1 bleScanRate];
  return CBDiscovery.scanRate.modify;
}

id CBDiscovery.scanRate.modify(uint64_t a1)
{
  return [*(id *)a1 setBleScanRate:*(unsigned int *)(a1 + 8)];
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.getter in conformance CBDiscovery()
{
  return [v0 discoveryFlags];
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.setter in conformance CBDiscovery( uint64_t a1)
{
  return [v1 setDiscoveryFlags:a1];
}

id (*protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery( void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = [v1 discoveryFlags];
  return protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery;
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery( uint64_t a1)
{
  return [*(id *)(a1 + 8) setDiscoveryFlags:*(void *)a1];
}

uint64_t (*protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery( void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = CBDiscovery.deviceLost.modify(v2);
  return protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery;
}

uint64_t (*protocol witness for BluetoothScannerDiscoveryEngine.deviceFound.modify in conformance CBDiscovery( void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = CBDiscovery.deviceFound.modify(v2);
  return protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery;
}

void protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery( void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t protocol witness for BluetoothScannerDiscoveryEngine.activate() in conformance CBDiscovery()
{
  uint64_t v2 = v1 + 2;
  v1[2] = v1;
  v1[3] = protocol witness for BluetoothScannerDiscoveryEngine.activate() in conformance CBDiscovery;
  uint64_t v3 = swift_continuation_init(v1 + 2, 1LL);
  v1[10] = _NSConcreteStackBlock;
  uint64_t v4 = v1 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  void v4[3] = &block_descriptor_62;
  void v4[4] = v3;
  [v0 activateWithCompletion:v4];
  return swift_continuation_await(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 48)) {
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

id protocol witness for BluetoothScannerDiscoveryEngine.invalidate() in conformance CBDiscovery()
{
  return [v0 invalidate];
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      id v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      id v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?, Never>>);
      uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 3);
      id v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      id v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32]) {
          memmove(v14, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BluetoothScannerDiscoveryEngineDevice>);
      uint64_t v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
      uint64_t v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[88 * v8 + 32]) {
          memmove(v13, a4 + 32, 88 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BluetoothScanner.Device>);
      uint64_t v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
      uint64_t v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[104 * v8 + 32]) {
          memmove(v13, a4 + 32, 104 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  id v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice>);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = _swift_stdlib_malloc_size(v11);
      void v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      id v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      id v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *outlined release of BluetoothScannerDiscoveryEngineDevice(void *a1)
{
  uint64_t v3 = (void *)a1[3];
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRelease(a1[1]);

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_OWORD *outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t *outlined retain of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t *a1)
{
  return a1;
}

uint64_t specialized BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  unint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v40 = &_swiftEmptyArrayStorage;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
  CurrentSubject.init(wrappedValue:)(&v40, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17, v16, v12);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(a2 + 24) = a4;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  swift_unknownObjectRetain(a1);
  v19(20LL, a3, a4);
  uint64_t v20 = swift_allocObject(&unk_1000CBC10, 32LL, 7LL);
  *(void *)(v20 + 24) = a4;
  swift_unknownObjectWeakInit(v20 + 16, a1);
  uint64_t v21 = type metadata accessor for AssertionManager();
  char v22 = (void *)swift_allocObject(v21, 48LL, 7LL);
  uint64_t v23 = type metadata accessor for Lock(0LL);
  uint64_t v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  void v22[4] = Lock.init()(v24);
  v22[5] = 0LL;
  void v22[2] = partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:);
  v22[3] = v20;
  *(void *)(a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion) = v22;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType(v25);
  uint64_t v28 = swift_allocObject(&unk_1000CBBC0, 24LL, 7LL);
  swift_weakInit(v28 + 16);
  unsigned __int8 v29 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v26 + 96);
  swift_unknownObjectRetain(v25);
  swift_retain();
  v29(partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:), v28, ObjectType, v26);
  swift_release(v28);
  swift_unknownObjectRelease(v25);
  uint64_t v30 = *(void *)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 24);
  uint64_t v32 = swift_getObjectType(v30);
  uint64_t v33 = swift_allocObject(&unk_1000CBBC0, 24LL, 7LL);
  swift_weakInit(v33 + 16);
  unint64_t v34 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v31 + 72);
  swift_unknownObjectRetain(v30);
  swift_retain();
  v34(partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:), v33, v32, v31);
  swift_release(v33);
  swift_unknownObjectRelease(v30);
  uint64_t v35 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v11, 1LL, 1LL, v35);
  uint64_t v36 = (void *)swift_allocObject(&unk_1000CBC38, 40LL, 7LL);
  v36[2] = 0LL;
  v36[3] = 0LL;
  v36[4] = a2;
  swift_retain();
  uint64_t v37 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v11,  (uint64_t)&async function pointer to partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:),  (uint64_t)v36);
  swift_unknownObjectRelease(a1);
  swift_release(v37);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 104 * a1 + 32;
  unint64_t v6 = a3 + 104 * v4;
  if (v5 >= v6 || v5 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 88 * a1 + 32;
  unint64_t v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  uint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v3 = 0LL;
  uint64_t v4 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v19 = v2;
  do
  {
    uint64_t v5 = *(void *)(v2 + v3 + 40);
    uint64_t v21 = *(void *)(v2 + v3 + 32);
    char v22 = v4;
    unint64_t v6 = *(void **)(v2 + v3 + 56);
    uint64_t v7 = *(void *)(v2 + v3 + 64);
    uint64_t v8 = *(void *)(v2 + v3 + 72);
    int v26 = *(_DWORD *)(v2 + v3 + 80);
    uint64_t v9 = *(void *)(v2 + v3 + 104);
    uint64_t v24 = *(void *)(v2 + v3 + 96);
    uint64_t v25 = *(void *)(v2 + v3 + 88);
    char v23 = *(_BYTE *)(v2 + v3 + 112);
    char v20 = *(_BYTE *)(v2 + v3 + 48);
    uint64_t v10 = swift_allocObject(&unk_1000CBBC0, 24LL, 7LL);
    swift_weakInit(v10 + 16);
    uint64_t v11 = swift_allocObject(&unk_1000CBBE8, 32LL, 7LL);
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = partial apply for closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged();
    *(void *)(v11 + 24) = v10;
    uint64_t v28 = v6;
    id v12 = v6;
    swift_bridgeObjectRetain(v5);
    uint64_t v27 = v7;
    uint64_t v13 = v7;
    uint64_t v14 = v8;
    uint64_t v4 = v22;
    outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v13, v14);
    swift_bridgeObjectRetain(v9);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
    }
    unint64_t v16 = *((void *)v4 + 2);
    unint64_t v15 = *((void *)v4 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1,  v4);
    }
    *((void *)v4 + 2) = v16 + 1;
    uint64_t v17 = &v4[104 * v16];
    *((void *)v17 + 4) = v21;
    *((void *)v17 + 5) = v5;
    v17[48] = v20;
    *((void *)v17 + 7) = v28;
    *((void *)v17 + 8) = v27;
    *((void *)v17 + 9) = v14;
    *((_DWORD *)v17 + 20) = v26;
    *((void *)v17 + 11) = v25;
    *((void *)v17 + 12) = v24;
    *((void *)v17 + 13) = v9;
    v17[112] = v23;
    v3 += 88LL;
    *((void *)v17 + 15) = thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)partial apply;
    *((void *)v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
    --v1;
    uint64_t v2 = v19;
  }

  while (v1);
  swift_bridgeObjectRelease(v19);
  return v4;
}

void specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 stableIdentifier];
  BOOL v5 = (BOOL)v4;
  if (!v4)
  {

    uint64_t v13 = 0LL;
    uint64_t v8 = 0LL;
    id v14 = 0LL;
    uint64_t v10 = 0LL;
LABEL_7:
    uint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    unsigned __int8 v20 = 0;
    goto LABEL_15;
  }

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;

  id v9 = [a1 accountID];
  uint64_t v10 = v9;
  if (!v9)
  {
    swift_bridgeObjectRelease(v8);

    uint64_t v13 = 0LL;
    uint64_t v8 = 0LL;
    BOOL v5 = 0LL;
    id v14 = 0LL;
    goto LABEL_7;
  }

  uint64_t v28 = v6;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v26 = v12;
  uint64_t v27 = v11;

  BOOL v5 = ([a1 nearbyInfoV2Flags] & 4) != 0
    || [a1 nearbyInfoV2InvitationCounter] != 0;
  unsigned int v21 = [a1 nearbyInfoV2InvitationCounter];
  unint64_t v16 = (unint64_t)[a1 nearbyInfoV2DecryptedFlags] & 1;
  if (([a1 deviceFlags] & 0x80) != 0)
  {
    uint64_t v10 = 0LL;
    uint64_t v15 = 0LL;
  }

  else
  {
    id v22 = [a1 contactID];
    if (v22)
    {
      char v23 = v22;
      uint64_t v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v15 = v24;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v15 = 1LL;
    }
  }

  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample,  &OBJC_CLASS___NIBluetoothSample_ptr);
  id v25 = a1;
  id v14 = NIBluetoothSample.init(with:)(v25);
  uint64_t v17 = v21;
  unsigned __int8 v20 = [v25 nearbyInfoV2InvitationRouteType];

  uint64_t v18 = v27;
  uint64_t v13 = v28;
  uint64_t v19 = v26;
LABEL_15:
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v18;
  *(void *)(a2 + 72) = v19;
  *(_BYTE *)(a2 + 80) = v20;
}

uint64_t type metadata accessor for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IgnoreEquatable);
}

uint64_t sub_10004C698()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out AssertionManager.Assertion?)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for closure #1 in CBDiscovery.deviceLost.setter(void *a1)
{
  return closure #1 in CBDiscovery.deviceLost.setter(a1, *(void (**)(_BYTE *))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004C734()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004C758()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_release);
}

void partial apply for closure #1 in CBDiscovery.deviceFound.setter(void *a1)
{
}

uint64_t sub_10004C770()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_release);
}

uint64_t base witness table accessor for Equatable in IgnoreHashable<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for IgnoreHashable<A>, a1);
}

uint64_t sub_10004C794@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain(v3);
}

uint64_t sub_10004C7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(void *)(a2 + 96);
  swift_retain(v3);
  uint64_t result = swift_release(v5);
  *(void *)(a2 + 88) = v4;
  *(void *)(a2 + 96) = v3;
  return result;
}

uint64_t sub_10004C7E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10004C810(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_10004C840@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10004C870(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_10004C8A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = type metadata accessor for IgnoreHashable(0LL, *(void *)(a2 + a1 - 8), a2, a3);
  return IgnoreHashable.wrappedValue.getter(v5, v6, v7, a4);
}

uint64_t sub_10004C8DC()
{
  return 8LL;
}

void *sub_10004C8E8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_10004C8F4(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

void sub_10004C900(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

id sub_10004C90C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 bleScanRate];
  *a2 = (_DWORD)result;
  return result;
}

id sub_10004C93C(unsigned int *a1, id *a2)
{
  return [*a2 setBleScanRate:*a1];
}

uint64_t destroy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != 1) {
    swift_bridgeObjectRelease(v2);
  }
  return swift_bridgeObjectRelease(*(void *)(a1 + 72));
}

uint64_t initializeWithCopy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  id v8 = v5;
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }

  else
  {
    *(void *)(a1 + 32) = *(void *)v6;
    *(void *)(a1 + 40) = v7;
    swift_bridgeObjectRetain(v7);
  }

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  id v8 = v7;

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a2 + 40);
  if (v9 != 1)
  {
    if (v10 != 1)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v9);
      goto LABEL_8;
    }

    outlined release of String?(a1 + 32);
    goto LABEL_6;
  }

  if (v10 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
LABEL_8:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  uint64_t v7 = (void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 != 1)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    if (v9 != 1)
    {
      *(void *)(a1 + 32) = *v7;
      *(void *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v8);
      goto LABEL_6;
    }

    outlined release of String?(a1 + 32);
  }

  *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
LABEL_6:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BluetoothScannerDiscoveryEngineDevice()
{
  return &type metadata for BluetoothScannerDiscoveryEngineDevice;
}

void *initializeBufferWithCopyOfBuffer for BluetoothScannerDiscoveryEngineDevice.ContactInfo( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice.ContactInfo( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice.ContactInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t getEnumTag for BluetoothScannerDiscoveryEngineDevice.ContactInfo(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for BluetoothScannerDiscoveryEngineDevice.ContactInfo( void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for BluetoothScannerDiscoveryEngineDevice.ContactInfo()
{
  return &type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo;
}

uint64_t ObjC metadata update function for BluetoothScanner()
{
  return type metadata accessor for BluetoothScanner(0LL);
}

uint64_t type metadata accessor for BluetoothScanner(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for BluetoothScanner;
  if (!type metadata singleton initialization cache for BluetoothScanner) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BluetoothScanner);
  }
  return result;
}

void type metadata completion function for BluetoothScanner(uint64_t a1)
{
  v4[0] = &unk_1000AC478;
  type metadata accessor for CurrentSubject<[BluetoothScanner.Device]>(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void type metadata accessor for CurrentSubject<[BluetoothScanner.Device]>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
    unint64_t v3 = type metadata accessor for CurrentSubject(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
    }
  }

uint64_t destroy for BluetoothScanner.Device(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != 1) {
    swift_bridgeObjectRelease(v2);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  return swift_release(*(void *)(a1 + 96));
}

uint64_t initializeWithCopy for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  id v8 = v5;
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }

  else
  {
    *(void *)(a1 + 32) = *(void *)v6;
    *(void *)(a1 + 40) = v7;
    swift_bridgeObjectRetain(v7);
  }

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  id v8 = v7;

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a2 + 40);
  if (v9 != 1)
  {
    if (v10 != 1)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v9);
      goto LABEL_8;
    }

    outlined release of String?(a1 + 32);
    goto LABEL_6;
  }

  if (v10 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
LABEL_8:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v15;
  swift_retain();
  swift_release(v17);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  __int128 v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  uint64_t v7 = (void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 != 1)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    if (v9 != 1)
    {
      *(void *)(a1 + 32) = *v7;
      *(void *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v8);
      goto LABEL_6;
    }

    outlined release of String?(a1 + 32);
  }

  *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
LABEL_6:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScanner.Device(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BluetoothScanner.Device(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BluetoothScanner.Device()
{
  return &type metadata for BluetoothScanner.Device;
}

uint64_t type metadata instantiation function for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t type metadata completion function for IgnoreEquatable(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v4, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IgnoreEquatable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }

  return v3;
}

uint64_t destroy for IgnoreHashable(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for IgnoreHashable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for IgnoreHashable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for IgnoreHashable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for IgnoreHashable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for IgnoreEquatable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_10004D5D4 + 4 * byte_1000AC300[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for IgnoreEquatable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = &dword_100000004;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for IgnoreHashable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IgnoreHashable);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice) -> (@out ())( uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 48);
  void v6[2] = *(_OWORD *)(a1 + 32);
  void v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  char v7 = *(_BYTE *)(a1 + 80);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return v2(v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice?) -> (@out ())( uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( a1,  (uint64_t)v4,  &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
  return v2(v4);
}

double outlined copy of BluetoothScannerDiscoveryEngineDevice?( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    id v13 = a4;
    swift_bridgeObjectRetain(a2);
    outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(a5, a6);
    *(void *)&double result = swift_bridgeObjectRetain(a10).n128_u64[0];
  }

  return result;
}

uint64_t outlined retain of BluetoothScannerDiscoveryEngineDevice?( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 80);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v4);
  return a1;
}

uint64_t outlined consume of BluetoothScannerDiscoveryEngineDevice?( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

    outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(a5, a6);
    return swift_bridgeObjectRelease(a10);
  }

  return result;
}

uint64_t outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 72);
  id v6 = *(id *)(a1 + 24);
  swift_bridgeObjectRetain(v2);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10004DD98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()()
{
  return closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()(v0);
}

uint64_t sub_10004DDC4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #1 in BluetoothScanner.init(discoveryEngine:)(a1, v1);
}

uint64_t partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #2 in BluetoothScanner.init(discoveryEngine:)(a1, v1);
}

uint64_t partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #3 in BluetoothScanner.init(discoveryEngine:)(a1, v1);
}

uint64_t sub_10004DE00()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t objectdestroy_29Tm(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1000D5F04);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v3[4] = v2;
  return swift_task_switch(closure #4 in BluetoothScanner.init(discoveryEngine:), 0LL, 0LL);
}

void key path setter for NearbyGroupHostManager.idsService : NearbyGroupHostManager(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 112, v6, 1LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 112);
  *(void *)(v3 + 112) = v2;
  id v5 = v2;
}

id NearbyGroupHostManager.idsService.getter()
{
  return *(id *)(v0 + 112);
}

void NearbyGroupHostManager.idsService.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = a1;
}

uint64_t (*NearbyGroupHostManager.idsService.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t property wrapper backing initializer of NearbyGroupHostManager.groups(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupHost]);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t key path getter for NearbyGroupHostManager.groups : NearbyGroupHostManager@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v5 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  uint64_t result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t key path setter for NearbyGroupHostManager.groups : NearbyGroupHostManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v5 = swift_getKeyPath(&unk_1000AC528);
  uint64_t v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t NearbyGroupHostManager.groups.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v2 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t NearbyGroupHostManager.groups.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v4 = swift_getKeyPath(&unk_1000AC528);
  uint64_t v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*NearbyGroupHostManager.groups.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000AC528);
  void v3[5] = v5;
  void v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path getter for NearbyGroupHostManager.$groups : NearbyGroupHostManager(void *a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t key path setter for NearbyGroupHostManager.$groups : NearbyGroupHostManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  BOOL v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v7, v10);
  unsigned int v12 = &v18[-v11 - 8];
  id v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v13(&v18[-v11 - 8], a1, v4);
  uint64_t v14 = *a2;
  v13(v9, (uint64_t)v12, v4);
  swift_beginAccess( v14 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups,  v18,  33LL,  0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.setter(v9, v15);
  swift_endAccess(v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t NearbyGroupHostManager.$groups.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t NearbyGroupHostManager.$groups.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups,  v11,  33LL,  0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.setter(v7, v8);
  swift_endAccess(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*NearbyGroupHostManager.$groups.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t key path setter for NearbyGroupHostManager.groupStateListeners : NearbyGroupHostManager( uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t NearbyGroupHostManager.groupStateListeners.getter()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t NearbyGroupHostManager.groupStateListeners.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*NearbyGroupHostManager.groupStateListeners.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t key path setter for NearbyGroupHostManager.idsMessageListenerTask : NearbyGroupHostManager( uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  swift_retain(v2);
  return swift_release(v4);
}

uint64_t NearbyGroupHostManager.idsMessageListenerTask.getter()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask,  v3,  0LL,  0LL);
  return swift_retain(*v1);
}

uint64_t NearbyGroupHostManager.idsMessageListenerTask.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*NearbyGroupHostManager.idsMessageListenerTask.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHostManager.abcReporter.getter()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter));
}

uint64_t NearbyGroupHostManager.__allocating_init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  NearbyGroupHostManager.init(serviceName:)(a1, a2);
  return v5;
}

void NearbyGroupHostManager.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v28[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  id v13 = (char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v3);
  uint64_t v14 = v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  v28[0] = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupHost]);
  Published.init(initialValue:)(v28, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14, v13, v9);
  *(void *)(v3
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners) = &_swiftEmptyDictionarySingleton;
  *(void *)(v3
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask) = 0LL;
  uint64_t v16 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  uint64_t v17 = type metadata accessor for ABCReporter(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(void *)(v3 + vswift_unknownObjectWeakDestroy(v0 + 16) = ABCReporter.init(domain:type:)( 0xD000000000000017LL,  0x80000001000AF390LL,  0xD000000000000016LL,  0x80000001000AC530LL);
  id v18 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v20 = [v18 initWithService:v19];

  if (v20)
  {
    unsigned int v21 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbyGroupHostIDSService());
    *(void *)(v3 + 112) = specialized NearbyGroupHostIDSService.init(idsService:)(v20, v21);
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v8, 1LL, 1LL, v22);
    char v23 = (void *)swift_allocObject(&unk_1000CBC98, 40LL, 7LL);
    uint64_t v23[2] = 0LL;
    v23[3] = 0LL;
    v23[4] = v3;
    swift_retain(v3);
    uint64_t v24 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.init(serviceName:),  (uint64_t)v23);
    id v25 = (uint64_t *)(v3
                    + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
    swift_beginAccess( v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask,  v28,  1LL,  0LL);
    uint64_t v26 = *v25;
    *id v25 = v24;
    swift_release(v26);
  }

  else
  {
    __break(1u);
  }

uint64_t closure #1 in NearbyGroupHostManager.init(serviceName:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000D5F5C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return NearbyGroupHostManager.listenForEvents()();
}

uint64_t NearbyGroupHostManager.listenForEvents()()
{
  v1[16] = v0;
  unint64_t v2 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[17] = swift_task_alloc(v2);
  v1[18] = swift_task_alloc(v2);
  unint64_t v3 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[19] = swift_task_alloc(v3);
  v1[20] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0LL);
  v1[21] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0LL);
  v1[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[23] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[24] = swift_task_alloc(v7);
  v1[25] = swift_task_alloc(v7);
  v1[26] = swift_task_alloc(v7);
  v1[27] = swift_task_alloc(v7);
  v1[28] = swift_task_alloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v1[29] = v8;
  v1[30] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(NearbyGroupHostManager.listenForEvents(), v0, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = v0[16];
  swift_beginAccess(v1 + 112, v0 + 6, 0LL, 0LL);
  unint64_t v2 = *(void *)(*(void *)(v1 + 112)
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages);
  v0[9] = v2;
  unint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v4 = swift_allocObject(v3, 80LL, 7LL);
  swift_retain();
  uint64_t v5 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v4 + 24) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = 0LL;
  *(void *)(v4 + 72) = static Subscribers.Demand.none.getter();
  *uint64_t v5 = 0;
  v0[10] = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  unint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v8 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner,  (uint64_t)&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner);
  Publisher.subscribe<A>(_:)(v0 + 10, v6, v3, v7, v8);
  swift_release(v2);
  v0[13] = v4;
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyGroupHostManager and conformance NearbyGroupHostManager,  type metadata accessor for NearbyGroupHostManager,  (uint64_t)&protocol conformance descriptor for NearbyGroupHostManager);
  return swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = v0[13];
  v0[31] = v1;
  unint64_t v2 = swift_task_alloc(32LL);
  v0[32] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v0 + 13;
  unint64_t v3 = async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = NearbyGroupHostManager.listenForEvents();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[30],  &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(),  v2,  _s44com_apple_SharePlay_NearbyInvitationsService18_PublisherElementsV8IteratorV4next6OutputQzSgyYaFyyYbXEfU_7Combine03AnyH0VyAA0E19GroupHostIDSServiceC12MessageEventO_AN0R7ContextVts5NeverOG_Tg5TA_0,  v1,  0LL,  0LL,  v0[29]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(*(void *)v0 + 256LL);
  unint64_t v2 = *(void *)(*(void *)v0 + 248LL);
  unint64_t v3 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 264LL));
  swift_release(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(NearbyGroupHostManager.listenForEvents(), v3, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v1 = *(void *)(v0 + 240);
  unint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    swift_release(*(void *)(v0 + 104));
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    unint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    uint64_t v5 = swift_retain_n(v3);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    uint64_t v9 = static os_log_type_t.error.getter(v6, v7, v8);
    uint64_t v10 = os_log_type_enabled(v6, v9);
    uint64_t v11 = *(void *)(v0 + 128);
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v13 = swift_slowAlloc(32LL, -1LL);
      int v43 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v0 + 88) = v11;
      uint64_t v14 = type metadata accessor for NearbyGroupHostManager(0LL);
      swift_retain();
      uint64_t v15 = String.init<A>(reflecting:)(v0 + 88, v14);
      uint64_t v17 = v16;
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 4, v12 + 12);
      swift_release_n(v11);
      swift_bridgeObjectRelease(v17);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v9,  "%s stopped listening for incoming messages. This shouldn't ever happen until dealloc.",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v11);
    }

    uint64_t v32 = *(void *)(v0 + 216);
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v35 = *(void *)(v0 + 200);
    unint64_t v34 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 192);
    BOOL v38 = *(void *)(v0 + 160);
    uint64_t v37 = *(void *)(v0 + 168);
    uint64_t v40 = *(void *)(v0 + 144);
    uint64_t v39 = *(void *)(v0 + 152);
    os_log_type_t v42 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    id v18 = *(void *)(v0 + 224);
    NSString v19 = *(void **)(v1 + *(int *)(v2 + 48));
    *(void *)(v0 + 272) = v19;
    id v20 = outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v1,  v18,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    unsigned int v21 = voucher_copy(v20);
    *(void *)(v0 + 280) = v21;
    if (v19)
    {
      uint64_t v22 = v19;
      char v23 = (void *)voucher_adopt();
    }

    uint64_t v24 = *(void *)(v0 + 216);
    id v25 = *(void *)(v0 + 176);
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( *(void *)(v0 + 224),  v24,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
    uint64_t v27 = *(void *)(v0 + 216);
    if (EnumCaseMultiPayload == 1)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v27,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      if (v21)
      {
        uint64_t v28 = *(id *)(v0 + 280);
        unsigned __int8 v29 = (void *)voucher_adopt();
      }

      uint64_t v30 = *(void *)(v0 + 224);

      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v30,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      return swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0LL, 0LL);
    }

    else
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v27,  *(void *)(v0 + 168),  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      uint64_t v41 = (void *)swift_task_alloc(dword_1000D5F74);
      *(void *)(v0 + 288) = v41;
      void *v41 = v0;
      v41[1] = NearbyGroupHostManager.listenForEvents();
      return NearbyGroupHostManager.handle(_:)(*(void *)(v0 + 168));
    }
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = NearbyGroupHostManager.listenForEvents();
  }
  else {
    uint64_t v4 = NearbyGroupHostManager.listenForEvents();
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 280);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( *(void *)(v0 + 168),  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  if (v1)
  {
    unint64_t v2 = *(id *)(v0 + 280);
    unint64_t v3 = (void *)voucher_adopt();
  }

  uint64_t v4 = *(void *)(v0 + 224);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v4,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_s *v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t *v59;
  uint64_t v1 = *(void *)(v0 + 296);
  unint64_t v2 = *(void *)(v0 + 160);
  unint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( *(void *)(v0 + 168),  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  static TaskPriority.background.getter(v5);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  unint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v2, 0LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000CBCC0, 48LL, 7LL);
  void v8[2] = 0LL;
  uint64_t v9 = v8 + 2;
  v8[3] = 0LL;
  v8[4] = v4;
  void v8[5] = v1;
  outlined init with copy of (String, Any)( v2,  v3,  (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1LL, v6);
  swift_retain();
  uint64_t v10 = swift_errorRetain(v1);
  uint64_t v11 = *(void *)(v0 + 152);
  if ((_DWORD)v2 == 1)
  {
    outlined destroy of Any?( *(void *)(v0 + 152),  (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v12 = 0LL;
    id v13 = 0LL;
    uint64_t v14 = 4096LL;
  }

  else
  {
    uint64_t v15 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
    uint64_t v14 = v15 | 0x1000LL;
    uint64_t v16 = *v9;
    if (*v9)
    {
      uint64_t v17 = v8[3];
      uint64_t ObjectType = swift_getObjectType(*v9);
      swift_unknownObjectRetain(v16);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      id v13 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v12 = 0LL;
      id v13 = 0LL;
    }
  }

  id v20 = swift_allocObject(&unk_1000CBCE8, 32LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = &async function pointer to partial apply for closure #1 in NearbyGroupHostManager.listenForEvents();
  *(void *)(v20 + 24) = v8;
  if (v13 | v12)
  {
    unsigned int v21 = v0 + 16;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = v12;
    *(void *)(v0 + 40) = v13;
  }

  else
  {
    unsigned int v21 = 0LL;
  }

  uint64_t v22 = *(void *)(v0 + 160);
  char v23 = swift_task_create( v14,  v21,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v20);
  swift_release(v23);
  outlined destroy of Any?(v22, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v24 = *(void *)(v0 + 296);
  id v25 = *(void *)(v0 + 224);
  uint64_t v26 = *(void *)(v0 + 208);
  uint64_t v27 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v27, (uint64_t)static Log.host);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v25,  v26,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  swift_errorRetain(v24);
  uint64_t v28 = swift_errorRetain(v24);
  unsigned __int8 v29 = (os_log_s *)Logger.logObject.getter(v28);
  uint64_t v32 = static os_log_type_t.error.getter(v29, v30, v31);
  if (os_log_type_enabled(v29, v32))
  {
    char v59 = (uint64_t *)(v0 + 112);
    uint64_t v33 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 176);
    unint64_t v34 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 144);
    BOOL v38 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    *(void *)(v0 + 112) = v39;
    *(_DWORD *)BOOL v38 = 136315394;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v33,  v37,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0LL, 1LL, v35);
    outlined init with copy of (String, Any)( v37,  v36,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1LL, v35) == 1)
    {
      uint64_t v40 = 0xE300000000000000LL;
      uint64_t v41 = 7104878LL;
    }

    else
    {
      uint64_t v45 = *(void *)(v0 + 192);
      uint64_t v44 = *(void *)(v0 + 200);
      uint64_t v46 = *(void *)(v0 + 176);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( *(void *)(v0 + 136),  v44,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v44,  v45,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      uint64_t v41 = String.init<A>(reflecting:)(v45, v46);
      uint64_t v40 = v47;
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v44,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    }

    uint64_t v48 = *(void *)(v0 + 296);
    uint64_t v49 = *(void *)(v0 + 208);
    outlined destroy of Any?( *(void *)(v0 + 144),  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
    *(void *)(v38 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, v59);
    swift_bridgeObjectRelease(v40);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v49,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    *(_WORD *)(v38 + 12) = 2080;
    *(void *)(v0 + 120) = v48;
    swift_errorRetain(v48);
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v51 = String.init<A>(reflecting:)(v0 + 120, v50);
    uint64_t v53 = v52;
    *(void *)(v38 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v59);
    swift_bridgeObjectRelease(v53);
    swift_errorRelease(v48);
    swift_errorRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v29, v32, "Failed to handle event %s, reason: %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);

    swift_errorRelease(v48);
  }

  else
  {
    os_log_type_t v42 = *(void *)(v0 + 296);
    int v43 = *(void *)(v0 + 208);
    swift_errorRelease(v42);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v43,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    swift_errorRelease(v42);
    swift_errorRelease(v42);
  }

  uint64_t v54 = *(void **)(v0 + 280);
  if (v54)
  {
    uint64_t v55 = v54;
    unint64_t v56 = (void *)voucher_adopt();
  }

  uint64_t v57 = *(void *)(v0 + 224);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v57,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0LL, 0LL);
}

uint64_t closure #1 in NearbyGroupHostManager.listenForEvents()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  void v5[4] = a5;
  void v5[5] = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  return swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), a4, 0LL);
}

uint64_t closure #1 in NearbyGroupHostManager.listenForEvents()()
{
  v0[6] = *(void *)(v0[3] + v0[5]);
  return swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  os_log_s *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t (*v21)(uint64_t, double);
  uint64_t v1 = *(void *)(v0 + 32);
  _StringGuts.grow(_:)(77LL);
  v2._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
  v2._uint64_t object = (void *)0x80000001000B0810LL;
  String.append(_:)(v2);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  swift_errorRetain(v1);
  unint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v4._uint64_t countAndFlagsBits = String.init<A>(reflecting:)(v0 + 16, v3);
  uint64_t object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  uint64_t v6 = [(id)objc_opt_self(NSBundle) mainBundle];
  unint64_t v7 = [v6 bundleIdentifier];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0xD00000000000001DLL;
    uint64_t v10 = 0x80000001000B0860LL;
  }

  uint64_t v11 = dispatch thunk of ABCReporter.signature(subType:context:process:)( 0xD00000000000001ALL,  0x80000001000B0880LL,  0LL,  0xE000000000000000LL,  v8,  v10);
  *(void *)(v0 + 56) = v11;
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_bridgeObjectRelease(v10);
  if (v11)
  {
    *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #1 in NearbyGroupHostManager.listenForEvents();
    return v21(v11, 0.0);
  }

  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once(&one-time initialization token for abcReporter, one-time initialization function for abcReporter);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    NSString v19 = static os_log_type_t.error.getter(v16, v17, v18);
    if (os_log_type_enabled(v16, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v19,  "Failed to generate signature for create new NearbyGroupHost failure",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t closure #1 in NearbyGroupHostManager.listenForEvents()(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 64));
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of (String, Any)( a1,  (uint64_t)v9,  (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  if ((_DWORD)v12 == 1)
  {
    outlined destroy of Any?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v13 = 4096LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14)
    {
LABEL_3:
      uint64_t v15 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v19 = v18;
      swift_unknownObjectRelease(v14);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v13 = v20 | 0x1000LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14) {
      goto LABEL_3;
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v19 = 0LL;
LABEL_6:
  uint64_t v21 = swift_allocObject(&unk_1000CBE68, 32LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  if (v19 | v17)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    uint64_t v22 = v24;
    __int128 v24[2] = v17;
    uint64_t v24[3] = v19;
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  return swift_task_create( v13,  v22,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_52Tu,  v21);
}

uint64_t NearbyGroupHostManager.handle(_:)(uint64_t a1)
{
  v2[3] = a1;
  void v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v5 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  _BYTE v2[8] = swift_task_alloc(v5);
  void v2[9] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0LL);
  v2[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[11] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v8);
  v2[13] = swift_task_alloc(v8);
  v2[14] = swift_task_alloc(v8);
  return swift_task_switch(NearbyGroupHostManager.handle(_:), v1, 0LL);
}

uint64_t NearbyGroupHostManager.handle(_:)()
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[14];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  uint64_t v4 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v1,  v2,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[14];
  if (v7)
  {
    uint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v11 = v0[8];
    uint64_t v12 = v0[9];
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v13 = 136315138;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v8,  v12,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v10);
    outlined init with copy of (String, Any)( v12,  v11,  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1LL, v10) == 1)
    {
      unint64_t v14 = 0xE300000000000000LL;
      uint64_t v15 = 7104878LL;
    }

    else
    {
      uint64_t v17 = v0[12];
      uint64_t v16 = v0[13];
      uint64_t v18 = v0[10];
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v0[8],  v16,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v16,  v17,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      uint64_t v15 = String.init<A>(reflecting:)(v17, v18);
      unint64_t v14 = v19;
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v16,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    }

    uint64_t v20 = v0[14];
    outlined destroy of Any?( v0[9],  &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v14);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v20,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Received request to create group for initialization: %s",  v13,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v0[14],  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  }

  __int128 v25 = *(_OWORD *)(v0 + 3);
  (*(void (**)(void, void, void))(v0[6] + 16LL))(v0[7], v0[3], v0[5]);
  uint64_t v21 = swift_task_alloc(32LL);
  v0[15] = v21;
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  uint64_t v22 = (void *)swift_task_alloc(dword_1000D5FAC);
  v0[16] = v22;
  *uint64_t v22 = v0;
  v22[1] = NearbyGroupHostManager.handle(_:);
  return NearbyGroupHostManager.createGroup(id:generator:)( v0[7],  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.handle(_:),  v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v5 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroupHostManager.handle(_:)(void *a1)
{
  uint64_t v4 = *(void *)(*v2 + 128);
  uint64_t v5 = *v2;
  *(void *)(v5 + 136) = v1;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 120);
  if (v1)
  {
    uint64_t v7 = *(void *)(v5 + 32);
    (*(void (**)(void, void))(*(void *)(v5 + 48) + 8LL))(*(void *)(v5 + 56), *(void *)(v5 + 40));
    swift_task_dealloc(v6);
    return swift_task_switch(NearbyGroupHostManager.handle(_:), v7, 0LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v5 + 104);
    uint64_t v9 = *(void *)(v5 + 112);
    uint64_t v11 = *(void *)(v5 + 96);
    uint64_t v12 = *(void *)(v5 + 72);
    uint64_t v16 = *(void *)(v5 + 64);
    uint64_t v13 = *(void *)(v5 + 48);
    uint64_t v14 = *(void *)(v5 + 56);
    uint64_t v15 = *(void *)(v5 + 40);

    swift_task_dealloc(v6);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v16);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }

uint64_t closure #1 in NearbyGroupHostManager.handle(_:)(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  void v2[6] = a2;
  uint64_t v4 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0LL);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in NearbyGroupHostManager.handle(_:), a2, 0LL);
}

uint64_t closure #1 in NearbyGroupHostManager.handle(_:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  type metadata accessor for NearbyGroupHost(0LL);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v3,  v1,  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  swift_beginAccess(v2 + 112, v0 + 16, 0LL, 0LL);
  uint64_t v4 = NearbyGroupHost.__allocating_init(remoteInitialization:idsService:localMemberToken:)( v1,  (char *)*(id *)(v2 + 112),  0LL,  0LL);
  swift_task_dealloc(*(void *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t NearbyGroupHostManager.removeGroup(groupID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v44[-v11];
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  uint64_t v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1, v4);
  uint64_t v15 = swift_retain_n(v1);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v48 = a1;
    uint64_t v20 = v19;
    uint64_t v46 = swift_slowAlloc(64LL, -1LL);
    v51[0] = v46;
    *(_DWORD *)uint64_t v20 = 136315394;
    int v45 = v18;
    uint64_t v49 = v2;
    uint64_t v21 = type metadata accessor for NearbyGroupHostManager(0LL);
    uint64_t v47 = v14;
    uint64_t v22 = v21;
    swift_retain();
    uint64_t v23 = String.init<A>(reflecting:)(&v49, v22);
    unint64_t v25 = v24;
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v25);
    swift_release_n(v2);
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v26 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
    unint64_t v29 = v28;
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v51);
    uint64_t v14 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v29);
    uint64_t v30 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v30(v12, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  (os_log_type_t)v45,  "%s removing NearbyGroup id: %s",  (uint8_t *)v20,  0x16u);
    uint64_t v31 = v46;
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v32 = v20;
    a1 = v48;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v2);
    uint64_t v30 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v30(v12, v4);
  }

  v14(v9, a1, v4);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v34 = swift_getKeyPath(&unk_1000AC528);
  uint64_t v35 = (void (*)(uint64_t *, void))static Published.subscript.modify(v51, v2, KeyPath, v34);
  uint64_t v36 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v9);
  v30(v9, v4);

  v35(v51, 0LL);
  swift_release(v34);
  swift_release(KeyPath);
  uint64_t v37 = (void *)(v2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess(v37, v51, 0LL, 0LL);
  uint64_t v38 = *v37;
  if (*(void *)(*v37 + 16LL))
  {
    swift_bridgeObjectRetain(*v37);
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v40 & 1) != 0)
    {
      uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
      swift_retain();
      swift_bridgeObjectRelease(v38);
      Task.cancel()();
      swift_release(v41);
    }

    else
    {
      swift_bridgeObjectRelease(v38);
    }
  }

  swift_beginAccess(v37, &v49, 33LL, 0LL);
  uint64_t v42 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess(&v49);
  return swift_release(v42);
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[19] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v8);
  v4[21] = swift_task_alloc(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[22] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v4[23] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  _BYTE v4[24] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v4[25] = v12;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[26] = swift_task_alloc(v13);
  v4[27] = swift_task_alloc(v13);
  v4[28] = swift_task_alloc(v13);
  v4[29] = swift_task_alloc(v13);
  return swift_task_switch(NearbyGroupHostManager.createGroup(id:generator:), v3, 0LL);
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v3 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter((void *)(v0 + 72), v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  uint64_t v4 = *(void *)(v0 + 72);
  if (*(void *)(v4 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 104));
    char v6 = v5;
    swift_bridgeObjectRelease(v4);
    if ((v6 & 1) != 0)
    {
      if (one-time initialization token for host != -1) {
        swift_once(&one-time initialization token for host, one-time initialization function for host);
      }
      uint64_t v7 = *(void *)(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 184);
      uint64_t v9 = *(void *)(v0 + 192);
      uint64_t v10 = *(void *)(v0 + 104);
      uint64_t v11 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v11, (uint64_t)static Log.host);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
      unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v16 = static os_log_type_t.error.getter(v13, v14, v15);
      BOOL v17 = os_log_type_enabled(v13, v16);
      uint64_t v18 = *(void *)(v0 + 208);
      uint64_t v19 = *(void *)(v0 + 184);
      uint64_t v20 = *(void *)(v0 + 192);
      if (v17)
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        v69[0] = v67;
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v19, v22);
        unint64_t v25 = v24;
        *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v21 + 4, v21 + 12);
        swift_bridgeObjectRelease(v25);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v16,  "Trying to create a NearbyGroup with %s when one already exists.",  v21,  0xCu);
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(void, void))(v20 + 8))(*(void *)(v0 + 208), *(void *)(v0 + 184));
      }

      char v57 = 0;
      goto LABEL_17;
    }
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  uint64_t v26 = *(void *)(v0 + 128);
  uint64_t v27 = swift_getKeyPath(&unk_1000AC500);
  uint64_t v28 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter((void *)(v0 + 80), v26, v27, v28);
  swift_release(v27);
  swift_release(v28);
  uint64_t v29 = *(void *)(v0 + 80);
  uint64_t v30 = *(void *)(v29 + 16);
  swift_bridgeObjectRelease(v29);
  specialized NearbyGroupServerBag.numericConfig(for:)(3);
  uint64_t v32 = v31;
  id v33 = [v31 integerValue];

  if (v30 < (uint64_t)v33)
  {
    uint64_t v34 = *(int **)(v0 + 112);
    uint64_t v68 = (uint64_t (*)(void))((char *)v34 + *v34);
    uint64_t v35 = (void *)swift_task_alloc(v34[1]);
    *(void *)(v0 + 240) = v35;
    *uint64_t v35 = v0;
    v35[1] = NearbyGroupHostManager.createGroup(id:generator:);
    return v68();
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v37 = *(void *)(v0 + 216);
  uint64_t v39 = *(void *)(v0 + 184);
  uint64_t v38 = *(void *)(v0 + 192);
  uint64_t v40 = *(void *)(v0 + 104);
  uint64_t v41 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v41, (uint64_t)static Log.host);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v40, v39);
  int v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v46 = static os_log_type_t.error.getter(v43, v44, v45);
  BOOL v47 = os_log_type_enabled(v43, v46);
  uint64_t v48 = *(void *)(v0 + 216);
  uint64_t v49 = *(void *)(v0 + 184);
  uint64_t v50 = *(void *)(v0 + 192);
  if (v47)
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    v69[0] = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v53 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v49, v53);
    unint64_t v56 = v55;
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v56);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v46,  "Failed to create new NearbyGroupHost with %s due to group count limit",  v51,  0xCu);
    char v57 = 1;
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v50 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 184));

    char v57 = 1;
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t, void);
  uint64_t *v10;
  uint64_t *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v34 = *(void *)(v0 + 224);
  uint64_t v38 = *(void *)(v0 + 216);
  uint64_t v39 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v36 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v42 = *(void *)(v0 + 176);
  uint64_t v40 = *(void *)(v0 + 168);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v31 = *(void *)(v0 + 144);
  char v5 = *(void *)(v0 + 128);
  uint64_t v32 = *(void *)(v0 + 136);
  id v33 = *(void *)(v0 + 160);
  uint64_t v41 = v5;
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v30 = *(void (**)(uint64_t))(v3 + 16);
  v30(v2);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v7 = swift_getKeyPath(&unk_1000AC528);
  uint64_t v8 = v1;
  uint64_t v9 = (void (*)(uint64_t, void))static Published.subscript.modify(v0 + 16, v5, KeyPath, v7);
  uint64_t v11 = v10;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  int v43 = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v8, v2, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = *v11;
  *uint64_t v11 = v43;
  swift_bridgeObjectRelease(v13);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v37(v2, v4);
  v9(v0 + 16, 0LL);
  swift_release(KeyPath);
  swift_release(v7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v2, v29, v4);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v42, 1LL, 1LL, v14);
  uint64_t v28 = swift_allocObject(&unk_1000CBD10, 24LL, 7LL);
  uint64_t v15 = swift_weakInit(v28 + 16);
  (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0x130LL))(v15);
  os_log_type_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  v16(v33, v40, v32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v34, v29, v4);
  BOOL v17 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (v35 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v21 = (v20 + v19 + 8) & ~v20;
  uint64_t v22 = swift_allocObject(&unk_1000CBD38, v21 + v36, v17 | v20 | 7);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v22 + 24) = 0LL;
  v16(v22 + v18, v33, v32);
  *(void *)(v22 + v19) = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v22 + v21, v34, v4);
  uint64_t v23 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v42,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.createGroup(id:generator:),  v22);
  unint64_t v24 = (void *)(v41
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess( v41 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners,  v0 + 48,  33LL,  0LL);
  unint64_t v25 = swift_isUniquelyReferenced_nonNull_native(*v24);
  uint64_t v44 = *v24;
  *unint64_t v24 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v2, v25);
  uint64_t v26 = *v24;
  *unint64_t v24 = v44;
  swift_bridgeObjectRelease(v26);
  v37(v2, v4);
  swift_endAccess(v0 + 48);
  swift_task_dealloc(v2);
  swift_task_dealloc(v34);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v42);
  swift_task_dealloc(v40);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 248));
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 240);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v8 = v4[28];
    uint64_t v7 = v4[29];
    uint64_t v10 = v4[26];
    uint64_t v9 = v4[27];
    uint64_t v12 = v4[21];
    uint64_t v11 = v4[22];
    uint64_t v13 = v4[20];
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    uint64_t v15 = v4[16];
    v4[31] = a1;
    return swift_task_switch(NearbyGroupHostManager.createGroup(id:generator:), v15, 0LL);
  }

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  void v6[9] = a6;
  void v6[7] = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v6[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>);
  v6[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator);
  v6[16] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[17] = v12;
  v6[18] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0LL, 0LL);
}

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[8] + 16LL;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  uint64_t v6 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Published<NearbyGroupHost.State>.Publisher and conformance Published<A>.Publisher,  &demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v5, v6);
  AsyncPublisher.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess(v4, v0 + 2, 0LL, 0LL);
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator,  &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  v0[19] = v7;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[20] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 24, v0[16], v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 160));
  if (v0)
  {
    *(void *)(v2 + 168) = v0;
    uint64_t v3 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }

  else
  {
    uint64_t v3 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  *(_BYTE *)(v0 + 193) = *(_BYTE *)(v0 + 192);
  return swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0LL, 0LL);
}

{
  uint64_t v0;
  int v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 193);
  if (v1 == 3) {
    goto LABEL_8;
  }
  if (v1 != 2)
  {
    uint64_t v30 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(void *)(v0 + 184) = v30;
    *uint64_t v30 = v0;
    v30[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 192, *(void *)(v0 + 128), *(void *)(v0 + 152));
  }

  uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 64) + 16LL);
  *(void *)(v0 + 176) = Strong;
  if (!Strong)
  {
LABEL_8:
    uint64_t v26 = *(void *)(v0 + 144);
    uint64_t v27 = *(void *)(v0 + 120);
    uint64_t v28 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 136) + 8LL))(v26, *(void *)(v0 + 128));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v3 = Strong;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  uint64_t v9 = swift_retain_n(v3);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.default.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 80);
  if (v12)
  {
    uint64_t v31 = *(void *)(v0 + 88);
    os_log_type_t v16 = swift_slowAlloc(22LL, -1LL);
    BOOL v17 = swift_slowAlloc(64LL, -1LL);
    uint64_t v32 = v17;
    *(_DWORD *)os_log_type_t v16 = 136315394;
    *(void *)(v0 + 48) = v3;
    uint64_t v18 = type metadata accessor for NearbyGroupHostManager(0LL);
    swift_retain();
    uint64_t v19 = String.init<A>(reflecting:)(v0 + 48, v18);
    uint64_t v21 = v20;
    *(void *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v15, v22);
    unint64_t v25 = v24;
    *(void *)(v16 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v32);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v13, v15);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%s learned that NearbyGroup %s invalidated.",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v3);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }

  return swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), v3, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  *(void *)(v0 + 40) = *(void *)(v0 + 168);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 40, v1, &type metadata for Never, 7LL);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

{
  uint64_t v0;
  NearbyGroupHostManager.removeGroup(groupID:)(*(void *)(v0 + 72));
  return swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0LL, 0LL);
}

{
  void *v0;
  void *v1;
  swift_release(v0[22]);
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 24, v0[16], v0[19]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 184));
  if (v0)
  {
    *(void *)(v2 + 168) = v0;
    uint64_t v3 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }

  else
  {
    uint64_t v3 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t NearbyGroupHostManager.createGroup(with:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  void v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  void v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(NearbyGroupHostManager.createGroup(with:), v1, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 56LL);
  uint64_t v6 = *(void *)(*(void *)v2 + 24LL);
  *(void *)(*(void *)v2 + 64LL) = v1;
  swift_task_dealloc(v5);
  swift_release(v6);
  uint64_t v8 = v4[5];
  uint64_t v7 = v4[6];
  uint64_t v10 = v4[3];
  uint64_t v9 = v4[4];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v11 = NearbyGroupHostManager.createGroup(with:);
  }

  else
  {
    void v4[9] = a1;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v11 = NearbyGroupHostManager.createGroup(with:);
  }

  return swift_task_switch(v11, v10, 0LL);
}

uint64_t NearbyGroupHostManager.createGroup(with:)()
{
  uint64_t v1 = (void *)v0[2];
  NearbyGroupCreationRequest.id.getter();
  uint64_t v2 = unk_1000D5FD4;
  id v3 = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v2);
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = NearbyGroupHostManager.createGroup(with:);
  return v6(v0[6], v0[3], v0[2], v0[3]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  id v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1C8LL))();

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroupHostManager.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t NearbyGroupHostManager.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t NearbyGroupHostManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t specialized _PublisherElements.Iterator.Inner.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v6);
  swift_beginAccess(v0 + 24, v57, 1LL, 0LL);
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = &_swiftEmptyArrayStorage;
  uint64_t v8 = v0 + 32;
  swift_beginAccess(v0 + 32, v56, 0LL, 0LL);
  outlined init with copy of (String, Any)( v0 + 32,  (uint64_t)&v54,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  if (v55 >= 2)
  {
    outlined init with take of PseudonymProtocol(&v54, (uint64_t)&v51);
    if (one-time initialization token for default != -1) {
      swift_once(&one-time initialization token for default, one-time initialization function for default);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    uint64_t v17 = outlined init with copy of PseudonymProtocol((uint64_t)&v51, (uint64_t)v49);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v40 = v6;
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      outlined init with copy of PseudonymProtocol((uint64_t)v49, (uint64_t)&v47);
      outlined init with copy of (String, Any)( (uint64_t)&v47,  (uint64_t)&v45,  &demangling cache variable for type metadata for Subscription?);
      uint64_t v41 = v7;
      if (v46)
      {
        outlined init with take of PseudonymProtocol(&v45, (uint64_t)v43);
        outlined init with copy of PseudonymProtocol((uint64_t)v43, (uint64_t)v42);
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
        uint64_t v23 = String.init<A>(reflecting:)(v42, v22);
        unint64_t v25 = v24;
        __swift_destroy_boxed_opaque_existential_0Tm(v43);
      }

      else
      {
        uint64_t v23 = 7104878LL;
        unint64_t v25 = 0xE300000000000000LL;
      }

      outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for Subscription?);
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      __swift_destroy_boxed_opaque_existential_0Tm(v49);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Handling cancellation by terminating upstream subscription: %s",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      uint64_t v6 = v40;
      uint64_t v7 = v41;
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_0Tm(v49);
    }

    memset(v49, 0, sizeof(v49));
    __int128 v50 = xmmword_1000AC4E0;
    swift_beginAccess(v8, &v47, 33LL, 0LL);
    outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State( (uint64_t)v49,  v8);
    swift_endAccess(&v47);
    os_unfair_lock_unlock(v6);
    __int128 v34 = v53;
    __swift_project_boxed_opaque_existential_1(&v51, v53);
    dispatch thunk of Cancellable.cancel()(v34, *(void *)(*((void *)&v34 + 1) + 8LL));
    uint64_t v35 = *(void *)(v7 + 16);
    if (v35)
    {
      uint64_t v36 = (uint64_t *)(v7 + 32);
      do
      {
        uint64_t v37 = *v36++;
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v5, 1LL, 1LL, v38);
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v5,  *(void *)(*(void *)(v37 + 64) + 40LL),  &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
        swift_continuation_resume(v37);
        --v35;
      }

      while (v35);
    }

    swift_bridgeObjectRelease(v7);
    return __swift_destroy_boxed_opaque_existential_0Tm(&v51);
  }

  else
  {
    if (one-time initialization token for default != -1) {
      swift_once(&one-time initialization token for default, one-time initialization function for default);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    uint64_t v10 = swift_retain_n(v0);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v40 = v6;
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      v43[0] = v39;
      *(_DWORD *)uint64_t v13 = 136315138;
      outlined init with copy of (String, Any)( v8,  (uint64_t)&v51,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
      outlined init with copy of (String, Any)( (uint64_t)&v51,  (uint64_t)v49,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State?);
      uint64_t v41 = v7;
      if ((void)v50 == 2LL)
      {
        uint64_t v14 = 7104878LL;
        unint64_t v15 = 0xE300000000000000LL;
      }

      else
      {
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v49,  (uint64_t)&v47,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        outlined init with copy of (String, Any)( (uint64_t)&v47,  (uint64_t)&v45,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        uint64_t v14 = String.init<A>(reflecting:)(&v45, v26);
        unint64_t v15 = v27;
        outlined destroy of Any?( (uint64_t)&v47,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
      }

      outlined destroy of Any?( (uint64_t)&v51,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State?);
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v13 + 4, v13 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Terminating sequence from state: %s", v13, 0xCu);
      uint64_t v28 = v39;
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      uint64_t v6 = v40;
      uint64_t v7 = v41;
    }

    else
    {

      swift_release_n(v1);
    }

    uint64_t v51 = 0LL;
    v52[0] = 0LL;
    v52[1] = 0LL;
    __int128 v53 = xmmword_1000AC4E0;
    swift_beginAccess(v8, v49, 33LL, 0LL);
    outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State( (uint64_t)&v51,  v8);
    swift_endAccess(v49);
    os_unfair_lock_unlock(v6);
    uint64_t v29 = *(void *)(v7 + 16);
    if (v29)
    {
      uint64_t v30 = (uint64_t *)(v7 + 32);
      do
      {
        uint64_t v31 = *v30++;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v5, 1LL, 1LL, v32);
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v5,  *(void *)(*(void *)(v31 + 64) + 40LL),  &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
        swift_continuation_resume(v31);
        --v29;
      }

      while (v29);
    }

    swift_bridgeObjectRelease(v7);
    return outlined destroy of Any?( (uint64_t)&v54,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  }

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v8);
  swift_beginAccess(a2 + 4, v33, 0LL, 0LL);
  outlined init with copy of (String, Any)( (uint64_t)(a2 + 4),  (uint64_t)&v31,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  if (!v32)
  {
    uint64_t v10 = (char **)(a2 + 3);
    swift_beginAccess(a2 + 3, v28, 33LL, 0LL);
    uint64_t v11 = (char *)a2[3];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    a2[3] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *uint64_t v10 = v11;
    }

    unint64_t v14 = *((void *)v11 + 2);
    unint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
      *uint64_t v10 = v11;
    }

    *((void *)v11 + 2) = v14 + 1;
    *(void *)&v11[8 * v14 + 32] = a1;
    swift_endAccess(v28);
    unint64_t v15 = a2 + 9;
    uint64_t v16 = swift_beginAccess(a2 + 9, v28, 33LL, 0LL);
    uint64_t v17 = a2[9];
    uint64_t v18 = static Subscribers.Demand.unlimited.getter(v16);
    uint64_t v19 = static Subscribers.Demand.== infix(_:_:)(v17, v18);
    if ((v19 & 1) != 0) {
      goto LABEL_12;
    }
    if (v17 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
LABEL_12:
    }
      uint64_t v19 = static Subscribers.Demand.unlimited.getter(v19);
    *unint64_t v15 = v19;
    swift_endAccess(v28);
    os_unfair_lock_unlock(v8);
    return;
  }

  if (v32 == 1)
  {
    os_unfair_lock_unlock(v8);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v7, 1LL, 1LL, v9);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)v7,  *(void *)(*(void *)(a1 + 64) + 40LL),  &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
    swift_continuation_resume(a1);
  }

  else
  {
    outlined init with take of PseudonymProtocol(&v31, (uint64_t)v28);
    uint64_t v20 = (char **)(a2 + 3);
    swift_beginAccess(a2 + 3, v27, 33LL, 0LL);
    uint64_t v21 = (char *)a2[3];
    char v22 = swift_isUniquelyReferenced_nonNull_native(v21);
    a2[3] = v21;
    if ((v22 & 1) == 0)
    {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v21 + 2) + 1LL,  1,  v21);
      *uint64_t v20 = v21;
    }

    unint64_t v24 = *((void *)v21 + 2);
    unint64_t v23 = *((void *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v21);
      *uint64_t v20 = v21;
    }

    *((void *)v21 + 2) = v24 + 1;
    *(void *)&v21[8 * v24 + 32] = a1;
    swift_endAccess(v27);
    os_unfair_lock_unlock(v8);
    uint64_t v25 = v29;
    uint64_t v26 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    dispatch thunk of Subscription.request(_:)(1LL, v25, v26);
    __swift_destroy_boxed_opaque_existential_0Tm(v28);
  }

uint64_t specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()();
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v2[12] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(specialized closure #2 in _PublisherElements.Iterator.next(), 0LL, 0LL);
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()()
{
  *(void *)(v0 + 104) = **(void **)(v0 + 88);
  swift_retain();
  return swift_task_switch(specialized closure #2 in _PublisherElements.Iterator.next(), 0LL, 0LL);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = (void *)v0[13];
  v0[7] = v0[12];
  v0[2] = v0;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  uint64_t v2 = swift_continuation_init(v0 + 2, 0LL);
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v2, v1);
  return swift_continuation_await(v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v1 = *(void *)(*v0 + 96);
  uint64_t v2 = *(void *)(*v0 + 104);
  uint64_t v4 = *v0;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( v1,  *(void *)(*v0 + 80),  &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *specialized NearbyGroupHostIDSService.init(idsService:)(void *a1, char *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v71 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Publishers.PrefetchStrategy(0LL);
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v66 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v10);
  uint64_t v67 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v12);
  uint64_t v63 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v78[3] = (id)type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSService,  &OBJC_CLASS___IDSService_ptr);
  v78[4] = &protocol witness table for IDSService;
  v78[0] = a1;
  uint64_t v22 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService__incomingMessages;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v61 = a2;
  uint64_t v24 = PassthroughSubject.init()();
  uint64_t v65 = (uint64_t)a2;
  uint64_t v60 = v22;
  *(void *)&a2[v22] = v24;
  uint64_t v76 = 0LL;
  unint64_t v77 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(v77);
  uint64_t v76 = (void *)0xD00000000000001ALL;
  unint64_t v77 = 0x80000001000B08A0LL;
  id v25 = [a1 serviceIdentifier];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;
  }

  else
  {
    uint64_t v29 = (void *)0xE700000000000000LL;
    uint64_t v27 = 0x4E574F4E4B4E55LL;
  }

  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  v30._uint64_t countAndFlagsBits = v27;
  v30._uint64_t object = v29;
  String.append(_:)(v30);
  uint64_t v31 = swift_bridgeObjectRelease(v29);
  uint64_t v32 = v76;
  unint64_t v33 = v77;
  static DispatchQoS.unspecified.getter(v31);
  uint64_t v76 = &_swiftEmptyArrayStorage;
  uint64_t v34 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v36 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v35, v36, v14, v34);
  uint64_t v37 = v63;
  (*(void (**)(char *, void, uint64_t))(v62 + 104))( v63,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v64);
  uint64_t v38 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v32, v33, v21, v17, v37, 0LL);
  uint64_t v39 = v61;
  *(void *)&v61[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue] = v38;
  outlined init with copy of PseudonymProtocol( (uint64_t)v78,  (uint64_t)&v39[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service]);
  uint64_t v76 = *(void **)(v65 + v60);
  uint64_t v40 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance PassthroughSubject<A, B>,  &demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  uint64_t v65 = Publisher.eraseToAnyPublisher()(v23, v40);
  uint64_t v76 = (void *)v65;
  uint64_t v42 = v68;
  uint64_t v41 = v69;
  int v43 = v66;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))( v66,  enum case for Publishers.PrefetchStrategy.byRequest(_:),  v69);
  uint64_t v45 = v73;
  uint64_t v44 = v74;
  uint64_t v46 = v71;
  (*(void (**)(char *, void, uint64_t))(v73 + 104))( v71,  enum case for Publishers.BufferingStrategy.dropOldest<A>(_:),  v74);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v48 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v49 = v67;
  Publisher.buffer(size:prefetch:whenFull:)(0x7FFFFFFFFFFFFFFFLL, v43, v46, v47, v48);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  uint64_t v50 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>> and conformance Publishers.Buffer<A>,  &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>,  (uint64_t)&protocol conformance descriptor for Publishers.Buffer<A>);
  uint64_t v51 = v72;
  uint64_t v52 = Publisher.eraseToAnyPublisher()(v72, v50);
  swift_release(v65);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v49, v51);
  *(void *)&v39[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages] = v52;

  __int128 v53 = (objc_class *)type metadata accessor for NearbyGroupHostIDSService();
  v75.receiver = v39;
  v75.super_class = v53;
  id v54 = objc_msgSendSuper2(&v75, "init");
  id v55 = objc_allocWithZone(&OBJC_CLASS___IDSServiceDelegateProperties);
  unint64_t v56 = (char *)v54;
  id v57 = [v55 init];
  [v57 setWantsCrossAccountMessaging:1];
  [v78[0] addDelegate:v56 withDelegateProperties:v57 queue:*(void *)&v56[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue]];

  __swift_destroy_boxed_opaque_existential_0Tm(v78);
  return v56;
}

uint64_t sub_100052F5C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.init(serviceName:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000D5F4C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  uint64_t v2 = (void *)swift_task_alloc(dword_1000D5F5C);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return NearbyGroupHostManager.listenForEvents()();
}

uint64_t type metadata accessor for NearbyGroupHostManager(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHostManager;
  if (!type metadata singleton initialization cache for NearbyGroupHostManager) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyGroupHostManager);
  }
  return result;
}

uint64_t sub_100053030()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.listenForEvents()()
{
  uint64_t v2 = swift_task_alloc(dword_1000D5F7C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  return swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), v3, 0LL);
}

uint64_t sub_1000530D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.handle(_:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1000D5F9C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in NearbyGroupHostManager.handle(_:);
  return closure #1 in NearbyGroupHostManager.handle(_:)(v2, v3);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.handle(_:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHostManager.Errors,  &type metadata for NearbyGroupHostManager.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyGroupHostManager.Errors,  &type metadata for NearbyGroupHostManager.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors);
  }

  return result;
}

uint64_t sub_1000531D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v8 = v6 + v7 + 8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = v1 + (v8 & ~v7);
  uint64_t v14 = (void *)swift_task_alloc(dword_1000D5FBC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(a1, v9, v10, v11, v12, v13);
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v4[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[21] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v4[22] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[23] = swift_task_alloc(v9);
  _BYTE v4[24] = swift_task_alloc(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[25] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v4[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[27] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v4[28] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[29] = swift_task_alloc(v14);
  v4[30] = swift_task_alloc(v14);
  v4[31] = swift_task_alloc(v14);
  _BYTE v4[32] = swift_task_alloc(v14);
  return swift_task_switch(specialized NearbyGroupHostManager.createGroup(id:generator:), a2, 0LL);
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v3 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter((void *)(v0 + 96), v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  uint64_t v4 = *(void *)(v0 + 96);
  if (*(void *)(v4 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 128));
    char v6 = v5;
    swift_bridgeObjectRelease(v4);
    if ((v6 & 1) != 0)
    {
      if (one-time initialization token for host != -1) {
        swift_once(&one-time initialization token for host, one-time initialization function for host);
      }
      uint64_t v7 = *(void *)(v0 + 232);
      uint64_t v8 = *(void *)(v0 + 208);
      uint64_t v9 = *(void *)(v0 + 216);
      uint64_t v10 = *(void *)(v0 + 128);
      uint64_t v11 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v11, (uint64_t)static Log.host);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v16 = static os_log_type_t.error.getter(v13, v14, v15);
      BOOL v17 = os_log_type_enabled(v13, v16);
      uint64_t v18 = *(void *)(v0 + 232);
      uint64_t v19 = *(void *)(v0 + 208);
      uint64_t v20 = *(void *)(v0 + 216);
      if (v17)
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v65 = swift_slowAlloc(32LL, -1LL);
        v67[0] = v65;
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v19, v22);
        unint64_t v25 = v24;
        *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v21 + 4, v21 + 12);
        swift_bridgeObjectRelease(v25);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v16,  "Trying to create a NearbyGroup with %s when one already exists.",  v21,  0xCu);
        swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(void, void))(v20 + 8))(*(void *)(v0 + 232), *(void *)(v0 + 208));
      }

      char v54 = 0;
      goto LABEL_17;
    }
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 96));
  }

  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = swift_getKeyPath(&unk_1000AC500);
  uint64_t v28 = swift_getKeyPath(&unk_1000AC528);
  static Published.subscript.getter((void *)(v0 + 112), v26, v27, v28);
  swift_release(v27);
  swift_release(v28);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v30 = *(void *)(v29 + 16);
  swift_bridgeObjectRelease(v29);
  specialized NearbyGroupServerBag.numericConfig(for:)(3);
  uint64_t v32 = v31;
  id v33 = [v31 integerValue];

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v35 = *(void *)(v0 + 240);
  uint64_t v36 = *(void *)(v0 + 208);
  uint64_t v37 = *(void *)(v0 + 216);
  uint64_t v38 = *(void *)(v0 + 128);
  uint64_t v39 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v39, (uint64_t)static Log.host);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v38, v36);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v44 = static os_log_type_t.error.getter(v41, v42, v43);
  BOOL v45 = os_log_type_enabled(v41, v44);
  uint64_t v46 = *(void *)(v0 + 240);
  uint64_t v47 = *(void *)(v0 + 208);
  uint64_t v48 = *(void *)(v0 + 216);
  if (v45)
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    v67[0] = v66;
    *(_DWORD *)uint64_t v49 = 136315138;
    uint64_t v50 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v47, v50);
    unint64_t v53 = v52;
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease(v53);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v44,  "Failed to create new NearbyGroupHost with %s due to group count limit",  v49,  0xCu);
    char v54 = 1;
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v48 + 8))(*(void *)(v0 + 240), *(void *)(v0 + 208));

    char v54 = 1;
  }

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t **v7;
  uint64_t v2 = (void *)v0[18];
  uint64_t v1 = v0[19];
  type metadata accessor for NearbyGroupHost(0LL);
  swift_beginAccess(v1 + 112, v0 + 6, 0LL, 0LL);
  uint64_t v3 = *(void **)(v1 + 112);
  uint64_t v4 = dword_1000D5B44;
  char v5 = v2;
  char v6 = v3;
  uint64_t v7 = (uint64_t **)swift_task_alloc(v4);
  v0[33] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = (uint64_t *)specialized NearbyGroupHostManager.createGroup(id:generator:);
  return NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)(v0[18], (uint64_t)v6, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t, void);
  uint64_t *v10;
  uint64_t *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v34 = *(void *)(v0 + 248);
  uint64_t v39 = *(void *)(v0 + 240);
  uint64_t v40 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v36 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v43 = *(void *)(v0 + 200);
  uint64_t v41 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 176);
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v32 = *(void *)(v0 + 160);
  id v33 = *(void *)(v0 + 184);
  char v5 = *(void *)(v0 + 136);
  uint64_t v38 = *(void **)(v0 + 144);
  uint64_t v42 = v5;
  uint64_t v29 = *(void *)(v0 + 128);
  uint64_t v30 = *(void (**)(uint64_t))(v3 + 16);
  v30(v2);
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AC500);
  uint64_t v7 = swift_getKeyPath(&unk_1000AC528);
  uint64_t v8 = v1;
  uint64_t v9 = (void (*)(uint64_t, void))static Published.subscript.modify(v0 + 16, v5, KeyPath, v7);
  uint64_t v11 = v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  os_log_type_t v44 = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v8, v2, isUniquelyReferenced_nonNull_native);
  uint64_t v13 = *v11;
  *uint64_t v11 = v44;
  swift_bridgeObjectRelease(v13);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v37(v2, v4);
  v9(v0 + 16, 0LL);
  swift_release(KeyPath);
  swift_release(v7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v2, v29, v4);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v43, 1LL, 1LL, v14);
  uint64_t v28 = swift_allocObject(&unk_1000CBD10, 24LL, 7LL);
  uint64_t v15 = swift_weakInit(v28 + 16);
  (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0x130LL))(v15);
  os_log_type_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  v16(v33, v41, v32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v34, v29, v4);
  BOOL v17 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (v35 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v21 = (v20 + v19 + 8) & ~v20;
  uint64_t v22 = swift_allocObject(&unk_1000CBE40, v21 + v36, v17 | v20 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v22 + 24) = 0LL;
  v16(v22 + v18, v33, v32);
  *(void *)(v22 + v19) = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v22 + v21, v34, v4);
  uint64_t v23 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v43,  (uint64_t)&closure #1 in NearbyGroupHostManager.createGroup(id:generator:)partial apply,  v22);
  unint64_t v24 = (void *)(v42
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess( v42 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners,  v0 + 72,  33LL,  0LL);
  unint64_t v25 = swift_isUniquelyReferenced_nonNull_native(*v24);
  BOOL v45 = *v24;
  *unint64_t v24 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v2, v25);
  uint64_t v26 = *v24;
  *unint64_t v24 = v45;
  swift_bridgeObjectRelease(v26);
  v37(v2, v4);
  swift_endAccess(v0 + 72);

  swift_task_dealloc(v2);
  swift_task_dealloc(v34);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  swift_task_dealloc(v41);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 280));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  char v5 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  char v6 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 264);
  *(void *)(*v2 + 272) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 136);
  if (v1)
  {
    uint64_t v7 = specialized NearbyGroupHostManager.createGroup(id:generator:);
  }

  else
  {
    *(void *)(v4 + 280) = a1;
    uint64_t v7 = specialized NearbyGroupHostManager.createGroup(id:generator:);
  }

  return swift_task_switch(v7, v6, 0LL);
}

id sub_100053EB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 112, v6, 0LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 112);
  *a2 = v4;
  return v4;
}

uint64_t sub_100053F08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100053F60@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a2 = *v3;
  return swift_retain(v4);
}

uint64_t ObjC metadata update function for NearbyGroupHostManager()
{
  return type metadata accessor for NearbyGroupHostManager(0LL);
}

void type metadata completion function for NearbyGroupHostManager(uint64_t a1)
{
  v4[0] = &unk_1000AC650;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  type metadata accessor for Published<[UUID : NearbyGroupHost]>(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[4] = &unk_1000AC668;
    v4[5] = (char *)&value witness table for () + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

uint64_t storeEnumTagSinglePayload for NearbyGroupHostManager.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005411C + 4 * byte_1000AC4F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100054150 + 4 * byte_1000AC4F0[v4]))();
}

uint64_t sub_100054150(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100054160LL);
  }
  return result;
}

uint64_t sub_10005416C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100054174LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100054178(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054180(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHostManager.Errors()
{
  return &type metadata for NearbyGroupHostManager.Errors;
}

uint64_t objectdestroy_23Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v8 = v6 + v7 + 8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = v1 + (v8 & ~v7);
  uint64_t v14 = (void *)swift_task_alloc(dword_1000D5FBC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(a1, v9, v10, v11, v12, v13);
}

uint64_t outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_52(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_1000D5F8C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t NearbyProtoJoinRequest.encryptedData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NearbyProtoJoinRequest(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinRequest,  (uint64_t)&nominal type descriptor for NearbyProtoJoinRequest);
}

uint64_t NearbyProtoJoinRequest.publicKey.getter()
{
  return NearbyProtoJoinRequest.publicKey.getter(type metadata accessor for NearbyProtoJoinRequest);
}

void NearbyProtoNearbySessionMessageType.init(rawValue:)()
{
}

void protocol witness for Enum.init() in conformance NearbyProtoNearbySessionMessageType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance NearbyProtoNearbySessionMessageType( uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NearbyProtoNearbySessionMessageType()
{
  return *(void *)v0;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyProtoNearbySessionMessageType( uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyProtoNearbySessionMessageType( void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyProtoNearbySessionMessageType( uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(v2 + 8);
  void v7[9] = *(void *)v2;
  char v8 = v5;
  Hasher.init(_seed:)(v7, 0LL);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoNearbySessionMessageType( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyProtoNearbySessionMessageType( uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(v3 + 8);
  v8[9] = *(void *)v3;
  char v9 = v6;
  Hasher.init(_seed:)(v8, a1);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyProtoNearbySessionMessageType( void *a1, void *a2)
{
  return *a1 == *a2;
}

void one-time initialization function for allCases()
{
  static NearbyProtoNearbySessionMessageType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *NearbyProtoNearbySessionMessageType.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once(&one-time initialization token for allCases, one-time initialization function for allCases);
  }
  return &static NearbyProtoNearbySessionMessageType.allCases;
}

double static NearbyProtoNearbySessionMessageType.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once(&one-time initialization token for allCases, one-time initialization function for allCases);
  }
  swift_beginAccess(&static NearbyProtoNearbySessionMessageType.allCases, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static NearbyProtoNearbySessionMessageType.allCases).n128_u64[0];
  return result;
}

uint64_t static NearbyProtoNearbySessionMessageType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once(&one-time initialization token for allCases, one-time initialization function for allCases);
  }
  swift_beginAccess(&static NearbyProtoNearbySessionMessageType.allCases, v4, 1LL, 0LL);
  uint64_t v2 = static NearbyProtoNearbySessionMessageType.allCases;
  static NearbyProtoNearbySessionMessageType.allCases = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static NearbyProtoNearbySessionMessageType.allCases.modify(uint64_t a1))()
{
  if (one-time initialization token for allCases != -1) {
    swift_once(&one-time initialization token for allCases, one-time initialization function for allCases);
  }
  swift_beginAccess(&static NearbyProtoNearbySessionMessageType.allCases, a1, 33LL, 0LL);
  return NearbyInvitationAdvertiser.listeners.modify;
}

double protocol witness for static CaseIterable.allCases.getter in conformance NearbyProtoNearbySessionMessageType@<D0>( void *a1@<X8>)
{
  if (one-time initialization token for allCases != -1) {
    swift_once(&one-time initialization token for allCases, one-time initialization function for allCases);
  }
  swift_beginAccess(&static NearbyProtoNearbySessionMessageType.allCases, v4, 0LL, 0LL);
  uint64_t v2 = static NearbyProtoNearbySessionMessageType.allCases;
  *a1 = static NearbyProtoNearbySessionMessageType.allCases;
  *(void *)&double result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

uint64_t NearbyProtoSessionMessage.version.getter()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 20));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t NearbyProtoSessionMessage.version.setter(int a1)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*NearbyProtoSessionMessage.version.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return NearbyProtoSessionMessage.version.modify;
}

uint64_t NearbyProtoSessionMessage.version.modify(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

BOOL NearbyProtoSessionMessage.hasVersion.getter()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearVersion()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 20);
  *(_DWORD *)uint64_t v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t NearbyProtoSessionMessage.type.getter()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 24));
  if (v1[9]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t NearbyProtoSessionMessage.type.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NearbyProtoSessionMessage.type.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  char v6 = *((_BYTE *)v4 + 8);
  int v7 = *((unsigned __int8 *)v4 + 9);
  if (v7) {
    uint64_t v5 = 0LL;
  }
  *(void *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (v7 | v6) & 1;
  return NearbyProtoSessionMessage.type.modify;
}

uint64_t NearbyProtoSessionMessage.type.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16) + *(int *)(result + 12);
  unsigned __int8 v2 = *(_BYTE *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL NearbyProtoSessionMessage.hasType.getter()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 24) + 9) & 1) == 0;
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearType()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 24);
  *(void *)uint64_t v1 = 0LL;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NearbyProtoSessionMessage.data.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t NearbyProtoSessionMessage.data.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter(a1, a2, type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t (*NearbyProtoSessionMessage.data.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoSessionMessage.hasData.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoSessionMessage);
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearData()()
{
}

double NearbyProtoSessionMessage.init()@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = (int *)type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(void *)uint64_t v4 = 0LL;
  *(_WORD *)(v4 + 8) = 256;
  double result = 0.0;
  *(_OWORD *)(a1 + v2[7]) = xmmword_1000AAEA0;
  return result;
}

uint64_t NearbyProtoConnectionRequest.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t NearbyProtoConnectionRequest.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t NearbyProtoConnectionRequest.displayName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

double key path getter for NearbyProtoConnectionRequest.displayName : NearbyProtoConnectionRequest@<D0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  *a2 = v5;
  a2[1] = v6;
  *(void *)&double result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

uint64_t key path setter for NearbyProtoConnectionRequest.displayName : NearbyProtoConnectionRequest( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28));
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v2);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NearbyProtoConnectionRequest.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NearbyProtoConnectionRequest.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return NearbyProtoConnectionRequest.displayName.modify;
}

BOOL NearbyProtoConnectionRequest.hasDisplayName.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28) + 8) != 0LL;
}

Swift::Void __swiftcall NearbyProtoConnectionRequest.clearDisplayName()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 28));
  swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
}

uint64_t NearbyProtoConnectionRequest.userInfo.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path setter for NearbyProtoConnectionRequest.userInfo : NearbyProtoConnectionRequest( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *unint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NearbyProtoConnectionRequest.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoConnectionRequest.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoConnectionRequest.hasUserInfo.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32) + 8) >> 60 != 15LL;
}

Swift::Void __swiftcall NearbyProtoConnectionRequest.clearUserInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_1000AAEA0;
}

uint64_t NearbyProtoConnectionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter(type metadata accessor for NearbyProtoConnectionRequest, a1);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter(a1, type metadata accessor for NearbyProtoConnectionRequest);
}

void (__swiftcall *NearbyProtoConnectionRequest.unknownFields.modify())()
{
  return Log.init();
}

double NearbyProtoConnectionRequest.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for NearbyProtoConnectionRequest(0LL);
  UnknownStorage.init()();
  uint64_t v3 = (void *)((char *)a1 + *(int *)(v2 + 28));
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + swift_release(*(void *)(v0 + 32)) = xmmword_1000AAEA0;
  return result;
}

uint64_t NearbyProtoConnectionResponse.Content.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  return outlined init with copy of (String, Any)( v1 + *(int *)(v3 + 24),  a1,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
}

uint64_t NearbyProtoConnectionResponse.Content.operation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  return outlined assign with take of AsyncStream<CBDevice>?( a1,  v1 + *(int *)(v3 + 24),  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.operation.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoConnectionResponse.Content.denied.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3, v4);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( v1 + *(int *)(v7 + 24),  (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    uint64_t v9 = outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()(v9);
  }

  if (swift_getEnumCaseMultiPayload(v6, v8) == 1)
  {
    uint64_t v9 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    return UnknownStorage.init()(v9);
  }

  return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v6,  a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t key path getter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v8 + 24),  (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    uint64_t v10 = outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()(v10);
  }

  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    uint64_t v10 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v7,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    return UnknownStorage.init()(v10);
  }

  return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v7,  a2,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t NearbyProtoConnectionResponse.Content.denied.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.denied.setter( a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  0LL);
}

void (*NearbyProtoConnectionResponse.Content.denied.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0LL) - 8)
                 + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)( v1 + v8,  (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v5,  (uint64_t)v7,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      return NearbyProtoConnectionResponse.Content.denied.modify;
    }

    uint64_t v11 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v5,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }

  UnknownStorage.init()(v11);
  return NearbyProtoConnectionResponse.Content.denied.modify;
}

void NearbyProtoConnectionResponse.Content.denied.modify(uint64_t a1, char a2)
{
}

uint64_t NearbyProtoConnectionResponse.Content.approved.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3, v4);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( v1 + *(int *)(v7 + 24),  (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v6, v8) == 1) {
      return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v6,  (uint64_t)a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    }
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }

  *a1 = xmmword_1000AC690;
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  return UnknownStorage.init()(v10);
}

uint64_t key path getter for NearbyProtoConnectionResponse.Content.approved : NearbyProtoConnectionResponse.Content@<X0>( uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v8 + 24),  (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v7, v9) == 1) {
      return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v7,  (uint64_t)a2,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    }
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v7,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }

  *a2 = xmmword_1000AC690;
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  return UnknownStorage.init()(v11);
}

uint64_t key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v10 = a5(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, (uint64_t)&v17 - v12, a5);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  outlined destroy of Any?( v14,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation((uint64_t)v13, v14, a5);
  uint64_t v15 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  swift_storeEnumTagMultiPayload(v14, v15, a6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( v14,  0LL,  1LL,  v15);
}

uint64_t NearbyProtoConnectionResponse.Content.approved.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.denied.setter( a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  1LL);
}

uint64_t NearbyProtoConnectionResponse.Content.denied.setter( uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  outlined destroy of Any?( v7,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, v7, a2);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  swift_storeEnumTagMultiPayload(v7, v8, a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1000AC690;
  uint64_t v1 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  return UnknownStorage.init()(v1);
}

void (*NearbyProtoConnectionResponse.Content.approved.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) - 8)
                 + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)( v1 + v8,  (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
LABEL_6:
    *uint64_t v7 = xmmword_1000AC690;
    UnknownStorage.init()(v11);
    return NearbyProtoConnectionResponse.Content.approved.modify;
  }

  if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
  {
    uint64_t v11 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v5,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_6;
  }

  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v5,  (uint64_t)v7,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return NearbyProtoConnectionResponse.Content.approved.modify;
}

void NearbyProtoConnectionResponse.Content.approved.modify(uint64_t a1, char a2)
{
}

uint64_t NearbyProtoConnectionResponse.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t NearbyProtoConnectionResponse.Content.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyGroup_Group.MemberLeft.groupUuid.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t NearbyGroup_Group.MemberLeft.groupUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter( type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter( a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoConnectionResponse.Content.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  uint64_t v2 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v3 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  return UnknownStorage.init()(v3);
}

uint64_t NearbyProtoJoinRequest.publicKey.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoJoinRequest.publicKey.setter(a1, a2, type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t (*NearbyProtoJoinRequest.publicKey.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.hasPublicKey.getter()
{
  return NearbyProtoJoinRequest.hasPublicKey.getter(type metadata accessor for NearbyProtoJoinRequest);
}

Swift::Void __swiftcall NearbyProtoJoinRequest.clearPublicKey()()
{
}

uint64_t key path setter for NearbyProtoJoinRequest.encryptedData : NearbyProtoJoinRequest( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NearbyProtoJoinRequest.encryptedData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.encryptedData.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.hasEncryptedData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24) + 8) >> 60 != 15LL;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.clearEncryptedData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_1000AAEA0;
}

uint64_t NearbyProtoJoinRequest.Content.displayName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

double key path getter for NearbyProtoJoinRequest.Content.displayName : NearbyProtoJoinRequest.Content@<D0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0xE000000000000000LL;
  }

  *a2 = v5;
  a2[1] = v6;
  *(void *)&double result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

uint64_t key path setter for NearbyProtoJoinRequest.Content.displayName : NearbyProtoJoinRequest.Content( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24));
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v2);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return NearbyProtoConnectionRequest.displayName.modify;
}

uint64_t NearbyProtoConnectionRequest.displayName.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  uint64_t v5 = v3[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[1]);
    swift_bridgeObjectRelease(v5);
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v3[1]);
    *uint64_t v3 = v4;
    v3[1] = v2;
  }

  return result;
}

BOOL NearbyProtoJoinRequest.Content.hasDisplayName.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24) + 8) != 0LL;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearDisplayName()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 24));
  swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
}

uint64_t NearbyProtoJoinRequest.Content.userInfo.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoSessionMessage.data.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0LL) + 28));
  unint64_t v3 = v2[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *v2;
  }
  outlined copy of Data?(*v2, v3);
  return v4;
}

uint64_t key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = (uint64_t *)(a2 + *(int *)(a5(0LL) + 28));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  outlined copy of Data._Representation(v5, v6);
  uint64_t result = outlined consume of Data?(v8, v9);
  *unint64_t v7 = v5;
  v7[1] = v6;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.userInfo.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter(a1, a2, type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoSessionMessage.data.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a3(0LL) + 28);
  uint64_t result = outlined consume of Data?(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.Content.hasUserInfo.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoJoinRequest.Content);
}

BOOL NearbyProtoSessionMessage.hasData.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0LL) + 28) + 8) >> 60 != 15LL;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearUserInfo()()
{
}

double NearbyProtoSessionMessage.clearData()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 28);
  outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = xmmword_1000AAEA0;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.getter()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 32)) & 1;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.setter(char a1)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  *(_BYTE *)(v1 + *(int *)(result + swift_release(*(void *)(v0 + 32)) = a1;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.wantsTokenUri.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return NearbyProtoJoinRequest.Content.wantsTokenUri.modify;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.modify(uint64_t result)
{
  *(_BYTE *)(*(void *)result + *(int *)(result + specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL NearbyProtoJoinRequest.Content.hasWantsTokenUri.getter()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + 32)) != 2;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearWantsTokenUri()()
{
  *(_BYTE *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0LL) + swift_release(*(void *)(v0 + 32)) = 2;
}

uint64_t NearbyProtoJoinRequest.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter( type metadata accessor for NearbyProtoJoinRequest.Content,  a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t NearbyProtoJoinRequest.Content.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter( a1,  type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

void (__swiftcall *NearbyProtoJoinRequest.Content.unknownFields.modify())()
{
  return Log.init();
}

double NearbyProtoJoinRequest.Content.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v2 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (void *)((char *)a1 + v2[6]);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[7]) = xmmword_1000AAEA0;
  *((_BYTE *)a1 + v2[8]) = 2;
  return result;
}

double NearbyProtoJoinRequest.init()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(v3 + 20)) = xmmword_1000AAEA0;
  *(_OWORD *)(a2 + *(int *)(v3 + swift_release(*(void *)(v0 + 24)) = xmmword_1000AAEA0;
  return result;
}

uint64_t NearbyProtoJoinResponse.encryptedData.getter()
{
  return NearbyProtoJoinRequest.publicKey.getter(type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t NearbyProtoJoinRequest.publicKey.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0LL) + 20));
  unint64_t v3 = v2[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *v2;
  }
  outlined copy of Data?(*v2, v3);
  return v4;
}

uint64_t key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(a5(0LL) + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  outlined copy of Data._Representation(v5, v6);
  uint64_t result = outlined consume of Data?(v8, v9);
  *uint64_t v7 = v5;
  v7[1] = v6;
  return result;
}

uint64_t NearbyProtoJoinResponse.encryptedData.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoJoinRequest.publicKey.setter(a1, a2, type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t NearbyProtoJoinRequest.publicKey.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a3(0LL) + 20);
  uint64_t result = outlined consume of Data?(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinResponse.encryptedData.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinResponse(0LL) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinResponse.hasEncryptedData.getter()
{
  return NearbyProtoJoinRequest.hasPublicKey.getter(type metadata accessor for NearbyProtoJoinResponse);
}

BOOL NearbyProtoJoinRequest.hasPublicKey.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0LL) + 20) + 8) >> 60 != 15LL;
}

Swift::Void __swiftcall NearbyProtoJoinResponse.clearEncryptedData()()
{
}

double NearbyProtoJoinRequest.clearPublicKey()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 20);
  outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = xmmword_1000AAEA0;
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  return outlined init with copy of (String, Any)( v1 + *(int *)(v3 + 20),  a1,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
}

uint64_t NearbyProtoJoinResponse.Content.operation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  return outlined assign with take of AsyncStream<CBDevice>?( a1,  v1 + *(int *)(v3 + 20),  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.operation.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoJoinResponse.Content.denied.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3, v4);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( v1 + *(int *)(v7 + 20),  (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    uint64_t v9 = outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()(v9);
  }

  if (swift_getEnumCaseMultiPayload(v6, v8) == 1)
  {
    uint64_t v9 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    return UnknownStorage.init()(v9);
  }

  return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v6,  a1,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t key path getter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v8 + 20),  (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    uint64_t v10 = outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()(v10);
  }

  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    uint64_t v10 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v7,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    return UnknownStorage.init()(v10);
  }

  return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v7,  a2,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t NearbyProtoJoinResponse.Content.denied.setter(uint64_t a1)
{
  return NearbyProtoJoinResponse.Content.denied.setter( a1,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  0LL);
}

void (*NearbyProtoJoinResponse.Content.denied.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)( v1 + v8,  (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v5,  (uint64_t)v7,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      return NearbyProtoJoinResponse.Content.denied.modify;
    }

    uint64_t v11 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v5,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  }

  UnknownStorage.init()(v11);
  return NearbyProtoJoinResponse.Content.denied.modify;
}

void NearbyProtoJoinResponse.Content.denied.modify(uint64_t a1, char a2)
{
}

double NearbyProtoJoinResponse.Content.approved.getter@<D0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3, v4);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( v1 + *(int *)(v7 + 20),  (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v6, v8) == 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v6,  (uint64_t)a1,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      return result;
    }

    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  }

  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  UnknownStorage.init()(v10);
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v10 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = xmmword_1000AAEA0;
  return result;
}

uint64_t key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v10 = a5(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, (uint64_t)&v17 - v12, a5);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  outlined destroy of Any?( v14,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation((uint64_t)v13, v14, a5);
  uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  swift_storeEnumTagMultiPayload(v14, v15, a6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( v14,  0LL,  1LL,  v15);
}

uint64_t NearbyProtoJoinResponse.Content.approved.setter(uint64_t a1)
{
  return NearbyProtoJoinResponse.Content.denied.setter( a1,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  1LL);
}

uint64_t NearbyProtoJoinResponse.Content.denied.setter( uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  outlined destroy of Any?( v7,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, v7, a2);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  swift_storeEnumTagMultiPayload(v7, v8, a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
}

double NearbyProtoJoinResponse.Content.ApprovalContent.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  UnknownStorage.init()(v2);
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = xmmword_1000AAEA0;
  return result;
}

void (*NearbyProtoJoinResponse.Content.approved.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  v3[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of (String, Any)( v1 + v9,  (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1LL, v10) == 1)
  {
    uint64_t v12 = outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = 0LL;
    v8[1] = 0xE000000000000000LL;
    void v8[2] = _swiftEmptyArrayStorage;
    UnknownStorage.init()(v12);
    *(_OWORD *)((char *)v8 + *(int *)(v6 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = xmmword_1000AAEA0;
    return NearbyProtoJoinResponse.Content.approved.modify;
  }

  if (swift_getEnumCaseMultiPayload(v5, v10) != 1)
  {
    uint64_t v12 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v5,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_6;
  }

  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v5,  (uint64_t)v8,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return NearbyProtoJoinResponse.Content.approved.modify;
}

void NearbyProtoJoinResponse.Content.approved.modify(uint64_t a1, char a2)
{
}

void NearbyProtoConnectionResponse.Content.denied.modify( uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 40LL);
  uint64_t v11 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 16LL);
  uint64_t v13 = *(void **)(*(void *)a1 + 24LL);
  uint64_t v14 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v15 = **(void **)a1 + v11;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( *(void *)(*(void *)a1 + 24LL),  (uint64_t)v12,  a4);
    outlined destroy of Any?(v15, a3);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation((uint64_t)v12, v15, a4);
    swift_storeEnumTagMultiPayload(v15, v9, a5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization((uint64_t)v13, a4);
  }

  else
  {
    outlined destroy of Any?(**(void **)a1 + v11, a3);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation((uint64_t)v13, v15, a4);
    swift_storeEnumTagMultiPayload(v15, v9, a5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  free(v13);
  free(v12);
  free(v14);
  free(v8);
}

uint64_t NearbyProtoJoinResponse.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter( type metadata accessor for NearbyProtoJoinResponse.Content,  a1);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.getter@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t NearbyProtoJoinResponse.Content.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter( a1,  type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyGroup_Group.Initialization.members.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t NearbyGroup_Group.Initialization.members.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter( a1,  a2,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t (*NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

uint64_t NearbyProtoSessionMessage.data.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }

  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }

  return result;
}

BOOL NearbyProtoJoinResponse.Content.ApprovalContent.hasUserInfo.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

Swift::Void __swiftcall NearbyProtoJoinResponse.Content.ApprovalContent.clearUserInfo()()
{
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter( type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  a1);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter( a1,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoSessionMessage.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t NearbyProtoSessionMessage.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t NearbyProtoJoinResponse.Content.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v3 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  return UnknownStorage.init()(v3);
}

double NearbyProtoJoinResponse.init()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse(0LL);
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(v3 + 20)) = xmmword_1000AAEA0;
  return result;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoNearbySessionMessageType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "unknown";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "joinRequest";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "joinResponse";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  os_log_type_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *os_log_type_t v16 = 3LL;
  *(void *)uint64_t v17 = "connectionRequest";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "connectionResponse";
  *((void *)v19 + 1) = 18LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "groupMessage";
  *((void *)v21 + 1) = 12LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoSessionMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "version";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "type";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "data";
  *(void *)(v14 + 8) = 4LL;
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6C0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "publicKey";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "encryptedData";
  *((void *)v13 + 1) = 13LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinRequest.Content._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AB4C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "identifier";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "displayName";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "userInfo";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  os_log_type_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *os_log_type_t v16 = 5LL;
  *(void *)uint64_t v17 = "wantsTokenURI";
  *((void *)v17 + 1) = 13LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinResponse.Content._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "identifier";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "denied";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 4LL;
  *(void *)uint64_t v14 = "approved";
  *(void *)(v14 + 8) = 8LL;
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "sessionIdentifier";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "memberHandles";
  *((void *)v13 + 1) = 13LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "userInfo";
  *(void *)(v14 + 8) = 8LL;
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AB4C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "initialize";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "memberAdded";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "memberRemoved";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  os_log_type_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *os_log_type_t v16 = 4LL;
  *(void *)uint64_t v17 = "memberLeft";
  *((void *)v17 + 1) = 10LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberAdded._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberAdded._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6C0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "groupUUID";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "member";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberRemoved._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberRemoved._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6C0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "groupUUID";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "member";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberLeft._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberLeft._protobuf_nameMap);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6C0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "groupUUID";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "usesToken";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

void *NearbyProtoSessionMessage.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoSessionMessage.protoMessageName;
}

unint64_t static NearbyProtoSessionMessage.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t NearbyProtoSessionMessage._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for _NameMap(0LL);
  return __swift_project_value_buffer(v4, a2);
}

uint64_t static NearbyProtoSessionMessage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t NearbyProtoSessionMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    uint64_t v12 = v4;
    if (v4 || (v14 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v11 = type metadata accessor for NearbyProtoSessionMessage(0LL);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v5 + *(int *)(v11 + 28), a2, a3);
LABEL_3:
        uint64_t v12 = 0LL;
        break;
      case 2LL:
        closure #2 in NearbyProtoSessionMessage.decodeMessage<A>(decoder:)(a1, v5, a2, a3);
        goto LABEL_3;
      case 1LL:
        uint64_t v15 = type metadata accessor for NearbyProtoSessionMessage(0LL);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v5 + *(int *)(v15 + 20), a2, a3);
        goto LABEL_3;
    }

    uint64_t v4 = v12;
    uint64_t v9 = a2;
  }

  return result;
}

uint64_t closure #2 in NearbyProtoSessionMessage.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0LL) + 24);
  unint64_t v7 = lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v6,  &type metadata for NearbyProtoNearbySessionMessageType,  v7,  a3,  a4);
}

uint64_t NearbyProtoSessionMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoSessionMessage.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in NearbyProtoSessionMessage.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)( v3,  a1,  a2,  a3,  type metadata accessor for NearbyProtoSessionMessage,  3LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t closure #1 in NearbyProtoSessionMessage.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v8 = (unsigned int *)(a1 + *(int *)(result + 20));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 1LL, a3, a4);
  }
  return result;
}

uint64_t closure #2 in NearbyProtoSessionMessage.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(result + 24));
  if ((*((_BYTE *)v8 + 9) & 1) == 0)
  {
    char v9 = *((_BYTE *)v8 + 8);
    uint64_t v11 = *v8;
    char v12 = v9 & 1;
    unint64_t v10 = lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v11,  2LL,  &type metadata for NearbyProtoNearbySessionMessageType,  v10,  a3,  a4);
  }

  return result;
}

Swift::Int NearbyProtoSessionMessage.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoSessionMessage,  &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
}

double protocol witness for Message.init() in conformance NearbyProtoSessionMessage@<D0>( int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(void *)uint64_t v6 = 0LL;
  *(_WORD *)(v6 + 8) = 256;
  double result = 0.0;
  *(_OWORD *)(a2 + a1[7]) = xmmword_1000AAEA0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoSessionMessage.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoSessionMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoSessionMessage@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType@<X0>( void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoSessionMessage( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoConnectionRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoConnectionRequest.protoMessageName;
}

unint64_t static NearbyProtoConnectionRequest.protoMessageName.getter()
{
  return 0xD000000000000014LL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoConnectionRequest._protobuf_nameMap,  (uint64_t)"displayName",  11LL,  (uint64_t)"userInfo");
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoConnectionResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoConnectionResponse.Content._protobuf_nameMap,  (uint64_t)"denied",  6LL,  (uint64_t)"approved");
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap,  1LL,  (uint64_t)"invitationData",  14LL);
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoJoinResponse._protobuf_nameMap,  2LL,  (uint64_t)"encryptedData",  13LL);
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyGroup_Member._protobuf_nameMap,  (uint64_t)"handle",  6LL,  (uint64_t)"tokenID");
}

{
  return one-time initialization function for _protobuf_nameMap( a1,  static NearbyGroup_Group.Initialization._protobuf_nameMap,  (uint64_t)"groupUUID",  9LL,  (uint64_t)"members");
}

uint64_t NearbyProtoConnectionRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoConnectionRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = v3 + 16;
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v10, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v12 = type metadata accessor for NearbyProtoConnectionRequest(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v12 + 28), a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v13 = type metadata accessor for NearbyProtoConnectionRequest(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + *(int *)(v13 + 32), a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t NearbyProtoConnectionRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8, 1LL, a2, a3), !v4))
  {
    uint64_t v11 = v3[2];
    unint64_t v12 = v3[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13
      || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12, 2LL, a2, a3), !v4))
    {
      uint64_t result = closure #1 in NearbyProtoConnectionRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      if (!v4)
      {
        closure #2 in NearbyProtoConnectionRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
        type metadata accessor for NearbyProtoConnectionRequest(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

uint64_t closure #1 in NearbyProtoConnectionRequest.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoConnectionRequest(0LL);
  unint64_t v8 = (void *)(a1 + *(int *)(result + 28));
  uint64_t v9 = v8[1];
  if (v9) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v8, v9, 3LL, a3, a4);
  }
  return result;
}

uint64_t closure #2 in NearbyProtoConnectionRequest.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoConnectionRequest(0LL);
  uint64_t v8 = a1 + *(int *)(result + 32);
  unint64_t v9 = *(void *)(v8 + 8);
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *(void *)v8;
    outlined copy of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v10, v9, 4LL, a3, a4);
    return outlined consume of Data?(v10, v9);
  }

  return result;
}

Swift::Int NearbyProtoConnectionRequest.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoConnectionRequest,  &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
}

double protocol witness for Message.init() in conformance NearbyProtoConnectionRequest@<D0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 32);
  uint64_t v5 = (void *)((char *)a2 + *(int *)(a1 + 28));
  *uint64_t v5 = 0LL;
  v5[1] = 0LL;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_1000AAEA0;
  return result;
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionRequest())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionRequest@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionRequest( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoConnectionResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoConnectionResponse.protoMessageName;
}

unint64_t static NearbyProtoConnectionResponse.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t NearbyProtoConnectionResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoConnectionResponse.Content.DeniedContent.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  unint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v17 - v11, a1, v4);
  v13(v9, a2, v4);
  uint64_t v14 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v14);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v9, v4);
  v15(v12, v4);
  return a2 & 1;
}

Swift::Int NearbyProtoConnectionResponse.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoConnectionResponse,  &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.Content.DeniedContent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t NearbyProtoConnectionResponse.traverse<A>(visitor:)()
{
  return NearbyProtoJoinResponse.Content.DeniedContent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1)
{
}

{
  one-time initialization function for protoMessageName( a1,  0xD000000000000010LL,  (void *)0x80000001000B0950LL,  &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D84B0);
}

{
  one-time initialization function for protoMessageName( a1,  0x436465696E65442ELL,  (void *)0xEE00746E65746E6FLL,  &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName,  &qword_1000D84D8);
}

{
  one-time initialization function for protoMessageName( a1,  0x526E696F4A2E7063LL,  0xEE00747365757165LL,  static NearbyProtoJoinRequest.Content.protoMessageName,  &static NearbyProtoJoinRequest.Content.protoMessageName[1]);
}

{
  one-time initialization function for protoMessageName( a1,  0x526E696F4A2E7063LL,  0xEF65736E6F707365LL,  &static NearbyProtoJoinResponse.Content.protoMessageName,  algn_1000D8558);
}

{
  one-time initialization function for protoMessageName( a1,  0xD000000000000010LL,  (void *)0x80000001000B0950LL,  &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D8580);
}

{
  one-time initialization function for protoMessageName( a1,  0x436465696E65442ELL,  (void *)0xEE00746E65746E6FLL,  &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName,  &qword_1000D85A8);
}

uint64_t *NearbyProtoConnectionResponse.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoConnectionResponse.Content.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.protoMessageName,  algn_1000D8488);
}

uint64_t one-time initialization function for _protobuf_nameMap( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 4 * v11, v12 | 7);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1000AB4C0;
  uint64_t v15 = (void *)(v14 + v13);
  os_log_type_t v16 = (char *)v15 + *(int *)(v9 + 48);
  *uint64_t v15 = 1LL;
  *(void *)os_log_type_t v16 = "identifier";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v16, v17, v18);
  uint64_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)uint64_t v20 = "handle";
  *((void *)v20 + 1) = 6LL;
  v20[16] = 2;
  v19();
  uint64_t v21 = *(int *)(v9 + 48);
  uint64_t v22 = (void *)((char *)v15 + 2 * v11);
  *uint64_t v22 = 3LL;
  uint64_t v23 = (char *)v22 + v21;
  *(void *)uint64_t v23 = a3;
  *((void *)v23 + 1) = a4;
  v23[16] = 2;
  v19();
  unint64_t v24 = (void *)((char *)v15 + 3 * v11);
  unint64_t v25 = (char *)v24 + *(int *)(v9 + 48);
  *unint64_t v24 = 4LL;
  *(void *)unint64_t v25 = a5;
  *((void *)v25 + 1) = 8LL;
  v25[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v9 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  os_log_type_t v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1000AAE80;
  uint64_t v17 = v16 + v15 + *(int *)(v11 + 48);
  *(void *)(v16 + v15) = a3;
  *(void *)uint64_t v17 = a4;
  *(void *)(v17 + 8) = a5;
  *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v18 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v19 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  return _NameMap.init(dictionaryLiteral:)(v16);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  char *v21;
  uint64_t v8 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = swift_allocObject(v9, v14 + 2 * v12, v13 | 7);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6C0;
  os_log_type_t v16 = (void *)(v15 + v14);
  uint64_t v17 = v15 + v14 + *(int *)(v10 + 48);
  *os_log_type_t v16 = 1LL;
  *(void *)uint64_t v17 = a3;
  *(void *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 2;
  uint64_t v18 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v19 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v20 = *(void (**)(void))(*(void *)(v19 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v17, v18, v19);
  uint64_t v21 = (char *)v16 + v12 + *(int *)(v10 + 48);
  *(void *)((char *)v16 + v12) = 2LL;
  *(void *)uint64_t v21 = a5;
  *((void *)v21 + 1) = 7LL;
  v21[16] = 2;
  v20();
  return _NameMap.init(dictionaryLiteral:)(v15);
}

uint64_t NearbyProtoConnectionResponse.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = v5;
          goto LABEL_10;
        case 2LL:
          uint64_t v11 = v5 + 16;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
        case 3LL:
          closure #3 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 4LL:
          closure #4 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t closure #3 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v42 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v46 = (uint64_t)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v42 - v30;
  uint64_t v47 = v5;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v32((char *)&v42 - v30, 1LL, 1LL, v4);
  uint64_t v43 = v52 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  outlined init with copy of (String, Any)( v43,  (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v44 = v17;
  LODWORD(v52) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  if ((_DWORD)v52 == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v34 = v50;
    uint64_t v33 = v51;
    uint64_t v35 = v16;
  }

  else
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v15,  (uint64_t)v24,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v21,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    uint64_t v35 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 1)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }

    else
    {
      outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v21,  (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v11,  (uint64_t)v31,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      v32(v31, 0LL, 1LL, v4);
    }

    uint64_t v34 = v50;
    uint64_t v33 = v51;
  }

  uint64_t v36 = v48;
  uint64_t v37 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v4, v37, v34, v33);
  if (v36) {
    return outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  }
  uint64_t v39 = v46;
  outlined init with copy of (String, Any)( (uint64_t)v31,  v46,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v39, 1LL, v4) == 1)
  {
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
    return outlined destroy of Any?( v39,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  }

  else
  {
    uint64_t v40 = v45;
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v39,  v45,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    if ((_DWORD)v52 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v34, v33);
    }
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
    uint64_t v41 = v43;
    outlined destroy of Any?( v43,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v40,  v41,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    swift_storeEnumTagMultiPayload(v41, v35, 0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v35);
  }

uint64_t closure #4 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v42 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v46 = (uint64_t)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v42 - v30;
  uint64_t v47 = v5;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v32((char *)&v42 - v30, 1LL, 1LL, v4);
  uint64_t v43 = v52 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0LL) + 24);
  outlined init with copy of (String, Any)( v43,  (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v44 = v17;
  LODWORD(v52) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  if ((_DWORD)v52 == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v34 = v50;
    uint64_t v33 = v51;
    uint64_t v35 = v16;
  }

  else
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v15,  (uint64_t)v24,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v21,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    uint64_t v35 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 1)
    {
      outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v21,  (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v11,  (uint64_t)v31,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
      v32(v31, 0LL, 1LL, v4);
    }

    else
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }

    uint64_t v34 = v50;
    uint64_t v33 = v51;
  }

  uint64_t v36 = v48;
  uint64_t v37 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v4, v37, v34, v33);
  if (v36) {
    return outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  }
  uint64_t v39 = v46;
  outlined init with copy of (String, Any)( (uint64_t)v31,  v46,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v39, 1LL, v4) == 1)
  {
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
    return outlined destroy of Any?( v39,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  }

  else
  {
    uint64_t v40 = v45;
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v39,  v45,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    if ((_DWORD)v52 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v34, v33);
    }
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
    uint64_t v41 = v43;
    outlined destroy of Any?( v43,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v40,  v41,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    swift_storeEnumTagMultiPayload(v41, v35, 1LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v35);
  }

uint64_t NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = v3[1];
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v12, 1LL, a2, a3), !v4))
  {
    uint64_t v15 = v3[2];
    unint64_t v16 = v3[3];
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000LL) == 0) {
      uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17
      || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16, 2LL, a2, a3), !v4))
    {
      uint64_t v18 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
      outlined init with copy of (String, Any)( (uint64_t)v3 + *(int *)(v18 + 24),  (uint64_t)v11,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v19 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
      else {
        closure #1 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      }
      uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

uint64_t closure #1 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v15 + 24),  (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v16 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v10, 1LL, v16) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v16) != 1)
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v10,  (uint64_t)v14,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v11, v17, a3, a4);
    return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v14,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  }

  uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v15 + 24),  (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v16 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v10, 1LL, v16) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v16) == 1)
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v10,  (uint64_t)v14,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v11, v17, a3, a4);
    return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v14,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  }

  uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int NearbyProtoConnectionResponse.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoConnectionResponse.Content,  &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoConnectionResponse.Content@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v4 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  return UnknownStorage.init()(v4);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.protoMessageName,  algn_1000D8488,  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionResponse.Content@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionResponse.Content())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D84B0);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap.getter@<X0>( uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

void NearbyProtoConnectionResponse.Content.ApprovalContent.traverse<A>(visitor:)()
{
  __asm { BR              X10 }

uint64_t sub_100059B38(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) == 0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(a1, a2, 1LL, v4, v3), !v2))
  {
    type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
    return UnknownStorage.traverse<A>(visitor:)(v5, v4, v3);
  }

  return result;
}

Swift::Int NearbyProtoConnectionResponse.Content.ApprovalContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>( _OWORD *a1@<X8>)
{
  *a1 = xmmword_1000AC690;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D84B0,  (uint64_t)one-time initialization function for protoMessageName);
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionResponse.Content.ApprovalContent())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent()
{
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName( uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  uint64_t v10 = static NearbyProtoConnectionResponse.Content.protoMessageName;
  uint64_t v11 = *(void *)algn_1000D8488;
  swift_bridgeObjectRetain(*(void *)algn_1000D8488);
  v9._uint64_t countAndFlagsBits = a2;
  v9._uint64_t object = a3;
  String.append(_:)(v9);
  *a4 = v10;
  *a5 = v11;
}

{
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  uint64_t v10 = static NearbyProtoJoinResponse.Content.protoMessageName;
  uint64_t v11 = *(void *)algn_1000D8558;
  swift_bridgeObjectRetain(*(void *)algn_1000D8558);
  v9._uint64_t countAndFlagsBits = a2;
  v9._uint64_t object = a3;
  String.append(_:)(v9);
  *a4 = v10;
  *a5 = v11;
}

uint64_t *NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName,  &qword_1000D84D8);
}

uint64_t NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap.getter@<X0>( uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

Swift::Int NearbyProtoConnectionResponse.Content.DeniedContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName,  &qword_1000D84D8,  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return Message.hash(into:)(a1, a2, v4);
}

const char *NearbyProtoJoinRequest.protoMessageName.unsafeMutableAddressor()
{
  return "cp.JoinRequest";
}

uint64_t static NearbyProtoJoinRequest.protoMessageName.getter()
{
  return 0x526E696F4A2E7063LL;
}

uint64_t NearbyProtoJoinRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoJoinRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v9 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24);
LABEL_3:
      dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + v9, a2, a3);
      goto LABEL_4;
    }

    if (result == 1)
    {
      uint64_t v9 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 20);
      goto LABEL_3;
    }

uint64_t NearbyProtoJoinRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)( v3,  a1,  a2,  a3,  type metadata accessor for NearbyProtoJoinRequest,  1LL);
  if (!v4)
  {
    closure #2 in NearbyProtoJoinRequest.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t closure #2 in NearbyProtoJoinRequest.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest(0LL);
  uint64_t v8 = a1 + *(int *)(result + 24);
  unint64_t v9 = *(void *)(v8 + 8);
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *(void *)v8;
    outlined copy of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v10, v9, 2LL, a3, a4);
    return outlined consume of Data?(v10, v9);
  }

  return result;
}

Swift::Int NearbyProtoJoinRequest.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinRequest,  &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinRequest@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_1000AAEA0;
  *(_OWORD *)(a2 + specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)( featureID._countAndFlagsBits,  (uint64_t)featureID._object,  reusable, v5) = xmmword_1000AAEA0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinRequest@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinRequest( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoJoinRequest.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return static NearbyProtoJoinRequest.Content.protoMessageName;
}

uint64_t static NearbyProtoJoinRequest.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  static NearbyProtoJoinRequest.Content.protoMessageName,  &static NearbyProtoJoinRequest.Content.protoMessageName[1]);
}

uint64_t NearbyProtoJoinRequest.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinRequest.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoJoinRequest.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v11 + 24), a2, a3);
          goto LABEL_5;
        case 4LL:
          uint64_t v12 = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + *(int *)(v12 + 28), a2, a3);
          goto LABEL_5;
        case 5LL:
          uint64_t v13 = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v13 + 32), a2, a3);
LABEL_5:
          uint64_t v9 = v10;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8, 1LL, a2, a3), !v4))
  {
    uint64_t result = closure #1 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)( (uint64_t)v3,  a1,  a2,  a3,  type metadata accessor for NearbyProtoJoinRequest.Content,  4LL);
      closure #3 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t closure #1 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  unint64_t v8 = (void *)(a1 + *(int *)(result + 24));
  uint64_t v9 = v8[1];
  if (v9) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v8, v9, 3LL, a3, a4);
  }
  return result;
}

uint64_t closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t result = a5(0LL);
  uint64_t v11 = a1 + *(int *)(result + 28);
  unint64_t v12 = *(void *)(v11 + 8);
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = *(void *)v11;
    outlined copy of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v13, v12, a6, a3, a4);
    return outlined consume of Data?(v13, v12);
  }

  return result;
}

uint64_t closure #3 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 32));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 5LL, a3, a4);
  }
  return result;
}

Swift::Int NearbyProtoJoinRequest.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinRequest.Content,  &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinRequest.Content@<D0>( int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  UnknownStorage.init()();
  uint64_t v4 = a1[7];
  uint64_t v5 = (void *)((char *)a2 + a1[6]);
  *uint64_t v5 = 0LL;
  v5[1] = 0LL;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_1000AAEA0;
  *((_BYTE *)a2 + a1[8]) = 2;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  static NearbyProtoJoinRequest.Content.protoMessageName,  &static NearbyProtoJoinRequest.Content.protoMessageName[1],  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.Content.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinRequest.Content@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinRequest.Content( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoJoinResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoJoinResponse.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.protoMessageName.getter()
{
  return 0x526E696F4A2E7063LL;
}

uint64_t NearbyProtoJoinResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoJoinResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse(0LL);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + *(int *)(v11 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t NearbyProtoJoinResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)( v3,  a1,  a2,  a3,  type metadata accessor for NearbyProtoJoinResponse,  2LL);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t result = a5(0LL);
  uint64_t v11 = a1 + *(int *)(result + 20);
  unint64_t v12 = *(void *)(v11 + 8);
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = *(void *)v11;
    outlined copy of Data._Representation(*(void *)v11, *(void *)(v11 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v13, v12, a6, a3, a4);
    return outlined consume of Data?(v13, v12);
  }

  return result;
}

Swift::Int NearbyProtoJoinResponse.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinResponse,  &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinResponse@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_1000AAEA0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  v7._uint64_t countAndFlagsBits = 0x746E65746E6F432ELL;
  v7._uint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  *a4 = a2;
  *a5 = a3;
}

uint64_t *NearbyProtoJoinResponse.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoJoinResponse.Content.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.protoMessageName,  algn_1000D8558);
}

uint64_t NearbyProtoJoinResponse.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v4 || (v12 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 4LL:
        closure #3 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3LL:
        closure #2 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1LL:
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v5, a2, a3);
        break;
    }

    uint64_t v9 = a2;
  }

  return result;
}

uint64_t closure #2 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v42 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v46 = (uint64_t)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v42 - v30;
  uint64_t v47 = v5;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v32((char *)&v42 - v30, 1LL, 1LL, v4);
  uint64_t v43 = v52 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  outlined init with copy of (String, Any)( v43,  (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v44 = v17;
  LODWORD(v52) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  if ((_DWORD)v52 == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v34 = v50;
    uint64_t v33 = v51;
    uint64_t v35 = v16;
  }

  else
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v15,  (uint64_t)v24,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    uint64_t v35 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 1)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    }

    else
    {
      outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v21,  (uint64_t)v11,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v11,  (uint64_t)v31,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      v32(v31, 0LL, 1LL, v4);
    }

    uint64_t v34 = v50;
    uint64_t v33 = v51;
  }

  uint64_t v36 = v48;
  uint64_t v37 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v4, v37, v34, v33);
  if (v36) {
    return outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  }
  uint64_t v39 = v46;
  outlined init with copy of (String, Any)( (uint64_t)v31,  v46,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v39, 1LL, v4) == 1)
  {
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
    return outlined destroy of Any?( v39,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  }

  else
  {
    uint64_t v40 = v45;
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v39,  v45,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    if ((_DWORD)v52 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v34, v33);
    }
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
    uint64_t v41 = v43;
    outlined destroy of Any?( v43,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v40,  v41,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    swift_storeEnumTagMultiPayload(v41, v35, 0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v35);
  }

uint64_t closure #3 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v42 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v46 = (uint64_t)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v42 - v30;
  uint64_t v47 = v5;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v32((char *)&v42 - v30, 1LL, 1LL, v4);
  uint64_t v43 = v52 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0LL) + 20);
  outlined init with copy of (String, Any)( v43,  (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v44 = v17;
  LODWORD(v52) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  if ((_DWORD)v52 == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v34 = v50;
    uint64_t v33 = v51;
    uint64_t v35 = v16;
  }

  else
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v15,  (uint64_t)v24,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    uint64_t v35 = v16;
    if (swift_getEnumCaseMultiPayload(v21, v16) == 1)
    {
      outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v21,  (uint64_t)v11,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v11,  (uint64_t)v31,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      v32(v31, 0LL, 1LL, v4);
    }

    else
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    }

    uint64_t v34 = v50;
    uint64_t v33 = v51;
  }

  uint64_t v36 = v48;
  uint64_t v37 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v31, v4, v37, v34, v33);
  if (v36) {
    return outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  }
  uint64_t v39 = v46;
  outlined init with copy of (String, Any)( (uint64_t)v31,  v46,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v39, 1LL, v4) == 1)
  {
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
    return outlined destroy of Any?( v39,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  }

  else
  {
    uint64_t v40 = v45;
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v39,  v45,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    if ((_DWORD)v52 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v34, v33);
    }
    outlined destroy of Any?( (uint64_t)v31,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
    uint64_t v41 = v43;
    outlined destroy of Any?( v43,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v40,  v41,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    swift_storeEnumTagMultiPayload(v41, v35, 1LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v35);
  }

uint64_t NearbyProtoJoinResponse.Content.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = v3[1];
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v12, 1LL, a2, a3), !v4))
  {
    uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
    outlined init with copy of (String, Any)( (uint64_t)v3 + *(int *)(v15 + 20),  (uint64_t)v11,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
    else {
      closure #1 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    }
    uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t closure #1 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v15 + 20),  (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v10, 1LL, v16) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v16) != 1)
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v10,  (uint64_t)v14,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 3LL, v11, v17, a3, a4);
    return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v14,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  }

  uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v15 + 20),  (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v10, 1LL, v16) == 1)
  {
    outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v10, v16) == 1)
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v10,  (uint64_t)v14,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 4LL, v11, v17, a3, a4);
    return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v14,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  }

  uint64_t result = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int NearbyProtoJoinResponse.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinResponse.Content,  &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoJoinResponse.Content@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 20);
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v4 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  return UnknownStorage.init()(v4);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.protoMessageName,  algn_1000D8558,  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D8580);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap.getter@<X0>( uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v11 = v9;
        dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v3 + 16, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v11 = v9;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
        goto LABEL_5;
      }

LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
    uint64_t v11 = v9;
    dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + *(int *)(v10 + 28), a2, a3);
LABEL_5:
    uint64_t v9 = v11;
    goto LABEL_6;
  }

  return result;
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8, 1LL, a2, a3), !v4))
  {
    if (!*(void *)(v3[2] + 16LL)
      || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)( (uint64_t)v3,  a1,  a2,  a3,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  3LL);
      if (!v4)
      {
        type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

Swift::Int NearbyProtoJoinResponse.Content.ApprovalContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinResponse.Content.ApprovalContent@<D0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = xmmword_1000AAEA0;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName,  &qword_1000D8580,  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionRequest@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.ApprovalContent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once( &one-time initialization token for protoMessageName,  one-time initialization function for protoMessageName);
  }
  return &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter( &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName,  &qword_1000D85A8);
}

uint64_t static NearbyProtoConnectionResponse.Content.protoMessageName.getter( void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t NearbyProtoConnectionResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  while (!v3 && (v7 & 1) == 0);
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.DeniedContent.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int NearbyProtoJoinResponse.Content.DeniedContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter( type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

Swift::Int NearbyProtoSessionMessage.hashValue.getter( uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = lazy protocol witness table accessor for type UUID and conformance UUID(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( a1,  a2,  &one-time initialization token for protoMessageName,  &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName,  &qword_1000D85A8,  (uint64_t)one-time initialization function for protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  uint64_t v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType( &one-time initialization token for _protobuf_nameMap,  (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap,  (uint64_t)one-time initialization function for _protobuf_nameMap,  a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyProtoSessionMessage( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  id v55 = (char *)&v53 - v9;
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v54 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation?, NearbyProtoConnectionResponse.Content.OneOf_Operation?));
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v58 = (uint64_t)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v53 - v27;
  uint64_t v29 = a1[1];
  uint64_t v30 = a2[1];
  if (*a1 == *a2 && v29 == v30
    || (char v31 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v29, *a2, v30, 0LL) & 1) != 0))
  {
    if ((uint64_t v32 = a1[2], v33 = a1[3], v34 = a2[2], v35 = a2[3], v32 == v34) && v33 == v35
      || (char v31 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0LL) & 1) != 0))
    {
      uint64_t v53 = v4;
      uint64_t v36 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
      outlined init with copy of (String, Any)( (uint64_t)a1 + *(int *)(v36 + 24),  (uint64_t)v28,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      outlined init with copy of (String, Any)( (uint64_t)a2 + *(int *)(v36 + 24),  (uint64_t)v25,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v37 = (uint64_t)&v17[*(int *)(v14 + 48)];
      outlined init with copy of (String, Any)( (uint64_t)v28,  (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      outlined init with copy of (String, Any)( (uint64_t)v25,  v37,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      if (v38((uint64_t)v17, 1LL, v10) == 1)
      {
        outlined destroy of Any?( (uint64_t)v25,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of Any?( (uint64_t)v28,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        if (v38(v37, 1LL, v10) == 1)
        {
          outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
LABEL_14:
          uint64_t v43 = (char *)a1 + *(int *)(v36 + 28);
          uint64_t v44 = v57;
          uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
          uint64_t v46 = v55;
          uint64_t v47 = v53;
          v45(v55, v43, v53);
          uint64_t v48 = (char *)a2 + *(int *)(v36 + 28);
          uint64_t v49 = v56;
          v45(v56, v48, v47);
          uint64_t v50 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v49, v47, v50);
          uint64_t v51 = *(void (**)(char *, uint64_t))(v44 + 8);
          v51(v49, v47);
          v51(v46, v47);
          return v31 & 1;
        }
      }

      else
      {
        uint64_t v39 = v58;
        outlined init with copy of (String, Any)( (uint64_t)v17,  v58,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        if (v38(v37, 1LL, v10) != 1)
        {
          uint64_t v40 = v39;
          uint64_t v41 = v54;
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v37,  v54,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          char v42 = specialized static NearbyProtoConnectionResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)( v40,  v41);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v41,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          outlined destroy of Any?( (uint64_t)v25,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          outlined destroy of Any?( (uint64_t)v28,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v40,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          if ((v42 & 1) != 0) {
            goto LABEL_14;
          }
LABEL_15:
          char v31 = 0;
          return v31 & 1;
        }

        outlined destroy of Any?( (uint64_t)v25,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of Any?( (uint64_t)v28,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v39,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }

      outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation?, NearbyProtoConnectionResponse.Content.OneOf_Operation?));
      goto LABEL_15;
    }
  }

  return v31 & 1;
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation, NearbyProtoConnectionResponse.Content.OneOf_Operation));
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( a1,  (uint64_t)v23,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v38,  v24,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload(v23, v11) != 1)
  {
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v23,  (uint64_t)v18,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v24, v11) != 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v24,  (uint64_t)v10,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      uint64_t v34 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v35 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v10, v34, v35);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v10,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v18,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      return v31 & 1;
    }

    uint64_t v32 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent;
    uint64_t v33 = (uint64_t)v18;
    goto LABEL_9;
  }

  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v23,  (uint64_t)v15,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload(v24, v11) != 1)
  {
    uint64_t v32 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent;
    uint64_t v33 = (uint64_t)v15;
LABEL_9:
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v33, v32);
    outlined destroy of Any?( (uint64_t)v23,  (uint64_t *)&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation, NearbyProtoConnectionResponse.Content.OneOf_Operation));
LABEL_12:
    char v31 = 0;
    return v31 & 1;
  }

  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v24,  (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  specialized static Data.== infix(_:_:)(*v15, v15[1]);
  if ((v25 & 1) == 0
    || (uint64_t v26 = *(int *)(v3 + 20),
        uint64_t v27 = (char *)v15 + v26,
        uint64_t v28 = &v6[v26],
        uint64_t v29 = type metadata accessor for UnknownStorage(0LL),
        uint64_t v30 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage),  (dispatch thunk of static Equatable.== infix(_:_:)(v27, v28, v29, v30) & 1) == 0))
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v15,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_12;
  }

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v6,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v15,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  char v31 = 1;
  return v31 & 1;
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.ApprovalContent.== infix(_:_:)( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v21 - v11;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
    uint64_t v15 = (char *)a1 + *(int *)(v14 + 20);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v9, (char *)(a2 + *(int *)(v14 + 20)), v4);
    uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v17);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v9, v4);
    v19(v12, v4);
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t specialized static NearbyProtoConnectionRequest.== infix(_:_:)(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v42[-v11];
  uint64_t v13 = a1[1];
  uint64_t v14 = *((void *)a2 + 1);
  BOOL v15 = *a1 == *(void *)a2 && v13 == v14;
  if (v15 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v13, *(void *)a2, v14, 0LL) & 1) != 0))
  {
    uint64_t v17 = a1[2];
    uint64_t v18 = a1[3];
    uint64_t v19 = *((void *)a2 + 2);
    uint64_t v20 = *((void *)a2 + 3);
    BOOL v21 = v17 == v19 && v18 == v20;
    if (v21 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) != 0))
    {
      uint64_t v22 = (int *)type metadata accessor for NearbyProtoConnectionRequest(0LL);
      uint64_t v23 = v22[7];
      uint64_t v24 = (void *)((char *)a1 + v23);
      uint64_t v25 = *(void *)((char *)a1 + v23 + 8);
      uint64_t v26 = &a2[v23];
      uint64_t v27 = *((void *)v26 + 1);
      if (v25)
      {
        if (!v27) {
          goto LABEL_27;
        }
        if (*v24 != *(void *)v26 || v25 != v27)
        {
          char v16 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, *(void *)v26, v27, 0LL) & 1) == 0) {
            return v16 & 1;
          }
        }
      }

      else if (v27)
      {
        goto LABEL_27;
      }

      uint64_t v29 = v22[8];
      uint64_t v30 = *(void *)((char *)a1 + v29);
      unint64_t v31 = *(void *)((char *)a1 + v29 + 8);
      uint64_t v32 = (uint64_t *)&a2[v29];
      uint64_t v33 = *v32;
      unint64_t v34 = v32[1];
      if (v31 >> 60 == 15)
      {
        if (v34 >> 60 == 15) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }

      if (v34 >> 60 == 15)
      {
LABEL_24:
        uint64_t v35 = v30;
        outlined copy of Data?(v30, v31);
        outlined copy of Data?(v33, v34);
        outlined consume of Data?(v35, v31);
        outlined consume of Data?(v33, v34);
        goto LABEL_27;
      }

      uint64_t v44 = v30;
      outlined copy of Data?(v30, v31);
      outlined copy of Data?(v33, v34);
      specialized static Data.== infix(_:_:)(v44, v31);
      int v43 = v36;
      outlined consume of Data?(v33, v34);
      outlined consume of Data?(v44, v31);
      if ((v43 & 1) != 0)
      {
LABEL_26:
        uint64_t v37 = (char *)a1 + v22[6];
        uint64_t v38 = *(void (**)(_BYTE *, char *, uint64_t))(v5 + 16);
        v38(v12, v37, v4);
        v38(v9, &a2[v22[6]], v4);
        uint64_t v39 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v39);
        uint64_t v40 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
        v40(v9, v4);
        v40(v12, v4);
        return v16 & 1;
      }

uint64_t specialized static NearbyProtoSessionMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v38[-v11];
  uint64_t v13 = (int *)type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v14 = v13[5];
  BOOL v15 = (_DWORD *)(a1 + v14);
  char v16 = *(_BYTE *)(a1 + v14 + 4);
  uint64_t v17 = (_DWORD *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 4);
  if ((v16 & 1) != 0)
  {
    if (!v18) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if ((v18 & 1) != 0) {
      goto LABEL_18;
    }
  }

  uint64_t v19 = v13[6];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  char v21 = *(_BYTE *)(a1 + v19 + 9);
  uint64_t v22 = (uint64_t *)(a2 + v19);
  char v23 = *(_BYTE *)(a2 + v19 + 9);
  if ((v21 & 1) != 0)
  {
    if ((v23 & 1) == 0) {
      goto LABEL_18;
    }
  }

  else
  {
    if ((v23 & 1) != 0) {
      goto LABEL_18;
    }
    uint64_t v24 = *v20;
    uint64_t v25 = *v22;
    if ((v22[1] & 1) != 0) {
      __asm { BR              X11 }
    }

    if (v24 != v25) {
      goto LABEL_18;
    }
  }

  uint64_t v26 = v13[7];
  uint64_t v27 = *(void *)(a1 + v26);
  unint64_t v28 = *(void *)(a1 + v26 + 8);
  uint64_t v29 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  if (v28 >> 60 == 15)
  {
    if (v31 >> 60 == 15) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  if (v31 >> 60 == 15)
  {
LABEL_17:
    outlined copy of Data?(v27, v28);
    outlined copy of Data?(v30, v31);
    outlined consume of Data?(v27, v28);
    outlined consume of Data?(v30, v31);
    goto LABEL_18;
  }

  outlined copy of Data?(v27, v28);
  outlined copy of Data?(v30, v31);
  specialized static Data.== infix(_:_:)(v27, v28);
  int v39 = v34;
  outlined consume of Data?(v30, v31);
  outlined consume of Data?(v27, v28);
  if ((v39 & 1) != 0)
  {
LABEL_22:
    uint64_t v35 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
    v35(v12, a1, v4);
    v35(v9, a2, v4);
    uint64_t v36 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v36);
    uint64_t v37 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v37(v9, v4);
    v37(v12, v4);
    return v32 & 1;
  }

uint64_t specialized static NearbyProtoJoinResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v25[-v11];
  uint64_t v13 = *(int *)(type metadata accessor for NearbyProtoJoinResponse(0LL) + 20);
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  char v16 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 == 15) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }

  if (v18 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    outlined consume of Data?(v17, v18);
LABEL_8:
    char v22 = 0;
    return v22 & 1;
  }

  outlined copy of Data?(v14, v15);
  outlined copy of Data?(v17, v18);
  specialized static Data.== infix(_:_:)(v14, v15);
  int v26 = v19;
  outlined consume of Data?(v17, v18);
  outlined consume of Data?(v14, v15);
  if ((v26 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v20 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v20(v12, a1, v4);
  v20(v9, a2, v4);
  uint64_t v21 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v21);
  char v23 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v23(v9, v4);
  v23(v12, v4);
  return v22 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v51 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v50 = (char *)&v48 - v9;
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v49 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation?, NearbyProtoJoinResponse.Content.OneOf_Operation?));
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  char v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  int v26 = (char *)&v48 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v48 - v28;
  uint64_t v30 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v32 = *(void *)a2;
  uint64_t v33 = *((void *)a2 + 1);
  uint64_t v53 = a2;
  if (v30 == v32 && v31 == v33
    || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) != 0))
  {
    uint64_t v48 = v4;
    uint64_t v35 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
    outlined init with copy of (String, Any)( (uint64_t)a1 + *(int *)(v35 + 20),  (uint64_t)v29,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with copy of (String, Any)( (uint64_t)&v53[*(int *)(v35 + 20)],  (uint64_t)v26,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v36 = (uint64_t)&v17[*(int *)(v14 + 48)];
    outlined init with copy of (String, Any)( (uint64_t)v29,  (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with copy of (String, Any)( (uint64_t)v26,  v36,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v37((uint64_t)v17, 1LL, v10) == 1)
    {
      outlined destroy of Any?( (uint64_t)v26,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of Any?( (uint64_t)v29,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      if (v37(v36, 1LL, v10) == 1)
      {
        outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_11:
        uint64_t v40 = v52;
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
        char v42 = v50;
        uint64_t v43 = v48;
        v41(v50, (char *)a1 + *(int *)(v35 + 24), v48);
        uint64_t v44 = v51;
        v41(v51, &v53[*(int *)(v35 + 24)], v43);
        uint64_t v45 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v44, v43, v45);
        uint64_t v46 = *(void (**)(char *, uint64_t))(v40 + 8);
        v46(v44, v43);
        v46(v42, v43);
        return v34 & 1;
      }
    }

    else
    {
      outlined init with copy of (String, Any)( (uint64_t)v17,  (uint64_t)v22,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      if (v37(v36, 1LL, v10) != 1)
      {
        uint64_t v38 = v49;
        outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v36,  v49,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        char v39 = specialized static NearbyProtoJoinResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)( (uint64_t)v22,  v38);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v38,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        outlined destroy of Any?( (uint64_t)v26,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        outlined destroy of Any?( (uint64_t)v29,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v22,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        if ((v39 & 1) != 0) {
          goto LABEL_11;
        }
LABEL_12:
        char v34 = 0;
        return v34 & 1;
      }

      outlined destroy of Any?( (uint64_t)v26,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of Any?( (uint64_t)v29,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v22,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    }

    outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation?, NearbyProtoJoinResponse.Content.OneOf_Operation?));
    goto LABEL_12;
  }

  return v34 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation, NearbyProtoJoinResponse.Content.OneOf_Operation));
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( a1,  (uint64_t)v24,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( a2,  v25,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload(v24, v12) == 1)
  {
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v16,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v25, v12) == 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v25,  (uint64_t)v7,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      char v26 = specialized static NearbyProtoJoinResponse.Content.ApprovalContent.== infix(_:_:)((uint64_t)v16, (uint64_t)v7);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v7,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      uint64_t v27 = (uint64_t)v16;
      uint64_t v28 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent;
LABEL_9:
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v27, v28);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v24,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
      return v26 & 1;
    }

    uint64_t v29 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent;
    uint64_t v30 = (uint64_t)v16;
  }

  else
  {
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v24,  (uint64_t)v19,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(v25, v12) != 1)
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v25,  (uint64_t)v11,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v32 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v11, v31, v32);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v11,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      uint64_t v27 = (uint64_t)v19;
      uint64_t v28 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent;
      goto LABEL_9;
    }

    uint64_t v29 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent;
    uint64_t v30 = (uint64_t)v19;
  }

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v30, v29);
  outlined destroy of Any?( (uint64_t)v24,  &demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation, NearbyProtoJoinResponse.Content.OneOf_Operation));
  char v26 = 0;
  return v26 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.ApprovalContent.== infix(_:_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v31[-v11];
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a2 + 8);
  BOOL v15 = *(void *)a1 == *(void *)a2 && v13 == v14;
  if (v15
    || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v13, *(void *)a2, v14, 0LL) & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16)) & 1) != 0)
    {
      uint64_t v17 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v18 = *(int *)(v17 + 28);
      uint64_t v19 = *(void *)(a1 + v18);
      unint64_t v20 = *(void *)(a1 + v18 + 8);
      uint64_t v21 = (uint64_t *)(a2 + v18);
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      if (v20 >> 60 == 15)
      {
        if (v23 >> 60 == 15) {
          goto LABEL_15;
        }
      }

      else if (v23 >> 60 != 15)
      {
        uint64_t v33 = v17;
        outlined copy of Data?(v19, v20);
        outlined copy of Data?(v22, v23);
        specialized static Data.== infix(_:_:)(v19, v20);
        int v32 = v25;
        outlined consume of Data?(v22, v23);
        outlined consume of Data?(v19, v20);
        uint64_t v17 = v33;
        if ((v32 & 1) != 0)
        {
LABEL_15:
          uint64_t v26 = a1 + *(int *)(v17 + 24);
          uint64_t v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
          uint64_t v28 = v17;
          v27(v12, v26, v4);
          v27(v9, a2 + *(int *)(v28 + 24), v4);
          uint64_t v29 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v29);
          uint64_t v30 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
          v30(v9, v4);
          v30(v12, v4);
          return v16 & 1;
        }

        goto LABEL_12;
      }

      outlined copy of Data?(v19, v20);
      outlined copy of Data?(v22, v23);
      outlined consume of Data?(v19, v20);
      outlined consume of Data?(v22, v23);
    }

uint64_t specialized static NearbyProtoJoinRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v37 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for NearbyProtoJoinRequest(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  BOOL v15 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  if (v14 >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      outlined copy of Data?(v13, v14);
      outlined copy of Data?(v16, v17);
      specialized static Data.== infix(_:_:)(v13, v14);
      char v21 = v20;
      outlined consume of Data?(v16, v17);
      outlined consume of Data?(v13, v14);
      if ((v21 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }

uint64_t specialized static NearbyProtoJoinRequest.Content.== infix(_:_:)(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v40[-v11];
  uint64_t v13 = a1[1];
  uint64_t v14 = *((void *)a2 + 1);
  if (*a1 != *(void *)a2 || v13 != v14)
  {
    char v16 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v13, *(void *)a2, v14, 0LL) & 1) == 0) {
      return v16 & 1;
    }
  }

  unint64_t v17 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  uint64_t v18 = v17[6];
  unint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = *(void *)((char *)a1 + v18 + 8);
  char v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  if (!v20)
  {
    if (v22) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }

  if (!v22) {
    goto LABEL_20;
  }
  BOOL v23 = *v19 == *(void *)v21 && v20 == v22;
  if (v23 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, *(void *)v21, v22, 0LL) & 1) != 0))
  {
LABEL_15:
    uint64_t v42 = v5;
    uint64_t v24 = v17[7];
    uint64_t v25 = *(void *)((char *)a1 + v24);
    unint64_t v26 = *(void *)((char *)a1 + v24 + 8);
    unint64_t v27 = (uint64_t *)&a2[v24];
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    if (v26 >> 60 == 15)
    {
      if (v29 >> 60 == 15)
      {
LABEL_23:
        uint64_t v32 = v17[8];
        int v33 = *((unsigned __int8 *)a1 + v32);
        int v34 = a2[v32];
        if (v33 == 2)
        {
          if (v34 == 2)
          {
LABEL_28:
            uint64_t v35 = (char *)a1 + v17[5];
            uint64_t v36 = v42;
            uint64_t v37 = *(void (**)(_BYTE *, char *, uint64_t))(v42 + 16);
            v37(v12, v35, v4);
            v37(v9, &a2[v17[5]], v4);
            uint64_t v38 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v4, v38);
            char v39 = *(void (**)(_BYTE *, uint64_t))(v36 + 8);
            v39(v9, v4);
            v39(v12, v4);
            return v16 & 1;
          }
        }

        else if (v34 != 2 && ((((v34 & 1) == 0) ^ v33) & 1) != 0)
        {
          goto LABEL_28;
        }

uint64_t type metadata accessor for NearbyProtoSessionMessage(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoSessionMessage,  (uint64_t)&nominal type descriptor for NearbyProtoSessionMessage);
}

uint64_t type metadata accessor for NearbyProtoConnectionRequest(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionRequest,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionRequest);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.OneOf_Operation,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t type metadata accessor for NearbyProtoJoinRequest.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinRequest.Content,  (uint64_t)&nominal type descriptor for NearbyProtoJoinRequest.Content);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse,  (uint64_t)&nominal type descriptor for NearbyProtoJoinResponse);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content,  (uint64_t)&nominal type descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.OneOf_Operation,  (uint64_t)&nominal type descriptor for NearbyProtoJoinResponse.Content.OneOf_Operation);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&nominal type descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&nominal type descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner( a1,  (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse,  (uint64_t)&nominal type descriptor for NearbyProtoConnectionResponse);
}

unint64_t lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyProtoNearbySessionMessageType,  &type metadata for NearbyProtoNearbySessionMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyProtoNearbySessionMessageType,  &type metadata for NearbyProtoNearbySessionMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyProtoNearbySessionMessageType,  &type metadata for NearbyProtoNearbySessionMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyProtoNearbySessionMessageType,  &type metadata for NearbyProtoNearbySessionMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [NearbyProtoNearbySessionMessageType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NearbyProtoNearbySessionMessageType]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A]);
  }

  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Message in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Hashable in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Equatable in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse,  type metadata accessor for NearbyProtoConnectionResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest,  type metadata accessor for NearbyProtoJoinRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content,  type metadata accessor for NearbyProtoJoinRequest.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse,  type metadata accessor for NearbyProtoJoinResponse,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t sub_10005F880@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v5 = (int *)(a1 + *(int *)(result + 20));
  if (*((_BYTE *)v5 + 4)) {
    int v6 = 0;
  }
  else {
    int v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10005F8C4(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t sub_10005F8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  uint64_t v6 = *v5;
  char v7 = *((_BYTE *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0LL;
  }
  *(void *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t sub_10005F950(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0LL);
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t sub_10005F998@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_3Tm(a1, type metadata accessor for NearbyProtoSessionMessage, a2);
}

uint64_t sub_10005F9A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t sub_10005F9C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0LL) + 32));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000LL;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t sub_10005FA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent,  0LL);
}

uint64_t sub_10005FA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent,  1LL);
}

uint64_t sub_10005FA60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_13Tm(a1, type metadata accessor for NearbyProtoJoinRequest, a2);
}

uint64_t sub_10005FA6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t sub_10005FA88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0LL) + 24));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000LL;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t sub_10005FAE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_3Tm(a1, type metadata accessor for NearbyProtoJoinRequest.Content, a2);
}

uint64_t keypath_get_3Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0LL) + 28));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *a3 = v7;
  a3[1] = v8;
  return outlined copy of Data?(v5, v6);
}

uint64_t sub_10005FB38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t sub_10005FB54@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 32)) & 1;
  return result;
}

uint64_t sub_10005FB8C(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  *(_BYTE *)(a2 + *(int *)(result + swift_release(*(void *)(v0 + 32)) = v3;
  return result;
}

uint64_t sub_10005FBBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_13Tm(a1, type metadata accessor for NearbyProtoJoinResponse, a2);
}

uint64_t keypath_get_13Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0LL) + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *a3 = v7;
  a3[1] = v8;
  return outlined copy of Data?(v5, v6);
}

uint64_t sub_10005FC14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t sub_10005FC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent,  0LL);
}

double sub_10005FC54@<D0>(void *a1@<X8>)
{
  return NearbyProtoJoinResponse.Content.approved.getter(a1);
}

uint64_t sub_10005FC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent,  1LL);
}

uint64_t sub_10005FC94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_3Tm(a1, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent, a2);
}

uint64_t sub_10005FCA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage( a1,  a2,  a3,  a4,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoNearbySessionMessageType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoNearbySessionMessageType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for NearbyProtoNearbySessionMessageType(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for NearbyProtoNearbySessionMessageType(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbyProtoNearbySessionMessageType()
{
  return &type metadata for NearbyProtoNearbySessionMessageType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoSessionMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    *((_WORD *)v12 + 4) = *((_WORD *)v13 + 4);
    uint64_t v14 = a3[7];
    BOOL v15 = (char *)a1 + v14;
    char v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)BOOL v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v19 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)BOOL v15 = v19;
      *((void *)v15 + 1) = v17;
    }
  }

  return a1;
}

uint64_t destroy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    return outlined consume of Data._Representation(*v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  BOOL v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }

  else
  {
    uint64_t v17 = *v15;
    outlined copy of Data._Representation(*v15, v15[1]);
    *(void *)uint64_t v14 = v17;
    *(void *)(v14 + 8) = v16;
  }

  return a1;
}

uint64_t assignWithCopy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  *(_WORD *)(v12 + 8) = *((_WORD *)v13 + 4);
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[7];
  unint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *unint64_t v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }

    outlined destroy of Data((uint64_t)v16);
    goto LABEL_6;
  }

  if (v18 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    return a1;
  }

  uint64_t v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *unint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *uint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }

    outlined destroy of Data((uint64_t)v14);
  }

  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060228);
}

uint64_t sub_100060228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoSessionMessage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000602BC);
}

uint64_t sub_1000602BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 28));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata completion function for NearbyProtoSessionMessage(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000AD9E0;
    void v4[2] = &unk_1000AD9F8;
    void v4[3] = &unk_1000ADA10;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionRequest( uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    BOOL v10 = (char *)a1 + v9;
    unsigned int v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    __n128 v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    unint64_t v17 = (uint64_t *)((char *)v4 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *unint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (char *)v4 + v16;
    uint64_t v21 = (_OWORD *)((char *)a2 + v16);
    unint64_t v22 = *(uint64_t *)((char *)a2 + v16 + 8);
    swift_bridgeObjectRetain(v19);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v20 = *v21;
    }

    else
    {
      uint64_t v24 = *(void *)v21;
      outlined copy of Data._Representation(v24, v22);
      *(void *)uint64_t v20 = v24;
      *((void *)v20 + 1) = v22;
    }
  }

  return v4;
}

uint64_t destroy for NearbyProtoConnectionRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[8]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    return outlined consume of Data._Representation(*v7, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  BOOL v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  __n128 v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)((char *)a1 + v14);
  unint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (char *)a1 + v15;
  uint64_t v20 = (char *)a2 + v15;
  unint64_t v21 = *((void *)v20 + 1);
  swift_bridgeObjectRetain(v18);
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }

  else
  {
    uint64_t v22 = *(void *)v20;
    outlined copy of Data._Representation(v22, v21);
    *(void *)uint64_t v19 = v22;
    *((void *)v19 + 1) = v21;
  }

  return a1;
}

void *assignWithCopy for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  unint64_t v21 = (void *)((char *)a2 + v19);
  unint64_t v22 = *(void *)((char *)a2 + v19 + 8);
  if (*(void *)((char *)a1 + v19 + 8) >> 60 != 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      outlined copy of Data._Representation(v24, v22);
      uint64_t v25 = *v20;
      unint64_t v26 = v20[1];
      *uint64_t v20 = v24;
      v20[1] = v22;
      outlined consume of Data._Representation(v25, v26);
      return a1;
    }

    outlined destroy of Data((uint64_t)v20);
    goto LABEL_6;
  }

  if (v22 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }

  uint64_t v23 = *v21;
  outlined copy of Data._Representation(v23, v22);
  *uint64_t v20 = v23;
  v20[1] = v22;
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  unint64_t v21 = (void *)((char *)a1 + v20);
  unint64_t v22 = (void *)((char *)a2 + v20);
  unint64_t v23 = *(void *)((char *)a1 + v20 + 8);
  if (v23 >> 60 != 15)
  {
    unint64_t v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = *v21;
      *unint64_t v21 = *v22;
      v21[1] = v24;
      outlined consume of Data._Representation(v25, v23);
      return a1;
    }

    outlined destroy of Data((uint64_t)v21);
  }

  *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_31Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_32Tm);
}

uint64_t type metadata completion function for NearbyProtoConnectionRequest(uint64_t a1)
{
  v4[0] = &unk_1000ADA50;
  v4[1] = &unk_1000ADA50;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1000ADA68;
    void v4[4] = &unk_1000ADA10;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_33Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_34Tm);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    __n128 v15 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1LL, v12, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
      {
        uint64_t v18 = *v11;
        unint64_t v19 = v11[1];
        outlined copy of Data._Representation(*v11, v19);
        *uint64_t v10 = v18;
        v10[1] = v19;
        uint64_t v20 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
        unint64_t v21 = (char *)v10 + v20;
        unint64_t v22 = (char *)v11 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
        uint64_t v24 = 1LL;
      }

      else
      {
        uint64_t v25 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v10, v11, v25);
        uint64_t v24 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v10, v12, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v26 = *(int *)(a3 + 28);
    unint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
  }

  return v4;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
    {
      outlined consume of Data._Representation(*(void *)v4, *(void *)(v4 + 8));
      v4 += *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
    }

    uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v4, v6);
  }

  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

void *initializeWithCopy for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  __n128 v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1LL, v11, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      uint64_t v16 = *v10;
      unint64_t v17 = v10[1];
      outlined copy of Data._Representation(*v10, v17);
      void *v9 = v16;
      v9[1] = v17;
      uint64_t v18 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      unint64_t v19 = (char *)v9 + v18;
      uint64_t v20 = (char *)v10 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
      uint64_t v22 = 1LL;
    }

    else
    {
      uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v9, v10, v23);
      uint64_t v22 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v11, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v24 = *(int *)(a3 + 28);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
  return a1;
}

void *assignWithCopy for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
      {
        uint64_t v18 = *v12;
        unint64_t v19 = v12[1];
        outlined copy of Data._Representation(*v12, v19);
        *uint64_t v11 = v18;
        v11[1] = v19;
        uint64_t v20 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
        uint64_t v21 = (char *)v11 + v20;
        uint64_t v22 = (char *)v12 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
        uint64_t v24 = 1LL;
      }

      else
      {
        uint64_t v32 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v11, v12, v32);
        uint64_t v24 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v11, v13, v24);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_13;
    }

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *uint64_t v8 = *v9;
      uint64_t v13 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      uint64_t v14 = (char *)v8 + v13;
      uint64_t v15 = (char *)v9 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
      uint64_t v17 = 1LL;
    }

    else
    {
      uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v8, v9, v18);
      uint64_t v17 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v10, v17);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  return a1;
}

void *assignWithTake for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (_OWORD *)((char *)a1 + v10);
  uint64_t v12 = (_OWORD *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
      {
        *uint64_t v11 = *v12;
        uint64_t v18 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
        uint64_t v19 = (char *)v11 + v18;
        uint64_t v20 = (char *)v12 + v18;
        uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v19, v20, v21);
        uint64_t v22 = 1LL;
      }

      else
      {
        uint64_t v28 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v11, v12, v28);
        uint64_t v22 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v11, v13, v22);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_13;
    }

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000614AC);
}

uint64_t sub_1000614AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006155C);
}

uint64_t sub_10006155C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void type metadata completion function for NearbyProtoConnectionResponse.Content(uint64_t a1)
{
  v6[0] = &unk_1000ADA50;
  v6[1] = &unk_1000ADA50;
  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?( 319LL,  &lazy cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (v3 <= 0x3F)
  {
    void v6[2] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UnknownStorage(319LL);
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 1LL;
    }

    else
    {
      uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a1, a2, v17);
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }

  return a1;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
    v2 += *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
  }

  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t *initializeWithCopy for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    outlined copy of Data._Representation(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a1;
    uint64_t v13 = a3;
    uint64_t v14 = 1LL;
  }

  else
  {
    uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
    uint64_t v12 = a1;
    uint64_t v13 = a3;
    uint64_t v14 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v12, v13, v14);
  return a1;
}

uint64_t *assignWithCopy for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      outlined copy of Data._Representation(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      uint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 1LL;
    }

    else
    {
      uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
      uint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }

  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content.OneOf_Operation( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

_OWORD *assignWithTake for NearbyProtoConnectionResponse.Content.OneOf_Operation( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)a1,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL) + 20);
      unint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }

  return a1;
}

uint64_t destructiveInjectEnumTag for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation( a1,  a2,  a3,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return a1;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *initializeWithCopy for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content.ApprovalContent( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061E1C);
}

uint64_t sub_100061E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061EB0);
}

char *sub_100061EB0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.ApprovalContent( uint64_t a1)
{
  v4[0] = &unk_1000ADAC8;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_33Tm_0);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.DeniedContent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_34Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)unint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v18 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }
  }

  return a1;
}

uint64_t destroy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    return outlined consume of Data._Representation(*v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }

  return a1;
}

uint64_t assignWithCopy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)(a1 + v15);
  unint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *uint64_t v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }

    outlined destroy of Data((uint64_t)v16);
    goto LABEL_13;
  }

  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    return a1;
  }

  uint64_t v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *uint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }

  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 24);
  unint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *unint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }

    outlined destroy of Data((uint64_t)v14);
  }

  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_41Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_42Tm);
}

uint64_t type metadata completion function for NearbyProtoJoinRequest(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000ADA10;
    void v4[2] = &unk_1000ADA10;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
    __n128 v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    unint64_t v16 = (void *)((char *)v4 + v14);
    unint64_t v17 = (void *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *unint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (char *)v4 + v15;
    uint64_t v20 = (_OWORD *)((char *)a2 + v15);
    unint64_t v21 = *(void *)((char *)a2 + v15 + 8);
    swift_bridgeObjectRetain(v18);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *v20;
    }

    else
    {
      uint64_t v23 = *(void *)v20;
      outlined copy of Data._Representation(v23, v21);
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }

    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }

  return v4;
}

uint64_t destroy for NearbyProtoJoinRequest.Content(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    return outlined consume of Data._Representation(*v7, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v10 - 8) + 16LL);
  __n128 v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v13);
  unint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (char *)a1 + v14;
  uint64_t v19 = (_OWORD *)((char *)a2 + v14);
  unint64_t v20 = *(void *)((char *)a2 + v14 + 8);
  swift_bridgeObjectRetain(v17);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *v19;
  }

  else
  {
    uint64_t v21 = *(void *)v19;
    outlined copy of Data._Representation(v21, v20);
    *(void *)uint64_t v18 = v21;
    *((void *)v18 + 1) = v20;
  }

  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

void *assignWithCopy for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  unint64_t v20 = *(void *)((char *)a2 + v17 + 8);
  if (*(void *)((char *)a1 + v17 + 8) >> 60 != 15LL)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v22 = *v19;
      outlined copy of Data._Representation(v22, v20);
      uint64_t v23 = *v18;
      unint64_t v24 = v18[1];
      *uint64_t v18 = v22;
      v18[1] = v20;
      outlined consume of Data._Representation(v23, v24);
      goto LABEL_8;
    }

    outlined destroy of Data((uint64_t)v18);
    goto LABEL_6;
  }

  if (v20 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    goto LABEL_8;
  }

  uint64_t v21 = *v19;
  outlined copy of Data._Representation(v21, v20);
  *uint64_t v18 = v21;
  v18[1] = v20;
LABEL_8:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoJoinRequest.Content(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 10) = *(_OWORD *)((char *)a2 + v10);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)((char *)a1 + v18);
  unint64_t v20 = (void *)((char *)a2 + v18);
  unint64_t v21 = *(void *)((char *)a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v19;
      *uint64_t v19 = *v20;
      v19[1] = v22;
      outlined consume of Data._Representation(v23, v21);
      goto LABEL_6;
    }

    outlined destroy of Data((uint64_t)v19);
  }

  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
LABEL_6:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062A8C);
}

uint64_t sub_100062A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinRequest.Content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062B14);
}

uint64_t sub_100062B14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinRequest.Content(uint64_t a1)
{
  v4[0] = &unk_1000ADA50;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1000ADA68;
    void v4[3] = &unk_1000ADA10;
    void v4[4] = &unk_1000ADB08;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }

  return a1;
}

uint64_t destroy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    return outlined consume of Data._Representation(*v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }

  return a1;
}

uint64_t assignWithCopy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      return a1;
    }

    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }

  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }

    outlined destroy of Data((uint64_t)v8);
  }

  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062F98);
}

uint64_t __swift_get_extra_inhabitant_index_41Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063030);
}

uint64_t __swift_store_extra_inhabitant_index_42Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 20));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinResponse(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000ADA10;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    BOOL v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t, __n128))(v12 + 48);
    __n128 v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
      {
        uint64_t v17 = v10[1];
        void *v9 = *v10;
        v9[1] = v17;
        uint64_t v18 = v10[2];
        v9[2] = v18;
        uint64_t v19 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
        uint64_t v20 = *(int *)(v19 + 24);
        uint64_t v37 = (char *)v9 + v20;
        uint64_t v38 = v19;
        uint64_t v36 = (char *)v10 + v20;
        uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v21 - 8) + 16LL);
        swift_bridgeObjectRetain(v17);
        __n128 v22 = swift_bridgeObjectRetain(v18);
        v35(v37, v36, v21, v22);
        uint64_t v23 = *(int *)(v38 + 28);
        unint64_t v24 = (char *)v9 + v23;
        uint64_t v25 = (char *)v10 + v23;
        unint64_t v26 = *((void *)v25 + 1);
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
        }

        else
        {
          uint64_t v29 = *(void *)v25;
          outlined copy of Data._Representation(*(void *)v25, *((void *)v25 + 1));
          *(void *)unint64_t v24 = v29;
          *((void *)v24 + 1) = v26;
        }

        uint64_t v28 = 1LL;
      }

      else
      {
        uint64_t v27 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v9, v10, v27);
        uint64_t v28 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v9, v11, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v30 = *(int *)(a3 + 24);
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
  }

  return v4;
}

uint64_t destroy for NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
    {
      swift_bridgeObjectRelease(*(void *)(v4 + 8));
      swift_bridgeObjectRelease(*(void *)(v4 + 16));
      uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v7 = v4 + *(int *)(v6 + 24);
      uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
      uint64_t v9 = (uint64_t *)(v4 + *(int *)(v6 + 28));
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        outlined consume of Data._Representation(*v9, v10);
      }
    }

    else
    {
      uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
    }
  }

  uint64_t v12 = a1 + *(int *)(a2 + 24);
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t, __n128))(v11 + 48);
  __n128 v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      uint64_t v15 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v15;
      uint64_t v16 = v9[2];
      void v8[2] = v16;
      uint64_t v17 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v18 = *(int *)(v17 + 24);
      uint64_t v35 = (char *)v8 + v18;
      uint64_t v36 = v17;
      uint64_t v34 = (char *)v9 + v18;
      uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v19 - 8) + 16LL);
      swift_bridgeObjectRetain(v15);
      __n128 v20 = swift_bridgeObjectRetain(v16);
      v33(v35, v34, v19, v20);
      uint64_t v21 = *(int *)(v36 + 28);
      __n128 v22 = (char *)v8 + v21;
      uint64_t v23 = (char *)v9 + v21;
      unint64_t v24 = *((void *)v23 + 1);
      if (v24 >> 60 == 15)
      {
        *(_OWORD *)__n128 v22 = *(_OWORD *)v23;
      }

      else
      {
        uint64_t v27 = *(void *)v23;
        outlined copy of Data._Representation(*(void *)v23, *((void *)v23 + 1));
        *(void *)__n128 v22 = v27;
        *((void *)v22 + 1) = v24;
      }

      uint64_t v26 = 1LL;
    }

    else
    {
      uint64_t v25 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v8, v9, v25);
      uint64_t v26 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v10, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v28 = *(int *)(a3 + 24);
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
      {
        void *v9 = *v10;
        uint64_t v16 = v10[1];
        v9[1] = v16;
        uint64_t v17 = v10[2];
        v9[2] = v17;
        uint64_t v18 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
        uint64_t v19 = *(int *)(v18 + 24);
        uint64_t v50 = (char *)v9 + v19;
        uint64_t v52 = v18;
        uint64_t v48 = (char *)v10 + v19;
        uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v20 - 8) + 16LL);
        swift_bridgeObjectRetain(v16);
        __n128 v21 = swift_bridgeObjectRetain(v17);
        v47(v50, v48, v20, v21);
        uint64_t v22 = *(int *)(v52 + 28);
        uint64_t v23 = (char *)v9 + v22;
        unint64_t v24 = (char *)v10 + v22;
        unint64_t v25 = *((void *)v24 + 1);
        if (v25 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
        }

        else
        {
          uint64_t v39 = *(void *)v24;
          outlined copy of Data._Representation(*(void *)v24, *((void *)v24 + 1));
          *(void *)uint64_t v23 = v39;
          *((void *)v23 + 1) = v25;
        }

        uint64_t v38 = 1LL;
      }

      else
      {
        uint64_t v37 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16LL))(v9, v10, v37);
        uint64_t v38 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v9, v11, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_17;
    }

_OWORD *initializeWithTake for NearbyProtoJoinResponse.Content(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      uint64_t v7[2] = v8[2];
      uint64_t v12 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v13 = *(int *)(v12 + 24);
      int v14 = (char *)v7 + v13;
      int v15 = (char *)v8 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
      *(_OWORD *)((char *)v7 + *(int *)(v12 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_OWORD *)((char *)v8 + *(int *)(v12 + 28));
      uint64_t v17 = 1LL;
    }

    else
    {
      uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v7, v8, v18);
      uint64_t v17 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v9, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)a1 + v19;
  __n128 v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  return a1;
}

void *assignWithTake for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        v9[2] = v10[2];
        uint64_t v16 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
        uint64_t v17 = *(int *)(v16 + 24);
        uint64_t v18 = (char *)v9 + v17;
        uint64_t v19 = (char *)v10 + v17;
        uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
        *(_OWORD *)((char *)v9 + *(int *)(v16 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_OWORD *)((char *)v10 + *(int *)(v16 + 28));
        uint64_t v21 = 1LL;
      }

      else
      {
        uint64_t v28 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v9, v10, v28);
        uint64_t v21 = 0LL;
      }

      swift_storeEnumTagMultiPayload(v9, v11, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_13;
    }

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063DB8);
}

uint64_t sub_100063DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063E68);
}

uint64_t sub_100063E68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void type metadata completion function for NearbyProtoJoinResponse.Content(uint64_t a1)
{
  v6[0] = &unk_1000ADA50;
  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?( 319LL,  &lazy cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UnknownStorage(319LL);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

void type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?( uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      a1[2] = v8;
      uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v10 = *(int *)(v9 + 24);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
      int v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
      swift_bridgeObjectRetain(v7);
      __n128 v15 = swift_bridgeObjectRetain(v8);
      v14(v11, v12, v13, v15);
      uint64_t v16 = *(int *)(v9 + 28);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      unint64_t v19 = *((void *)v18 + 1);
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      }

      else
      {
        uint64_t v25 = *(void *)v18;
        outlined copy of Data._Representation(*(void *)v18, *((void *)v18 + 1));
        *(void *)uint64_t v17 = v25;
        *((void *)v17 + 1) = v19;
      }

      uint64_t v22 = a1;
      uint64_t v23 = a3;
      uint64_t v24 = 1LL;
    }

    else
    {
      uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
      uint64_t v22 = a1;
      uint64_t v23 = a3;
      uint64_t v24 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }

  return a1;
}

uint64_t destroy for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    swift_bridgeObjectRelease(*(void *)(a1 + 16));
    uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
    uint64_t v4 = a1 + *(int *)(v3 + 24);
    uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
    uint64_t v7 = (uint64_t *)(a1 + *(int *)(v3 + 28));
    unint64_t v8 = v7[1];
    if (v8 >> 60 != 15) {
      return outlined consume of Data._Representation(*v7, v8);
    }
  }

  else
  {
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1, v9);
  }

  return result;
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content.OneOf_Operation( void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[2];
    a1[2] = v7;
    uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v6);
    __n128 v14 = swift_bridgeObjectRetain(v7);
    v13(v10, v11, v12, v14);
    uint64_t v15 = *(int *)(v8 + 28);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }

    else
    {
      uint64_t v23 = *(void *)v17;
      outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v23;
      *((void *)v16 + 1) = v18;
    }

    uint64_t v20 = a1;
    uint64_t v21 = a3;
    uint64_t v22 = 1LL;
  }

  else
  {
    uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16LL))(a1, a2, v19);
    uint64_t v20 = a1;
    uint64_t v21 = a3;
    uint64_t v22 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v20, v21, v22);
  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content.OneOf_Operation( void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)a1,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = a2[1];
      a1[1] = v6;
      uint64_t v7 = a2[2];
      a1[2] = v7;
      uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v9 = *(int *)(v8 + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
      swift_bridgeObjectRetain(v6);
      __n128 v14 = swift_bridgeObjectRetain(v7);
      v13(v10, v11, v12, v14);
      uint64_t v15 = *(int *)(v8 + 28);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      unint64_t v18 = *((void *)v17 + 1);
      if (v18 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      }

      else
      {
        uint64_t v23 = *(void *)v17;
        outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
        *(void *)uint64_t v16 = v23;
        *((void *)v16 + 1) = v18;
      }

      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 1LL;
    }

    else
    {
      uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16LL))(a1, a2, v19);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }

  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
    uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    *(_OWORD *)(a1 + *(int *)(v6 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_OWORD *)(a2 + *(int *)(v6 + 28));
    uint64_t v11 = a1;
    uint64_t v12 = a3;
    uint64_t v13 = 1LL;
  }

  else
  {
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
    uint64_t v11 = a1;
    uint64_t v12 = a3;
    uint64_t v13 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( a1,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
      uint64_t v7 = *(int *)(v6 + 24);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      *(_OWORD *)(a1 + *(int *)(v6 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_OWORD *)(a2 + *(int *)(v6 + 28));
      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t type metadata completion function for NearbyProtoJoinResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation( a1,  a2,  a3,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v9[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = a4(319LL);
    if (v8 <= 0x3F)
    {
      v9[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v9);
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    __n128 v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }

    else
    {
      uint64_t v20 = *(void *)v17;
      outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v20;
      *((void *)v16 + 1) = v18;
    }
  }

  return v4;
}

uint64_t destroy for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    return outlined consume of Data._Representation(*v7, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content.ApprovalContent( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  __n128 v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  unint64_t v17 = *((void *)v16 + 1);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }

  else
  {
    uint64_t v18 = *(void *)v16;
    outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
    *(void *)uint64_t v15 = v18;
    *((void *)v15 + 1) = v17;
  }

  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content.ApprovalContent( void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  unint64_t v17 = *(void *)((char *)a2 + v14 + 8);
  if (*(void *)((char *)a1 + v14 + 8) >> 60 != 15LL)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v19 = *v16;
      outlined copy of Data._Representation(v19, v17);
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      *uint64_t v15 = v19;
      v15[1] = v17;
      outlined consume of Data._Representation(v20, v21);
      return a1;
    }

    outlined destroy of Data((uint64_t)v15);
    goto LABEL_6;
  }

  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    return a1;
  }

  uint64_t v18 = *v16;
  outlined copy of Data._Representation(v18, v17);
  *uint64_t v15 = v18;
  v15[1] = v17;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 2specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *assignWithTake for NearbyProtoJoinResponse.Content.ApprovalContent( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)((char *)a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *uint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }

    outlined destroy of Data((uint64_t)v14);
  }

  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100064BF8);
}

uint64_t __swift_get_extra_inhabitant_index_31Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content.ApprovalContent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064C84);
}

uint64_t __swift_store_extra_inhabitant_index_32Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1)
{
  v4[0] = &unk_1000ADA50;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1000ADA10;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NearbyProtoConnectionResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100064F10);
}

uint64_t __swift_get_extra_inhabitant_index_33Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content.DeniedContent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064F5C);
}

uint64_t __swift_store_extra_inhabitant_index_34Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

Swift::Void __swiftcall NearbyInvitationServiceHost.resume()()
{
}

id NearbyInvitationServiceHost.queue.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue));
}

void *NearbyInvitationServiceHost.connection.getter()
{
  uint64_t v1 = (void **)(v0
               + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection,  v5,  0LL,  0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void NearbyInvitationServiceHost.connection.setter(void *a1)
{
  id v3 = (void **)(v1
               + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*NearbyInvitationServiceHost.connection.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationServiceHost.dataSource.getter()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource));
}

char *NearbyInvitationServiceHost.__allocating_init(listener:queue:featureFlags:)( void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(a1, a2, a3);
}

char *NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(void *a1, void *a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  *(void *)&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection] = 0LL;
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource;
  uint64_t v9 = type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = v3;
  NearbyInvitationsProviderDataSource.init()();
  *(void *)&v3[v8] = v11;
  *(void *)&v10[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener] = a1;
  *(void *)&v10[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue] = a2;
  *(void *)&v10[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_featureFlags] = a3;
  id v12 = a1;
  id v13 = a2;
  id v14 = a3;

  v27.receiver = v10;
  v27.super_class = ObjectType;
  id v15 = objc_msgSendSuper2(&v27, "init");
  uint64_t v16 = one-time initialization token for host;
  unint64_t v17 = (char *)v15;
  if (v16 != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v18, (uint64_t)static Log.host);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Initialized NearbyInvitationServiceHost", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = *(void *)&v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource];
  uint64_t v23 = *(void (**)(char *, _UNKNOWN **))(*(void *)v22 + 216LL);
  uint64_t v24 = v17;
  swift_retain(v22);
  v23(v17, &protocol witness table for NearbyInvitationServiceHost);
  swift_release(v22);
  uint64_t v25 = v24;
  [v12 setDelegate:v25];

  return v25;
}

id NearbyInvitationServiceHost.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  [*(id *)&v0[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener] invalidate];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

void NearbyInvitationServiceHost.init()()
{
}

Swift::Bool __swiftcall NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)( NSXPCListener *_, NSXPCConnection *shouldAcceptNewConnection)
{
  return specialized NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection);
}

uint64_t NearbyInvitationServiceHost.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    id v19 = v5;
    v20[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = type metadata accessor for IncomingInvitationJoinRequest(0LL);
    id v11 = v5;
    uint64_t v12 = String.init<A>(reflecting:)(&v19, v10);
    unint64_t v14 = v13;
    id v19 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "NearbyInvitationServiceHost: Did receive invitation request: %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  id v15 = (id *)(v2
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess(v15, v20, 0LL, 0LL);
  if (*v15)
  {
    id v17 = *v15;
    XPCHostConnection.clientObject.getter(&v19);

    id v18 = v19;
    [v19 didReceiveInvitationApprovalRequestWithRequest:v5];
    return swift_unknownObjectRelease(v18);
  }

  return result;
}

Swift::Void __swiftcall NearbyInvitationServiceHost.didUpdateGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = swift_bridgeObjectRetain_n(a1._rawValue, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t rawValue = (uint64_t)a1._rawValue;
    v19[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(a1._rawValue);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NearbyGroupConnectionInfo]);
    uint64_t v11 = String.init<A>(reflecting:)(&rawValue, v10);
    unint64_t v13 = v12;
    uint64_t rawValue = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rawValue, v19, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(a1._rawValue, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "NearbyInvitationServiceHost: Updating clients about groups: %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1._rawValue, 2LL);
  }

  unint64_t v14 = (id *)(v2
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess( v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection,  v19,  0LL,  0LL);
  if (*v14)
  {
    id v15 = *v14;
    XPCHostConnection.clientObject.getter(&rawValue);

    uint64_t v16 = (void *)rawValue;
    type metadata accessor for NearbyGroupConnectionInfo(0LL);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v16 didReceiveUpdatedGroups:isa];

    swift_unknownObjectRelease(v16);
  }

uint64_t NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)( a1,  "NearbyInvitationServiceHost: Updating client about connection request %@",  (SEL *)&selRef_didReceiveConnectionRequestWithAdvertisement_);
}

uint64_t NearbyInvitationServiceHost.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v19 = v2;
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v21[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = [v5 debugDescription];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v13 = v12;

    id v20 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v8 + 4, v8 + 12);

    unint64_t v14 = v13;
    uint64_t v2 = v19;
    swift_bridgeObjectRelease(v14);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "NearbyInvitationServiceHost: Updating client about nearby advertisement %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  id v15 = (id *)(v2
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess(v15, v21, 0LL, 0LL);
  if (*v15)
  {
    id v17 = *v15;
    XPCHostConnection.clientObject.getter(&v20);

    id v18 = v20;
    [v20 didDiscoverNearbyAdvertisementWithAdvertisement:v5];
    return swift_unknownObjectRelease(v18);
  }

  return result;
}

uint64_t NearbyInvitationServiceHost.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)( a1,  "NearbyInvitationServiceHost: Updating client lost nearby advertisement %@",  (SEL *)&selRef_didLoseNearbyAdvertisementWithAdvertisement_);
}

uint64_t NearbyInvitationServiceHost.didDiscoverNearbySessionInvitation(id:invitation:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  outlined copy of Data._Representation(a3, a4);
  uint64_t v9 = outlined copy of Data._Representation(a3, a4);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v22;
    *(_DWORD *)unint64_t v12 = 136315138;
    outlined copy of Data._Representation(a3, a4);
    uint64_t v13 = Data.description.getter(a3, a4);
    unint64_t v15 = v14;
    outlined consume of Data._Representation(a3, a4);
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v15);
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "NearbyInvitationServiceHost: Updating client about discovered invitation %s",  v12,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  uint64_t v16 = (id *)(v5
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess( v5 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection,  v24,  0LL,  0LL);
  if (*v16)
  {
    id v18 = *v16;
    XPCHostConnection.clientObject.getter(&v23);

    uint64_t v19 = (void *)v23;
    NSString v20 = String._bridgeToObjectiveC()();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v19 didDiscoverNearbySessionInvitationWithId:v20 invitation:isa];

    return swift_unknownObjectRelease(v19);
  }

  return result;
}

uint64_t NearbyInvitationServiceHost.didReceiveSessionJoinResponse(response:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)( a1,  "NearbyInvitationServiceHost: Updating client about join response %@",  (SEL *)&selRef_didReceiveSessionJoinResponseWithResponse_);
}

uint64_t NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(void *a1, char *a2, SEL *a3)
{
  uint64_t v6 = v3;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  id v9 = a1;
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v12 = 138412290;
    id v23 = v9;
    format = a2;
    unint64_t v14 = a3;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
    *uint64_t v13 = v9;

    a3 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, format, v12, 0xCu);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v13, 1LL, v16);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

  id v17 = (id *)(v6
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess(v17, &v23, 0LL, 0LL);
  if (*v17)
  {
    id v19 = *v17;
    XPCHostConnection.clientObject.getter(&v22);

    id v20 = v22;
    objc_msgSend(v22, *a3, v9);
    return swift_unknownObjectRelease(v20);
  }

  return result;
}

char *specialized NearbyInvitationServiceHost.__allocating_init(listener:featureFlags:)(void *a1, void *a2)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  os_log_type_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8, v9);
  os_log_type_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12, v13);
  id v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v25 = 0LL;
  unint64_t v26 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(46LL);
  uint64_t v16 = swift_bridgeObjectRelease(v26);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v25 = &_swiftEmptyArrayStorage;
  unint64_t v17 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v19 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v8, v17);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v3);
  id v20 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000047LL,  0x80000001000B0B20LL,  v15,  v11,  v7,  0LL);
  id v21 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceHost());
  return NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(a1, v20, v24);
}

uint64_t specialized NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v38 = v5;
    uint64_t v9 = v2;
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v8 + 4, v8 + 12);
    *uint64_t v10 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v10, 1LL, v12);
    uint64_t v13 = v10;
    uint64_t v2 = v9;
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  if ((NSXPCConnection.isEntitledToUseNearbyInvitations.getter() & 1) == 0)
  {
    id v24 = v5;
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      objc_super v27 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v26 = 138412290;
      id v38 = v24;
      id v28 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v26 + 4, v26 + 12);
      *objc_super v27 = v24;

      uint64_t v29 = "NearbyInvitationServiceHost rejecting connection %@ because client is not entitled";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v23, v25, v29, v26, 0xCu);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v27, 1LL, v33);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v34 = v26;
LABEL_15:
      swift_slowDealloc(v34, -1LL, -1LL);
      uint64_t v22 = 0LL;
      goto LABEL_18;
    }

LABEL_16:
    goto LABEL_17;
  }

  NSXPCConnection.bundleIdentifier.getter();
  if (!v14)
  {
    id v24 = v5;
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v25 = static os_log_type_t.error.getter(v23, v30, v31);
    if (os_log_type_enabled(v23, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      objc_super v27 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v26 = 138412290;
      id v38 = v24;
      id v32 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v26 + 4, v26 + 12);
      *objc_super v27 = v24;

      uint64_t v29 = "NearbyInvitationServiceHost rejecting connection because a client identifier could not be derived: %@";
      goto LABEL_14;
    }

    goto LABEL_16;
  }

  swift_bridgeObjectRelease(v14);
  id v15 = *(void **)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue);
  uint64_t v16 = *(void *)(v2
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource);
  objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceHostConnection(0LL));
  id v17 = v5;
  id v18 = v15;
  swift_retain();
  uint64_t v19 = NearbyInvitationServiceHostConnection.init(connection:queue:dataSource:)((uint64_t)v17, (uint64_t)v18, v16);
  if (!v19)
  {
    id v24 = v17;
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v37 = 67109120;
      LODWORD(v38) = [v24 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 4, v37 + 4, v37 + 8);

      _os_log_impl( (void *)&_mh_execute_header,  v23,  v36,  "NearbyInvitationServiceHost could not be created; rejecting connection from PID %d.",
        v37,
        8u);
      uint64_t v34 = v37;
      goto LABEL_15;
    }

LABEL_17:
    uint64_t v22 = 0LL;
    uint64_t v23 = (os_log_s *)v24;
    goto LABEL_18;
  }

  id v20 = (os_log_s *)v19;
  id v21 = (os_log_s **)(v2
                    + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t v22 = 1LL;
  swift_beginAccess( v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection,  &v38,  1LL,  0LL);
  uint64_t v23 = *v21;
  *id v21 = v20;
LABEL_18:

  return v22;
}

  uint64_t v86 = v8;
  uint64_t v49 = v48;
  uint64_t v50 = v89;
  uint64_t v51 = UnknownStorage.init()(v49);
  uint64_t v52 = &v50[v9[5]];
  *(_DWORD *)uint64_t v52 = 0;
  uint64_t v52[4] = 1;
  uint64_t v53 = &v50[v9[6]];
  *(void *)uint64_t v53 = 0LL;
  *((_WORD *)v53 + 4) = 256;
  uint64_t v54 = &v50[v9[7]];
  *(_OWORD *)uint64_t v54 = xmmword_1000AAEA0;
  *(void *)uint64_t v53 = 3LL;
  *((_WORD *)v53 + 4) = 1;
  __chkstk_darwin(v51, v55);
  unint64_t v56 = v90;
  *(&v84 - 4) = v47;
  *(&v84 - 3) = v56;
  *(&v84 - 2) = (int *)v91;
  *(&v84 - 1) = (int *)a3;
  uint64_t v57 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest,  type metadata accessor for NearbyProtoConnectionRequest,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionRequest);
  uint64_t v84 = v9;
  uint64_t v58 = v47;
  uint64_t v59 = v57;
  uint64_t v60 = (uint64_t)v86;
  uint64_t v61 = v88;
  static Message.with(_:)( partial apply for closure #1 in NearbyIDSServiceController.sendRequestConnectionWithNearbyHost(fromHandle:nearbyAdvertisement:),  &v84 - 6,  v5,  v57);
  uint64_t v62 = Message.serializedData(partial:)(0LL, v5, v59);
  if (!v61)
  {
    uint64_t v69 = v62;
    uint64_t v70 = v63;
    NSString v88 = v58;
    outlined consume of Data?(*(void *)v54, *((void *)v54 + 1));
    *(void *)uint64_t v54 = v69;
    *((void *)v54 + 1) = v70;
    uint64_t v71 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage,  type metadata accessor for NearbyProtoSessionMessage,  (uint64_t)&protocol conformance descriptor for NearbyProtoSessionMessage);
    uint64_t v9 = (int *)Message.serializedData(partial:)(0LL, v84, v71);
    a3 = v72;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject(v73, v94);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AAE80;
    *(void *)(inited + 32) = v85;
    *(void *)(inited + 40) = v87;
    objc_super v75 = specialized Set.init<A>(_:)(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    uint64_t v16 = (void *)(*(uint64_t (**)(int *, unint64_t, uint64_t, int *, uint8_t *, uint64_t))((swift_isaMask & *(void *)v92) + 0x100LL))( v9,  a3,  v75,  v90,  v91,  1LL);
    uint64_t v8 = v76;
    swift_bridgeObjectRelease(v75);
    if (one-time initialization token for host == -1)
    {
LABEL_23:
      unint64_t v77 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v77, (uint64_t)static Log.host);
      swift_bridgeObjectRetain(v8);
      NSString v79 = (os_log_s *)Logger.logObject.getter(v78);
      uint64_t v80 = static os_log_type_t.info.getter();
      uint64_t v92 = v79;
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        int v82 = swift_slowAlloc(32LL, -1LL);
        uint64_t v95 = (void *)v82;
        *(_DWORD *)uint64_t v81 = 136315138;
        uint64_t v91 = v81 + 4;
        swift_bridgeObjectRetain(v8);
        uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( (uint64_t)v16,  (unint64_t)v8,  (uint64_t *)&v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v91, v81 + 12);
        swift_bridgeObjectRelease_n(v8, 3LL);
        uint64_t v83 = v92;
        _os_log_impl((void *)&_mh_execute_header, v92, v80, "Sent IDS message with identifier: %s", v81, 0xCu);
        swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        swift_slowDealloc(v81, -1LL, -1LL);
        outlined consume of Data._Representation((uint64_t)v9, a3);
      }

      else
      {
        outlined consume of Data._Representation((uint64_t)v9, a3);

        swift_bridgeObjectRelease_n(v8, 2LL);
      }

      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v86,  type metadata accessor for NearbyProtoConnectionRequest);
      uint64_t v64 = (uint64_t)v89;
      return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v64,  type metadata accessor for NearbyProtoSessionMessage);
    }

uint64_t type metadata accessor for NearbyInvitationServiceHost()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost);
}

uint64_t NearbyGroupHostConnection.__allocating_init(connection:queue:)(uint64_t a1, uint64_t a2)
{
  id v5 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit(&v5[direct field offset for NearbyGroupHostConnection.delegate], 0LL);
  return XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t NearbyGroupHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for NearbyGroupHostConnection.delegate;
  swift_beginAccess(v0 + direct field offset for NearbyGroupHostConnection.delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void NearbyGroupHostConnection.delegate.setter(void *a1)
{
  uint64_t v3 = v1 + direct field offset for NearbyGroupHostConnection.delegate;
  swift_beginAccess(v3, v4, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
}

void (*NearbyGroupHostConnection.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for NearbyGroupHostConnection.delegate;
  v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return NearbyGroupHostConnection.delegate.modify;
}

void NearbyGroupHostConnection.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[5] + (void)(*a1)[4], v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
  }

  free(v3);
}

Swift::Void __swiftcall NearbyGroupHostConnection.handleHostConnectionInvalidated()()
{
  if (one-time initialization token for group != -1) {
    swift_once(&one-time initialization token for group, one-time initialization function for group);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  id v8 = v0;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v4 = 138412290;
    id v9 = v8;
    id v6 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v4 + 4, v4 + 12);
    *uint64_t v5 = v8;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "NearbyGroupHostConnectionInvalidated: %@", v4, 0xCu);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v5, 1LL, v7);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
  }

uint64_t NearbyGroupHostConnection.init(connection:queue:)(uint64_t a1, uint64_t a2)
{
  return XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t NearbyGroupHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy(v0 + direct field offset for NearbyGroupHostConnection.delegate);
}

uint64_t @objc NearbyGroupHostConnection.__ivar_destroyer(uint64_t a1)
{
  return swift_unknownObjectWeakDestroy(a1 + direct field offset for NearbyGroupHostConnection.delegate);
}

void NearbyGroupHostConnection.join(withNearbyGroupMembers:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v10 = XPCHostConnection.queue.getter(v8);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v5);
  char v11 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = v2 + direct field offset for NearbyGroupHostConnection.delegate;
    swift_beginAccess(v12, v16, 0LL, 0LL);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
    if (Strong)
    {
      uint64_t v14 = Strong;
      (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x198LL))(a1, a2);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)(void *a1, int a2, void *a3)
{
  return @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)( a1,  a2,  a3,  (uint64_t)&unk_1000CC2F0,  (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> (),  NearbyGroupHostConnection.join(withNearbyGroupMembers:));
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  Class isa = a3;
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v8 = 0LL;
  if (a3)
  {
LABEL_3:
    type metadata accessor for NearbyGroupMember(0LL);
    lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
  }

void NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v12 = XPCHostConnection.queue.getter(v10);
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7);
  char v13 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = v3 + direct field offset for NearbyGroupHostConnection.delegate;
    swift_beginAccess(v14, v18, 0LL, 0LL);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v16 = Strong;
      (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1A0LL))(a1, a2, a3);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)( void *a1, int a2, void *a3, void *a4)
{
  return @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)( a1,  a2,  a3,  a4,  (uint64_t)&unk_1000CC2C8,  (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply,  (void (*)(id, uint64_t, uint64_t))NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:));
}

void NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v12 = XPCHostConnection.queue.getter(v10);
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7);
  char v13 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = v3 + direct field offset for NearbyGroupHostConnection.delegate;
    swift_beginAccess(v14, v18, 0LL, 0LL);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v16 = Strong;
      (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1A8LL))(a1, a2, a3);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t @objc NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:)( void *a1, int a2, void *a3, void *a4)
{
  return @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)( a1,  a2,  a3,  a4,  (uint64_t)&unk_1000CC2A0,  (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply,  (void (*)(id, uint64_t, uint64_t))NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:));
}

uint64_t @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)( void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
  id v14 = a3;
  id v15 = a1;
  a7(v14, a6, v13);

  return swift_release(v13);
}

void NearbyGroupHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v10 = XPCHostConnection.queue.getter(v8);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v5);
  char v11 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = v2 + direct field offset for NearbyGroupHostConnection.delegate;
    swift_beginAccess(v12, v16, 0LL, 0LL);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
    if (Strong)
    {
      id v14 = Strong;
      (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1B0LL))(a1, a2);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t @objc NearbyGroupHostConnection.leave(completion:)(void *a1, int a2, void *a3)
{
  return @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)( a1,  a2,  a3,  (uint64_t)&unk_1000CC278,  (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> (),  NearbyGroupHostConnection.leave(completion:));
}

uint64_t @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  id v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

uint64_t sub_100067280@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for NearbyGroupHostConnection.delegate;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000672D4(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2 + direct field offset for NearbyGroupHostConnection.delegate;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t type metadata accessor for NearbyGroupHostConnection(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHostConnection;
  if (!type metadata singleton initialization cache for NearbyGroupHostConnection) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyGroupHostConnection);
  }
  return result;
}

uint64_t type metadata completion function for NearbyGroupHostConnection(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + class metadata base offset for NearbyGroupHostConnection);
}

uint64_t ObjC metadata update function for NearbyGroupHostConnection()
{
  return type metadata accessor for NearbyGroupHostConnection(0LL);
}

uint64_t sub_1000673B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()( uint64_t a1)
{
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4)
{
}

unint64_t lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for NearbyGroupMember(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject);
  }

  return result;
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      id v15 = 0LL;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9) {
      goto LABEL_6;
    }
  }

  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  uint64_t v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12)) {
    goto LABEL_6;
  }
  v18[0] = 0LL;
  v18[1] = 0LL;
  id v15 = v18;
  uint64_t v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

void *specialized Sequence.compactMap<A>(_:)( void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  unint64_t result = &_swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = (uint64_t *)(a3 + 48);
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      v17[0] = *(v8 - 2);
      v17[1] = v10;
      v17[2] = v11;
      swift_bridgeObjectRetain(v10);
      swift_retain(v11);
      a1(&v16, v17);
      if (v3)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v11);
        swift_bridgeObjectRelease(v10);
        return (void *)swift_bridgeObjectRelease(v18);
      }

      swift_release(v11);
      uint64_t v12 = swift_bridgeObjectRelease(v10);
      uint64_t v13 = v16;
      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        unint64_t v15 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v14 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v15 >= v14 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1LL);
        }
        uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v9);
      }

      v8 += 3;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(a3);
    return (void *)v18;
  }

  return result;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5( uint64_t a1, uint64_t a2)
{
  void v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator);
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator and conformance AsyncPublisher<A>.Iterator,  &demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  void v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TQ0_;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 40);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 32));
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
      uint64_t v9 = v8;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v9 = 0LL;
    }

    uint64_t v13 = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY2_;
  }

  else
  {
    if (v4)
    {
      uint64_t v10 = *(void *)(v2 + 40);
      uint64_t v11 = swift_getObjectType(*(void *)(v2 + 32));
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v11, v10);
      uint64_t v9 = v12;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v9 = 0LL;
    }

    uint64_t v13 = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY1_;
  }

  return swift_task_switch(v13, v7, v9);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY1_()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY2_()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 56);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 24, v1, &type metadata for Never, 7LL);
  swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  NearbyInvitationsProviderDataSource.init()();
  return v1;
}

uint64_t NearbyInvitationsProviderDataSource.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t NearbyInvitationsProviderDataSource.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  return swift_unknownObjectRelease(a1);
}

void (*NearbyInvitationsProviderDataSource.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[5] = v1;
  swift_beginAccess(v1 + 16, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return NearbyInvitationsProviderDataSource.delegate.modify;
}

void NearbyInvitationsProviderDataSource.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 24) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t NearbyInvitationsProviderDataSource.abcReporter.getter()
{
  return swift_retain(*(void *)(v0 + 96));
}

uint64_t NearbyInvitationsProviderDataSource.waitingJoinRequests.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t NearbyInvitationsProviderDataSource.waitingJoinRequests.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*NearbyInvitationsProviderDataSource.waitingJoinRequests.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.waitingConnectionRequests.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t NearbyInvitationsProviderDataSource.waitingConnectionRequests.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*NearbyInvitationsProviderDataSource.waitingConnectionRequests.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.connectionRequest.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 120));
}

uint64_t NearbyInvitationsProviderDataSource.connectionRequest.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*NearbyInvitationsProviderDataSource.connectionRequest.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.filteredDeviceScanners.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 128));
}

uint64_t NearbyInvitationsProviderDataSource.filteredDeviceScanners.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*NearbyInvitationsProviderDataSource.filteredDeviceScanners.modify(uint64_t a1))()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t key path getter for NearbyInvitationsProviderDataSource.dataReceived : NearbyInvitationsProviderDataSource@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for NearbyInvitationsProviderDataSource.dataReceived : NearbyInvitationsProviderDataSource( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 408LL);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t NearbyInvitationsProviderDataSource.dataReceived.getter()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ADC40);
  uint64_t v2 = swift_getKeyPath(&unk_1000ADC68);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t NearbyInvitationsProviderDataSource.dataReceived.setter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ADC40);
  uint64_t v6 = swift_getKeyPath(&unk_1000ADC68);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

void (*NearbyInvitationsProviderDataSource.dataReceived.modify(void *a1))(void *a1)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1000ADC40);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1000ADC68);
  void v3[5] = v5;
  void v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyInvitationsProviderDataSource.$dataReceived : NearbyInvitationsProviderDataSource( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 432LL))(v7);
}

uint64_t NearbyInvitationsProviderDataSource.$dataReceived.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t NearbyInvitationsProviderDataSource.$dataReceived.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  swift_beginAccess( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived,  v11,  33LL,  0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.setter(v7, v8);
  swift_endAccess(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*NearbyInvitationsProviderDataSource.$dataReceived.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t NearbyInvitationsProviderDataSource.cancellables.getter()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t NearbyInvitationsProviderDataSource.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*NearbyInvitationsProviderDataSource.cancellables.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

void NearbyInvitationsProviderDataSource.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2, v3);
  uint64_t v53 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  __chkstk_darwin(v5, v6);
  id v55 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v9);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12, v13);
  unint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[3] = 0LL;
  swift_unknownObjectWeakInit(v1 + 2, 0LL);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  *(void *)&__int128 v59 = &_swiftEmptyArrayStorage;
  uint64_t v21 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v23 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v22, v23, v12, v21);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v54);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002DLL,  0x80000001000AF3D0LL,  v19,  v15,  v11,  0LL);
  uint64_t v24 = type metadata accessor for ABCReporter(0LL);
  v1[10] = 0LL;
  v1[11] = 0LL;
  void v1[9] = 0LL;
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v1[12] = ABCReporter.init(domain:type:)( 0xD000000000000017LL,  0x80000001000AF390LL,  0xD000000000000016LL,  0x80000001000AF3B0LL);
  v1[13] = &_swiftEmptyDictionarySingleton;
  v1[14] = &_swiftEmptyDictionarySingleton;
  v1[15] = &_swiftEmptyDictionarySingleton;
  v1[16] = &_swiftEmptyDictionarySingleton;
  os_log_type_t v25 = (char *)v1
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  __int128 v59 = xmmword_1000AAEA0;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  objc_super v27 = v55;
  Published.init(initialValue:)(&v59, v26);
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v25, v27, v57);
  *(void *)((char *)v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables) = &_swiftEmptySetSingleton;
  v1[5] = [objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceBluetoothController(0)) init];
  id v28 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestController();
  uint64_t v29 = (char *)objc_allocWithZone(v28);
  *(void *)&v29[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v29[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v29[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_sessionProvider] = 1LL;
  id v30 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  uint64_t v31 = v29;
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v30 initWithService:v32];

  if (v33)
  {
    *(void *)&v31[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service] = v33;

    v58.receiver = v31;
    v58.super_class = v28;
    id v34 = objc_msgSendSuper2(&v58, "init");
    v1[6] = v34;
    uint64_t v35 = (void *)v1[4];
    id v36 = objc_allocWithZone(&OBJC_CLASS___IDSService);
    id v37 = v35;
    id v38 = v34;
    NSString v39 = String._bridgeToObjectiveC()();
    id v40 = [v36 initWithService:v39];

    if (v40)
    {
      int v41 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbyIDSServiceController());
      uint64_t v42 = specialized NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)( v37,  (uint64_t)v40,  0LL,  0LL,  v38,  v41);
      v1[7] = v42;
      uint64_t v43 = type metadata accessor for NearbyGroupHostManager(0LL);
      swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
      NearbyGroupHostManager.init(serviceName:)(0xD000000000000030LL, 0x80000001000AF400LL);
      v1[8] = v44;
      uint64_t v45 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v42) + 0x88LL);
      uint64_t v46 = v42;
      uint64_t v47 = swift_retain(v1);
      v45(v47, &protocol witness table for NearbyInvitationsProviderDataSource);

      uint64_t v48 = type metadata accessor for TaskPriority(0LL);
      uint64_t v49 = (uint64_t)v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v53, 1LL, 1LL, v48);
      uint64_t v50 = (void *)swift_allocObject(&unk_1000CC330, 40LL, 7LL);
      v50[2] = 0LL;
      v50[3] = 0LL;
      v50[4] = v1;
      swift_retain(v1);
      uint64_t v51 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v49,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.init(),  (uint64_t)v50);
      swift_release(v51);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000689B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000689E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 408LL);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.init()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[9] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  v4[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.init()()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 64LL);
  *(void *)(v0 + 104) = v1;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), v1, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  swift_beginAccess( *(void *)(v0 + 104)
  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups,
    v0 + 48,
    33LL,
    0LL);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.getter(v1);
  swift_endAccess(v0 + 48);
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void);
  uint64_t v9;
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  unint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = swift_allocObject(&unk_1000CCB98, 24LL, 7LL);
  swift_weakInit(v5 + 16);
  uint64_t v6 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Published<[UUID : NearbyGroupHost]>.Publisher and conformance Published<A>.Publisher,  &demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v7 = Publisher<>.sink(receiveValue:)( partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init(),  v5,  v3,  v6);
  swift_release(v5);
  uint64_t v8 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v4 + 464LL))(v0 + 16);
  AnyCancellable.store(in:)(v9);
  swift_release(v7);
  v8(v0 + 16, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    swift_bridgeObjectRetain(v2);
    uint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6);
    swift_bridgeObjectRelease(v2);
    (*(void (**)(void *))(*(void *)v5 + 640LL))(v7);
    swift_release(v5);
    return swift_bridgeObjectRelease(v7);
  }

  return result;
}

uint64_t NearbyInvitationsProviderDataSource.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    id v36 = v12;
    uint64_t v18 = v17;
    uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v41[0] = v35;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v38 = a2;
    uint64_t v20 = _typeName(_:qualified:)(v8, 0LL);
    NSString v39 = v4;
    uint64_t v37 = a3;
    unint64_t v22 = v21;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2112;
    uint64_t v40 = (uint64_t)v14;
    id v23 = v14;
    uint64_t v4 = v39;
    a3 = v37;
    a2 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v18 + 14, v18 + 22);
    *uint64_t v19 = v14;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s received request to create group %@", (uint8_t *)v18, 0x16u);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v19, 1LL, v24);
    swift_slowDealloc(v19, -1LL, -1LL);
    uint64_t v25 = v35;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v18;
    uint64_t v12 = v36;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v27 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v12, 1LL, 1LL, v27);
  id v28 = (void *)swift_allocObject(&unk_1000CC358, 72LL, 7LL);
  v28[2] = 0LL;
  void v28[3] = 0LL;
  v28[4] = v4;
  v28[5] = v14;
  v28[6] = a2;
  v28[7] = a3;
  v28[8] = v8;
  id v29 = v14;
  swift_retain();
  swift_retain();
  uint64_t v30 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v12,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:),  (uint64_t)v28);
  uint64_t v31 = v4[12];
  v41[3] = type metadata accessor for ABCReporter(0LL);
  v41[4] = (uint64_t)&protocol witness table for ABCReporter;
  v41[0] = v31;
  swift_retain();
  uint64_t v32 = Task<>.reportFailure(on:function:process:)( v41,  0xD00000000000001BLL,  0x80000001000B0CA0LL,  0LL,  0LL,  v30,  (char *)&type metadata for () + 8);
  swift_release(v30);
  swift_release(v32);
  return __swift_destroy_boxed_opaque_existential_0Tm(v41);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  void v8[10] = a8;
  v8[7] = a5;
  _WORD v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  void v8[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v8[12] = v10;
  v8[13] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 64LL);
  *(void *)(v0 + 112) = v1;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), v1, 0LL);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1 = (void *)v0[7];
  NearbyGroupCreationRequest.id.getter();
  uint64_t v2 = unk_1000D5FD4;
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v2);
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  return v6(v0[13], v0[14], v0[7], v0[14]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 136);
  *(void *)(v0 + 144) = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1C8LL))();

  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, void);
  id v3;
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void (**)(void *, void))(v0 + 64);
  uint64_t v3 = v1;
  v2(v1, 0LL);

  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24[2];
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 64);
  swift_errorRetain(v1);
  v2(0LL, v1);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_dynamicCast(v0 + 152, v0 + 16, v3, &type metadata for NearbyGroupHostManager.Errors, 6LL);
  if ((v4 & 1) != 0 && *(_BYTE *)(v0 + 152) == 1)
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v6, (uint64_t)static Log.host);
    swift_errorRetain(v5);
    uint64_t v7 = swift_errorRetain(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    uint64_t v9 = static os_log_type_t.default.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 128);
    if (v10)
    {
      uint64_t v12 = *(void *)(v0 + 80);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      id v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      unint64_t v15 = swift_slowAlloc(64LL, -1LL);
      v24[0] = v15;
      *(_DWORD *)uint64_t v13 = 136315650;
      os_log_type_t v16 = _typeName(_:qualified:)(v12, 0LL);
      uint64_t v18 = v17;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000001BLL,  0x80000001000B0CA0LL,  v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2112;
      swift_errorRetain(v11);
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(void *)(v0 + 40) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 24, v13 + 32);
      *id v14 = v19;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%s %s - Suppressing report of error: %@",  (uint8_t *)v13,  0x20u);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v14, 1LL, v20);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      swift_errorRelease(v11);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 128));
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    swift_task_dealloc(*(void *)(v0 + 104));
    unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    unint64_t v21 = *(void *)(v0 + 104);
    swift_willThrow(v4);
    swift_task_dealloc(v21);
    unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v22();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 120LL);
  uint64_t v6 = *(void *)(*(void *)v2 + 96LL);
  *(void *)(*(void *)v2 + 128LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v7 = v4[13];
  uint64_t v8 = v4[14];
  uint64_t v9 = v4[11];
  swift_release(v8);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
    uint64_t v10 = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  }

  else
  {
    v4[17] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
    uint64_t v10 = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  }

  return swift_task_switch(v10, v8, 0LL);
}

uint64_t NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    uint64_t v34 = a2;
    uint64_t v19 = v18;
    uint64_t v37 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v35 = a3;
    uint64_t v20 = _typeName(_:qualified:)(v8, 0LL);
    unint64_t v22 = v21;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v36 = (uint64_t)v14;
    uint64_t v23 = type metadata accessor for InvitationApprovalRequest(0LL);
    id v24 = v14;
    uint64_t v25 = String.init<A>(reflecting:)(&v36, v23);
    unint64_t v27 = v26;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    a3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v27);

    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "%s received request to attempt requesting approval with %s",  (uint8_t *)v17,  0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v19;
    a2 = v34;
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v12, 1LL, 1LL, v29);
  uint64_t v30 = (void *)swift_allocObject(&unk_1000CC380, 64LL, 7LL);
  v30[2] = 0LL;
  v30[3] = 0LL;
  v30[4] = v4;
  v30[5] = v14;
  v30[6] = a2;
  v30[7] = a3;
  id v31 = v14;
  swift_retain();
  swift_retain();
  uint64_t v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v12,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:),  (uint64_t)v30);
  return swift_release(v32);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[38] = a6;
  v7[39] = a7;
  v7[36] = a4;
  v7[37] = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v7[40] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[41] = v9;
  v7[42] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  v7[43] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[44] = v11;
  v7[45] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)()
{
  uint64_t v1 = *(void *)(v0[36] + 56LL);
  uint64_t v2 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_service;
  v0[46] = v1;
  v0[47] = v2;
  uint64_t v3 = *(void *)(v1 + v2 + 24);
  uint64_t v4 = *(void *)(v1 + v2 + 32);
  uint64_t v5 = __swift_project_boxed_opaque_existential_1((void *)(v1 + v2), v3);
  v0[23] = v3;
  v0[24] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 20);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))(boxed_opaque_existential_1, v5, v3);
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v0 + 20, 1, (uint64_t)(v0 + 14));
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];
  v0[48] = v8;
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[17];
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( (uint64_t)(v0 + 18),  (uint64_t)(v0 + 33),  &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)(v0 + 33));
  v0[2] = v7;
  v0[3] = v8;
  v0[4] = v9;
  v0[5] = v10;
  v0[6] = 0xD000000000000016LL;
  v0[7] = 0x80000001000B0540LL;
  uint64_t v11 = (void *)swift_task_alloc(unk_1000D5504);
  v0[49] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  return v13((uint64_t)(v0 + 20), (uint64_t)(v0 + 2));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *boxed_opaque_existential_1;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v1 = v0[51];
  unint64_t v22 = v0[52];
  unint64_t v26 = v0[45];
  uint64_t v30 = v0[44];
  id v31 = v0[43];
  unint64_t v27 = v0[42];
  uint64_t v29 = v0[41];
  uint64_t v28 = v0[40];
  id v24 = v0[38];
  uint64_t v25 = v0[39];
  uint64_t v2 = (void *)(v0[46] + v0[47]);
  uint64_t v3 = v0[36];
  uint64_t v23 = (void *)v0[37];
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 20);
  swift_beginAccess(v1 + 16, v0 + 30, 0LL, 0LL);
  uint64_t v4 = [*(id *)(v1 + 16) URI];
  uint64_t v5 = [v4 prefixedURI];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  uint64_t v10 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v2, v10);
  v0[28] = v10;
  uint64_t v12 = *(void *)(v9 + 8);
  v0[29] = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 25);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v11,  v10);
  specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)( v6,  v8,  (uint64_t)boxed_opaque_existential_1,  0xD000000000000016LL,  0x80000001000B0540LL,  v22,  v10,  v12);
  swift_bridgeObjectRelease(v8);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 25);
  id v14 = (void *)swift_allocObject(&unk_1000CCB20, 56LL, 7LL);
  v14[2] = v3;
  v14[3] = v23;
  v14[4] = v1;
  v14[5] = v24;
  v14[6] = v25;
  v0[12] = partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  v0[13] = v14;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256LL;
  v0[10] = thunk for @escaping @callee_guaranteed () -> ();
  v0[11] = &block_descriptor_182;
  unint64_t v15 = _Block_copy(v0 + 8);
  swift_retain();
  os_log_type_t v16 = v23;
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v0[35] = _swiftEmptyArrayStorage;
  uint64_t v18 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v20 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 35, v19, v20, v28, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v26, v27, v15);
  _Block_release(v15);
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v31);
  swift_release(v0[13]);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return ((uint64_t (*)(void))v0[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  swift_bridgeObjectRelease(*(void *)(v0 + 384));
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 392LL);
  *(void *)(*(void *)v2 + 40swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived,  v3,  33LL, 0LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  }

  else
  {
    swift_bridgeObjectRelease(v4[48]);
    v4[51] = a1;
    v4[52] = type metadata accessor for Pseudonym();
    uint64_t v6 = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v59 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v59 - 8);
  uint64_t v10 = __chkstk_darwin(v59, v9);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  os_log_type_t v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v60 = a1;
  uint64_t v20 = *(void **)(a1 + 56);
  swift_beginAccess(a3 + 16, v66, 0LL, 0LL);
  id v21 = [*(id *)(a3 + 16) URI];
  id v22 = [v21 prefixedURI];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v20) + 0xF8LL))(a2, v23, v25);
  uint64_t v26 = v59;
  objc_super v58 = v12;
  swift_bridgeObjectRelease(v25);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v27, (uint64_t)static Log.host);
  uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v29 = v16;
  uint64_t v30 = v16;
  id v31 = v19;
  uint64_t v32 = v26;
  uint64_t v33 = v28(v30, v19, v26);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = v8;
    uint64_t v57 = v28;
    uint64_t v38 = (uint8_t *)v36;
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    v63[0] = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v56 = v38 + 4;
    uint64_t v40 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v32, v40);
    unint64_t v43 = v42;
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v63);
    id v31 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v56, v38 + 12);
    swift_bridgeObjectRelease(v43);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v37 + 8);
    v44(v29, v32);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Sent joinRequest with ID: %s, staging for completion",  v38,  0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    uint64_t v45 = v38;
    uint64_t v28 = v57;
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
    uint64_t v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v29, v32);
  }

  uint64_t v46 = v60;
  uint64_t v47 = (uint64_t)v58;
  v28(v58, v31, v32);
  uint64_t v48 = swift_allocObject(&unk_1000CCB70, 32LL, 7LL);
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = v61;
  *(void *)(v48 + 24) = v62;
  uint64_t v49 = *(uint64_t (**)(uint64_t *))(*(void *)v46 + 320LL);
  swift_retain();
  uint64_t v50 = (void (*)(uint64_t *, void))v49(v63);
  uint64_t v52 = v51;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v51);
  uint64_t v64 = *v52;
  *uint64_t v52 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:),  v48,  v47,  isUniquelyReferenced_nonNull_native);
  uint64_t v54 = *v52;
  *uint64_t v52 = v64;
  swift_bridgeObjectRelease(v54);
  v44((char *)v47, v32);
  v50(v63, 0LL);
  return ((uint64_t (*)(char *, uint64_t))v44)(v31, v32);
}

uint64_t closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( void **a1, uint64_t *a2, void (*a3)(void, void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  id v7 = v4;
  swift_errorRetain(v5);
  id v8 = v7;
  uint64_t v9 = swift_errorRetain(v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = 7104878LL;
    uint64_t v13 = v4;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v30 = v13;
    id v31 = a3;
    if (v13)
    {
      uint64_t v32 = (uint64_t)v8;
      uint64_t v16 = type metadata accessor for InvitationJoinResponse(0LL);
      id v17 = v8;
      uint64_t v18 = String.init<A>(reflecting:)(&v32, v16);
      unint64_t v20 = v19;
    }

    else
    {
      unint64_t v20 = 0xE300000000000000LL;
      uint64_t v18 = 7104878LL;
    }

    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v20);

    *(_WORD *)(v14 + 12) = 2080;
    if (v5)
    {
      uint64_t v32 = v5;
      swift_errorRetain(v5);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v12 = String.init<A>(reflecting:)(&v32, v22);
      unint64_t v24 = v23;
    }

    else
    {
      unint64_t v24 = 0xE300000000000000LL;
    }

    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received joinResponse: %s, error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    a3 = v31;
    uint64_t v4 = v30;
    if (!v5) {
      goto LABEL_13;
    }
LABEL_7:
    swift_errorRetain(v5);
    a3(0LL, v5);
    uint64_t v21 = v5;
    return swift_errorRelease(v21);
  }

  swift_errorRelease(v5);
  swift_errorRelease(v5);

  if (v5) {
    goto LABEL_7;
  }
LABEL_13:
  if (v4)
  {
    InvitationJoinResponse.sessionIdentifier.getter();
    if (v25)
    {
      swift_bridgeObjectRelease(v25);
      return ((uint64_t (*)(void *, void))a3)(v4, 0LL);
    }
  }

  unint64_t v27 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  uint64_t v28 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v27, 0LL, 0LL);
  _BYTE *v29 = 1;
  a3(0LL, v28);
  uint64_t v21 = v28;
  return swift_errorRelease(v21);
}

uint64_t NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v55 = *v5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v60 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v59 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v56 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  id v17 = a1;
  id v18 = a2;
  unint64_t v19 = v17;
  unint64_t v20 = v18;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v54 = v10;
    uint64_t v24 = v23;
    uint64_t v51 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v52;
    *(_DWORD *)uint64_t v24 = 136315650;
    uint64_t v25 = _typeName(_:qualified:)(v55, 0LL);
    uint64_t v55 = a4;
    unint64_t v27 = v26;
    uint64_t v61 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v61 = v19;
    uint64_t v28 = type metadata accessor for IncomingInvitationJoinRequest(0LL);
    uint64_t v29 = v19;
    uint64_t v53 = a3;
    id v30 = v29;
    uint64_t v31 = String.init<A>(reflecting:)(&v61, v28);
    unint64_t v33 = v32;
    uint64_t v61 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease(v33);

    *(_WORD *)(v24 + 22) = 2112;
    uint64_t v61 = v20;
    uint64_t v34 = v20;
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v24 + 24, v24 + 32);
    os_log_type_t v35 = v51;
    void *v51 = v20;

    a3 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "%s approve pendingMember %s with response: %@",  (uint8_t *)v24,  0x20u);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v35, 1LL, v36);
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v37 = v52;
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    uint64_t v38 = v24;
    uint64_t v10 = v54;
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v39 = (void *)swift_allocObject(&unk_1000CC3A8, 56LL, 7LL);
  unint64_t v39[2] = v5;
  v39[3] = v19;
  uint64_t v39[4] = v20;
  v39[5] = a3;
  v39[6] = a4;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:);
  uint64_t v63 = v39;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_3;
  uint64_t v40 = _Block_copy(aBlock);
  uint64_t v41 = v19;
  unint64_t v42 = v20;
  swift_retain();
  uint64_t v43 = swift_retain();
  uint64_t v44 = v56;
  static DispatchQoS.unspecified.getter(v43);
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v45 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v47 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v48 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v46, v47, v10, v45);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v44, v48, v40);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v10);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v44, v58);
  return swift_release(v63);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(0LL);
}

uint64_t NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v51 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  id v18 = a1;
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v48 = v9;
    uint64_t v22 = v21;
    uint64_t v45 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v45;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v47 = v10;
    uint64_t v23 = _typeName(_:qualified:)(v8, 0LL);
    uint64_t v46 = a3;
    unint64_t v25 = v24;
    uint64_t v52 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v52 = v18;
    uint64_t v26 = type metadata accessor for IncomingInvitationJoinRequest(0LL);
    unint64_t v27 = v16;
    uint64_t v28 = a2;
    uint64_t v29 = v18;
    uint64_t v30 = String.init<A>(reflecting:)(&v52, v26);
    unint64_t v32 = v31;
    uint64_t v52 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
    a3 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v22 + 14, v22 + 22);
    unint64_t v33 = v32;
    uint64_t v10 = v47;
    swift_bridgeObjectRelease(v33);

    a2 = v28;
    uint64_t v16 = v27;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s reject pendingMember %s", (uint8_t *)v22, 0x16u);
    uint64_t v34 = v45;
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v22;
    uint64_t v9 = v48;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v36 = (void *)swift_allocObject(&unk_1000CC3F8, 48LL, 7LL);
  v36[2] = v4;
  v36[3] = v18;
  v36[4] = a2;
  v36[5] = a3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:);
  uint64_t v54 = v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_20;
  uint64_t v37 = _Block_copy(aBlock);
  uint64_t v38 = v18;
  swift_retain();
  uint64_t v39 = swift_retain();
  static DispatchQoS.unspecified.getter(v39);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v40 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v42 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v43 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v41, v42, v9, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v43, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v43, v9);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
  return swift_release(v54);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_1000CC448, 56LL, 7LL);
  void v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = v3;
  void v11[5] = a2;
  v11[6] = a3;
  swift_retain();
  swift_retain();
  uint64_t v12 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v9,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:),  (uint64_t)v11);
  return swift_release(v12);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)()
{
  uint64_t v1 = *(int **)((swift_isaMask & **(void **)(*(void *)(v0 + 128) + 48LL)) + 0xA8LL);
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 152) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  return v4(v0 + 56);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(void *, void);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v19;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = outlined init with take of PseudonymProtocol((__int128 *)(v0 + 56), v0 + 16);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96LL))(v2);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void (**)(void *, void))(v0 + 136);
  if (v4 >> 60 == 15)
  {
    v6(0LL, 0LL);
    swift_release(v5);
  }

  else
  {
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v9);
    unint64_t v19 = v5;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
    outlined copy of Data._Representation(v7, v8);
    uint64_t v12 = v11(v9, v10);
    uint64_t v14 = v13;
    uint64_t v15 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationJoinRequestMetadata(0LL));
    uint64_t v16 = (void *)NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)(v7, v8, v12, v14);
    uint64_t v17 = v16;
    v6(v16, 0LL);
    swift_release(v19);

    outlined consume of Data?(v7, v8);
  }

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(void, uint64_t);
  os_log_s *log;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  swift_retain();
  swift_errorRetain(v1);
  swift_retain();
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v7 = static os_log_type_t.error.getter(v4, v5, v6);
  uint64_t v8 = os_log_type_enabled(v4, v7);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 128);
  if (v8)
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    unint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v11 = 136315394;
    os_log_type_t type = v7;
    *(void *)(v0 + 96) = v10;
    os_log_t log = v4;
    uint64_t v12 = type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
    swift_retain();
    uint64_t v13 = String.init<A>(reflecting:)(v0 + 96, v12);
    uint64_t v15 = v14;
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v11 + 4, v11 + 12);
    swift_release_n(v10);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 112) = v9;
    swift_errorRetain(v9);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)(v0 + 112, v16);
    unint64_t v19 = v18;
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    uint64_t v4 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "%s failed to provision pseudonym, error: %s",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 128));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  os_log_type_t v20 = *(void *)(v0 + 168);
  uint64_t v21 = *(void (**)(void, uint64_t))(v0 + 136);
  swift_errorRetain(v20);
  v21(0LL, v20);
  swift_errorRelease(v20);
  swift_errorRelease(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 152);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  }
  else {
    uint64_t v5 = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "NearbyInvitationsProviderDataSource advertiseNearbyInvitation",  v17,  2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  id v18 = a1;
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = (uint64_t)v18;
    uint64_t v39 = v22;
    uint64_t v35 = v12;
    uint64_t v36 = a3;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v23 = type metadata accessor for NearbyAdvertisementRequest(0LL);
    id v24 = v18;
    uint64_t v37 = a4;
    id v25 = v24;
    uint64_t v26 = String.init<A>(reflecting:)(&v38, v23);
    unint64_t v28 = v27;
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v39);
    uint64_t v12 = v35;
    a3 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v28);

    a4 = v37;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Got pseud %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v12, 1LL, 1LL, v29);
  uint64_t v30 = (void *)swift_allocObject(&unk_1000CC470, 64LL, 7LL);
  v30[2] = 0LL;
  v30[3] = 0LL;
  v30[4] = v5;
  v30[5] = v18;
  v30[6] = a3;
  v30[7] = a4;
  id v31 = v18;
  swift_retain();
  swift_retain();
  uint64_t v32 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v12,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:),  (uint64_t)v30);
  return swift_release(v32);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  uint64_t v7[2] = a4;
  void v7[3] = a5;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000D4A24);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  return NearbyInvitationServiceBluetoothController.broadcast(invitation:)(*(void *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  }
  else {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)( void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "NearbyInvitationsProviderDataSource advertiseNearbySessionEndpoint",  v16,  2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = type metadata accessor for NearbyInvitationAdvertiser(0LL);
  id v18 = (void *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  id v19 = a1;
  swift_retain();
  os_log_type_t v20 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(v19, v4, v18);
  swift_release(v4);
  uint64_t v21 = *(void *)(v4 + 80);
  *(void *)(v4 + 80) = v20;
  swift_release(v21);
  uint64_t v22 = *(void *)(v4 + 80);
  if (v22)
  {
    uint64_t v23 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v11, 1LL, 1LL, v23);
    id v24 = (void *)swift_allocObject(&unk_1000CC498, 56LL, 7LL);
    __int128 v24[2] = 0LL;
    uint64_t v24[3] = 0LL;
    void v24[4] = v22;
    v24[5] = a2;
    v24[6] = a3;
    swift_retain();
    swift_retain();
    uint64_t v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v11,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:),  (uint64_t)v24);
    return swift_release(v25);
  }

  else
  {
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v27 = __swift_project_value_buffer(v12, (uint64_t)static Log.client);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v31 = static os_log_type_t.error.getter(v28, v29, v30);
    if (os_log_type_enabled(v28, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v31,  "NearbyInvitationsProviderDataSource failed to create nearbyInvitationsListener",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    unint64_t v33 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    uint64_t v34 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v33, 0LL, 0LL);
    *uint64_t v35 = 2;
    a2();
    return swift_errorRelease(v34);
  }

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  void v6[4] = a6;
  void v6[2] = a4;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  uint64_t v11 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12, v13);
  os_log_type_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  id v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v35 = v15;
    uint64_t v21 = v7;
    uint64_t v22 = v4;
    uint64_t v23 = a3;
    uint64_t v24 = a1;
    uint64_t v25 = v20;
    *(_WORD *)os_log_type_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "NearbyInvitationsProviderDataSource stopAdvertising", v20, 2u);
    uint64_t v26 = v25;
    a1 = v24;
    a3 = v23;
    uint64_t v4 = v22;
    uint64_t v7 = v21;
    uint64_t v11 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_type_t v15 = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v15, 1LL, 1LL, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v28 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = (v28 + 40) & ~v28;
  unint64_t v30 = (v9 + v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  os_log_type_t v31 = (char *)swift_allocObject(&unk_1000CC4C0, v30 + 16, v28 | 7);
  *((void *)v31 + 2) = 0LL;
  *((void *)v31 + 3) = 0LL;
  *((void *)v31 + 4) = v4;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v31[v29], v11, v7);
  uint64_t v32 = &v31[v30];
  *(void *)uint64_t v32 = v36;
  *((void *)v32 + 1) = a3;
  swift_retain();
  swift_retain();
  uint64_t v33 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v15,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:),  (uint64_t)v31);
  return swift_release(v33);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  uint64_t v7[2] = a4;
  void v7[3] = a5;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000D4A64);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  return NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(*(void *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  }
  else {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  (*(void (**)(void))(v0 + 32))(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)( void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "NearbyInvitationsProviderDataSource stopAdvertisingEndpoint",  v13,  2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v15 = *(void *)(v2 + 80);
  if (v15)
  {
    uint64_t v16 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v8, 1LL, 1LL, v16);
    uint64_t v17 = (void *)swift_allocObject(&unk_1000CC4E8, 56LL, 7LL);
    v17[2] = 0LL;
    void v17[3] = 0LL;
    v17[4] = v15;
    _OWORD v17[5] = a1;
    v17[6] = a2;
    swift_retain();
    swift_retain();
    uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:),  (uint64_t)v17);
    return swift_release(v18);
  }

  else
  {
    os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v23 = static os_log_type_t.error.getter(v20, v21, v22);
    if (os_log_type_enabled(v20, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v23,  "NearbyInvitationsProviderDataSource unable to create nearbyInvitationsBrowser",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    unint64_t v25 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    uint64_t v26 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v25, 0LL, 0LL);
    *uint64_t v27 = 2;
    a1();
    return swift_errorRelease(v26);
  }

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[2] = a5;
  void v6[3] = a6;
  uint64_t v7 = *(int **)(*(void *)a4 + 328LL);
  uint64_t v10 = (uint64_t (*)(void))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  void v6[4] = v8;
  *uint64_t v8 = v6;
  v8[1] = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:);
  return v10();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)()
{
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:),  0LL,  0LL);
}

{
  uint64_t v0;
  (*(void (**)(void))(v0 + 16))(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)( void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)( a1,  a2,  a3,  "NearbyInvitationsProviderDataSource markInvitationUsed",  (uint64_t)&unk_1000CC510,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:));
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  _OWORD v7[6] = a7;
  void v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + 48LL);
  uint64_t v2 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
  uint64_t v4 = v3;
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xD0LL))(v2);
  uint64_t v5 = *(void (**)(void))(v0 + 40);
  swift_bridgeObjectRelease(v4);
  v5(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5, v6);
  uint64_t v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v44 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v41 - v14;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v17 = v45(v15, a1, v8);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = a1;
    uint64_t v21 = v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v52 = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v42 = v21 + 4;
    uint64_t v23 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
    unint64_t v26 = v25;
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v42, v21 + 12);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    *(_WORD *)(v21 + 12) = 2048;
    uint64_t v27 = v48;
    uint64_t v51 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 14, v21 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "NearbyInvitationsProviderDataSource assertAdvertisementPublic invitation: %s for %lu rotations",  (uint8_t *)v21,  0x16u);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    uint64_t v28 = v21;
    a1 = v43;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);

    uint64_t v27 = v48;
  }

  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  uint64_t v30 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v46, 1LL, 1LL, v29);
  os_log_type_t v31 = v44;
  v45(v44, a1, v8);
  uint64_t v32 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v33 = (v32 + 40) & ~v32;
  unint64_t v34 = (v10 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v36 = (char *)swift_allocObject(&unk_1000CC538, v35 + 16, v32 | 7);
  *((void *)v36 + 2) = 0LL;
  *((void *)v36 + 3) = 0LL;
  *((void *)v36 + 4) = v47;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v36[v33], v31, v8);
  *(void *)&v36[v34] = v27;
  uint64_t v37 = &v36[v35];
  uint64_t v38 = v50;
  *(void *)uint64_t v37 = v49;
  *((void *)v37 + 1) = v38;
  swift_retain();
  swift_retain();
  uint64_t v39 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v30,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:),  (uint64_t)v36);
  return swift_release(v39);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  void v8[5] = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  void v8[10] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  void v8[11] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v8[12] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[13] = swift_task_alloc(v12);
  v8[14] = swift_task_alloc(v12);
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000D4A94);
  v0[15] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  return NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)(v0[14], v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  }
  else {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void (**)(uint64_t, void))(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0LL, 1LL, v2);
  v5(v4, 0LL);
  outlined destroy of Any?(v4, &demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v11 = static os_log_type_t.error.getter(v8, v9, v10);
  unint64_t v12 = os_log_type_enabled(v8, v11);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 88);
  if (v12)
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_type_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    uint64_t v21 = v20;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v0 + 24) = v13;
    swift_errorRetain(v13);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v23 = String.init<A>(reflecting:)(v0 + 24, v22);
    unint64_t v25 = v24;
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v11,  "Failed to assert invitation %s as public, reason: %s",  (uint8_t *)v17,  0x16u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  unint64_t v26 = *(void *)(v0 + 128);
  uint64_t v27 = *(void *)(v0 + 80);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 96) + 56LL))( v27,  1LL,  1LL,  *(void *)(v0 + 88));
  swift_errorRetain(v26);
  v28(v27, v26);
  swift_errorRelease(v26);
  swift_errorRelease(v26);
  outlined destroy of Any?(v27, &demangling cache variable for type metadata for UUID?);
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v30 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  objc_super v75 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v74 = &v65[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v73 = &v65[-v18];
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = &v65[-v21];
  __chkstk_darwin(v20, v23);
  unint64_t v25 = &v65[-v24];
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v26, (uint64_t)static Log.host);
  uint64_t v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
  v27(v25, a1, v11);
  uint64_t v72 = v27;
  uint64_t v28 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v27)(v22, a2, v11);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  int v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v32 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = v5;
    uint64_t v33 = v32;
    uint64_t v68 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v68;
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v70 = v33 + 4;
    uint64_t v34 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v67 = v29;
    uint64_t v35 = v34;
    int v66 = v31;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v11, v34);
    unint64_t v38 = v37;
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v79);
    uint64_t v69 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v70, v33 + 12);
    swift_bridgeObjectRelease(v38);
    uint64_t v70 = a2;
    uint64_t v39 = v12;
    uint64_t v40 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v40(v25, v11);
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v11, v35);
    unint64_t v43 = v42;
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v79);
    a1 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v43);
    v40(v22, v11);
    uint64_t v12 = v39;
    a2 = v70;
    os_log_t v44 = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v66,  "NearbyInvitationsProviderDataSource releaseAdvertisementPublicAssertion invitation: %s assertionIdentifier: %s",  (uint8_t *)v33,  0x16u);
    uint64_t v45 = v68;
    swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v46 = v33;
    uint64_t v5 = v71;
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
    uint64_t v47 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v47(v25, v11);
    v47(v22, v11);
  }

  uint64_t v48 = type metadata accessor for TaskPriority(0LL);
  uint64_t v49 = (uint64_t)v75;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v75, 1LL, 1LL, v48);
  uint64_t v50 = v72;
  uint64_t v51 = v73;
  v72(v73, a1, v11);
  uint64_t v52 = v74;
  v50(v74, a2, v11);
  uint64_t v53 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v54 = (v53 + 40) & ~v53;
  uint64_t v55 = v12;
  uint64_t v56 = (v13 + v53 + v54) & ~v53;
  unint64_t v57 = (v13 + v56 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v58 = (char *)swift_allocObject(&unk_1000CC560, v57 + 16, v53 | 7);
  *((void *)v58 + 2) = 0LL;
  *((void *)v58 + 3) = 0LL;
  *((void *)v58 + 4) = v5;
  uint64_t v59 = &v58[v54];
  uint64_t v60 = *(void (**)(char *, _BYTE *, uint64_t))(v55 + 32);
  v60(v59, v51, v11);
  v60(&v58[v56], v52, v11);
  uint64_t v61 = &v58[v57];
  uint64_t v62 = v77;
  *(void *)uint64_t v61 = v76;
  *((void *)v61 + 1) = v62;
  swift_retain();
  swift_retain();
  uint64_t v63 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v49,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:),  (uint64_t)v58);
  return swift_release(v63);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  void v8[10] = a8;
  v8[7] = a5;
  _WORD v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  void v8[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v8[12] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[13] = swift_task_alloc(v11);
  v8[14] = swift_task_alloc(v11);
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000D4AAC);
  v0[15] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  return NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)( v0[7],  v0[8]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  }
  else {
    uint64_t v3 = closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  (*(void (**)(void))(v0 + 72))(0LL);
  uint64_t v1 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  os_log_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  os_log_s *log;
  os_log_type_t type;
  uint64_t v41;
  uint64_t v42;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v2, v7, v4);
  v9(v3, v6, v4);
  swift_errorRetain(v1);
  uint64_t v10 = swift_errorRetain(v1);
  unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v14 = static os_log_type_t.error.getter(v11, v12, v13);
  uint64_t v15 = os_log_type_enabled(v11, v14);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 88);
  uint64_t v19 = *(void *)(v0 + 96);
  if (v15)
  {
    os_log_type_t type = v14;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = swift_slowAlloc(96LL, -1LL);
    unint64_t v42 = v41;
    *(_DWORD *)uint64_t v21 = 136315650;
    os_log_t log = v11;
    uint64_t v22 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    unint64_t v25 = v24;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v25);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v26(v17, v20);
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    uint64_t v29 = v28;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v29);
    v26(v18, v20);
    *(_WORD *)(v21 + 22) = 2080;
    *(void *)(v0 + 32) = v16;
    swift_errorRetain(v16);
    os_log_type_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    int v31 = String.init<A>(reflecting:)(v0 + 32, v30);
    uint64_t v33 = v32;
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease(v33);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failed to release invitation %s's assertion %s, reason: %s",  (uint8_t *)v21,  0x20u);
    swift_arrayDestroy(v41, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v34(*(void *)(v0 + 112), *(void *)(v0 + 88));
    v34(v18, v20);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v35 = *(void *)(v0 + 128);
  uint64_t v36 = *(void (**)(uint64_t))(v0 + 72);
  swift_errorRetain(v35);
  v36(v35);
  swift_errorRelease(v35);
  swift_errorRelease(v35);
  unint64_t v37 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)( a1,  a2,  a3,  "NearbyInvitationsProviderDataSource releaseInvitation",  (uint64_t)&unk_1000CC588,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:));
}

uint64_t NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v9 = v6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, a4, v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v16, 1LL, 1LL, v22);
  uint64_t v23 = (void *)swift_allocObject(a5, 64LL, 7LL);
  uint64_t v23[2] = 0LL;
  v23[3] = 0LL;
  v23[4] = v9;
  _OWORD v23[5] = a1;
  v23[6] = a2;
  v23[7] = a3;
  swift_retain();
  id v24 = a1;
  swift_retain();
  uint64_t v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, v28, (uint64_t)v23);
  return swift_release(v25);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  _OWORD v7[6] = a7;
  void v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:), 0LL, 0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + 48LL);
  uint64_t v2 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
  uint64_t v4 = v3;
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xB0LL))(v2);
  uint64_t v5 = *(void (**)(void))(v0 + 40);
  swift_bridgeObjectRelease(v4);
  v5(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  uint64_t v10 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "NearbyInvitationsProviderDataSource scanNearbyInvitations",  v19,  2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  id v20 = [objc_allocWithZone(TUFeatureFlags) init];
  unsigned int v21 = [v20 btScanAbstraction];

  if (v21)
  {
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v14, 1LL, 1LL, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v34,  v6);
    uint64_t v23 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v24 = (v23 + 40) & ~v23;
    unint64_t v25 = (v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v26 = (char *)swift_allocObject(&unk_1000CC5D8, v25 + 16, v23 | 7);
    *((void *)v26 + 2) = 0LL;
    *((void *)v26 + 3) = 0LL;
    *((void *)v26 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v26[v24], v10, v6);
    uint64_t v27 = &v26[v25];
    *(void *)uint64_t v27 = v35;
    *((void *)v27 + 1) = a3;
    swift_retain();
    swift_retain();
    uint64_t v28 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v14,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  (uint64_t)v26);
  }

  else
  {
    v35(0LL);
    uint64_t v29 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v14, 1LL, 1LL, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v34,  v6);
    uint64_t v30 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v31 = (v30 + 40) & ~v30;
    uint64_t v32 = (char *)swift_allocObject(&unk_1000CC5B0, v31 + v8, v30 | 7);
    *((void *)v32 + 2) = 0LL;
    *((void *)v32 + 3) = 0LL;
    *((void *)v32 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))( &v32[v31],  (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
    swift_retain();
    uint64_t v28 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v14,  (uint64_t)&async function pointer to partial apply for closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  (uint64_t)v32);
  }

  return swift_release(v28);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[9] = a6;
  void v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[11] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  void v7[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[13] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v7[14] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v12);
  v7[16] = swift_task_alloc(v12);
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 56) + 376LL))();
  uint64_t v2 = v1;
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease(v1);
    goto LABEL_8;
  }

  specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 64));
  char v4 = v3;
  swift_bridgeObjectRelease(v2);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    uint64_t v24 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 104);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v56 = *(void *)(v0 + 88);
    uint64_t v60 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v57 = *(void *)(v0 + 112);
    uint64_t v58 = *(void *)(v0 + 72);
    uint64_t v55 = v27;
    uint64_t v28 = *(void *)(v0 + 56);
    id v29 = [objc_allocWithZone(CBDiscovery) init];
    [v29 setUseCase:131092];
    [v29 addDiscoveryType:21];
    uint64_t v30 = type metadata accessor for BluetoothScanner(0LL);
    uint64_t v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    uint64_t v32 = specialized BluetoothScanner.init(discoveryEngine:)(v29, v31);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilteredBluetoothScanner<NearbyRangingFilter>);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    uint64_t v34 = specialized FilteredBluetoothScanner.init(scanner:config:)(v32, 1, 3LL);
    swift_release(v32);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    v35(v24, v27, v26);
    uint64_t v36 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 392LL);
    swift_retain();
    unint64_t v37 = (void (*)(uint64_t, void))v36(v0 + 16);
    uint64_t v39 = v38;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    uint64_t v61 = *v39;
    *uint64_t v39 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v24, isUniquelyReferenced_nonNull_native);
    uint64_t v41 = *v39;
    *uint64_t v39 = v61;
    swift_bridgeObjectRelease(v41);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    v37(v0 + 16, 0LL);
    uint64_t v42 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v56, 1LL, 1LL, v42);
    v35(v24, v55, v26);
    uint64_t v43 = *(unsigned __int8 *)(v25 + 80);
    uint64_t v44 = (v43 + 56) & ~v43;
    unint64_t v45 = (v57 + v44 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v46 = (char *)swift_allocObject(&unk_1000CC9B8, v45 + 8, v43 | 7);
    *((void *)v46 + 2) = 0LL;
    *((void *)v46 + 3) = 0LL;
    *((void *)v46 + 4) = v58;
    *((void *)v46 + 5) = v60;
    *((void *)v46 + 6) = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(&v46[v44], v24, v26);
    *(void *)&v46[v45] = v28;
    swift_retain();
    swift_retain();
    uint64_t v47 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v56,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  (uint64_t)v46);
    swift_release(v47);
    goto LABEL_11;
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v14 = static os_log_type_t.error.getter(v11, v12, v13);
  BOOL v15 = os_log_type_enabled(v11, v14);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 96);
  if (v15)
  {
    uint64_t v59 = *(void *)(v0 + 104);
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v61 = v19;
    *(_DWORD *)os_log_type_t v18 = 136315138;
    uint64_t v20 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    unint64_t v23 = v22;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v16, v17);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v14,  "Received request to scan for ID: %s which already exists.",  v18,  0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }

  uint64_t v48 = *(void (**)(void))(v0 + 72);
  unint64_t v49 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  uint64_t v50 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v49, 0LL, 0LL);
  _BYTE *v51 = 4;
  v48();
  swift_errorRelease(v50);
LABEL_11:
  uint64_t v52 = *(void *)(v0 + 120);
  uint64_t v53 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  void v8[12] = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
  v8[17] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[18] = swift_task_alloc(v10);
  v8[19] = swift_task_alloc(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<NearbyAdvertisement>);
  v8[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[21] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[22] = swift_task_alloc(v13);
  v8[23] = swift_task_alloc(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>);
  _BYTE v8[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[25] = v15;
  v8[26] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator);
  v8[27] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[28] = v17;
  v8[29] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  v8[30] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v8[31] = v19;
  uint64_t v20 = *(void *)(v19 + 64);
  v8[32] = v20;
  v8[33] = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>);
  v8[34] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v8[35] = v22;
  v8[36] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v8 = (*(uint64_t (**)(void))(v0 + 96))(0LL);
  *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 192LL))(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v4);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1000CC9E0, v10 + v3, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v11 + v10, v1, v4);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NearbyAdvertisement]);
  *(void *)(v0 + 296) = v13;
  uint64_t v14 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)( partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  v11,  v12,  v13,  v14);
  swift_release(v11);
  swift_release(*(void *)(v0 + 64));
  uint64_t v15 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]> and conformance Publishers.CompactMap<A, B>,  &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  Publisher<>.values.getter(v19, v15);
  AsyncPublisher.makeAsyncIterator()(v18);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v5, v18);
  *(void *)(v0 + 304) = _swiftEmptyArrayStorage;
  uint64_t v21 = (char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu
      + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu;
  uint64_t v16 = (void *)swift_task_alloc(unk_1000D720C);
  *(void *)(v0 + 312) = v16;
  *uint64_t v16 = v0;
  v16[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
  return ((uint64_t (*)(void, void, uint64_t))v21)(0LL, 0LL, v0 + 48);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, void);
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t (*v44)(void);
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  unsigned int v63;
  uint64_t v1 = *(void *)(v0 + 320);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 304);
    *(void *)(v0 + 88) = v2;
    uint64_t v3 = v0 + 88;
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v52 = v1;
    *(void *)(v3 - 32) = v1;
    uint64_t v11 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type [NearbyAdvertisement] and conformance [A],  &demangling cache variable for type metadata for [NearbyAdvertisement],  (uint64_t)&protocol conformance descriptor for [A]);
    BidirectionalCollection.difference<A>(from:by:)( v3,  closure #2 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  v4,  v4,  v11,  v11);
    swift_bridgeObjectRelease(v2);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v54(v8, v5, v6);
    uint64_t v12 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type CollectionDifference<NearbyAdvertisement> and conformance CollectionDifference<A>,  &demangling cache variable for type metadata for CollectionDifference<NearbyAdvertisement>,  (uint64_t)&protocol conformance descriptor for CollectionDifference<A>);
    dispatch thunk of Collection.startIndex.getter(v6);
    *(void *)(v8 + *(int *)(v10 + 36)) = *(void *)(v3 - 16);
    uint64_t v13 = v8;
    uint64_t v14 = v55;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?( v13,  v9,  &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
    uint64_t v15 = (void *)(v9 + *(int *)(v10 + 36));
    uint64_t v16 = *v15;
    uint64_t v17 = v12;
    dispatch thunk of Collection.endIndex.getter(v6, v12);
    if (v16 == *(void *)(v3 - 8))
    {
LABEL_3:
      uint64_t v18 = v14[23];
      uint64_t v20 = v14[20];
      uint64_t v19 = v14[21];
      outlined destroy of Any?( v14[19],  &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      v14[38] = v52;
      uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu
                                                     + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu);
      uint64_t v21 = (void *)swift_task_alloc(unk_1000D720C);
      v14[39] = v21;
      *uint64_t v21 = v14;
      v21[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
      return v61(0LL, 0LL);
    }

    uint64_t v53 = v55 + 2;
    while (1)
    {
      uint64_t v34 = v14[22];
      uint64_t v60 = v14[21];
      uint64_t v35 = v14[19];
      uint64_t v36 = v14[20];
      unint64_t v37 = v14[16];
      unint64_t v38 = v17;
      uint64_t v39 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v53, v15, v36, v17);
      uint64_t v41 = (void *)v40[1];
      uint64_t v42 = *((unsigned __int8 *)v40 + 25);
      uint64_t v56 = v40[2];
      uint64_t v58 = *v40;
      uint64_t v63 = *((unsigned __int8 *)v40 + 24);
      outlined copy of CollectionDifference<NearbyAdvertisement>.Change();
      v39(v53, 0LL);
      uint64_t v17 = v38;
      v54(v34, v35, v36);
      uint64_t v43 = v15;
      dispatch thunk of Collection.formIndex(after:)(v15, v36, v17);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v34, v36);
      uint64_t v44 = *(uint64_t (**)(void))(*(void *)v37 + 208LL);
      unint64_t v45 = v41;
      uint64_t v46 = v44();
      uint64_t v47 = v46;
      unint64_t v49 = v48;
      if ((v42 & 1) != 0)
      {
        uint64_t v14 = v55;
        uint64_t v51 = v56;
        uint64_t v50 = v58;
        if (!v46) {
          goto LABEL_7;
        }
        swift_getObjectType(v46);
        (*(void (**)(id))(v49 + 40))(v45);
      }

      else
      {
        uint64_t v14 = v55;
        uint64_t v51 = v56;
        uint64_t v50 = v58;
        if (!v46) {
          goto LABEL_7;
        }
        swift_getObjectType(v46);
        (*(void (**)(id))(v49 + 32))(v45);
      }

      swift_unknownObjectRelease(v47);
LABEL_7:
      uint64_t v32 = v14[20];
      outlined consume of CollectionDifference<NearbyAdvertisement>.Change(v50, v41, v51, v63, v42);
      outlined consume of CollectionDifference<NearbyAdvertisement>.Change(v50, v41, v51, v63, v42);
      uint64_t v15 = v43;
      uint64_t v33 = *v43;
      dispatch thunk of Collection.endIndex.getter(v32, v17);
      if (v33 == v14[10]) {
        goto LABEL_3;
      }
    }
  }

  uint64_t v24 = *(void *)(v0 + 280);
  unint64_t v23 = *(void *)(v0 + 288);
  uint64_t v26 = *(void *)(v0 + 264);
  uint64_t v25 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 232);
  uint64_t v30 = *(void *)(v0 + 208);
  id v29 = *(void *)(v0 + 216);
  uint64_t v31 = *(void *)(v0 + 184);
  uint64_t v57 = *(void *)(v0 + 176);
  uint64_t v59 = *(void *)(v0 + 152);
  uint64_t v62 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease(*(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  swift_task_dealloc(v23);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312LL);
  *(void *)(*(void *)v1 + 32swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived,  v3,  33LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 16LL);
  if (v6)
  {
    uint64_t v21 = a3;
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = (__int128 *)(v5 + 40);
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *((void *)v7 - 1);
      uint64_t v10 = *((void *)v7 + 1);
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 208LL);
      __int128 v22 = *v7;
      swift_bridgeObjectRetain(v22);
      uint64_t v12 = swift_retain();
      if ((v11(v12) & 1) != 0)
      {
        unint64_t v23 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1LL, 1);
          uint64_t v8 = v23;
        }

        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v13 > 1,  v14 + 1,  1);
          uint64_t v8 = v23;
        }

        void v8[2] = v14 + 1;
        uint64_t v15 = &v8[3 * v14];
        v15[4] = v9;
        *(_OWORD *)(v15 + 5) = v22;
      }

      else
      {
        swift_release(v10);
        swift_bridgeObjectRelease(v22);
      }

      uint64_t v7 = (__int128 *)((char *)v7 + 24);
      --v6;
    }

    while (v6);
    a1 = swift_bridgeObjectRelease(v5);
    uint64_t v4 = v21;
  }

  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(a1, a2);
  v20[2] = a2;
  unint64_t v16 = (unint64_t)specialized Sequence.compactMap<A>(_:)( (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  (uint64_t)v20,  (uint64_t)v8);
  swift_release(v8);
  if ((v16 & 0x8000000000000000LL) != 0 || (v16 & 0x4000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v19);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    uint64_t v17 = v16 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v16);
  }

  unint64_t v23 = (void *)v17;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v23);
  uint64_t result = swift_bridgeObjectRelease(v16);
  *uint64_t v4 = v23;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for NearbyAdvertisement(0LL);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v11 + 152LL))(&v15, v12);
  v21[2] = v17;
  uint64_t v21[3] = v18;
  v21[4] = v19;
  char v22 = v20;
  v21[0] = v15;
  v21[1] = v16;
  char v24 = v20;
  uint64_t v23[2] = v17;
  v23[3] = v18;
  v23[4] = v19;
  v23[0] = v15;
  v23[1] = v16;
  outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>((uint64_t)v21);
  outlined release of BluetoothScanner.Device(&v15);
  uint64_t result = NearbyAdvertisement.init(scannerID:device:)((uint64_t)v10, v23);
  *a3 = result;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v0 = NearbyAdvertisement.identifier.getter();
  uint64_t v2 = v1;
  uint64_t v3 = NearbyAdvertisement.identifier.getter();
  if (v0 == v3 && v2 == v4)
  {
    char v7 = 1;
    uint64_t v6 = v2;
  }

  else
  {
    uint64_t v6 = v4;
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  void v5[3] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  void v5[4] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  void v5[5] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[6] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v5[7] = v9;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[8] = swift_task_alloc(v10);
  void v5[9] = swift_task_alloc(v10);
  return swift_task_switch( closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v17 = v6;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  __int128 v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
  v18(v5, 1LL, 1LL, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v6);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  unint64_t v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_1000CCAD0, v11 + 8, v9 | 7);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v12 + 24) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v2, v17);
  *(void *)(v12 + v11) = v7;
  swift_retain();
  uint64_t v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v5,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  v12);
  swift_release(v13);
  v18(v5, 1LL, 1LL, v8);
  uint64_t v14 = (void *)swift_allocObject(&unk_1000CCAF8, 40LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v7;
  swift_retain();
  uint64_t v15 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v5,  (uint64_t)&async function pointer to partial apply for closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  (uint64_t)v14);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v17);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  void v5[4] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Iterator);
  void v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  AsyncStream.makeAsyncIterator()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 40));
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 64LL));
  return swift_task_switch( closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  uint64_t v9;
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 208LL))();
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v5 = v3;
      uint64_t ObjectType = swift_getObjectType(v2);
      (*(void (**)(void *, uint64_t, uint64_t))(v5 + 32))(v1, ObjectType, v5);
      swift_unknownObjectRelease(v4);
    }

    uint64_t v7 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 40));
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v9, *(void *)(v0 + 40));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[3] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Iterator);
  void v4[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[5] = v6;
  v4[6] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  void v4[7] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  v4[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v4[9] = v9;
  v4[10] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

uint64_t closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  NearbyInvitationServiceBluetoothController.lostInvitations()(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    outlined destroy of Any?( *(void *)(v0 + 56),  &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t))(*(void *)(v0 + 72) + 32LL))( *(void *)(v0 + 80),  *(void *)(v0 + 56),  v7);
    AsyncStream.makeAsyncIterator()(v7);
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 88) = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 32));
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 88LL));
  return swift_task_switch( closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 208LL))();
    if (v2)
    {
      uint64_t v4 = v2;
      uint64_t v5 = v3;
      uint64_t ObjectType = swift_getObjectType(v2);
      (*(void (**)(void *, uint64_t, uint64_t))(v5 + 40))(v1, ObjectType, v5);
      swift_unknownObjectRelease(v4);
    }

    uint64_t v7 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 88) = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0LL, 0LL, *(void *)(v0 + 32));
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    unint64_t v11 = *(void *)(v0 + 64);
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8LL))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)( void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v35 = a4;
  unint64_t v37 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  uint64_t v10 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = a2;
    char v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v20 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "NearbyInvitationsProviderDataSource scanNearbyEndpoints",  v20,  2u);
    uint64_t v21 = v20;
    a2 = v19;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = v35;
  a3(0LL);
  uint64_t v23 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v14, 1LL, 1LL, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v6);
  uint64_t v24 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v25 = (v24 + 40) & ~v24;
  unint64_t v26 = (v8 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = (char *)swift_allocObject(&unk_1000CC600, v27 + 16, v24 | 7);
  *((void *)v28 + 2) = 0LL;
  *((void *)v28 + 3) = 0LL;
  *((void *)v28 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v28[v25], v10, v6);
  id v29 = v37;
  *(void *)&v28[v26] = v37;
  uint64_t v30 = &v28[v27];
  *(void *)uint64_t v30 = a3;
  *((void *)v30 + 1) = v22;
  swift_retain();
  id v31 = v29;
  swift_retain();
  uint64_t v32 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v14,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:),  (uint64_t)v28);
  return swift_release(v32);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  void v8[2] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[7] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  _WORD v8[8] = v10;
  v8[9] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 64) + 16LL))( v1,  *(void *)(v0 + 24),  *(void *)(v0 + 56));
  uint64_t v4 = type metadata accessor for NearbyInvitationScanner(0LL);
  uint64_t v5 = (void *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  id v6 = v2;
  swift_retain();
  uint64_t v7 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(v1, v6, v3, v5);
  swift_release(v3);
  uint64_t v8 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = v7;
  swift_release(v8);
  uint64_t v9 = *(void *)(v3 + 72);
  if (v9)
  {
    uint64_t v10 = *(void (**)(uint64_t))(*(void *)v9 + 232LL);
    uint64_t v11 = swift_retain();
    v10(v11);
    swift_release(v9);
  }

  else
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.host);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v17 = static os_log_type_t.error.getter(v14, v15, v16);
    if (os_log_type_enabled(v14, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v17,  "NearbyInvitationsProviderDataSource unable to create nearbyInvitationsBrowser",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = *(void (**)(void))(v0 + 40);

    unint64_t v20 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    uint64_t v21 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v20, 0LL, 0LL);
    *uint64_t v22 = 3;
    v19();
    swift_errorRelease(v21);
  }

  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void NearbyInvitationsProviderDataSource.stopScanningNearbyInvitations(provider:response:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "NearbyInvitationsProviderDataSource scanNearbyInvitations",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  id v7 = [objc_allocWithZone(TUFeatureFlags) init];
  unsigned int v8 = [v7 btScanAbstraction];

  if (v8)
  {
    uint64_t v9 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*v1 + 392LL))(v15);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(*v10);
    *uint64_t v11 = &_swiftEmptyDictionarySingleton;
    v9(v15, 0LL);
  }

  uint64_t v12 = *(void *)(v1[5]
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan);
  if (v12)
  {
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 336LL);
    uint64_t v14 = swift_retain();
    v13(v14);
    swift_release(v12);
  }

uint64_t NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( a1,  a2,  a3,  a4,  (uint64_t)&unk_1000CC628,  (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:),  (uint64_t)&block_descriptor_74);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  unint64_t v45 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  id v12 = a1;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(8LL, -1LL);
    uint64_t v44 = a5;
    os_log_type_t v17 = (void *)v16;
    *(_DWORD *)uint64_t v15 = 138412290;
    id v49 = v12;
    id v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v15 + 4, v15 + 12);
    *os_log_type_t v17 = v12;

    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "NearbyInvitationsProviderDataSource requestConnection with %@",  v15,  0xCu);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v17, 1LL, v19);
    unint64_t v20 = v17;
    a5 = v44;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Error>);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = PassthroughSubject.init()();
  uint64_t v23 = NearbyAdvertisement.identifier.getter();
  uint64_t v25 = v24;
  unint64_t v26 = *(uint64_t (**)(id *))(*a2 + 344LL);
  swift_retain();
  unint64_t v27 = (uint64_t (*)(id *, void))v26(&v49);
  id v29 = v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v28);
  uint64_t v48 = *v29;
  uint64_t *v29 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v23, v25, isUniquelyReferenced_nonNull_native);
  uint64_t v31 = *v29;
  uint64_t *v29 = v48;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v25);
  uint64_t v32 = v27(&v49, 0LL);
  uint64_t v33 = (void *)a2[7];
  uint64_t v34 = NearbyInvitationJoinRequestMetadata.pseudonym.getter(v32);
  uint64_t v36 = v35;
  (*(void (**)(uint64_t))((swift_isaMask & *v33) + 0xF0LL))(v34);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = type metadata accessor for TaskPriority(0LL);
  uint64_t v38 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v45, 1LL, 1LL, v37);
  uint64_t v39 = (void *)swift_allocObject(&unk_1000CC990, 72LL, 7LL);
  unint64_t v39[2] = 0LL;
  v39[3] = 0LL;
  uint64_t v39[4] = a2;
  v39[5] = v12;
  uint64_t v40 = v47;
  v39[6] = v22;
  v39[7] = v40;
  v39[8] = a5;
  id v41 = v12;
  swift_retain();
  swift_retain();
  uint64_t v42 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v38,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:),  (uint64_t)v39);
  return swift_release(v42);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>);
  v8[18] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[19] = v10;
  v8[20] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator);
  v8[21] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[22] = v12;
  v8[23] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)()
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[14];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v0[24] = __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_retain_n(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[13];
  id v7 = (void *)v0[14];
  if (v6)
  {
    os_log_type_t type = v5;
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v9 = 136315394;
    v0[10] = v8;
    uint64_t v10 = type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
    swift_retain();
    uint64_t v11 = String.init<A>(reflecting:)(v0 + 10, v10);
    unint64_t v13 = v12;
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v9 + 4, v9 + 12);
    swift_release_n(v8);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2112;
    v0[12] = v7;
    id v14 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v9 + 14, v9 + 22);
    *uint64_t v24 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, type, "%s: awating requestConnection with %@", (uint8_t *)v9, 0x16u);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v24, 1LL, v15);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v8);
  }

  uint64_t v17 = v0[19];
  uint64_t v16 = v0[20];
  uint64_t v18 = v0[18];
  v0[4] = v0[15];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Error>);
  uint64_t v20 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type PassthroughSubject<Data, Error> and conformance PassthroughSubject<A, B>,  &demangling cache variable for type metadata for PassthroughSubject<Data, Error>,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Publisher.values.getter(v19, v20);
  AsyncThrowingPublisher.makeAsyncIterator()(v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  uint64_t v21 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator,  &demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator,  (uint64_t)&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator);
  uint64_t v22 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[25] = v22;
  *uint64_t v22 = v0;
  v22[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v0[21], v21);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  }
  else {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  os_log_s *v2;
  os_log_type_t v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  if (*(void *)(v0 + 24) >> 60 == 15LL)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8LL))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 16);
    uint64_t v28 = *(void *)(v0 + 24);
    uint64_t v1 = *(void **)(v0 + 112);
    swift_retain_n(*(void *)(v0 + 104));
    uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
    uint64_t v3 = static os_log_type_t.default.getter();
    uint64_t v4 = os_log_type_enabled(v2, v3);
    BOOL v6 = *(void *)(v0 + 104);
    os_log_type_t v5 = *(void **)(v0 + 112);
    if (v4)
    {
      id v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      id v29 = v25;
      *(_DWORD *)id v7 = 136315394;
      *(void *)(v0 + 56) = v6;
      uint64_t v8 = type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
      swift_retain();
      uint64_t v9 = String.init<A>(reflecting:)(v0 + 56, v8);
      uint64_t v11 = v10;
      *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4, v7 + 12);
      swift_release_n(v6);
      swift_bridgeObjectRelease(v11);
      *(_WORD *)(v7 + 12) = 2112;
      *(void *)(v0 + 72) = v5;
      unint64_t v12 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 14, v7 + 22);
      *uint64_t v24 = v5;

      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: received requestConnection with %@", (uint8_t *)v7, 0x16u);
      unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v24, 1LL, v13);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {

      id v14 = swift_release_n(v6);
    }

    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v26 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v17 = *(void (**)(void *, void))(v0 + 128);
    uint64_t v18 = NearbyAdvertisement.identifier.getter(v14);
    uint64_t v20 = v19;
    objc_allocWithZone((Class)type metadata accessor for InvitationBlob(0LL));
    outlined copy of Data._Representation(v27, v28);
    uint64_t v21 = (void *)InvitationBlob.init(invitationID:dataBlob:)(v18, v20, v27, v28);
    v17(v21, 0LL);

    outlined consume of Data?(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v16);
  }

  uint64_t v22 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v0 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = *(void *)(v0 + 208);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl(v0 + 40, v1, &protocol self-conformance witness table for Error);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void, uint64_t);
  uint64_t v13;
  uint64_t v1 = *(void *)(v0 + 208);
  (*(void (**)(void, void))(*(void *)(v0 + 176) + 8LL))(*(void *)(v0 + 184), *(void *)(v0 + 168));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = *(void *)(v0 + 208);
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    *id v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "NearbyInvitationsProviderDataSource connection request was denied %@",  v6,  0xCu);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 208);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 208);
  unint64_t v12 = *(void (**)(void, uint64_t))(v0 + 128);

  swift_errorRetain(v11);
  v12(0LL, v11);
  swift_errorRelease(v11);
  swift_errorRelease(v11);
  unint64_t v13 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( a1,  a2,  a3,  a4,  (uint64_t)&unk_1000CC678,  (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:),  (uint64_t)&block_descriptor_80);
}

uint64_t NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v32[0] = a7;
  uint64_t v10 = v7;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v19 - 8);
  uint64_t v34 = v19;
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[1] = *(void *)(v10 + 32);
  uint64_t v23 = (void *)swift_allocObject(a5, 56LL, 7LL);
  uint64_t v23[2] = a1;
  v23[3] = v10;
  v23[4] = a2;
  __int128 v23[5] = a3;
  v23[6] = a4;
  aBlock[4] = a6;
  uint64_t v38 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v32[0];
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = a1;
  swift_retain();
  id v26 = a2;
  uint64_t v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v28 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v30 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v15, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v22, v18, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v34);
  return swift_release(v38);
}

void closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)( void *a1, void *a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v95 = a5;
  unint64_t v96 = a4;
  uint64_t v93 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7, v8);
  uint64_t v92 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v90 = *(void *)(v10 - 8);
  uint64_t v91 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v89 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v97 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = (char *)&v84 - v33;
  uint64_t v94 = a1;
  uint64_t v35 = NearbyAdvertisement.identifier.getter(v32);
  uint64_t v37 = v36;
  UUID.init(uuidString:)(v35);
  swift_bridgeObjectRelease(v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) == 1)
  {
    uint64_t v38 = &demangling cache variable for type metadata for UUID?;
    uint64_t v39 = (uint64_t)v24;
LABEL_9:
    outlined destroy of Any?(v39, v38);
    if (one-time initialization token for client != -1) {
      swift_once(&one-time initialization token for client, one-time initialization function for client);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v45, (uint64_t)static Log.client);
    uint64_t v46 = swift_retain_n(a2);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      id v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v98 = (uint64_t)a2;
      uint64_t v99 = v50;
      *(_DWORD *)id v49 = 136315138;
      uint64_t v51 = type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
      swift_retain();
      uint64_t v52 = String.init<A>(reflecting:)(&v98, v51);
      unint64_t v54 = v53;
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v54);
      swift_release_n(a2);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s: Received no scannerID in connection request", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a2);
    }

    return;
  }

  uint64_t v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v34, v24, v25);
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*a2 + 352LL))(v40);
  if (*(void *)(v41 + 16) && (unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34), (v43 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))( v16,  *(void *)(v41 + 56) + *(void *)(v18 + 72) * v42,  v17);
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, v44, 1LL, v17);
  swift_bridgeObjectRelease(v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v25);
    uint64_t v38 = &demangling cache variable for type metadata for NWBrowser.Result?;
    uint64_t v39 = (uint64_t)v16;
    goto LABEL_9;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v97, v16, v17);
  uint64_t v55 = a2[9];
  if (v55)
  {
    uint64_t v56 = one-time initialization token for host;
    swift_retain();
    if (v56 != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v57, (uint64_t)static Log.host);
    uint64_t v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v30, v34, v25);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      os_log_t v87 = v59;
      uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v86 = swift_slowAlloc(32LL, -1LL);
      uint64_t v99 = v86;
      unint64_t v85 = v61;
      *(_DWORD *)uint64_t v61 = 136315138;
      NSString v88 = (void (*)(char *, uint64_t))(v61 + 4);
      uint64_t v62 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v25, v62);
      unint64_t v65 = v64;
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v88, v61 + 12);
      swift_bridgeObjectRelease(v65);
      NSString v88 = *(void (**)(char *, uint64_t))(v26 + 8);
      v88(v30, v25);
      uint64_t v59 = v87;
      int v66 = v85;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v60,  "NearbyInvitationsProviderDataSource connecting to endpoint to %s",  v85,  0xCu);
      uint64_t v67 = v86;
      swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      NSString v88 = *(void (**)(char *, uint64_t))(v26 + 8);
      v88(v30, v25);
    }

    uint64_t v73 = v89;
    uint64_t v74 = v97;
    NWBrowser.Result.endpoint.getter(v75);
    (*(void (**)(char *))(*(void *)v55 + 240LL))(v73);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v73, v91);
    uint64_t v76 = type metadata accessor for TaskPriority(0LL);
    uint64_t v77 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v92, 1LL, 1LL, v76);
    uint64_t v78 = (void *)swift_allocObject(&unk_1000CC968, 56LL, 7LL);
    _OWORD v78[2] = 0LL;
    v78[3] = 0LL;
    uint64_t v80 = v93;
    uint64_t v79 = v94;
    v78[4] = v55;
    v78[5] = v80;
    id v78[6] = v79;
    swift_retain();
    id v81 = v80;
    id v82 = v79;
    uint64_t v83 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v77,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:),  (uint64_t)v78);
    swift_release(v83);
    v96(0LL);
    swift_release(v55);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v74, v17);
    v88(v34, v25);
  }

  else
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v68 = type metadata accessor for Logger(0LL);
    uint64_t v69 = __swift_project_value_buffer(v68, (uint64_t)static Log.host);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "NearbyInvitationsProviderDataSource requestEndpointConnection cannot find nearbyInvitationsBrowser",  v72,  2u);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v97, v17);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v25);
  }

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[6] = a5;
  void v6[7] = a6;
  _OWORD v6[5] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v6[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[12] = v10;
  v6[13] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  v6[14] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[15] = v12;
  v6[16] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 40) + 200LL))();
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Published<[NWConnection]>.Publisher and conformance Published<A>.Publisher,  &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()(v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator,  &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  *(void *)(v0 + 136) = v8;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 144) = v9;
  void *v9 = v0;
  v9[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(void *)(v0 + 112), v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 144));
  if (v0)
  {
    *(void *)(v2 + 16NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v0;
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  else
  {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  *(void *)(v0 + 24) = *(void *)(v0 + 160);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 24, v1, &type metadata for Never, 7LL);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  if (v0)
  {
    *(void *)(v2 + 16NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v0;
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  else
  {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

void closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (!v1)
  {
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = *(void *)(v0 + 104);
    uint64_t v29 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 120) + 8LL))(v27, *(void *)(v0 + 112));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease(v1);
    uint64_t v31 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(void *)(v0 + 168) = v31;
    void *v31 = v0;
    v31[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
    dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(void *)(v0 + 112), *(void *)(v0 + 136));
    return;
  }

  if (v1 >= 0) {
    uint64_t v30 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v30 = *(void *)(v0 + 152);
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 152));
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v1);
  if (!v2) {
    goto LABEL_20;
  }
LABEL_4:
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v34 = *(void (**)(uint64_t))(**(void **)(v0 + 40) + 248LL);
    uint64_t v32 = (uint64_t *)(v0 + 32);
    unint64_t v33 = *(void *)(v0 + 152) & 0xC000000000000001LL;
    uint64_t v35 = v1;
    do
    {
      if (v33)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      }

      else
      {
        uint64_t v9 = *(void *)(v1 + 8 * v3 + 32);
        swift_retain();
      }

      uint64_t v10 = v2;
      if (one-time initialization token for client != -1) {
        swift_once(&one-time initialization token for client, one-time initialization function for client);
      }
      uint64_t v11 = *(void **)(v0 + 48);
      uint64_t v12 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v12, (uint64_t)static Log.client);
      id v13 = v11;
      swift_retain_n(v9);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      BOOL v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *(void **)(v0 + 48);
      if (v16)
      {
        uint64_t v18 = swift_slowAlloc(22LL, -1LL);
        uint64_t v19 = swift_slowAlloc(64LL, -1LL);
        uint64_t v36 = v19;
        *(_DWORD *)uint64_t v18 = 136315394;
        uint64_t v20 = NearbyInvitationJoinRequestMetadata.pseudonym.getter(v19);
        unint64_t v22 = v21;
        *(void *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v36);
        swift_bridgeObjectRelease(v22);

        *(_WORD *)(v18 + 12) = 2080;
        *uint64_t v32 = v9;
        uint64_t v23 = type metadata accessor for NWConnection(0LL);
        swift_retain();
        uint64_t v24 = String.init<A>(reflecting:)(v32, v23);
        unint64_t v26 = v25;
        *(void *)(v18 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
        swift_bridgeObjectRelease(v26);
        swift_release_n(v9);
        _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "NearbyInvitationsProviderDataSource Sending pre-lmi data %s to %s",  (uint8_t *)v18,  0x16u);
        swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1LL, -1LL);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v9);
      }

      ++v3;
      uint64_t v5 = NearbyInvitationJoinRequestMetadata.pseudonym.getter(v4);
      uint64_t v7 = v6;
      v34(v5);
      swift_bridgeObjectRelease(v7);
      swift_release(v9);
      uint64_t v2 = v10;
      BOOL v8 = v10 == v3;
      uint64_t v1 = v35;
    }

    while (!v8);
    goto LABEL_20;
  }

  __break(1u);
}

uint64_t NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)( void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(v3 + 32);
  os_log_type_t v15 = (void *)swift_allocObject(&unk_1000CC6C8, 48LL, 7LL);
  void v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  uint64_t v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_86;
  BOOL v16 = _Block_copy(aBlock);
  swift_retain();
  id v17 = a1;
  uint64_t v18 = outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter(v18);
  unint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v21 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v24);
  return swift_release(v28);
}

void closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)( uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    BOOL v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v16 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "NearbyInvitationsProviderDataSource approveConnectionRequest",  v16,  2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  id v17 = [objc_allocWithZone(CPFeatureFlags) init];
  unsigned int v18 = [v17 wranglerHomePodBoopEnabled];

  if (v18)
  {
    uint64_t v20 = *(void *)(a1 + 80);
    if (v20)
    {
      uint64_t v21 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v11, 1LL, 1LL, v21);
      unint64_t v22 = (void *)swift_allocObject(&unk_1000CC940, 64LL, 7LL);
      void v22[2] = 0LL;
      v22[3] = 0LL;
      void v22[4] = v20;
      v22[5] = a2;
      v22[6] = a3;
      v22[7] = a4;
      swift_retain();
      id v23 = a2;
      outlined copy of Data._Representation(a3, a4);
      uint64_t v24 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v11,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:),  (uint64_t)v22);
      swift_release(v24);
    }

    else
    {
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v34 = static os_log_type_t.error.getter(v37, v32, v33);
      if (os_log_type_enabled(v37, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v34,  "NearbyInvitationsProviderDataSource nearbyInvitationsListener is nil",  v35,  2u);
        swift_slowDealloc(v35, -1LL, -1LL);
      }
    }
  }

  else
  {
    uint64_t v25 = NearbyAdvertisement.handle.getter();
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void **)(a1 + 56);
      uint64_t v29 = NearbyAdvertisement.identifier.getter(v25);
      uint64_t v31 = v30;
      (*(void (**)(uint64_t))((swift_isaMask & *v28) + 0xD8LL))(v29);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v31);
    }
  }

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>);
  v7[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[9] = v9;
  void v7[10] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v7[11] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v7[12] = v11;
  v7[13] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  v7[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[15] = v13;
  v7[16] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 32) + 184LL))();
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Published<[NWConnection]>.Publisher and conformance Published<A>.Publisher,  &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()(v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator,  &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  *(void *)(v0 + 136) = v8;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 144) = v9;
  void *v9 = v0;
  v9[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(void *)(v0 + 112), v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 144));
  if (v0)
  {
    *(void *)(v2 + 16NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v0;
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  else
  {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return swift_task_switch( closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  if (v0)
  {
    *(void *)(v2 + 16NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v0;
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }

  else
  {
    uint64_t v3 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

void closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (!v1)
  {
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 120) + 8LL))(v12, *(void *)(v0 + 112));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease(v1);
    BOOL v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(void *)(v0 + 168) = v16;
    *BOOL v16 = v0;
    v16[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
    dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(void *)(v0 + 112), *(void *)(v0 + 136));
    return;
  }

  if (v1 >= 0) {
    uint64_t v15 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v15 = *(void *)(v0 + 152);
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 152));
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v1);
  if (!v2) {
    goto LABEL_15;
  }
LABEL_4:
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    unint64_t v17 = *(void *)(v0 + 152) & 0xC000000000000001LL;
    uint64_t v4 = v1;
    do
    {
      if (v17)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
        uint64_t v6 = v5;
      }

      else
      {
        uint64_t v6 = *(void *)(v1 + 8 * v3 + 32);
        uint64_t v5 = swift_retain();
      }

      uint64_t v8 = *(void *)(v0 + 48);
      unint64_t v7 = *(void *)(v0 + 56);
      ++v3;
      uint64_t v9 = NearbyAdvertisement.identifier.getter(v5);
      unint64_t v11 = v10;
      NearbyInvitationAdvertiser.approveConnectionRequest(id:localInvitation:connection:)(v9, v10, v8, v7, v6);
      swift_bridgeObjectRelease(v11);
      swift_release(v6);
      uint64_t v1 = v4;
    }

    while (v2 != v3);
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(v1 + 32);
  uint64_t v13 = swift_allocObject(&unk_1000CC718, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v13 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:);
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_92;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = a1;
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  unint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v19 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v24);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = NearbyAdvertisement.handle.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Log.host);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "NearbyInvitationsProviderDataSource denyConnectionRequest",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void **)(a2 + 56);
    uint64_t v13 = NearbyAdvertisement.identifier.getter(v12);
    uint64_t v15 = v14;
    (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0xD0LL))(v13);
    swift_bridgeObjectRelease(v15);
    return swift_bridgeObjectRelease(v5);
  }

  return result;
}

Swift::Void __swiftcall NearbyInvitationsProviderDataSource.didUpdateGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = v1[4];
  uint64_t v13 = (Swift::OpaquePointer *)swift_allocObject(&unk_1000CC768, 32LL, 7LL);
  v13[2]._uint64_t rawValue = v1;
  v13[3]._uint64_t rawValue = a1._rawValue;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:);
  unint64_t v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_98;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a1._rawValue);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v16 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v18 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release(v22);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 208LL))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a2, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }

  return result;
}

uint64_t NearbyInvitationsProviderDataSource.deinit()
{
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));

  swift_release(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_bridgeObjectRelease(*(void *)(v0 + 128));
  uint64_t v1 = v0
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables));
  return v0;
}

uint64_t NearbyInvitationsProviderDataSource.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for NearbyInvitationsProvider.generateNearbyInvitation(provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 512LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.advertiseNearbyInvitation(_:provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 520LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.stopAdvertisingNearbyInvitation(_:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 536LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.scanNearbyInvitations(scannerID:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 584LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.scanNearbyEndpoints(params:scannerID:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 592LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.stopScanningNearbyInvitations(provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 600LL))();
}

uint64_t protocol witness for NearbyInvitationsProvider.requestConnection(with:localInvitation:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 608LL))();
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = a5;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:),  0LL,  0LL);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_getErrorValue(v1, v0 + 40, v0 + 16);
  v2._uint64_t countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  id v4 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v5 = [v4 bundleIdentifier];

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0xD00000000000001DLL;
    unint64_t v8 = 0x80000001000B0860LL;
  }

  uint64_t v9 = dispatch thunk of ABCReporter.signature(subType:context:process:)( 0x757165526E696F4ALL,  0xEC00000073747365LL,  0xD000000000000014LL,  0x80000001000B0E80LL,  v6,  v8);
  *(void *)(v0 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v9;
  swift_bridgeObjectRelease(0x80000001000B0E80LL);
  swift_bridgeObjectRelease(v8);
  if (v9)
  {
    *(void *)(v0 + 72) = v10;
    *uint64_t v10 = v0;
    v10[1] = closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:);
    return v19(v9, 0.0);
  }

  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once(&one-time initialization token for abcReporter, one-time initialization function for abcReporter);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.abcReporter);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v17 = static os_log_type_t.error.getter(v14, v15, v16);
    if (os_log_type_enabled(v14, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v17,  "Failed to generate signature for session unsuspend failure",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 72));
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(a3);
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:)( uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t NearbyInvitationsProviderDataSource.connectionChanged(added:endpoint:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v9, v10);
  unint64_t v54 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  os_log_type_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v48 - v19;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v21, (uint64_t)static Log.host);
  id v22 = a1;
  id v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  id v55 = v22;
  if (v25)
  {
    uint64_t v52 = v3;
    uint64_t v26 = swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = v20;
    uint64_t v27 = (uint8_t *)v26;
    os_log_type_t v48 = (void *)swift_slowAlloc(8LL, -1LL);
    id v49 = v17;
    uint64_t v50 = v8;
    *(_DWORD *)uint64_t v27 = 138412290;
    id v56 = v22;
    id v28 = v55;
    id v29 = v55;
    os_log_type_t v17 = v49;
    unint64_t v8 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v27 + 4, v27 + 12);
    uint64_t v30 = v48;
    *os_log_type_t v48 = v29;

    uint64_t v3 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "NearbyInvitationsProviderDataSource is adding connection from delegate %@)",  v27,  0xCu);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v30, 1LL, v31);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v32 = v27;
    uint64_t v20 = v51;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v34 = NearbyAdvertisement.identifier.getter(v33);
  uint64_t v36 = v35;
  uint64_t v37 = (uint64_t)v54;
  UUID.init(uuidString:)(v34);
  swift_bridgeObjectRelease(v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v20, v37, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v12);
  uint64_t v39 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v8, v53, v39);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v8, 0LL, 1LL, v39);
  uint64_t v41 = (uint64_t (*)(id *, void))(*(uint64_t (**)(id *))(*(void *)v3 + 368LL))(&v56);
  specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)v17);
  uint64_t v42 = v41(&v56, 0LL);
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 208LL))(v42);
  if (v43)
  {
    uint64_t v45 = v43;
    uint64_t v46 = v44;
    uint64_t ObjectType = swift_getObjectType(v43);
    (*(void (**)(id, uint64_t, uint64_t))(v46 + 32))(v55, ObjectType, v46);
    swift_unknownObjectRelease(v45);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, v12);
}

uint64_t NearbyInvitationsProviderDataSource.connectionChanged(removed:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v4, v5);
  id v55 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v49 - v18;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v20, (uint64_t)static Log.host);
  id v21 = a1;
  id v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v54 = v2;
    uint64_t v24 = swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = v12;
    BOOL v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = (uint64_t)v21;
    v57[0] = v26;
    uint64_t v50 = v19;
    uint64_t v51 = v16;
    *(_DWORD *)BOOL v25 = 136315138;
    uint64_t v27 = type metadata accessor for NearbyAdvertisement(0LL);
    uint64_t v53 = v11;
    uint64_t v28 = v27;
    id v29 = v21;
    uint64_t v30 = String.init<A>(reflecting:)(&v56, v28);
    unint64_t v32 = v31;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v57);
    uint64_t v19 = v50;
    uint64_t v16 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v25 + 4, v25 + 12);

    unint64_t v33 = v32;
    uint64_t v11 = v53;
    uint64_t v2 = v54;
    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "NearbyInvitationsProviderDataSource is removing connection from delegate %s",  v25,  0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v34 = v25;
    uint64_t v12 = v52;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v36 = NearbyAdvertisement.identifier.getter(v35);
  uint64_t v38 = v37;
  UUID.init(uuidString:)(v36);
  swift_bridgeObjectRelease(v38);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v19, v11);
  uint64_t v40 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v41 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v55, 1LL, 1LL, v40);
  uint64_t v42 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 368LL))(v57);
  specialized Dictionary.subscript.setter(v41, (uint64_t)v16);
  uint64_t v43 = v42(v57, 0LL);
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208LL))(v43);
  if (v44)
  {
    uint64_t v46 = v44;
    uint64_t v47 = v45;
    uint64_t ObjectType = swift_getObjectType(v44);
    (*(void (**)(id, uint64_t, uint64_t))(v47 + 40))(v21, ObjectType, v47);
    swift_unknownObjectRelease(v46);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = specialized Array._copyContents(initializing:)((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  Swift::Int v5 = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_151;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v4, 1LL, v3);
    }
    return result;
  }

  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_159;
  }
  Swift::Int v126 = result;
  uint64_t v123 = v3;
  if (v4 < 2)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v136 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v4 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v14 >= 2)
      {
        uint64_t v115 = *v123;
        do
        {
          unint64_t v116 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_146;
          }
          if (!v115) {
            goto LABEL_158;
          }
          uint64_t v117 = *(void *)&v11[16 * v116 + 32];
          uint64_t v118 = *(void *)&v11[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)( (id *)(v115 + 8 * v117),  (id *)(v115 + 8LL * *(void *)&v11[16 * v14 + 16]),  (id *)(v115 + 8 * v118),  __dst);
          if (v2) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          }
          if (v116 >= *((void *)v11 + 2)) {
            goto LABEL_148;
          }
          uint64_t v119 = &v11[16 * v116 + 32];
          *(void *)uint64_t v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v11 + 2);
          if (v14 > v120) {
            goto LABEL_149;
          }
          memmove(&v11[16 * v14 + 16], &v11[16 * v14 + 32], 16 * (v120 - v14));
          *((void *)v11 + 2) = v120 - 1;
          unint64_t v14 = v120 - 1;
        }

        while (v120 > 2);
      }

LABEL_128:
      uint64_t v121 = swift_bridgeObjectRelease(v11);
      *(void *)((v136 & 0xFFFFFFFFFFFFF8LL) + 0x__swift_destroy_boxed_opaque_existential_0Tm(v0 + 10) = 0LL;
      specialized Array._endMutation()(v121);
      return swift_bridgeObjectRelease(v136);
    }
  }

  else
  {
    uint64_t v7 = v3;
    uint64_t v8 = v6 >> 1;
    uint64_t v9 = type metadata accessor for NearbyAdvertisement(0LL);
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x__swift_destroy_boxed_opaque_existential_0Tm(v0 + 10) = v8;
    uint64_t v3 = v7;
    __dst = (char *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v136 = v10;
  }

  Swift::Int v12 = 0LL;
  uint64_t v13 = *v3;
  uint64_t v124 = *v3 + 16;
  uint64_t v125 = *v3 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v130 = v4;
  uint64_t v135 = *v3;
  while (2)
  {
    Swift::Int v15 = v12++;
    if (v12 >= v4) {
      goto LABEL_45;
    }
    uint64_t v16 = v2;
    uint64_t v17 = *(void **)(v13 + 8 * v12);
    uint64_t v18 = *(void **)(v13 + 8 * v15);
    id v19 = v17;
    id v20 = v18;
    uint64_t v21 = NearbyAdvertisement.identifier.getter(v20);
    uint64_t v23 = v22;
    uint64_t v24 = NearbyAdvertisement.identifier.getter(v21);
    if (v24 == v21 && v25 == v23)
    {
      int v132 = 0;
      uint64_t v27 = v23;
    }

    else
    {
      uint64_t v27 = v25;
      int v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v21, v23, 1LL);
    }

    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v27);

    Swift::Int v12 = v15 + 2;
    Swift::Int v4 = v130;
    if (v15 + 2 >= v130) {
      goto LABEL_36;
    }
    Swift::Int v28 = v15;
    id v29 = v11;
    Swift::Int v128 = v28;
    uint64_t v30 = (id *)(v124 + 8 * v28);
    while (1)
    {
      unint64_t v33 = *(v30 - 1);
      id v34 = *v30;
      id v35 = v33;
      uint64_t v36 = NearbyAdvertisement.identifier.getter(v35);
      uint64_t v38 = v37;
      uint64_t v39 = NearbyAdvertisement.identifier.getter(v36);
      if (v39 == v36 && v40 == v38)
      {

        swift_bridgeObjectRelease_n(v38, 2LL);
        if ((v132 & 1) != 0)
        {
          uint64_t v2 = v16;
          uint64_t v11 = v29;
          Swift::Int v15 = v128;
          Swift::Int v4 = v130;
          uint64_t v13 = v135;
          goto LABEL_37;
        }

        goto LABEL_25;
      }

      uint64_t v31 = v40;
      int v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v36, v38, 1LL);

      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v31);
      if (((v132 ^ v32) & 1) != 0) {
        break;
      }
LABEL_25:
      ++v12;
      ++v30;
      Swift::Int v4 = v130;
      if (v130 == v12)
      {
        Swift::Int v12 = v130;
        uint64_t v11 = v29;
        goto LABEL_35;
      }
    }

    uint64_t v11 = v29;
    Swift::Int v4 = v130;
LABEL_35:
    Swift::Int v15 = v128;
LABEL_36:
    uint64_t v2 = v16;
    uint64_t v13 = v135;
    if ((v132 & 1) != 0)
    {
LABEL_37:
      if (v12 < v15) {
        goto LABEL_152;
      }
      if (v15 < v12)
      {
        uint64_t v42 = (uint64_t *)(v125 + 8 * v12);
        Swift::Int v43 = v12;
        Swift::Int v44 = v15;
        uint64_t v45 = (uint64_t *)(v13 + 8 * v15);
        do
        {
          if (v44 != --v43)
          {
            if (!v13) {
              goto LABEL_157;
            }
            uint64_t v46 = *v45;
            *uint64_t v45 = *v42;
            *uint64_t v42 = v46;
          }

          ++v44;
          --v42;
          ++v45;
        }

        while (v44 < v43);
      }
    }

LABEL_45:
    if (v12 >= v4) {
      goto LABEL_68;
    }
    if (__OFSUB__(v12, v15)) {
      goto LABEL_150;
    }
    if (v12 - v15 >= v126)
    {
LABEL_68:
      if (v12 < v15) {
        goto LABEL_145;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      }
      unint64_t v65 = *((void *)v11 + 2);
      unint64_t v64 = *((void *)v11 + 3);
      unint64_t v14 = v65 + 1;
      uint64_t v13 = v135;
      if (v65 >= v64 >> 1)
      {
        unint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v64 > 1),  v65 + 1,  1,  v11);
        uint64_t v13 = v135;
        uint64_t v11 = v114;
      }

      uint64_t v134 = v2;
      *((void *)v11 + 2) = v14;
      int v66 = v11 + 32;
      uint64_t v67 = &v11[16 * v65 + 32];
      *(void *)uint64_t v67 = v15;
      *((void *)v67 + 1) = v12;
      if (!v65)
      {
        unint64_t v14 = 1LL;
LABEL_14:
        Swift::Int v4 = v130;
        uint64_t v2 = v134;
        if (v12 >= v130) {
          goto LABEL_117;
        }
        continue;
      }

      while (1)
      {
        unint64_t v68 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v73 = &v66[16 * v14];
          uint64_t v74 = *((void *)v73 - 8);
          uint64_t v75 = *((void *)v73 - 7);
          BOOL v79 = __OFSUB__(v75, v74);
          uint64_t v76 = v75 - v74;
          if (v79) {
            goto LABEL_134;
          }
          uint64_t v78 = *((void *)v73 - 6);
          uint64_t v77 = *((void *)v73 - 5);
          BOOL v79 = __OFSUB__(v77, v78);
          uint64_t v71 = v77 - v78;
          char v72 = v79;
          if (v79) {
            goto LABEL_135;
          }
          unint64_t v80 = v14 - 2;
          id v81 = &v66[16 * v14 - 32];
          uint64_t v83 = *(void *)v81;
          uint64_t v82 = *((void *)v81 + 1);
          BOOL v79 = __OFSUB__(v82, v83);
          uint64_t v84 = v82 - v83;
          if (v79) {
            goto LABEL_137;
          }
          BOOL v79 = __OFADD__(v71, v84);
          uint64_t v85 = v71 + v84;
          if (v79) {
            goto LABEL_140;
          }
          if (v85 >= v76)
          {
            unint64_t v103 = &v66[16 * v68];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            BOOL v79 = __OFSUB__(v104, v105);
            uint64_t v106 = v104 - v105;
            if (v79) {
              goto LABEL_144;
            }
            BOOL v96 = v71 < v106;
            goto LABEL_105;
          }
        }

        else
        {
          if (v14 != 3)
          {
            uint64_t v97 = *((void *)v11 + 4);
            uint64_t v98 = *((void *)v11 + 5);
            BOOL v79 = __OFSUB__(v98, v97);
            uint64_t v90 = v98 - v97;
            char v91 = v79;
            goto LABEL_99;
          }

          uint64_t v70 = *((void *)v11 + 4);
          uint64_t v69 = *((void *)v11 + 5);
          BOOL v79 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          char v72 = v79;
        }

        if ((v72 & 1) != 0) {
          goto LABEL_136;
        }
        unint64_t v80 = v14 - 2;
        uint64_t v86 = &v66[16 * v14 - 32];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v89 = __OFSUB__(v87, v88);
        uint64_t v90 = v87 - v88;
        char v91 = v89;
        if (v89) {
          goto LABEL_139;
        }
        uint64_t v92 = &v66[16 * v68];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v79 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v79) {
          goto LABEL_142;
        }
        if (__OFADD__(v90, v95)) {
          goto LABEL_143;
        }
        if (v90 + v95 >= v71)
        {
          BOOL v96 = v71 < v95;
LABEL_105:
          if (v96) {
            unint64_t v68 = v80;
          }
          goto LABEL_107;
        }

LABEL_99:
        if ((v91 & 1) != 0) {
          goto LABEL_138;
        }
        uint64_t v99 = &v66[16 * v68];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v79 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v79) {
          goto LABEL_141;
        }
        if (v102 < v90) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v107 = v68 - 1;
        if (v68 - 1 >= v14)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        if (!v13) {
          goto LABEL_156;
        }
        os_log_type_t v108 = v11;
        unint64_t v109 = &v66[16 * v107];
        uint64_t v110 = *(void *)v109;
        uint64_t v111 = &v66[16 * v68];
        uint64_t v112 = *((void *)v111 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (id *)(v13 + 8LL * *(void *)v109),  (id *)(v13 + 8LL * *(void *)v111),  (id *)(v13 + 8 * v112),  __dst);
        if (v134)
        {
          uint64_t v11 = v108;
          goto LABEL_128;
        }

        if (v112 < v110) {
          goto LABEL_131;
        }
        if (v68 > *((void *)v108 + 2)) {
          goto LABEL_132;
        }
        *(void *)unint64_t v109 = v110;
        *(void *)&v66[16 * v107 + 8] = v112;
        unint64_t v113 = *((void *)v108 + 2);
        if (v68 >= v113) {
          goto LABEL_133;
        }
        uint64_t v11 = v108;
        unint64_t v14 = v113 - 1;
        memmove(&v66[16 * v68], v111 + 16, 16 * (v113 - 1 - v68));
        *((void *)v108 + 2) = v113 - 1;
        uint64_t v13 = v135;
        if (v113 <= 2) {
          goto LABEL_14;
        }
      }
    }

    break;
  }

  if (__OFADD__(v15, v126)) {
    goto LABEL_153;
  }
  if (v15 + v126 >= v4) {
    Swift::Int v47 = v4;
  }
  else {
    Swift::Int v47 = v15 + v126;
  }
  if (v47 >= v15)
  {
    if (v12 != v47)
    {
      Swift::Int v127 = v47;
      Swift::Int v129 = v15;
      unint64_t v122 = v11;
      uint64_t v133 = v2;
      uint64_t v48 = v125 + 8 * v12;
      do
      {
        uint64_t v49 = *(void **)(v13 + 8 * v12);
        Swift::Int v50 = v129;
        uint64_t v51 = v48;
        while (1)
        {
          uint64_t v52 = *(void **)v51;
          id v53 = v49;
          id v54 = v52;
          uint64_t v55 = NearbyAdvertisement.identifier.getter(v54);
          uint64_t v57 = v56;
          uint64_t v58 = NearbyAdvertisement.identifier.getter(v55);
          if (v58 == v55 && v59 == v57) {
            break;
          }
          uint64_t v61 = v59;
          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v55, v57, 1LL);

          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease(v61);
          if ((v62 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v13 = v135;
          if (!v135) {
            goto LABEL_155;
          }
          uint64_t v63 = *(void **)v51;
          uint64_t v49 = *(void **)(v51 + 8);
          *(void *)uint64_t v51 = v49;
          *(void *)(v51 + 8) = v63;
          v51 -= 8LL;
          if (v12 == ++v50) {
            goto LABEL_57;
          }
        }

        swift_bridgeObjectRelease_n(v57, 2LL);
LABEL_56:
        uint64_t v13 = v135;
LABEL_57:
        ++v12;
        v48 += 8LL;
      }

      while (v12 != v127);
      Swift::Int v12 = v127;
      uint64_t v2 = v133;
      uint64_t v11 = v122;
      Swift::Int v15 = v129;
    }

    goto LABEL_68;
  }

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v22 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = v22;
    uint64_t v23 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      uint64_t v12 = NearbyAdvertisement.identifier.getter();
      uint64_t v14 = v13;
      uint64_t v15 = NearbyAdvertisement.identifier.getter();
      if (v15 == v12 && v16 == v14)
      {

        Swift::Int result = swift_bridgeObjectRelease_n(v14, 2LL);
LABEL_5:
        ++v4;
        uint64_t v6 = v23 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_6;
      }

      uint64_t v18 = v16;
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v12, v14, 1LL);

      swift_bridgeObjectRelease(v14);
      Swift::Int result = swift_bridgeObjectRelease(v18);
      if ((v19 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      id v20 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v20;
      v6 -= 8LL;
      if (v4 == ++v8) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *a1, id *__src, id *a3, char *__dst)
{
  uint64_t v5 = a3;
  uint64_t v6 = __src;
  uint64_t v7 = (char *)__src - (char *)a1;
  uint64_t v8 = (char *)__src - (char *)a1 + 7;
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = (char *)a3 - (char *)__src;
  uint64_t v11 = (char *)a3 - (char *)__src + 7;
  uint64_t v12 = v11 >> 3;
  uint64_t v49 = a1;
  uint64_t v48 = (void **)__dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_54;
    }
    Swift::Int v43 = __dst;
    Swift::Int v28 = (id *)&__dst[8 * v12];
    Swift::Int v47 = (char *)v28;
    uint64_t v49 = v6;
    if (a1 >= v6 || v10 < 8)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v49, (const void **)&v48, &v47);
      return 1LL;
    }

    id v29 = v6;
    while (1)
    {
      uint64_t v46 = v5;
      uint64_t v30 = *--v29;
      id v31 = *(v28 - 1);
      id v32 = v30;
      uint64_t v33 = NearbyAdvertisement.identifier.getter(v32);
      uint64_t v35 = v34;
      uint64_t v36 = NearbyAdvertisement.identifier.getter(v33);
      if (v36 == v33 && v37 == v35) {
        break;
      }
      uint64_t v39 = v37;
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v33, v35, 1LL);

      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v39);
      uint64_t v41 = (char *)v46;
      uint64_t v5 = v46 - 1;
      if ((v40 & 1) == 0) {
        goto LABEL_46;
      }
      if (v46 != v6 || v5 >= v6) {
        *uint64_t v5 = *v29;
      }
      uint64_t v49 = v29;
LABEL_51:
      if (v29 > a1)
      {
        uint64_t v6 = v29;
        if (v28 > (id *)v43) {
          continue;
        }
      }

      goto LABEL_53;
    }

    swift_bridgeObjectRelease_n(v35, 2LL);
    uint64_t v41 = (char *)v46;
    uint64_t v5 = v46 - 1;
LABEL_46:
    Swift::Int v47 = (char *)(v28 - 1);
    id v29 = v6;
    --v28;
    goto LABEL_51;
  }

  if (v7 >= -7)
  {
    uint64_t v45 = (void **)&__dst[8 * v9];
    Swift::Int v47 = (char *)v45;
    if (v6 < v5 && v7 >= 8)
    {
      uint64_t v13 = (void **)__dst;
      uint64_t v14 = a1;
      while (1)
      {
        uint64_t v15 = v5;
        uint64_t v16 = *v13;
        id v17 = *v6;
        id v18 = v16;
        uint64_t v19 = NearbyAdvertisement.identifier.getter(v18);
        uint64_t v21 = v20;
        uint64_t v22 = NearbyAdvertisement.identifier.getter(v19);
        if (v22 == v19 && v23 == v21) {
          break;
        }
        uint64_t v25 = v23;
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v19, v21, 1LL);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v25);
        if ((v26 & 1) == 0) {
          goto LABEL_23;
        }
        uint64_t v27 = v6 + 1;
        uint64_t v5 = v15;
        if (v14 < v6 || v14 >= v27 || v14 != v6) {
          *uint64_t v14 = *v6;
        }
LABEL_26:
        ++v14;
        if (v13 < v45)
        {
          uint64_t v6 = v27;
          if (v27 < v5) {
            continue;
          }
        }

        uint64_t v49 = v14;
        goto LABEL_53;
      }

      swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_23:
      uint64_t v5 = v15;
      if (v14 != v13) {
        *uint64_t v14 = *v13;
      }
      uint64_t v48 = ++v13;
      uint64_t v27 = v6;
      goto LABEL_26;
    }

    goto LABEL_53;
  }

LABEL_54:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)( void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

id specialized NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char *a6)
{
  v27[3] = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSService,  &OBJC_CLASS___IDSService_ptr);
  v27[4] = &protocol witness table for IDSService;
  v27[0] = a2;
  uint64_t v12 = &a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_delegate];
  *((void *)v12 + 1) = 0LL;
  uint64_t v13 = swift_unknownObjectWeakInit(v12, 0LL);
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_requesterCredentialsByOwnerPseudonym] = &_swiftEmptyDictionarySingleton;
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController____lazy_storage___contactStore] = 0LL;
  swift_beginAccess(v13, v26, 1LL, 0LL);
  *((void *)v12 + 1) = a4;
  swift_unknownObjectWeakAssign(v12, a3);
  outlined init with copy of PseudonymProtocol( (uint64_t)v27,  (uint64_t)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_service]);
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_queue] = a1;
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_joinRequestsController] = a5;
  v25.receiver = a6;
  v25.super_class = (Class)type metadata accessor for NearbyIDSServiceController();
  id v14 = a1;
  id v15 = a5;
  id v16 = objc_msgSendSuper2(&v25, "init");
  id v17 = objc_allocWithZone(&OBJC_CLASS___IDSServiceDelegateProperties);
  id v18 = v16;
  id v19 = objc_msgSend(v17, "init", v25.receiver, v25.super_class);
  [v19 setWantsCrossAccountMessaging:1];
  uint64_t v20 = (void *)v27[0];
  id v21 = v14;
  id v22 = v18;
  id v23 = v19;
  [v20 addDelegate:v22 withDelegateProperties:v23 queue:v21];

  swift_unknownObjectRelease(a3);
  __swift_destroy_boxed_opaque_existential_0Tm(v27);
  return v22;
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.init()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000D6D34);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.init()(a1, v4, v5, v6);
}

uint64_t sub_100074F14()
{
  return objectdestroy_5Tm(72LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1000D6D44);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100074FB0()
{
  return objectdestroy_5Tm(64LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1000D6D54);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100075044()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000750A4()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(void))(v0 + 32));
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1000D6D64);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(void *)(v3 + 144) = v2;
  *(_OWORD *)(v3 + 128) = v4;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:),  0LL,  0LL);
}

uint64_t sub_100075150()
{
  return objectdestroy_5Tm(64LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)()
{
  uint64_t v2 = swift_task_alloc(dword_1000D6D74);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:),  0LL,  0LL);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type [NearbyAdvertisement] and conformance [A],  &demangling cache variable for type metadata for [NearbyAdvertisement],  (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NearbyAdvertisement]);
          uint64_t v13 = specialized protocol witness for Collection.subscript.read in conformance [A](v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void (*specialized protocol witness for Collection.subscript.read in conformance [A]( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery;
}

void (*specialized Array.subscript.read( void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  __int128 v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)__int128 v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 168LL))(result);
    (*(void (**)(uint64_t))(*(void *)v4 + 176LL))(v5);
    return swift_release(v4);
  }

  return result;
}

uint64_t specialized BluetoothScanner.init(discoveryEngine:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
  CurrentSubject.init(wrappedValue:)(&v36, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13, v12, v8);
  *(void *)(a2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = a1;
  *(void *)(a2 + 24) = &protocol witness table for CBDiscovery;
  id v15 = a1;
  [v15 setBleScanRate:20];
  uint64_t v16 = swift_allocObject(&unk_1000CCA58, 32LL, 7LL);
  *(void *)(v16 + 24) = &protocol witness table for CBDiscovery;
  swift_unknownObjectWeakInit(v16 + 16, v15);
  uint64_t v17 = type metadata accessor for AssertionManager();
  id v18 = (void *)swift_allocObject(v17, 48LL, 7LL);
  uint64_t v19 = type metadata accessor for Lock(0LL);
  uint64_t v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  void v18[4] = Lock.init()(v20);
  v18[5] = 0LL;
  uint64_t v18[2] = partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:);
  v18[3] = v16;
  *(void *)(a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion) = v18;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType(v21);
  uint64_t v24 = swift_allocObject(&unk_1000CCA80, 24LL, 7LL);
  swift_weakInit(v24 + 16);
  objc_super v25 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v22 + 96);
  swift_unknownObjectRetain(v21);
  swift_retain();
  v25(partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:), v24, ObjectType, v22);
  swift_unknownObjectRelease(v21);
  swift_release(v24);
  uint64_t v26 = *(void *)(a2 + 16);
  uint64_t v27 = *(void *)(a2 + 24);
  uint64_t v28 = swift_getObjectType(v26);
  uint64_t v29 = swift_allocObject(&unk_1000CCA80, 24LL, 7LL);
  swift_weakInit(v29 + 16);
  uint64_t v30 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v27 + 72);
  swift_unknownObjectRetain(v26);
  swift_retain();
  v30(partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:), v29, v28, v27);
  swift_unknownObjectRelease(v26);
  swift_release(v29);
  uint64_t v31 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v7, 1LL, 1LL, v31);
  id v32 = (void *)swift_allocObject(&unk_1000CCAA8, 40LL, 7LL);
  void v32[2] = 0LL;
  v32[3] = 0LL;
  v32[4] = a2;
  swift_retain();
  uint64_t v33 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5( (uint64_t)v7,  (uint64_t)&async function pointer to partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:),  (uint64_t)v32);
  swift_release(v33);

  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

void specialized NearbyInvitationsProviderDataSource.receivedMessage(content:message:)( uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequestData?);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for InvitationRequestData(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  outlined copy of Data?(a1, a2);
  uint64_t v16 = outlined copy of Data?(a1, a2);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  unint64_t v19 = a2 >> 60;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v41 = v3;
    uint64_t v43 = v11;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    unint64_t v40 = a2 >> 60;
    uint64_t v42 = v14;
    if (a2 >> 60 == 15)
    {
      unint64_t v22 = 0xE300000000000000LL;
      uint64_t v23 = 7104878LL;
    }

    else
    {
      uint64_t v44 = a1;
      unint64_t v45 = a2;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v23 = String.init<A>(reflecting:)(&v44, &type metadata for Data);
      unint64_t v22 = v24;
    }

    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v22);
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "NearbyInvitationsProviderDataSource is getting data from delegate %s",  v20,  0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    uint64_t v14 = v42;
    uint64_t v11 = v43;
    unint64_t v19 = v40;
    uint64_t v3 = v41;
  }

  else
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
  }

  uint64_t v25 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  uint64_t v26 = JSONDecoder.init()();
  if (v19 > 0xE)
  {
    __break(1u);
  }

  else
  {
    uint64_t v27 = v26;
    uint64_t v28 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData,  (uint64_t (*)(uint64_t))&type metadata accessor for InvitationRequestData,  (uint64_t)&protocol conformance descriptor for InvitationRequestData);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, a1, a2, v10, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    type metadata accessor for InvitationJoinResponse(0LL);
    uint64_t v29 = InvitationRequestData.id.getter();
    uint64_t v30 = v14;
    uint64_t v32 = v31;
    uint64_t v33 = (void *)static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)( v29,  v31,  _swiftEmptyArrayStorage,  a1,  a2);
    uint64_t v34 = swift_bridgeObjectRelease(v32);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 208LL))(v34);
    uint64_t v37 = v35;
    if (v35)
    {
      uint64_t v38 = v36;
      uint64_t ObjectType = swift_getObjectType(v35);
      (*(void (**)(void *, uint64_t, uint64_t))(v38 + 56))(v33, ObjectType, v38);

      swift_unknownObjectRelease(v37);
      swift_release(v27);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
      swift_release(v27);
    }
  }

void specialized NearbyInvitationsProviderDataSource.scannerError(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v9 = v8(v6, a1, v2);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138412290;
    unint64_t v19 = v12 + 4;
    uint64_t v14 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NWError and conformance NWError,  (uint64_t (*)(uint64_t))&type metadata accessor for NWError,  (uint64_t)&protocol conformance descriptor for NWError);
    uint64_t v15 = swift_allocError(v2, v14, 0LL, 0LL);
    v8(v16, (uint64_t)v6, v2);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v15);
    uint64_t v20 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v19, v12 + 12);
    *uint64_t v13 = v17;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "NearbyInvitationsProviderDataSource received error from browser connection %@",  v12,  0xCu);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v13, 1LL, v18);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t specialized NearbyInvitationsProviderDataSource.receivedApprovalMessage(content:message:)( uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequestData?);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for InvitationRequestData(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "NearbyInvitationsProviderDataSource received approval message",  v19,  2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  uint64_t v20 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t result = JSONDecoder.init()();
  if (a2 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v22 = result;
    uint64_t v23 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData,  (uint64_t (*)(uint64_t))&type metadata accessor for InvitationRequestData,  (uint64_t)&protocol conformance descriptor for InvitationRequestData);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, a1, a2, v10, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
    uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 208LL))(v24);
    if (!v25)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      return swift_release(v22);
    }

    uint64_t v27 = v25;
    uint64_t v28 = v26;
    v35[0] = InvitationRequestData.id.getter();
    uint64_t v30 = v29;
    uint64_t result = InvitationRequestData.invitationData.getter();
    if (v31 >> 60 != 15)
    {
      uint64_t v32 = result;
      unint64_t v33 = v31;
      uint64_t ObjectType = swift_getObjectType(v27);
      (*(void (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 48))( v35[0],  v30,  v32,  v33,  ObjectType,  v28);
      swift_release(v22);
      outlined consume of Data?(v32, v33);
      swift_unknownObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }

  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0K6DeviceVyAF0H13RangingFilterC_GG_7Combine14AnyCancellableCs5NeverOTg508_s44com_e1_fg1_hi9Service24klm49C7scanner6configACyxGAA0iJ0C_6ConfigQztcfcySayAH6n16VGcfU_7Combine14rs24CAC0hN0Vyx_GXEfU1_AA0E13oP5C_TG5AHyALGTf1cn_nTf4ng_n( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v15 = type metadata accessor for NearbyRangingFilter();
    uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter,  (uint64_t (*)(uint64_t))type metadata accessor for NearbyRangingFilter,  (uint64_t)&protocol conformance descriptor for NearbyRangingFilter);
    uint64_t v5 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain(v6);
      swift_retain();
      dispatch thunk of ObservableObject.objectWillChange.getter(&v16, v15, v4);
      uint64_t v8 = swift_allocObject(&unk_1000CCA08, 24LL, 7LL);
      swift_weakInit(v8 + 16);
      uint64_t v9 = type metadata accessor for ObservableObjectPublisher(0LL);
      swift_retain();
      uint64_t v10 = Publisher<>.sink(receiveValue:)( partial apply for specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:),  v8,  v9,  &protocol witness table for ObservableObjectPublisher);
      swift_release(v8);
      uint64_t v11 = v16;
      swift_release(v7);
      swift_bridgeObjectRelease(v6);
      swift_release(v8);
      uint64_t v12 = swift_release(v11);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      uint64_t v13 = v17[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized ContiguousArray._endMutation()(v14);
      v5 += 3;
      --v2;
    }

    while (v2);
    return v17;
  }

  return result;
}

void *specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)( void *a1, uint64_t a2, void *a3)
{
  id v52 = a1;
  uint64_t v53 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v46 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v15, v16);
  os_log_type_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v45);
  *(void *)&v54[0] = _swiftEmptyArrayStorage;
  uint64_t v23 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v25 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v54, v24, v25, v15, v23);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v14,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v10);
  a3[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000025LL,  0x80000001000AF330LL,  v22,  v18,  v14,  0LL);
  a3[4] = _swiftEmptyArrayStorage;
  uint64_t v26 = (char *)a3
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  *(void *)&v54[0] = _swiftEmptyArrayStorage;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v28 = v46;
  Published.init(initialValue:)(v54, v27);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v26, v28, v48);
  uint64_t v29 = (char *)a3
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  v54[0] = xmmword_1000AAEA0;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  unint64_t v31 = v49;
  Published.init(initialValue:)(v54, v30);
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v29, v31, v51);
  uint64_t v32 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests;
  *(void *)((char *)a3 + v32) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v33 = (char *)a3 + (unint64_t)listener.reserved0;
  *((void *)v33 + 1) = 0LL;
  swift_unknownObjectWeakInit(v33, 0LL);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v34, (uint64_t)static Log.client);
  id v35 = v52;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v38 = 138412290;
    *(void *)&v54[0] = v35;
    id v40 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, (char *)v54 + 8, v38 + 4, v38 + 12);
    *uint64_t v39 = v35;

    _os_log_impl((void *)&_mh_execute_header, v36, v37, "NearbyInvitationsAdvertiser init %@", v38, 0xCu);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v39, 1LL, v41);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {

    uint64_t v36 = (os_log_s *)v35;
  }

  a3[3] = v35;
  uint64_t v42 = (char *)a3 + (unint64_t)listener.reserved0;
  swift_beginAccess((char *)a3 + (unint64_t)listener.reserved0, v54, 1LL, 0LL);
  *((void *)v42 + 1) = &protocol witness table for NearbyInvitationsProviderDataSource;
  swift_unknownObjectWeakAssign(v42, v53);
  return a3;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationsProviderDataSource.Errors,  &type metadata for NearbyInvitationsProviderDataSource.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyInvitationsProviderDataSource.Errors,  &type metadata for NearbyInvitationsProviderDataSource.Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors);
  }

  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1000D6D8C);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v4;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:),  0LL,  0LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc(dword_1000D6D9C);
  __int128 v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:),  0LL,  0LL);
}

uint64_t objectdestroy_22Tm()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_1000D6DAC);
  __int128 v4 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v3 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v4;
  uint64_t v5 = *(int **)(*(void *)v2 + 328LL);
  __int128 v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  uint64_t v6 = (uint64_t *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 32) = v6;
  uint64_t *v6 = v3;
  v6[1] = (uint64_t)closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:);
  return v8();
}

uint64_t sub_1000769B0()
{
  return objectdestroy_5Tm(64LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)()
{
  uint64_t v2 = swift_task_alloc(dword_1000D6DBC);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:), 0LL, 0LL);
}

uint64_t sub_100076A1C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void *)((char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc(dword_1000D6DCC);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)( a1,  v7,  v8,  v9,  v11,  v10,  v13,  v14);
}

uint64_t sub_100076B8C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = (v7 + v5 + v6) & ~v5;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = (void *)((char *)v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (void *)swift_task_alloc(dword_1000D6DDC);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)( a1,  v9,  v10,  v11,  v12,  v13,  v15,  v16);
}

uint64_t sub_100076D10()
{
  return objectdestroy_5Tm(64LL);
}

uint64_t objectdestroy_5Tm(uint64_t a1)
{
  swift_release(*(void *)(v1 + 56));
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)()
{
  uint64_t v2 = swift_task_alloc(dword_1000D6DEC);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:), 0LL, 0LL);
}

uint64_t sub_100076DC4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1000D6DFC);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v5,  v6,  v7,  v8);
}

uint64_t objectdestroy_34Tm()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc(dword_1000D6E0C);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v6,  v7,  v8,  v9,  v11,  v12);
}

uint64_t sub_100077030()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void *)((char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc(dword_1000D6E1C);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)( a1,  v7,  v8,  v9,  v11,  v10,  v13,  v14);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:));
}

uint64_t objectdestroy_70Tm()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t sub_100077204()
{
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void partial apply for closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)()
{
}

uint64_t sub_100077244()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t sub_100077278()
{
  return objectdestroy_94Tm((void (*)(void))&_swift_bridgeObjectRelease, 32LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

void *specialized FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v7 = a2 & 1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice]>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v4[2] = &_swiftEmptySetSingleton;
  void v4[3] = &_swiftEmptySetSingleton;
  uint64_t v13 = (char *)v4 + *(void *)(*v4 + 112LL);
  v23[0] = _swiftEmptyArrayStorage;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice]);
  CurrentSubject.init(wrappedValue:)(v23, v14);
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v13, v12, v8);
  v23[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(v15);
  uint64_t v16 = swift_allocObject(&unk_1000CCA08, 24LL, 7LL);
  swift_weakInit(v16 + 16);
  uint64_t v17 = swift_allocObject(&unk_1000CCA30, 48LL, 7LL);
  *(void *)(v17 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v16;
  *(void *)(v17 + 24) = a1;
  *(_BYTE *)(v17 + 32) = v7;
  *(void *)(v17 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = a3;
  swift_retain();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
  uint64_t v19 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v20 = Publisher<>.sink(receiveValue:)( partial apply for specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:),  v17,  v18,  v19);
  swift_release(v17);
  swift_release(v23[0]);
  swift_beginAccess(v4 + 2, v23, 33LL, 0LL);
  AnyCancellable.store(in:)(v4 + 2);
  swift_endAccess(v23);
  swift_release(v20);
  return v4;
}

void *specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)( uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v46 = a2;
  uint64_t v47 = a3;
  uint64_t v48 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = (uint8_t *)v5;
  __chkstk_darwin(v5, v6);
  uint64_t v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v42);
  v50[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v23 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v50, v22, v23, v13, v21);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v8);
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x80000001000AF360LL,  v20,  v16,  v12,  0LL);
  id v24 = a4 + 4;
  a4[5] = 0LL;
  swift_unknownObjectWeakInit(a4 + 4, 0LL);
  a4[6] = 0LL;
  uint64_t v25 = (char *)a4
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v50[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v27 = v43;
  Published.init(initialValue:)(v50, v26);
  (*(void (**)(char *, char *, uint8_t *))(v44 + 32))(v25, v27, v45);
  if (one-time initialization token for client != -1) {
    swift_once(&one-time initialization token for client, one-time initialization function for client);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v28, (uint64_t)static Log.client);
  id v29 = v46;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v33;
    id v46 = a4 + 4;
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v45 = v32 + 4;
    id v34 = [v29 debugDescription];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    unint64_t v37 = v36;

    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v50);
    id v24 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v45, v32 + 12);
    swift_bridgeObjectRelease(v37);

    _os_log_impl((void *)&_mh_execute_header, v30, v31, "NearbyInvitationScanner init with parameters %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
  }

  a4[3] = v29;
  swift_beginAccess(v24, v50, 1LL, 0LL);
  a4[5] = &protocol witness table for NearbyInvitationsProviderDataSource;
  swift_unknownObjectWeakAssign(v24, v47);
  uint64_t v38 = (char *)a4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v39 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32LL))(v38, v48, v39);
  return a4;
}

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()(v4);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v35 = *a1;
  uint64_t v36 = v8;
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionRequest(0LL);
  uint64_t v11 = (uint64_t *)((char *)a1 + *(int *)(v10 + 28));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  uint64_t v14 = (uint64_t *)((char *)a1 + *(int *)(v10 + 32));
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v16 >> 60 == 15) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = *v14;
  }
  uint64_t v34 = v17;
  if (v16 >> 60 == 15) {
    unint64_t v18 = 0xC000000000000000LL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v13) {
    uint64_t v19 = v12;
  }
  else {
    uint64_t v19 = 0LL;
  }
  if (v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = 0xE000000000000000LL;
  }
  objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement(0LL));
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v13);
  outlined copy of Data?(v15, v16);
  uint64_t v21 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)( v6,  v35,  v7,  1LL,  0LL,  0xE000000000000000LL,  v36,  v9,  v19,  v20,  v34,  v18,  0LL,  1,  0LL,  0LL,  0LL,  0LL);
  if (one-time initialization token for default != -1) {
    swift_once(&one-time initialization token for default, one-time initialization function for default);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Log.default);
  id v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Marking all generated pseudonyms as used due to incoming connection request",  v26,  2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = v37;
  uint64_t v28 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v37 + 48)) + 0xC8LL))();
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 208LL))(v28);
  uint64_t v31 = v29;
  if (v29)
  {
    uint64_t v32 = v30;
    uint64_t ObjectType = swift_getObjectType(v29);
    (*(void (**)(void *, uint64_t, uint64_t))(v32 + 16))(v21, ObjectType, v32);

    swift_unknownObjectRelease(v31);
  }

  else
  {
  }

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v87 = a6;
  unint64_t v88 = a7;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10, v11);
  uint64_t v92 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0LL);
  __chkstk_darwin(v13, v14);
  unint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v79 - v28;
  UUID.init(uuidString:)(*a1);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21);
  uint64_t v91 = a2;
  if (v30 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v20, v21);
    NSString v46 = String._bridgeToObjectiveC()();
    uint64_t v47 = (void *)IDSCopyAddressDestinationForDestination();

    uint64_t v48 = (void *)IDSCopyRawAddressForDestination(v47);
    if (!v48) {
      goto LABEL_28;
    }
    uint64_t v86 = v26;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v51 = v50;

    uint64_t v81 = v49;
    if (String.count.getter(v49, v51) <= 0)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
      swift_bridgeObjectRelease(v51);
      return;
    }

    uint64_t v85 = v51;
    int v52 = *((unsigned __int8 *)a1 + v13[8]);
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  (uint64_t)v16,  type metadata accessor for NearbyProtoJoinRequest.Content);
    if (v52 == 2)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoJoinRequest.Content);
      uint64_t v53 = v86;
LABEL_17:
      swift_bridgeObjectRetain(a3);
      uint64_t v80 = v91;
      unint64_t v83 = a3;
      goto LABEL_18;
    }

    int v60 = v16[v13[8]];
    uint64_t v53 = v86;
    if (v60 == 2)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoJoinRequest.Content);
    }

    else
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoJoinRequest.Content);
      if ((v60 & 1) != 0) {
        goto LABEL_17;
      }
    }

    uint64_t v80 = 0LL;
    unint64_t v83 = 0LL;
LABEL_18:
    uint64_t v61 = v93;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v53, v29, v21);
    char v62 = (void *)((char *)a1 + v13[6]);
    unint64_t v63 = v62[1];
    if (v63)
    {
      uint64_t v79 = *v62;
      unint64_t v82 = v63;
    }

    else
    {
      uint64_t v79 = 0LL;
      unint64_t v82 = 0xE000000000000000LL;
    }

    unint64_t v64 = (void *)((char *)a1 + v13[7]);
    uint64_t v66 = *v64;
    unint64_t v65 = v64[1];
    if (v65 >> 60 == 15) {
      uint64_t v67 = 0LL;
    }
    else {
      uint64_t v67 = *v64;
    }
    uint64_t v86 = (char *)v67;
    unint64_t v68 = 0xC000000000000000LL;
    if (v65 >> 60 != 15) {
      unint64_t v68 = v65;
    }
    unint64_t v84 = v68;
    uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v61[6]) + 0xD8LL);
    swift_bridgeObjectRetain(v63);
    outlined copy of Data?(v66, v65);
    uint64_t v70 = v69(v89, v90);
    objc_allocWithZone((Class)type metadata accessor for IncomingInvitationJoinRequest(0LL));
    uint64_t v72 = v87;
    unint64_t v71 = v88;
    outlined copy of Data._Representation(v87, v88);
    uint64_t v73 = (void *)IncomingInvitationJoinRequest.init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)( v53,  v81,  v85,  v80,  v83,  v72,  v71,  v79,  v82,  v86,  v84,  v70);
    uint64_t v74 = ((uint64_t (*)(void))(*v61)[26])();
    uint64_t v76 = v74;
    if (!v74)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);

      return;
    }

    uint64_t v77 = v75;
    uint64_t ObjectType = swift_getObjectType(v74);
    (*(void (**)(void *, uint64_t, uint64_t))(v77 + 24))(v73, ObjectType, v77);
    swift_unknownObjectRelease(v76);

LABEL_28:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
    return;
  }

  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
  unint64_t v31 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  uint64_t v32 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v31, 0LL, 0LL);
  *uint64_t v33 = 0;
  swift_willThrow(v32);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v34, (uint64_t)static Log.host);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(v32);
  swift_bridgeObjectRetain(a3);
  uint64_t v35 = swift_errorRetain(v32);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v39 = static os_log_type_t.error.getter(v36, v37, v38);
  if (os_log_type_enabled(v36, v39))
  {
    uint64_t v40 = swift_slowAlloc(22LL, -1LL);
    uint64_t v41 = swift_slowAlloc(64LL, -1LL);
    v95[0] = v41;
    *(_DWORD *)uint64_t v40 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, a3, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v94 = v32;
    swift_errorRetain(v32);
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v43 = String.init<A>(reflecting:)(&v94, v42);
    unint64_t v45 = v44;
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease(v45);
    swift_errorRelease(v32);
    swift_errorRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v39,  "Dropping joinRequest from: %s, reason: %s",  (uint8_t *)v40,  0x16u);
    swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_errorRelease(v32);
    swift_errorRelease(v32);
  }

  uint64_t v55 = (uint64_t)v92;
  id v54 = v93;
  static TaskPriority.background.getter(v56);
  uint64_t v57 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v55, 0LL, 1LL, v57);
  uint64_t v58 = (void *)swift_allocObject(&unk_1000CC918, 48LL, 7LL);
  v58[2] = 0LL;
  v58[3] = 0LL;
  v58[4] = v54;
  v58[5] = v32;
  swift_errorRetain(v32);
  swift_retain();
  uint64_t v59 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5( v55,  (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:),  (uint64_t)v58);
  swift_release(v59);
  swift_errorRelease(v32);
  outlined destroy of Any?(v55, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)( uint64_t *a1)
{
  uint64_t v173 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0LL);
  uint64_t v3 = __chkstk_darwin(v173, v2);
  uint64_t v169 = (uint64_t *)((char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3, v5);
  uint64_t v168 = (uint64_t *)((char *)&v165 - v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v171 = (uint64_t)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v170 = (uint64_t)&v165 - v13;
  __chkstk_darwin(v12, v14);
  unint64_t v16 = (char *)&v165 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v167 = (uint64_t)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v175 = (uint64_t)&v165 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v166 = (uint64_t)&v165 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v174 = (uint64_t)&v165 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = (char *)&v165 - v32;
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (char *)&v165 - v35;
  uint64_t v37 = type metadata accessor for NearbyProtoConnectionResponse.Content(0LL);
  uint64_t v184 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37, v38);
  uint64_t v172 = (uint64_t)&v165 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v180 = (uint64_t)&v165 - v43;
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v47 = (char *)&v165 - v46;
  uint64_t v49 = __chkstk_darwin(v45, v48);
  uint64_t v177 = (uint64_t)&v165 - v50;
  uint64_t v52 = __chkstk_darwin(v49, v51);
  uint64_t v178 = (uint64_t)&v165 - v53;
  __chkstk_darwin(v52, v54);
  uint64_t v56 = (char *)&v165 - v55;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v179 = v47;
  uint64_t v57 = type metadata accessor for Logger(0LL);
  uint64_t v58 = __swift_project_value_buffer(v57, (uint64_t)static Log.host);
  uint64_t v59 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  (uint64_t)v56,  type metadata accessor for NearbyProtoConnectionResponse.Content);
  int v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v165 = v58;
    uint64_t v183 = a1;
    id v176 = v16;
    char v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v63 = swift_slowAlloc(32LL, -1LL);
    v185[0] = v63;
    *(_DWORD *)char v62 = 136315138;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v56,  (uint64_t)v36,  type metadata accessor for NearbyProtoConnectionResponse.Content);
    uint64_t v64 = v184;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v184 + 56))(v36, 0LL, 1LL, v37);
    outlined init with copy of (String, Any)( (uint64_t)v36,  (uint64_t)v33,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
    int v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v33, 1LL, v37);
    uint64_t v181 = v37;
    if (v65 == 1)
    {
      uint64_t v66 = 7104878LL;
      unint64_t v67 = 0xE300000000000000LL;
    }

    else
    {
      uint64_t v68 = v178;
      outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v33,  v178,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v69 = v177;
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v68,  v177,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v66 = String.init<A>(reflecting:)(v69, v37);
      unint64_t v67 = v70;
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v68,  type metadata accessor for NearbyProtoConnectionResponse.Content);
    }

    outlined destroy of Any?( (uint64_t)v36,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v67);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v56,  type metadata accessor for NearbyProtoConnectionResponse.Content);
    _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "NearbyInvitationsProviderDataSource got didReceiveConnection response: %s",  v62,  0xCu);
    swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);

    unint64_t v16 = v176;
    a1 = v183;
    uint64_t v37 = v181;
  }

  else
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v56,  type metadata accessor for NearbyProtoConnectionResponse.Content);
  }

  uint64_t v71 = (uint64_t)a1 + *(int *)(v37 + 24);
  outlined init with copy of (String, Any)( v71,  (uint64_t)v16,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v72 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0LL);
  uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 48LL);
  uint64_t result = v73(v16, 1LL, v72);
  if ((_DWORD)result != 1)
  {
    if (swift_getEnumCaseMultiPayload(v16, v72) != 1)
    {
      uint64_t v181 = v37;
      uint64_t v88 = v180;
      uint64_t v89 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  v180,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v91 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v183 = a1;
        uint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v93 = swift_slowAlloc(32LL, -1LL);
        v185[0] = v93;
        *(_DWORD *)uint64_t v92 = 136315138;
        uint64_t v94 = v175;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v88,  v175,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v95 = v184;
        uint64_t v96 = v181;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v184 + 56))(v94, 0LL, 1LL, v181);
        uint64_t v97 = v94;
        uint64_t v98 = v167;
        outlined init with copy of (String, Any)( v97,  v167,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v98, 1LL, v96) == 1)
        {
          uint64_t v99 = 7104878LL;
          unint64_t v100 = 0xE300000000000000LL;
        }

        else
        {
          uint64_t v118 = v178;
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v98,  v178,  type metadata accessor for NearbyProtoConnectionResponse.Content);
          uint64_t v119 = v177;
          outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v118,  v177,  type metadata accessor for NearbyProtoConnectionResponse.Content);
          uint64_t v99 = String.init<A>(reflecting:)(v119, v96);
          unint64_t v100 = v120;
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v118,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        }

        uint64_t v101 = v182;
        outlined destroy of Any?( v175,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v185);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v92 + 4, v92 + 12);
        swift_bridgeObjectRelease(v100);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v180,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "NearbyInvitationsProviderDataSource: Connection response got denied %s",  v92,  0xCu);
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1LL, -1LL);
        swift_slowDealloc(v92, -1LL, -1LL);

        a1 = v183;
      }

      else
      {
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v88,  type metadata accessor for NearbyProtoConnectionResponse.Content);

        uint64_t v101 = v182;
      }

      uint64_t v121 = *a1;
      uint64_t v122 = a1[1];
      uint64_t v123 = *(uint64_t (**)(__n128))(*(void *)v101 + 328LL);
      __n128 v124 = swift_bridgeObjectRetain(v122);
      uint64_t v125 = v123(v124);
      if (*(void *)(v125 + 16)
        && (unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v122), (v127 & 1) != 0))
      {
        uint64_t v128 = *(void *)(*(void *)(v125 + 56) + 8 * v126);
        swift_retain();
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v122);
        unint64_t v129 = lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
        uint64_t v130 = swift_allocError(&type metadata for NearbyInvitationsProviderDataSource.Errors, v129, 0LL, 0LL);
        *id v131 = 1;
        v185[0] = v130;
        PassthroughSubject.send(completion:)(v185);
        swift_errorRelease(v130);
        uint64_t v132 = *a1;
        uint64_t v133 = a1[1];
        uint64_t v134 = *(uint64_t (**)(uint64_t *, __n128))(*(void *)v101 + 344LL);
        __n128 v135 = swift_bridgeObjectRetain(v133);
        uint64_t v136 = (void (*)(uint64_t *, void))v134(v185, v135);
        uint64_t v137 = specialized Dictionary._Variant.removeValue(forKey:)(v132, v133);
        swift_bridgeObjectRelease(v133);
        swift_release(v137);
        v136(v185, 0LL);
        swift_release(v128);
      }

      else
      {
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v122);
        uint64_t v138 = v172;
        uint64_t v139 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  v172,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v140 = (os_log_s *)Logger.logObject.getter(v139);
        os_log_type_t v141 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v140, v141))
        {
          uint64_t v142 = v138;
          uint64_t v143 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v144 = swift_slowAlloc(32LL, -1LL);
          v185[0] = v144;
          *(_DWORD *)uint64_t v143 = 136315138;
          uint64_t v145 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content,  type metadata accessor for NearbyProtoConnectionResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoConnectionResponse.Content);
          uint64_t v146 = Message.debugDescription.getter(v181, v145);
          unint64_t v148 = v147;
          uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v147, v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v143 + 4, v143 + 12);
          swift_bridgeObjectRelease(v148);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v142,  type metadata accessor for NearbyProtoConnectionResponse.Content);
          _os_log_impl( (void *)&_mh_execute_header,  v140,  v141,  "NearbyInvitationsProviderDataSource Could not find a request in flight for %s",  v143,  0xCu);
          swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1LL, -1LL);
          swift_slowDealloc(v143, -1LL, -1LL);
        }

        else
        {
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v138,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        }
      }

      return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }

    uint64_t v75 = (uint64_t)v179;
    uint64_t v76 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  (uint64_t)v179,  type metadata accessor for NearbyProtoConnectionResponse.Content);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v183 = a1;
      id v176 = v16;
      uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v80 = swift_slowAlloc(32LL, -1LL);
      v185[0] = v80;
      *(_DWORD *)uint64_t v79 = 136315138;
      uint64_t v81 = v75;
      uint64_t v82 = v174;
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v81,  v174,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v83 = v184;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v184 + 56))(v82, 0LL, 1LL, v37);
      uint64_t v84 = v82;
      uint64_t v85 = v166;
      outlined init with copy of (String, Any)( v84,  v166,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v85, 1LL, v37) == 1)
      {
        uint64_t v86 = 7104878LL;
        unint64_t v87 = 0xE300000000000000LL;
      }

      else
      {
        uint64_t v102 = v178;
        uint64_t v184 = v80;
        outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v85,  v178,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v103 = v177;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v102,  v177,  type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v86 = String.init<A>(reflecting:)(v103, v37);
        unint64_t v87 = v104;
        uint64_t v80 = v184;
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v102,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      }

      outlined destroy of Any?( v174,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
      uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease(v87);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v179,  type metadata accessor for NearbyProtoConnectionResponse.Content);
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "NearbyInvitationsProviderDataSource: Connection approved with: %s",  v79,  0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);

      unint64_t v16 = v176;
      a1 = v183;
    }

    else
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v75,  type metadata accessor for NearbyProtoConnectionResponse.Content);
    }

    uint64_t v105 = *a1;
    uint64_t v106 = a1[1];
    unint64_t v107 = a1;
    uint64_t v108 = v182;
    unint64_t v109 = *(uint64_t (**)(uint64_t *, __n128))(*(void *)v182 + 344LL);
    __n128 v110 = swift_bridgeObjectRetain(v106);
    uint64_t v111 = (uint64_t (*)(uint64_t *, void))v109(v185, v110);
    uint64_t v112 = specialized Dictionary._Variant.removeValue(forKey:)(v105, v106);
    swift_bridgeObjectRelease(v106);
    uint64_t v113 = v111(v185, 0LL);
    if (!v112)
    {
LABEL_38:
      uint64_t v151 = (*(uint64_t (**)(uint64_t))(*(void *)v108 + 208LL))(v113);
      if (!v151) {
        return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }
      uint64_t v153 = v151;
      uint64_t v154 = v152;
      uint64_t v155 = *v107;
      uint64_t v156 = v107[1];
      uint64_t v157 = v71;
      uint64_t v158 = v171;
      outlined init with copy of (String, Any)( v157,  v171,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      if (v73((char *)v158, 1LL, v72) == 1)
      {
        uint64_t v159 = outlined destroy of Any?( v158,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        uint64_t v160 = v169;
      }

      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v158, v72);
        uint64_t v160 = v169;
        if (EnumCaseMultiPayload == 1)
        {
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v158,  (uint64_t)v169,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
LABEL_45:
          uint64_t ObjectType = swift_getObjectType(v153);
          uint64_t v163 = *v160;
          unint64_t v164 = v160[1];
          outlined copy of Data._Representation(*v160, v164);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v160,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v154 + 48))( v155,  v156,  v163,  v164,  ObjectType,  v154);
          swift_unknownObjectRelease(v153);
          outlined consume of Data._Representation(v163, v164);
          return outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v16,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
        }

        uint64_t v159 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v158,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }

      *(_OWORD *)uint64_t v160 = xmmword_1000AC690;
      UnknownStorage.init()(v159);
      goto LABEL_45;
    }

    uint64_t v114 = v170;
    outlined init with copy of (String, Any)( v71,  v170,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    if (v73((char *)v114, 1LL, v72) == 1)
    {
      uint64_t v115 = outlined destroy of Any?( v114,  &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      unint64_t v116 = v168;
    }

    else
    {
      int v117 = swift_getEnumCaseMultiPayload(v114, v72);
      unint64_t v116 = v168;
      if (v117 == 1)
      {
        outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v114,  (uint64_t)v168,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
LABEL_37:
        uint64_t v149 = *v116;
        unint64_t v150 = v116[1];
        outlined copy of Data._Representation(*v116, v150);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v116,  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
        v185[0] = v149;
        v185[1] = v150;
        PassthroughSubject.send(_:)(v185);
        swift_release(v112);
        uint64_t v113 = outlined consume of Data._Representation(v149, v150);
        goto LABEL_38;
      }

      uint64_t v115 = outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v114,  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }

    *(_OWORD *)unint64_t v116 = xmmword_1000AC690;
    UnknownStorage.init()(v115);
    goto LABEL_37;
  }

  return result;
}

uint64_t specialized static InvitationJoinResponse.from(content:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  outlined init with copy of (String, Any)( a1 + *(int *)(v10 + 20),  (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v5, 1LL, v11) == 1)
  {
    outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_12:
    type metadata accessor for InvitationJoinResponse(0LL);
    return static InvitationJoinResponse.denied.getter();
  }

  if (swift_getEnumCaseMultiPayload(v5, v11) != 1)
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v5,  type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_12;
  }

  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  uint64_t v12 = *v9;
  uint64_t v13 = v9[1];
  uint64_t v14 = v9[2];
  uint64_t v15 = (uint64_t *)((char *)v9 + *(int *)(v6 + 28));
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  if (v17 >> 60 == 15) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = *v15;
  }
  if (v17 >> 60 == 15) {
    unint64_t v19 = 0xC000000000000000LL;
  }
  else {
    unint64_t v19 = v15[1];
  }
  type metadata accessor for InvitationJoinResponse(0LL);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  outlined copy of Data?(v16, v17);
  uint64_t v20 = static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)(v12, v13, v14, v18, v19);
  outlined consume of Data._Representation(v18, v19);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v9,  type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return v20;
}

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v4, v5);
  unint64_t v87 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v89 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void **)(v89 - 8);
  uint64_t v9 = __chkstk_darwin(v89, v8);
  uint64_t v84 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v81 - v13;
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (char *)&v81 - v16;
  uint64_t v18 = type metadata accessor for NearbyProtoJoinResponse.Content(0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Log.host);
  uint64_t v24 = outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)a1,  (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content);
  uint64_t v86 = (uint8_t *)v23;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v88 = v17;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(12LL, -1LL);
    uint64_t v85 = v2;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v7;
    uint64_t v31 = v30;
    v91[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v82 = v14;
    uint64_t v32 = lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content,  type metadata accessor for NearbyProtoJoinResponse.Content,  (uint64_t)&protocol conformance descriptor for NearbyProtoJoinResponse.Content);
    uint64_t v33 = Message.debugDescription.getter(v18, v32);
    unint64_t v35 = v34;
    uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v91);
    uint64_t v14 = v82;
    unint64_t v17 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v35);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "NearbyInvitationsProviderDataSource didReceiveJoinResponse: %s",  v29,  0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v36 = v31;
    uint64_t v7 = v83;
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v37 = v29;
    uint64_t v2 = v85;
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v21,  type metadata accessor for NearbyProtoJoinResponse.Content);
  }

  uint64_t v38 = (void *)specialized static InvitationJoinResponse.from(content:)((uint64_t)a1);
  uint64_t v39 = (uint64_t)v87;
  UUID.init(uuidString:)(*a1);
  uint64_t v40 = v89;
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v7 + 6))(v39, 1LL, v89) == 1)
  {
    uint64_t v41 = outlined destroy of Any?(v39, &demangling cache variable for type metadata for UUID?);
  }

  else
  {
    uint64_t v83 = v38;
    (*((void (**)(char *, uint64_t, uint64_t))v7 + 4))(v17, v39, v40);
    uint64_t v42 = (uint64_t (*)(char *, char *, uint64_t))*((void *)v7 + 2);
    uint64_t v43 = v42(v14, v17, v40);
    uint64_t v44 = v14;
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      unint64_t v87 = v42;
      uint64_t v49 = v48;
      v91[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v50 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v89, v50);
      unint64_t v53 = v52;
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v91);
      uint64_t v40 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v53);
      uint64_t v54 = (void (*)(char *, uint64_t))*((void *)v7 + 1);
      v54(v44, v40);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Looking up waitingJoinRequest with identifier: %s",  v47,  0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v55 = v49;
      uint64_t v42 = v87;
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
      uint64_t v54 = (void (*)(char *, uint64_t))*((void *)v7 + 1);
      v54(v44, v40);
    }

    uint64_t v56 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 320LL))(v91);
    uint64_t v57 = (uint64_t)v88;
    uint64_t v58 = (void (*)(uint64_t *, uint64_t *))specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v88);
    uint64_t v60 = v59;
    v56(v91, 0LL);
    uint64_t v38 = v83;
    if (v58)
    {
      os_log_type_t v61 = v84;
      uint64_t v62 = v42(v84, (char *)v57, v40);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc(12LL, -1LL);
        unint64_t v87 = (uint64_t (*)(char *, char *, uint64_t))v60;
        uint64_t v66 = v61;
        unint64_t v67 = (uint8_t *)v65;
        uint64_t v68 = swift_slowAlloc(32LL, -1LL);
        v91[0] = v68;
        uint64_t v85 = v2;
        *(_DWORD *)unint64_t v67 = 136315138;
        uint64_t v86 = v67 + 4;
        uint64_t v69 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v89, v69);
        unint64_t v72 = v71;
        uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v91);
        uint64_t v2 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v86, v67 + 12);
        swift_bridgeObjectRelease(v72);
        uint64_t v73 = v66;
        uint64_t v60 = (uint64_t)v87;
        v54(v73, v89);
        _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Calling callback that was waiting for a joinResponse, identifier: %s",  v67,  0xCu);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v74 = v68;
        uint64_t v40 = v89;
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      else
      {
        v54(v61, v40);
      }

      uint64_t v90 = 0LL;
      v91[0] = (uint64_t)v38;
      id v75 = v38;
      v58(v91, &v90);

      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v58, v60);
      uint64_t v57 = (uint64_t)v88;
    }

    uint64_t v41 = ((uint64_t (*)(uint64_t, uint64_t))v54)(v57, v40);
  }

  uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208LL))(v41);
  if (v76)
  {
    uint64_t v78 = v76;
    uint64_t v79 = v77;
    uint64_t ObjectType = swift_getObjectType(v76);
    (*(void (**)(void *, uint64_t, uint64_t))(v79 + 56))(v38, ObjectType, v79);
    swift_unknownObjectRelease(v78);
  }
}

uint64_t sub_100079A44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 304LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100079A74(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 312LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100079AA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100079AD4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 336LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100079B04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100079B34(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 360LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100079B64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100079B94(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 384LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_100079BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 424LL))();
}

uint64_t sub_100079BF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448LL))();
  *a2 = result;
  return result;
}

uint64_t sub_100079C20(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 456LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationsProviderDataSource()
{
  return type metadata accessor for NearbyInvitationsProviderDataSource(0LL);
}

uint64_t type metadata accessor for NearbyInvitationsProviderDataSource(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationsProviderDataSource;
  if (!type metadata singleton initialization cache for NearbyInvitationsProviderDataSource) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyInvitationsProviderDataSource);
  }
  return result;
}

void type metadata completion function for NearbyInvitationsProviderDataSource(uint64_t a1)
{
  v4[0] = &unk_1000ADE88;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = &unk_1000ADEA0;
  void v4[7] = &unk_1000ADEA0;
  v4[8] = &unk_1000ADEA0;
  void v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
  type metadata accessor for Published<Data?>(319LL);
  if (v3 <= 0x3F)
  {
    v4[14] = *(void *)(v2 - 8) + 64LL;
    v4[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 16LL, v4, a1 + 80);
  }

void type metadata accessor for Published<Data?>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Published<Data?>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Data?>);
    }
  }

uint64_t storeEnumTagSinglePayload for NearbyInvitationsProviderDataSource.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100079DF0 + 4 * byte_1000ADC35[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100079E24 + 4 * byte_1000ADC30[v4]))();
}

uint64_t sub_100079E24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100079E34LL);
  }
  return result;
}

uint64_t sub_100079E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100079E48LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100079E4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100079E54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationsProviderDataSource.Errors()
{
  return &type metadata for NearbyInvitationsProviderDataSource.Errors;
}

uint64_t sub_100079E70()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)()
{
  uint64_t v2 = swift_task_alloc(dword_1000D7124);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 48) = v3;
  return swift_task_switch( closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:),  0LL,  0LL);
}

uint64_t sub_100079F04()
{
  outlined consume of Data._Representation(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1000D7134);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)( a1,  v4,  v5,  v6,  v7,  v9,  v8);
}

uint64_t sub_100079FCC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000D7164);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)( a1,  v4,  v5,  v6,  v7,  v8);
}

uint64_t sub_10007A088()
{
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1000D717C);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)( a1,  v4,  v5,  v6,  v7,  v8,  v9,  v10);
}

uint64_t sub_10007A160()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 5));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(void *)&v0[v6]);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v13 = (void *)swift_task_alloc(dword_1000D71B4);
  *(void *)(v2 + outlined destroy of weak PeerConnectionDelegate?(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v6,  v7,  v8,  v9,  v10,  v11,  v12);
}

uint64_t sub_10007A2C0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v2 + ((v5 + 16) & ~v5),  a2);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  *(void *)(v2 + 16),  a2);
}

uint64_t sub_10007A38C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007A3B0()
{
  return objectdestroy_94Tm((void (*)(void))&_swift_release, 48LL);
}

uint64_t objectdestroy_94Tm(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t partial apply for specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)()
{
  return specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_BYTE *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v86, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  uint64_t v83 = result;
  if (result)
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v8, (uint64_t)static Log.host);
    uint64_t v9 = swift_retain_n(a2);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v87[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)a2 + 104LL))();
      uint64_t v15 = v14;
      int64_t v16 = *(void *)(v14 + 16);
      if (v16)
      {
        uint64_t v64 = v13;
        os_log_type_t v65 = v11;
        uint64_t v66 = v12;
        unint64_t v67 = v10;
        char v68 = a3;
        uint64_t v84 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
        uint64_t v17 = 0LL;
        uint64_t v18 = _swiftEmptyArrayStorage;
        uint64_t v69 = v15;
        do
        {
          uint64_t v19 = *(void *)(v15 + v17 + 40);
          char v77 = *(_BYTE *)(v15 + v17 + 48);
          uint64_t v20 = *(void *)(v15 + v17 + 64);
          uint64_t v21 = *(void *)(v15 + v17 + 72);
          int v75 = *(_DWORD *)(v15 + v17 + 80);
          uint64_t v73 = *(void *)(v15 + v17 + 88);
          uint64_t v22 = *(void *)(v15 + v17 + 104);
          uint64_t v72 = *(void *)(v15 + v17 + 96);
          char v71 = *(_BYTE *)(v15 + v17 + 112);
          uint64_t v79 = *(void *)(v15 + v17 + 32);
          uint64_t v81 = *(void **)(v15 + v17 + 56);
          id v23 = v81;
          swift_bridgeObjectRetain(v19);
          outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v20, v21);
          uint64_t v84 = v18;
          unint64_t v25 = v18[2];
          unint64_t v24 = v18[3];
          swift_bridgeObjectRetain(v22);
          if (v25 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v24 > 1,  v25 + 1,  1);
            uint64_t v18 = v84;
          }

          uint64_t v18[2] = v25 + 1;
          os_log_type_t v26 = &v18[11 * v25];
          v26[4] = v79;
          v26[5] = v19;
          *((_BYTE *)v26 + 48) = v77;
          v26[7] = v81;
          v26[8] = v20;
          v26[9] = v21;
          *((_DWORD *)v26 + 2NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v75;
          v26[11] = v73;
          v26[12] = v72;
          v26[13] = v22;
          *((_BYTE *)v26 + 112) = v71;
          v17 += 104LL;
          --v16;
          uint64_t v15 = v69;
        }

        while (v16);
        swift_bridgeObjectRelease(v69);
        a3 = v68;
        uint64_t v10 = v67;
        uint64_t v12 = v66;
        os_log_type_t v11 = v65;
        uint64_t v13 = v64;
      }

      else
      {
        swift_bridgeObjectRelease(v14);
        uint64_t v18 = _swiftEmptyArrayStorage;
      }

      uint64_t v84 = v18;
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScannerDiscoveryEngineDevice]);
      uint64_t v29 = String.init<A>(reflecting:)(&v84, v28);
      unint64_t v31 = v30;
      uint64_t v84 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v12 + 4, v12 + 12);
      swift_release_n(a2);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Learned about updated BT devices: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      uint64_t v27 = swift_release_n(a2);
    }

    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104LL))(v27);
    uint64_t v82 = *(void *)(v32 + 16);
    if (v82)
    {
      uint64_t v33 = 0LL;
      char v76 = a3 & 1;
      uint64_t v74 = v32;
      uint64_t v78 = *(uint64_t (**)(__n128))(*(void *)v83 + 168LL);
      uint64_t v80 = v32 + 32;
      unint64_t v34 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v36 = v80 + 104 * v33;
        __int128 v37 = *(_OWORD *)(v36 + 32);
        __int128 v38 = *(_OWORD *)v36;
        v87[1] = *(_OWORD *)(v36 + 16);
        v87[2] = v37;
        v87[0] = v38;
        __int128 v39 = *(_OWORD *)(v36 + 48);
        __int128 v40 = *(_OWORD *)(v36 + 64);
        __int128 v41 = *(_OWORD *)(v36 + 80);
        uint64_t v88 = *(void *)(v36 + 96);
        v87[4] = v40;
        v87[5] = v41;
        v87[3] = v39;
        unsigned __int128 v42 = v87[0];
        outlined retain of BluetoothScanner.Device((uint64_t)v87);
        __n128 v43 = swift_bridgeObjectRetain(*((void *)&v42 + 1));
        uint64_t v44 = v78(v43);
        uint64_t v45 = v44;
        uint64_t v46 = *(void *)(v44 + 16);
        if (v46)
        {
          uint64_t v47 = (uint64_t *)(v44 + 48);
          while (1)
          {
            uint64_t v49 = *(v47 - 2);
            uint64_t v48 = *(v47 - 1);
            uint64_t v50 = *v47;
            if ((void)v42 == v49 && *((void *)&v42 + 1) == v48) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v42, *((void *)&v42 + 1), *(v47 - 2), *(v47 - 1), 0LL) & 1) != 0) {
              goto LABEL_31;
            }
            v47 += 3;
            if (!--v46) {
              goto LABEL_26;
            }
          }

          uint64_t v48 = v42 >> 64;
          uint64_t v49 = v42;
LABEL_31:
          swift_bridgeObjectRetain(v48);
          swift_retain();
          swift_bridgeObjectRelease(*((void *)&v42 + 1));
          swift_bridgeObjectRelease(v45);
          (*(void (**)(_OWORD *))(*(void *)v50 + 200LL))(v87);
          swift_bridgeObjectRetain(v48);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v34[2] + 1LL,  1,  v34);
          }
          unint64_t v57 = v34[2];
          unint64_t v56 = v34[3];
          if (v57 >= v56 >> 1) {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v56 > 1),  v57 + 1,  1,  v34);
          }
          v34[2] = v57 + 1;
          uint64_t v58 = &v34[3 * v57];
          v58[4] = v49;
          v58[5] = v48;
          v58[6] = v50;
          swift_release(v50);
          swift_bridgeObjectRelease(v48);
        }

        else
        {
LABEL_26:
          swift_bridgeObjectRelease(v45);
          uint64_t v52 = type metadata accessor for NearbyRangingFilter();
          swift_allocObject(v52, 176LL, 7LL);
          outlined retain of BluetoothScanner.Device((uint64_t)v87);
          uint64_t v53 = NearbyRangingFilter.init(scannerDevice:config:)((uint64_t)v87, v76, a4);
          if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v34[2] + 1LL,  1,  v34);
          }
          unint64_t v55 = v34[2];
          unint64_t v54 = v34[3];
          if (v55 >= v54 >> 1) {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v54 > 1),  v55 + 1,  1,  v34);
          }
          v34[2] = v55 + 1;
          unint64_t v35 = &v34[3 * v55];
          *((_OWORD *)v35 + 2) = v42;
          v35[6] = v53;
        }

        outlined release of BluetoothScanner.Device(v87);
        ++v33;
      }

      while (v33 != v82);
      swift_bridgeObjectRelease(v74);
    }

    else
    {
      swift_bridgeObjectRelease(v32);
      unint64_t v34 = _swiftEmptyArrayStorage;
    }

    swift_retain();
    swift_bridgeObjectRetain(v34);
    uint64_t v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0K6DeviceVyAF0H13RangingFilterC_GG_7Combine14AnyCancellableCs5NeverOTg508_s44com_e1_fg1_hi9Service24klm49C7scanner6configACyxGAA0iJ0C_6ConfigQztcfcySayAH6n16VGcfU_7Combine14rs24CAC0hN0Vyx_GXEfU1_AA0E13oP5C_TG5AHyALGTf1cn_nTf4ng_n(v59);
    swift_bridgeObjectRelease(v34);
    swift_release(v83);
    uint64_t v61 = specialized Set.init<A>(_:)((uint64_t)v60);
    swift_bridgeObjectRelease(v60);
    (*(void (**)(uint64_t))(*(void *)v83 + 152LL))(v61);
    uint64_t v62 = *(void (**)(__n128))(*(void *)v83 + 176LL);
    __n128 v63 = swift_bridgeObjectRetain(v34);
    v62(v63);
    swift_bridgeObjectRelease(v34);
    return swift_release(v83);
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1)
{
  return specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)(a1, v1);
}

uint64_t sub_10007AA8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10007AAB4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = (void *)swift_task_alloc(dword_1000D7264);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v6,  v7,  v8,  v9);
}

uint64_t objectdestroyTm_0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000D7274);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)( a1,  v4,  v5,  v6);
}

uint64_t sub_10007AC8C()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)( uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10007ACE8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( void **a1, uint64_t *a2)
{
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)( a1,  a2,  *(void (**)(void, void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()( uint64_t *a1)
{
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()(a1, v1);
}

void *AssertionManager.__allocating_init(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_allocObject(v2, 48LL, 7LL);
  uint64_t v6 = type metadata accessor for Lock(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  void v5[4] = Lock.init()();
  void v5[5] = 0LL;
  void v5[2] = a1;
  void v5[3] = a2;
  return v5;
}

uint64_t AssertionManager.updateCallback.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain(*(void *)(v0 + 24));
  return v1;
}

uint64_t AssertionManager.assertionCount.getter()
{
  return v2;
}

void AssertionManager.assertionCount.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3 == a1)
  {
    Lock.unlock()();
  }

  else
  {
    *(void *)(v1 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = a1;
    Lock.unlock()();
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = a1 <= 0;
    }
    if (!v4 || (v3 >= 1 ? (BOOL v5 = a1 == 0) : (BOOL v5 = 0), v5)) {
      (*(void (**)(uint64_t))(v1 + 16))(a1);
    }
  }

  Lock.assertNotOwned()();
}

void *AssertionManager.init(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Lock(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  void v2[4] = Lock.init()();
  v2[5] = 0LL;
  void v2[2] = a1;
  v2[3] = a2;
  return v2;
}

void partial apply for closure #1 in AssertionManager.assertionCount.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
}

uint64_t AssertionManager.subscribe()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AssertionManager.Assertion();
  swift_allocObject(v2, 24LL, 7LL);
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized AssertionManager.Assertion.init(manager:)(v3);
  swift_release(v1);
  return v4;
}

uint64_t AssertionManager.Assertion.__allocating_init(manager:)(uint64_t a1)
{
  uint64_t v3 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release(a1);
  return v3;
}

uint64_t type metadata accessor for AssertionManager.Assertion()
{
  return objc_opt_self(&OBJC_CLASS____TtCC44com_apple_SharePlay_NearbyInvitationsService16AssertionManager9Assertion);
}

uint64_t AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v2 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release(a1);
  return v2;
}

uint64_t AssertionManager.Assertion.deinit()
{
  uint64_t Strong = swift_weakLoadStrong(v0 + 16);
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy(v0 + 16);
    return v0;
  }

  uint64_t v2 = Strong;
  uint64_t result = Lock.withLock<A>(_:)(closure #1 in AssertionManager.assertionCount.getterpartial apply, Strong);
  uint64_t v4 = v6 - 1;
  if (!__OFSUB__(v6, 1LL))
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(v2 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }

    else
    {
      *(void *)(v2 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v4;
      Lock.unlock()();
      if (!v5 && v4 >= 1 || v5 >= 1 && v6 == 1) {
        (*(void (**)(uint64_t))(v2 + 16))(v4);
      }
    }

    Lock.assertNotOwned()();
    swift_release(v2);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t AssertionManager.Assertion.__deallocating_deinit()
{
  uint64_t Strong = swift_weakLoadStrong(v0 + 16);
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy(v0 + 16);
    return swift_deallocClassInstance(v0, 24LL, 7LL);
  }

  uint64_t v2 = Strong;
  uint64_t result = Lock.withLock<A>(_:)(closure #1 in AssertionManager.assertionCount.getterpartial apply, Strong);
  uint64_t v4 = v6 - 1;
  if (!__OFSUB__(v6, 1LL))
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(v2 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }

    else
    {
      *(void *)(v2 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v4;
      Lock.unlock()();
      if (!v5 && v4 >= 1 || v5 >= 1 && v6 == 1) {
        (*(void (**)(uint64_t))(v2 + 16))(v4);
      }
    }

    Lock.assertNotOwned()();
    swift_release(v2);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t AssertionManager.deinit()
{
  return v0;
}

uint64_t AssertionManager.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t specialized AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v3 = swift_weakInit(v1 + 16);
  swift_weakAssign(v3, a1);
  uint64_t result = Lock.withLock<A>(_:)(closure #1 in AssertionManager.assertionCount.getterpartial apply, a1);
  uint64_t v5 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
  }

  else
  {
    Lock.lock()();
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6 == v5)
    {
      Lock.unlock()();
    }

    else
    {
      *(void *)(a1 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v5;
      Lock.unlock()();
      if (!v6 && v5 > 0 || v6 >= 1 && v7 == -1) {
        (*(void (**)(uint64_t))(a1 + 16))(v5);
      }
    }

    Lock.assertNotOwned()();
    return v1;
  }

  return result;
}

uint64_t sub_10007B338@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  *a2 = result;
  return result;
}

void sub_10007B368(uint64_t *a1)
{
}

uint64_t type metadata accessor for AssertionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_SharePlay_NearbyInvitationsService16AssertionManager);
}

void closure #1 in AssertionManager.assertionCount.getterpartial apply(void *a1@<X8>)
{
}

uint64_t NearbySession.__allocating_init(stableIdentifier:rangingConfig:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v8 = a3 & 1;
  id v9 = objc_allocWithZone(v4);
  return NearbySession.init(stableIdentifier:rangingConfig:)(a1, a2, v8, a4);
}

uint64_t NearbySession.RangedDevice.location.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t property wrapper backing initializer of NearbySession.isRunning(char a1)
{
  char v2 = a1;
  return CurrentSubject.init(wrappedValue:)(&v2, &type metadata for Bool);
}

uint64_t NearbySession.isRunning.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( v5,  v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning,  v1);
  CurrentSubject.wrappedValue.getter(&v8, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v8;
}

uint64_t NearbySession.isRunning.setter(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v7,  v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning,  v3);
  char v10 = a1;
  CurrentSubject.wrappedValue.setter(&v10, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t (*NearbySession.isRunning.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  void v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  void v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify(v2, v3);
  return NearbySession.isRunning.modify;
}

uint64_t NearbySession.$isRunning.getter()
{
  return NearbySession.$isRunning.getter( &demangling cache variable for type metadata for CurrentSubject<Bool>,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning);
}

uint64_t NearbySession.config.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config);
}

uint64_t property wrapper backing initializer of NearbySession.rangedDevice(char a1)
{
  char v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbySession.RangedDevice?);
  return CurrentSubject.init(wrappedValue:)(&v3, v1);
}

uint64_t NearbySession.rangedDevice.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( v5,  v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice,  v1);
  CurrentSubject.wrappedValue.getter(&v8, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v8;
}

uint64_t NearbySession.rangedDevice.setter(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v7,  v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice,  v3);
  char v10 = a1;
  CurrentSubject.wrappedValue.setter(&v10, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t (*NearbySession.rangedDevice.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  void v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  void v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify(v2, v3);
  return NearbySession.isRunning.modify;
}

uint64_t NearbySession.$rangedDevice.getter()
{
  return NearbySession.$isRunning.getter( &demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>,  &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice);
}

uint64_t NearbySession.$isRunning.getter(uint64_t *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + *a2, v4);
  uint64_t v9 = CurrentSubject.projectedValue.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t NearbySession.stableIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier);
  swift_beginAccess( v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier,  v4,  0LL,  0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t NearbySession.stableIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*NearbySession.stableIdentifier.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

id NearbySession.session.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
}

uint64_t NearbySession.init(stableIdentifier:rangingConfig:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v52 = a2;
  uint64_t v53 = a4;
  int v51 = a3 & 1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = &v50[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = &v50[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int64_t v16 = &v4[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning];
  LOBYTE(v55) = 0;
  uint64_t v17 = v4;
  CurrentSubject.init(wrappedValue:)(&v55, &type metadata for Bool);
  (*(void (**)(char *, _BYTE *, uint64_t))(v12 + 32))(v16, v15, v11);
  uint64_t v18 = &v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice];
  LOBYTE(v55) = 3;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbySession.RangedDevice?);
  CurrentSubject.init(wrappedValue:)(&v55, v19);
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(v18, v10, v6);
  uint64_t v20 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session;
  *(void *)&v17[v20] = [objc_allocWithZone(NISession) init];
  uint64_t v21 = &v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier];
  uint64_t v22 = v52;
  *(void *)uint64_t v21 = a1;
  *((void *)v21 + 1) = v22;
  id v23 = &v17[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config];
  *id v23 = v51;
  *((void *)v23 + 1) = v53;

  unint64_t v24 = (objc_class *)type metadata accessor for NearbySession(0LL);
  v54.receiver = v17;
  v54.super_class = v24;
  unint64_t v25 = (char *)objc_msgSendSuper2(&v54, "init");
  uint64_t v26 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session;
  uint64_t v27 = *(void **)&v25[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session];
  uint64_t v28 = v25;
  [v27 setDelegate:v28];
  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v29 = v27;
  unint64_t v30 = (void *)static OS_dispatch_queue.main.getter();
  [v29 setDelegateQueue:v30];

  unint64_t v31 = *(void **)&v25[v26];
  uint64_t v32 = *(void *)&v28[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config + 8];
  id v33 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  id v34 = v31;
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v33 initWithName:v35 devicePresencePreset:v32];

  id v37 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 initWithName:v38 devicePresencePreset:5];

  id v40 = objc_allocWithZone(&OBJC_CLASS___NIDevicePresenceConfiguration);
  id v55 = 0LL;
  id v41 = v36;
  id v42 = v39;
  id v43 = [v40 initWithInnerBoundary:v41 outerBoundary:v42 error:&v55];
  id v44 = v55;
  if (v43)
  {
    uint64_t v45 = v43;
    id v46 = v55;

    [v45 setAllowedDevices:4];
    [v45 setMonitoringOption:1];

    [v34 runWithConfiguration:v45];
    return (uint64_t)v28;
  }

  else
  {
    id v48 = v55;
    uint64_t v49 = _convertNSErrorToError(_:)(v44);

    swift_willThrow();
    uint64_t result = swift_unexpectedError( v49,  "com_apple_SharePlay_NearbyInvitationsService/NearbySession.swift",  64LL,  1LL,  188LL);
    __break(1u);
  }

  return result;
}

uint64_t NearbyRangingFilter.Config.niDevicePresenceConfig.getter(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithName:v4 devicePresencePreset:a2];

  id v6 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithName:v7 devicePresencePreset:5];

  id v9 = objc_allocWithZone(&OBJC_CLASS___NIDevicePresenceConfiguration);
  id v19 = 0LL;
  id v10 = v5;
  id v11 = v8;
  id v12 = [v9 initWithInnerBoundary:v10 outerBoundary:v11 error:&v19];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = v19;

    [v13 setAllowedDevices:4];
    [v13 setMonitoringOption:1];

    return (uint64_t)v13;
  }

  else
  {
    id v16 = v19;
    id v17 = v19;
    uint64_t v18 = _convertNSErrorToError(_:)(v16);

    swift_willThrow();
    uint64_t result = swift_unexpectedError( v18,  "com_apple_SharePlay_NearbyInvitationsService/NearbySession.swift",  64LL,  1LL,  188LL);
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for NearbySession(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for NearbySession;
  if (!type metadata singleton initialization cache for NearbySession) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbySession);
  }
  return result;
}

void NearbySession.handle(device:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    id v8 = *(void **)(a1 + 24);
    if (v8)
    {
      id v9 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78LL);
      id v10 = v8;
      if ((v9() & 1) == 0)
      {
        id v11 = *(void **)((char *)v1
                       + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
        uint64_t v12 = *(void *)((char *)v2
                        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config
                        + 8);
        id v13 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
        NSString v14 = String._bridgeToObjectiveC()();
        id v15 = [v13 initWithName:v14 devicePresencePreset:v12];

        id v16 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
        NSString v17 = String._bridgeToObjectiveC()();
        id v18 = [v16 initWithName:v17 devicePresencePreset:5];

        id v19 = objc_allocWithZone(&OBJC_CLASS___NIDevicePresenceConfiguration);
        id v37 = 0LL;
        id v20 = v15;
        id v21 = v18;
        id v22 = [v19 initWithInnerBoundary:v20 outerBoundary:v21 error:&v37];
        if (!v22)
        {
          id v33 = v37;
          id v34 = v37;
          uint64_t v35 = _convertNSErrorToError(_:)(v33);

          swift_willThrow(v36);
          swift_unexpectedError( v35,  "com_apple_SharePlay_NearbyInvitationsService/NearbySession.swift",  64LL,  1LL,  188LL);
          __break(1u);
          return;
        }

        id v23 = v22;
        id v24 = v37;

        [v23 setAllowedDevices:4];
        [v23 setMonitoringOption:1];

        [v11 runWithConfiguration:v23];
      }

      id v25 =  [*(id *)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session) devicePresenceNotifier];
      [v25 notifyBluetoothSample:v10];

      return;
    }

    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v31 = static os_log_type_t.error.getter(v28, v29, v30);
    if (os_log_type_enabled(v28, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v31,  "Failed to create NIBluetoothSample, can't update ranging to the device.",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0xA0LL))(3LL);
  }

  else
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    id v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      NSString v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Device lost invitation", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0xA0LL))(3LL);
    [*(id *)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session) invalidate];
  }

Swift::Void __swiftcall NearbySession.invalidate()()
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)id v5 = 136315138;
    id v12 = *(id *)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session];
    uint64_t v13 = v6;
    uint64_t v7 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v8 = v12;
    uint64_t v9 = String.init<A>(reflecting:)(&v12, v7);
    unint64_t v11 = v10;
    id v12 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NISession %s Invalidate", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  [*(id *)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session] invalidate];
}

void NearbySession.init()()
{
}

id NearbySession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySession(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall NearbySession.sessionDidStartRunning(_:)(NISession a1)
{
  objc_super v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1.super.isa;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = (uint64_t)v5;
    uint64_t v16 = v9;
    *(_DWORD *)id v8 = 136315138;
    uint64_t v10 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    unint64_t v11 = v5;
    uint64_t v12 = String.init<A>(reflecting:)(&v15, v10);
    unint64_t v14 = v13;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NISession %s Running", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x80LL))(1LL);
}

uint64_t NearbySession.session(_:didFailWithError:)(void *a1, uint64_t a2)
{
  return NearbySession.session(_:didFailWithError:)(a1, a2, "NISession %s Failed: %@");
}

uint64_t NearbySession.session(_:didInvalidateWith:)(void *a1, uint64_t a2)
{
  return NearbySession.session(_:didFailWithError:)(a1, a2, "NISession %s Invalidated: %@");
}

uint64_t NearbySession.session(_:didFailWithError:)(void *a1, uint64_t a2, char *a3)
{
  id v5 = v3;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  id v9 = a1;
  swift_errorRetain(a2);
  id v10 = v9;
  uint64_t v11 = swift_errorRetain(a2);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v15 = static os_log_type_t.error.getter(v12, v13, v14);
  if (os_log_type_enabled(v12, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    NSString v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = (uint64_t)v10;
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v16 = 136315394;
    format = a3;
    uint64_t v18 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v19 = v10;
    uint64_t v20 = String.init<A>(reflecting:)(&v28, v18);
    unint64_t v22 = v21;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v16 + 12) = 2112;
    swift_errorRetain(a2);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(a2);
    uint64_t v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 14, v16 + 22);
    *NSString v17 = v23;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v12, v15, format, (uint8_t *)v16, 0x16u);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v17, 1LL, v24);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  (*(void (**)(void))((swift_isaMask & *v5) + 0x80LL))(0LL);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0xA0LL))(3LL);
}

uint64_t NearbySession.session(_:suspendedWith:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  id v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v11 = static os_log_type_t.error.getter(v8, v9, v10);
  if (os_log_type_enabled(v8, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = (uint64_t)v7;
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v14 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v15 = v7;
    uint64_t v16 = String.init<A>(reflecting:)(&v20, v14);
    unint64_t v18 = v17;
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v12 + 12) = 2048;
    uint64_t v20 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 14, v12 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v11, "NISession %s Suspended: %ld", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(void))((swift_isaMask & *v3) + 0x80LL))(0LL);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA0LL))(3LL);
}

void NearbySession.session(_:suspensionReasonEnded:isNoLongerSuspended:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  id v9 = a1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(28LL, -1LL);
    uint64_t v36 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = (uint64_t)v9;
    id v39 = v36;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v13 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v14 = v9;
    uint64_t v15 = String.init<A>(reflecting:)(&v37, v13);
    unint64_t v17 = v16;
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v12 + 12) = 2048;
    uint64_t v37 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 1024;
    LODWORD(v37) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v12 + 24, v12 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "NISession %s Suspension Ended: %ld, isActive: %{BOOL}d",  (uint8_t *)v12,  0x1Cu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    if ((a3 & 1) == 0) {
      return;
    }
  }

  else
  {

    if ((a3 & 1) == 0) {
      return;
    }
  }

  unint64_t v18 = *(void **)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
  uint64_t v19 = *(void *)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config + 8);
  id v20 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithName:v21 devicePresencePreset:v19];

  id v23 = objc_allocWithZone(&OBJC_CLASS___NIRegionPredicate);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithName:v24 devicePresencePreset:5];

  id v26 = objc_allocWithZone(&OBJC_CLASS___NIDevicePresenceConfiguration);
  id v39 = 0LL;
  id v27 = v22;
  id v28 = v25;
  id v29 = [v26 initWithInnerBoundary:v27 outerBoundary:v28 error:&v39];
  id v30 = v39;
  if (v29)
  {
    os_log_type_t v31 = v29;
    id v32 = v39;

    [v31 setAllowedDevices:4];
    [v31 setMonitoringOption:1];

    [v18 runWithConfiguration:v31];
  }

  else
  {
    id v33 = v39;
    uint64_t v34 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v35);
    swift_unexpectedError(v34, "com_apple_SharePlay_NearbyInvitationsService/NearbySession.swift", 64LL, 1LL, 188LL);
    __break(1u);
  }

Swift::Void __swiftcall NearbySession.session(_:didDiscover:)(NISession _, NINearbyObject didDiscover)
{
  id v5 = -[objc_class deviceIdentifier](didDiscover.super.isa, "deviceIdentifier");
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8LL))();
  uint64_t v12 = v11;
  if (!v9)
  {
    swift_bridgeObjectRelease(v11);
    return;
  }

  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);
    if ((v14 & 1) == 0) {
      return;
    }
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  unint64_t v16 = _.super.isa;
  unint64_t v17 = didDiscover.super.isa;
  os_log_type_t v31 = v16;
  unint64_t v18 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    id v22 = (objc_class **)swift_slowAlloc(8LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = v23;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v32 = (uint64_t)v31;
    uint64_t v24 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NISession,  &OBJC_CLASS___NISession_ptr);
    id v25 = v31;
    uint64_t v26 = String.init<A>(reflecting:)(&v32, v24);
    unint64_t v28 = v27;
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v21 + 4, v21 + 12);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v21 + 12) = 2112;
    uint64_t v32 = (uint64_t)v18;
    id v29 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v21 + 14, v21 + 22);
    *id v22 = v18;

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "NISession %s discovered device: %@", (uint8_t *)v21, 0x16u);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v22, 1LL, v30);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
  }

void NearbySession.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1, void *a2, void *a3)
{
}

void NearbySession.session(_:didUpdateAlgorithmState:for:)(uint64_t a1, void *a2)
{
}

void specialized NearbySession.session(_:object:didUpdateRegion:previousRegion:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = [a1 deviceIdentifier];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v10 = v9;

    uint64_t v11 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xB8LL))();
    if (v8 == v11 && v10 == v12)
    {
      swift_bridgeObjectRelease_n(v10, 2LL);
      if (a2)
      {
LABEL_8:
        id v16 = [a2 name];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        unint64_t v19 = v18;

        if (v17 == 0x72656E6E69LL && v19 == 0xE500000000000000LL)
        {
          unint64_t v20 = 0xE500000000000000LL;
LABEL_25:
          swift_bridgeObjectRelease(v20);
          (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0xA0LL))(1LL);
          goto LABEL_32;
        }

        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E6E69LL, 0xE500000000000000LL, v17, v19, 0LL) & 1) != 0)
        {
          unint64_t v20 = v19;
          goto LABEL_25;
        }

        if (v17 == 0x726574756FLL && v19 == 0xE500000000000000LL)
        {
          unint64_t v41 = 0xE500000000000000LL;
LABEL_31:
          swift_bridgeObjectRelease(v41);
          (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0xA0LL))(2LL);
          goto LABEL_32;
        }

        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726574756FLL, 0xE500000000000000LL, v17, v19, 0LL) & 1) != 0)
        {
          unint64_t v41 = v19;
          goto LABEL_31;
        }

        if (one-time initialization token for host != -1) {
          swift_once(&one-time initialization token for host, one-time initialization function for host);
        }
        uint64_t v42 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v42, (uint64_t)static Log.host);
        swift_bridgeObjectRetain(v19);
        uint64_t v35 = (void *)Logger.logObject.getter(v43);
        os_log_type_t v46 = static os_log_type_t.error.getter(v35, v44, v45);
        if (!os_log_type_enabled((os_log_t)v35, v46))
        {

          swift_bridgeObjectRelease_n(v19, 2LL);
LABEL_32:
          if (*((_BYTE *)v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config) == 1) {
            [*(id *)((char *)v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session) invalidate];
          }
          return;
        }

        uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v48 = swift_slowAlloc(32LL, -1LL);
        uint64_t v51 = v48;
        *(_DWORD *)uint64_t v47 = 136446210;
        swift_bridgeObjectRetain(v19);
        uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease_n(v19, 3LL);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v46, "Unexpected Region: %{public}s", v47, 0xCu);
        swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1LL, -1LL);
        id v40 = v47;
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v14 = v12;
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v10);
      if ((v15 & 1) == 0) {
        return;
      }
      if (a2) {
        goto LABEL_8;
      }
    }

    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Log.host);
    uint64_t v35 = (void *)Logger.logObject.getter(v34);
    os_log_type_t v38 = static os_log_type_t.error.getter(v35, v36, v37);
    if (!os_log_type_enabled((os_log_t)v35, v38)) {
      goto LABEL_21;
    }
    id v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v38, "Unexpected Region: none", v39, 2u);
    id v40 = v39;
LABEL_20:
    swift_slowDealloc(v40, -1LL, -1LL);
LABEL_21:

    goto LABEL_32;
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v21, (uint64_t)static Log.host);
  id v49 = a1;
  id v22 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v25 = static os_log_type_t.error.getter(v22, v23, v24);
  if (os_log_type_enabled(v22, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v51 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v50 = (uint64_t)v49;
    uint64_t v28 = type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NINearbyObject,  &OBJC_CLASS___NINearbyObject_ptr);
    id v29 = v49;
    uint64_t v30 = String.init<A>(reflecting:)(&v50, v28);
    unint64_t v32 = v31;
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v26 + 4, v26 + 12);

    swift_bridgeObjectRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v25,  "Found object but doesn't have a deviceIdentifier. Object: %s",  v26,  0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

void specialized NearbySession.session(_:didUpdateAlgorithmState:for:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v9 = a1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v5 = 138412290;
    id v10 = v9;
    id v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    void *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Algorithm state updated: %@", v5, 0xCu);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

unint64_t lazy protocol witness table accessor for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location;
  if (!lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbySession.RangedDevice.Location,  &type metadata for NearbySession.RangedDevice.Location);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location);
  }

  return result;
}

uint64_t sub_10007E110@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10007E154(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x80LL))(*a1);
}

uint64_t sub_10007E190@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10007E1D0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0xA0LL))(*a1);
}

uint64_t sub_10007E20C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10007E24C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xC0LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for NearbySession()
{
  return type metadata accessor for NearbySession(0LL);
}

void type metadata completion function for NearbySession(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1000ADFD0;
    type metadata accessor for CurrentSubject<NearbySession.RangedDevice?>(319LL);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      void v6[3] = &unk_1000ADFE8;
      void v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 5LL, v6, a1 + 80);
    }
  }

void type metadata accessor for CurrentSubject<Bool>()
{
  if (!lazy cache variable for type metadata for CurrentSubject<Bool>)
  {
    unint64_t v0 = type metadata accessor for CurrentSubject(0LL, &type metadata for Bool);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<Bool>);
    }
  }

void type metadata accessor for CurrentSubject<NearbySession.RangedDevice?>(uint64_t a1)
{
  if (!lazy cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NearbySession.RangedDevice?);
    unint64_t v3 = type metadata accessor for CurrentSubject(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
    }
  }

ValueMetadata *type metadata accessor for NearbySession.RangedDevice()
{
  return &type metadata for NearbySession.RangedDevice;
}

uint64_t storeEnumTagSinglePayload for NearbySession.RangedDevice( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10007E460 + 4 * byte_1000ADF15[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10007E494 + 4 * asc_1000ADF10[v4]))();
}

uint64_t sub_10007E494(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E49C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007E4A4LL);
  }
  return result;
}

uint64_t sub_10007E4B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007E4B8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10007E4BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E4C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySession.RangedDevice.Location()
{
  return &type metadata for NearbySession.RangedDevice.Location;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a5;
  uint64_t v37 = a8;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v35 = *(void *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v44 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v12 + 8),  v13,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Element);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = __chkstk_darwin(AssociatedTypeWitness, v16);
  id v40 = (char *)&v33 - v18;
  uint64_t v45 = a4;
  __chkstk_darwin(v17, v19);
  id v39 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_getAssociatedTypeWitness( 0LL,  a6,  a3,  &protocol requirements base descriptor for Collection,  &associated type descriptor for Collection.Index);
  uint64_t v38 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v33 - v23;
  uint64_t v25 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v25) {
    return static Array._allocateUninitialized(_:)(0LL, v45);
  }
  Swift::Int v26 = v25;
  uint64_t v34 = v21;
  uint64_t v27 = v45;
  uint64_t v48 = ContiguousArray.init()(v45);
  uint64_t v41 = type metadata accessor for ContiguousArray(0LL, v27);
  ContiguousArray.reserveCapacity(_:)(v26);
  uint64_t v45 = v24;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v26 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v30 = v39;
    id v29 = v40;
    while (1)
    {
      unint64_t v31 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v47, v45, a3, a6);
      (*(void (**)(char *))(v15 + 16))(v29);
      v31(v47, 0LL);
      uint64_t v32 = v46;
      v42(v29, v44);
      if (v32) {
        break;
      }
      uint64_t v46 = 0LL;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v29, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v41);
      dispatch thunk of Collection.formIndex(after:)(v45, a3, a6);
      if (!--v26)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v34);
        return v48;
      }
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v34);
    swift_release(v48);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v44, v36);
  }

  return result;
}

void *FilteredBluetoothScanner.__allocating_init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  id v6 = specialized FilteredBluetoothScanner.init(scanner:config:)(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 88),  *(void *)(v3 + 80),  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a2, AssociatedTypeWitness);
  swift_release(a1);
  return v6;
}

__n128 FilteredBluetoothScanner.FilteredDevice.device.getter@<Q0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a2 + 48))(v7, a1, a2);
  __int128 v4 = v7[5];
  *(_OWORD *)(a3 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v7[4];
  *(_OWORD *)(a3 + 8NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v4;
  *(void *)(a3 + 96) = v8;
  __int128 v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t FilteredBluetoothScanner.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*FilteredBluetoothScanner.cancellables.modify(uint64_t a1))()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t FilteredBluetoothScanner.FilteredDevice.filter.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_unknownObjectRetain(a3);
}

uint64_t FilteredBluetoothScanner.FilteredDevice.filter.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t FilteredBluetoothScanner.FilteredDevice.shouldHandleUpdates(for:)( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (v6 == a2 && v7 == a3) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, a2, a3, 0LL);
  }
}

uint64_t FilteredBluetoothScanner.showDeviceObservers.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t FilteredBluetoothScanner.showDeviceObservers.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t property wrapper backing initializer of FilteredBluetoothScanner.filteredDevices( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v4 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice(255LL, a2, a3, a4);
  uint64_t v5 = type metadata accessor for Array(0LL, v4);
  return CurrentSubject.init(wrappedValue:)(&v7, v5);
}

uint64_t FilteredBluetoothScanner.filteredDevices.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(*v4 + 80),  *(void *)(*v4 + 88),  a4);
  uint64_t v7 = type metadata accessor for Array(255LL, v6);
  uint64_t v8 = type metadata accessor for CurrentSubject(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v14 - v11,  (uint64_t)v4 + *(void *)(v5 + 112),  v8);
  CurrentSubject.wrappedValue.getter(&v15, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v15;
}

uint64_t FilteredBluetoothScanner.filteredDevices.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(*v4 + 80),  *(void *)(*v4 + 88),  a4);
  uint64_t v8 = type metadata accessor for Array(255LL, v7);
  uint64_t v9 = type metadata accessor for CurrentSubject(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v15 - v12,  (uint64_t)v4 + *(void *)(v6 + 112),  v9);
  uint64_t v16 = a1;
  CurrentSubject.wrappedValue.setter(&v16, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void (*FilteredBluetoothScanner.filteredDevices.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v5 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(*(void *)v1 + 80LL),  *(void *)(*(void *)v1 + 88LL),  v4);
  uint64_t v6 = type metadata accessor for Array(255LL, v5);
  uint64_t v7 = type metadata accessor for CurrentSubject(0LL, v6);
  v3[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v3[5] = v8;
  void v3[6] = malloc(*(void *)(v8 + 64));
  (*(void (**)(void))(v8 + 16))();
  v3[7] = CurrentSubject.wrappedValue.modify(v3, v7);
  return BluetoothScanner.devices.modify;
}

uint64_t FilteredBluetoothScanner.$filteredDevices.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(*v4 + 80),  *(void *)(*v4 + 88),  a4);
  uint64_t v7 = type metadata accessor for Array(255LL, v6);
  uint64_t v8 = type metadata accessor for CurrentSubject(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v15 - v11,  (uint64_t)v4 + *(void *)(v5 + 112),  v8);
  uint64_t v13 = CurrentSubject.projectedValue.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13;
}

void *FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = specialized FilteredBluetoothScanner.init(scanner:config:)(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v5 + 88),  *(void *)(v5 + 80),  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a2, AssociatedTypeWitness);
  swift_release(a1);
  return v6;
}

uint64_t closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2 + 16;
  swift_beginAccess(a2 + 16, v90, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v10);
  if (result)
  {
    uint64_t v66 = a4;
    int v75 = (uint64_t *)result;
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v12, (uint64_t)static Log.host);
    uint64_t v13 = swift_retain_n(a3);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      v78[0] = v65;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)a3 + 104LL))();
      uint64_t v18 = v17;
      int64_t v19 = *(void *)(v17 + 16);
      if (v19)
      {
        os_log_type_t v59 = v15;
        uint64_t v60 = v16;
        uint64_t v61 = v14;
        uint64_t v62 = a5;
        uint64_t v63 = a6;
        uint64_t v64 = a3;
        uint64_t v89 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        uint64_t v20 = 0LL;
        uint64_t v21 = _swiftEmptyArrayStorage;
        uint64_t v67 = v18;
        do
        {
          uint64_t v22 = *(void *)(v18 + v20 + 40);
          uint64_t v73 = *(void *)(v18 + v20 + 32);
          uint64_t v23 = *(void *)(v18 + v20 + 64);
          uint64_t v24 = *(void *)(v18 + v20 + 72);
          int v71 = *(_DWORD *)(v18 + v20 + 80);
          char v72 = *(_BYTE *)(v18 + v20 + 48);
          uint64_t v25 = *(void *)(v18 + v20 + 104);
          uint64_t v69 = *(void *)(v18 + v20 + 96);
          uint64_t v70 = *(void *)(v18 + v20 + 88);
          char v68 = *(_BYTE *)(v18 + v20 + 112);
          char v76 = *(void **)(v18 + v20 + 56);
          id v26 = v76;
          swift_bridgeObjectRetain(v22);
          outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v23, v24);
          uint64_t v89 = v21;
          unint64_t v28 = v21[2];
          unint64_t v27 = v21[3];
          swift_bridgeObjectRetain(v25);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v27 > 1,  v28 + 1,  1);
            uint64_t v21 = v89;
          }

          v21[2] = v28 + 1;
          id v29 = &v21[11 * v28];
          v29[4] = v73;
          v29[5] = v22;
          *((_BYTE *)v29 + 48) = v72;
          v29[7] = v76;
          v29[8] = v23;
          v29[9] = v24;
          *((_DWORD *)v29 + 2NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v71;
          v29[11] = v70;
          v29[12] = v69;
          v29[13] = v25;
          *((_BYTE *)v29 + 112) = v68;
          v20 += 104LL;
          --v19;
          uint64_t v18 = v67;
        }

        while (v19);
        swift_bridgeObjectRelease(v67);
        a6 = v63;
        a3 = v64;
        uint64_t v14 = v61;
        a5 = v62;
        uint64_t v16 = v60;
        os_log_type_t v15 = v59;
      }

      else
      {
        swift_bridgeObjectRelease(v17);
        uint64_t v21 = _swiftEmptyArrayStorage;
      }

      uint64_t v89 = v21;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScannerDiscoveryEngineDevice]);
      uint64_t v31 = String.init<A>(reflecting:)(&v89, v30);
      unint64_t v33 = v32;
      uint64_t v89 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v33);
      swift_release_n(a3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Learned about updated BT devices: %s", v16, 0xCu);
      swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a3);
    }

    uint64_t v35 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice(0LL, a5, a6, v34);
    uint64_t v36 = Array.init()(v35);
    uint64_t v89 = (void *)v36;
    uint64_t v77 = (*(uint64_t (**)(void))(*(void *)a3 + 104LL))();
    uint64_t v37 = *(void *)(v77 + 16);
    if (v37)
    {
      uint64_t v74 = v35;
      uint64_t v38 = 0LL;
      do
      {
        uint64_t v39 = *(void *)(v77 + v38 + 120);
        uint64_t v40 = *(void *)(v77 + v38 + 128);
        char v41 = *(_BYTE *)(v77 + v38 + 112);
        uint64_t v42 = *(void *)(v77 + v38 + 104);
        int v43 = *(_DWORD *)(v77 + v38 + 80);
        uint64_t v45 = *(void *)(v77 + v38 + 64);
        uint64_t v44 = *(void *)(v77 + v38 + 72);
        uint64_t v46 = *(void **)(v77 + v38 + 56);
        char v47 = *(_BYTE *)(v77 + v38 + 48);
        uint64_t v48 = *(void *)(v77 + v38 + 40);
        v78[0] = *(void *)(v77 + v38 + 32);
        v78[1] = v48;
        char v79 = v47;
        uint64_t v80 = v46;
        uint64_t v81 = v45;
        uint64_t v82 = v44;
        int v83 = v43;
        __int128 v84 = *(_OWORD *)(v77 + v38 + 88);
        uint64_t v85 = v42;
        char v86 = v41;
        uint64_t v87 = v39;
        uint64_t v88 = v40;
        id v49 = v46;
        swift_bridgeObjectRetain(v48);
        outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v45, v44);
        swift_bridgeObjectRetain(v42);
        swift_retain();
        closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( (uint64_t)v78,  v75,  (uint64_t)&v89,  v66);
        swift_bridgeObjectRelease(v48);

        outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v45, v44);
        swift_bridgeObjectRelease(v42);
        swift_release(v40);
        v38 += 104LL;
        --v37;
      }

      while (v37);
      swift_bridgeObjectRelease(v77);
      uint64_t v36 = (uint64_t)v89;
      uint64_t v35 = v74;
    }

    else
    {
      swift_bridgeObjectRelease(v77);
    }

    v78[0] = v36;
    uint64_t v50 = type metadata accessor for Array(0LL, v35);
    uint64_t v51 = (char *)type metadata accessor for AnyCancellable(0LL);
    swift_bridgeObjectRetain(v36);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v50);
    uint64_t v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( (void (*)(char *, char *))partial apply for closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:),  (uint64_t)v75,  v50,  v51,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v53);
    swift_bridgeObjectRelease(v78[0]);
    uint64_t v55 = specialized Set.init<A>(_:)(v54);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t))(*v75 + 152))(v55);
    unint64_t v56 = v89;
    unint64_t v57 = *(void (**)(__n128))(*v75 + 176);
    __n128 v58 = swift_bridgeObjectRetain(v89);
    v57(v58);
    swift_release(v75);
    return swift_bridgeObjectRelease(v56);
  }

  return result;
}

uint64_t closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v5 = *a2;
  uint64_t v7 = *(void *)(*a2 + 80);
  uint64_t v6 = *(void *)(*a2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v7,  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v28 - v10;
  __int128 v12 = *(_OWORD *)(a1 + 80);
  uint64_t v39[4] = *(_OWORD *)(a1 + 64);
  v39[5] = v12;
  uint64_t v40 = *(void *)(a1 + 96);
  __int128 v13 = *(_OWORD *)(a1 + 16);
  v39[0] = *(_OWORD *)a1;
  v39[1] = v13;
  __int128 v14 = *(_OWORD *)(a1 + 48);
  unint64_t v39[2] = *(_OWORD *)(a1 + 32);
  v39[3] = v14;
  uint64_t v15 = *((void *)&v39[0] + 1);
  uint64_t v28 = *(void *)&v39[0];
  uint64_t v16 = *(uint64_t (**)(__n128))(v5 + 168);
  __n128 v17 = swift_bridgeObjectRetain(*((void *)&v39[0] + 1));
  uint64_t v41 = v16(v17);
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  uint64_t v35 = v39;
  uint64_t v19 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice(255LL, v7, v6, v18);
  uint64_t v20 = type metadata accessor for Array(0LL, v19);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  Sequence.first(where:)( &v36,  partial apply for closure #1 in closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:),  v32,  v20,  WitnessTable);
  swift_bridgeObjectRelease(v41);
  uint64_t v22 = v37;
  if (v37)
  {
    uint64_t v23 = v38;
    uint64_t v24 = v36;
    swift_bridgeObjectRelease(v15);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v6 + 32))(v39, v7, v6);
    uint64_t v36 = v24;
    uint64_t v37 = v22;
    uint64_t v38 = v23;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v30, AssociatedTypeWitness);
    uint64_t v25 = *(uint64_t (**)(_OWORD *, char *, uint64_t, uint64_t))(v6 + 24);
    outlined retain of BluetoothScanner.Device((uint64_t)v39);
    uint64_t v26 = v25(v39, v11, v7, v6);
    uint64_t v36 = v28;
    uint64_t v37 = v15;
    uint64_t v38 = v26;
  }

  return Array.append(_:)(&v36, v20);
}

uint64_t closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)@<X0>( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v2 = *(void *)(*(void *)a1 + 80LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 88LL);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  v2,  &protocol requirements base descriptor for ObservableObject,  &associated type descriptor for ObservableObject.ObjectWillChangePublisher);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v7);
  uint64_t v9 = (char *)&v15 - v8;
  dispatch thunk of ObservableObject.objectWillChange.getter((uint64_t *)((char *)&v15 - v8), v2, v4);
  uint64_t v10 = swift_allocObject(&unk_1000CCF90, 24LL, 7LL);
  swift_weakInit(v10 + 16);
  uint64_t v11 = (void *)swift_allocObject(&unk_1000CCFE0, 40LL, 7LL);
  void v11[2] = v2;
  v11[3] = v3;
  v11[4] = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ObservableObject,  &associated conformance descriptor for ObservableObject.ObservableObject.ObjectWillChangePublisher: Publisher);
  swift_retain();
  uint64_t v13 = Publisher<>.sink(receiveValue:)( partial apply for closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:),  v11,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  uint64_t result = swift_release(v10);
  *uint64_t v16 = v13;
  return result;
}

void *FilteredBluetoothScanner.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 112LL);
  uint64_t v4 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(v1 + 80),  *(void *)(v1 + 88),  v3);
  uint64_t v5 = type metadata accessor for Array(255LL, v4);
  uint64_t v6 = type metadata accessor for CurrentSubject(0LL, v5);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v2, v6);
  return v0;
}

uint64_t FilteredBluetoothScanner.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void *specialized FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v36 = a1;
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80LL);
  uint64_t v4 = *(void *)(*v2 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  v5,  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = v8;
  __chkstk_darwin(AssociatedTypeWitness, v9);
  uint64_t v37 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice(255LL, v5, v4, v11);
  uint64_t v13 = type metadata accessor for Array(255LL, v12);
  uint64_t v14 = type metadata accessor for CurrentSubject(0LL, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v41 = v2;
  void v2[2] = &_swiftEmptySetSingleton;
  uint64_t v19 = v2 + 2;
  v2[3] = &_swiftEmptySetSingleton;
  uint64_t v20 = (char *)v2 + *(void *)(v3 + 112);
  uint64_t v21 = Array.init()(v12);
  property wrapper backing initializer of FilteredBluetoothScanner.filteredDevices(v21, v5, v4, v22);
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v20, v18, v14);
  uint64_t v24 = v36;
  v42[0] = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 128LL))(v23);
  uint64_t v25 = swift_allocObject(&unk_1000CCF90, 24LL, 7LL);
  swift_weakInit(v25 + 16);
  uint64_t v26 = v37;
  uint64_t v27 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v37, v40, v38);
  uint64_t v28 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v29 = (v28 + 48) & ~v28;
  uint64_t v30 = (char *)swift_allocObject(&unk_1000CCFB8, v29 + v39, v28 | 7);
  *((void *)v30 + 2) = v5;
  *((void *)v30 + 3) = v4;
  *((void *)v30 + 4) = v25;
  *((void *)v30 + 5) = v24;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v30[v29], v26, v27);
  swift_retain();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
  unint64_t v32 = lazy protocol witness table accessor for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>();
  uint64_t v33 = Publisher<>.sink(receiveValue:)( partial apply for closure #1 in FilteredBluetoothScanner.init(scanner:config:),  v30,  v31,  v32);
  swift_release(v30);
  swift_release(v42[0]);
  swift_beginAccess(v19, v42, 33LL, 0LL);
  AnyCancellable.store(in:)(v19);
  swift_endAccess(v42);
  swift_release(v33);
  return v41;
}

uint64_t type metadata accessor for FilteredBluetoothScanner.FilteredDevice( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FilteredBluetoothScanner.FilteredDevice);
}

uint64_t sub_10007F978@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10007F9A8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_10007F9D8()
{
  return 16LL;
}

__n128 sub_10007F9E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10007F9F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FA20(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_10007FA50()
{
  return 16LL;
}

__n128 sub_10007FA5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10007FA68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result;
  return result;
}

uint64_t sub_10007FA98(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_10007FAC8()
{
  return 16LL;
}

__n128 sub_10007FAD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for FilteredBluetoothScanner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v9[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v5 = type metadata accessor for FilteredBluetoothScanner.FilteredDevice( 255LL,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  a4);
  uint64_t v6 = type metadata accessor for Array(255LL, v5);
  uint64_t result = type metadata accessor for CurrentSubject(319LL, v6);
  if (v8 <= 0x3F)
  {
    void v9[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v9, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for FilteredBluetoothScanner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FilteredBluetoothScanner);
}

uint64_t type metadata instantiation function for FilteredBluetoothScanner.FilteredDevice( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t destroy for FilteredBluetoothScanner.FilteredDevice(uint64_t a1)
{
  return swift_unknownObjectRelease(*(void *)(a1 + 16));
}

void *initializeBufferWithCopyOfBuffer for FilteredBluetoothScanner.FilteredDevice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  return a1;
}

void *assignWithCopy for FilteredBluetoothScanner.FilteredDevice(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for FilteredBluetoothScanner.FilteredDevice(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilteredBluetoothScanner.FilteredDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilteredBluetoothScanner.FilteredDevice( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10007FD38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007FD5C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *((void *)v0 + 3),  *((void *)v0 + 2),  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config);
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for DeviceFilter,  &associated type descriptor for DeviceFilter.Config)
                                      - 8)
                          + 80LL);
  return closure #1 in FilteredBluetoothScanner.init(scanner:config:)( a1,  v1[4],  v1[5],  (uint64_t)v1 + ((v5 + 48) & ~v5),  v3,  v4);
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>);
  }

  return result;
}

uint64_t partial apply for closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)@<X0>( uint64_t *a1@<X8>)
{
  return closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)(v1, a1);
}

uint64_t sub_10007FEC0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( uint64_t a1)
{
  return specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( a1,  *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)( void *a1)
{
  uint64_t v2 = *(void **)(v1 + 32);
  uint64_t v3 = a1[1];
  uint64_t v4 = v2[1];
  if (*v2 == *a1 && v4 == v3) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*v2, v4, *a1, v3, 0LL) & 1;
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.makeAsyncIterator()(uint64_t a1)
{
  v9[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  swift_retain();
  uint64_t v4 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v3 + 24) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = 0LL;
  *(void *)(v3 + 72) = static Subscribers.Demand.none.getter();
  *uint64_t v4 = 0;
  v9[0] = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v6 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner,  &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner,  (uint64_t)&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner);
  Publisher.subscribe<A>(_:)(v9, v5, v2, v6, v7);
  swift_release(a1);
  return v3;
}

void NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(os_log_s *a1, void *a2)
{
  uint64_t v203 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v196 = *(v203 - 1);
  __chkstk_darwin(v203, v5);
  v195 = (char *)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v207 = (char **)type metadata accessor for UUID(0LL);
  v200 = (void (*)(char *, char **))*(v207 - 1);
  uint64_t v8 = __chkstk_darwin(v207, v7);
  uint64_t v10 = (char *)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v193 = (char *)&v186 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v186 - v16;
  __chkstk_darwin(v15, v18);
  v206 = (char *)&v186 - v19;
  v205 = (uint64_t (*)(void))type metadata accessor for NearbyGroup_Group(0LL);
  uint64_t v21 = __chkstk_darwin(v205, v20);
  uint64_t v23 = (char *)&v186 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)&v186 - v26;
  uint64_t v28 = *(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)a1) + 0xB0LL);
  v204 = a1;
  uint64_t v29 = v28(v25);
  uint64_t v30 = v29;
  if ((v29 & 0xC000000000000001LL) != 0)
  {
    if (v29 >= 0) {
      v29 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v31 = __CocoaSet.count.getter(v29);
  }

  else
  {
    uint64_t v31 = *(void *)(v29 + 16);
  }

  uint64_t v32 = swift_bridgeObjectRelease(v30);
  if (!v31)
  {
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    __swift_project_value_buffer((uint64_t)v203, (uint64_t)static Log.host);
    uint64_t v45 = v202;
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v207 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v48 = 138412290;
      v210 = (os_log_s *)v45;
      id v49 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v48 + 4, v48 + 12);
      uint64_t v50 = v207;
      *v207 = v45;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%@ asked to distribute add to nobody else.", v48, 0xCu);
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v50, 1LL, v51);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
    }

    return;
  }

  uint64_t v198 = v10;
  __chkstk_darwin(v32, v33);
  uint64_t v184 = v204;
  v185 = a2;
  uint64_t v34 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group,  type metadata accessor for NearbyGroup_Group,  (uint64_t)&protocol conformance descriptor for NearbyGroup_Group);
  v201 = v27;
  uint64_t v197 = v34;
  uint64_t v35 = static Message.with(_:)( partial apply for closure #1 in NearbyGroupHostIDSService.distributeAdd(for:addingMember:),  &v186 - 4,  v205,  v34);
  uint64_t v36 = v2;
  uint64_t v37 = v28(v35);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject(v38, v216);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AAE90;
  *(void *)(inited + 32) = a2;
  v210 = (os_log_s *)inited;
  specialized Array._endMutation()(inited);
  uint64_t v40 = (uint64_t)v210;
  if ((v37 & 0xC000000000000001LL) != 0)
  {
    if (v37 < 0) {
      uint64_t v41 = v37;
    }
    else {
      uint64_t v41 = v37 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v42 = a2;
    swift_bridgeObjectRetain(v37);
    uint64_t v43 = __CocoaSet.count.getter(v41);
    Swift::Int v44 = specialized _NativeSet.init(_:capacity:)(v41, v43);
    swift_bridgeObjectRelease(v37);
    uint64_t v37 = v44;
  }

  else
  {
    id v52 = a2;
  }

  uint64_t v53 = v207;
  id v54 = v202;
  unint64_t v55 = (unint64_t)specialized _NativeSet.subtracting<A>(_:)(v40, v37);
  uint64_t v56 = swift_bridgeObjectRelease(v40);
  unint64_t v57 = v206;
  UUID.init()(v56);
  __n128 v58 = v200;
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v59 = __swift_project_value_buffer((uint64_t)v203, (uint64_t)static Log.host);
  v191 = (void (*)(char *, char *, char **))*((void *)v58 + 2);
  v191(v17, v57, v53);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v201,  (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);
  id v60 = v54;
  swift_retain_n(v55);
  uint64_t v61 = (char *)v60;
  uint64_t v194 = v59;
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.default.getter();
  int v192 = v63;
  BOOL v64 = os_log_type_enabled(v62, v63);
  uint64_t v199 = v36;
  uint64_t v202 = v61;
  if (v64)
  {
    uint64_t v65 = swift_slowAlloc(42LL, -1LL);
    uint64_t v66 = swift_slowAlloc(8LL, -1LL);
    uint64_t v187 = v23;
    uint64_t v67 = (void *)v66;
    uint64_t v188 = v66;
    v190 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
    v210 = v190;
    *(_DWORD *)uint64_t v65 = 138413058;
    os_log_t v189 = v62;
    id v214 = v61;
    char v68 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v65 + 4, v65 + 12);
    *uint64_t v67 = v61;

    *(_WORD *)(v65 + 12) = 2080;
    uint64_t v69 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v207, v69);
    unint64_t v72 = v71;
    id v214 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease(v72);
    uint64_t v73 = (void (*)(char *, char **))*((void *)v200 + 1);
    v73(v17, v207);
    *(_WORD *)(v65 + 22) = 2080;
    uint64_t v74 = (uint64_t)v187;
    uint64_t v75 = Message.debugDescription.getter(v205, v197);
    unint64_t v77 = v76;
    id v214 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v65 + 24, v65 + 32);
    swift_bridgeObjectRelease(v77);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v74,  type metadata accessor for NearbyGroup_Group);
    *(_WORD *)(v65 + 32) = 2080;
    uint64_t v53 = v207;
    type metadata accessor for NearbyGroupMember(0LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    swift_retain();
    uint64_t v79 = Set.description.getter(v78);
    unint64_t v81 = v80;
    swift_release(v55);
    id v214 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v65 + 34, v65 + 42);
    swift_release_n(v55);
    swift_bridgeObjectRelease(v81);
    os_log_t v82 = v189;
    _os_log_impl( (void *)&_mh_execute_header,  v189,  (os_log_type_t)v192,  "%@ Distributing addMember event (%s) %s to %s",  (uint8_t *)v65,  0x2Au);
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v84 = v188;
    swift_arrayDestroy(v188, 1LL, v83);
    swift_slowDealloc(v84, -1LL, -1LL);
    uint64_t v85 = v190;
    swift_arrayDestroy(v190, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1LL, -1LL);
    uint64_t v86 = v65;
    unint64_t v57 = v206;
    swift_slowDealloc(v86, -1LL, -1LL);
  }

  else
  {

    uint64_t v73 = (void (*)(char *, char **))*((void *)v58 + 1);
    v73(v17, v53);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);

    swift_release_n(v55);
  }

  uint64_t v87 = v198;
  if ((v55 & 0xC000000000000001LL) != 0)
  {
    if (__CocoaSet.count.getter(v55)) {
      goto LABEL_24;
    }
LABEL_30:
    swift_release(v55);
    v191(v87, v57, v53);
    uint64_t v115 = v57;
    unint64_t v116 = v202;
    int v117 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v119 = swift_slowAlloc(22LL, -1LL);
      uint64_t v120 = swift_slowAlloc(8LL, -1LL);
      v204 = v117;
      uint64_t v121 = (void *)v120;
      v205 = (uint64_t (*)(void))swift_slowAlloc(32LL, -1LL);
      v210 = (os_log_s *)v205;
      *(_DWORD *)uint64_t v119 = 138412546;
      v200 = v73;
      id v214 = v116;
      uint64_t v122 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v119 + 4, v119 + 12);
      uint64_t v123 = v121;
      *uint64_t v121 = v116;

      *(_WORD *)(v119 + 12) = 2080;
      uint64_t v124 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v125 = v207;
      uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter(v207, v124);
      unint64_t v128 = v127;
      id v214 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v119 + 14, v119 + 22);
      swift_bridgeObjectRelease(v128);
      unint64_t v129 = v200;
      v200(v87, v125);
      uint64_t v130 = v204;
      _os_log_impl( (void *)&_mh_execute_header,  v204,  v118,  "%@ Not distributing addMember event %s since there are no destinations",  (uint8_t *)v119,  0x16u);
      uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v123, 1LL, v131);
      swift_slowDealloc(v123, -1LL, -1LL);
      uint64_t v132 = v205;
      swift_arrayDestroy(v205, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v132, -1LL, -1LL);
      swift_slowDealloc(v119, -1LL, -1LL);

      v129(v206, v125);
    }

    else
    {

      v73(v87, v53);
      v73(v115, v53);
    }

    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v201,  type metadata accessor for NearbyGroup_Group);
    return;
  }

  if (!*(void *)(v55 + 16)) {
    goto LABEL_30;
  }
LABEL_24:
  uint64_t v198 = (char *)v55;
  v200 = v73;
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t v89 = swift_initStackObject(v88, v215);
  *(_OWORD *)(v89 + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  *(void *)(v89 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPublicMessageIntentKey);
  *(void *)(v89 + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v90;
  *(NSNumber *)(v89 + 48) = Int._bridgeToObjectiveC()();
  *(void *)(v89 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionAlwaysSkipSelfKey);
  *(void *)(v89 + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v91;
  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(v89 + 72) = NSNumber.init(BOOLeanLiteral:)(1);
  *(void *)(v89 + 8NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFromIDKey);
  *(void *)(v89 + 88) = v92;
  uint64_t v93 = *(void (**)(void))((swift_isaMask & *(void *)v204) + 0xF8LL);
  v93();
  uint64_t v95 = v94;
  NSString v96 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v95);
  uint64_t v97 = IDSCopyBestGuessIDForID(v96);

  if (v97)
  {
    *(void *)(v89 + 96) = v97;
    unint64_t v98 = specialized Dictionary.init(dictionaryLiteral:)(v89);
    id v99 = v202;
    unint64_t v100 = &v202[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
    uint64_t v101 = *(void *)&v202[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                          + 32];
    __swift_project_boxed_opaque_existential_1( &v202[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service],  *(void *)&v202[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service + 24]);
    uint64_t v102 = ((uint64_t (*)(void))v93)();
    uint64_t v103 = v93;
    uint64_t v105 = v104;
    uint64_t v106 = (*(uint64_t (**)(uint64_t))(v101 + 56))(v102);
    swift_bridgeObjectRelease(v105);
    if (v106)
    {
      unint64_t v107 = v98;
      uint64_t v108 = (void *)v106;
      id v214 = 0LL;
      outlined init with copy of PseudonymProtocol((uint64_t)v100, (uint64_t)&v210);
      uint64_t v109 = v212;
      __n128 v110 = v213;
      __swift_project_boxed_opaque_existential_1(&v210, v212);
      uint64_t v111 = (uint64_t)v201;
      uint64_t v112 = v199;
      uint64_t v113 = Message.serializedData(partial:)(0LL, v205, v197);
      if (v112)
      {
        swift_release(v198);

        swift_bridgeObjectRelease(v98);
        v200(v206, v207);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v111,  type metadata accessor for NearbyGroup_Group);
        __swift_destroy_boxed_opaque_existential_0Tm(&v210);
LABEL_28:

        return;
      }

      uint64_t v147 = v113;
      unint64_t v148 = v114;
      uint64_t v149 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v98);
      uint64_t v199 = 0LL;
      uint64_t v150 = v149;
      swift_bridgeObjectRelease(v107);
      id v209 = 0LL;
      uint64_t v151 = (void (*)(uint64_t, unint64_t, void *, char *, uint64_t, uint64_t, id *, uint64_t, os_log_s *))*((void *)v110 + 6);
      uint64_t v184 = v110;
      uint64_t v152 = v198;
      uint64_t v153 = v199;
      v151(v147, v148, v108, v198, 300LL, v150, &v209, v109, v184);
      if (v153)
      {
        swift_bridgeObjectRelease(v150);
        outlined consume of Data._Representation(v147, v148);
        swift_release(v152);

        v200(v206, v207);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v201,  type metadata accessor for NearbyGroup_Group);
        id v154 = v214;
        id v155 = v209;

        __swift_destroy_boxed_opaque_existential_0Tm(&v210);
      }

      else
      {
        swift_bridgeObjectRelease(v150);
        outlined consume of Data._Representation(v147, v148);
        swift_release(v152);
        id v214 = v209;
        id v159 = v209;
        __swift_destroy_boxed_opaque_existential_0Tm(&v210);
        uint64_t v160 = v196;
        v161 = v195;
        uint64_t v162 = v203;
        (*(void (**)(char *, uint64_t, void *))(v196 + 16))(v195, v194, v203);
        uint64_t v163 = v193;
        unint64_t v164 = v206;
        uint64_t v165 = v207;
        uint64_t v166 = ((uint64_t (*)(char *, char *, char **))v191)(v193, v206, v207);
        uint64_t v167 = (os_log_s *)Logger.logObject.getter(v166);
        LODWORD(v205) = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v167, (os_log_type_t)v205))
        {
          uint64_t v168 = swift_slowAlloc(22LL, -1LL);
          uint64_t v169 = (void *)swift_slowAlloc(64LL, -1LL);
          id v209 = v169;
          *(_DWORD *)uint64_t v168 = 136315394;
          uint64_t v170 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(v165, v170);
          unint64_t v173 = v172;
          v210 = (os_log_s *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v172, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v168 + 4, v168 + 12);
          swift_bridgeObjectRelease(v173);
          v200(v163, v165);
          *(_WORD *)(v168 + 12) = 2080;
          swift_beginAccess(&v214, &v210, 0LL, 0LL);
          id v174 = v214;
          if (v214)
          {
            uint64_t v208 = (uint64_t)v214;
            uint64_t v175 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
            id v176 = v174;
            uint64_t v177 = String.init<A>(reflecting:)(&v208, v175);
            unint64_t v179 = v178;
          }

          else
          {
            unint64_t v179 = 0xE300000000000000LL;
            uint64_t v177 = 7104878LL;
          }

          uint64_t v182 = (uint64_t)v201;
          uint64_t v183 = v195;
          uint64_t v208 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, v179, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, &v209, v168 + 14, v168 + 22);
          swift_bridgeObjectRelease(v179);
          _os_log_impl( (void *)&_mh_execute_header,  v167,  (os_log_type_t)v205,  "Distribution of addMember event (%s) sent with ID %s",  (uint8_t *)v168,  0x16u);
          swift_arrayDestroy(v169, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v169, -1LL, -1LL);
          swift_slowDealloc(v168, -1LL, -1LL);

          (*(void (**)(char *, void *))(v196 + 8))(v183, v203);
          v200(v206, v207);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v182,  type metadata accessor for NearbyGroup_Group);
          goto LABEL_28;
        }

        uint64_t v180 = v163;
        uint64_t v181 = v200;
        v200(v180, v165);
        (*(void (**)(char *, void *))(v160 + 8))(v161, v162);
        v181(v164, v165);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v201,  type metadata accessor for NearbyGroup_Group);
      }
    }

    else
    {
      v205 = (uint64_t (*)(void))v103;
      swift_bridgeObjectRelease(v98);
      swift_release(v198);
      id v133 = v99;
      uint64_t v134 = v204;
      id v135 = v133;
      uint64_t v136 = v134;
      uint64_t v137 = (os_log_s *)Logger.logObject.getter(v136);
      os_log_type_t v138 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v137, v138))
      {
        uint64_t v139 = swift_slowAlloc(22LL, -1LL);
        uint64_t v203 = (void *)swift_slowAlloc(8LL, -1LL);
        v204 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
        v210 = v204;
        *(_DWORD *)uint64_t v139 = 138412546;
        id v214 = v135;
        id v140 = v135;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v139 + 4, v139 + 12);
        os_log_type_t v141 = v203;
        *uint64_t v203 = v135;

        *(_WORD *)(v139 + 12) = 2080;
        uint64_t v142 = v205();
        unint64_t v144 = v143;
        id v214 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215, v139 + 14, v139 + 22);

        swift_bridgeObjectRelease(v144);
        _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "%@ couldn't find account to send message from with handle: %s",  (uint8_t *)v139,  0x16u);
        uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v141, 1LL, v145);
        swift_slowDealloc(v141, -1LL, -1LL);
        uint64_t v146 = v204;
        swift_arrayDestroy(v204, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v146, -1LL, -1LL);
        swift_slowDealloc(v139, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v156 = v206;
      unint64_t v157 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError(&type metadata for NearbyGroupHostIDSService.Errors, v157, 0LL, 0LL);
      _BYTE *v158 = 1;
      swift_willThrow();
      v200(v156, v207);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v201,  type metadata accessor for NearbyGroup_Group);
    }
  }

  else
  {
    __break(1u);
  }

void NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  id v174 = (char *)&v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v166 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v166 - v15;
  uint64_t v186 = (void *)type metadata accessor for NearbyGroup_Group(0LL);
  uint64_t v18 = __chkstk_darwin(v186, v17);
  uint64_t v20 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v166 - v22;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    if (__CocoaSet.count.getter(v24)) {
      goto LABEL_6;
    }
  }

  else if (*(void *)(a2 + 16))
  {
LABEL_6:
    id v178 = v2;
    uint64_t v181 = a2;
    uint64_t v185 = v5;
    uint64_t v25 = *a1;
    uint64_t v184 = v23;
    uint64_t v182 = v16;
    uint64_t v180 = *(uint64_t (**)(void))((swift_isaMask & v25) + 0xF8);
    uint64_t v26 = v180();
    uint64_t v28 = v27;
    uint64_t v29 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x100LL))();
    uint64_t v31 = v30;
    Class v172 = (Class)type metadata accessor for NearbyGroupMember(0LL);
    id v32 = objc_allocWithZone(v172);
    uint64_t v33 = v28;
    uint64_t v34 = v31;
    uint64_t v35 = v182;
    uint64_t v36 = (uint64_t)v184;
    uint64_t v37 = NearbyGroupMember.init(handle:tokenID:)(v26, v33, v29, v34);
    unint64_t v164 = a1;
    uint64_t v165 = (void *)__chkstk_darwin(v37, v38);
    id v176 = v165;
    uint64_t v179 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group,  type metadata accessor for NearbyGroup_Group,  (uint64_t)&protocol conformance descriptor for NearbyGroup_Group);
    uint64_t v39 = v183;
    uint64_t v40 = static Message.with(_:)( partial apply for closure #1 in NearbyGroupHostIDSService.distributeGroupInitialization(for:to:),  &v166 - 4,  v186,  v179);
    unint64_t v173 = v39;
    UUID.init()(v40);
    if (one-time initialization token for host != -1) {
      swift_once(&one-time initialization token for host, one-time initialization function for host);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)static Log.host);
    uint64_t v43 = v185;
    uint64_t v170 = *(void (**)(void, void, void))(v6 + 16);
    v170(v13, v35, v185);
    uint64_t v177 = v20;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( v36,  (uint64_t)v20,  type metadata accessor for NearbyGroup_Group);
    id v44 = v178;
    uint64_t v45 = a1;
    uint64_t v46 = v181;
    swift_bridgeObjectRetain_n(v181, 2LL);
    os_log_type_t v47 = (char *)v44;
    uint64_t v48 = v45;
    uint64_t v171 = v42;
    id v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    int v51 = v50;
    BOOL v52 = os_log_type_enabled(v49, v50);
    uint64_t v175 = v47;
    if (v52)
    {
      uint64_t v53 = swift_slowAlloc(52LL, -1LL);
      int v168 = v51;
      id v54 = v47;
      uint64_t v55 = v53;
      uint64_t v56 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v169 = swift_slowAlloc(128LL, -1LL);
      uint64_t v189 = v169;
      *(_DWORD *)uint64_t v55 = 138413314;
      os_log_t v167 = v49;
      uint64_t v183 = v48;
      id v193 = v54;
      id v57 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v55 + 4, v55 + 12);
      void *v56 = v54;

      *(_WORD *)(v55 + 12) = 2080;
      uint64_t v58 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v59 = v185;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v185, v58);
      unint64_t v62 = v61;
      id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v62);
      id v178 = *(id *)(v6 + 8);
      ((void (*)(char *, uint64_t))v178)(v13, v59);
      *(_WORD *)(v55 + 22) = 2080;
      uint64_t v63 = (uint64_t)v177;
      uint64_t v64 = Message.debugDescription.getter(v186, v179);
      unint64_t v66 = v65;
      id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v55 + 24, v55 + 32);
      swift_bridgeObjectRelease(v66);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v63,  type metadata accessor for NearbyGroup_Group);
      *(_WORD *)(v55 + 32) = 2080;
      id v67 = [v183 description];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      unint64_t v70 = v69;

      id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v55 + 34, v55 + 42);

      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v55 + 42) = 2080;
      uint64_t v48 = v183;
      uint64_t v71 = v181;
      lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
      __n128 v72 = swift_bridgeObjectRetain(v71);
      uint64_t v73 = Set.description.getter(v72);
      unint64_t v75 = v74;
      swift_bridgeObjectRelease(v71);
      id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v55 + 44, v55 + 52);
      swift_bridgeObjectRelease_n(v71, 2LL);
      swift_bridgeObjectRelease(v75);
      os_log_t v76 = v167;
      _os_log_impl( (void *)&_mh_execute_header,  v167,  (os_log_type_t)v168,  "%@ Distributing initialization event (%s) %s to %s and members %s",  (uint8_t *)v55,  0x34u);
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v56, 1LL, v77);
      swift_slowDealloc(v56, -1LL, -1LL);
      uint64_t v78 = v169;
      swift_arrayDestroy(v169, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      os_log_type_t v47 = v175;
    }

    else
    {

      id v178 = *(id *)(v6 + 8);
      ((void (*)(char *, uint64_t))v178)(v13, v43);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v177,  type metadata accessor for NearbyGroup_Group);

      swift_bridgeObjectRelease_n(v46, 2LL);
    }

    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
    uint64_t inited = swift_initStackObject(v87, v194);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPublicMessageIntentKey);
    *(void *)(inited + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v89;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionAlwaysSkipSelfKey);
    *(void *)(inited + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v90;
    type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
    *(void *)(inited + 8NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFromIDKey);
    *(void *)(inited + 88) = v91;
    uint64_t v92 = v180;
    v180();
    uint64_t v94 = v93;
    NSString v95 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v94);
    uint64_t v96 = IDSCopyBestGuessIDForID(v95);

    if (v96)
    {
      *(void *)(inited + 96) = v96;
      unint64_t v97 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      uint64_t v98 = (uint64_t)&v47[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
      uint64_t v99 = *(void *)&v47[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                          + 32];
      __swift_project_boxed_opaque_existential_1( &v47[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service],  *(void *)&v47[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service + 24]);
      unint64_t v100 = v48;
      uint64_t v101 = v92();
      uint64_t v103 = v102;
      uint64_t v104 = (char **)(*(uint64_t (**)(uint64_t))(v99 + 56))(v101);
      swift_bridgeObjectRelease(v103);
      if (v104)
      {
        uint64_t v183 = v104;
        id v193 = 0LL;
        outlined init with copy of PseudonymProtocol(v98, (uint64_t)&v189);
        uint64_t v106 = v191;
        uint64_t v105 = v192;
        __swift_project_boxed_opaque_existential_1(&v189, v191);
        uint64_t v107 = (uint64_t)v184;
        uint64_t v108 = v173;
        uint64_t v109 = Message.serializedData(partial:)(0LL, v186, v179);
        if (v108)
        {

          swift_bridgeObjectRelease(v97);
          ((void (*)(char *, uint64_t))v178)(v182, v185);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v107,  type metadata accessor for NearbyGroup_Group);
          __swift_destroy_boxed_opaque_existential_0Tm(&v189);
        }

        else
        {
          uint64_t v126 = v109;
          unint64_t v127 = v110;
          uint64_t v128 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v97);
          swift_bridgeObjectRelease(v97);
          id v188 = 0LL;
          unint64_t v129 = (void (*)(void, void, void, void, void, void, void, void, void))v105[6];
          unint64_t v164 = v105;
          uint64_t v130 = v181;
          v129(v126, v127, v183, v181, 300LL, v128, &v188, v106, v164);
          swift_bridgeObjectRelease(v128);
          outlined consume of Data._Representation(v126, v127);
          id v193 = v188;
          id v135 = v188;
          __swift_destroy_boxed_opaque_existential_0Tm(&v189);
          uint64_t v136 = v174;
          uint64_t v137 = v182;
          uint64_t v138 = v185;
          v170(v174, v182, v185);
          uint64_t v139 = swift_bridgeObjectRetain_n(v130, 2LL);
          id v140 = (os_log_s *)Logger.logObject.getter(v139);
          os_log_type_t v141 = static os_log_type_t.default.getter();
          BOOL v142 = os_log_type_enabled(v140, v141);
          uint64_t v143 = (uint64_t)v184;
          if (v142)
          {
            uint64_t v144 = swift_slowAlloc(32LL, -1LL);
            uint64_t v186 = (void *)swift_slowAlloc(96LL, -1LL);
            id v188 = v186;
            *(_DWORD *)uint64_t v144 = 136315650;
            uint64_t v145 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter(v138, v145);
            unint64_t v148 = v147;
            uint64_t v189 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v147, (uint64_t *)&v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v144 + 4, v144 + 12);
            swift_bridgeObjectRelease(v148);
            ((void (*)(char *, uint64_t))v178)(v136, v138);
            *(_WORD *)(v144 + 12) = 2080;
            swift_beginAccess(&v193, &v189, 0LL, 0LL);
            id v149 = v193;
            if (v193)
            {
              uint64_t v187 = (uint64_t)v193;
              uint64_t v150 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
              id v151 = v149;
              uint64_t v152 = String.init<A>(reflecting:)(&v187, v150);
              unint64_t v154 = v153;
            }

            else
            {
              unint64_t v154 = 0xE300000000000000LL;
              uint64_t v152 = 7104878LL;
            }

            uint64_t v157 = v181;
            uint64_t v187 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v154, (uint64_t *)&v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v144 + 14, v144 + 22);
            swift_bridgeObjectRelease(v154);
            *(_WORD *)(v144 + 22) = 2080;
            lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
            __n128 v158 = swift_bridgeObjectRetain(v157);
            uint64_t v159 = Set.description.getter(v158);
            uint64_t v160 = v157;
            unint64_t v162 = v161;
            swift_bridgeObjectRelease(v160);
            uint64_t v187 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v162, (uint64_t *)&v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v144 + 24, v144 + 32);
            swift_bridgeObjectRelease_n(v160, 2LL);
            swift_bridgeObjectRelease(v162);
            _os_log_impl( (void *)&_mh_execute_header,  v140,  v141,  "Distribution of initialization event (%s) sent with ID %s and to members: %s",  (uint8_t *)v144,  0x20u);
            uint64_t v163 = v186;
            swift_arrayDestroy(v186, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v163, -1LL, -1LL);
            swift_slowDealloc(v144, -1LL, -1LL);

            ((void (*)(char *, uint64_t))v178)(v182, v185);
            uint64_t v156 = (uint64_t)v184;
          }

          else
          {
            swift_bridgeObjectRelease_n(v130, 2LL);

            id v155 = (void (*)(void, void))v178;
            ((void (*)(char *, uint64_t))v178)(v136, v138);
            v155(v137, v138);
            uint64_t v156 = v143;
          }

          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v156,  type metadata accessor for NearbyGroup_Group);
        }
      }

      else
      {
        swift_bridgeObjectRelease(v97);
        uint64_t v111 = v175;
        uint64_t v112 = v100;
        uint64_t v113 = v111;
        unint64_t v114 = v112;
        uint64_t v115 = (os_log_s *)Logger.logObject.getter((char **)v114);
        os_log_type_t v116 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = swift_slowAlloc(22LL, -1LL);
          uint64_t v183 = (char **)swift_slowAlloc(8LL, -1LL);
          uint64_t v186 = (void *)swift_slowAlloc(32LL, -1LL);
          uint64_t v189 = (uint64_t)v186;
          *(_DWORD *)uint64_t v117 = 138412546;
          id v193 = v113;
          os_log_type_t v118 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v117 + 4, v117 + 12);
          uint64_t v119 = v183;
          char *v183 = v113;

          *(_WORD *)(v117 + 12) = 2080;
          uint64_t v120 = v180();
          unint64_t v122 = v121;
          id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v117 + 14, v117 + 22);

          swift_bridgeObjectRelease(v122);
          uint64_t v123 = v115;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  v116,  "%@ couldn't find account to send message from with handle: %s",  (uint8_t *)v117,  0x16u);
          uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy(v119, 1LL, v124);
          swift_slowDealloc(v119, -1LL, -1LL);
          uint64_t v125 = v186;
          swift_arrayDestroy(v186, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v125, -1LL, -1LL);
          swift_slowDealloc(v117, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v131 = (uint64_t)v184;
        uint64_t v132 = v182;
        unint64_t v133 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
        swift_allocError(&type metadata for NearbyGroupHostIDSService.Errors, v133, 0LL, 0LL);
        *uint64_t v134 = 1;
        swift_willThrow();

        ((void (*)(char *, uint64_t))v178)(v132, v185);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v131,  type metadata accessor for NearbyGroup_Group);
      }
    }

    else
    {
      __break(1u);
    }

    return;
  }

  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v79 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v79, (uint64_t)static Log.host);
  id v80 = v2;
  unint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  os_log_type_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v84 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v83 = 138412290;
    uint64_t v189 = (uint64_t)v80;
    id v85 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v83 + 4, v83 + 12);
    void *v84 = v80;

    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "%@ asked to distribute initialization to nobody else.",  v83,  0xCu);
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v84, 1LL, v86);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {
  }

void NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v169 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  int v168 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v183 - 8);
  uint64_t v9 = __chkstk_darwin(v183, v8);
  id v178 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  os_log_t v167 = (char *)&v162 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v182 = (char *)&v162 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v162 - v18;
  uint64_t v20 = (os_log_s *)type metadata accessor for NearbyGroup_Group(0LL);
  uint64_t v21 = __chkstk_darwin(v20, type metadata accessor for NearbyGroup_Group);
  uint64_t v23 = (char *)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v162 - v25;
  v186[2] = a1;
  v186[3] = a2;
  uint64_t v175 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group,  v27,  (uint64_t)&protocol conformance descriptor for NearbyGroup_Group);
  os_log_t v176 = v20;
  uint64_t v28 = v181;
  uint64_t v29 = static Message.with(_:)( partial apply for closure #1 in NearbyGroupHostIDSService.distributeRemove(for:removingMember:),  v186,  v20,  v175);
  uint64_t v181 = v28;
  uint64_t v30 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB0LL);
  id v174 = a1;
  uint64_t v185 = v30(v29);
  specialized Set._Variant.insert(_:)((Swift::Int *)&v189, a2);

  UUID.init()(v31);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v32 = __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v33 = v183;
  uint64_t v171 = *(void (**)(void, void, void))(v7 + 16);
  v171(v182, v19, v183);
  uint64_t v177 = v26;
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v26,  (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);
  uint64_t v34 = v179;
  uint64_t v173 = v32;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter();
  int v172 = v36;
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = (uint64_t)v23;
  uint64_t v179 = v34;
  uint64_t v180 = v19;
  uint64_t v170 = v4;
  if (v37)
  {
    uint64_t v39 = swift_slowAlloc(42LL, -1LL);
    uint64_t v163 = v23;
    uint64_t v40 = v39;
    uint64_t v41 = (char **)swift_slowAlloc(8LL, -1LL);
    unint64_t v164 = v41;
    uint64_t v166 = (void *)swift_slowAlloc(96LL, -1LL);
    id v189 = v166;
    *(_DWORD *)uint64_t v40 = 138413058;
    os_log_t v165 = v35;
    uint64_t v195 = (uint64_t)v34;
    uint64_t v42 = v7;
    uint64_t v43 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v40 + 4, v40 + 12);
    void *v41 = v179;

    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v44 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v45 = v182;
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v183, v44);
    unint64_t v48 = v47;
    uint64_t v195 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease(v48);
    id v49 = *(char **)(v42 + 8);
    ((void (*)(char *, uint64_t))v49)(v45, v183);
    *(_WORD *)(v40 + 22) = 2080;
    uint64_t v50 = (uint64_t)v163;
    uint64_t v51 = Message.debugDescription.getter(v176, v175);
    unint64_t v53 = v52;
    uint64_t v195 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v40 + 24, v40 + 32);
    swift_bridgeObjectRelease(v53);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v50,  type metadata accessor for NearbyGroup_Group);
    *(_WORD *)(v40 + 32) = 2080;
    swift_beginAccess(&v185, &v187, 0LL, 0LL);
    uint64_t v54 = v185;
    type metadata accessor for NearbyGroupMember(0LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    __n128 v55 = swift_bridgeObjectRetain(v54);
    uint64_t v56 = Set.description.getter(v55);
    unint64_t v58 = v57;
    swift_bridgeObjectRelease(v54);
    uint64_t v59 = v56;
    uint64_t v19 = v180;
    uint64_t v195 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v58, (uint64_t *)&v189);
    uint64_t v33 = v183;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v40 + 34, v40 + 42);
    uint64_t v34 = v179;
    swift_bridgeObjectRelease(v58);
    uint64_t v35 = v165;
    _os_log_impl( (void *)&_mh_execute_header,  v165,  (os_log_type_t)v172,  "%@ Distributing removeMember event (%s) %s to %s",  (uint8_t *)v40,  0x2Au);
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    unint64_t v61 = v164;
    swift_arrayDestroy(v164, 1LL, v60);
    swift_slowDealloc(v61, -1LL, -1LL);
    unint64_t v62 = v166;
    swift_arrayDestroy(v166, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {

    id v49 = *(char **)(v7 + 8);
    ((void (*)(char *, uint64_t))v49)(v182, v33);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v38,  type metadata accessor for NearbyGroup_Group);
  }

  uint64_t v63 = v178;
  swift_beginAccess(&v185, &v195, 0LL, 0LL);
  uint64_t v64 = v185;
  if ((v185 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(v185 + 16)) {
      goto LABEL_11;
    }
LABEL_16:
    v171(v63, v19, v33);
    uint64_t v94 = v34;
    uint64_t v95 = v33;
    uint64_t v96 = v94;
    unint64_t v97 = (os_log_s *)Logger.logObject.getter(v94);
    os_log_type_t v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = swift_slowAlloc(22LL, -1LL);
      unint64_t v100 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v179 = (char *)swift_slowAlloc(32LL, -1LL);
      id v189 = v179;
      *(_DWORD *)uint64_t v99 = 138412546;
      os_log_t v176 = v97;
      uint64_t v182 = v49;
      id v193 = v96;
      uint64_t v101 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v99 + 4, v99 + 12);
      uint64_t v102 = v100;
      *unint64_t v100 = v96;

      *(_WORD *)(v99 + 12) = 2080;
      uint64_t v103 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v104 = v178;
      uint64_t v105 = v183;
      uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter(v183, v103);
      unint64_t v108 = v107;
      id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v99 + 14, v99 + 22);
      swift_bridgeObjectRelease(v108);
      uint64_t v109 = (void (*)(void, void))v182;
      ((void (*)(char *, uint64_t))v182)(v104, v105);
      os_log_t v110 = v176;
      _os_log_impl( (void *)&_mh_execute_header,  v176,  v98,  "%@ Not distributing removeMember event %s since there are no destinations",  (uint8_t *)v99,  0x16u);
      uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v102, 1LL, v111);
      swift_slowDealloc(v102, -1LL, -1LL);
      uint64_t v112 = v179;
      swift_arrayDestroy(v179, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1LL, -1LL);
      swift_slowDealloc(v99, -1LL, -1LL);

      v109(v180, v105);
    }

    else
    {

      ((void (*)(char *, uint64_t))v49)(v63, v95);
      ((void (*)(char *, uint64_t))v49)(v19, v95);
    }

    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v177,  type metadata accessor for NearbyGroup_Group);
LABEL_26:
    swift_bridgeObjectRelease(v185);
    return;
  }

  if (v185 < 0) {
    uint64_t v65 = v185;
  }
  else {
    uint64_t v65 = v185 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v185);
  uint64_t v66 = __CocoaSet.count.getter(v65);
  swift_bridgeObjectRelease(v64);
  if (!v66) {
    goto LABEL_16;
  }
LABEL_11:
  id v67 = v34;
  uint64_t v182 = v49;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject(v68, v194);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPublicMessageIntentKey);
  *(void *)(inited + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v70;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionAlwaysSkipSelfKey);
  *(void *)(inited + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v71;
  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
  *(void *)(inited + 8NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFromIDKey);
  *(void *)(inited + 88) = v72;
  uint64_t v73 = *(void (**)(void))((swift_isaMask & *v174) + 0xF8LL);
  v73();
  uint64_t v75 = v74;
  NSString v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v75);
  uint64_t v77 = IDSCopyBestGuessIDForID(v76);

  if (v77)
  {
    *(void *)(inited + 96) = v77;
    unint64_t v78 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v79 = &v67[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
    uint64_t v80 = *(void *)&v67[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                        + 24];
    uint64_t v81 = *(void *)&v67[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                        + 32];
    __swift_project_boxed_opaque_existential_1(v79, v80);
    uint64_t v82 = ((uint64_t (*)(void))v73)();
    uint64_t v83 = v73;
    uint64_t v85 = v84;
    uint64_t v86 = (char *)(*(uint64_t (**)(uint64_t))(v81 + 56))(v82);
    swift_bridgeObjectRelease(v85);
    if (v86)
    {
      uint64_t v87 = v78;
      uint64_t v179 = v86;
      id v193 = 0LL;
      outlined init with copy of PseudonymProtocol((uint64_t)v79, (uint64_t)&v189);
      uint64_t v88 = v191;
      uint64_t v89 = v192;
      __swift_project_boxed_opaque_existential_1(&v189, v191);
      uint64_t v90 = (uint64_t)v177;
      uint64_t v91 = v181;
      uint64_t v92 = Message.serializedData(partial:)(0LL, v176, v175);
      if (v91)
      {

        swift_bridgeObjectRelease(v78);
        ((void (*)(char *, uint64_t))v182)(v180, v183);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v90,  type metadata accessor for NearbyGroup_Group);
        __swift_destroy_boxed_opaque_existential_0Tm(&v189);
      }

      else
      {
        uint64_t v128 = v92;
        unint64_t v129 = v93;
        uint64_t v181 = 0LL;
        uint64_t v130 = v185;
        swift_bridgeObjectRetain(v185);
        uint64_t v131 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v87);
        swift_bridgeObjectRelease(v87);
        id v188 = 0LL;
        uint64_t v132 = v179;
        unint64_t v133 = v181;
        (*(void (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v89 + 48))( v128,  v129,  v179,  v130,  300LL,  v131,  &v188,  v88,  v89);
        uint64_t v181 = v133;
        if (v133)
        {
          swift_bridgeObjectRelease(v130);
          swift_bridgeObjectRelease(v131);
          outlined consume of Data._Representation(v128, v129);

          ((void (*)(char *, uint64_t))v182)(v180, v183);
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v177,  type metadata accessor for NearbyGroup_Group);
          id v134 = v193;
          id v135 = v188;

          __swift_destroy_boxed_opaque_existential_0Tm(&v189);
        }

        else
        {
          swift_bridgeObjectRelease(v130);
          swift_bridgeObjectRelease(v131);
          outlined consume of Data._Representation(v128, v129);
          id v193 = v188;
          id v139 = v188;
          __swift_destroy_boxed_opaque_existential_0Tm(&v189);
          id v140 = v168;
          uint64_t v141 = v169;
          uint64_t v142 = v170;
          (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v168, v173, v170);
          uint64_t v143 = v167;
          uint64_t v144 = v180;
          uint64_t v145 = v183;
          uint64_t v146 = ((uint64_t (*)(char *, char *, uint64_t))v171)(v167, v180, v183);
          unint64_t v147 = (os_log_s *)Logger.logObject.getter(v146);
          os_log_type_t v148 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v147, v148))
          {
            uint64_t v149 = swift_slowAlloc(22LL, -1LL);
            uint64_t v150 = (void *)swift_slowAlloc(64LL, -1LL);
            id v188 = v150;
            *(_DWORD *)uint64_t v149 = 136315394;
            uint64_t v151 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v152 = dispatch thunk of CustomStringConvertible.description.getter(v145, v151);
            unint64_t v154 = v153;
            id v189 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, (uint64_t *)&v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v149 + 4, v149 + 12);
            swift_bridgeObjectRelease(v154);
            ((void (*)(char *, uint64_t))v182)(v143, v145);
            *(_WORD *)(v149 + 12) = 2080;
            swift_beginAccess(&v193, &v189, 0LL, 0LL);
            id v155 = v193;
            if (v193)
            {
              uint64_t v184 = (uint64_t)v193;
              uint64_t v156 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
              id v157 = v155;
              uint64_t v158 = String.init<A>(reflecting:)(&v184, v156);
              unint64_t v160 = v159;
            }

            else
            {
              unint64_t v160 = 0xE300000000000000LL;
              uint64_t v158 = 7104878LL;
            }

            uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v160, (uint64_t *)&v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, &v185, v149 + 14, v149 + 22);
            swift_bridgeObjectRelease(v160);
            _os_log_impl( (void *)&_mh_execute_header,  v147,  v148,  "Distribution of removeMember event (%s) sent with ID %s",  (uint8_t *)v149,  0x16u);
            swift_arrayDestroy(v150, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v150, -1LL, -1LL);
            swift_slowDealloc(v149, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v169 + 8))(v168, v170);
            ((void (*)(char *, uint64_t))v182)(v180, v145);
          }

          else
          {

            unint64_t v161 = (void (*)(void, void))v182;
            ((void (*)(char *, uint64_t))v182)(v143, v145);
            (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v142);
            v161(v144, v145);
          }

          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v177,  type metadata accessor for NearbyGroup_Group);
        }
      }
    }

    else
    {
      uint64_t v181 = (uint64_t (*)(void))v83;
      swift_bridgeObjectRelease(v78);
      uint64_t v113 = v179;
      unint64_t v114 = v174;
      uint64_t v115 = v113;
      os_log_type_t v116 = v114;
      uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
      os_log_type_t v118 = static os_log_type_t.fault.getter();
      int v119 = v118;
      if (os_log_type_enabled(v117, v118))
      {
        uint64_t v120 = swift_slowAlloc(22LL, -1LL);
        os_log_t v176 = (os_log_t)swift_slowAlloc(8LL, -1LL);
        uint64_t v179 = (char *)swift_slowAlloc(32LL, -1LL);
        id v189 = v179;
        *(_DWORD *)uint64_t v120 = 138412546;
        LODWORD(v178) = v119;
        id v193 = v115;
        unint64_t v121 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v120 + 4, v120 + 12);
        os_log_t v122 = v176;
        *(void *)os_log_t v176 = v115;

        *(_WORD *)(v120 + 12) = 2080;
        uint64_t v123 = v181();
        unint64_t v125 = v124;
        id v193 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, (uint64_t *)&v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v120 + 14, v120 + 22);

        swift_bridgeObjectRelease(v125);
        _os_log_impl( (void *)&_mh_execute_header,  v117,  (os_log_type_t)v178,  "%@ couldn't find account to send message from with handle: %s",  (uint8_t *)v120,  0x16u);
        uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v122, 1LL, v126);
        swift_slowDealloc(v122, -1LL, -1LL);
        unint64_t v127 = v179;
        swift_arrayDestroy(v179, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1LL, -1LL);
        swift_slowDealloc(v120, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v136 = v183;
      unint64_t v137 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError(&type metadata for NearbyGroupHostIDSService.Errors, v137, 0LL, 0LL);
      *uint64_t v138 = 1;
      swift_willThrow();
      ((void (*)(char *, uint64_t))v182)(v180, v136);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v177,  type metadata accessor for NearbyGroup_Group);
    }

    goto LABEL_26;
  }

  __break(1u);
}

void NearbyGroupHostIDSService.distributeLeave(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v152 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v151 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v164 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  id v155 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v150 = (char *)&v146 - v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v146 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v146 - v18;
  uint64_t v20 = type metadata accessor for NearbyGroup_Group(0LL);
  uint64_t v21 = __chkstk_darwin(v20, type metadata accessor for NearbyGroup_Group);
  uint64_t v23 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v146 - v25;
  uint64_t v169 = a1;
  uint64_t v158 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group,  v27,  (uint64_t)&protocol conformance descriptor for NearbyGroup_Group);
  unint64_t v159 = (uint64_t (*)(void))v20;
  uint64_t v28 = v19;
  uint64_t v29 = static Message.with(_:)( partial apply for closure #1 in NearbyGroupHostIDSService.distributeLeave(for:),  v168,  v20,  v158);
  uint64_t v157 = v1;
  uint64_t v30 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB0LL);
  uint64_t v162 = a1;
  uint64_t v166 = v30(v29);
  UUID.init()(v166);
  if (one-time initialization token for host != -1) {
    swift_once(&one-time initialization token for host, one-time initialization function for host);
  }
  uint64_t v153 = v3;
  uint64_t v31 = __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  unint64_t v154 = *(void (**)(char *, char *, uint64_t))(v164 + 16);
  v154(v16, v19, v6);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation( (uint64_t)v26,  (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);
  uint64_t v32 = v160;
  swift_bridgeObjectRetain_n(v166, 2LL);
  uint64_t v33 = v32;
  uint64_t v156 = v31;
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(v34, v35);
  uint64_t v165 = v6;
  unint64_t v161 = v26;
  uint64_t v163 = v19;
  unint64_t v160 = v33;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc(42LL, -1LL);
    int v148 = v36;
    uint64_t v39 = v38;
    uint64_t v40 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v149 = swift_slowAlloc(96LL, -1LL);
    uint64_t v171 = v149;
    *(_DWORD *)uint64_t v39 = 138413058;
    os_log_t v147 = v34;
    id v175 = v33;
    uint64_t v41 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v39 + 4, v39 + 12);
    char *v40 = v33;
    uint64_t v42 = v40;
    uint64_t v43 = v166;

    *(_WORD *)(v39 + 12) = 2080;
    uint64_t v44 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v165, v44);
    unint64_t v47 = v46;
    id v175 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease(v47);
    uint64_t v164 = *(void *)(v164 + 8);
    ((void (*)(char *, uint64_t))v164)(v16, v165);
    *(_WORD *)(v39 + 22) = 2080;
    uint64_t v48 = Message.debugDescription.getter(v159, v158);
    unint64_t v50 = v49;
    id v175 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v39 + 24, v39 + 32);
    swift_bridgeObjectRelease(v50);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);
    *(_WORD *)(v39 + 32) = 2080;
    type metadata accessor for NearbyGroupMember(0LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroupMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    __n128 v51 = swift_bridgeObjectRetain(v43);
    uint64_t v52 = Set.description.getter(v51);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(v43);
    id v175 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v171);
    uint64_t v6 = v165;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v39 + 34, v39 + 42);
    swift_bridgeObjectRelease_n(v43, 2LL);
    unint64_t v55 = v54;
    uint64_t v28 = v163;
    swift_bridgeObjectRelease(v55);
    os_log_t v56 = v147;
    _os_log_impl( (void *)&_mh_execute_header,  v147,  (os_log_type_t)v148,  "%@ Distributing leave event (%s) %s to %s",  (uint8_t *)v39,  0x2Au);
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v42, 1LL, v57);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v58 = v149;
    swift_arrayDestroy(v149, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    uint64_t v164 = *(void *)(v164 + 8);
    ((void (*)(char *, uint64_t))v164)(v16, v6);
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v23,  type metadata accessor for NearbyGroup_Group);

    swift_bridgeObjectRelease_n(v166, 2LL);
  }

  uint64_t v59 = v162;
  if ((v166 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(v166 + 16)) {
      goto LABEL_11;
    }
LABEL_16:
    swift_bridgeObjectRelease(v166);
    uint64_t v85 = v155;
    v154(v155, v28, v6);
    uint64_t v86 = v160;
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = swift_slowAlloc(22LL, -1LL);
      uint64_t v90 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v166 = swift_slowAlloc(32LL, -1LL);
      uint64_t v171 = v166;
      *(_DWORD *)uint64_t v89 = 138412546;
      id v175 = v86;
      uint64_t v91 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v89 + 4, v89 + 12);
      uint64_t v92 = v90;
      *uint64_t v90 = v86;

      *(_WORD *)(v89 + 12) = 2080;
      uint64_t v93 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v94 = v155;
      uint64_t v95 = v165;
      uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter(v165, v93);
      unint64_t v98 = v97;
      id v175 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease(v98);
      uint64_t v99 = (void (*)(char *, uint64_t))v164;
      ((void (*)(char *, uint64_t))v164)(v94, v95);
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "%@ Not distributing leave event %s since there are no destinations",  (uint8_t *)v89,  0x16u);
      uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v92, 1LL, v100);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v101 = v166;
      swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);

      v99(v163, v95);
    }

    else
    {

      os_log_type_t v116 = (void (*)(char *, uint64_t))v164;
      ((void (*)(char *, uint64_t))v164)(v85, v6);

      v116(v28, v6);
    }

    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v161,  type metadata accessor for NearbyGroup_Group);
    return;
  }

  if (v166 < 0) {
    uint64_t v60 = v166;
  }
  else {
    uint64_t v60 = v166 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (!__CocoaSet.count.getter(v60)) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject(v61, v176);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000AC6B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPublicMessageIntentKey);
  *(void *)(inited + 4NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = v63;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionAlwaysSkipSelfKey);
  *(void *)(inited + outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64) = v64;
  type metadata accessor for OS_dispatch_queue( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
  *(void *)(inited + 8NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)( *(void *)(v0 + 24),  1LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFromIDKey);
  *(void *)(inited + 88) = v65;
  uint64_t v66 = *(void (**)(void))((swift_isaMask & *v59) + 0xF8LL);
  v66();
  uint64_t v68 = v67;
  NSString v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  uint64_t v70 = IDSCopyBestGuessIDForID(v69);

  if (v70)
  {
    *(void *)(inited + 96) = v70;
    unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v72 = v160;
    uint64_t v73 = &v160[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
    uint64_t v74 = *(void *)&v160[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                         + 32];
    __swift_project_boxed_opaque_existential_1( &v160[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service],  *(void *)&v160[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service + 24]);
    uint64_t v75 = ((uint64_t (*)(void))v66)();
    uint64_t v77 = v76;
    unint64_t v78 = (void *)(*(uint64_t (**)(uint64_t))(v74 + 56))(v75);
    swift_bridgeObjectRelease(v77);
    if (v78)
    {
      uint64_t v162 = v78;
      id v175 = 0LL;
      outlined init with copy of PseudonymProtocol((uint64_t)v73, (uint64_t)&v171);
      uint64_t v79 = v173;
      uint64_t v80 = v174;
      __swift_project_boxed_opaque_existential_1(&v171, v173);
      uint64_t v81 = (uint64_t)v161;
      uint64_t v82 = v157;
      uint64_t v83 = Message.serializedData(partial:)(0LL, v159, v158);
      if (v82)
      {
        swift_bridgeObjectRelease(v166);

        swift_bridgeObjectRelease(v71);
        ((void (*)(char *, uint64_t))v164)(v163, v165);
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v81,  type metadata accessor for NearbyGroup_Group);
        __swift_destroy_boxed_opaque_existential_0Tm(&v171);
      }

      else
      {
        uint64_t v117 = v83;
        unint64_t v118 = v84;
        uint64_t v119 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v71);
        swift_bridgeObjectRelease(v71);
        id v170 = 0LL;
        (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v80 + 48))( v117,  v118,  v162,  v166,  300LL,  v119,  &v170,  v79,  v80);
        swift_bridgeObjectRelease(v119);
        outlined consume of Data._Representation(v117, v118);
        swift_bridgeObjectRelease(v166);
        id v175 = v170;
        id v123 = v170;
        __swift_destroy_boxed_opaque_existential_0Tm(&v171);
        uint64_t v124 = v152;
        unint64_t v125 = v151;
        uint64_t v126 = v153;
        (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v156, v153);
        unint64_t v127 = v150;
        uint64_t v128 = v163;
        uint64_t v129 = v165;
        uint64_t v130 = ((uint64_t (*)(char *, char *, uint64_t))v154)(v150, v163, v165);
        uint64_t v131 = (os_log_s *)Logger.logObject.getter(v130);
        os_log_type_t v132 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v131, v132))
        {
          uint64_t v133 = swift_slowAlloc(22LL, -1LL);
          id v134 = (void *)swift_slowAlloc(64LL, -1LL);
          id v170 = v134;
          *(_DWORD *)uint64_t v133 = 136315394;
          uint64_t v135 = lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter(v129, v135);
          unint64_t v138 = v137;
          uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, (uint64_t *)&v170);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, &v172, v133 + 4, v133 + 12);
          swift_bridgeObjectRelease(v138);
          ((void (*)(char *, uint64_t))v164)(v127, v129);
          *(_WORD *)(v133 + 12) = 2080;
          swift_beginAccess(&v175, &v171, 0LL, 0LL);
          id v139 = v175;
          if (v175)
          {
            uint64_t v167 = (uint64_t)v175;
            uint64_t v140 = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
            id v141 = v139;
            uint64_t v142 = String.init<A>(reflecting:)(&v167, v140);
            unint64_t v144 = v143;
          }

          else
          {
            unint64_t v144 = 0xE300000000000000LL;
            uint64_t v142 = 7104878LL;
          }

          uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v144, (uint64_t *)&v170);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168, v133 + 14, v133 + 22);
          swift_bridgeObjectRelease(v144);
          _os_log_impl( (void *)&_mh_execute_header,  v131,  v132,  "Distribution of leave event (%s) sent with ID %s",  (uint8_t *)v133,  0x16u);
          swift_arrayDestroy(v134, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v134, -1LL, -1LL);
          swift_slowDealloc(v133, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v152 + 8))(v151, v153);
          ((void (*)(char *, uint64_t))v164)(v163, v129);
        }

        else
        {

          uint64_t v145 = (void (*)(char *, uint64_t))v164;
          ((void (*)(char *, uint64_t))v164)(v127, v129);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
          v145(v128, v129);
        }

        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( (uint64_t)v161,  type metadata accessor for NearbyGroup_Group);
      }
    }

    else
    {
      unint64_t v159 = (uint64_t (*)(void))v66;
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(v166);
      id v102 = v72;
      uint64_t v103 = v162;
      id v104 = v102;
      uint64_t v105 = v103;
      uint64_t v106 = (os_log_s *)Logger.logObject.getter(v105);
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = swift_slowAlloc(22LL, -1LL);
        uint64_t v162 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v166 = swift_slowAlloc(32LL, -1LL);
        uint64_t v171 = v166;
        *(_DWORD *)uint64_t v108 = 138412546;
        id v175 = v104;
        id v109 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v108 + 4, v108 + 12);
        os_log_t v110 = v162;
        *uint64_t v162 = v104;

        *(_WORD *)(v108 + 12) = 2080;
        uint64_t v111 = v159();
        unint64_t v113 = v112;
        id v175 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v108 + 14, v108 + 22);

        swift_bridgeObjectRelease(v113);
        _os_log_impl( (void *)&_mh_execute_header,  v106,  v107,  "%@ couldn't find account to send message from with handle: %s",  (uint8_t *)v108,  0x16u);
        uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v110, 1LL, v114);
        swift_slowDealloc(v110, -1LL, -1LL);
        uint64_t v115 = v166;
        swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1LL, -1LL);
        swift_slowDealloc(v108, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v120 = (uint64_t)v161;
      unint64_t v121 = lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError(&type metadata for NearbyGroupHostIDSService.Errors, v121, 0LL, 0LL);
      *os_log_t v122 = 1;
      swift_willThrow();
      ((void (*)(char *, uint64_t))v164)(v163, v165);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization( v120,  type metadata accessor for NearbyGroup_Group);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t NearbyGroupHostIDSService.distributeGroupInitialization(for:)(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB0LL))();
  NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(a1, v2);
  return swift_bridgeObjectRelease(v2);
}

void NearbyGroupHostIDSService.__allocating_init(serviceName:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithService:v5];

  if (v6)
  {
    void v7[3] = type metadata accessor for OS_dispatch_queue( 0LL,  &lazy cache variable for type metadata for IDSService,  &OBJC_CLASS___IDSService_ptr);
    v7[4] = &protocol witness table for IDSService;
    v7[0] = v6;
    (*(void (**)(void *))(v2 + 136))(v7);
  }

  else
  {
    __break(1u);
  }

id NearbyGroupHostIDSService.queue.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue));
}

uint64_t NearbyGroupHostIDSService.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol( v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service,  a1);
}

uint64_t NearbyGroupHostIDSService.MessageEvents.init(_:)(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Publishers.PrefetchStrategy(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v23 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for Publishers.PrefetchStrategy.byRequest(_:),  v7);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for Publishers.BufferingStrategy.dropOldest<A>(_:),  v2);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v17 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.buffer(size:prefetch:whenFull:)(0x7FFFFFFFFFFFFFFFLL, v11, v6, v16, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v18 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>> and conformance Publishers.Buffer<A>,  &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>,  (uint64_t)&protocol conformance descriptor for Publishers.Buffer<A>);
  uint64_t v19 = Publisher.eraseToAnyPublisher()(v12, v18);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v12);
  return v19;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.next()(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(NearbyGroupHostIDSService.MessageEvents.Iterator.next(), 0LL, 0LL);
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.next()()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v4 = async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1];
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[6] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v5 = v0;
  v5[1] = NearbyGroupHostIDSService.MessageEvents.Iterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[2],  &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(),  v3,  partial apply for specialized closure #1 in _PublisherElements.Iterator.next(),  v2,  0LL,  0LL,  v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator( uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch( protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator,  0LL,  0LL);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v4 = async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1];
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[6] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v5 = v0;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[2],  &closure #2 in _PublisherElements.Iterator.next()specialized partial apply,  v3,  partial apply for specialized closure #1 in _PublisherElements.Iterator.next(),  v2,  0LL,  0LL,  v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch( _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_,  0LL,  0LL);
}

uint64_t _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v4 = async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1];
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[6] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v5 = v0;
  v5[1] = _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[2],  &closure #2 in _PublisherElements.Iterator.next()specialized partial apply,  v3,  partial apply for specialized closure #1 in _PublisherElements.Iterator.next(),  v2,  0LL,  0LL,  v6);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NearbyGroupHostIDSService.MessageEvents@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = NearbyGroupHostIDSService.MessageEvents.makeAsyncIterator()(v3);
  uint64_t result = swift_release(v3);
  *a1 = v4;
  return result;
}

uint64_t NearbyGroupHostIDSService.incomingMessages.getter()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages));
}

char *NearbyGroupHostIDSService.__allocating_init(idsService:)(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v4);
  __chkstk_darwin(v6, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized NearbyGroupHostIDSService.init(idsService:)((uint64_t)v8, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v10;
}

char *NearbyGroupHostIDSService.init(idsService:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v3);
  __chkstk_darwin(v5, v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized NearbyGroupHostIDSService.init(idsService:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}