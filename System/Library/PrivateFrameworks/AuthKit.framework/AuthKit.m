void sub_100005328(id a1)
{
  AKAuthorizationIconManager *v1;
  void *v2;
  v1 = objc_alloc_init(&OBJC_CLASS___AKAuthorizationIconManager);
  v2 = (void *)qword_10020F1D0;
  qword_10020F1D0 = (uint64_t)v1;
}

void sub_1000056D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000056F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _dataBlockForKey:*(void *)(a1 + 32)]);
  if (v5)
  {
    v6 = _os_activity_create( (void *)&_mh_execute_header,  "authkit/icon-fetching",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100005840;
    v7[3] = &unk_1001C6448;
    id v10 = v3;
    id v8 = WeakRetained;
    id v9 = *(id *)(a1 + 32);
    [v5 setCompletion:v7];

    os_activity_scope_leave(&state);
  }

  else
  {
    v6 = (os_activity_s *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7044LL));
    (*((void (**)(id, void, os_activity_s *))v3 + 2))(v3, 0LL, v6);
  }
}

void sub_10000582C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

id sub_100005840(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeDataBlockForKey:*(void *)(a1 + 40)];
}

void sub_10000596C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100005AA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_100005AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___AKMediaServicesController);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100005B70;
  v8[3] = &unk_1001C6498;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 appIconForBundleID:v5 size:v6 completion:v8];
}

void sub_100005B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3)
  {
    [v3 setScale:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v6,  1LL,  0LL));
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0LL);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_100005D70(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
}

id sub_100005E34(void *a1)
{
  v2 = *(void **)(a1[4] + 16LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    v2 = *(void **)(a1[4] + 16LL);
  }

  return [v2 setObject:a1[5] forKey:a1[6]];
}

id sub_100005F14(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10000638C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray ak_arrayWithJSONResponseData:](&OBJC_CLASS___NSArray, "ak_arrayWithJSONResponseData:", a3));
  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) altDSID]);
    [v8 _processFetchCompletionForAltDSID:v9 items:v7 fetchError:v6 completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v10 = _AKLogSystem(0LL);
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10012AF24();
    }

    uint64_t v12 = *(void *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);
  }
}

id sub_100006B48(id a1, NSDictionary *a2)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", AKFollowUpPayloadIdentifierKey);
}

uint64_t sub_100006B5C(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

id sub_100006BA0(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

uint64_t sub_100006BE4(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

void sub_100006E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);

  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 actions]);
    if ([v6 count])
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 informativeText]);

      if (v7)
      {
        id v8 = *(void **)(a1 + 40);
LABEL_10:
        v11 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
        [v8 setObject:v3 forKeyedSubscript:v11];

        goto LABEL_11;
      }
    }

    else
    {
    }

    id v8 = *(void **)(a1 + 32);
    goto LABEL_10;
  }

  uint64_t v9 = _AKLogSystem(v5);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_10012B018();
  }

LABEL_11:
}

void sub_100006F3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v4]);
    if (v5 && (id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]), v6, v6))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 notification]);

      if (v7)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 notification]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 informativeText]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]);
        [v10 setInformativeText:v9];

        v11 = (void *)objc_claimAutoreleasedReturnValue([v5 notification]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 title]);
        v13 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]);
        [v13 setTitle:v12];

        v14 = (void *)objc_claimAutoreleasedReturnValue([v5 notification]);
        [v14 frequency];
        double v16 = v15;
        v17 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]);
        [v17 setFrequency:v16];

        v18 = (void *)objc_claimAutoreleasedReturnValue([v5 notification]);
        v19 = (void *)objc_claimAutoreleasedReturnValue([v18 options]);
        v20 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]);
        [v20 setOptions:v19];
      }

      else
      {
        id v21 = [v3 setNotification:0];
      }

      uint64_t v27 = _AKLogSystem(v21);
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_10012B09C();
      }

      [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v4];
    }

    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue([v3 notification]);

      if (!v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v4]);
        if (v23)
        {
          id v24 = [*(id *)(*(void *)(a1 + 48) + 8) IsFollowUpItemNotificationForced:v23];
          if ((v24 & 1) != 0)
          {
            uint64_t v25 = _AKLogSystem(v24);
            v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              sub_10012B044();
            }
          }

          else
          {
            uint64_t v29 = _AKLogSystem([v23 setNotification:0]);
            v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
              sub_10012B070();
            }
          }
        }
      }
    }
  }
}

void sub_1000077B8(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 userInfo]);

  uint64_t v4 = v8;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v8 userInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"txnid"]);
    id v7 = v6;

    uint64_t v4 = v8;
  }
}

void sub_100007928(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"cmd"]);
    unsigned int v6 = [v5 unsignedIntValue];

    if (*(void *)(a1 + 40) == v6) {
      [*(id *)(a1 + 32) addObject:v7];
    }
  }

  else
  {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_100007AF4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100007B04( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_100007B28(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_100007B48( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100007B98(id a1)
{
  v1 = objc_opt_new(&OBJC_CLASS___AKPrivateEmailStoreManager);
  v2 = (void *)qword_10020F1E0;
  qword_10020F1E0 = (uint64_t)v1;
}

void sub_100008040( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, char a20)
{
}

uint64_t sub_100008090(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000080A0(uint64_t a1)
{
}

void sub_1000080A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;
}

void sub_100008340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
}

void sub_100008380(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;
}

void sub_1000086EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_10000872C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_100008780(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100008A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100008A40(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_100008A94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100008CD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
}

void sub_100008D18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;
}

LABEL_46:
  v30 = v20 & 1;
  a4 = v69;
  if (v69) {
LABEL_47:
  }
    *a4 = v18;
LABEL_48:

  return v30;
}
}

void sub_100009548( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100009588(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_1000095DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100009800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
}

void sub_10000983C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;
}

void sub_100009A84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100009ABC(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  if (v6)
  {
    id v5 = [[AKPrivateEmail alloc] initWithAddress:v6 forKey:v4];
    [*(id *)(a1 + 32) addObject:v5];
  }
}

void sub_100009B5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100009BEC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10000A368(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F1F0;
  uint64_t v7 = qword_10020F1F0;
  if (!qword_10020F1F0)
  {
    v8[0] = *(_OWORD *)off_1001C6728;
    v8[1] = *(_OWORD *)&off_1001C6738;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F1F0 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10000A414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10000A42C()
{
  id v3 = 0LL;
  uint64_t v0 = sub_10000A368((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_10000A484()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F1F8;
  uint64_t v7 = qword_10020F1F8;
  if (!qword_10020F1F8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10000A538;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_10000A538((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10000A520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

AKOwnerProxyClient *sub_10000A538(uint64_t a1)
{
  result = (AKOwnerProxyClient *)objc_getClass("BSAuditToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F1F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    id v3 = (AKOwnerProxyClient *)sub_10012B3CC();
    return -[AKOwnerProxyClient initWithCredentialRequest:](v3, v4, v5);
  }

  return result;
}
}

void sub_10000ADDC(id a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithObjects:]( &OBJC_CLASS___NSMutableSet,  "setWithObjects:",  @"accountsd",  @"backupd",  @"aktool",  @"askpermissiond",  @"itunesstored",  @"Preferences",  @"StoreKitUIService",  0LL));
  [v3 addObject:@"appstored"];
  id v1 = [v3 copy];
  uint64_t v2 = (void *)qword_10020F200;
  qword_10020F200 = (uint64_t)v1;
}

void sub_10000AF14(id a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithObjects:]( &OBJC_CLASS___NSMutableSet,  "setWithObjects:",  @"aktool",  @"askpermissiond",  @"itunesstored",  0LL));
  [v3 addObject:@"appstored"];
  id v1 = [v3 copy];
  uint64_t v2 = (void *)qword_10020F210;
  qword_10020F210 = (uint64_t)v1;
}

void sub_10000B024(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"Carousel", 0LL));
  uint64_t v2 = (void *)qword_10020F220;
  qword_10020F220 = v1;
}

void sub_10000B100(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"com.apple.aktool",  @"com.apple.internal.appleAccountSetupTool",  0LL));
  uint64_t v2 = (void *)qword_10020F230;
  qword_10020F230 = v1;
}

NSSecureCoding *__cdecl sub_10000C928(id a1, NSString *a2, NSString *a3)
{
  SEL v4 = a2;
  id v5 = a3;
  uint64_t v6 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v5,  0LL);

  if (v6)
  {
    id v18 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v6,  0LL,  0LL,  &v18));
    uint64_t v9 = (os_log_s *)v18;
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = _AKLogSystem(v9);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10012B674();
      }
    }

    else
    {
      id v15 = [v8 conformsToProtocol:&OBJC_PROTOCOL___NSSecureCoding];
      if ((v15 & 1) != 0)
      {
        id v14 = v8;
LABEL_13:

        goto LABEL_14;
      }

      uint64_t v16 = _AKLogSystem(v15);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10012B6D4();
      }
    }

    id v14 = 0LL;
    goto LABEL_13;
  }

  uint64_t v13 = _AKLogSystem(v7);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_10012B674();
  }
  id v14 = 0LL;
LABEL_14:

  return (NSSecureCoding *)v14;
}

LABEL_13:
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"orgName"]);
  if (v21)
  {
    v22 = objc_opt_class(&OBJC_CLASS___NSString, v18, v19, v20);
    v23 = objc_opt_isKindOfClass(v21, v22);
    if ((v23 & 1) != 0)
    {
      uint64_t v24 = v21;
      managedOrganizationName = self->_managedOrganizationName;
      self->_managedOrganizationName = v24;
    }

    else
    {
      v26 = _AKLogSystem(v23);
      managedOrganizationName = (NSString *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled((os_log_t)managedOrganizationName, OS_LOG_TYPE_ERROR)) {
        sub_10012BC1C((uint64_t)v21, (os_log_s *)managedOrganizationName, v27, v28);
      }
    }
  }

  v32 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"notificationEmailAvailable"]);
  if (v32)
  {
    v33 = objc_opt_class(&OBJC_CLASS___NSNumber, v29, v30, v31);
    v34 = objc_opt_isKindOfClass(v32, v33);
    if ((v34 & 1) != 0)
    {
      v35 = v32;
      isNotificationEmailAvailable = self->_isNotificationEmailAvailable;
      self->_isNotificationEmailAvailable = v35;
    }

    else
    {
      v37 = _AKLogSystem(v34);
      isNotificationEmailAvailable = (NSNumber *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled((os_log_t)isNotificationEmailAvailable, OS_LOG_TYPE_ERROR)) {
        sub_10012BB9C((uint64_t)v32, (os_log_s *)isNotificationEmailAvailable, v38, v39);
      }
    }
  }

  v43 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"notificationEmail"]);
  if (v43)
  {
    v44 = objc_opt_class(&OBJC_CLASS___NSString, v40, v41, v42);
    v45 = objc_opt_isKindOfClass(v43, v44);
    if ((v45 & 1) != 0)
    {
      v46 = v43;
      notificationEmail = self->_notificationEmail;
      self->_notificationEmail = v46;
    }

    else
    {
      v48 = _AKLogSystem(v45);
      notificationEmail = (NSString *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled((os_log_t)notificationEmail, OS_LOG_TYPE_ERROR)) {
        sub_10012BB1C((uint64_t)v43, (os_log_s *)notificationEmail, v49, v50);
      }
    }
  }
}
}
}
}
}

    result = sub_1001036C0(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

void sub_100010564(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSNumberFormatter);
  uint64_t v2 = (void *)qword_10020F240;
  qword_10020F240 = (uint64_t)v1;
}

LABEL_21:
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationServerResponse heartbeatToken](self, "heartbeatToken"));
  v30 = (void *)objc_claimAutoreleasedReturnValue([v29 stringValue]);

  if (!v30)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7118LL));
    [v6 _reportTokenWithTelemetryID:@"com.apple.authkit.token.hb.create" account:v7 telemetryFlowID:0 error:v31];
  }

LABEL_24:
}

        [a1[5] _performPasswordlessSRPAuthWithContext:a1[4] completion:a1[6]];
        goto LABEL_22;
      }
    }

    else
    {
      if (!v5) {
        goto LABEL_21;
      }
      uint64_t v19 = 0;
    }

    uint64_t v20 = a1[4];
    uint64_t v21 = a1[5];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000435DC;
    v22[3] = &unk_1001C8350;
    uint64_t v25 = v19;
    v22[4] = v21;
    v23 = v20;
    uint64_t v24 = a1[6];
    [v21 _performPasswordlessSRPAuthWithAccount:v5 context:v23 completion:v22];

    goto LABEL_22;
  }

  uint64_t v12 = [v6 code];

  if (v12 != (id)-7065LL) {
    goto LABEL_8;
  }
LABEL_11:
  id v15 = (void (**)(id, void, id))a1[6];
  if (v15) {
    v15[2](v15, 0LL, v6);
  }
LABEL_22:
}
}
}

              v123();
              return;
            }

          uint64_t v11 = (v17 - 1) & v17;
          uint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          uint64_t v9 = v13;
        }

        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1LL << *(_BYTE *)(a3 + 32);
        uint64_t v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v42 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      uint64_t v27 = *(void *)(a3 + 48);
      v28 = (void *)(v27 + 16 * v24);
      uint64_t v29 = v28[1];
      v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) == 0)
      {
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          v35 = (void *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            uint64_t v25 = v34 >> 6;
            v26 = 1LL << v34;
            goto LABEL_29;
          }
        }

        goto LABEL_3;
      }

      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_29:
      v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    id v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_45:
      __break(1u);
      return result;
    }

    if (v39 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

    __break(1u);
    goto LABEL_22;
  }

  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___AAFAnalyticsEvent);
  uint64_t v20 = String._bridgeToObjectiveC()();
  uint64_t v21 = v18;
  v22 = (void *)_convertErrorToNSError(_:)(a6);
  v23 = objc_msgSend(v19, "ak_analyticsEventWithEventName:account:error:", v20, v21, v22);

  if (v23)
  {
    v53 = 0LL;
    v54 = 0xE000000000000000LL;
    v55 = [a4 securityLevelForAccount:v21];
    type metadata accessor for AKAppleIDSecurityLevel(0LL);
    _print_unlocked<A, B>(_:_:)( &v55,  &v53,  v24,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v25 = v54;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    [v23 setObject:v26 forKeyedSubscript:@"securityLevel"];

    [v51 sendEvent:v23];
    return;
  }

  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  v38 = sub_1000B8C38(v10, (uint64_t)qword_100210FD8);
  v39 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v15, v38, v10);
  uint64_t v6 = (uint8_t *)a3;
  v40 = (void *)Logger.logObject.getter(v6);
  v41 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v40, v41))
  {

    v37 = *(void (**)(char *, uint64_t))(v39 + 8);
    goto LABEL_18;
  }

  v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  v51 = (id)swift_slowAlloc(32LL, -1LL);
  v53 = v51;
  *(_DWORD *)v42 = 136315138;
  v43 = -[uint8_t altDSID](v6, "altDSID");
  if (v43)
  {
    v44 = v43;
    v50 = v42 + 4;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    v55 = (id)sub_100103438(v45, v47, (uint64_t *)&v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

    swift_bridgeObjectRelease(v47);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  v41,  "DeviceListStoreManager - Unable to create MID hash mismatch event for altDSID - %s.",  v42,  0xCu);
    v48 = v51;
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    v37 = *(void (**)(char *, uint64_t))(v52 + 8);
LABEL_18:
    v49 = v15;
    goto LABEL_19;
  }

void sub_10001125C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100011268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_opt_class(a1, a2, a3, a4);
}

LABEL_14:
}

    sub_100133E28(v3, v7);
    goto LABEL_15;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 DSID]);

  if (v16)
  {
    id v18 = _AKLogSystem(v17);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_100133ED4();
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 DSID]);
    v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v21 longLongValue]));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v20 authKitAccountWithDSID:v22]);

    v23 = AKAltDSID;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v7 accountPropertyForKey:AKAltDSID]);

    if (!v24) {
      goto LABEL_16;
    }
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v7 accountPropertyForKey:v23]);
    [v3 setAltDSID:v25];

    v26 = objc_claimAutoreleasedReturnValue([v3 username]);
    if (!v26) {
      goto LABEL_16;
    }
    uint64_t v27 = (void *)v26;
    v28 = (void *)objc_claimAutoreleasedReturnValue([v3 username]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v7 username]);
    v30 = [v28 isEqualToString:v29];

    if ((v30 & 1) != 0) {
      goto LABEL_16;
    }
    v32 = _AKLogSystem(v31);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v32);
    if (!os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_FAULT)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
}
}

void sub_100011B94(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replyContextWithPayload:*(void *)(a1 + 40)]);
  id v7 = (id)v6;
  if (a2)
  {
    [*(id *)(a1 + 32) _processProximityDetection:a3 withReplyContext:v6 forPushPayload:*(void *)(a1 + 40)];
    uint64_t v6 = (uint64_t)v7;
  }

  [*(id *)(a1 + 32) _finishProcessingPushPayload:*(void *)(a1 + 40) withReplyContext:v6 completion:*(void *)(a1 + 48)];
}

void sub_1000128CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000128F8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = WeakRetained;
  if (v10 && WeakRetained)
  {
    [WeakRetained processPushPayload:v10 completion:*(void *)(a1 + 32)];
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = 0LL;
      id v9 = v5;
    }

    else
    {
      uint64_t v8 = 1LL;
      id v9 = 0LL;
    }

    (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v8, v9);
  }
}

void sub_1000133AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100013418(void *a1, int a2)
{
  if (!*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(a1[5], a1[6]);
    uint64_t v5 = _AKSignpostLogSystem();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = v6;
    os_signpost_id_t v8 = a1[5];
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      int v11 = 67240192;
      LODWORD(v12) = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "PiggybackingDetectPresenceForAcceptController",  " FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ",  (uint8_t *)&v11,  8u);
    }

    uint64_t v9 = _AKSignpostLogSystem();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 134218496;
      uint64_t v12 = a1[5];
      __int16 v13 = 2048;
      double v14 = (double)Nanoseconds / 1000000000.0;
      __int16 v15 = 1026;
      int v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggybackingDetectPresenceForAcceptController  FoundDevice=%{public,signpost.telemetry:number1,na me=FoundDevice}d ",  (uint8_t *)&v11,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

void sub_100013594(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = _AKLogSystem(WeakRetained);
  SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = WeakRetained[7];
      int v7 = 138412546;
      os_signpost_id_t v8 = WeakRetained;
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@: Proximity controller (%@) found a match",  (uint8_t *)&v7,  0x16u);
    }

    [WeakRetained[8] setValue:&__kCFBooleanTrue];
    [WeakRetained[7] invalidate];
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_10012CDBC(v5);
    }
  }
}

void sub_1000136A0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained[8] resolved];
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = _AKLogSystem(v4);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = v3[7];
        int v8 = 138412546;
        __int16 v9 = v3;
        __int16 v10 = 2112;
        id v11 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: Proximity controller (%@) has been invalidated and prox was not detected",  (uint8_t *)&v8,  0x16u);
      }

      [v3[8] setValue:&__kCFBooleanFalse];
    }
  }
}

uint64_t sub_100013934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100013AE4(void *a1)
{
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 64) value]);
  unsigned int v4 = [v3 BOOLValue];

  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *v2;
      int v24 = 138412290;
      uint64_t v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Proximity has been detected",  (uint8_t *)&v24,  0xCu);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10012CDFC((uint64_t)v2, v8, v10, v11, v12, v13, v14, v15);
  }

  [(id)a1[4] _stopProximityController];
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(a1[6], a1[7]);
  uint64_t v17 = _AKSignpostLogSystem();
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = v18;
  os_signpost_id_t v20 = a1[6];
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    int v24 = 67240192;
    LODWORD(v25) = v4;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_INTERVAL_END,  v20,  "PiggybackingCheckPresenceForAcceptController",  " FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ",  (uint8_t *)&v24,  8u);
  }

  uint64_t v21 = _AKSignpostLogSystem();
  v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = 134218496;
    uint64_t v25 = a1[6];
    __int16 v26 = 2048;
    double v27 = (double)Nanoseconds / 1000000000.0;
    __int16 v28 = 1026;
    unsigned int v29 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggybackingCheckPresenceForAcceptController  FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ",  (uint8_t *)&v24,  0x1Cu);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_100013D8C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

void sub_100013FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_12:
  int v24 = (void *)v12;
  uint64_t v25 = (char *)v9;
  result.var1 = v25;
  result.var0 = v24;
  return result;
}
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}
}
}

LABEL_13:
        uint64_t v19 = 0LL;
        goto LABEL_14;
      }
    }

    else
    {
    }

    id v18 = _AKLogSystem(v14);
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10013D0AC();
    }
    goto LABEL_12;
  }

  uint64_t v17 = objc_loadWeakRetained(WeakRetained + 2);
  if ([v17 shouldProcessAdditionalServerUIData:v8])
  {
    [v17 serverUIContext:a1[4] processAdditionalData:v8 completion:a1[7]];

    uint64_t v9 = 0LL;
    goto LABEL_21;
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] requestConfiguration]);
  __int16 v26 = [v25 requestType];

  if (v26)
  {
  }

  else
  {
    uint64_t v9 = (id)objc_claimAutoreleasedReturnValue([a1[5] _errorFromServerResponse:v7]);

    if (v9) {
      goto LABEL_13;
    }
  }

  __int16 v28 = _AKLogSystem(v27);
  unsigned int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Looks like we're done with server UI!",  buf,  2u);
  }

  v30 = (void *)objc_claimAutoreleasedReturnValue([a1[4] initiatingServerResponse]);
  v31 = [v30 isUpdateable];

  v32 = a1[4];
  if (!v31)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue([v32 requestConfiguration]);
    v36 = [v35 requestType];

    if (!v36)
    {
      v38 = _AKLogSystem(v37);
      v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "We do not have an initial auth response to update. Creating one now!",  buf,  2u);
      }

      v40 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationUsernameKey]);
      if (!v40) {
        v40 = (void *)objc_claimAutoreleasedReturnValue([a1[6] username]);
      }
      v41 = -[AKAuthenticationServerResponse initWithServerResponse:forAppleID:]( objc_alloc(&OBJC_CLASS___AKAuthenticationServerResponse),  "initWithServerResponse:forAppleID:",  v7,  v40);
      [a1[4] setInitiatingServerResponse:v41];
    }

    goto LABEL_35;
  }

  v33 = (void *)objc_claimAutoreleasedReturnValue([v32 initiatingServerResponse]);
  v34 = [v33 updateWithSecondaryAuthenticationResponse:v7];

  if ((v34 & 1) != 0)
  {
LABEL_35:
    uint64_t v9 = 0LL;
    goto LABEL_13;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7021LL));
  uint64_t v9 = 0LL;
LABEL_14:
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_1000917A0;
  v42[3] = &unk_1001CA218;
  uint64_t v9 = v9;
  v43 = v9;
  v47 = a1[7];
  v44 = a1[4];
  v45 = v8;
  os_signpost_id_t v20 = v19;
  v46 = v20;
  uint64_t v21 = objc_retainBlock(v42);
  v22 = [a1[4] shouldPreventDismissAfterUserSkip];
  if ((_DWORD)v22 && (v22 = [v9 code], v22 == (id)-7038))
  {
    ((void (*)(void *, uint64_t, void))v21[2])(v21, 1LL, 0LL);
  }

  else
  {
    v23 = _AKLogSystem(v22);
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Asking client to dismiss any presented server UI...",  buf,  2u);
    }

    [v11[1] dismissServerProvidedUIForContext:a1[6] client:v11[3] completion:v21];
  }

LABEL_21:
}
}
}

  return a2();
}

void sub_1000142F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = [v6 statusCode];
  uint64_t v9 = _AKLogSystem(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8 == (id)200)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v17 = 138412546;
      uint64_t v18 = v12;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "EDP request (urlKey=%@) succeeded! HTTP resposne=%@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      uint64_t v14 = *(void (**)(void))(v13 + 16);
LABEL_10:
      v14();
    }
  }

  else
  {
    if (v11)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v17 = 138412546;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "EDP request (urlKey=%@) failed! HTTP resposne=%@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      uint64_t v14 = *(void (**)(void))(v16 + 16);
      goto LABEL_10;
    }
  }
}

void sub_100014700(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10012D09C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10012D0CC((uint64_t)v5, v8, v16, v17, v18, v19, v20, v21);
  }

  uint64_t v22 = *(void *)(a1 + 32);
  if (v22) {
    (*(void (**)(uint64_t, uint64_t, id))(v22 + 16))(v22, a2, v5);
  }
}

uint64_t sub_100014848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _AKLogSystem();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2 == 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "is EDP Healthy: %d", (uint8_t *)v7, 8u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

void sub_100014A9C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AKAuthorizationStoreManager);
  uint64_t v2 = (void *)qword_10020F250;
  qword_10020F250 = (uint64_t)v1;
}

id sub_100014D88(void *a1, void *a2)
{
  return [a2 updateAuthorizationListWithMetadataInfo:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100014E80(void *a1, void *a2)
{
  return _[a2 updatePrimaryAppsWithAMSAppMetadata:a1[4] withAltDSID:a1[5] withCompletion:a1[6]];
}

id sub_100014F78(void *a1, void *a2)
{
  return [a2 storeAuthorization:a1[4] withAltDSID:a1[5] forClient:a1[6]];
}

id sub_100015070(void *a1, void *a2)
{
  return [a2 fetchDeveloperTeamWithTeamID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100015168(void *a1, void *a2)
{
  return [a2 fetchDeveloperTeamWithClientID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100015260(void *a1, void *a2)
{
  return [a2 performUnsafeVerificationWithUserID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_10001535C(uint64_t a1, void *a2)
{
  return [a2 revokeAuthorizationForApplicationWithClientID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_100015454(uint64_t a1, void *a2)
{
  return _[a2 removeApplicationWithClientID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_10001551C(uint64_t a1, void *a2)
{
  return [a2 revokeAuthorizationForAllApplicationsWithAltDSID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_1000155E4(uint64_t a1, void *a2)
{
  return _[a2 fetchAllDeveloperTeamsAndApplicationsForAltDSID:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

id sub_1000156AC(uint64_t a1, void *a2)
{
  return _[a2 fetchAllPrimaryApplicationMetadataForAltDSID:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_1000157AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000157C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000157D4(uint64_t a1)
{
}

void sub_1000157DC(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 fetchAuthorizationListVersionWithAltDSID:*(void *)(a1 + 32)]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1000158D4(uint64_t a1, void *a2)
{
  return [a2 setListVersionToVersion:*(void *)(a1 + 32) withAltDSID:*(void *)(a1 + 40)];
}

id sub_100015980(uint64_t a1, void *a2)
{
  return [a2 clearDatabaseWithAltDSID:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
}

uint64_t sub_1000159E8(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F260;
  uint64_t v7 = qword_10020F260;
  if (!qword_10020F260)
  {
    v8[0] = *(_OWORD *)off_1001C6AE8;
    v8[1] = *(_OWORD *)&off_1001C6AF8;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F260 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100015A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100015AAC()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_1000159E8((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_100015B04()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F268;
  uint64_t v7 = qword_10020F268;
  if (!qword_10020F268)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100015BB8;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100015BB8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100015BA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100015BB8(uint64_t a1)
{
  Class result = objc_getClass("BYLicenseAgreement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F268 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012D170();
    return (Class)sub_100015C0C(v3);
  }

  return result;
}

void *sub_100015C0C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F270;
  uint64_t v6 = qword_10020F270;
  if (!qword_10020F270)
  {
    id v1 = (void *)sub_100015AAC();
    uint64_t v0 = dlsym(v1, "BYSetupAssistantNeedsToRun");
    v4[3] = (uint64_t)v0;
    qword_10020F270 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100015C80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

AKPushTokenKeychainWrapper *sub_100015C98()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100015C0C();
  if (v0) {
    return (AKPushTokenKeychainWrapper *)v0();
  }
  uint64_t v2 = (AKPushTokenKeychainWrapper *)sub_10012D194();
  return -[AKPushTokenKeychainWrapper init](v2, v3);
}

void sub_10001630C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = -[NSMutableURLRequest initWithURL:](objc_alloc(&OBJC_CLASS___NSMutableURLRequest), "initWithURL:", v5);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
    -[NSMutableURLRequest ak_addClientApp:](v8, "ak_addClientApp:", v10);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 bundleID]);
    -[NSMutableURLRequest ak_addClientBundleIDHeader:](v8, "ak_addClientBundleIDHeader:", v12);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authKitBody]);
    if (v13)
    {
      -[NSMutableURLRequest setHTTPMethod:](v8, "setHTTPMethod:", @"POST");
      if ([*(id *)(a1 + 32) requestBodyType] == (id)1)
      {
        -[NSMutableURLRequest ak_addJSONRequestHeader](v8, "ak_addJSONRequestHeader");
        -[NSMutableURLRequest ak_setJSONBodyWithParameters:](v8, "ak_setJSONBodyWithParameters:", v13);
LABEL_14:
        uint64_t v19 = *(void **)(a1 + 32);
        id v40 = 0LL;
        unsigned __int8 v20 = [v19 signRequest:v8 error:&v40];
        id v21 = v40;
        uint64_t v22 = _AKLogSystem(v21);
        v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        int v24 = v23;
        if ((v20 & 1) != 0)
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
            sub_10012D4BC();
          }

          uint64_t v26 = _AKLogSystem(v25);
          double v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            sub_10012D41C(v8, v27);
          }

          if (v13)
          {
            uint64_t v29 = _AKLogSystem(v28);
            v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              sub_10012D39C(v13, v30);
            }
          }

          v31 = *(void **)(*(void *)(a1 + 32) + 72LL);
          if (v31)
          {
            v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) sourceAltDSID]);

            if (v32)
            {
              v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) sourceAltDSID]);
              -[NSMutableURLRequest ak_addHeaderForSourceAltDSID:](v8, "ak_addHeaderForSourceAltDSID:", v33);
            }

            id v34 = [*(id *)(*(void *)(a1 + 32) + 72) securityCode];
            if (v34)
            {
              uint64_t v35 = _AKLogSystem(v34);
              v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
                sub_10012D370();
              }

              -[NSMutableURLRequest ak_addHeaderForSecurityCode:]( v8,  "ak_addHeaderForSecurityCode:",  [*(id *)(*(void *)(a1 + 32) + 72) securityCode]);
            }
          }

          uint64_t v37 = *(void *)(a1 + 40);
          if (v37)
          {
            id v38 = -[NSMutableURLRequest copy](v8, "copy");
            (*(void (**)(uint64_t, id, void))(v37 + 16))(v37, v38, 0LL);
          }
        }

        else
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_10012D520();
          }

          uint64_t v39 = *(void *)(a1 + 40);
          if (v39) {
            (*(void (**)(uint64_t, void, id))(v39 + 16))(v39, 0LL, v21);
          }
        }

        goto LABEL_41;
      }

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverCompatibleRequestBodyWithPayload:v13]);
      -[NSMutableURLRequest ak_setBodyWithParameters:](v8, "ak_setBodyWithParameters:", v18);
    }

    else
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authKitBodyData]);

      if (!v17)
      {
        -[NSMutableURLRequest setHTTPMethod:](v8, "setHTTPMethod:", @"GET");
        goto LABEL_14;
      }

      -[NSMutableURLRequest setHTTPMethod:](v8, "setHTTPMethod:", @"POST");
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authKitBodyData]);
      -[NSMutableURLRequest setHTTPBody:](v8, "setHTTPBody:", v18);
    }

    goto LABEL_14;
  }

  uint64_t v14 = _AKLogSystem(v6);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    sub_10012D2EC(a1, v15);
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v7);
  }
LABEL_41:
}

LABEL_30:
  return v35;
}

    type metadata accessor for SignInWithAppleError(0LL);
    v55 = v54;
    v69 = -16009LL;
    v56 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_1000BC768();
    v58 = _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v56, v55, v57);
    swift_willThrow(v58);

    return v4;
  }

  return v4;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_100017700(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100017CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100017D00(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = _AKLogSystem(WeakRetained);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = v10;
    if (v6)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10012D8E0();
      }
    }

    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Native recovery flow completed", buf, 2u);
    }

    uint64_t v15 = _AKLogSystem(v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v28 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Native recovery flow: recoveredInfo %@",  buf,  0xCu);
    }

    uint64_t v17 = (void *)v8[1];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] authContext]);
    uint64_t v19 = v8[2];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100017F40;
    v20[3] = &unk_1001C6B60;
    id v21 = v5;
    id v22 = v6;
    id v23 = a1[5];
    id v24 = a1[4];
    uint64_t v25 = v8;
    id v26 = a1[6];
    [v17 dismissNativeRecoveryUIForContext:v18 client:v19 completion:v20];
  }

  else
  {
    id v12 = a1[6];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7001LL));
    (*((void (**)(id, void, void, void *))v12 + 2))(v12, 0LL, 0LL, v13);
  }
}

void sub_100017F40(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Attempting to process native recovery response",  buf,  2u);
  }

  id v4 = +[AKNativeAccountRecoveryController shouldSendServerResponseForRecoveredInfo:withRecoveryError:]( &OBJC_CLASS___AKNativeAccountRecoveryController,  "shouldSendServerResponseForRecoveredInfo:withRecoveryError:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  if ((_DWORD)v4)
  {
    uint64_t v5 = _AKLogSystem(v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "shouldSendServerResponseForRecoveredInfo is true",  buf,  2u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAccountRecoveryController requestForRecoveryCompletionWithContext:recoveredInfo:recoveryError:]( &OBJC_CLASS___AKNativeAccountRecoveryController,  "requestForRecoveryCompletionWithContext:recoveredInfo:recoveryError:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) initiatingServerResponse]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) authContext]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AKDServerUIContext serverUIContextFromResponse:authContext:urlRequest:]( &OBJC_CLASS___AKDServerUIContext,  "serverUIContextFromResponse:authContext:urlRequest:",  v8,  v9,  v7));

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestConfiguration]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 resourceLoadDelegate]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 requestConfiguration]);
      [v13 setResourceLoadDelegate:v12];

      uint64_t v15 = _AKLogSystem(v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 debugDescription]);
        *(_DWORD *)buf = 138412290;
        v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "responseContext: %@", buf, 0xCu);
      }

      uint64_t v18 = -[AKDServerUIController initWithLiaison:client:delegate:]( objc_alloc(&OBJC_CLASS___AKDServerUIController),  "initWithLiaison:client:delegate:",  *(void *)(*(void *)(a1 + 64) + 8LL),  *(void *)(*(void *)(a1 + 64) + 16LL),  0LL);
      -[AKDServerUIController showServerUIWithContext:completion:]( v18,  "showServerUIWithContext:completion:",  v10,  *(void *)(a1 + 72));
    }

    else
    {
      uint64_t v23 = _AKLogSystem(0LL);
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10012D940();
      }

      uint64_t v25 = *(void *)(a1 + 72);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void, void *))(v25 + 16))(v25, 0LL, 0LL, v10);
    }
  }

  else
  {
    uint64_t v19 = *(void **)(*(void *)(a1 + 64) + 8LL);
    unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) authContext]);
    id v21 = *(void **)(a1 + 72);
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 16LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_100018264;
    v26[3] = &unk_1001C6B38;
    id v28 = v21;
    id v27 = *(id *)(a1 + 40);
    [v19 dismissServerProvidedUIForContext:v20 client:v22 completion:v26];

    uint64_t v7 = v28;
  }
}

void sub_100018264(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10012D96C();
  }

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ac_secureCodingError"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7003LL,  v5));
  (*(void (**)(uint64_t, void, void, void *))(v4 + 16))(v4, 0LL, 0LL, v6);
}

void sub_10001865C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = _AKLogSystem(v7);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10012D9FC();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v11 = [v6 statusCode];
    uint64_t v12 = _AKLogSystem(v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v11));
      *(_DWORD *)buf = 138412290;
      id v27 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Renewal of recovery token came back with HTTP status code: %@",  buf,  0xCu);
    }

    if (v11 == (id)200)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 allHeaderFields]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:AKPETHeaderKey]);

      if (v17)
      {
        uint64_t v24 = AKAuthenticationPasswordKey;
        uint64_t v25 = v17;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
      }

      else
      {
        uint64_t v18 = 0LL;
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    }

    else
    {
      uint64_t v19 = _AKLogSystem(v15);
      unsigned __int8 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v11));
        *(_DWORD *)buf = 138412290;
        id v27 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Unexpected HTTP response code: %@",  buf,  0xCu);
      }

      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v23);
    }
  }
}

void sub_100018AEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v8 = objc_alloc(&OBJC_CLASS___AKSRPRequest);
    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    uint64_t v17 = sub_100018C38;
    uint64_t v18 = &unk_1001C6BD8;
    uint64_t v9 = *(void *)(a1 + 32);
    id v19 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 56);
    uint64_t v10 = -[AKSRPRequest initWithURL:contextHelper:completionHandler:]( v8,  "initWithURL:contextHelper:completionHandler:",  v5,  v9,  &v15);
    objc_msgSend(*(id *)(*(void *)(a1 + 48) + 24), "submitDispatchableRequest:", v10, v15, v16, v17, v18);

    id v11 = v19;
LABEL_7:

    goto LABEL_8;
  }

  uint64_t v12 = _AKLogSystem(v6);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_10012DA5C();
  }

  uint64_t v14 = *(void *)(a1 + 56);
  if (v14)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7005LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v11);
    goto LABEL_7;
  }

LABEL_8:
}
}
}

  uint64_t v13 = 0LL;
LABEL_29:

  return v13;
}
}

  uint64_t v12 = 1;
LABEL_9:

  return v12;
}
}

    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  uint64_t v16 = _AKLogSystem(v15);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Overriding Settings landing spot because the Apple ID %@ is used for iCloud.",  buf,  0xCu);
  }

  id v11 = @"APPLE_ACCOUNT";
LABEL_9:
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"&root=%@", v11));
  id v21 = objc_claimAutoreleasedReturnValue([v10 stringByAppendingString:v20]);

  uint64_t v10 = (void *)v21;
LABEL_10:
  uint64_t v22 = _AKLogSystem(v13);
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v10;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Opening internal URL: %@", buf, 0xCu);
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v10));
  v32 = 0LL;
  [v24 openSensitiveURL:v25 withOptions:0 error:&v32];
  id v26 = v32;

  if (v26)
  {
    id v28 = _AKLogSystem(v27);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_1001359E8((uint64_t)v26, v29, v30);
    }
  }

  return v26 == 0LL;
}

  v7[2](v7, 0LL);
LABEL_13:
}
}

    return;
  }

  uint64_t v9 = (id)objc_claimAutoreleasedReturnValue(+[AKPeerIDSAnisetteService sharedService](&OBJC_CLASS___AKPeerIDSAnisetteService, "sharedService"));
  [v9 startListeningForMessagesFromPairedDevice];
}
}

  uint64_t v12 = *(void *)(v0 + 32);
  if ((v12 & 0xC000000000000001LL) != 0) {
    uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v12);
  }
  else {
    uint64_t v13 = *(id *)(v12 + 32);
  }
  uint64_t v17 = v13;
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v13;
  *(void *)(v0 + 56) = 1LL;
  uint64_t v18 = (void *)swift_task_alloc(dword_10020DE6C);
  *(void *)(v0 + 64) = v18;
  void *v18 = v0;
  v18[1] = sub_1000CF718;
  id v20 = *(void *)(v0 + 16);
  id v19 = *(void *)(v0 + 24);
  v18[4] = v17;
  v18[5] = v19;
  v18[3] = v20;
  return swift_task_switch(sub_1000CF8A8, 0LL, 0LL);
}

  uint64_t v12 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));

  uint64_t v13 = *(void *)(v0 + 32);
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

void sub_100018C38(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authContext]);
    unsigned int v11 = [v10 isRKVerification];

    if (v11)
    {
      uint64_t v13 = _AKLogSystem(v12);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "MK was accepted for RK Verification",  v32,  2u);
      }

      uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
      goto LABEL_9;
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceTokens]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"com.apple.gs.idms.mrk"]);
    uint64_t v17 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v24 stringValue]);

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v7 masterToken]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v25 stringValue]);

    uint64_t v27 = _AKLogSystem(v26);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v29 = v28;
    if (v17 && v22)
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "MK was accepted", v32, 2u);
      }

      v33[0] = AKRecoveryIdentityTokenHeader;
      v33[1] = AKRecoveryMKValidationTokenHeader;
      v34[0] = v22;
      v34[1] = v17;
      v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v34,  v33,  2LL));
      (*(void (**)(void, void *, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v30, 0LL);
    }

    else
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_10012DABC();
      }

      uint64_t v31 = *(void *)(a1 + 40);
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7018LL));
      (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0LL, v30);
    }

LABEL_27:
    goto LABEL_28;
  }

  if (v7 || !objc_msgSend(v8, "ak_isAuthenticationError"))
  {
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v17 = v16;
    if (v9) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v9, NSUnderlyingErrorKey);
    }
    if ([v7 errorCode] == (id)-22447) {
      uint64_t v18 = -7028LL;
    }
    else {
      uint64_t v18 = -7018LL;
    }
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 errorMessage]);

    if (v19)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v7 errorMessage]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v17,  "setObject:forKeyedSubscript:",  v20,  NSLocalizedDescriptionKey);
    }

    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAppleIDAuthenticationErrorDomain,  v18,  v17));
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v22);
    goto LABEL_27;
  }

  uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_9:
  v15();
LABEL_28:
}

void sub_100019154(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10012DAE8();
    }

    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Verifier persisted", v10, 2u);
    }

    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v9();
}

uint64_t sub_100019374(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F278;
  uint64_t v7 = qword_10020F278;
  if (!qword_10020F278)
  {
    v8[0] = *(_OWORD *)off_1001C6C48;
    v8[1] = *(_OWORD *)&off_1001C6C58;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F278 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100019420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100019438()
{
  SEL v3 = 0LL;
  uint64_t v0 = sub_100019374((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_100019490()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F280;
  uint64_t v7 = qword_10020F280;
  if (!qword_10020F280)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100019544;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100019544((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001952C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100019544(uint64_t a1)
{
  Class result = objc_getClass("FLFollowUpAction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F280 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DBDC();
    return (Class)sub_100019598(v3);
  }

  return result;
}

id sub_100019598()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F288;
  uint64_t v7 = qword_10020F288;
  if (!qword_10020F288)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10001964C;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_10001964C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100019634( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10001964C(uint64_t a1)
{
  Class result = objc_getClass("FLFollowUpController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F288 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DC00();
    return (Class)sub_1000196A0(v3);
  }

  return result;
}

id sub_1000196A0()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F290;
  uint64_t v7 = qword_10020F290;
  if (!qword_10020F290)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100019754;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100019754((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001973C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100019754(uint64_t a1)
{
  Class result = objc_getClass("FLFollowUpItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F290 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DC24();
    return (Class)sub_1000197A8(v3);
  }

  return result;
}

id sub_1000197A8()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F298;
  uint64_t v7 = qword_10020F298;
  if (!qword_10020F298)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10001985C;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_10001985C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100019844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10001985C(uint64_t a1)
{
  Class result = objc_getClass("FLFollowUpNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F298 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DC48();
    return (Class)sub_1000198B0(v3);
  }

  return result;
}

id sub_1000198B0()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F2A0;
  uint64_t v7 = qword_10020F2A0;
  if (!qword_10020F2A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100019964;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100019964((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001994C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100019964(uint64_t a1)
{
  Class result = objc_getClass("FLHSA2LoginNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F2A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DC6C();
    return (Class)sub_1000199B8(v3);
  }

  return result;
}

id sub_1000199B8()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F2A8;
  uint64_t v7 = qword_10020F2A8;
  if (!qword_10020F2A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100019A6C;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100019A6C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100019A54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100019A6C(uint64_t a1)
{
  Class result = objc_getClass("FLHSA2PasswordResetNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F2A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012DC90();
    return (Class)sub_100019AC0(v3);
  }

  return result;
}

void *sub_100019AC0()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2B0;
  uint64_t v6 = qword_10020F2B0;
  if (!qword_10020F2B0)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLGroupIdentifierAccount");
    v4[3] = (uint64_t)v0;
    qword_10020F2B0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019B4C()
{
  uint64_t v0 = (id *)sub_100019AC0();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019B6C(v2);
}

void *sub_100019B6C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2B8;
  uint64_t v6 = qword_10020F2B8;
  if (!qword_10020F2B8)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionForce");
    v4[3] = (uint64_t)v0;
    qword_10020F2B8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019BF8()
{
  uint64_t v0 = (id *)sub_100019B6C();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019C18(v2);
}

void *sub_100019C18()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2C0;
  uint64_t v6 = qword_10020F2C0;
  if (!qword_10020F2C0)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionSpringboardAlert");
    v4[3] = (uint64_t)v0;
    qword_10020F2C0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019CA4()
{
  uint64_t v0 = (id *)sub_100019C18();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019CC4(v2);
}

void *sub_100019CC4()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2C8;
  uint64_t v6 = qword_10020F2C8;
  if (!qword_10020F2C8)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionSpringboardAlertActionOnly");
    v4[3] = (uint64_t)v0;
    qword_10020F2C8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019D50()
{
  uint64_t v0 = (id *)sub_100019CC4();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019D70(v2);
}

void *sub_100019D70()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2D0;
  uint64_t v6 = qword_10020F2D0;
  if (!qword_10020F2D0)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLHSA2ActionChangePassword");
    v4[3] = (uint64_t)v0;
    qword_10020F2D0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019DE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019DFC()
{
  uint64_t v0 = (id *)sub_100019D70();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019E1C(v2);
}

void *sub_100019E1C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2D8;
  uint64_t v6 = qword_10020F2D8;
  if (!qword_10020F2D8)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionExtensionForNotification");
    v4[3] = (uint64_t)v0;
    qword_10020F2D8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019E90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019EA8()
{
  uint64_t v0 = (id *)sub_100019E1C();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019EC8(v2);
}

void *sub_100019EC8()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2E0;
  uint64_t v6 = qword_10020F2E0;
  if (!qword_10020F2E0)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionExtensionActions");
    v4[3] = (uint64_t)v0;
    qword_10020F2E0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100019F54()
{
  uint64_t v0 = (id *)sub_100019EC8();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100019F74(v2);
}

void *sub_100019F74()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F2E8;
  uint64_t v6 = qword_10020F2E8;
  if (!qword_10020F2E8)
  {
    id v1 = (void *)sub_100019438();
    uint64_t v0 = dlsym(v1, "FLNotificationOptionBannerAlert");
    v4[3] = (uint64_t)v0;
    qword_10020F2E8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100019FE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

AKSatoriController *sub_10001A000()
{
  uint64_t v0 = (id *)sub_100019F74();
  if (v0) {
    return (AKSatoriController *)*v0;
  }
  uint64_t v2 = (AKSatoriController *)sub_10012D194();
  return -[AKSatoriController initWithClient:](v2, v3, v4);
}

void sub_10001A56C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10001A584(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001A594(uint64_t a1)
{
}

void sub_10001A59C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0LL;
  id v7 = a3;
  id v8 = a2;

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001A814(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10012DCE0();
    }
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v10);
  }
}

void sub_10001AAB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10012DD9C();
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v10);
    }
    goto LABEL_12;
  }

  id v14 = [v7 statusCode];
  if (v14 != (id)401)
  {
    id v14 = [v7 statusCode];
    if (v7)
    {
      if (v14 != (id)302)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 allHeaderFields]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( [v19 objectForKeyedSubscript:@"X-Apple-AK-Advanced-ICloud-Data-Protection"]);

        if (v18)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          if (v21) {
            (*(void (**)(uint64_t, void))(v21 + 16))(v21, 0LL);
          }
        }

        else
        {
          uint64_t v22 = _AKLogSystem(v20);
          uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_10012DD70();
          }

          uint64_t v24 = *(void *)(a1 + 32);
          if (v24)
          {
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
            (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v25);
          }
        }

        goto LABEL_11;
      }
    }
  }

  uint64_t v15 = _AKLogSystem(v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_10012DD44();
  }

  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
    (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v18);
LABEL_11:
  }

void sub_10001AE3C(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___AKStrongDeviceIdentitySigner);
  id v4 = objc_opt_new(&OBJC_CLASS___AKDeviceIdentityWrapper);
  uint64_t v2 = -[AKStrongDeviceIdentitySigner initWithStrongDeviceIdentifying:](v1, "initWithStrongDeviceIdentifying:", v4);
  SEL v3 = (void *)qword_10020F2F0;
  qword_10020F2F0 = (uint64_t)v2;
}

id sub_10001B164(uint64_t a1, int a2)
{
  if (!a2) {
    return _[*(id *)(a1 + 32) _baaV1HeadersForRequestData:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  id result = *(id *)(a1 + 48);
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
  }
  return result;
}

void sub_10001B6BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

uint64_t sub_10001B700(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001B710(uint64_t a1)
{
}

void sub_10001B718(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10001B7A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10001B828(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void *)(v2 + 40);
  SEL v3 = (id *)(v2 + 40);
  if (!v4) {
    objc_storeStrong(v3, *(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  }
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v6 = _AKSignpostLogSystem();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 80);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_END,  v9,  "BAASigning",  "",  (uint8_t *)&v15,  2u);
  }

  uint64_t v10 = _AKSignpostLogSystem();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 80);
    int v15 = 134218240;
    uint64_t v16 = v12;
    __int16 v17 = 2048;
    double v18 = (double)Nanoseconds / 1000000000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:BAASigning ",  (uint8_t *)&v15,  0x16u);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    id v14 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v13 + 16))( v13,  v14,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }

void sub_10001BB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001BB18(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = _AKLogSystem(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_10012DE2C();
  }

  if (a4)
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[AAFAnalyticsEvent ak_analyticsEventWithEventName:error:]( &OBJC_CLASS___AAFAnalyticsEvent,  "ak_analyticsEventWithEventName:error:",  @"com.apple.authkit.baa.signing.cached",  0LL));
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  if (v11)
  {
    id v17 = v11;
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) populateUnderlyingErrorsStartingWithRootError:v17];
    [*(id *)(a1 + 32) _updateAnalyticsEvent:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) withError:v17];
    double v18 = *(void **)(a1 + 40);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 domain]);
    uint64_t v20 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@:%li",  v19,  [v17 code]);
  }

  else
  {
    if ([v9 count] == (id)2)
    {
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:1]);
      uint64_t v22 = *(void **)(a1 + 40);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v19 base64EncodedStringWithOptions:0]);
      [v22 setValue:v23 forKey:AKRequestSigningHeaderSignatureKey];

      uint64_t v24 = *(void **)(a1 + 40);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v21 base64EncodedStringWithOptions:0]);
      [v24 setValue:v25 forKey:AKRequestSigningHeaderAltSignatureKey];

      uint64_t v26 = *(void **)(a1 + 40);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v10 base64EncodedStringWithOptions:0]);
      [v26 setValue:v27 forKey:AKRequestSigningHeaderAttestationKey];

      id v17 = 0LL;
      goto LABEL_11;
    }

    uint64_t v28 = AKAttestationErrorDomain;
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    v36 = @"Correct number of signatures not found. This is unexpected.";
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v28,  -10001LL,  v29));

    uint64_t v31 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    uint64_t v32 = kAAFDidSucceed;
    id v17 = v30;
    [v31 setObject:&__kCFBooleanFalse forKeyedSubscript:v32];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) populateUnderlyingErrorsStartingWithRootError:v17];
    double v18 = *(void **)(a1 + 40);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 domain]);
    id v33 = [v17 code];

    uint64_t v20 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@:%li", v19, v33);
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  [v18 setValue:v21 forKey:AKRequestSigningHeaderBAAErrorKey];
LABEL_11:

  [*(id *)(a1 + 32) _reportBAASigningForEvent:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  uint64_t v34 = *(void *)(a1 + 48);
  if (v34) {
    (*(void (**)(uint64_t, void, id))(v34 + 16))(v34, *(void *)(a1 + 40), v17);
  }
}

void sub_10001C1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_10001C21C(uint64_t a1, void *a2, id obj)
{
  id v7 = obj;
  id v6 = a2;
  [*(id *)(a1 + 32) addEntriesFromDictionary:v6];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001C290(uint64_t a1, void *a2, id obj)
{
  id v7 = obj;
  id v6 = a2;
  [*(id *)(a1 + 32) addEntriesFromDictionary:v6];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001C304(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v4 = *(void *)(v2 + 40);
  SEL v3 = (id *)(v2 + 40);
  if (!v4) {
    objc_storeStrong(v3, *(id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:AKRequestSigningHeaderHostAltSignatureKey]);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(v5 + 16))( v5,  *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  }
}

void sub_10001C628(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_10012DEE8();
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v13 = *(void **)(a1 + 32);
  if (v9)
  {
    [v13 setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(a1 + 32) populateUnderlyingErrorsStartingWithRootError:v9];
    [*(id *)(a1 + 40) _updateAnalyticsEvent:*(void *)(a1 + 32) withError:v9];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@:%li",  v14,  [v9 code]));
    [v12 setValue:v15 forKey:AKRequestSigningHeaderHostErrorsKey];
  }

  else
  {
    [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 base64EncodedStringWithOptions:0]);
    [v12 setValue:v16 forKey:*(void *)(a1 + 48)];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 base64EncodedStringWithOptions:0]);
    [v12 setValue:v14 forKey:AKRequestSigningHeaderHostAttestationKey];
  }

  [*(id *)(a1 + 40) _reportBAASigningForEvent:*(void *)(a1 + 32)];
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 64), *(void *)(a1 + 72));
  uint64_t v18 = _AKSignpostLogSystem(Nanoseconds);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v20 = v19;
  os_signpost_id_t v21 = *(void *)(a1 + 64);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v30) = [v9 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_INTERVAL_END,  v21,  "VMHostBAASigning",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
  }

  uint64_t v23 = _AKSignpostLogSystem(v22);
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    double v25 = (double)Nanoseconds / 1000000000.0;
    uint64_t v26 = *(void *)(a1 + 64);
    unsigned int v27 = [v9 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v30 = v26;
    __int16 v31 = 2048;
    double v32 = v25;
    __int16 v33 = 1026;
    unsigned int v34 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:VMHostBAASigning  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
  }

  uint64_t v28 = *(void *)(a1 + 56);
  if (v28) {
    (*(void (**)(uint64_t, void *, id))(v28 + 16))(v28, v12, v9);
  }
}

LABEL_17:
}

      global_queue = dispatch_get_global_queue(21LL, 0LL);
      uint64_t v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100035378;
      block[3] = &unk_1001C7B88;
      uint64_t v24 = v7;
      uint64_t v26 = v8;
      uint64_t v4 = v22;
      double v25 = v22;
      dispatch_async(v20, block);
    }

    else
    {
      os_signpost_id_t v21 = _AKLogSystem(0LL);
      uint64_t v10 = (id)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR)) {
        sub_100131AD8();
      }
    }
  }

  else
  {
    uint64_t v18 = _AKLogSystem(0LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR)) {
      sub_100131AAC();
    }
  }
}
}

LABEL_18:
    uint64_t v18 = v17;
    goto LABEL_19;
  }

  uint64_t v18 = (id)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"hme"]);
LABEL_6:
  if ((-[__CFString isEqualToString:](v13, "isEqualToString:", @"D") & 1) != 0)
  {
    id v17 = &stru_1001D1450;
    goto LABEL_17;
  }
}
}
}

    uint64_t v22 = 0LL;
    goto LABEL_18;
  }

  uint64_t v18 = _AKLogSystem(v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if (!v13)
  {
    if (v20) {
      sub_10013B434();
    }

    if (a7)
    {
      double v25 = -7025LL;
      goto LABEL_16;
    }

    goto LABEL_17;
  }

  if (v20) {
    sub_10013B460((uint64_t)v12, (uint64_t)v13, v19);
  }

  v54[0] = 0LL;
  v54[1] = v54;
  v54[2] = 0x3032000000LL;
  v54[3] = sub_1000854F4;
  v54[4] = sub_100085504;
  v55 = 0LL;
  v52[0] = 0LL;
  v52[1] = v52;
  v52[2] = 0x3032000000LL;
  v52[3] = sub_1000854F4;
  v52[4] = sub_100085504;
  v53 = 0LL;
  v50[0] = 0LL;
  v50[1] = v50;
  v50[2] = 0x3032000000LL;
  v50[3] = sub_1000854F4;
  v50[4] = sub_100085504;
  v51 = 0LL;
  v44 = 0LL;
  v45 = &v44;
  v46 = 0x3032000000LL;
  uint64_t v47 = sub_1000854F4;
  v48 = sub_100085504;
  v49 = 0LL;
  v43[0] = 0LL;
  v43[1] = v43;
  v43[2] = 0x2020000000LL;
  v42[0] = 0LL;
  v42[1] = v42;
  v42[2] = 0x2020000000LL;
  v41[0] = 0LL;
  v41[1] = v41;
  v41[2] = 0x2020000000LL;
  tokenManagerQueue = (dispatch_queue_s *)self->_tokenManagerQueue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008550C;
  block[3] = &unk_1001C9D28;
  uint64_t v28 = v12;
  uint64_t v29 = v13;
  uint64_t v30 = self;
  double v32 = v54;
  __int16 v33 = &v44;
  unsigned int v34 = v43;
  NSErrorUserInfoKey v35 = v52;
  uint64_t v39 = a7;
  v36 = v42;
  __int16 v31 = v14;
  uint64_t v37 = v50;
  id v38 = v41;
  id v40 = a6;
  dispatch_sync(tokenManagerQueue, block);
  uint64_t v22 = (id)v45[5];

  _Block_object_dispose(v41, 8);
  _Block_object_dispose(v42, 8);
  _Block_object_dispose(v43, 8);
  _Block_object_dispose(&v44, 8);

  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);

  _Block_object_dispose(v54, 8);
LABEL_18:

  return v22;
}

    [v10 setRequestedScopes:&__NSArray0__struct];
    goto LABEL_18;
  }

  if (a4 == 3)
  {
    uint64_t v24 = _AKLogSiwa(v21, v22);
    double v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v10 clientID]);
      uint64_t v29 = 138412290;
      uint64_t v30 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Previous credential for client %@ is in transfer state",  (uint8_t *)&v29,  0xCu);
    }

    [v10 setRequestedScopes:&__NSArray0__struct];
    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v10 userIdentifier]);
    objc_msgSend(v10, "set_isSilentAppTransfer:", v27 != 0);
  }

  else if ((v12 & v14) == 1)
  {
    uint64_t v28 = _AKLogSiwa(v21, v22);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v10 requestedScopes]);
      uint64_t v29 = 138412290;
      uint64_t v30 = v19;
      uint64_t v20 = "Resetting scopes %@ for underage user.";
      goto LABEL_16;
    }

    goto LABEL_17;
  }

  return v8;
}

        uint64_t v16 = 0;
LABEL_18:

        goto LABEL_19;
      }

      uint64_t v20 = _AKLogSystem(v10);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      uint64_t v24 = 0;
      uint64_t v18 = "Web access info not provided, do not proceed with arming.";
      id v19 = (uint8_t *)&v24;
    }

    else
    {
      id v17 = _AKLogSystem(v8);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      double v25 = 0;
      uint64_t v18 = "Account is not primary, do not proceed with arming.";
      id v19 = (uint8_t *)&v25;
    }

  id v6 = *a1;
  id v7 = v6 >= 2;
  id v8 = v6 - 2;
  if (!v7) {
    id v8 = -1;
  }
  return (v8 + 1);
}

      id v6 = (v13 - 1) & v13;
      id v8 = __clz(__rbit64(v13)) + (v5 << 6);
LABEL_18:
      *(void *)(v0 + 32) = v5;
      *(void *)(v0 + 40) = v6;
      uint64_t v15 = (void *)(*(void *)(v9 + 48) + 16 * v8);
      *(void *)(v0 + 4_Block_object_dispose((const void *)(v34 - 152), 8) = *v15;
      uint64_t v16 = v15[1];
      *(void *)(v0 + 56) = v16;
      id v17 = *(void **)(*(void *)(v9 + 56) + 8 * v8);
      *(void *)(v0 + 64) = v17;
      swift_bridgeObjectRetain(v16);
      uint64_t v18 = v17;
      id v19 = [v18 deletedDeviceList];
      if (v19)
      {
        uint64_t v20 = v19;
        os_signpost_id_t v21 = sub_1000D0510(0LL, &qword_10020DE40, &OBJC_CLASS___AKRemoteDevice_ptr);
        uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
        *(void *)(v0 + 72) = v22;

        if (!((unint64_t)v22 >> 62))
        {
          uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          *(void *)(v0 + 80) = v23;
          if (!v23) {
            goto LABEL_2;
          }
          goto LABEL_28;
        }

        if (v22 < 0) {
          uint64_t v24 = v22;
        }
        else {
          uint64_t v24 = v22 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v22);
        double v25 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v22);
        *(void *)(v0 + 80) = v25;
        if (v25)
        {
LABEL_28:
          uint64_t v26 = 0LL;
          goto LABEL_30;
        }

        goto LABEL_2;
      }

      swift_bridgeObjectRelease(v16);
      if (v6) {
        goto LABEL_3;
      }
    }
  }

  uint64_t v26 = *(void *)(v0 + 96);
LABEL_30:
  unsigned int v27 = *(void *)(v0 + 72);
  if ((v27 & 0xC000000000000001LL) != 0) {
    uint64_t v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v27);
  }
  else {
    uint64_t v28 = *(id *)(v27 + 8 * v26 + 32);
  }
  uint64_t v29 = (uint64_t)v28;
  *(void *)(v0 + 8_Block_object_dispose((const void *)(v34 - 152), 8) = v28;
  *(void *)(v0 + 96) = v26 + 1;
  if (__OFADD__(v26, 1LL)) {
    goto LABEL_38;
  }
  uint64_t v30 = (void *)swift_task_alloc(dword_10020DE4C);
  *(void *)(v0 + 104) = v30;
  void *v30 = v0;
  v30[1] = sub_1000D013C;
  sub_1000CEC10(v29, *(void *)(v0 + 48), *(void *)(v0 + 56));
}

      id v6 = (v13 - 1) & v13;
      id v8 = __clz(__rbit64(v13)) + (v5 << 6);
LABEL_18:
      *(void *)(v0 + 40) = v5;
      *(void *)(v0 + 4_Block_object_dispose((const void *)(v34 - 152), 8) = v6;
      uint64_t v15 = (void *)(*(void *)(v9 + 48) + 16 * v8);
      *(void *)(v0 + 56) = *v15;
      uint64_t v16 = v15[1];
      *(void *)(v0 + 64) = v16;
      id v17 = *(void **)(*(void *)(v9 + 56) + 8 * v8);
      *(void *)(v0 + 72) = v17;
      swift_bridgeObjectRetain(v16);
      uint64_t v18 = v17;
      id v19 = [v18 deviceList];
      if (v19)
      {
        uint64_t v20 = v19;
        os_signpost_id_t v21 = sub_1000D0510(0LL, &qword_10020DE40, &OBJC_CLASS___AKRemoteDevice_ptr);
        uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
        *(void *)(v0 + 80) = v22;

        if (!((unint64_t)v22 >> 62))
        {
          uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          *(void *)(v0 + 8_Block_object_dispose((const void *)(v34 - 152), 8) = v23;
          if (!v23) {
            goto LABEL_2;
          }
          goto LABEL_28;
        }

        if (v22 < 0) {
          uint64_t v24 = v22;
        }
        else {
          uint64_t v24 = v22 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v22);
        double v25 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v22);
        *(void *)(v0 + 8_Block_object_dispose((const void *)(v34 - 152), 8) = v25;
        if (v25)
        {
LABEL_28:
          uint64_t v26 = 0LL;
          goto LABEL_30;
        }

        goto LABEL_2;
      }

      swift_bridgeObjectRelease(v16);
      if (v6) {
        goto LABEL_3;
      }
    }
  }

  uint64_t v26 = *(void *)(v0 + 104);
LABEL_30:
  unsigned int v27 = *(void *)(v0 + 80);
  if ((v27 & 0xC000000000000001LL) != 0) {
    uint64_t v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v27);
  }
  else {
    uint64_t v28 = *(id *)(v27 + 8 * v26 + 32);
  }
  uint64_t v29 = (uint64_t)v28;
  *(void *)(v0 + 96) = v28;
  *(void *)(v0 + 104) = v26 + 1;
  if (__OFADD__(v26, 1LL)) {
    goto LABEL_38;
  }
  uint64_t v30 = (void *)swift_task_alloc(dword_10020E594);
  *(void *)(v0 + 112) = v30;
  void *v30 = v0;
  v30[1] = sub_1000DE884;
  sub_1000DEC14(v29, *(void *)(v0 + 56), *(void *)(v0 + 64));
}

  id v6 = *a1;
  id v7 = v6 >= 0xB;
  id v8 = v6 - 11;
  if (!v7) {
    id v8 = -1;
  }
  return (v8 + 1);
}

void sub_10001CFF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012DF40((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v16 = v5;
    id v17 = [v16 countByEnumeratingWithState:&v27 objects:v33 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v28;
      while (2)
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v28 != v19) {
            objc_enumerationMutation(v16);
          }
          if (objc_msgSend( *(id *)(a1 + 32),  "hasSuffix:",  *(void *)(*((void *)&v27 + 1) + 8 * (void)i),  (void)v27))
          {
            os_signpost_id_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
            id v22 = [v21 shouldEnableAttestationLogging];

            if (v22)
            {
              uint64_t v24 = _AKLogSystem(v23);
              double v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestURL]);
                *(_DWORD *)buf = 138412290;
                double v32 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Excluding from attestation based on config. URL - %@",  buf,  0xCu);
              }
            }

            (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

            goto LABEL_19;
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v27 objects:v33 count:16];
        if (v18) {
          continue;
        }
        break;
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_19:
  }
}

void sub_10001D280(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10001D318;
  v4[3] = &unk_1001C6E38;
  SEL v3 = *(void **)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 configurationValueForKey:@"baa-sign-sampling" fromCache:1 completion:v4];
}

void sub_10001D318(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10012DFD0((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
LABEL_8:

    goto LABEL_9;
  }

  if (objc_msgSend( *(id *)(a1 + 32),  "_shouldPostAnalyticsWithSamplingRate:",  objc_msgSend(a2, "unsignedIntegerValue")))
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
    uint64_t v15 = _AKLogSystem(-[os_log_s sendEvent:](v8, "sendEvent:", *(void *)(a1 + 40)));
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_10012DFA4();
    }

    goto LABEL_8;
  }

LABEL_9:
}
}

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  double v25 = [v24 isProtectedWithPasscode];

  if (v25) {
    objc_msgSend(v5, "ak_addPRKRequestHeader");
  }
  if (+[AKFeatureManager isEnforceMDMPolicyEnabled]( &OBJC_CLASS___AKFeatureManager,  "isEnforceMDMPolicyEnabled"))
  {
    uint64_t v26 = objc_alloc_init(&OBJC_CLASS___AKMDMInformationProvider);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl concreteAuthenticationContext](self, "concreteAuthenticationContext"));
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( -[AKMDMInformationProvider fetchMDMInformationIfNecessaryForAuthContext:]( v26,  "fetchMDMInformationIfNecessaryForAuthContext:",  v27));

    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 deviceManagedState]);
    if (v29)
    {
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v28 deviceManagedState]);
      objc_msgSend(v5, "ak_addHeaderForDeviceManagementState:", v30);
    }

    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v28 organizationToken]);

    if (v31)
    {
      double v32 = (void *)objc_claimAutoreleasedReturnValue([v28 organizationToken]);
      objc_msgSend(v5, "ak_addHeaderForMDMOrganizationToken:", v32);
    }
  }

  __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl concreteAuthenticationContext](self, "concreteAuthenticationContext"));
  unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue([v33 idmsDataToken]);

  if (v34)
  {
    NSErrorUserInfoKey v35 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl concreteAuthenticationContext](self, "concreteAuthenticationContext"));
    v36 = (void *)objc_claimAutoreleasedReturnValue([v35 idmsDataToken]);
    [v5 setValue:v36 forHTTPHeaderField:@"X-Apple-I-IdMS-Data"];
  }

  return 1;
}

  if ((v19 & 0xC000000000000001LL) != 0)
  {
    os_signpost_id_t v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v19);
  }

  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      __break(1u);
    }
    os_signpost_id_t v21 = *(id *)(v19 + 32);
  }

  id v22 = v21;
  swift_bridgeObjectRelease(v19);
  uint64_t v23 = v22;
  uint64_t v24 = sub_1000D4404(v23);
  if (!v2)
  {
    v67 = v23;
    v68 = v24;
    __int16 v33 = *(void *)&v24[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
    double v32 = *(void *)&v24[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8];
    swift_bridgeObjectRetain(v32);
    unsigned int v34 = [v13 participantID];
    NSErrorUserInfoKey v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v37 = v36;

    if (v33 == v35 && v32 == v37)
    {
      swift_bridgeObjectRelease_n(v32, 2LL);
      id v38 = v68;
    }

    else
    {
      uint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, v35, v37, 0LL);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v37);
      id v38 = v68;
      if ((v39 & 1) == 0) {
        goto LABEL_30;
      }
    }

    v41 = *(void *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    id v40 = *(void *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
    swift_bridgeObjectRetain(v40);
    v42 = [v13 groupID];
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    if (v41 == v43 && v40 == v45)
    {
      swift_bridgeObjectRelease_n(v40, 2LL);
      id v38 = v68;
    }

    else
    {
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v40, v43, v45, 0LL);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v45);
      id v38 = v68;
      if ((v46 & 1) == 0) {
        goto LABEL_30;
      }
    }

    v48 = *(void *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
    uint64_t v47 = *(void *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8];
    swift_bridgeObjectRetain(v47);
    v49 = [a1 userID];
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    if (v48 == v50 && v47 == v52)
    {

      swift_bridgeObjectRelease_n(v47, 2LL);
LABEL_29:
      uint64_t v4 = *(id *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
      swift_bridgeObjectRetain(*(void *)&v38[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken + 8]);

      return v4;
    }

    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v47, v50, v52, 0LL);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v52);
    if ((v53 & 1) != 0)
    {

      goto LABEL_29;
    }

BOOL sub_10001DD38(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) altDSIDForAccount:v3]);
  id v5 = [v4 length];
  if (!v5)
  {
    uint64_t v6 = _AKLogSystem(0LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10012E0A8((uint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  return v5 != 0LL;
}

id sub_10001DEC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _saveAccounts:*(void *)(a1 + 40) inMemoryTokens:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10001E21C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully removed account %@.",  (uint8_t *)&v10,  0xCu);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10012E10C();
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 24LL));
}

void sub_10001E4F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    uint64_t v11 = _AKLogSystem(v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10012E170((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }

    if (a10) {
      (*(void (**)(uint64_t))(a10 + 16))(a10);
    }

    objc_end_catch();
    JUMPOUT(0x10001E4A0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001E594(uint64_t a1)
{
  id v1 = (id *)(a1 + 40);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) altDSIDForAccount:*(void *)(a1 + 40)]);
  id v3 = (void *)*((void *)*(v1 - 1) + 1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1[1] objectForKeyedSubscript:v2]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 buildCredentialWithTokens:v4]);

  [*v1 setCredential:v5];
  id v6 = *v1;
  uint64_t v7 = (void *)*((void *)*(v1 - 1) + 1);
  id v14 = 0LL;
  unsigned __int8 v8 = [v7 saveAccount:v6 error:&v14];
  id v9 = v14;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if ((v8 & 1) != 0)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *v1;
      *(_DWORD *)buf = 138412290;
      id v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Successfully saved account %@.", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    sub_10012E1D4();
  }
}

void sub_10001E8A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001E8BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _decrementQueueSize];
}

void sub_10001EB24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001EB40(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _decrementQueueSize];
}

void sub_10001F0F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) proxiedDevice]);
    if (v7
      && (unsigned __int8 v8 = (void *)v7,
          id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) appProvidedContext]),
          v9,
          v8,
          v9))
    {
      uint64_t v11 = _AKLogSystem(v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(v13 + 144);
        *(_DWORD *)buf = 138412546;
        uint64_t v25 = v13;
        __int16 v26 = 2112;
        uint64_t v27 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%@: Requesting attestation data for proxied auth context (%@)",  buf,  0x16u);
      }

      uint64_t v15 = objc_alloc(&OBJC_CLASS___AKAnisetteProvisioningService);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
      uint64_t v17 = -[AKAnisetteProvisioningService initWithClient:context:]( v15,  "initWithClient:context:",  v16,  *(void *)(*(void *)(a1 + 32) + 144LL));

      uint64_t v18 = objc_alloc_init(&OBJC_CLASS___NSMutableURLRequest);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) proxiedDevice]);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_10001F32C;
      v21[3] = &unk_1001C6FF0;
      v21[4] = *(void *)(a1 + 32);
      id v22 = v5;
      id v23 = *(id *)(a1 + 40);
      -[AKAnisetteProvisioningService attestationDataForDevice:withRequest:completion:]( v17,  "attestationDataForDevice:withRequest:completion:",  v19,  v18,  v21);
    }

    else
    {
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v17 = (AKAnisetteProvisioningService *)[v5 copy];
      (*(void (**)(uint64_t, AKAnisetteProvisioningService *, void))(v20 + 16))(v20, v17, 0LL);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10001F32C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10012E238(a1, (uint64_t)v6, v9);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 144);
    int v19 = 138412802;
    uint64_t v20 = v10;
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@: Fetched attestation data (%@) for proxied auth context (%@)",  (uint8_t *)&v19,  0x20u);
  }

  uint64_t v12 = kAppleIDAuthSupportClientProvidedData;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kAppleIDAuthSupportClientProvidedData]);
  id v14 = [v13 mutableCopy];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 attestationHeaders]);
  [v14 addEntriesFromDictionary:v15];

  id v16 = [v14 copy];
  [*(id *)(a1 + 40) setObject:v16 forKeyedSubscript:v12];

  uint64_t v17 = *(void *)(a1 + 48);
  id v18 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, void))(v17 + 16))(v17, v18, 0LL);
}

void sub_10001F5AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10001F5C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001F5D4(uint64_t a1)
{
}

void sub_10001F5DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_131;
  }

  id v139 = v6;
  id v8 = [v5 mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:kAppleIDAuthSupportClientProvidedData]);
  id v12 = [v11 mutableCopy];

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders]);
  id v14 = (NSMutableDictionary *)[v13 mutableCopy];

  if (!v14) {
    id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AKAppleIDPushHelperService sharedService](&OBJC_CLASS___AKAppleIDPushHelperService, "sharedService"));
  uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 publicAPSTokenString]);

  if (v16) {
    [v12 setObject:v16 forKeyedSubscript:AKRequestBodyPushTokenKey];
  }
  v140 = (void *)v16;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(*(void *)(a1 + 32) + 144) authenticationType]));
  [v12 setObject:v17 forKeyedSubscript:@"at"];
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 stringValue]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  v18,  AKClientAuthenticationTypeHeader);

  int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) _identifier]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 UUIDString]);
  [v12 setObject:v20 forKeyedSubscript:@"X-Apple-I-Request-UUID"];

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authContext]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 _proxiedAppBundleID]);

  if ([v22 length]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  v22,  AKProxiedBundleIDHeader);
  }
  uint64_t v23 = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 144) supportsPiggybacking];
  uint64_t v24 = _AKLogSystem(v23);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v26 = @"YES";
    if (!(_DWORD)v23) {
      __int16 v26 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    v147 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Context eligibility for piggybacking: %@",  buf,  0xCu);
  }

  v138 = v22;
  if ((_DWORD)v23)
  {
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
    id v29 = [v28 shouldDisablePiggybacking];

    if (v29 == (id)1)
    {
      uint64_t v31 = _AKLogSystem(v30);
      double v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        __int16 v33 = "Piggybacking forced disabled";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 2u);
      }
    }

    else
    {
      unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
      unsigned int v35 = [v34 isInCircle];

      if (v35)
      {
        uint64_t v37 = _AKLogSystem(v36);
        double v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v33 = "Skipping piggybacking, already in circle";
          goto LABEL_27;
        }
      }

      else
      {
        id v38 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
        unsigned int v39 = [v38 isInRestrictedSharingMode];

        if (!v39)
        {
          if (v140)
          {
            uint64_t v23 = 1LL;
            goto LABEL_29;
          }

          uint64_t v41 = _AKLogSystem(v27);
          double v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_28;
          }
          *(_WORD *)buf = 0;
          __int16 v33 = "Skipping piggybacking, missing push token";
          goto LABEL_27;
        }

        uint64_t v40 = _AKLogSystem(v27);
        double v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v33 = "Skipping piggybacking, user in restricted sharing mode";
          goto LABEL_27;
        }
      }
    }

LABEL_28:
    uint64_t v23 = 0LL;
  }

    uint64_t v30 = 1;
    goto LABEL_29;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 _password]);
  uint64_t v16 = [v15 length];

  if (v16)
  {
    id v18 = _AKLogSystem(v17);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_WORD *)v45 = 0;
    id v12 = "A password was provided in the context, lets try interactive auth.";
LABEL_26:
    uint64_t v13 = v10;
    id v14 = 2;
    goto LABEL_27;
  }

  int v19 = (void *)objc_claimAutoreleasedReturnValue([v4 proxiedDevice]);
  if (v19)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v4 proxiedAppleID]);
    __int16 v21 = v20 == 0LL;
  }

  else
  {
    __int16 v21 = 0;
  }

  uint64_t v23 = _AKLogSystem(v22);
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = @"YES";
    if (v7) {
      __int16 v26 = @"YES";
    }
    else {
      __int16 v26 = @"NO";
    }
    *(_DWORD *)v45 = 138412802;
    *(void *)&v45[4] = v26;
    *(_WORD *)&v45[12] = 2112;
    if (!v21) {
      uint64_t v25 = @"NO";
    }
    *(void *)&v45[14] = v25;
    uint64_t v46 = 2112;
    uint64_t v47 = @"NO";
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Has proxied anisette data: %@ - Easy Sign In: %@ - Long Distance Op: %@",  v45,  0x20u);
  }

  if (v7) {
    __int128 v28 = 1;
  }
  else {
    __int128 v28 = v21;
  }
  if (v28 == 1)
  {
    id v29 = _AKLogSystem(v27);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_WORD *)v45 = 0;
    id v12 = "Context is configured for a proxied auth that requires interaction.";
    goto LABEL_26;
  }

  double v32 = [v4 isConfiguredForTokenUpgrade];
  if ((_DWORD)v32)
  {
    __int16 v33 = _AKLogSystem(v32);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v45 = 0;
      unsigned int v34 = "Context is configured for token upgrade, interactive auth is not required.";
LABEL_48:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v34, v45, 2u);
      goto LABEL_49;
    }

    goto LABEL_49;
  }

  unsigned int v35 = objc_claimAutoreleasedReturnValue([v4 serviceIdentifiers]);
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    if ([v4 authenticationType])
    {
      uint64_t v37 = [v4 authenticationType];

      if (v37 != (id)1) {
        goto LABEL_36;
      }
    }

    else
    {
    }

    v43 = _AKLogSystem(v35);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v45 = 0;
      unsigned int v34 = "Context is configured for silent service renew, interactive auth is not required.";
      goto LABEL_48;
    }

    swift_release(a1);
    return;
  }

  __break(1u);
LABEL_30:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_29:
  uint64_t v42 = _AKLogSystem(v27);
  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    v44 = @"YES";
    if (!(_DWORD)v23) {
      v44 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    v147 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Client is eligible for piggybacking: %@",  buf,  0xCu);
  }

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v23));
  [v12 setObject:v45 forKeyedSubscript:@"pbe"];

  if ([*(id *)(*(void *)(a1 + 32) + 144) piggybackingForTrustedDevice])
  {
    uint64_t v46 = _AKLogSystem([v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKPiggybackingForTrustedDevice]);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Client has requested piggybacking approval",  buf,  2u);
    }
  }

  id v48 = [*(id *)(*(void *)(a1 + 32) + 144) shouldPromptForPasswordOnly];
  if ((_DWORD)v48)
  {
    uint64_t v49 = _AKLogSystem(v48);
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Client has requested password-only auth.",  buf,  2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"X-Apple-Password-Only"];
  }

  id v51 = [*(id *)(*(void *)(a1 + 32) + 144) shouldRequestShortLivedToken];
  if ((_DWORD)v51)
  {
    uint64_t v52 = _AKLogSystem(v51);
    v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Client has requested a short-lived token.",  buf,  2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKShortLivedTokenKey];
  }

  id v54 = [*(id *)(*(void *)(a1 + 32) + 144) shouldRequestRecoveryPET];
  if ((_DWORD)v54)
  {
    uint64_t v55 = _AKLogSystem(v54);
    v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Client has request a recovery PET.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"rpet"];
  }

  unsigned int v57 = [*(id *)(*(void *)(a1 + 32) + 144) shouldOfferSecurityUpgrade];
  v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  unsigned int v59 = [v58 isExemptedFromMandatoryUISecurityUpgrade];

  if (v59)
  {
    uint64_t v61 = _AKLogSystem(v60);
    v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    v63 = "Client is exempt from mandatory UI security upgrade.";
    goto LABEL_66;
  }

  id v64 = [*(id *)(*(void *)(a1 + 32) + 144) shouldPromptForPasswordOnly];
  if (((v64 ^ 1 | v57) & 1) == 0)
  {
    uint64_t v73 = _AKLogSystem(v64);
    v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    v63 = "Client is requesting password only auth. Security upgrade will not be offered.";
    goto LABEL_66;
  }

  id v65 = [*(id *)(*(void *)(a1 + 32) + 144) isEphemeral];
  if (((v65 ^ 1 | v57) & 1) == 0)
  {
    uint64_t v74 = _AKLogSystem(v65);
    v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    v63 = "Client is requesting ephemeral auth. Security upgrade will not be offered.";
LABEL_66:
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, v63, buf, 2u);
LABEL_67:

    if (v57) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }

  if ([*(id *)(a1 + 32) canPresentRemoteUI])
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) authKitAccount:0]);

    if (!v66)
    {
      uint64_t v135 = _AKLogSystem(v67);
      v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "Client logging in for first time is using full AuthKit UI, security upgrade should be offered.",  buf,  2u);
      }

      goto LABEL_68;
    }
  }

  if (v57)
  {
    v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) isAppleIDLoginEnabled]);
    unsigned int v69 = [v68 BOOLValue];

    if (v69)
    {
      uint64_t v71 = _AKLogSystem(v70);
      v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Cannot offer HSA2 upgrade on device with Apple ID login enabled.",  buf,  2u);
      }

      goto LABEL_71;
    }
}

LABEL_68:
    uint64_t v75 = _AKLogSystem(v70);
    v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Client has indicated that we should offer HSA 2.0 upgrade.",  buf,  2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"X-Apple-Offer-Security-Upgrade"];
    v72 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) securityUpgradeContext]);
    [v12 setObject:v72 forKeyedSubscript:AKAuthenticationSecurityUpgradeContextHeaderFieldKey];
LABEL_71:
  }

LABEL_72:
  id v77 = [*(id *)(*(void *)(a1 + 32) + 144) isEphemeral];
  if ((_DWORD)v77)
  {
    uint64_t v78 = _AKLogSystem(v77);
    v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Performing ephemeral auth. Will not ask for ckgen or prkgen.",  buf,  2u);
    }

    goto LABEL_117;
  }

  id v80 = [*(id *)(*(void *)(a1 + 32) + 144) _localUserHasEmptyPassword];
  int v81 = (int)v80;
  if ((v80 & 1) == 0)
  {
    uint64_t v82 = _AKLogSystem(v80);
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v147 = @"YES";
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Sending prkgen: %@", buf, 0xCu);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKPasscodeIndicatorKey];
  }

  v84 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) desiredInternalTokens]);
  unsigned int v85 = [v84 containsObject:AKAuthenticationInternalTokenCK];

  uint64_t v87 = _AKLogSystem(v86);
  v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    v89 = @"YES";
    if (!v85) {
      v89 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    v147 = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "The client indicated support for ckgen: %@",  buf,  0xCu);
  }

  uint64_t v90 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) passwordlessToken]);
  uint64_t v92 = _AKLogSystem(v91);
  v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    v94 = @"YES";
    if (!v90) {
      v94 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    v147 = v94;
    _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "The client provided a passwordlessToken: %@",  buf,  0xCu);
  }

  v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) password]);
  if (!v95)
  {
    uint64_t v96 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) companionDevice]);
    if (v96 | v90)
    {
      v97 = (void *)v96;
    }

    else
    {
      unsigned int v85 = 0;
      v97 = 0LL;
    }
  }

  uint64_t v99 = _AKLogSystem(v98);
  v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    v101 = @"YES";
    if (!v85) {
      v101 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    v147 = v101;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "ckgen supported: %@", buf, 0xCu);
  }

  if (!v85) {
    goto LABEL_117;
  }
  v102 = *(id **)(a1 + 32);
  if (v81)
  {
    [v102[18] setAnticipateEscrowAttempt:0];
  }

  else
  {
    v103 = (void *)objc_claimAutoreleasedReturnValue([v102 _passwordResetBackupToken]);

    id v104 = [*(id *)(*(void *)(a1 + 32) + 144) setAnticipateEscrowAttempt:v103 == 0];
    if (!v103)
    {
      int v111 = 1;
      goto LABEL_111;
    }
  }

  id v104 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) continuationToken:0]);
  if (!v104) {
    goto LABEL_109;
  }
  v105 = v104;
  uint64_t v106 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passwordResetToken]);
  if (v106) {
    char v107 = 1;
  }
  else {
    char v107 = v81;
  }
  if ((v107 & 1) == 0)
  {

    goto LABEL_109;
  }

  v108 = (void *)v106;
  uint64_t v109 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) companionDevice]);
  uint64_t v110 = v109 | v90;

  if (v110)
  {
LABEL_109:
    int v111 = 0;
LABEL_111:
    uint64_t v112 = _AKLogSystem(v104);
    v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "Will ask for ckgen.", buf, 2u);
    }

    id v114 = [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKContinutationKeyGenKey];
    if (v111)
    {
      uint64_t v115 = _AKLogSystem(v114);
      v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "Will ask to stash escrow PRK", buf, 2u);
      }

      [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"icscrec"];
    }
  }

LABEL_117:
  v117 = *(void **)(*(void *)(a1 + 32) + 144LL);
  id v145 = 0LL;
  v118 = (void *)objc_claimAutoreleasedReturnValue([v117 authKitAccount:&v145]);
  id v119 = v145;
  v120 = v119;
  if (v119)
  {
    uint64_t v121 = _AKLogSystem(v119);
    v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
      sub_10012E2D4((uint64_t)v120, v122);
    }
  }

  v123 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  unsigned int v124 = [v123 accountAccessTelemetryOptInForAccount:v118];

  if (v124)
  {
    v125 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) telemetryDeviceSessionID]);

    if (v125)
    {
      v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) telemetryDeviceSessionID]);
      [v12 setObject:v126 forKeyedSubscript:@"X-Apple-I-Device-Session-Id"];
    }

    v127 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) telemetryFlowID]);

    if (v127)
    {
      v128 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) telemetryFlowID]);
      [v12 setObject:v128 forKeyedSubscript:@"X-Apple-I-Flow-Id"];
    }
  }

  v129 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) sourceAltDSID]);

  if (v129)
  {
    v130 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) sourceAltDSID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  v130,  AKSourceAltDSIDHeaderKey);
  }

  v131 = *(void **)(a1 + 32);
  v141[0] = _NSConcreteStackBlock;
  v141[1] = 3221225472LL;
  v141[2] = sub_100020554;
  v141[3] = &unk_1001C7068;
  v141[4] = v131;
  v132 = v14;
  v142 = v132;
  id v133 = v12;
  id v143 = v133;
  __int128 v137 = *(_OWORD *)(a1 + 40);
  id v134 = (id)v137;
  __int128 v144 = v137;
  [v131 _updateHeadersWithCompanionAnisetteData:v132 clientProvidedData:v133 completion:v141];

  uint64_t v7 = v139;
LABEL_131:
}

void sub_100020554(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100020634;
    v8[3] = &unk_1001C7040;
    void v8[4] = v3;
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 64);
    id v9 = v6;
    uint64_t v12 = v7;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 56);
    [v3 _updateHeadersWithProxiedDeviceAnisetteData:v4 clientProvidedData:v6 completion:v8];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

uint64_t sub_100020634(uint64_t a1, int a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) clientProvidedDataHelper:*(void *)(a1 + 40)];
    id v3 = [*(id *)(a1 + 40) copy];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v3 forKeyedSubscript:kAppleIDAuthSupportClientProvidedData];

    id v4 = [*(id *)(a1 + 48) copy];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v4 forKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders];

    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  return v5();
}

void sub_10002092C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableURLRequest ak_proxiedAnisetteHeadersWithData:]( &OBJC_CLASS___NSMutableURLRequest,  "ak_proxiedAnisetteHeadersWithData:",  a2));
    [*(id *)(a1 + 32) addEntriesFromDictionary:v7];
    [*(id *)(a1 + 40) addEntriesFromDictionary:v7];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v8 = _AKLogSystem(v5);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012E348(a1);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100020C70(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableURLRequest ak_anisetteHeadersWithCompanionData:]( &OBJC_CLASS___NSMutableURLRequest,  "ak_anisetteHeadersWithCompanionData:",  a2));
    [*(id *)(a1 + 32) addEntriesFromDictionary:v7];
    [*(id *)(a1 + 40) addEntriesFromDictionary:v7];
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 1LL, 0LL);
  }

  else
  {
    uint64_t v8 = _AKLogSystem(v5);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012E3D8(a1);
    }

    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_generalErrorWithCode:errorDomain:underlyingError:]( &OBJC_CLASS___NSError,  "ak_generalErrorWithCode:errorDomain:underlyingError:",  -8026LL,  AKAnisetteErrorDomain,  v6));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v7);
  }
}

void sub_100021634( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_100021CFC(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F300;
  uint64_t v7 = qword_10020F300;
  if (!qword_10020F300)
  {
    v8[0] = *(_OWORD *)off_1001C7168;
    v8[1] = *(_OWORD *)&off_1001C7178;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F300 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100021DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100021DC0()
{
  id v3 = 0LL;
  uint64_t v0 = sub_100021CFC((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_100021E18()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F308;
  uint64_t v7 = qword_10020F308;
  if (!qword_10020F308)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100021ECC;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100021ECC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100021EB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100021ECC(uint64_t a1)
{
  Class result = objc_getClass("SFAutoFillFeatureManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F308 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012E468();
    return (Class)sub_100021F20(v3);
  }

  return result;
}

id sub_100021F20()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F310;
  uint64_t v7 = qword_10020F310;
  if (!qword_10020F310)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100021FD4;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100021FD4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100021FBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100021FD4(uint64_t a1)
{
  Class result = objc_getClass("SFSafariCredential");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F310 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012E48C();
    return (Class)sub_100022028(v3);
  }

  return result;
}

id sub_100022028()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F318;
  uint64_t v7 = qword_10020F318;
  if (!qword_10020F318)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000220DC;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_1000220DC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000220C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

AKAppleIDAuthenticationContext *sub_1000220DC(uint64_t a1)
{
  Class result = (AKAppleIDAuthenticationContext *)objc_getClass("SFSafariCredentialStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F318 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (AKAuthenticationSurrogateModel *)sub_10012E4B0();
    return -[AKAuthenticationSurrogateModel surrogateContext](v3, v4);
  }

  return result;
}

void sub_1000224F8(id *a1)
{
  if ([a1[4] _isClientWaitingForSurrogateAuth:a1[5]])
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Out-of-process surrogate auth is already in progress for client %@.",  a1[5]));
    id v2 = a1[4];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7045LL));
    [v2 _handleError:v3 logMessage:v16 withUIWorkBlock:a1[7]];
  }

  else
  {
    SEL v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] surrogateIDGenerator]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 generateCheckinID]);

    uint64_t v6 = _AKLogSystem( [a1[4] _waitForSurrogateCheckInWithContext:a1[6] withUIWorkBlock:a1[7] client:a1[5] andCheckInID:v5]);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 UUIDString]);
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Begin out-of-process authentication with surrogate ID %@",  buf,  0xCu);
    }

    id v9 = a1[5];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10002283C;
    v24[3] = &unk_1001C7190;
    id v25 = v9;
    id v10 = v5;
    id v11 = a1[4];
    id v26 = v10;
    id v27 = v11;
    id v28 = a1[6];
    id v29 = a1[7];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v25 proxyWithErrorHandler:v24]);
    objc_initWeak((id *)buf, a1[4]);
    id v13 = a1[6];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000228C8;
    v17[3] = &unk_1001C71B8;
    id v18 = a1[5];
    id v14 = v10;
    id v15 = a1[4];
    id v19 = v14;
    id v20 = v15;
    id v21 = a1[6];
    objc_copyWeak(&v23, (id *)buf);
    id v22 = a1[7];
    [v12 launchOutOfProcessAuthentication:v13 surrogateID:v14 withErrorHandler:v17];

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }

void sub_100022818(_Unwind_Exception *a1)
{
}

void sub_10002283C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"XPC Error launching out-of-process authentication for client %@ with surrogate ID %@.",  v3,  v4));
  [*(id *)(a1 + 48) _stopWaitingForCheckInWithContext:*(void *)(a1 + 56) andError:v5];
  [*(id *)(a1 + 48) _handleError:v5 logMessage:v6 withUIWorkBlock:*(void *)(a1 + 64)];
}

void sub_1000228C8(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to launch out-of-process authentication for client %@ with surrogate ID %@.",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  if (v5)
  {
    [*(id *)(a1 + 48) _stopWaitingForCheckInWithContext:*(void *)(a1 + 56) andError:v5];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    [WeakRetained _handleError:v5 logMessage:v3 withUIWorkBlock:*(void *)(a1 + 64)];
  }
}

void sub_100022A48(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isWaitingForSettingsSurrogateAuth] & 1) != 0
    || (id v2 = [*(id *)(a1 + 32) _isClientWaitingForSurrogateAuth:*(void *)(a1 + 40)], (_DWORD)v2))
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Settings surrogate auth is already in progress for client %@",  *(void *)(a1 + 40)));
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = -7045LL;
LABEL_4:
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v4));
    [v3 _handleError:v5 logMessage:v15 withUIWorkBlock:*(void *)(a1 + 56)];

    return;
  }

  if (!*(_BYTE *)(a1 + 64))
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Redirecting to Settings for client %@ is not permitted for this call.",  *(void *)(a1 + 40)));
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = -7027LL;
    goto LABEL_4;
  }

  uint64_t v6 = _AKLogSystem(v2);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Pausing Surrogate Queue to prompt for redirect...",  (uint8_t *)buf,  2u);
  }

  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 56LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateIDGenerator]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 generateCheckinID]);

  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 1;
  [*(id *)(a1 + 32) _waitForSurrogateCheckInWithContext:*(void *)(a1 + 48) withUIWorkBlock:*(void *)(a1 + 56) client:*(void *)(a1 + 40) andCheckInID:v9];
  objc_initWeak(buf, *(id *)(a1 + 32));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 65);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100022CE8;
  v16[3] = &unk_1001C7208;
  objc_copyWeak(&v21, buf);
  v16[4] = *(void *)(a1 + 32);
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 40);
  id v20 = *(id *)(a1 + 56);
  id v14 = v9;
  id v19 = v14;
  [WeakRetained promptForAppleIDSettingsRedirectWithContext:v11 client:v12 needFullUI:v13 completion:v16];

  objc_destroyWeak(&v21);
  objc_destroyWeak(buf);
}

void sub_100022CCC(_Unwind_Exception *a1)
{
}

void sub_100022CE8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (dispatch_object_t *)objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v7 = WeakRetained;
  if (!WeakRetained)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7001LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
    [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v9];
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Lost reference to strongself during Settings redirect for client %@.",  *(void *)(a1 + 48)));
    [0 _handleError:v9 logMessage:v10 withUIWorkBlock:*(void *)(a1 + 64)];

    goto LABEL_16;
  }

  if (v5)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
    [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v5];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to prompt for Settings redirect for client %@.",  *(void *)(a1 + 48)));
    -[dispatch_object_t _handleError:logMessage:withUIWorkBlock:]( v7,  "_handleError:logMessage:withUIWorkBlock:",  v5,  v8,  *(void *)(a1 + 64));
  }

  else
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v11 = _AKLogSystem(WeakRetained);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Taking user to Settings/System Preferences for auth UI...",  buf,  2u);
      }

      id v13 = -[dispatch_object_t _launchAppleIDSettingsForContext:withCheckinID:]( v7,  "_launchAppleIDSettingsForContext:withCheckinID:",  *(void *)(a1 + 40),  *(void *)(a1 + 56));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7015LL));
      *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
      [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v8];
      id v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to launch Settings for client %@.",  *(void *)(a1 + 48));
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7003LL));
      *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
      [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v8];
      id v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"User canceled Settings redirect for client %@.",  *(void *)(a1 + 48));
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    -[dispatch_object_t _handleError:logMessage:withUIWorkBlock:]( v7,  "_handleError:logMessage:withUIWorkBlock:",  v8,  v15,  *(void *)(a1 + 64));
  }

LABEL_13:
  uint64_t v16 = _AKLogSystem(v13);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Resuming Surrogate Queue after prompt for redirect...",  v18,  2u);
  }

  dispatch_resume(v7[7]);
LABEL_16:
}

void sub_100023008(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] inProgressSurrogates]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _identifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 surrogateContext]);
  if (v5)
  {
    uint64_t v7 = _AKLogSystem(v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 surrogateContext]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 _identifier]);
      *(_DWORD *)buf = 138412290;
      id v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "UI surrogate %@ registered.", buf, 0xCu);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 surrogateContext]);
    [v11 _updateWithValuesFromContext:a1[5]];

    id WeakRetained = objc_loadWeakRetained((id *)a1[4] + 1);
    id v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained uiWorkQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100023244;
    block[3] = &unk_1001C7258;
    id v20 = a1[6];
    id v19 = v4;
    dispatch_async(v13, block);
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _identifier]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UI surrogate %@ not registered. Unable to do UI work.",  v14));

    id v16 = a1[4];
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7014LL));
    [v16 _handleError:v17 logMessage:v15 withUIWorkBlock:a1[6]];
  }
}

void sub_100023244(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateClient]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateContext]);
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))(v2, v4, v3, 0LL);
}

void sub_100023370(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _identifier]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _fetchSurrogateWithRegistrationID:v2]);
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 hasCheckedIn];
    int v6 = (int)v5;
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = v8;
    if (v6)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10012E538();
      }
    }

    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        uint64_t v20 = v11;
        __int16 v21 = 2112;
        id v22 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "UI surrogate client %@ with surrogate ID %@ is checking in.",  buf,  0x16u);
      }

      [v4 setSurrogateClient:*(void *)(a1 + 48)];
      [v4 setSurrogateContext:*(void *)(a1 + 32)];
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 pendingClientUIWork]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 pendingBGContext]);
      [v4 setPendingClientUIWork:0];
      [v4 setPendingBGContext:0];
      [v4 setHasCheckedIn:1];
      [v4 setSurrogateCompletion:*(void *)(a1 + 56)];
      if (v9)
      {
        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 surrogateContext]);
          [v13 _updateWithValuesFromContext:v12];
        }

        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
        id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained uiWorkQueue]);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_1000235C4;
        v16[3] = &unk_1001C7258;
        id v18 = v9;
        id v17 = v4;
        dispatch_async(v15, v16);
      }
    }
  }

  else
  {
    uint64_t v10 = _AKLogSystem(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012E4D4();
    }
  }
}

void sub_1000235C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateClient]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateContext]);
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))(v2, v4, v3, 0LL);
}

uint64_t sub_100023CB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  *(void *)(a1 + 32));
}

LABEL_11:
  -[NSLock unlock](self->_surrogateCheckinIDLock, "unlock");
  return v7;
}

  -[NSLock unlock](self->_surrogateCheckinIDLock, "unlock");
  return v7;
}

    id v13 = [*(id *)(a1 + 32) _notifyDelegatesOfMessageActivation:*(void *)(a1 + 40) result:a2];
    if (a2)
    {
      [*(id *)(a1 + 32) _performCommandForMessage:*(void *)(a1 + 40) forAccount:*(void *)(a1 + 48)];
      return;
    }

    id v14 = _AKLogSystem(v13);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (!os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    LOWORD(v15) = 0;
    id v9 = "User dismissed notification. Nothing further to do.";
    goto LABEL_15;
  }

  uint64_t v10 = [*(id *)(a1 + 32) _canProceedWithArmingForMessage:*(void *)(a1 + 40) account:*(void *)(a1 + 48)];
  if (!(_DWORD)v10) {
    goto LABEL_11;
  }
  uint64_t v11 = _AKLogSystem(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "User accepted PCS arming push, begin device arming.",  (uint8_t *)&v15,  2u);
  }

  [*(id *)(a1 + 32) _armDeviceWithMessage:*(void *)(a1 + 40) account:*(void *)(a1 + 48) notificationResult:1];
}
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    id v25 = (uint64_t *)(v20[6] + 16 * v14);
    *id v25 = a3;
    v25[1] = a4;
    id v26 = (void *)(v20[7] + 16 * v14);
    CFStringRef v26 = a1;
    v26[1] = a2;
    id v27 = v20[2];
    id v28 = __OFADD__(v27, 1LL);
    id v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_1000F03D8(v17, a5 & 1);
  id v23 = sub_1000F9BB8(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    id v14 = v23;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v23 = (uint64_t *)(v18[6] + 16 * v12);
    void *v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v24 = v18[2];
    id v25 = __OFADD__(v24, 1LL);
    id v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_1000F0708(v15, a4 & 1);
  __int16 v21 = sub_1000F9BB8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    uint64_t v12 = v21;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    id v25 = v20[2];
    id v26 = __OFADD__(v25, 1LL);
    id v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1000F0A1C(v17, a4 & 1, a5);
  id v22 = sub_1000F9BB8(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    id v14 = v22;
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v24[(v17 >> 6) + 8] |= 1LL << v17;
    id v29 = (uint64_t *)(v24[6] + 16 * v17);
    *id v29 = v12;
    v29[1] = v13;
    *(void *)(v24[7] + 8 * v17) = v14;
    uint64_t v30 = v24[2];
    uint64_t v31 = __OFADD__(v30, 1LL);
    double v32 = v30 + 1;
    if (v31)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v24[2] = v32;
LABEL_13:
    sub_1000F3FA0();
    if (v34)
    {
      uint64_t v36 = v33;
      uint64_t v37 = v34;
      id v38 = v35;
      do
      {
        v45 = (void *)*a5;
        uint64_t v46 = sub_1000F9BB8(v36, v37);
        id v48 = v45[2];
        uint64_t v49 = (v47 & 1) == 0;
        uint64_t v31 = __OFADD__(v48, v49);
        v50 = v48 + v49;
        if (v31) {
          goto LABEL_24;
        }
        id v51 = v47;
        if (v45[3] < v50)
        {
          sub_1000F0A1C(v50, 1LL, &qword_10020EBC0);
          uint64_t v46 = sub_1000F9BB8(v36, v37);
          if ((v51 & 1) != (v52 & 1)) {
            goto LABEL_26;
          }
        }

        v53 = (void *)*a5;
        if ((v51 & 1) != 0)
        {
          unsigned int v39 = 8 * v46;
          uint64_t v40 = *(id *)(v53[7] + 8 * v46);
          swift_bridgeObjectRelease(v37);

          uint64_t v41 = v53[7];
          *(void *)(v41 + v39) = v40;
        }

        else
        {
          v53[(v46 >> 6) + 8] |= 1LL << v46;
          id v54 = (uint64_t *)(v53[6] + 16 * v46);
          *id v54 = v36;
          v54[1] = v37;
          *(void *)(v53[7] + 8 * v46) = v38;
          uint64_t v55 = v53[2];
          uint64_t v31 = __OFADD__(v55, 1LL);
          v56 = v55 + 1;
          if (v31) {
            goto LABEL_25;
          }
          v53[2] = v56;
        }

        sub_1000F3FA0();
        uint64_t v36 = v42;
        uint64_t v37 = v43;
        id v38 = v44;
      }

      while (v43);
    }

uint64_t sub_10002590C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F328;
  uint64_t v7 = qword_10020F328;
  if (!qword_10020F328)
  {
    v8[0] = *(_OWORD *)off_1001C72B0;
    v8[1] = *(_OWORD *)&off_1001C72C0;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F328 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000259B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000259D0()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_10002590C((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_100025A28()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F330;
  uint64_t v7 = qword_10020F330;
  if (!qword_10020F330)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100025ADC;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100025ADC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100025AC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100025ADC(uint64_t a1)
{
  Class result = objc_getClass("KCJoiningAcceptAccountCircleDelegate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F330 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012E8B0();
    return (Class)sub_100025B30(v3);
  }

  return result;
}

id sub_100025B30()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F338;
  uint64_t v7 = qword_10020F338;
  if (!qword_10020F338)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100025BE4;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100025BE4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100025BCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100025BE4(uint64_t a1)
{
  Class result = objc_getClass("KCAESGCMDuplexSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F338 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10012E8D4();
    return (Class)sub_100025C38();
  }

  return result;
}

id sub_100025C38()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F340;
  uint64_t v7 = qword_10020F340;
  if (!qword_10020F340)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100025CEC;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100025CEC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100025CD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100025CEC(uint64_t a1)
{
  Class result = objc_getClass("KCJoiningAcceptSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F340 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10012E8F8();
    return (Class)sub_100025D40(v3);
  }

  return result;
}

id sub_100025D40()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F348;
  uint64_t v7 = qword_10020F348;
  if (!qword_10020F348)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100025DF4;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100025DF4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100025DDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

_AKExpiringCacheValue *sub_100025DF4(uint64_t a1)
{
  Class result = (_AKExpiringCacheValue *)objc_getClass("KCJoiningRequestSecretSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F348 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (_AKExpiringCacheValue *)sub_10012E91C();
    return -[_AKExpiringCacheValue initWithObject:expiryDate:](v3, v4, v5, v6);
  }

  return result;
}

id sub_1000260D8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if ([v2 isExpired])
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 cacheObject]);
  }

  return v3;
}

id sub_1000261C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_100026350(void *a1)
{
  return [*(id *)(a1[4] + 8) setObject:a1[5] forKey:a1[6]];
}

id sub_100026364(uint64_t a1)
{
  return [*(id *)(a1 + 32) flushCacheForced:0];
}

id sub_10002653C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) allKeys];
}

id sub_100026548(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
}

void sub_100026604(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKNativeAnisetteServiceTrafficManager);
  uint64_t v2 = (void *)qword_10020F350;
  qword_10020F350 = (uint64_t)v1;

  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.akd.anisette", v6);
  id v5 = *(void **)(qword_10020F350 + 24);
  *(void *)(qword_10020F350 + 24) = v4;
}

void sub_100026B20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

uint64_t sub_100026B78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100026B88(uint64_t a1)
{
}

void sub_100026B90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012E940();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSMutableURLRequest ak_anisetteHeadersWithData:]( &OBJC_CLASS___NSMutableURLRequest,  "ak_anisetteHeadersWithData:",  v5));
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100026C4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012E9A4();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v5;
  id v12 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100026CFC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  unsigned int v3 = [v2 isVirtualMachine];

  if (v3) {
    dispatch_queue_t v4 = @"2";
  }
  else {
    dispatch_queue_t v4 = @"1";
  }
  [*(id *)(a1 + 32) setValue:v4 forKey:@"x-apple-i-device-type"];
  id v5 = [[AKAttestationData alloc] initWithDictionary:*(void *)(a1 + 32)];
  id v6 = *(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (!v6) {
    id v6 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  }
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v8 = _AKSignpostLogSystem(Nanoseconds);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  os_signpost_id_t v11 = *(void *)(a1 + 80);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v1_Block_object_dispose((const void *)(v41 - 208), 8) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_END,  v11,  "SignAndAttestation",  "",  (uint8_t *)&v18,  2u);
  }

  uint64_t v13 = _AKSignpostLogSystem(v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 80);
    int v18 = 134218240;
    uint64_t v19 = v15;
    __int16 v20 = 2048;
    double v21 = (double)Nanoseconds / 1000000000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:SignAndAttestation ",  (uint8_t *)&v18,  0x16u);
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v16)
    {
      id v17 = *(void (**)(void))(v16 + 16);
LABEL_16:
      v17();
    }
  }

  else if (v16)
  {
    id v17 = *(void (**)(void))(v16 + 16);
    goto LABEL_16;
  }
}

void sub_100027130(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 activeSigningRequest]);

  if (v3)
  {
    uint64_t v4 = _AKTrafficLogSubsystem();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10012EB48(a1, v5, v6);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pendingSigningRequests]);
    [v8 addObject:*(void *)(a1 + 32)];
  }

  else
  {
    _objc_msgSend(*(id *)(a1 + 40), "_tq_activateAndExecuteRequest:", *(void *)(a1 + 32));
  }

void sub_100027278(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
  [v2 setActiveSigningRequest:0];

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pendingSigningRequests]);

  if ([v4 count])
  {
    uint64_t v5 = _AKTrafficLogSubsystem();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10012EBB4(v4);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
    [v4 removeObjectAtIndex:0];
    dispatch_qos_class_t v8 = [v7 requestQosClass];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1000273B4;
    v15[3] = &unk_1001C6538;
    v15[4] = *(void *)(a1 + 32);
    id v16 = v7;
    id v9 = v7;
    uint64_t v10 = (void (**)(dispatch_block_t, uint64_t, uint64_t, uint64_t, uint64_t))dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS,  v8,  0,  v15);
    v10[2](v10, v11, v12, v13, v14);
  }
}

id sub_1000273B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_activateAndExecuteRequest:", *(void *)(a1 + 40));
}

id sub_1000274DC(uint64_t a1)
{
  uint64_t v2 = _AKTrafficLogSubsystem();
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10012ED08();
  }

  return [*(id *)(a1 + 40) _processPendingRequests];
}

void sub_100027618(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000276C8;
  v8[3] = &unk_1001C73E8;
  uint64_t v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v5;
  id v7 = v5;
  objc_msgSend(v6, "_tq_invokeAnisetteTrafficRequest:withCompletion:", a2, v8);
}

uint64_t sub_1000276C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100027984(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
    id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 trafficQueue]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100027A84;
    v12[3] = &unk_1001C7438;
    dispatch_qos_class_t v8 = *(void **)(a1 + 40);
    v12[4] = *(void *)(a1 + 32);
    id v13 = v8;
    dispatch_async(v7, v12);
  }

  else
  {
    uint64_t v9 = _AKTrafficLogSubsystem();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10012EE8C();
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v5);
    }
  }
}

void sub_100027A84(uint64_t a1)
{
  uint64_t v2 = _AKTrafficLogSubsystem();
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10012EF54();
  }

  uint64_t v4 = *(void **)(a1 + 32);
  id v10 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_tq_anisetteDataWithRoutingInfoForLastKnownDSIDWithError:", &v10));
  id v6 = v10;
  if (v6)
  {
    uint64_t v7 = _AKTrafficLogSubsystem();
    dispatch_qos_class_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10012EEF0();
    }
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_100027C28(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100027CC4;
  v8[3] = &unk_1001C7488;
  id v9 = *(id *)(a1 + 48);
  id v10 = v4;
  id v7 = v4;
  objc_msgSend(v5, "_tq_legacyAnisetteDataForDSID:withCompletion:", v6, v8);
}

uint64_t sub_100027CC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100028314(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000283A8;
  v7[3] = &unk_1001C74B0;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v6 = v4;
  objc_msgSend(v5, "_tq_provisionAnisetteWithCompletion:", v7);
}

uint64_t sub_1000283A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100028488(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10012F278(v5, v9);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[AKURLSession sharedAnisetteFreeURLSession]( &OBJC_CLASS___AKURLSession,  "sharedAnisetteFreeURLSession"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1000285F0;
    v15[3] = &unk_1001C7500;
    uint64_t v11 = *(void **)(a1 + 40);
    v15[4] = *(void *)(a1 + 32);
    id v16 = v11;
    id v17 = *(id *)(a1 + 48);
    id v12 = [v10 beginDataTaskWithRequest:v5 completionHandler:v15];
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10012F24C();
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_anisetteErrorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_anisetteErrorWithCode:underlyingError:",  -8005LL,  v6));
      (*(void (**)(uint64_t, void, void *, void, void, void))(v13 + 16))(v13, 0LL, v14, 0LL, 0LL, 0LL);
    }
  }
}

id sub_1000285F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _processStartProvisioningData:a2 withResponse:a3 error:a4 previousTransactionId:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

LABEL_27:
        unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
        uint64_t v40 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v39 trafficQueue]);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_100028A10;
        v41[3] = &unk_1001C6E88;
        v41[4] = self;
        uint64_t v42 = v33;
        v43 = 0LL;
        v44 = v18;
        double v32 = v33;
        dispatch_async(v40, v41);

        goto LABEL_28;
      }
    }

    else
    {
      id v27 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v12, 4LL);
      id v28 = _AKLogSystem(v27);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v46 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Start provisioning response body: %@",  buf,  0xCu);
      }
    }

    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v12,  @"application/x-plist"));
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }

  uint64_t v30 = _AKLogSystem(isKindOfClass);
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    sub_10012F2F8();
  }

  if (v18)
  {
    double v32 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAnisetteErrorDomain,  -8008LL,  0LL));
    ((void (**)(void, void, id, void, void, void))v18)[2](v18, 0LL, v32, 0LL, 0LL, 0LL);
LABEL_28:
  }
}
}

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    id v9 = v16;
LABEL_28:
    int v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    __int16 v20 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v40[0] = *v18;
    *((void *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v32, v40, &type metadata for String, &type metadata for AnyHashable, 7LL);
    uint64_t v31 = v20;
    double v21 = sub_1000B86DC(&qword_10020D9A0);
    swift_dynamicCast(v35, &v31, v21, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    id v38 = v34;
    sub_1000B8EB0(v35, v39);
    double v32 = v36;
    __int16 v33 = v37;
    unsigned int v34 = v38;
    sub_1000B8EB0(v39, v40);
    sub_1000B8EB0(v40, &v36);
    Class result = AnyHashable._rawHashValue(seed:)(v3[5]);
    id v22 = -1LL << *((_BYTE *)v3 + 32);
    id v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        id v28 = *(void *)&v7[8 * v24];
      }

      while (v28 == -1);
      id v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(void *)(v11 + 32) = v34;
    Class result = (uint64_t)sub_1000B8EB0(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  id v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_1000CC5C0(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    id v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    id v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v30 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    id v9 = v16;
LABEL_28:
    int v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    __int16 v20 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v40[0] = *v18;
    *((void *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v32, v40, &type metadata for String, &type metadata for AnyHashable, 7LL);
    uint64_t v31 = v20;
    double v21 = sub_1000B86DC(&qword_10020DC38);
    swift_dynamicCast(v35, &v31, v21, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    id v38 = v34;
    sub_1000B8EB0(v35, v39);
    double v32 = v36;
    __int16 v33 = v37;
    unsigned int v34 = v38;
    sub_1000B8EB0(v39, v40);
    sub_1000B8EB0(v40, &v36);
    Class result = AnyHashable._rawHashValue(seed:)(v3[5]);
    id v22 = -1LL << *((_BYTE *)v3 + 32);
    id v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        id v28 = *(void *)&v7[8 * v24];
      }

      while (v28 == -1);
      id v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(void *)(v11 + 32) = v34;
    Class result = (uint64_t)sub_1000B8EB0(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  id v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_1000CC5C0(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    id v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    id v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v30 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    id v9 = v16;
LABEL_28:
    int v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    __int16 v20 = *v18;
    uint64_t v19 = v18[1];
    sub_1000B8E74(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_1000B8EB0(v39, v33);
    unsigned int v34 = v30;
    unsigned int v35 = v31;
    uint64_t v36 = v32;
    sub_1000B8EB0(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    double v32 = v36;
    sub_1000B8EB0(v37, v38);
    sub_1000B8EB0(v38, &v34);
    Class result = AnyHashable._rawHashValue(seed:)(v3[5]);
    double v21 = -1LL << *((_BYTE *)v3 + 32);
    id v22 = result & ~v21;
    id v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      id v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v26 = v23 == v25;
        if (v23 == v25) {
          id v23 = 0LL;
        }
        v24 |= v26;
        id v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      id v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    Class result = (uint64_t)sub_1000B8EB0(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  id v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000CC5C0(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    id v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    id v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    id v9 = v16;
LABEL_28:
    int v18 = 16 * v13;
    uint64_t v19 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    __int16 v20 = v19[1];
    double v21 = (uint64_t *)(*(void *)(a1 + 56) + v18);
    id v23 = *v21;
    id v22 = v21[1];
    *(void *)&v42[0] = *v19;
    *((void *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
    id v38 = v34;
    unsigned int v39 = v35;
    uint64_t v40 = v36;
    sub_1000B8EB0(v37, v41);
    unsigned int v34 = v38;
    unsigned int v35 = v39;
    uint64_t v36 = v40;
    sub_1000B8EB0(v41, v42);
    sub_1000B8EB0(v42, &v38);
    Class result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v24 = -1LL << *((_BYTE *)v3 + 32);
    id v25 = result & ~v24;
    id v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          id v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)&v7[8 * v26];
      }

      while (v30 == -1);
      id v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(void *)(v11 + 32) = v36;
    Class result = (uint64_t)sub_1000B8EB0(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  id v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_1000CC5C0(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    id v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    id v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    id v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    id v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + v16);
    int v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    Class result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  double v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    double v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

id sub_100028A10(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_tq_processStartProvisioningResponse:error:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100028E10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10012F4CC(v5, v9);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[AKURLSession sharedAnisetteFreeURLSession]( &OBJC_CLASS___AKURLSession,  "sharedAnisetteFreeURLSession"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100028F90;
    v17[3] = &unk_1001C7550;
    uint64_t v11 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v11;
    int v20 = *(_DWORD *)(a1 + 64);
    __int128 v16 = *(_OWORD *)(a1 + 48);
    id v12 = (id)v16;
    __int128 v19 = v16;
    id v13 = [v10 beginDataTaskWithRequest:v5 completionHandler:v17];
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10012F4A0();
    }

    [*(id *)(a1 + 32) _cleanUpCPIMBytes:*(void *)(a1 + 56) provisioningContext:*(unsigned int *)(a1 + 64)];
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_anisetteErrorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_anisetteErrorWithCode:underlyingError:",  -8005LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
    }
  }
}

id sub_100028F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _processEndProvisioningData:a2 withResponse:a3 error:a4 previousTransactionId:*(void *)(a1 + 40) cpimBytes:*(void *)(a1 + 56) provisioningContext:*(unsigned int *)(a1 + 64) completion:*(void *)(a1 + 48)];
}

LABEL_25:
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
        unsigned int v39 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v41 trafficQueue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000293DC;
        block[3] = &unk_1001C75C8;
        void block[4] = self;
        v43 = v33;
        v44 = 0LL;
        uint64_t v46 = a7;
        uint64_t v47 = a8;
        v45 = v21;
        double v32 = v33;
        dispatch_async(v39, block);

        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v40 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v15, 4LL);
      id v28 = _AKLogSystem(v40);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v52 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "End provisioning response body: %@",  buf,  0xCu);
      }
    }

    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v15,  @"application/x-plist",  v40));
    if (!v18) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

  uint64_t v30 = _AKLogSystem(isKindOfClass);
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    sub_10012F2F8();
  }

  if (v21)
  {
    double v32 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAnisetteErrorDomain,  -8008LL,  0LL));
    ((void (**)(void, void, id))v21)[2](v21, 0LL, v32);
LABEL_26:
  }

  __break(1u);
  return result;
}

    id v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    __int128 v19 = *v17;
    id v18 = v17[1];
    int v20 = 32 * v15;
    sub_1000B8E74(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    double v21 = (void *)(*(void *)(v4 + 48) + v16);
    *double v21 = v19;
    v21[1] = v18;
    sub_1000B8EB0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    Class result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    Class result = (void *)swift_release(v2);
    id v1 = v25;
    goto LABEL_28;
  }

  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    id v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    __int128 v19 = *v17;
    id v18 = v17[1];
    int v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    double v21 = *v20;
    id v22 = v20[1];
    id v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    Class result = (void *)swift_bridgeObjectRetain(v22);
  }

  id v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  id v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    id v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    id v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = v17[1];
    __int128 v19 = 8 * v15;
    int v20 = *(void *)(*(void *)(v2 + 56) + v19);
    double v21 = (void *)(*(void *)(v4 + 48) + v16);
    *double v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    Class result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    id v13 = (v24 - 1) & v24;
    __int128 v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    id v17 = 16 * v16;
    id v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    __int128 v19 = v18[1];
    int v20 = 8 * v16;
    double v21 = *(void **)(*(void *)(v3 + 56) + v20);
    id v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    Class result = v21;
  }

  id v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    id v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

id sub_1000293B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _endProvisioningWithPreviousTransactionId:*(void *)(a1 + 40) cpimData:a4 cpimBytes:a6 provisioningContext:a5 completion:*(void *)(a1 + 48)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_1000293DC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_tq_processEndProvisioningResponse:error:cpimBytes:provisioningContext:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(unsigned int *)(a1 + 72),  *(void *)(a1 + 56));
}

id sub_100029AB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _endProvisioningWithPreviousTransactionId:0 cpimData:a4 cpimBytes:a6 provisioningContext:a5 completion:*(void *)(a1 + 40)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100029C6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100029D58;
    v11[3] = &unk_1001C7618;
    id v12 = *(id *)(a1 + 32);
    [a2 enumerateKeysAndObjectsUsingBlock:v11];
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, void *))(v7 + 16))(v7, 1LL, v6);
    }
  }

  else
  {
    uint64_t v8 = _AKLogSystem(v5);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10012F79C();
    }

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v6);
    }
  }
}

id sub_100029D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
}

void sub_100029E40(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100029EDC;
  v8[3] = &unk_1001C74B0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v4;
  id v7 = v4;
  objc_msgSend(v5, "_tq_syncAnisetteWithSIMData:completion:", v6, v8);
}

uint64_t sub_100029EDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100029FB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[AKNativeAnisetteServiceTrafficManager sharedSigningService]( &OBJC_CLASS___AKNativeAnisetteServiceTrafficManager,  "sharedSigningService"));
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v8 trafficQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10002A0EC;
    block[3] = &unk_1001C7280;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v18 = v10;
    uint64_t v19 = v11;
    id v20 = v12;
    dispatch_async(v9, block);

    id v13 = v18;
LABEL_7:

    goto LABEL_8;
  }

  uint64_t v14 = _AKLogSystem(v6);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    sub_10012F800();
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_anisetteErrorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_anisetteErrorWithCode:underlyingError:",  -8005LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v13);
    goto LABEL_7;
  }

void sub_10002A0EC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AKURLSession sharedAnisetteFreeURLSession]( &OBJC_CLASS___AKURLSession,  "sharedAnisetteFreeURLSession"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002A190;
  v5[3] = &unk_1001C7668;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v4 = [v2 beginDataTaskWithRequest:v3 completionHandler:v5];
}

void sub_10002A190(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = v9;
  if (v9)
  {
    uint64_t v12 = _AKLogSystem(v9);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10012F82C();
    }
LABEL_10:

    id v20 = 0LL;
    goto LABEL_11;
  }

  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse, v10);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(v8, v14);
  char v16 = isKindOfClass;
  uint64_t v17 = _AKLogSystem(isKindOfClass);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  id v13 = v18;
  if ((v16 & 1) == 0)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_10012F2F8();
    }
    goto LABEL_10;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v8 statusCode]));
    int v21 = 138412290;
    id v22 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Sync provisioning response code: %@",  (uint8_t *)&v21,  0xCu);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v7,  @"application/x-plist"));
LABEL_11:
  [*(id *)(a1 + 32) _processSyncAnisetteResponse:v20 completion:*(void *)(a1 + 40)];
}

void sub_10002AA94(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cleaning up ADI session objects...", v4, 2u);
  }

  if (*(void *)(a1 + 32)) {
    +[AKADIProxy dispose:](&OBJC_CLASS___AKADIProxy, "dispose:");
  }
  if (*(void *)(a1 + 40)) {
    +[AKADIProxy dispose:](&OBJC_CLASS___AKADIProxy, "dispose:");
  }
}

void sub_10002AB20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if ((a2 & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    id v5 = v7;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v7);
    id v5 = v7;
  }
}

void sub_10002AC34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10002ACC8;
  v7[3] = &unk_1001C74B0;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v6 = v4;
  objc_msgSend(v5, "_tq_eraseAnisetteWithCompletion:", v7);
}

uint64_t sub_10002ACC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002AF98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x3032000000LL;
    int v21 = sub_100026B78;
    id v22 = sub_100026B88;
    id v23 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](&OBJC_CLASS___NSMutableURLRequest, "requestWithURL:", v5));
    [(id)v19[5] setHTTPMethod:@"POST"];
    v24[0] = AKRequestHeadersKey;
    v24[1] = AKRequestBodyKey;
    v25[0] = &__NSDictionary0__struct;
    v25[1] = &__NSDictionary0__struct;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  2LL));
    objc_msgSend((id)v19[5], "ak_setBodyWithParameters:", v8);
    if (*(void *)(a1 + 32)) {
      objc_msgSend((id)v19[5], "ak_addPreviousTransactionIdHeader:");
    }
    uint64_t v9 = AKURLBagKeyStartProvisioning;
    [*(id *)(a1 + 40) _signRequestWithProvisioningHeaders:v19[5] forUrlKey:AKURLBagKeyStartProvisioning];
    uint64_t v10 = v19[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10002B1E4;
    v15[3] = &unk_1001C76D8;
    uint64_t v11 = *(void **)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    uint64_t v17 = &v18;
    [v11 _signWithBAAHeadersIfNeededForKey:v9 withRequest:v10 completion:v15];

    _Block_object_dispose(&v18, 8);
  }

  else
  {
    uint64_t v12 = _AKLogSystem(v6);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10012FC60();
    }

    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v7);
    }
  }
}

void sub_10002B1C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10002B1E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
  }
  return result;
}

void sub_10002B304(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](&OBJC_CLASS___NSMutableURLRequest, "requestWithURL:", a2));
    [v7 setHTTPMethod:@"POST"];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) base64EncodedStringWithOptions:0]);
    v24[0] = &__NSDictionary0__struct;
    v23[0] = AKRequestHeadersKey;
    v23[1] = AKRequestBodyKey;
    int v21 = @"cpim";
    id v22 = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    v24[1] = v9;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v24,  v23,  2LL));

    objc_msgSend(v7, "ak_setBodyWithParameters:", v10);
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v7, "ak_addPreviousTransactionIdHeader:");
    }
    uint64_t v11 = AKURLBagKeyEndProvisioning;
    [*(id *)(a1 + 48) _signRequestWithProvisioningHeaders:v7 forUrlKey:AKURLBagKeyEndProvisioning];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10002B51C;
    v18[3] = &unk_1001C6B38;
    uint64_t v12 = *(void **)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v19 = v7;
    id v20 = v13;
    id v14 = v7;
    [v12 _signWithBAAHeadersIfNeededForKey:v11 withRequest:v14 completion:v18];
  }

  else
  {
    uint64_t v15 = _AKLogSystem(v5);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10012FC8C();
    }

    uint64_t v17 = *(void *)(a1 + 56);
    if (v17) {
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v6);
    }
  }
}

uint64_t sub_10002B51C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_10002B644(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](&OBJC_CLASS___NSMutableURLRequest, "requestWithURL:", a2));
    [v7 setHTTPMethod:@"POST"];
    [*(id *)(a1 + 32) _signRequestWithProvisioningHeaders:v7 forUrlKey:AKURLBagKeySyncAnisette];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) base64EncodedStringWithOptions:0]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) base64EncodedStringWithOptions:0]);
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v11 = v10;
    if (v9) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v9, @"srm");
    }
    if (v8) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v8,  @"X-Apple-I-MD-M");
    }
    if (*(void *)(a1 + 64))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v12,  @"X-Apple-I-MD-RINFO");
    }

    v18[0] = AKRequestHeadersKey;
    v18[1] = AKRequestBodyKey;
    v19[0] = &__NSDictionary0__struct;
    v19[1] = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  2LL));
    objc_msgSend(v7, "ak_setBodyWithParameters:", v13);
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14) {
      (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v7, 0LL);
    }
  }

  else
  {
    uint64_t v15 = _AKLogSystem(v5);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10012FCB8();
    }

    uint64_t v17 = *(void *)(a1 + 56);
    if (v17) {
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v6);
    }
  }
}

void sub_10002B970( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

NSDictionary *__cdecl sub_10002CC6C(id a1, AKTrustedContact *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  3LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AKTrustedContact uuid](v2, "uuid"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 UUIDString]);
  [v3 setObject:v5 forKeyedSubscript:@"uuid"];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[AKTrustedContact hashedWrappingKeyRKC](v2, "hashedWrappingKeyRKC"));
  [v3 setObject:v6 forKeyedSubscript:@"hashWrappingKeyRKC"];

  id v7 = -[AKTrustedContact status](v2, "status");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v7));
  [v3 setObject:v8 forKeyedSubscript:@"status"];

  return (NSDictionary *)v3;
}

void sub_10002CF8C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002E9F0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKPostInstallService);
  uint64_t v2 = (void *)qword_10020F360;
  qword_10020F360 = (uint64_t)v1;
}

void sub_10002EB0C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  uint64_t v5 = _AKLogSystem(state);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v7)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", state));
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity registration complete. State: %@.",  buf,  0xCu);
    }

    goto LABEL_8;
  }

  if (v7)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity says os got upgraded, running Post Install Job",  buf,  2u);
  }

  if (xpc_activity_set_state(v3, 4LL))
  {
    id v8 = (void *)os_transaction_create("com.apple.authkit.post-install");
    uint64_t v9 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10002EC9C;
    v11[3] = &unk_1001C6538;
    uint64_t v12 = v3;
    id v13 = v8;
    id v6 = v8;
    [v9 _performPostInstallWithCompletion:v11];

LABEL_8:
  }
}

void sub_10002EC9C(uint64_t a1)
{
  BOOL v1 = xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
  uint64_t v2 = _AKLogSystem(v1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XPC activity for post install complete", v4, 2u);
  }
}

void sub_10002F094(uint64_t a1, int a2)
{
  uint64_t v4 = _AKLogSystem(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Satori Warmup for Post Install complete with result: %i",  (uint8_t *)v6,  8u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10002F148(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "AKAppleIDCheckInHelperService finished performHeartbeatCheckIn after OS upgrade...",  buf,  2u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10002F20C;
  v6[3] = &unk_1001C7300;
  id v7 = *(id *)(a1 + 48);
  [v4 fetchUserInfoForAltDSID:v5 completion:v6];
}

void sub_10002F20C(uint64_t a1)
{
}

uint64_t sub_10002F214(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10002F228(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002F330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "AKUserInfoController finished fetchUserInfo after OS upgrade...",  v11,  2u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_1001302BC((uint64_t)v6, v9);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_10002F510(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v6) {
    [*(id *)(a1 + 32) _updateContext:v6 serviceName:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10002F79C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002F7BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002F7CC(uint64_t a1)
{
}

void sub_10002F7D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100130330(a1, v3, v6);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Walrus web context %@ updated successfully.",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = 0LL;
}

void sub_10002FB8C(uint64_t a1, void *a2, void *a3)
{
  id v31 = a2;
  id v5 = a3;
  if (v31
    && (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]),
        v6,
        v6))
  {
    uint64_t v7 = -[NSURLComponents initWithURL:resolvingAgainstBaseURL:]( objc_alloc(&OBJC_CLASS___NSURLComponents),  "initWithURL:resolvingAgainstBaseURL:",  v31,  0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
    unsigned int v10 = [v9 includeUntrustedDevices];

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"allDevices",  AKTrueValue));
      [v8 addObject:v11];
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
    unsigned int v13 = [v12 includeFamilyDevices];

    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"includeFamily",  AKTrueValue));
      [v8 addObject:v14];
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 services]);
    id v17 = [v16 count];

    if (v17)
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 services]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 componentsJoinedByString:@","]);

      int v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"services",  v20));
      [v8 addObject:v21];
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 operatingSystems]);
    id v24 = [v23 count];

    if (v24)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceRequestContext]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 operatingSystems]);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 componentsJoinedByString:@","]);

      id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"oses",  v27));
      [v8 addObject:v28];
    }

    if ([v8 count]) {
      -[NSURLComponents setQueryItems:](v7, "setQueryItems:", v8);
    }
    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v7, "URL"));
    (*(void (**)(uint64_t, void *, void))(v29 + 16))(v29, v30, 0LL);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10002FEEC(id a1)
{
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v5 = (id)objc_claimAutoreleasedReturnValue([v1 bundleIdentifier]);

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AAFAnalyticsTransportRTC analyticsTransportRTCWithClientType:clientBundleId:clientName:]( &OBJC_CLASS___AAFAnalyticsTransportRTC,  "analyticsTransportRTCWithClientType:clientBundleId:clientName:",  &off_1001D8D40,  v5,  @"com.apple.aaa.dnu"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[AAFAnalyticsReporter analyticsReporterWithTransport:]( &OBJC_CLASS___AAFAnalyticsReporter,  "analyticsReporterWithTransport:",  v2));
  uint64_t v4 = (void *)qword_10020F370;
  qword_10020F370 = v3;
}

void sub_100030174(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013057C(a1);
  }

  objc_msgSend(*(id *)(a1 + 32), "_unsafe_resumeEngineTimeoutSource");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engine]);
  [v4 prepareWithController:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_10003024C(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100130600(a1);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engine]);
  [v4 activate];
}

id sub_100030314(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_InvalidateEngine");
}

void sub_1000303B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000303CC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engine]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isActivated];
}

void sub_100030688(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem(WeakRetained);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013084C();
  }
}

void sub_1000306DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem(WeakRetained);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_1001308AC();
  }
}

void sub_100030730(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem(WeakRetained);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013090C();
  }

  objc_msgSend(WeakRetained, "_unsafe_InvalidateEngine");
}

id sub_100030AB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_cancelEngineTimeoutSource");
}

void sub_100030B4C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100030D04(id a1)
{
  BOOL v1 = objc_alloc_init(&OBJC_CLASS___AKAuthorizationSessionManager);
  uint64_t v2 = (void *)qword_10020F380;
  qword_10020F380 = (uint64_t)v1;
}

void sub_100031010( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100031030(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100031040(uint64_t a1)
{
}

void sub_100031048(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v10 = _AKLogSiwa(v8, v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_100130C30();
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 sessionID]);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionID]);
  unsigned int v14 = [v12 isEqualToString:v13];

  if (v14)
  {
    uint64_t v17 = _AKLogSiwa(v15, v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v8 sessionID]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v8 client]);
      int v24 = 138412546;
      id v25 = v19;
      __int16 v26 = 2112;
      id v27 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Found an exising context with session ID(%@), %@",  (uint8_t *)&v24,  0x16u);
    }

    uint64_t v21 = objc_claimAutoreleasedReturnValue([v8 client]);
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;

    *a4 = 1;
  }
}

void sub_10003136C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);

  if (v2)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _clientBundleIDForContext:*(void *)(a1 + 48) client:*(void *)(a1 + 32)]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _activeSessionForContext:*(void *)(a1 + 48) client:*(void *)(a1 + 32)]);
    uint64_t v8 = _AKLogSiwa(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_100130DEC();
    }

    if (v6)
    {
      uint64_t v12 = _AKLogSiwa(v10, v11);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100130D8C();
      }

      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7071LL));
      uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8LL);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 UUIDString]);

      objc_msgSend(*(id *)(a1 + 48), "set_sessionID:", v21);
      uint64_t v22 = objc_alloc_init(&OBJC_CLASS___AKAuthorizationSession);
      uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8LL);
      int v24 = *(void **)(v23 + 40);
      *(void *)(v23 + 40) = v22;

      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setSessionID:v21];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setCompletionHandler:*(void *)(a1 + 56)];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setContext:*(void *)(a1 + 48)];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setClientBundleID:v5];
      id v25 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setClient:*(void *)(a1 + 32)];
      uint64_t v27 = _AKLogSiwa(v25, v26);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        int v42 = 138412290;
        uint64_t v43 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "AuthorizationSessionManager - Processing clearance request: %@",  (uint8_t *)&v42,  0xCu);
      }

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setRequestTime:v30];

      uint64_t v33 = _AKLogSiwa(v31, v32);
      unsigned int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
        sub_100130D2C();
      }

      [*(id *)(*(void *)(a1 + 40) + 8) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:v5];
      id v35 = [*(id *)(a1 + 48) _clientShouldAuthenticateExternally];
      if ((_DWORD)v35)
      {
        uint64_t v37 = _AKLogSiwa(v35, v36);
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
          sub_100130D00();
        }

        uint64_t v39 = os_transaction_create("com.apple.authkit.authorization-session");
        uint64_t v40 = *(void *)(a1 + 40);
        uint64_t v41 = *(void **)(v40 + 32);
        *(void *)(v40 + 32) = v39;
      }
    }
  }

  else
  {
    uint64_t v17 = _AKLogSiwa(v3, v4);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
      sub_100130C90();
    }

    uint64_t v19 = *(void *)(a1 + 56);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7074LL));
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v5);
  }
}

void sub_1000316EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v2)
  {
    uint64_t v3 = (void (**)(id, void))objc_claimAutoreleasedReturnValue([v2 completionHandler]);
    v3[2](v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }

void sub_10003181C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _AKLogSiwa(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100130EF0();
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _clientBundleIDForContext:*(void *)(a1 + 32) client:*(void *)(a1 + 48)]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) objectForKeyedSubscript:v5]);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 16LL);
  if (v6)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100031A3C;
    block[3] = &unk_1001C7438;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 56);
    dispatch_async(v7, block);
    id v8 = [*(id *)(a1 + 32) _clientShouldAuthenticateExternally];
    if ((_DWORD)v8)
    {
      uint64_t v10 = _AKLogSiwa(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        sub_100130EC4();
      }

      uint64_t v12 = *(void *)(a1 + 40);
      unsigned int v13 = *(void **)(v12 + 32);
      *(void *)(v12 + 32) = 0LL;
    }

    uint64_t v14 = &v18;
    uint64_t v15 = _AKLogSiwa(v8, v9);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_100130E64();
    }

    [*(id *)(*(void *)(a1 + 40) + 8) removeObjectForKey:v5];
  }

  else
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000319EC;
    v20[3] = &unk_1001C78D0;
    uint64_t v14 = &v21;
    id v21 = *(id *)(a1 + 56);
    dispatch_sync(v7, v20);
  }
}

void sub_1000319EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7099LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100031A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _AKLogSiwa(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100130F54();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100031DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7074LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100031E44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7099LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100031E98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7099LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100031EEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7098LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100031F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userResponse]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100032310(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_100032330(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F390;
  uint64_t v7 = qword_10020F390;
  if (!qword_10020F390)
  {
    v8[0] = *(_OWORD *)off_1001C7AC0;
    v8[1] = *(_OWORD *)&off_1001C7AD0;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F390 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000323DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000323F4()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_100032330((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_10003244C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F398;
  uint64_t v7 = qword_10020F398;
  if (!qword_10020F398)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100032500;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100032500((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000324E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100032500(uint64_t a1)
{
  Class result = objc_getClass("IDSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F398 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1001311F0();
    return (Class)sub_100032554();
  }

  return result;
}

id sub_100032554()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F3A0;
  uint64_t v7 = qword_10020F3A0;
  if (!qword_10020F3A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100032608;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100032608((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000325F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100032608(uint64_t a1)
{
  Class result = objc_getClass("IDSMessageContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F3A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_100131214();
    return (Class)sub_10003265C(v3);
  }

  return result;
}

id sub_10003265C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F3A8;
  uint64_t v7 = qword_10020F3A8;
  if (!qword_10020F3A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100032710;
    v3[3] = &unk_1001C6750;
    v3[4] = &v4;
    sub_100032710((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000326F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100032710(uint64_t a1)
{
  Class result = objc_getClass("IDSDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F3A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_100131238();
    return (Class)sub_100032764(v3);
  }

  return result;
}

void *sub_100032764()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F3B0;
  uint64_t v6 = qword_10020F3B0;
  if (!qword_10020F3B0)
  {
    id v1 = (void *)sub_1000323F4();
    uint64_t v0 = dlsym(v1, "IDSDefaultPairedDevice");
    v4[3] = (uint64_t)v0;
    qword_10020F3B0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000327D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000327F0()
{
  uint64_t v0 = (id *)sub_100032764();
  if (v0) {
    return *v0;
  }
  sub_10012D194();
  return sub_100032810();
}

void *sub_100032810()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F3B8;
  uint64_t v6 = qword_10020F3B8;
  if (!qword_10020F3B8)
  {
    id v1 = (void *)sub_1000323F4();
    uint64_t v0 = dlsym(v1, "IDSSendMessageOptionBypassDuetKey");
    v4[3] = (uint64_t)v0;
    qword_10020F3B8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100032884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10003289C()
{
  uint64_t v0 = (id *)sub_100032810();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_1000328BC(v2);
}

void *sub_1000328BC()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F3C0;
  uint64_t v6 = qword_10020F3C0;
  if (!qword_10020F3C0)
  {
    id v1 = (void *)sub_1000323F4();
    uint64_t v0 = dlsym(v1, "IDSSendMessageOptionEnforceRemoteTimeoutsKey");
    v4[3] = (uint64_t)v0;
    qword_10020F3C0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100032930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100032948()
{
  uint64_t v0 = (id *)sub_1000328BC();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100032968(v2);
}

void *sub_100032968()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F3C8;
  uint64_t v6 = qword_10020F3C8;
  if (!qword_10020F3C8)
  {
    id v1 = (void *)sub_1000323F4();
    uint64_t v0 = dlsym(v1, "IDSSendMessageOptionTimeoutKey");
    v4[3] = (uint64_t)v0;
    qword_10020F3C8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000329DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000329F4()
{
  uint64_t v0 = (id *)sub_100032968();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = (void *)sub_10012D194();
  return (id)+[_AKMessage typeForMessageWithTransportRepresentation:](v2, v3, v4);
}

void sub_100033344(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = v7;
  if (v6)
  {
    uint64_t v10 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  objc_opt_class(&OBJC_CLASS___AKAnisetteData, v8));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v11,  v6,  0LL));

    uint64_t v14 = _AKTrafficLogSubsystem(v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      sub_1001312F4();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v16 = _AKTrafficLogSubsystem(v7);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100131294();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100033568(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = _AKLogSystem(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    int v26 = a2;
    __int16 v27 = 2112;
    id v28 = v7;
    __int16 v29 = 2112;
    id v30 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Peer attestation fetch didSucceed:%d data:%@ error:%@",  buf,  0x1Cu);
  }

  if (v7)
  {
    uint64_t v13 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  objc_opt_class(&OBJC_CLASS___AKAttestationData, v12));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v24 = 0LL;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v14,  v7,  &v24));
    id v16 = v24;

    if (v16)
    {
      uint64_t v18 = _AKLogSystem(v17);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100131474();
      }
    }

    uint64_t v20 = _AKLogSystem(v17);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      sub_100131414();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v22 = _AKTrafficLogSubsystem(v11);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_1001313B4();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

uint64_t sub_100033834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000338F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000339BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100033A90(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  if (v8)
  {
    uint64_t v5 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  objc_opt_class(&OBJC_CLASS___AKAnisetteData, v4));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v6,  v8,  0LL));

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100033D24(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Command message ready for sending to to paired device: %@",  buf,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _activePairedTinkerDevice]);
  if (!v5)
  {
    uint64_t v6 = _AKLogSystem(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting paired device.", buf, 2u);
    }

    id v8 = sub_1000327F0();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v8);
  }

  uint64_t v9 = *(void **)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportRepresentation]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v5));
  uint64_t v12 = *(void *)(a1 + 48);
  id v32 = 0LL;
  id v33 = 0LL;
  unsigned __int8 v13 = [v9 sendMessage:v10 toDestinations:v11 priority:300 options:v12 identifier:&v33 error:&v32];
  id v14 = v33;
  id v15 = v32;

  uint64_t v17 = _AKLogSystem(v16);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  id v19 = v18;
  if ((v13 & 1) != 0)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v37 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Message is on its way to paired device with transport ID: %@",  buf,  0xCu);
    }

    uint64_t v20 = *(void **)(*(void *)(a1 + 40) + 24LL);
    id v21 = objc_retainBlock(*(id *)(a1 + 56));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    [v20 setObject:v21 forKey:v22];

    uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 32LL);
    id v24 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    [v23 setObject:v24 forKey:v14];
  }

  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_100131738();
    }

    if (v15)
    {
      NSErrorUserInfoKey v34 = NSUnderlyingErrorKey;
      id v35 = v15;
      id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    }

    else
    {
      id v25 = 0LL;
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
    __int16 v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_100034050;
    v29[3] = &unk_1001C7258;
    id v28 = *(id *)(a1 + 56);
    id v30 = v25;
    id v31 = v28;
    id v24 = v25;
    dispatch_async(v27, v29);
  }
}

void sub_100034050(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAnisetteErrorDomain,  -8014LL,  *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_1000342CC(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Will send reply message to paired device: %@",  buf,  0xCu);
  }

  uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportRepresentation]);
  id v7 = sub_1000327F0();
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v8));
  uint64_t v10 = *(void *)(a1 + 48);
  id v18 = 0LL;
  id v19 = 0LL;
  id v11 = [v5 sendMessage:v6 toDestinations:v9 priority:300 options:v10 identifier:&v19 error:&v18];
  id v12 = v19;
  id v13 = v18;

  if ((v11 & 1) == 0)
  {
    uint64_t v15 = _AKLogSystem(v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1001317F8();
    }
  }

  uint64_t v17 = *(void *)(a1 + 56);
  if (v17) {
    (*(void (**)(uint64_t, id, id))(v17 + 16))(v17, v11, v13);
  }
}

uint64_t sub_1000346B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_1000348E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = nullsub_2;
  v9[3] = &unk_1001C78A8;
  id v10 = *(id *)(a1 + 48);
  [v7 _replyToCommandMessageWithInternalID:v8 didSucceed:a2 returnData:a3 error:a4 completion:v9];
}

void sub_100034EC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  a2,  1LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t sub_100034F44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100034F58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100034F6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100034F80(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  a2,  1LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_100035004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [[AKAttestationData alloc] initWithDictionary:v6];

  id v13 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v7,  1LL,  &v13));
  id v9 = v13;
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100131A4C();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100035378(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100131BAC(a1, v3, v4, v5, v6, v7, v8, v9);
  }

  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = [*(id *)(a1 + 40) didSucceed];
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) returnData]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, id, void *, void *))(v10 + 16))(v10, v11, v12, v13);
}

uint64_t sub_1000356D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_100035730( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t start()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  uint64_t v1 = _AKLogSystem(v0);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "akd is starting up...", buf, 2u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AKDaemonConnectionManager sharedInstance](&OBJC_CLASS___AKDaemonConnectionManager, "sharedInstance"));
  [v3 start];

  objc_autoreleasePoolPop(v0);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  [v4 run];

  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "akd is shutting down...", v9, 2u);
  }

  return 0LL;
}

void sub_100035FA8(uint64_t a1, uint64_t a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  [*(id *)(a1 + 32) addObject:v3];
}

void sub_1000366E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100131EA4();
    }

    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7034LL));
    [v10 _callCompletionWithResults:0 password:0 additionalData:0 error:v9];
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    sub_100131F14();
  }
}

void sub_1000369F4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100037DB8(id a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[AKFollowUpProviderFactory sharedAuthKitFollowupProvider]( &OBJC_CLASS___AKFollowUpProviderFactory,  "sharedAuthKitFollowupProvider"));
  id v1 = objc_alloc_init(&OBJC_CLASS___AKFollowUpFactoryImpl);
  [v1 setExtensionIdentifier:AKFollowUpServerUIExtensionIdentifier];
  uint64_t v2 = -[AKFollowUpManager initWithFollowUpFactory:provider:]( objc_alloc(&OBJC_CLASS___AKFollowUpManager),  "initWithFollowUpFactory:provider:",  v1,  v5);
  id v3 = (void *)qword_10020F3D0;
  qword_10020F3D0 = (uint64_t)v2;

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___AKFollowUpControllerServiceProviderImpl);
  [(id)qword_10020F3D0 setServiceProvider:v4];
}

void sub_1000380E8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKCarrierBundleUtilities);
  uint64_t v2 = (void *)qword_10020F3E0;
  qword_10020F3E0 = (uint64_t)v1;
}

void sub_100038434(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setResponseCode:", objc_msgSend(v10, "statusCode"));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8LL) + 16LL))();
}

void sub_1000386B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _urlSession]);
    objc_initWeak(&location, *(id *)(a1 + 32));
    id v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10003883C;
    v12[3] = &unk_1001C7D48;
    objc_copyWeak(&v15, &location);
    char v16 = *(_BYTE *)(a1 + 48);
    v12[4] = *(void *)(a1 + 32);
    id v13 = v5;
    id v14 = *(id *)(a1 + 40);
    [v9 _executeURLRequest:v13 withSession:v8 completion:v12];

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }

  else
  {
    uint64_t v10 = _AKLogSystem(v6);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100132330(a1, (uint64_t)v7, v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100038820( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_10003883C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!*(_BYTE *)(a1 + 64) || (id v14 = objc_msgSend(v12, "ak_isAuthenticationErrorWithCode:", -7026), !(_DWORD)v14))
  {
    uint64_t v19 = *(void *)(a1 + 48);
    if (!v19) {
      goto LABEL_10;
    }
    uint64_t v20 = *(void (**)(void))(v19 + 16);
LABEL_9:
    v20();
    goto LABEL_10;
  }

  uint64_t v15 = _AKLogSystem(v14);
  char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_100132434();
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained authenticationHandler]);
  if (v17)
  {
    [WeakRetained _reauthenticateAndExecuteWithCompletion:*(void *)(a1 + 48)];
    goto LABEL_10;
  }

  uint64_t v21 = _AKLogSystem(v18);
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
    sub_1001323D0((uint64_t)WeakRetained, v22, v23, v24, v25, v26, v27, v28);
  }

  uint64_t v29 = *(void *)(a1 + 48);
  if (v29)
  {
    uint64_t v20 = *(void (**)(void))(v29 + 16);
    goto LABEL_9;
  }

LABEL_10:
}

        [v9 _deactivate];
        goto LABEL_11;
      }
    }

    else
    {
    }

    char v16 = _AKLogSiwa(v12, v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100138ACC(v7);
    }
    goto LABEL_10;
  }

  [WeakRetained _handleStartAuthorizationWithResponse:v6];
LABEL_11:
}

  uint64_t v24 = _AKLogSiwa(v12, v13);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v35 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Requesting clearance to authorize with context %@...",  buf,  0xCu);
  }

  authSessionManager = self->_authSessionManager;
  uint64_t v27 = self->_client;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_100089DF0;
  v30[3] = &unk_1001C9F28;
  id v32 = self;
  id v33 = v7;
  id v31 = v6;
  uint64_t v28 = v6;
  uint64_t v29 = v7;
  -[AKAuthorizationSessionManager beginSessionWithContext:client:completion:]( authSessionManager,  "beginSessionWithContext:client:completion:",  v28,  v27,  v30);
}

void sub_100038ADC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse, v10);
  id v12 = v8;
  if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0) {
    id v13 = v12;
  }
  else {
    id v13 = 0LL;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) urlRequestProvider]);
  id v22 = 0LL;
  unsigned int v15 = [v14 validateResponseData:v7 error:&v22];
  id v16 = v22;

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) urlRequestProvider]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 responseDictionaryWithData:v7 error:0]);

  if (v9)
  {
    if (v15)
    {
      id v19 = v9;
LABEL_11:
      uint64_t v20 = v19;
      goto LABEL_12;
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v16 userInfo]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ak_errorByAppendingUserInfo:", v21));
  }

  else
  {
    if ((v15 & 1) == 0)
    {
      id v19 = v16;
      goto LABEL_11;
    }

    uint64_t v20 = 0LL;
  }

void sub_100038CD4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1001325D0(a1, v8);
    }

    [*(id *)(a1 + 32) _executeAllowingReauthentication:0 completion:*(void *)(a1 + 40)];
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100132644();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_100038F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
}

void sub_100039034(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_1000390A8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKWebSessionPCSKeyProvider);
  uint64_t v2 = (void *)qword_10020F3F0;
  qword_10020F3F0 = (uint64_t)v1;
}

void sub_10003933C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PCS auth context saved successfully in keychain.",  v9,  2u);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_1001326BC(v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100039568(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PCS auth context updated successfully in keychain.",  v9,  2u);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_100132734(v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003975C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 value]);

  uint64_t v9 = _AKLogSystem(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Keychain item found for given auth context. Checking if it's still valid...",  buf,  2u);
    }

    uint64_t v13 = objc_opt_class(&OBJC_CLASS___AKPCSAuthContext, v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 value]);
    id v26 = 0LL;
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v13,  v14,  &v26));
    id v16 = v26;

    if (v16)
    {
      uint64_t v18 = _AKLogSystem(v17);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100132864(v6);
      }

      uint64_t v20 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      id v21 = [v15 isValid];
      if (!(_DWORD)v21)
      {
        uint64_t v22 = _AKLogSystem(v21);
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_100132824(v23);
        }

        [*(id *)(a1 + 32) _removeAllExpiredPCSCredentials];
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKWalrusErrorDomain,  -5002LL,  0LL));
        (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0LL, v25);

        goto LABEL_14;
      }

      uint64_t v20 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v20();
LABEL_14:

    goto LABEL_15;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_1001327AC(v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_15:
}

void sub_1000399D4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AKKeychainItemDescriptor pcsAuthDescriptor](&OBJC_CLASS___AKKeychainItemDescriptor, "pcsAuthDescriptor"));
  [v1 _removeCredentialWithDescriptor:v2];
}

id sub_100039B90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = *(void **)(v2 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100039BE8;
  v5[3] = &unk_1001C7E08;
  v5[4] = v2;
  return [v3 fetchKeychainItemsWithDescriptor:v1 completion:v5];
}

void sub_100039BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100132958(v6);
    }
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100039C98;
    v9[3] = &unk_1001C7DE0;
    void v9[4] = *(void *)(a1 + 32);
    [a2 enumerateObjectsUsingBlock:v9];
  }
}

void sub_100039C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);

  if (v4)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___AKPCSAuthContext, v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    id v12 = 0LL;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v6,  v7,  &v12));
    id v9 = v12;

    if (!v9 && ([v8 isValid] & 1) == 0)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AKKeychainItemDescriptor pcsAuthDescriptor]( &OBJC_CLASS___AKKeychainItemDescriptor,  "pcsAuthDescriptor"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 webSessionIdentifier]);
      [v10 setAccount:v11];

      [*(id *)(a1 + 32) _removeCredentialWithDescriptor:v10];
    }
  }
}

void sub_100039DB0(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001329D0(v3);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "All pcs credentials deleted successfully from keychain.",  v7,  2u);
  }
}

void sub_10003A2D0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("AKAuthVerificationQueue", v4);
  id v3 = (void *)qword_10020F400;
  qword_10020F400 = (uint64_t)v2;
}

void sub_10003A438(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 allAccountNames]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10003A72C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) authKitAccountWithAltDSID:*(void *)(a1 + 40) error:0]);
  if (v2)
  {
    [*(id *)(a1 + 32) _setAuthKitAccount:v2 inUse:*(unsigned __int8 *)(a1 + 64) forService:*(void *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v3 = _AKLogSystem(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100132AA0();
    }

    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7023LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }
}

void sub_10003A920(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) authKitAccountWithDSID:*(void *)(a1 + 40)]);
  if (v2)
  {
    [*(id *)(a1 + 32) _setAuthKitAccount:v2 inUse:*(unsigned __int8 *)(a1 + 64) forService:*(void *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v3 = _AKLogSystem(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100132B2C();
    }

    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7023LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }
}

void sub_10003ADA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    uint64_t v4 = _AKLogSystem(v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100132C1C();
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAppleIDAuthenticationErrorDomain,  -7001LL,  v6));
    (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0LL, v7);

    objc_end_catch();
    JUMPOUT(0x10003AD20LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10003AE70(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing unusued IDMS account %@...", buf, 0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) store]);
  id v6 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10003AF9C;
  v7[3] = &unk_1001C7460;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  [v5 removeAccount:v8 withCompletionHandler:v7];
}

void sub_10003AF9C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully removed account %@.",  (uint8_t *)&v10,  0xCu);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_100132D38();
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003B1AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 dictionaryRepresentation]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10003B328(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 userInformationRepresentation]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }

void sub_10003B4BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 userInformationRepresentation]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

uint64_t sub_10003B690(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003B77C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if ([*(id *)(a1 + 40) _shouldShowAlertForAuthModeError:v7])
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10003B85C;
    v10[3] = &unk_1001C7F18;
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = a3;
    id v11 = v7;
    [v8 _showAlertForLoginError:v11 context:v9 completion:v10];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

uint64_t sub_10003B85C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16LL))(a1[5], a1[6], a1[7], a1[4]);
}

void sub_10003BA24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  if (!v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 141558274;
      uint64_t v36 = 1752392040LL;
      __int16 v37 = 2112;
      uint64_t v38 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Fetched device info for %{mask.hash}@",  buf,  0x16u);
    }

    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
    if (v15)
    {
      id v34 = 0LL;
      id v16 = [[AKDeviceSafetyRestrictionState alloc] initWithResponse:v15 error:&v34];
      id v17 = v34;
      uint64_t v18 = v17;
      if (v17 || !v16)
      {
        uint64_t v23 = _AKLogSystem(v17);
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          sub_100132E6C(v24, v25, v26, v27, v28, v29, v30, v31);
        }

        uint64_t v32 = *(void *)(a1 + 40);
        if (v32)
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_deviceListErrorWithCode:]( &OBJC_CLASS___NSError,  "ak_deviceListErrorWithCode:",  -14005LL));
          (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0LL, v33);
        }
      }

      else
      {
        uint64_t v19 = *(void *)(a1 + 40);
        if (v19) {
          (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v16, 0LL);
        }
      }
    }

    else
    {
      uint64_t v20 = _AKLogSystem(0LL);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100132DF0();
      }

      uint64_t v22 = *(void *)(a1 + 40);
      if (!v22) {
        goto LABEL_23;
      }
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_deviceListErrorWithCode:]( &OBJC_CLASS___NSError,  "ak_deviceListErrorWithCode:",  -14005LL));
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v18);
    }

LABEL_23:
    goto LABEL_24;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_100132ED4();
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v9);
  }
LABEL_24:
}

void sub_10003BE64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100132F60();
    }

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      id v11 = *(void (**)(void))(v10 + 16);
LABEL_8:
      v11();
    }
  }

  else
  {
    [*(id *)(a1 + 32) updateWithDeviceRestrictionState:v5];
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12)
    {
      id v11 = *(void (**)(void))(v12 + 16);
      goto LABEL_8;
    }
  }
}

void sub_10003C0C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100132F60();
    }

    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      id v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
      v11();
    }
  }

  else if ([*(id *)(a1 + 32) fetchDeviceSafetyState])
  {
    [*(id *)(a1 + 40) _updateDeviceListResponseWithDeviceInfo:v5 completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      id v11 = *(void (**)(void))(v12 + 16);
      goto LABEL_10;
    }
  }
}

void sub_10003C17C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
  if (([v7 isAuthenticatedRequestSerializationEnabled] & 1) == 0)
  {

LABEL_6:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_7;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
  unsigned int v9 = [v8 isSilentAuthenticationRequestSerializationEnabled];

  uint64_t v10 = -[AKAppleIDAuthenticationContext initWithAuthenticatedServerRequestContext:]( objc_alloc(&OBJC_CLASS___AKAppleIDAuthenticationContext),  "initWithAuthenticatedServerRequestContext:",  *(void *)(a1 + 32));
  -[AKAppleIDAuthenticationContext setAuthenticationType:](v10, "setAuthenticationType:", 1LL);
  -[AKAppleIDAuthenticationContext set_ignoreShouldContinueProxy:](v10, "set_ignoreShouldContinueProxy:", 1LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003C2D0;
  v12[3] = &unk_1001C7FE0;
  id v11 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v11;
  id v15 = *(id *)(a1 + 48);
  [v13 authenticateWithContext:v10 completion:v12];

LABEL_7:
}

void sub_10003C2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    [*(id *)(a1 + 32) _performDeviceListRequestWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7026LL,  a3));
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0LL, v4);
  }

void sub_10003C3FC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceListProviderWithContext:*(void *)(a1 + 40)]);
  uint64_t v3 = -[AKServiceControllerImpl initWithRequestProvider:]( objc_alloc(&OBJC_CLASS___AKServiceControllerImpl),  "initWithRequestProvider:",  v2);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10003C4C0;
  v5[3] = &unk_1001C8058;
  id v4 = *(void **)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  -[AKServiceControllerImpl executeRequestWithCompletion:](v3, "executeRequestWithCompletion:", v5);
}

void sub_10003C4C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  unsigned int v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void **)(v8 + 40);
  uint64_t v11 = *(void *)(v8 + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10003C5AC;
  v14[3] = &unk_1001C8030;
  v14[4] = v8;
  id v15 = v9;
  id v16 = v7;
  id v17 = v6;
  id v18 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = v7;
  [v10 endAuthenticatedRequestWithContext:v15 client:v11 clearanceHandler:v14];
}

id sub_10003C5AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleDeviceListResponseRequestContext:*(void *)(a1 + 40) responseError:*(void *)(a1 + 48) responseData:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10003C9BC(uint64_t *a1)
{
  if ([(id)a1[4] type] == (id)3
    && [*(id *)(a1[5] + 8) hasServerOnlyDeviceListAccess])
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[AKDeviceListStoreManager sharedManager](&OBJC_CLASS___AKDeviceListStoreManager, "sharedManager"));
    [v6 updateCacheWithContext:a1[4] deviceListResponse:a1[6] completionHandler:&stru_1001C8098];
  }

  else
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[AKDeviceListStoreManager sharedManager](&OBJC_CLASS___AKDeviceListStoreManager, "sharedManager"));
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[4];
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
    [v6 verifyCacheSyncStatusFromResponse:v2 context:v3 accountManager:v4 reporter:v5 completionHandler:&stru_1001C80B8];
  }
}

void sub_10003CAA4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = _AKLogSystem(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100133080();
  }
}

void sub_10003CAF4(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1001330E0();
  }
}

uint64_t sub_10003D0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10003D218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003D468(void *a1)
{
  id v2 = [*(id *)(a1[4] + 8) hasInternalAccess];
  if ((v2 & 1) != 0)
  {
    id v7 = -[AKDServerUIController initWithClient:]( objc_alloc(&OBJC_CLASS___AKDServerUIController),  "initWithClient:",  *(void *)(a1[4] + 8LL));
    -[AKDServerUIController getServerUILoadDelegateWithContext:completion:]( v7,  "getServerUILoadDelegateWithContext:completion:",  a1[5],  a1[6]);
  }

  else
  {
    uint64_t v3 = _AKLogSystem(v2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100132A48();
    }

    uint64_t v5 = a1[6];
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7026LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

void sub_10003D724(uint64_t a1)
{
  uint64_t v2 = _AKSignpostLogSystem(a1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  os_signpost_id_t v4 = _AKSignpostCreate();
  uint64_t v6 = v5;

  uint64_t v8 = _AKSignpostLogSystem(v7);
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  unint64_t v11 = v4 - 1;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "UpdateStateWithAuthResponse",  " enableTelemetry=YES ",  buf,  2u);
  }

  uint64_t v13 = _AKSignpostLogSystem(v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    os_signpost_id_t v83 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "BEGIN [%lld]: UpdateStateWithAuthResponse  enableTelemetry=YES ",  buf,  0xCu);
  }

  id v15 = [*(id *)(*(void *)(a1 + 32) + 8) hasWriteAccess];
  if ((v15 & 1) == 0)
  {
    uint64_t v32 = _AKLogSystem(v15);
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      sub_100133290();
    }

    id v21 = (AKAuthenticationServerResponse *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:",  -7026LL));
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v4, v6);
    uint64_t v35 = _AKSignpostLogSystem(Nanoseconds);
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    __int16 v37 = v36;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
    {
      unsigned int v38 = -[AKAuthenticationServerResponse code](v21, "code");
      *(_DWORD *)buf = 67240192;
      LODWORD(v83) = v38;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  OS_SIGNPOST_INTERVAL_END,  v4,  "UpdateStateWithAuthResponse",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v40 = _AKSignpostLogSystem(v39);
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
LABEL_33:
    unsigned int v58 = -[AKAuthenticationServerResponse code](v21, "code");
    *(_DWORD *)buf = 134218496;
    os_signpost_id_t v83 = v4;
    __int16 v84 = 2048;
    double v85 = (double)Nanoseconds / 1000000000.0;
    __int16 v86 = 1026;
    unsigned int v87 = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
LABEL_34:

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_35;
  }

  if (!+[AKAppleIDServerResourceLoadDelegate signalFromServerResponse:]( &OBJC_CLASS___AKAppleIDServerResourceLoadDelegate,  "signalFromServerResponse:",  *(void *)(a1 + 40)))
  {
    uint64_t v42 = _AKLogSystem(0LL);
    uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      sub_1001331B4();
    }

    id v21 = (AKAuthenticationServerResponse *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:",  -7010LL));
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v4, v6);
    uint64_t v44 = _AKSignpostLogSystem(Nanoseconds);
    v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    uint64_t v46 = v45;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
    {
      unsigned int v47 = -[AKAuthenticationServerResponse code](v21, "code");
      *(_DWORD *)buf = 67240192;
      LODWORD(v83) = v47;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v46,  OS_SIGNPOST_INTERVAL_END,  v4,  "UpdateStateWithAuthResponse",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v49 = _AKSignpostLogSystem(v48);
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) username]);

  if (!v16)
  {
    uint64_t v50 = _AKLogSystem(v17);
    id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      sub_1001331E0();
    }

    id v21 = (AKAuthenticationServerResponse *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:",  -7022LL));
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v4, v6);
    uint64_t v52 = _AKSignpostLogSystem(Nanoseconds);
    v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    id v54 = v53;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
    {
      unsigned int v55 = -[AKAuthenticationServerResponse code](v21, "code");
      *(_DWORD *)buf = 67240192;
      LODWORD(v83) = v55;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v54,  OS_SIGNPOST_INTERVAL_END,  v4,  "UpdateStateWithAuthResponse",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v57 = _AKSignpostLogSystem(v56);
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  id v18 = objc_alloc(&OBJC_CLASS___AKAuthenticationServerResponse);
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) username]);
  id v21 = -[AKAuthenticationServerResponse initWithServerResponse:forAppleID:]( v18,  "initWithServerResponse:forAppleID:",  v19,  v20);

  uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) username]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 authKitAccountWithAppleID:v23 error:0]);

  if (v24
    || (unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationServerResponse appleID](v21, "appleID")),
        v59,
        v59)
    && (uint64_t v60 = *(void **)(*(void *)(a1 + 32) + 24LL),
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationServerResponse appleID](v21, "appleID")),
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v60 authKitAccountWithAppleID:v61 error:0]),
        v61,
        v24))
  {
    uint64_t v26 = _AKLogSystem(v25);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      os_signpost_id_t v83 = (os_signpost_id_t)v24;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Updating IDMS account %@ with external server auth response...",  buf,  0xCu);
    }

    id v29 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v28), "_verificationQueue");
    uint64_t v30 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v29);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003DF70;
    block[3] = &unk_1001C80E0;
    void block[4] = *(void *)(a1 + 32);
    id v76 = v24;
    id v77 = v21;
    id v78 = *(id *)(a1 + 48);
    os_signpost_id_t v80 = v4;
    uint64_t v81 = v6;
    id v79 = *(id *)(a1 + 56);
    id v31 = v24;
    dispatch_async(v30, block);
  }

  else
  {
    uint64_t v62 = _AKLogSystem(v25);
    v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
      sub_10013320C((id *)(a1 + 48), v63);
    }

    id v31 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7023LL));
    unint64_t v64 = _AKSignpostGetNanoseconds(v4, v6);
    uint64_t v65 = _AKSignpostLogSystem(v64);
    v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    uint64_t v67 = v66;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v66))
    {
      unsigned int v68 = [v31 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v83) = v68;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  OS_SIGNPOST_INTERVAL_END,  v4,  "UpdateStateWithAuthResponse",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v70 = _AKSignpostLogSystem(v69);
    uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v72 = [v31 code];
      *(_DWORD *)buf = 134218496;
      os_signpost_id_t v83 = v4;
      __int16 v84 = 2048;
      double v85 = (double)v64 / 1000000000.0;
      __int16 v86 = 1026;
      unsigned int v87 = v72;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
    }

    uint64_t v73 = *(void *)(a1 + 56);
    uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7023LL));
    (*(void (**)(uint64_t, void, void *))(v73 + 16))(v73, 0LL, v74);
  }

LABEL_35:
}

void sub_10003DF70(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  os_signpost_id_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  id v50 = 0LL;
  [v4 _updateAuthKitAccount:v2 withServerResponse:v5 context:v6 error:&v50];
  id v7 = v50;
  uint64_t v8 = _AKLogSystem(v7);
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001332BC();
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_10013331C();
  }

  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 72), *(void *)(a1 + 80));
  uint64_t v12 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = v13;
  os_signpost_id_t v15 = *(void *)(a1 + 72);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    unsigned int v16 = [v7 code];
    *(_DWORD *)buf = 67240192;
    LODWORD(v53) = v16;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_INTERVAL_END,  v15,  "UpdateStateWithAuthResponse",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
  }

  uint64_t v18 = _AKSignpostLogSystem(v17);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    double v20 = (double)Nanoseconds / 1000000000.0;
    uint64_t v21 = *(void *)(a1 + 72);
    unsigned int v22 = [v7 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v53 = v21;
    __int16 v54 = 2048;
    double v55 = v20;
    __int16 v56 = 1026;
    unsigned int v57 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceTokens]);
  id v24 = [v23 count];
  uint64_t v25 = _AKLogSystem(v24);
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if (v24)
  {
    id v44 = v7;
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "External auth response contains GS service tokens. Will persist those...",  buf,  2u);
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);
    id v29 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    id v30 = v28;
    id v31 = [v30 countByEnumeratingWithState:&v46 objects:v51 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v47;
      do
      {
        for (i = 0LL; i != v32; i = (char *)i + 1)
        {
          if (*(void *)v47 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = *(void *)(*((void *)&v46 + 1) + 8LL * (void)i);
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v35, v44));
          __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 stringValue]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v29, "setObject:forKeyedSubscript:", v37, v35);
        }

        id v32 = [v30 countByEnumeratingWithState:&v46 objects:v51 count:16];
      }

      while (v32);
    }

    unsigned int v38 = *(void **)(a1 + 32);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) altDSID]);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dsid]);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) appleID]);
    uint64_t v42 = *(void *)(a1 + 56);
    id v45 = 0LL;
    [v38 _persistGrandSlamServiceTokens:v29 forAltDSID:v39 DSID:v40 appleID:v41 forContext:v42 error:&v45];
    id v43 = v45;
    id v7 = v44;

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "No GS service tokens to update. Done.",  buf,  2u);
    }

    (*(void (**)(void, BOOL, id))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), v7 == 0LL, v7);
  }
}

void sub_10003E7EC()
{
}

void sub_10003E7F8()
{
}

uint64_t sub_10003E828(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003E838(uint64_t a1)
{
}

void sub_10003E840(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) store]);
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 credentialForAccount:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

uint64_t sub_10003E8C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003EB74(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  unsigned int v9 = v8;
  if (!v8)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  a3,  @"application/x-plist"));
    uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSDictionary, v13);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v12, v14);
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v26 = _AKLogSystem(isKindOfClass);
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_1001334AC();
      }

      uint64_t v28 = *(void *)(a1 + 32);
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void, id, void *))(v28 + 16))(v28, 0LL, 0LL, v7, v16);
      goto LABEL_22;
    }

    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"ec"]);
    uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSNumber, v17);
    uint64_t v19 = objc_opt_isKindOfClass(v16, v18);
    if ((v19 & 1) == 0)
    {
      uint64_t v29 = _AKLogSystem(v19);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_10013343C(v30, v31, v32, v33, v34, v35, v36, v37);
      }

      uint64_t v38 = *(void *)(a1 + 32);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void, id, void *))(v38 + 16))(v38, 0LL, 0LL, v7, v39);

      goto LABEL_22;
    }

    if ([v16 integerValue])
    {
      if ([v16 integerValue] != (id)-21669)
      {
LABEL_22:

        goto LABEL_23;
      }

      uint64_t v20 = _AKLogSystem(-21669LL);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Code is invalid!", v42, 2u);
      }

      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, void *, id, void))(v22 + 16);
      uint64_t v24 = 0LL;
      uint64_t v25 = 0LL;
    }

    else
    {
      uint64_t v40 = _AKLogSystem(0LL);
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Code is valid!", buf, 2u);
      }

      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, void *, id, void))(v22 + 16);
      uint64_t v24 = 1LL;
      uint64_t v25 = v12;
    }

    v23(v22, v24, v25, v7, 0LL);
    goto LABEL_22;
  }

  uint64_t v10 = _AKLogSystem(v8);
  unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_1001334D8();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_23:
}

LABEL_34:
}

          [v22 setAppName:v27];

          uint64_t v34 = [v17 clientID];
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          uint64_t v37 = v36;

          uint64_t v38 = v22;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
          id v45 = *a1;
          *a1 = 0x8000000000000000LL;
          sub_1000F1130((uint64_t)v38, v35, v37, isUniquelyReferenced_nonNull_native, &qword_10020EBC0);
          uint64_t v40 = *a1;
          *a1 = v45;

          swift_bridgeObjectRelease(v37);
          swift_bridgeObjectRelease(v40);
          if (!v11) {
            goto LABEL_7;
          }
LABEL_6:
          uint64_t v12 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
      }

      unsigned int v16 = v14 + 4;
      if (v16 < v42)
      {
        os_signpost_id_t v15 = *(void *)(v41 + 8 * v16);
        if (v15)
        {
          id v7 = v16;
          goto LABEL_22;
        }

        while (1)
        {
          id v7 = v16 + 1;
          if (__OFADD__(v16, 1LL)) {
            goto LABEL_38;
          }
          if (v7 >= v42) {
            break;
          }
          os_signpost_id_t v15 = *(void *)(v41 + 8 * v7);
          ++v16;
          if (v15) {
            goto LABEL_22;
          }
        }
      }
    }

    uint64_t v14 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_35:
    uint64_t v25 = *(id *)(*(void *)(v9 + 56) + 8 * v21);
    uint64_t v26 = [v25 primaryClientID];
    if (!v26) {
      goto LABEL_16;
    }

    BOOL v27 = [v25 primaryClientID];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      if (v29 == 1280070990 && v31 == 0xE400000000000000LL)
      {
        swift_bridgeObjectRelease(0xE400000000000000LL);
LABEL_16:
        unsigned int v16 = [v25 clientID];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        uint64_t v19 = v18;

        sub_1000F1A58(v43, v17, v19);
        swift_bridgeObjectRelease(v43[1]);
        continue;
      }

      uint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, 1280070990LL, 0xE400000000000000LL, 0LL);
      swift_bridgeObjectRelease(v31);
      if ((v33 & 1) != 0) {
        goto LABEL_16;
      }
    }
  }

  uint64_t v24 = v22 + 4;
  if (v24 < v15)
  {
    uint64_t v23 = *(void *)(v11 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        uint64_t v10 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_46;
        }
        if (v10 >= v15) {
          goto LABEL_4;
        }
        uint64_t v23 = *(void *)(v11 + 8 * v10);
        ++v24;
        if (v23) {
          goto LABEL_34;
        }
      }
    }

    uint64_t v10 = v24;
    goto LABEL_34;
  }

void sub_10003F3F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10003F498(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) store]);
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 credentialForAccount:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10003F520(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  unsigned int v9 = v8;
  if (!v8)
  {
    id v12 = [a3 statusCode];
    uint64_t v13 = _AKLogSystem(v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      os_signpost_id_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v12));
      *(_DWORD *)buf = 138412290;
      unsigned int v68 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Code validation completed with HTTP status code: %@",  buf,  0xCu);
    }

    if (v12 != (id)200)
    {
      if (v12 == (id)401)
      {
        uint64_t v17 = _AKLogSystem(v16);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          sub_1001335F0();
        }

        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
        if (v19)
        {
          uint64_t v21 = AKAppleIDAuthenticationErrorDomain;
          uint64_t v65 = AKAuthenticationUsernameKey;
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
          v66 = v22;
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v66,  &v65,  1LL));
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v21,  -7058LL,  v23));
        }

        else
        {
          uint64_t v37 = _AKLogSystem(v20);
          uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            sub_100133590();
          }

          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7058LL));
        }

        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v24);
      }

      else
      {
        uint64_t v33 = _AKLogSystem(v16);
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v12));
          *(_DWORD *)buf = 138412290;
          unsigned int v68 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Unexpected HTTP response code: %@",  buf,  0xCu);
        }

        uint64_t v36 = *(void *)(a1 + 40);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
        (*(void (**)(uint64_t, void, void *))(v36 + 16))(v36, 0LL, v24);
      }

      goto LABEL_42;
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v7,  @"application/x-plist"));
    uint64_t v24 = v25;
    if (!v25)
    {
      uint64_t v39 = _AKLogSystem(0LL);
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        sub_1001334AC();
      }

      uint64_t v41 = *(void *)(a1 + 40);
      BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void *))(v41 + 16))(v41, 0LL, v27);
      goto LABEL_41;
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"ec"]);
    BOOL v27 = v26;
    if (v26)
    {
      if (![v26 integerValue])
      {
        uint64_t v53 = _AKLogSystem(0LL);
        __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Server says vetting token is valid.",  buf,  2u);
        }

        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, void))(v30 + 16);
        uint64_t v32 = 1LL;
        goto LABEL_36;
      }

      if ([v27 integerValue] == (id)-23017)
      {
        uint64_t v28 = _AKLogSystem(-23017LL);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Server says vetting token is invalid.",  buf,  2u);
        }

        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, void))(v30 + 16);
        uint64_t v32 = 0LL;
LABEL_36:
        v31(v30, v32, 0LL);
LABEL_41:

LABEL_42:
        goto LABEL_43;
      }

      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[AKServerErrorGenerator errorFromServerResponseParameters:authenticationError:]( &OBJC_CLASS___AKServerErrorGenerator,  "errorFromServerResponseParameters:authenticationError:",  v24,  -7057LL));
      uint64_t v55 = _AKLogSystem(v52);
      __int16 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
        sub_10013368C();
      }

      id v57 = [v27 integerValue];
      unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue([v52 userInfo]);
      unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDMS",  v57,  v58));

      uint64_t v60 = AKAppleIDAuthenticationErrorDomain;
      NSErrorUserInfoKey v63 = NSUnderlyingErrorKey;
      unint64_t v64 = v59;
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v64,  &v63,  1LL));
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v60,  -7057LL,  v61));

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      uint64_t v42 = _AKLogSystem(0LL);
      id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        sub_10013361C(v43, v44, v45, v46, v47, v48, v49, v50);
      }

      uint64_t v51 = *(void *)(a1 + 40);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void *))(v51 + 16))(v51, 0LL, v52);
    }

    goto LABEL_41;
  }

  uint64_t v10 = _AKLogSystem(v8);
  unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_1001336EC();
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_43:
}

BOOL sub_10003FC18(id a1, ACAccount *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  id v5 = [v4 securityLevelForAccount:v3];

  return v5 != (id)5;
}

void sub_10003FE18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = _AKLogSystem(v7);
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100133778();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
      int v15 = 138412290;
      uint64_t v16 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fetched eligibility state for %@",  (uint8_t *)&v15,  0xCu);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v6,  @"application/x-plist"));
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"isHSA2Eligible"]);
    (*(void (**)(uint64_t, id, void))(v13 + 16))(v13, [v14 BOOLValue], 0);
  }
}

uint64_t sub_1000401D4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_100040440(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

void sub_1000409B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1000409DC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sign out succeeded for account %@",  (uint8_t *)&v12,  0xCu);
    }
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001338C4();
    }

    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v11 = v5;
    uint64_t v8 = *(os_log_s **)(v10 + 40);
    *(void *)(v10 + 40) = v11;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

LABEL_24:
  uint64_t v34 = objc_claimAutoreleasedReturnValue([v12 username]);
  if (v34)
  {
    uint64_t v35 = (void *)v34;
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v12 _password]);
    if (v36 && [v12 authenticationType] == (id)1)
    {
      uint64_t v49 = [v12 _capabilityForUIDisplay];

      if (v49 == (id)2)
      {
        uint64_t v38 = _AKLogSystem(v37);
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
          sub_10013398C();
        }

        [v12 setAuthenticationType:0];
      }
    }

    else
    {
    }
  }

  uint64_t v40 = objc_claimAutoreleasedReturnValue([v12 companionKeyEnvelope]);
  if (v40)
  {
    uint64_t v41 = (void *)v40;
    uint64_t v42 = -[AKClient hasCompanionKeyEnvelopeAccess](self->_client, "hasCompanionKeyEnvelopeAccess");

    if ((v42 & 1) == 0)
    {
      uint64_t v47 = _AKLogSystem(v40);
      uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        sub_100133924();
      }

      uint64_t v25 = -7026LL;
LABEL_40:
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v25));
      ((void (*)(void *, void, void *))v14[2])(v14, 0LL, v22);
      goto LABEL_41;
    }
  }

  id v43 = _AKLogSystem(v40);
  uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v61 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Requesting clearance to begin auth with context %@...",  buf,  0xCu);
  }

  authTrafficController = self->_authTrafficController;
  client = self->_client;
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_100041080;
  v50[3] = &unk_1001C7280;
  uint64_t v51 = v12;
  uint64_t v52 = self;
  uint64_t v53 = v14;
  -[AKAuthenticationTrafficController beginAuthenticatedRequestWithContext:client:clearanceHandler:]( authTrafficController,  "beginAuthenticatedRequestWithContext:client:clearanceHandler:",  v51,  client,  v50);

  uint64_t v22 = v51;
LABEL_41:
}
}
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

        id v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1000B8EB0(v25, v38);
      }

      else
      {
        sub_1000B8E74((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      Class result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        int v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      void *v16 = v24;
      v16[1] = v23;
      Class result = (uint64_t)sub_1000B8EB0(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  Class result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        id v7 = (v13 - 1) & v13;
        id v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }

      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      uint64_t v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      uint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }

    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    uint64_t v24 = v23[1];
    uint64_t v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      id v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      uint64_t v46 = v9;
      uint64_t v47 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        BOOL v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      id v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      uint64_t v46 = v9;
      uint64_t v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    uint64_t v31 = *(_BYTE *)(v2 + 32);
    uint64_t v32 = v31 & 0x3F;
    uint64_t v33 = (1LL << v31) + 63;
    uint64_t v34 = v33 >> 6;
    uint64_t v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_1000F2C5C((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000CC5C0(v43);
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_1000F2C5C((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000CC5C0(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

void sub_100041014(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 40) _finishAnalyticsEvent:*(void *)(a1 + 48) authenticationResults:v7 authenticationContext:*(void *)(a1 + 56) error:v5];
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_100041080(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cleared to begin auth with context %@!",  buf,  0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100041198;
  v7[3] = &unk_1001C7FE0;
  void v7[4] = v6;
  id v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v6 _authenticateWithContext:v8 completion:v7];
}

void sub_100041198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:AKAuthenticationUsernameKey]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:AKAuthenticationRawPasswordKey]);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void **)(v9 + 40);
  uint64_t v12 = *(void *)(v9 + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1000412D4;
  v16[3] = &unk_1001C8108;
  id v17 = v10;
  id v13 = *(id *)(a1 + 48);
  id v19 = v6;
  id v20 = v13;
  id v18 = v5;
  id v14 = v6;
  id v15 = v5;
  [v11 endAuthenticationForAppleID:v7 password:v8 error:v14 context:v17 client:v12 clearanceHandler:v16];
}

uint64_t sub_1000412D4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cleared to end auth with context %@.",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10004166C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Security upgrade flow completed with error - %@",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13) {
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v10);
    }
  }

  else
  {
    id v14 = *(void **)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) username]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100041814;
    v20[3] = &unk_1001C8238;
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(a1 + 40);
    id v23 = v17;
    void v20[4] = v18;
    id v21 = v19;
    id v22 = v7;
    [v14 _shouldContinueAuthenticatingForUsername:v15 password:0 serverResponse:v22 didShowServerUI:1 continuationData:0 error:0 context:v16 completion:v20];
  }
}

void sub_100041814(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = _AKLogSystem(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((a2 & 1) != 0)
  {
    if (v11)
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Should continue with results. Update account with results and proceed.",  v13,  2u);
    }

    [*(id *)(a1 + 32) _handleSuccessfulVerificationForContext:*(void *)(a1 + 40) withResults:v7 serverResponse:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }

  else
  {
    if (v11)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Should not continue. Calling completion with just error.",  buf,  2u);
    }

    uint64_t v12 = *(void *)(a1 + 56);
    if (v12) {
      (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v8);
    }
  }
}

void sub_100041A58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 32) _capabilityForUIDisplay] == (id)1
     || [*(id *)(a1 + 32) _capabilityForUIDisplay] == (id)4)
    && (id v7 = objc_msgSend(v6, "ak_isServiceError"), (_DWORD)v7))
  {
    uint64_t v8 = _AKLogSystem(v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v22 = 0;
      uint64_t v10 = "Passwordless authentication failed due to service error, bailing...";
      BOOL v11 = (uint8_t *)&v22;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v11, 2u);
    }
  }

  else if ([v6 code] == (id)-7061)
  {
    uint64_t v12 = _AKLogSystem(-7061LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v21 = 0;
      uint64_t v10 = "Passwordless authentication failed due to proxy failure, bailing...";
      BOOL v11 = (uint8_t *)&v21;
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth]);
    unsigned int v15 = [v14 BOOLValue];

    if (v15)
    {
      uint64_t v17 = _AKLogSystem(v16);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v20 = 0;
        uint64_t v10 = "Passwordless authentication resulted in a failed interactive flow, bailing...";
        BOOL v11 = (uint8_t *)&v20;
        goto LABEL_15;
      }
    }

    else
    {
      if ([v6 code] != (id)-7034)
      {
        [*(id *)(a1 + 40) _handlePasswordlessAuthResults:v5 context:*(void *)(a1 + 32) error:v6 completion:*(void *)(a1 + 48)];
        goto LABEL_17;
      }

      uint64_t v18 = _AKLogSystem(-7034LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v19 = 0;
        uint64_t v10 = "Passwordless authentication force failed by client, bailing...";
        BOOL v11 = (uint8_t *)&v19;
        goto LABEL_15;
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
LABEL_17:
}

LABEL_19:
}
}

      uint64_t v12 = 0;
      goto LABEL_5;
    }
  }

  BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 _proxiedAppBundleID]);
  if (v11)
  {
    __int16 v20 = +[AKClient isAppWithBundleIDForeground:](&OBJC_CLASS___AKClient, "isAppWithBundleIDForeground:", v11);
    if (!v20)
    {
      __int16 v21 = _AKLogSystem(v20);
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = 138412290;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Ignoring FG proxying request because %@ is not currently foreground.",  (uint8_t *)&v23,  0xCu);
      }

      goto LABEL_19;
    }
  }

  uint64_t v38 = objc_msgSend(v7, "_clientAuthenticatedExternallyWithPassword", *(_OWORD *)v46);
  if ((_DWORD)v38)
  {
    uint64_t v40 = _AKLogSiwa(v38, v39);
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Client has authenticated externally, populating authToken...",  v46,  2u);
    }

    -[AKAuthorizationContext set_clientAuthenticatedExternallyWithPassword:]( v8,  "set_clientAuthenticatedExternallyWithPassword:",  1LL);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v7 _externalAuthToken]);
    -[AKAuthorizationContext set_externalAuthToken:](v8, "set_externalAuthToken:", v42);
  }

  id v43 = _AKLogSiwa(v38, v39);
  uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
    sub_10013CBA8();
  }

  return v8;
}

  __break(1u);
  return result;
}

void sub_100041F4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v10 = NSUnderlyingErrorKey;
    uint64_t v11 = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    uint64_t v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8));

    id v6 = (id)v9;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_49:
    uint64_t v30 = 0;
    goto LABEL_29;
  }

                  __break(1u);
                }

                id v14 = v9 + 5;
              }
            }
          }
        }

LABEL_36:
  uint64_t v38 = _AKLogSystem(v35);
  uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Sanitizing context...", v45, 2u);
  }

  NSErrorUserInfoKey v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 authKitAccount:0]);
  if (v10) {
    -[AKAppleIDAuthenticationService _correlateContext:withAuthModeInformation:]( self,  "_correlateContext:withAuthModeInformation:",  v4,  -[AKAccountManager authenticationModeForAccount:](self->_accountManager, "authenticationModeForAccount:", v10),  -[AKAccountManager mdmInformationRequiredForAccount:]( self->_accountManager,  "mdmInformationRequiredForAccount:",  v10));
  }
  uint64_t v40 = objc_msgSend(v4, "authenticationType", *(_OWORD *)v45);
  if (v40 == (id)2 || (uint64_t v40 = [v4 authenticationType], v40 == (id)3))
  {
    uint64_t v41 = _AKLogSystem(v40);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Determined context requires interactive auth after sanitizing.",  v45,  2u);
    }

    uint64_t v30 = 1;
  }

  else
  {
    uint64_t v44 = _AKLogSystem(v40);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Context does not require interactive auth.",  v45,  2u);
    }

    uint64_t v30 = 0;
  }

LABEL_29:
  return v30;
}

  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v17 shortLivedToken]);

  v172 = self;
  if (v60)
  {
    uint64_t v61 = v21;
    uint64_t v62 = v18;
    NSErrorUserInfoKey v63 = (void *)objc_claimAutoreleasedReturnValue([v17 shortLivedToken]);
    unint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 stringValue]);
    uint64_t v65 = &AKAuthenticationShortLivedTokenKey;
LABEL_38:
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v64, *v65);

    uint64_t v18 = v62;
    __int16 v21 = v61;
    self = v172;
    goto LABEL_39;
  }

  NSErrorUserInfoKey v63 = (void *)objc_claimAutoreleasedReturnValue([v17 masterToken]);
  if (v63)
  {
    v127 = [v20 shouldRequestShortLivedToken];
    if ((_DWORD)v127)
    {
      uint64_t v61 = v21;
      v171 = v20;
      uint64_t v62 = v18;
      v128 = v15;
      v129 = _AKLogSystem(v127);
      v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "Providing short-lived token", buf, 2u);
      }

      uint64_t v65 = &AKAuthenticationShortLivedTokenKey;
LABEL_151:

      unint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 stringValue]);
      unsigned int v15 = v128;
      __int16 v20 = v171;
      goto LABEL_38;
    }

    if (-[AKClient hasInternalAccess](self->_client, "hasInternalAccess"))
    {
      v163 = [v17 authMode];
      if (v163)
      {
        uint64_t v61 = v21;
        v171 = v20;
        uint64_t v62 = v18;
        v128 = v15;
        v164 = _AKLogSystem(v163);
        v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v164);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "Providing identity token", buf, 2u);
        }

        uint64_t v65 = &AKAuthenticationIdentityTokenKey;
        goto LABEL_151;
      }
    }
  }

  uint64_t v75 = _AKLogSystem(v74);
  id v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
    sub_10013FA18((uint64_t)v10, (uint64_t)v7, v76);
  }

  [v7 setCredential:v10];
}

    swift_release(v44);
    return;
  }

  __break(1u);
LABEL_38:
  __break(1u);
}

void sub_1000429BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)NSErrorUserInfoKey v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Password reset completion received in akd.",  v10,  2u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_100042C2C(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((unint64_t)(a2 - 1) > 1)
  {
    uint64_t v9 = _AKLogSystem(v5);
    NSErrorUserInfoKey v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Biometric/Passcode Validation failed with error %@. We need password auth flow...",  buf,  0xCu);
    }

    if ([v6 code] == (id)-7003)
    {
      (*((void (**)(void))a1[6] + 2))();
    }

    else
    {
      if ([v6 code] == (id)-7068) {
        [a1[5] _setPassword:0];
      }
      [a1[4] _attemptInteractiveAuthWithContext:a1[5] completion:a1[6]];
    }
  }

  else
  {
    id v8 = a1[4];
    id v7 = a1[5];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100042DC8;
    v11[3] = &unk_1001C82B0;
    uint64_t v14 = a2;
    void v11[4] = v8;
    id v12 = v7;
    id v13 = a1[6];
    [v8 _attemptPasswordlessAuthAfterBiometricOrPasscodeValidationWithContext:v12 promptType:a2 completion:v11];
  }
}

void sub_100042DC8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = [a2 mutableCopy];
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7 == 1)
  {
    id v8 = &AKAuthenticationDidPerformBiometricAuth;
    goto LABEL_5;
  }

  if (v7 == 2)
  {
    id v8 = &AKAuthenticationDidPerformPasscodeAuth;
LABEL_5:
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:*v8];
  }

  [*(id *)(a1 + 32) _handlePasswordlessAuthResults:v6 context:*(void *)(a1 + 40) error:v9 completion:*(void *)(a1 + 48)];
}

void sub_100042F94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [v6 isSecondaryActionRequired];
  if ((_DWORD)v7)
  {
    uint64_t v8 = _AKLogSystem(v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Token upgrade requires secondary action.",  buf,  2u);
    }

    uint64_t v11 = *(void **)(a1 + 40);
    NSErrorUserInfoKey v10 = *(void **)(a1 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000430E4;
    v14[3] = &unk_1001C8300;
    v14[4] = v11;
    id v15 = v10;
    id v16 = *(id *)(a1 + 56);
    [v11 _performSecondaryActionWithServerResponse:v6 context:v15 completion:v14];
  }

  else
  {
    id v12 = *(void **)(a1 + 40);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) username]);
    [v12 _handleVerificationCompletionForUsername:v13 password:0 serverResponse:v6 didShowServerUI:0 continuationData:0 error:v5 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_1000430E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v8 = a4;
  id v9 = a2;
  NSErrorUserInfoKey v10 = (void *)objc_claimAutoreleasedReturnValue([v7 username]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000431B4;
  v12[3] = &unk_1001C7B60;
  uint64_t v11 = *(void *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  [v6 _handleVerificationCompletionForUsername:v10 password:0 serverResponse:v9 didShowServerUI:1 continuationData:0 error:v8 context:v11 completion:v12];
}

void sub_1000431B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  NSErrorUserInfoKey v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7));

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

void sub_10004334C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    id v7 = (void (**)(id, void, void *))a1[6];
    if (v7)
    {
      uint64_t v26 = AKAuthenticationDidPerformInteractiveAuth;
      BOOL v27 = &__kCFBooleanTrue;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8));
      v7[2](v7, 0LL, v9);
    }

    goto LABEL_22;
  }

  NSErrorUserInfoKey v10 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  uint64_t v11 = AKAppleIDAuthenticationErrorDomain;
  if (![v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

LABEL_8:
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if ([v13 isEqualToString:v11])
    {
      id v14 = [v6 code];

      if (v14 == (id)-7119LL)
      {
        [a1[4] setUsername:0];
        [a1[4] setReason:0];
        goto LABEL_11;
      }
    }

    else
    {
    }

    uint64_t v16 = objc_claimAutoreleasedReturnValue([a1[4] serviceIdentifiers]);
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _password]);
      BOOL v19 = v18 == 0LL;

      if (!v5)
      {
        if (!v18)
        {
          [a1[5] _performSilentServiceTokenAuthWithContext:a1[4] completion:a1[6]];
          goto LABEL_22;
        }

void sub_1000435DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_9:
    v14();
    goto LABEL_10;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth]);
  unsigned __int8 v10 = [v9 BOOLValue];

  if (!*(_BYTE *)(a1 + 56) || (v10 & 1) != 0)
  {
    id v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_9;
  }

  uint64_t v12 = _AKLogSystem(v11);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Will attempt silent auth since the context is asking for service tokens.",  v15,  2u);
  }

  [*(id *)(a1 + 32) _performSilentServiceTokenAuthWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
LABEL_10:
}

void sub_100043AD4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"NO";
    if (a2) {
      id v8 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client decision to keep using: %@. Error: %@",  buf,  0x16u);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if (![v9 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_9;
  }

  id v10 = [v5 code];

  if (v10 != (id)-7027LL)
  {
LABEL_9:
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = *(void **)(v11 + 48);
    uint64_t v14 = *(void *)(v11 + 8);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100043C9C;
    v15[3] = &unk_1001C83A0;
    id v16 = v5;
    id v18 = *(id *)(a1 + 56);
    char v19 = a2;
    id v17 = *(id *)(a1 + 48);
    [v13 dismissKeepUsingUIForContext:v12 client:v14 withCompletion:v15];

    goto LABEL_10;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_10:
}

void sub_100043C9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100044240(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 && [*(id *)(a1 + 32) authenticationType] == (id)2)
  {
    uint64_t v7 = _AKLogSystem(2LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "One shot at non-interactive failed, handling failure...",  buf,  2u);
    }

    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100044370;
    v11[3] = &unk_1001C7FE0;
    void v11[4] = v10;
    id v12 = v9;
    id v13 = *(id *)(a1 + 48);
    [v10 _handleVerificationError:v6 forContext:v12 completion:v11];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100044370(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 code] == (id)-7017) {
    [*(id *)(a1 + 32) _recoverCredentialsAndAuthenticateWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10004448C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v7 = _AKLogSystem(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to refresh context locally with error: %@",  buf,  0xCu);
    }

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000445B4;
    v11[3] = &unk_1001C6990;
    id v12 = *(id *)(a1 + 48);
    [v9 _refreshAuthModeIfNecessaryForContext:v10 completion:v11];
  }
}

void sub_1000445B4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = _AKLogSystem(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to refresh context remotely with error: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004472C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _shouldBroadcastForProximityAuthOnly];
  if (!(_DWORD)v2)
  {
    uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      if ([*(id *)(a1 + 32) authenticationType] == (id)3)
      {

LABEL_11:
        uint64_t v13 = _AKLogSystem(v10);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Client is asking for username only auth and provided a username... lets see how this goes",  buf,  2u);
        }

        id v15 = *(void **)(a1 + 32);
        id v16 = *(void **)(a1 + 40);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_1000449C8;
        v27[3] = &unk_1001C7FE0;
        v27[4] = v16;
        id v28 = v15;
        id v29 = *(id *)(a1 + 48);
        [v16 _performInteractiveFederatedAuthWithContext:v28 completion:v27];

        id v17 = v28;
LABEL_17:

        return;
      }

      id v12 = [*(id *)(a1 + 32) authenticationMode];

      if (v12 == (id)2) {
        goto LABEL_11;
      }
    }

    uint64_t v18 = _AKLogSystem(v10);
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Collecting user credentials...", buf, 2u);
    }

    id v21 = *(void **)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 40);
    __int16 v22 = *(void **)(v20 + 48);
    uint64_t v23 = *(void *)(v20 + 8);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_100044A74;
    v24[3] = &unk_1001C83F0;
    void v24[4] = v20;
    id v25 = v21;
    id v26 = *(id *)(a1 + 48);
    [v22 presentBasicLoginUIForContext:v25 client:v23 completion:v24];

    id v17 = v25;
    goto LABEL_17;
  }

  uint64_t v3 = _AKLogSystem(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is asking for proximity based authentication...",  buf,  2u);
  }

  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_100133C3C();
  }

  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAppleIDProximityAuthErrorDomain,  -13002LL,  0LL));
  (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
}

void sub_1000449C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "One shot at passwordless auth failed, handling failure...",  v8,  2u);
    }

    [*(id *)(a1 + 32) _handleVerificationError:v5 forContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_100044A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _handleBasicLoginUICompletionWithUsername:a2 password:a3 context:*(void *)(a1 + 40) additionalData:a4 collectionError:a5 completion:*(void *)(a1 + 48)];
}

void sub_100044B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && (id v3 = [v3 code], v3 != (id)-7045))
  {
    uint64_t v10 = _AKLogSystem(v3);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100133D58();
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v4);
    }
  }

  else
  {
    uint64_t v5 = _AKLogSystem(v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100133CE0();
    }

    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v9 = v8[1];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100044CD0;
    v13[3] = &unk_1001C7FE0;
    v13[4] = v8;
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    [v8 _performPasswordlessSRPAuthWithContext:v14 client:v9 completion:v13];
  }
}

void sub_100044CD0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100133DB8();
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = a1[5];
    int v13 = 138412546;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    uint64_t v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@: Successfully performed interactive FedAuth for context (%@)",  (uint8_t *)&v13,  0x16u);
  }

  uint64_t v12 = a1[6];
  if (v12) {
    (*(void (**)(uint64_t, id, id))(v12 + 16))(v12, v5, v6);
  }
}

void sub_100045374(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Account info fetch failed. Skipping validation.",  (uint8_t *)&v31,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 allAccountNames]);
    if ([v10 count])
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
      unsigned int v12 = [v10 containsObject:v11];

      uint64_t v14 = _AKLogSystem(v13);
      __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        if (v16)
        {
          id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
          int v31 = 138412546;
          uint64_t v32 = v17;
          __int16 v33 = 2112;
          uint64_t v34 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Username %@ is valid for altDSID: %@",  (uint8_t *)&v31,  0x16u);
        }
      }

      else
      {
        if (v16)
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v5 userInformationRepresentation]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 accountName]);
          int v31 = 138412802;
          uint64_t v32 = v20;
          __int16 v33 = 2112;
          uint64_t v34 = v21;
          __int16 v35 = 2112;
          uint64_t v36 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Username %@ is not valid for altDSID: %@. Setting username to %@",  (uint8_t *)&v31,  0x20u);
        }

        id v24 = *(void **)(a1 + 32);
        __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 userInformationRepresentation]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s accountName](v15, "accountName"));
        [v24 setUsername:v25];
      }
    }

    else
    {
      uint64_t v19 = _AKLogSystem(0LL);
      __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100133F88(a1, v15);
      }
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue([v5 userInformationRepresentation]);
    id v27 = [v26 authMode];

    id v28 = (void *)objc_claimAutoreleasedReturnValue([v5 userInformationRepresentation]);
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 isMdmInfoRequired]);
    uint64_t v30 = [v29 BOOLValue];

    objc_msgSend(*(id *)(a1 + 40), "_correlateContext:withAuthModeInformation:", *(void *)(a1 + 32), v27, v30);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

LABEL_26:
        -[AKAppleIDAuthenticationService _refreshAuthModeFromServerForContext:completion:]( self,  "_refreshAuthModeFromServerForContext:completion:",  v6,  v7);
        goto LABEL_27;
      }

      if (v22)
      {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v6 authenticationMode]));
        id v24 = 138412290;
        id v25 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Skipping refresh, authmode is known: %@",  (uint8_t *)&v24,  0xCu);
      }
    }

    v7[2](v7, 1LL, 0LL);
LABEL_27:

    goto LABEL_9;
  }

  uint64_t v11 = (void *)v10;
  unsigned int v12 = [v6 authenticationType];

  if (v12 != (id)3) {
    goto LABEL_11;
  }
LABEL_8:
  v7[2](v7, 1LL, 0LL);
LABEL_9:
}
}

  id v6 = (v14 - 1) & v14;
  unsigned int v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unsigned int v12 = v11 | (i << 6))
  {
    id v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    __int16 v33 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    uint64_t v20 = v33;
    id v21 = sub_1000B8F28();
    swift_bridgeObjectRetain(v18);
    __int16 v22 = v20;
    uint64_t v23 = sub_1000B86DC(&qword_10020D9A0);
    swift_dynamicCast(&v34, &v33, v21, v23, 7LL);
    id v24 = v34;
    Class result = sub_1000F9BB8(v19, v18);
    id v25 = result;
    if ((v26 & 1) != 0)
    {
      uint64_t v9 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v9[1]);
      *uint64_t v9 = v19;
      v9[1] = v18;
      uint64_t v10 = v3[7];
      Class result = swift_unknownObjectRelease(*(void *)(v10 + 8 * v25));
      *(void *)(v10 + 8 * v25) = v24;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v27 = (uint64_t *)(v3[6] + 16 * result);
    *id v27 = v19;
    v27[1] = v18;
    *(void *)(v3[7] + 8 * result) = v24;
    id v28 = v3[2];
    id v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v3[2] = v30;
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      Class result = Hasher._finalize()();
      id v24 = -1LL << *(_BYTE *)(v6 + 32);
      id v25 = result & ~v24;
      id v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v29 = v26 == v28;
          if (v26 == v28) {
            id v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      __int16 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *__int16 v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  Class result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    Class result = Hasher._finalize()();
    id v24 = -1LL << *(_BYTE *)(v6 + 32);
    id v25 = result & ~v24;
    id v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          id v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    __int16 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *__int16 v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    Class result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  Class result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      uint64_t v11 = (v15 - 1) & v15;
      unsigned int v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }

    sub_1000FA88C(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_1000B8E74(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_1000FA88C((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      id v27 = 0LL;
      id v28 = 0LL;
      sub_1000FA8C8((uint64_t)v34);
      swift_bridgeObjectRelease(v28);
      sub_1000CC5C0(a1);
      swift_release(v3);
      return 0LL;
    }

    id v17 = v27;
    uint64_t v18 = v28;
    sub_1000B8E74((uint64_t)v35 + 8, (uint64_t)v29);
    sub_1000FA8C8((uint64_t)v34);
    sub_1000B8EB0(v29, v30);
    *(void *)&int v31 = v17;
    *((void *)&v31 + 1) = v18;
    sub_1000B8EB0(v30, v32);
    uint64_t v19 = v31;
    sub_1000B8EB0(v32, v33);
    sub_1000B8EB0(v33, &v31);
    Class result = sub_1000F9BB8(v19, *((uint64_t *)&v19 + 1));
    uint64_t v20 = result;
    if ((v21 & 1) != 0)
    {
      uint64_t v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v9 + 8));
      *(_OWORD *)uint64_t v9 = v19;
      uint64_t v10 = (void *)(v3[7] + 32 * v20);
      sub_1000BC7D4(v10);
      Class result = (unint64_t)sub_1000B8EB0(&v31, v10);
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    Class result = (unint64_t)sub_1000B8EB0(&v31, (_OWORD *)(v3[7] + 32 * result));
    __int16 v22 = v3[2];
    uint64_t v23 = __OFADD__(v22, 1LL);
    id v24 = v22 + 1;
    if (v23) {
      goto LABEL_36;
    }
    v3[2] = v24;
LABEL_8:
    uint64_t v8 = v13;
    id v6 = v11;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000459E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  objc_msgSend(*(id *)(a1 + 32), "_correlateContext:withAuthModeInformation:", *(void *)(a1 + 40), a2, a3);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

LABEL_31:
    ((void (*)(void *, void, id))v22[2])(v22, 0LL, v18);
LABEL_32:
    id v17 = v65;
    uint64_t v14 = v66;
    goto LABEL_33;
  }

  if ([v14 length] && (uint64_t v30 = objc_msgSend(v15, "length")) != 0)
  {
    int v31 = v17;
    uint64_t v32 = _AKLogSystem(v30);
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Successfully obtained password. Time for SRP auth.",  buf,  2u);
    }

    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472LL;
    v67[2] = sub_1000464C4;
    v67[3] = &unk_1001C8530;
    id v17 = v31;
    unsigned int v68 = v31;
    uint64_t v71 = v22;
    uint64_t v69 = self;
    uint64_t v70 = v20;
    unsigned int v72 = v21;
    -[AKAppleIDAuthenticationService _verifyUsername:password:context:completion:]( self,  "_verifyUsername:password:context:completion:",  v14,  v15,  v70,  v67);

    uint64_t v34 = v68;
  }

  else
  {
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472LL;
    v73[2] = sub_100046408;
    v73[3] = &unk_1001C8508;
    id v76 = v21;
    uint64_t v74 = v20;
    uint64_t v75 = self;
    id v77 = v22;
    -[AKAppleIDAuthenticationService _handleMissingUsernameOrPasswordForContext:password:username:completion:]( self,  "_handleMissingUsernameOrPasswordForContext:password:username:completion:",  v74,  v15,  v14,  v73);

    uint64_t v34 = v76;
  }

LABEL_33:
}
}

  __break(1u);
  return result;
}

  __break(1u);
}

void sub_100046174(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100046248;
  v14[3] = &unk_1001C84B8;
  id v11 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v11;
  id v15 = v5;
  id v12 = v6;
  id v13 = v5;
  [v9 dismissBasicLoginUIForContext:v8 client:v10 completion:v14];
}

void sub_100046248(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013406C();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000462B8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (v5 && (objc_msgSend(v5, "ak_isUserCancelError") & 1) == 0) {
    [*(id *)(a1 + 32) _showAlertForVerificationError:v6 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100046330(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_7;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if (([v7 isEqualToString:AKAppleIDAuthenticationErrorDomain] & 1) == 0)
  {

    goto LABEL_8;
  }

  if ([v6 code] != (id)-7003)
  {
    id v8 = [v6 code];

    if (v8 == (id)-7043LL) {
      goto LABEL_7;
    }
LABEL_8:
    [*(id *)(a1 + 32) _showAlertForVerificationError:v6 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
    goto LABEL_9;
  }

LABEL_7:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_9:
}

void sub_100046408(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (objc_msgSend(v5, "ak_isUserTryAgainError"))
  {
    uint64_t v6 = *(void *)(a1 + 48);
LABEL_8:
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v9, v5);
    goto LABEL_9;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if (![v7 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_7;
  }

  unsigned int v8 = [*(id *)(a1 + 32) _keepAlive];

  if (!v8)
  {
LABEL_7:
    uint64_t v6 = *(void *)(a1 + 56);
    goto LABEL_8;
  }

  [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v5 andCompletion:*(void *)(a1 + 48)];
LABEL_9:
}

void sub_1000464C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    uint64_t v14 = _AKLogSystem(0LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Asking client to dismiss basic login UI. SRP Success.",  buf,  2u);
    }

    id v12 = [v5 mutableCopy];
    [v12 addEntriesFromDictionary:*(void *)(a1 + 32)];
    id v13 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    goto LABEL_12;
  }

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (![v8 isEqual:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_14;
  }

  if ([v7 code] != (id)-7033 && objc_msgSend(v7, "code") != (id)-7003)
  {
    unsigned __int8 v18 = objc_msgSend(v7, "ak_isIncompatibleDevicesError");

    if ((v18 & 1) != 0) {
      goto LABEL_6;
    }
LABEL_14:
    id v17 = *(void **)(a1 + 40);
    id v16 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1000466F0;
    v19[3] = &unk_1001C7FE0;
    v19[4] = v17;
    id v20 = v16;
    id v21 = *(id *)(a1 + 64);
    [v17 _handleVerificationError:v7 forContext:v20 completion:v19];

    goto LABEL_15;
  }

LABEL_6:
  uint64_t v10 = _AKLogSystem(v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Asking client to dismiss basic login UI. SRP Passthrough.",  buf,  2u);
  }

  id v12 = [v5 mutableCopy];
  [v12 addEntriesFromDictionary:*(void *)(a1 + 32)];
  [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth];
  id v13 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
LABEL_12:
  v13();

LABEL_15:
}

void sub_1000466F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 code] == (id)-7017)
  {
    uint64_t v7 = _AKLogSystem(-7017LL);
    unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initiating credential recovery", buf, 2u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    id v11 = *(void **)(v9 + 48);
    uint64_t v12 = *(void *)(v9 + 8);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100046824;
    v13[3] = &unk_1001C7EC8;
    v13[4] = v9;
    id v14 = v10;
    id v15 = *(id *)(a1 + 48);
    [v11 dismissBasicLoginUIForContext:v14 client:v12 completion:v13];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100046824(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001340CC();
    }
  }

  [*(id *)(a1 + 32) _recoverCredentialsAndAuthenticateWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100046B18(id *a1)
{
  id v2 = [a1[4] authenticationType];
  if (v2 == (id)3)
  {
    id v3 = a1[4];
    id v4 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100046C34;
    v9[3] = &unk_1001C7FE0;
    void v9[4] = v4;
    id v10 = v3;
    id v11 = a1[6];
    [v4 _performPasswordlessSRPAuthWithContext:v10 completion:v9];
  }

  else
  {
    uint64_t v5 = _AKLogSystem(v2);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Username was not valid for passwordless auth, requesting more information",  v8,  2u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7012LL));
    [a1[5] _showAlertForVerificationError:v7 context:a1[4] completion:a1[6]];
  }

void sub_100046C34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "One shot at passwordless auth failed, handling failure...",  v8,  2u);
    }

    [*(id *)(a1 + 32) _handleVerificationError:v5 forContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100046ED4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  uint64_t v13 = _AKLogSystem(v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Another attempt at getting basic login info has completed!",  v15,  2u);
  }

  [*(id *)(a1 + 32) _handleBasicLoginUICompletionWithUsername:v12 password:v11 context:*(void *)(a1 + 40) additionalData:v10 collectionError:v9 completion:*(void *)(a1 + 48)];
}

LABEL_62:
    unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( [v58 localizedStringForKey:@"UNKNOWN_ERROR_ALERT_TITLE" value:&stru_1001D1450 table:@"Localizable"]);

    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
    id v16 = v28;
    id v29 = @"UNKNOWN_ERROR_ALERT_MESSAGE";
    goto LABEL_63;
  }

  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue( [v50 localizedStringForKey:@"SRP_VERIFICATION_ERROR_TITLE" value:&stru_1001D1450 table:@"Localizable"]);

LABEL_51:
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v61 userInfo]);
  uint64_t v51 = objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v48]);
LABEL_64:
  __int16 v22 = (void *)v51;
LABEL_65:

  if (v11) {
    v11[2](v11, v15, v22);
  }
LABEL_67:
}

void sub_100047CE0(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = _AKLogSystem(v6);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Attempting to show login error: %@",  (uint8_t *)&v10,  0xCu);
  }

  [*(id *)(a1[5] + 48) presentLoginAlertForContext:a1[6] client:*(void *)(a1[5] + 8) withError:a1[4] title:v6 message:v5 completion:a1[7]];
}

void sub_100048054(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 allowPiggybacking])
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 secondaryActionMessage]);
    if (v7)
    {
      [a1[4] _setMessage:v7];
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
      id v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 localizedStringForKey:@"ENTER_VERIFICATION_CODE_PIG" value:&stru_1001D1450 table:@"Localizable"]);
      [a1[4] _setMessage:v15];
    }

    uint64_t v17 = _AKLogSystem(v16);
    unsigned __int8 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Starting piggybacking session", buf, 2u);
    }

    [a1[5] startPiggybackingForServerResponse:v5 context:a1[4] password:a1[6] username:a1[7] completion:a1[8]];
  }

  else if (v6 || (id v8 = [v5 isSecondaryActionRequired], !(_DWORD)v8))
  {
    [a1[5] _handleVerificationCompletionForUsername:a1[7] password:a1[6] serverResponse:v5 didShowServerUI:0 continuationData:0 error:v6 context:a1[4] completion:a1[8]];
  }

  else
  {
    uint64_t v9 = _AKLogSystem(v8);
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Looks like we're dealing with an HSA account.",  buf,  2u);
    }

    id v12 = a1[4];
    id v11 = a1[5];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000482BC;
    v20[3] = &unk_1001C85A8;
    id v21 = v5;
    int8x16_t v19 = *((int8x16_t *)a1 + 2);
    id v13 = (id)v19.i64[0];
    int8x16_t v22 = vextq_s8(v19, v19, 8uLL);
    id v23 = a1[7];
    id v24 = a1[6];
    id v25 = a1[8];
    [v11 _performSecondaryActionWithServerResponse:v21 context:v12 completion:v20];
  }
}

void sub_1000482BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unsigned int v10 = [*(id *)(a1 + 32) isSecondaryActionURLGSEndpoint];
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  if (v10)
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_100048458;
    v24[3] = &unk_1001C8580;
    void v24[4] = v12;
    uint64_t v13 = *(void *)(a1 + 48);
    id v25 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 64);
    id v27 = *(id *)(a1 + 48);
    id v28 = *(id *)(a1 + 72);
    [v12 _performGrandslamEndpointActionWithContext:v13 serverResponse:v11 completion:v24];

    id v14 = v25;
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v17 = *(void **)(a1 + 48);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100048498;
    v20[3] = &unk_1001C7FE0;
    id v18 = v17;
    uint64_t v19 = *(void *)(a1 + 40);
    id v21 = v18;
    uint64_t v22 = v19;
    id v23 = *(id *)(a1 + 72);
    [v12 _checkFreshnessAndVerifyWithPassword:v15 serverResponse:v11 additionalData:v8 secondaryActionError:v9 context:v18 newServerResponse:v7  username:v16 completion:v20];

    id v14 = v21;
  }
}

id sub_100048458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:*(void *)(a1 + 40) password:*(void *)(a1 + 48) serverResponse:a2 didShowServerUI:1 continuationData:0 error:a3 context:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100048498(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  +[AKCAAuthEventReporter reportAuthEventOfType:success:error:]( &OBJC_CLASS___AKCAAuthEventReporter,  "reportAuthEventOfType:success:error:",  AKAuthEventType_SECOND_FACTOR_SERVER_UI,  v9 != 0LL,  v5);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if ([v6 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    unsigned int v7 = [*(id *)(a1 + 32) _keepAlive];

    if (v7)
    {
      [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v5 andCompletion:*(void *)(a1 + 48)];
      goto LABEL_7;
    }
  }

  else
  {
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v5);
  }
LABEL_7:
}

void sub_1000488C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authKitAccount]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 username]);
  if (v8) {
    id v9 = (id)objc_claimAutoreleasedReturnValue([v7 username]);
  }
  else {
    id v9 = *(id *)(a1 + 40);
  }
  unsigned int v10 = v9;

  if (v6)
  {
    uint64_t v12 = _AKLogSystem(v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10013412C();
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    goto LABEL_27;
  }

  if ([v5 allowPiggybacking]
    && [*(id *)(a1 + 48) piggybackingForTrustedDevice])
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 secondaryActionMessage]);
    if (v14)
    {
      [*(id *)(a1 + 48) _setMessage:v14];
    }

    else
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
      int v31 = (void *)objc_claimAutoreleasedReturnValue( [v30 localizedStringForKey:@"ENTER_VERIFICATION_CODE_PIG" value:&stru_1001D1450 table:@"Localizable"]);
      [*(id *)(a1 + 48) _setMessage:v31];
    }

    uint64_t v33 = _AKLogSystem(v32);
    uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Starting piggybacking approval session for repair flow",  buf,  2u);
    }

    [*(id *)(a1 + 56) startPiggybackingForServerResponse:v5 context:*(void *)(a1 + 48) password:0 username:*(void *)(a1 + 40) completion:*(void *)(a1 + 72)];
    goto LABEL_27;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 federatedAuthURL]);

  if (v15)
  {
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v16 = *(void **)(a1 + 56);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_100048CE4;
    v40[3] = &unk_1001C85D0;
    uint64_t v18 = *(void *)(a1 + 64);
    id v19 = *(id *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 56);
    id v43 = v19;
    v40[4] = v20;
    id v41 = v10;
    id v42 = *(id *)(a1 + 48);
    [v16 _performSecondaryActionWithServerResponse:v5 context:v17 client:v18 completion:v40];

    id v21 = v43;
LABEL_16:

    goto LABEL_27;
  }

  if ([v5 isSecondaryActionURLGSEndpoint])
  {
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v22 = *(void **)(a1 + 56);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100048EB4;
    v35[3] = &unk_1001C8580;
    v35[4] = v22;
    id v36 = v10;
    id v37 = 0LL;
    id v38 = *(id *)(a1 + 48);
    id v39 = *(id *)(a1 + 72);
    [v22 _performGrandslamEndpointActionWithContext:v23 serverResponse:v5 completion:v35];

    id v21 = v36;
    goto LABEL_16;
  }

  id v24 = [*(id *)(a1 + 48) authenticationMode];
  if (v7 || v24 != (id)2)
  {
    [*(id *)(a1 + 56) _handleVerificationCompletionForUsername:v10 password:0 serverResponse:v5 didShowServerUI:0 continuationData:0 error:0 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 72)];
  }

  else
  {
    uint64_t v25 = _AKLogSystem(2LL);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) username]);
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "No continuation capable IDMS account found for Apple ID: %@",  buf,  0xCu);
    }

    uint64_t v28 = *(void *)(a1 + 72);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7023LL));
    (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0LL, v29);
  }

void sub_100048CE4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if ([v7 code] == (id)-7013)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100048DC8;
    v11[3] = &unk_1001C7B60;
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v8 _handleVerificationCompletionForUsername:v9 password:0 serverResponse:v6 didShowServerUI:1 continuationData:0 error:v7 context:v10 completion:v11];

    id v7 = v12;
  }
}

void sub_100048DC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  uint64_t v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7));

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

void sub_100048EB4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100048F58;
  v7[3] = &unk_1001C7B60;
  id v8 = *(id *)(a1 + 64);
  [v3 _handleVerificationCompletionForUsername:v4 password:0 serverResponse:a2 didShowServerUI:1 continuationData:0 error:v5 context:v6 completion:v7];
}

void sub_100048F58(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  uint64_t v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7));

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

id sub_10004923C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performSafeSRPAuthenticationWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100049554(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    if (!*(void *)(a1 + 32))
    {
      [*(id *)(a1 + 40) _handleSuccessfulVerificationForContext:*(void *)(a1 + 48) withResults:v9 serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
      goto LABEL_7;
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  v8();
LABEL_7:
}

LABEL_39:
  v66 = (void *)objc_claimAutoreleasedReturnValue([v17 inheritanceBeneficiarySetupToken]);
  uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v66 stringValue]);

  if (v67)
  {
    uint64_t v69 = _AKLogSystem(v68);
    uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Providing beneficiary setup token", buf, 2u);
    }

    uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v17 inheritanceBeneficiarySetupToken]);
    unsigned int v72 = (void *)objc_claimAutoreleasedReturnValue([v71 stringValue]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v72,  AKAuthenticationInheritanceBeneficiarySetupTokenKey);
  }

  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v17 beneficiaryIdentifier]);

  if (v73)
  {
    uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v17 beneficiaryIdentifier]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v74,  AKAuthenticationInheritanceBeneficiaryIdentifierKey);
  }

  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v17 beneficiaryWrappedKey]);

  if (v75)
  {
    id v76 = (void *)objc_claimAutoreleasedReturnValue([v17 beneficiaryWrappedKey]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v76,  AKAuthenticationInheritanceBeneficiaryWrappedKey);
  }

  id v77 = objc_claimAutoreleasedReturnValue([v17 dsid]);
  if (v77) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v77,  AKAuthenticationDSIDKey);
  }
  id v78 = objc_claimAutoreleasedReturnValue([v17 altDSID]);
  if (v78) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v78,  AKAuthenticationAlternateDSIDKey);
  }
  if (v174) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationDidShowServerUIKey);
  }
  if (([v20 needsNewAppleID] & 1) != 0
    || [v20 needsNewChildAccount])
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationNewAccountCreated);
  }

  if (v18) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v18,  AKAuthenticationNewAppleIDSetupInfoKey);
  }
  v166 = (void *)v77;
  if ([v17 appleIDSecurityLevel] == (id)4) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationIsHSA2Key);
  }
  if (v173)
  {
    if (-[AKClient hasInternalAccess](self->_client, "hasInternalAccess"))
    {
      id v79 = [v17 authMode];
      if (v79 != (id)2)
      {
        os_signpost_id_t v80 = _AKLogSystem(v79);
        uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "Providing raw password to an internal client.",  buf,  2u);
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v173,  AKAuthenticationRawPasswordKey);
      }
    }
  }

  v169 = v18;
  uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v17 acceptedTermsInfo]);

  if (v82)
  {
    os_signpost_id_t v83 = (void *)objc_claimAutoreleasedReturnValue([v17 acceptedTermsInfo]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v83,  AKAuthenticationAcceptedTermsKey);
  }

  if ([v17 appleIDSecurityLevel])
  {
    __int16 v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v17 appleIDSecurityLevel]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v84,  AKAuthenticationSecurityLevelKey);
  }

  double v85 = (void *)objc_claimAutoreleasedReturnValue([v17 hasSOSActiveDevice]);

  if (v85)
  {
    __int16 v86 = (void *)objc_claimAutoreleasedReturnValue([v17 hasSOSActiveDevice]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v86, AKSOSActiveDeviceKey);
  }

  unsigned int v87 = (void *)objc_claimAutoreleasedReturnValue([v17 SOSNeeded]);

  if (v87)
  {
    v88 = (void *)objc_claimAutoreleasedReturnValue([v17 SOSNeeded]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v88, AKSOSNeededKey);
  }

  if ([v17 authMode])
  {
    v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v17 authMode]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v89,  AKAuthenticationAppleIDAuthModeKey);
  }

  if ([v17 isMdmInfoRequired]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationAppleIDMDMInfoRequired);
  }
  if ([v17 isManagedAppleID]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationManagedAppleIDKey);
  }
  if ([v17 isDemoAccount]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationDemoAccountKey);
  }
  if ([v17 isAuditLogin]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationAuditLoginKey);
  }
  if ([v17 isServerUIRequired]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationIsServerUIRequiredKey);
  }
  if ([v17 isPasscodeResetRequired]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKAuthenticationIsPasscodeResetRequiredKey);
  }
  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v17 managedOrganizationType]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v90,  AKAuthenticationManagedOrganizationTypeKey);

  uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v17 managedOrganizationName]);
  if (v91)
  {
    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v17 managedOrganizationName]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v92,  AKAuthenticationManagedOrganizationNameKey);
  }

  v93 = (void *)objc_claimAutoreleasedReturnValue([v17 isNotificationEmailAvailable]);

  if (v93)
  {
    v94 = (void *)objc_claimAutoreleasedReturnValue([v17 isNotificationEmailAvailable]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v94,  AKAuthenticationIsNotificationEmailAvailableKey);
  }

  v95 = (void *)objc_claimAutoreleasedReturnValue([v17 notificationEmail]);

  if (v95)
  {
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v17 notificationEmail]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v96,  AKAuthenticationNotificationEmailKey);
  }

  v97 = (void *)objc_claimAutoreleasedReturnValue([v17 custodianSessionID]);

  if (v97)
  {
    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v17 custodianSessionID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v98,  AKAuthenticationCustodianSessionIDKey);
  }

  uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordResetToken]);
  v100 = objc_claimAutoreleasedReturnValue([v99 stringValue]);

  v175 = (void *)v100;
  if (v100)
  {
    v101 = -[AKClient hasInternalAccess](self->_client, "hasInternalAccess");
    if (v101)
    {
      v102 = _AKLogSystem(v101);
      v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Providing PRK to an internal client.",  buf,  2u);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v100,  AKAuthenticationPasswordResetTokenKey);
    }
  }

  id v104 = (void *)objc_claimAutoreleasedReturnValue([v17 passcodeAuth]);

  if (v104)
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue([v17 passcodeAuth]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v105, AKPasscodeAuthKey);
  }

  uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "hasModernRecoveryKey", v78));

  if (v106)
  {
    char v107 = (void *)objc_claimAutoreleasedReturnValue([v17 hasModernRecoveryKey]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v107, AKHasModernRKKey);
  }

  v170 = v15;
  v108 = (void *)objc_claimAutoreleasedReturnValue([v17 firstName]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v108,  AKAuthenticationFirstNameKey);

  uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue([v17 lastName]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v109,  AKAuthenticationLastNameKey);

  uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v17 imageURLString]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v110,  AKAuthenticationImageURLKey);

  int v111 = (void *)objc_claimAutoreleasedReturnValue([v17 configurationInfo]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v111,  AKAuthenticationConfigurationInfoKey);

  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([v17 additionalInfo]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v112,  AKAuthenticationAdditionalInfoKey);

  v113 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
  id v114 = [v113 isBackgroundiCloudSignInEnabled];

  if (v114)
  {
    uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v17 canBackgroundiCloudSignIn]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v115,  AKAuthenticationBackgroundSignInKey);
  }

  v168 = v21;
  v116 = (void *)objc_claimAutoreleasedReturnValue([v17 adpCohort]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v116,  AKAuthenticationADPCohortKey);

  v117 = (void *)objc_claimAutoreleasedReturnValue([v17 edpState]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v117, AKEDPStateKey);

  v118 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordVersion]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v118, AKPasswordVersionKey);

  id v119 = (void *)objc_claimAutoreleasedReturnValue([v17 srpProtocol]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v119, AKSRPProtocolKey);

  v120 = (void *)objc_claimAutoreleasedReturnValue([v17 srpSalt]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v120, AKSRPSaltKey);

  uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v17 srpIteration]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v121, AKSRPIterationCountKey);

  v122 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordlessToken]);
  v123 = (void *)objc_claimAutoreleasedReturnValue([v122 stringValue]);
  if (v123)
  {
    unsigned int v124 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordlessToken]);
    v125 = (void *)objc_claimAutoreleasedReturnValue([v124 stringValue]);
    v126 = [v125 length] != 0;
  }

  else
  {
    v126 = 0;
  }

  v131 = (void *)objc_claimAutoreleasedReturnValue([v17 idmsDataToken]);
  v132 = (void *)objc_claimAutoreleasedReturnValue([v131 stringValue]);
  if (v132)
  {
    id v133 = (void *)objc_claimAutoreleasedReturnValue([v17 idmsDataToken]);
    id v134 = (void *)objc_claimAutoreleasedReturnValue([v133 stringValue]);
    uint64_t v135 = [v134 length] != 0;
  }

  else
  {
    uint64_t v135 = 0;
  }

  __int128 v137 = _AKLogSystem(v136);
  v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
  id v139 = os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
  if (v126)
  {
    if (v139)
    {
      v140 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordlessToken]);
      v141 = v19;
      v142 = v20;
      if (v140) {
        id v143 = @"YES";
      }
      else {
        id v143 = @"NO";
      }
      __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v17 idmsDataToken]);
      id v145 = @"YES";
      if (!v144) {
        id v145 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      v182 = v143;
      uint64_t v20 = v142;
      id v19 = v141;
      v183 = 2112;
      v184 = v145;
      _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "Providing passwordlessToken: %@ idmsDataToken: %@",  buf,  0x16u);
    }

    v146 = (void *)objc_claimAutoreleasedReturnValue([v17 passwordlessToken]);
    v147 = (void *)objc_claimAutoreleasedReturnValue([v146 stringValue]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v147,  AKPasswordlessTokenKey);

    id v21 = v168;
    if (!v135) {
      goto LABEL_132;
    }
    v138 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 idmsDataToken]);
    v148 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s stringValue](v138, "stringValue"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v148, AKIdmsDataTokenKey);
  }

  else
  {
    if (v139)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "Passwordless token not found on server response",  buf,  2u);
    }

    id v21 = v168;
  }

LABEL_132:
  client = v172->_client;
  v179[0] = _NSConcreteStackBlock;
  v179[1] = 3221225472LL;
  v179[2] = sub_10004A9A4;
  v179[3] = &unk_1001C8648;
  v150 = v21;
  v180 = v150;
  v151 = (void *)objc_claimAutoreleasedReturnValue(-[AKClient proxyWithErrorHandler:](client, "proxyWithErrorHandler:", v179));
  v152 = _AKLogSystem(v151);
  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
  {
    v154 = v172->_client;
    *(_DWORD *)buf = 138412290;
    v182 = (const __CFString *)v154;
    _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "Asking %@ should continue?", buf, 0xCu);
  }

  v155 = [v20 _ignoreShouldContinueProxy];
  if ((_DWORD)v155)
  {
    v156 = _AKLogSystem(v155);
    v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEFAULT,  "Context asked to skip should continue, returning results...",  buf,  2u);
    }

    uint64_t v18 = v169;
    if (v19)
    {
      v158 = 0LL;
      v159 = 0LL;
      v160 = v19;
    }

    else
    {
      v158 = 1LL;
      v159 = v48;
      v160 = 0LL;
    }

    (*((void (**)(id, uint64_t, NSMutableDictionary *, id))v150 + 2))(v150, v158, v159, v160);
  }

  else
  {
    v161 = (void *)objc_claimAutoreleasedReturnValue([v20 _identifier]);
    v176[0] = _NSConcreteStackBlock;
    v176[1] = 3221225472LL;
    v176[2] = sub_10004AA38;
    v176[3] = &unk_1001C8670;
    v177 = v19;
    v178 = v150;
    [v151 shouldContinueWithAuthenticationResults:v48 error:v177 forContextID:v161 completion:v176];

    uint64_t v18 = v169;
  }

  uint64_t v15 = v170;
  uint64_t v16 = v173;
LABEL_143:
}

      swift_bridgeObjectRelease(v16);
      return 0LL;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10004A9A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1001343F0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7061LL,  v3));

  (*(void (**)(uint64_t, void, void, void *))(v6 + 16))(v6, 0LL, 0LL, v7);
}

void sub_10004AA38(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  id v7 = *(void **)(a1 + 32);
  if ((a2 & 1) == 0)
  {
    id v14 = v7;
    if (!v14)
    {
      uint64_t v16 = _AKLogSystem(0LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10013441C();
      }

      id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7034LL));
    }

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_11;
  }

  uint64_t v8 = _AKLogSystem(v5);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v10)
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to auth with IDMS but client says to suppress error and continue.",  v18,  2u);
    }

    uint64_t v11 = AKAppleIDAuthenticationErrorDomain;
    uint64_t v12 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v19 = NSUnderlyingErrorKey;
    uint64_t v20 = v12;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    id v14 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  -7033LL,  v13));

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_11:
    v15();

    goto LABEL_12;
  }

  if (v10)
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Will continue handling successful auth...",  v18,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_12:
}

void sub_10004AD34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _authKitAccountFromContext:*(void *)(a1 + 40)]);
  if (v2
    && (id v3 = [*(id *)(a1 + 32) _shouldSkipAccountUpdatesForAuthWithContext:*(void *)(a1 + 40)],
        !(_DWORD)v3))
  {
    uint64_t v4 = _AKLogSystem(v3);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating AK account...", buf, 2u);
    }

    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v18 = 0LL;
    unsigned int v9 = [v7 _updateAuthKitAccount:v2 withServerResponse:v6 context:v8 error:&v18];
    id v10 = v18;
    uint64_t v11 = v10;
    if (v9)
    {
      uint64_t v12 = _AKLogSystem(v10);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Will check in with IDMS about push registration...",  v17,  2u);
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[AKAppleIDCheckInHelperService sharedService]( &OBJC_CLASS___AKAppleIDCheckInHelperService,  "sharedService"));
      [v14 performCheckInForAccount:v2 event:AKPostDataEventLiveness reason:5 completion:&stru_1001C8690];

      [*(id *)(a1 + 32) _provideServiceTokensIfRequiredForContext:*(void *)(a1 + 40) authenticationResults:*(void *)(a1 + 48) serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
    }

    else
    {
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t v16 = objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7001LL,  v10));
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v15, 0LL, v16);

      uint64_t v11 = (void *)v16;
    }
  }

  else
  {
    [*(id *)(a1 + 32) _provideServiceTokensIfRequiredForContext:*(void *)(a1 + 40) authenticationResults:*(void *)(a1 + 48) serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }
}

void sub_10004AEDC(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _AKLogSystem(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully checked in with IDMS.", v8, 2u);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100134448();
  }
}

void sub_10004B570(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  unsigned int v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001344A8();
    }

    id v10 = *(void **)(a1 + 40);
    id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceTokens]);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = v10;
    id v17 = v11;
    id v18 = v6;
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v21 = 138412290;
      uint64_t v22 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching tokens for service IDs %@ succeeded!",  (uint8_t *)&v21,  0xCu);
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceTokens]);
    id v11 = [v20 mutableCopy];

    [v11 setValuesForKeysWithDictionary:v5];
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    id v17 = v11;
    id v18 = 0LL;
  }

  [v16 _completeAuthenticationWithServiceTokens:v17 tokenFetchError:v18 altDSID:v12 authenticationResults:v13 context:v14 completion:v15];
}

NSString *__cdecl sub_10004B910(id a1, NSString *a2, AKToken *a3)
{
  return (NSString *)-[AKToken stringValue](a3, "stringValue");
}

LABEL_5:
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v16));
    (*((void (**)(id, void, void, void *))v13 + 2))(v13, 0LL, 0LL, v17);
LABEL_6:

    goto LABEL_9;
  }

  uint64_t v22 = [v10 isSecondaryActionURLGSEndpoint];
  uint64_t v23 = (int)v22;
  id v24 = _AKLogSystem(v22);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  id v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if (v23)
  {
    if (v26)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Secondary action is GS endpoint. Returning the response as-is so that handler can perform the action.",  buf,  2u);
    }

    (*((void (**)(id, id, void, void))v13 + 2))(v13, v10, 0LL, 0LL);
  }

  else
  {
    if (v26)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Trying to show server UI for the response.",  buf,  2u);
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v10 secondaryActionURLKey]);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_10004BF00;
    v53[3] = &unk_1001C8720;
    __int16 v54 = v13;
    -[AKAppleIDAuthenticationService _beginServerDrivenSecondaryActionWithURLKey:context:initialAuthResponse:completion:]( self,  "_beginServerDrivenSecondaryActionWithURLKey:context:initialAuthResponse:completion:",  v28,  v11,  v10,  v53);
  }

  uint64_t v7 = 0;
LABEL_8:

  return v7;
}

    goto LABEL_6;
  }

  id v11 = _AKLogSystem(v7);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(*v2 + 16LL);
    id v24 = 138412290;
    uint64_t v25 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "No APS public token at the moment for connection %@. Waiting for a new one...",  (uint8_t *)&v24,  0xCu);
  }

  uint64_t v14 = *(dispatch_semaphore_s **)(*v2 + 32LL);
  uint64_t v15 = dispatch_time(0LL, (uint64_t)(AKTimeout * 1000000000.0));
  uint64_t v16 = dispatch_semaphore_wait(v14, v15);
  id v17 = _AKLogSystem(v16);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v24) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Wait for APS public token is over!",  (uint8_t *)&v24,  2u);
  }

  uint64_t v19 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) publicToken]);
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;

  uint64_t v22 = -[AKPushTokenKeychainWrapper updateToken:]( v6,  "updateToken:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    uint64_t v23 = _AKLogSystem(v22);
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013F3A0();
    }
    goto LABEL_5;
  }

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    int v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *int v21 = v23 & v22;
  id v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

      swift_bridgeObjectRelease(v8);
      swift_release(v8);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      id v2 = v44;
      uint64_t v1 = v45;
      id v5 = v47;
      id v3 = v48;
LABEL_6:
      ++v3;

      if (v3 == v2)
      {
        swift_bridgeObjectRelease(v1);
        return (unint64_t)v4;
      }
    }

    while (1)
    {
      uint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v16 = v15 | (v13 << 6);
LABEL_34:
      uint64_t v20 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      int v21 = v20[1];
      uint64_t v23 = *(void **)(*(void *)(v8 + 56) + 8 * v16);
      swift_bridgeObjectRetain(v21);
      id v24 = v23;
      id v26 = sub_1000F9BB8(v22, v21);
      id v27 = v4[2];
      uint64_t v28 = (v25 & 1) == 0;
      id v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        break;
      }
      uint64_t v1 = v25;
      if (v4[3] >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v4 = v51;
          if ((v25 & 1) == 0) {
            goto LABEL_41;
          }
        }

        else
        {
          sub_1000F16F0();
          uint64_t v4 = v51;
          if ((v1 & 1) == 0) {
            goto LABEL_41;
          }
        }

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Class result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void sub_10004BF00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  if (![v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_5;
  }

  id v10 = [v8 code];

  if (v10 != (id)-7038LL)
  {
LABEL_5:
    id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_6;
  }

  id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_6:
  v11();
}

uint64_t sub_10004BFD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004C1F8(uint64_t a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (v11 || (a2 & 1) == 0)
  {
    if (!v11)
    {
      id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7036LL));
      id v12 = v11;
    }

    if (*(_BYTE *)(a1 + 72))
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      uint64_t v13 = _AKLogSystem(v11);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_100134654();
      }

      uint64_t v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_10004C384;
      v17[3] = &unk_1001C8770;
      void v17[4] = v15;
      id v18 = *(id *)(a1 + 48);
      char v22 = *(_BYTE *)(a1 + 72);
      id v19 = *(id *)(a1 + 56);
      id v20 = *(id *)(a1 + 40);
      id v21 = *(id *)(a1 + 64);
      [v15 _showAlertForLoginCodeValidationError:v12 context:v16 completion:v17];
    }
  }

  else
  {
    [*(id *)(a1 + 32) _processValidationCodeSuccessResponse:v10 authResponse:*(void *)(a1 + 56) results:v9 completion:*(void *)(a1 + 64)];
  }
}

id sub_10004C384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleSecondFactorUICompletionWithCode:a2 error:a3 idmsData:*(void *)(a1 + 40) piggybacking:*(unsigned __int8 *)(a1 + 72) initialAuthResponse:*(void *)(a1 + 48) context:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10004C5A4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
  id v6 = (id)objc_claimAutoreleasedReturnValue( [v5 localizedStringForKey:@"CODE_INVALID_TITLE" value:&stru_1001D1450 table:@"Localizable"]);

  [*(id *)(a1[4] + 48) presentSecondFactorAlertForContext:a1[5] client:*(void *)(a1[4] + 8) withError:a1[6] title:v6 message:v4 completion:a1[7]];
}

void sub_10004C6F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v24 = AKAuthenticationDidPerformInteractiveAuth;
    uint64_t v25 = &__kCFBooleanTrue;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v9);

LABEL_15:
    goto LABEL_16;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (![v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_7;
  }

  id v11 = [v6 code];

  if (v11 != (id)-7065LL)
  {
LABEL_7:
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _srpAuthContextHelperWithContext:*(void *)(a1 + 32)]);
    [v8 setAuthKitAccount:v5];
    id v13 = objc_msgSend( v8,  "setPasscodeAuthEnabled:",  objc_msgSend(*(id *)(a1 + 32), "isContextEligibleForPasscodeAuth"));
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14 == 1)
    {
      [v8 setBiometricAuth:1];
    }

    else if (v14 == 2)
    {
      [v8 setPasscodeAuth:1];
    }

    else
    {
      uint64_t v15 = _AKLogSystem(v13);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1001346B4((uint64_t *)(a1 + 56), v16);
      }
    }

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10004C96C;
    v20[3] = &unk_1001C87C0;
    id v17 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 48);
    id v18 = *(void **)(a1 + 32);
    void v20[4] = *(void *)(a1 + 40);
    id v21 = v12;
    id v22 = v18;
    id v19 = v12;
    [v17 _performSRPAuthenticationWithContext:v8 completion:v20];

    goto LABEL_15;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_16:
}

void sub_10004C96C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = _AKLogSystem(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10013412C();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:*(void *)(a1 + 40) password:0 serverResponse:a2 didShowServerUI:0 continuationData:0 error:0 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

id sub_10004CC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleGrandslamResponse:a3 data:a2 error:a4 serverResponse:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10004D208(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  id v10 = a3;
  id v11 = a2;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v8, v9);
  uint64_t v13 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v15 = v14;
  os_signpost_id_t v16 = a1[5];
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    int v23 = 67240192;
    LODWORD(v24) = [v7 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_INTERVAL_END,  v16,  "ServerDrivenSecondaryAction",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v23,  8u);
  }

  uint64_t v18 = _AKSignpostLogSystem(v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    double v20 = (double)Nanoseconds / 1000000000.0;
    uint64_t v21 = a1[5];
    unsigned int v22 = [v7 code];
    int v23 = 134218496;
    uint64_t v24 = v21;
    __int16 v25 = 2048;
    double v26 = v20;
    __int16 v27 = 1026;
    unsigned int v28 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:ServerDrivenSecondaryAction  Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v23,  0x1Cu);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

void sub_10004D6C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10004D6E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412546;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Retrieved recovery data for server. Server Response: %@ and recoveryData: %@",  (uint8_t *)&v14,  0x16u);
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0LL;

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004DAA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100134928(a1, (uint64_t)v6, v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifiers]);
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching tokens for service IDs %@ succeeded.",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(a1 + 40) _completeAuthenticationWithServiceTokens:v5 tokenFetchError:0 altDSID:*(void *)(a1 + 48) authenticationResults:0 context:*(void *)(a1 + 32) completion:*(void *)(a1 + 56)];
  }
}

void sub_10004E0F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_10004E38C;
    v25[3] = &unk_1001C8888;
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 64);
    v25[4] = *(void *)(a1 + 40);
    uint64_t v30 = v8;
    id v26 = v5;
    id v27 = *(id *)(a1 + 48);
    id v28 = *(id *)(a1 + 32);
    id v29 = *(id *)(a1 + 56);
    __int128 v31 = *(_OWORD *)(a1 + 72);
    [v7 authenticationParametersWithCompletion:v25];
  }

  else
  {
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 72), *(void *)(a1 + 80));
    uint64_t v10 = _AKSignpostLogSystem(Nanoseconds);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = v11;
    os_signpost_id_t v13 = *(void *)(a1 + 72);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v33) = [v6 code];
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v13,  "FetchGrandslamTokens",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v15 = _AKSignpostLogSystem(v14);
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = (double)Nanoseconds / 1000000000.0;
      uint64_t v18 = *(void *)(a1 + 72);
      unsigned int v19 = [v6 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v33 = v18;
      __int16 v34 = 2048;
      double v35 = v17;
      __int16 v36 = 1026;
      unsigned int v37 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
    }

    CFRelease(*(CFTypeRef *)(a1 + 64));
    uint64_t v21 = _AKLogSystem(v20);
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_100134A7C();
    }

    uint64_t v23 = *(void *)(a1 + 56);
    if (v23)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7005LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0LL, v24);
    }
  }
}

void sub_10004E38C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  uint64_t v5 = a1[5];
  id v6 = *(void **)(a1[4] + 16LL);
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[6];
  id v73 = a3;
  id v9 = a3;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [v6 appleIDAuthSupportCopyAppTokensWithMasterToken:v7 authURL:v5 serviceIds:v8 authParams:a2 error:&v73]);
  id v11 = v73;

  CFRelease((CFTypeRef)v4[9]);
  if (!v11)
  {
    unsigned int v68 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [(id)v4[6] count]);
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    id v35 = (id)v4[6];
    id v36 = [v35 countByEnumeratingWithState:&v69 objects:v74 count:16];
    if (v36)
    {
      id v37 = v36;
      uint64_t v67 = v4;
      char v38 = 0;
      uint64_t v39 = *(void *)v70;
      do
      {
        for (i = 0LL; i != v37; i = (char *)i + 1)
        {
          if (*(void *)v70 != v39) {
            objc_enumerationMutation(v35);
          }
          uint64_t v41 = *(void *)(*((void *)&v69 + 1) + 8LL * (void)i);
          id v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v41, v67));
          if (v42)
          {
            id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AKToken tokenWithDictionary:](&OBJC_CLASS___AKToken, "tokenWithDictionary:", v42));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v68, "setObject:forKeyedSubscript:", v43, v41);
            char v38 = 1;
          }

          else
          {
            uint64_t v44 = _AKLogSystem(0LL);
            id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v76 = v41;
              _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Unable to find info for token with ID: %@",  buf,  0xCu);
            }
          }
        }

        id v37 = [v35 countByEnumeratingWithState:&v69 objects:v74 count:16];
      }

      while (v37);

      id v4 = v67;
      id v11 = 0LL;
      if ((v38 & 1) != 0)
      {
        unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v67[10], v67[11]);
        uint64_t v46 = _AKSignpostLogSystem(Nanoseconds);
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        uint64_t v48 = v47;
        os_signpost_id_t v49 = v67[10];
        if (v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v48,  OS_SIGNPOST_INTERVAL_END,  v49,  "FetchGrandslamTokens",  "",  buf,  2u);
        }

        uint64_t v51 = _AKSignpostLogSystem(v50);
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = v67[10];
          *(_DWORD *)buf = 134218240;
          uint64_t v76 = v53;
          __int16 v77 = 2048;
          double v78 = (double)Nanoseconds / 1000000000.0;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchGrandslamTokens ",  buf,  0x16u);
        }

        uint64_t v54 = v67[8];
        if (v54) {
          (*(void (**)(uint64_t, NSMutableDictionary *, void))(v54 + 16))(v54, v68, 0LL);
        }
        goto LABEL_41;
      }
    }

    else
    {
    }

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7007LL));
    unint64_t v55 = _AKSignpostGetNanoseconds(v4[10], v4[11]);
    uint64_t v56 = _AKSignpostLogSystem(v55);
    id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    unsigned int v58 = v57;
    os_signpost_id_t v59 = v4[10];
    if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
    {
      unsigned int v60 = [v33 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v76) = v60;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v58,  OS_SIGNPOST_INTERVAL_END,  v59,  "FetchGrandslamTokens",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v62 = _AKSignpostLogSystem(v61);
    NSErrorUserInfoKey v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v64 = v4[10];
      unsigned int v65 = [v33 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v76 = v64;
      __int16 v77 = 2048;
      double v78 = (double)v55 / 1000000000.0;
      __int16 v79 = 1026;
      unsigned int v80 = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
    }

    uint64_t v66 = v4[8];
    if (v66) {
      (*(void (**)(uint64_t, void, void *))(v66 + 16))(v66, 0LL, v33);
    }
    goto LABEL_40;
  }

  uint64_t v13 = _AKLogSystem(v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_100134ADC();
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11 userInfo]);
  __int16 v16 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:kAppleIDAuthSupportStatus]);

  unsigned int v68 = v16;
  double v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", @"ec"));
  id v18 = [v17 integerValue];

  if (v18 == (id)-22411LL)
  {
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([(id)v4[7] authKitAccount]);
    [v19 removeMasterTokenForAccount:v20];
  }

  if (v4[8])
  {
    unint64_t v21 = _AKSignpostGetNanoseconds(v4[10], v4[11]);
    uint64_t v22 = _AKSignpostLogSystem(v21);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    uint64_t v24 = v23;
    os_signpost_id_t v25 = v4[10];
    if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
    {
      unsigned int v26 = [v11 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v76) = v26;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  OS_SIGNPOST_INTERVAL_END,  v25,  "FetchGrandslamTokens",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v28 = _AKSignpostLogSystem(v27);
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = v4[10];
      unsigned int v31 = [v11 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v76 = v30;
      __int16 v77 = 2048;
      double v78 = (double)v21 / 1000000000.0;
      __int16 v79 = 1026;
      unsigned int v80 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
    }

    uint64_t v32 = v4[8];
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ac_secureCodingError"));
    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7007LL,  v33));
    (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0LL, v34);

LABEL_40:
  }

LABEL_41:
}

  __break(1u);
  return result;
}

void sub_10004EFE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v11 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = v12;
  os_signpost_id_t v14 = *(void *)(a1 + 56);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v46) = [v9 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_INTERVAL_END,  v14,  "iForgot",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
  }

  uint64_t v16 = _AKSignpostLogSystem(v15);
  double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    double v18 = (double)Nanoseconds / 1000000000.0;
    uint64_t v19 = *(void *)(a1 + 56);
    unsigned int v20 = [v9 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v46 = v19;
    __int16 v47 = 2048;
    double v48 = v18;
    __int16 v49 = 1026;
    unsigned int v50 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:iForgot  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
  }

  unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AAFAnalyticsEvent ak_analyticsEventWithContext:client:eventName:error:]( &OBJC_CLASS___AAFAnalyticsEvent,  "ak_analyticsEventWithContext:client:eventName:error:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL),  @"com.apple.authkit.accountRecoveryFinish",  v9));
  if (!v9)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationUsernameKey]);
    if (!v22) {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
    }
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationPasswordKey]);
    if ([v22 length])
    {
      id v24 = [v23 length];
      if (v24)
      {
        uint64_t v25 = _AKLogSystem(v24);
        unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v27)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "iForgot succeeded, and we have a new auth server response!",  buf,  2u);
          }

          [*(id *)(a1 + 40) _sendAnalyticsEvent:v21 withError:0];
          uint64_t v28 = *(void **)(a1 + 32);
          id v29 = *(void **)(a1 + 40);
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3221225472LL;
          v42[2] = sub_10004F464;
          v42[3] = &unk_1001C7FE0;
          v42[4] = v29;
          id v43 = v28;
          id v44 = *(id *)(a1 + 48);
          [v29 _handleVerificationCompletionForUsername:v22 password:v23 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:v43 completion:v42];

          uint64_t v30 = v43;
        }

        else
        {
          if (v27)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "iForgot succeeded, but we do not have a new auth server response. Doing SRP auth...",  buf,  2u);
          }

          [*(id *)(a1 + 40) _sendAnalyticsEvent:v21 withError:0];
          id v37 = *(void **)(a1 + 32);
          char v38 = *(void **)(a1 + 40);
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472LL;
          v39[2] = sub_10004F4C8;
          v39[3] = &unk_1001C7FE0;
          v39[4] = v38;
          id v40 = v37;
          id v41 = *(id *)(a1 + 48);
          [v38 _verifyUsername:v22 password:v23 context:v40 completion:v39];

          uint64_t v30 = v40;
        }

        goto LABEL_27;
      }

      uint64_t v34 = _AKLogSystem(0LL);
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_100134BEC();
      }

      uint64_t v33 = -7012LL;
    }

    else
    {
      uint64_t v31 = _AKLogSystem(0LL);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_100134BC0();
      }

      uint64_t v33 = -7022LL;
    }

    id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v33));
    [*(id *)(a1 + 40) _handleRecoverCredentialsError:v36 withContext:*(void *)(a1 + 32) event:v21 andCompletion:*(void *)(a1 + 48)];

LABEL_27:
    goto LABEL_28;
  }

  [*(id *)(a1 + 40) _handleRecoverCredentialsError:v9 withContext:*(void *)(a1 + 32) event:v21 andCompletion:*(void *)(a1 + 48)];
LABEL_28:
}

void sub_10004F464(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _initiateEDPRepairForAuthenticationContext:*(void *)(a1 + 40) authResults:v7];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10004F4C8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _initiateEDPRepairForAuthenticationContext:*(void *)(a1 + 40) authResults:v7];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10004F8B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  if (![v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_5;
  }

  id v10 = [v8 code];

  if (v10 != (id)-7038LL)
  {
LABEL_5:
    uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_6;
  }

  uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_6:
  v11();
}

void sub_10004FD84(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
  if ([v10 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v11 = [v9 code];

    if (v11 == (id)-7038LL)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      goto LABEL_12;
    }
  }

  else
  {
  }

  uint64_t v13 = _AKLogSystem(v12);
  os_signpost_id_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v15 = v14;
  if (v7)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Repair flow succeeded, and we have a new auth server response!",  buf,  2u);
    }

    uint64_t v16 = *(void **)(a1 + 32);
    double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) username]);
    [v16 _handleVerificationCompletionForUsername:v17 password:0 serverResponse:v7 didShowServerUI:1 continuationData:0 error:v9 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }

  else
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100134D5C();
    }

    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v19);
  }

void sub_100050104(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v11 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = v12;
  os_signpost_id_t v14 = *(void *)(a1 + 56);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v35) = (_DWORD)v9;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_INTERVAL_END,  v14,  "CreateNewAppleID",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
  }

  uint64_t v16 = _AKSignpostLogSystem(v15);
  double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    uint64_t v35 = *(void *)(a1 + 56);
    __int16 v36 = 2048;
    double v37 = (double)Nanoseconds / 1000000000.0;
    __int16 v38 = 1026;
    int v39 = (int)v9;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:CreateNewAppleID  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
  }

  if (!v9)
  {
    unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationUsernameKey]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationPasswordKey]);
    if ([v21 length])
    {
      id v23 = [v22 length];
      if (v23)
      {
        uint64_t v24 = _AKLogSystem(v23);
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        unsigned int v26 = v25;
        if (v7)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "New Apple ID creation succeeded, and we have a new auth server response!",  buf,  2u);
          }

          [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:v21 password:v22 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
          goto LABEL_28;
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_100134DE0();
        }

        id v29 = *(void **)(a1 + 32);
        uint64_t v30 = -7010LL;
      }

      else
      {
        uint64_t v31 = _AKLogSystem(0LL);
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_100134DB4();
        }

        id v29 = *(void **)(a1 + 32);
        uint64_t v30 = -7012LL;
      }
    }

    else
    {
      uint64_t v27 = _AKLogSystem(0LL);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100134D88();
      }

      id v29 = *(void **)(a1 + 32);
      uint64_t v30 = -7022LL;
    }

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v30));
    [v29 _handleCreateNewAppleIDError:v33 withContext:*(void *)(a1 + 40) andCompletion:*(void *)(a1 + 48)];

LABEL_28:
    goto LABEL_29;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
  if ([v18 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v19 = [v9 code];

    if (v19 == (id)-7038LL)
    {
      uint64_t v20 = *(void *)(a1 + 48);
      unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7043LL));
      (*(void (**)(uint64_t, id, void *))(v20 + 16))(v20, v8, v21);
LABEL_29:

      goto LABEL_30;
    }
  }

  else
  {
  }

  [*(id *)(a1 + 32) _handleCreateNewAppleIDError:v9 withContext:*(void *)(a1 + 40) andCompletion:*(void *)(a1 + 48)];
LABEL_30:
}

void sub_100050890(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v9)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationUsernameKey]);
    os_signpost_id_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKAuthenticationPasswordKey]);
    if ([v13 length])
    {
      id v15 = [v14 length];
      if (v15)
      {
        uint64_t v16 = _AKLogSystem(v15);
        double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Change password flow succeeded, and we have a new auth server response!",  buf,  2u);
          }

          [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:v13 password:v14 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
        }

        else
        {
          if (v18)
          {
            *(_WORD *)unsigned int v26 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Change password flow succeeded, but we do not have a new auth server response. Doing SRP auth...",  v26,  2u);
          }

          [*(id *)(a1 + 32) _verifyUsername:v13 password:v14 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
        }

        goto LABEL_18;
      }

      uint64_t v23 = _AKLogSystem(0LL);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100134F1C();
      }

      uint64_t v21 = *(void *)(a1 + 48);
      uint64_t v22 = -7012LL;
    }

    else
    {
      uint64_t v19 = _AKLogSystem(0LL);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100134EF0();
      }

      uint64_t v21 = *(void *)(a1 + 48);
      uint64_t v22 = -7022LL;
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v22));
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v25);

LABEL_18:
    goto LABEL_19;
  }

  uint64_t v11 = _AKLogSystem(v9);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_100134F48();
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_19:
}

void sub_100050CF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013502C();
    }
  }

  [*(id *)(a1 + 32) setNeedsPasswordChange:1];
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableURLRequest requestWithURL:]( &OBJC_CLASS___NSMutableURLRequest,  "requestWithURL:",  *(void *)(a1 + 40)));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[AKDServerUIContext serverUIContextFromResponse:authContext:urlRequest:]( &OBJC_CLASS___AKDServerUIContext,  "serverUIContextFromResponse:authContext:urlRequest:",  0LL,  v8,  v9));

  uint64_t v11 = -[AKDServerUIController initWithLiaison:client:delegate:]( objc_alloc(&OBJC_CLASS___AKDServerUIController),  "initWithLiaison:client:delegate:",  *(void *)(*(void *)(a1 + 48) + 48LL),  *(void *)(*(void *)(a1 + 48) + 8LL));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100050E28;
  v12[3] = &unk_1001C8720;
  id v13 = *(id *)(a1 + 56);
  -[AKDServerUIController showServerUIWithContext:completion:](v11, "showServerUIWithContext:completion:", v10, v12);
}

void sub_100050E28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  if (![v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_5;
  }

  id v10 = [v8 code];

  if (v10 != (id)-7038LL)
  {
LABEL_5:
    uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_6;
  }

  uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_6:
  v11();
}

void sub_10005114C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Piggybacking finished with error: %@",  (uint8_t *)&v9,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000512D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000514C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 48LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) initiatingContext]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000515B0;
    v9[3] = &unk_1001C84B8;
    id v12 = *(id *)(a1 + 48);
    id v10 = v5;
    id v11 = 0LL;
    [v6 dismissSecondFactorUIForContext:v7 client:v8 completion:v9];
  }
}

void sub_1000515B0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10013508C();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100051758(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 && a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) initiatingContext]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) initialAuthResponse]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100051850;
    v9[3] = &unk_1001C89A0;
    id v11 = *(id *)(a1 + 48);
    id v10 = v5;
    [v6 _handleSuccessfulVerificationForContext:v7 withResults:v10 serverResponse:v8 completion:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_100051850(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000519CC(id *a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001350EC();
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] initiatingContext]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 username]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] initiatingPassword]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] initialAuthResponse]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] initiatingContext]);
  [v13 setServiceType:7];

  os_signpost_id_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag bagForAltDSID:](&OBJC_CLASS___AKURLBag, "bagForAltDSID:", v14));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 escapeHatchURL]);

  if (v16)
  {
    double v17 = -[NSMutableURLRequest initWithURL:](objc_alloc(&OBJC_CLASS___NSMutableURLRequest), "initWithURL:", v16);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100051BFC;
    v21[3] = &unk_1001C89F0;
    id v18 = a1[5];
    id v26 = a1[6];
    id v19 = v9;
    id v20 = a1[5];
    id v22 = v19;
    id v23 = v20;
    id v24 = v10;
    id v25 = v11;
    [v18 _showServerUIWithURLRequest:v17 context:v19 initialAuthResponse:v12 completion:v21];
  }

  else
  {
    double v17 = (NSMutableURLRequest *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7005LL));
    else {
      (*((void (**)(void))a1[6] + 2))();
    }
  }
}

void sub_100051BFC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = objc_msgSend(v7, "ak_isUserSkippedError");
  if ((v8 & 1) != 0 || (id v8 = objc_msgSend(v7, "ak_isUserTryAgainError"), (_DWORD)v8))
  {
    uint64_t v9 = _AKLogSystem(v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10013514C();
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    goto LABEL_15;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  if ([v11 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    unsigned int v12 = [*(id *)(a1 + 32) _keepAlive];

    if (v12)
    {
      uint64_t v14 = _AKLogSystem(v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_10013514C();
      }

      [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v7 andCompletion:*(void *)(a1 + 64)];
      goto LABEL_15;
    }
  }

  else
  {
  }

  uint64_t v16 = _AKLogSystem(v13);
  double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Piggybacking escape hatch server UI finished, with error: %@",  buf,  0xCu);
  }

  [*(id *)(a1 + 40) _handleVerificationCompletionForUsername:*(void *)(a1 + 48) password:*(void *)(a1 + 56) serverResponse:v6 didShowServerUI:1 continuationData:0 error:v7 context:*(void *)(a1 + 32) completion:*(void *)(a1 + 64)];
LABEL_15:
}

LABEL_6:
}
}

          id v11 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }

      id v15 = v13 + 4;
      if (v15 < v8)
      {
        uint64_t v14 = *(void *)(v4 + 8 * v15);
        if (v14)
        {
          id v2 = v15;
          goto LABEL_22;
        }

        while (1)
        {
          id v2 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_30;
          }
          if (v2 >= v8) {
            break;
          }
          uint64_t v14 = *(void *)(v4 + 8 * v2);
          ++v15;
          if (v14) {
            goto LABEL_22;
          }
        }
      }
    }

void sub_10005236C(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cleared to begin device list fetch with context %@!",  buf,  0xCu);
  }

  id v5 = objc_alloc(&OBJC_CLASS___AKDeviceListRequester);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AKDeviceListStoreManager sharedManager](&OBJC_CLASS___AKDeviceListStoreManager, "sharedManager"));
  id v7 = objc_opt_new(&OBJC_CLASS___AKCDPFactory);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  uint64_t v9 = -[AKDeviceListRequester initWithStoreManager:cdpFactory:accountManager:client:]( v5,  "initWithStoreManager:cdpFactory:accountManager:client:",  v6,  v7,  v8,  *(void *)(*(void *)(a1 + 40) + 8LL));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100052510;
  v12[3] = &unk_1001C8008;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v11.i64[0];
  int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
  id v14 = *(id *)(a1 + 48);
  -[AKDeviceListRequester fetchDeviceListWithContext:completionHandler:]( v9,  "fetchDeviceListWithContext:completionHandler:",  v10,  v12);
}

void sub_100052510(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_1001351D8();
  }

  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  int8x16_t v11 = *(void **)(v9 + 40);
  uint64_t v12 = *(void *)(v9 + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100052628;
  v16[3] = &unk_1001C8108;
  id v17 = v10;
  id v13 = *(id *)(a1 + 48);
  id v19 = v6;
  id v20 = v13;
  id v18 = v5;
  id v14 = v6;
  id v15 = v5;
  [v11 endAuthenticatedRequestWithContext:v17 client:v12 clearanceHandler:v16];
}

uint64_t sub_100052628(void *a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cleared to end device list fetch with context %@.",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[5], a1[6]);
  }
  return result;
}

void sub_100052874(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412803;
    uint64_t v11 = v9;
    __int16 v12 = 1024;
    int v13 = a2;
    __int16 v14 = 2113;
    id v15 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Delete device list cache completed for context - %@ with status - %d and error - %{private}@.",  (uint8_t *)&v10,  0x1Cu);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);
  }
}

void sub_100052A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v6) {
      sub_1001352A4();
    }

    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }

  else
  {
    if (v6) {
      sub_100135278();
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }
}

void sub_100053630( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100053644(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_100053650(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

  ;
}

  ;
}

void sub_10005428C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1000542C8(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  id v8 = a2;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v6, v7);
  uint64_t v10 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  __int16 v12 = v11;
  os_signpost_id_t v13 = a1[5];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    int v20 = 67240192;
    LODWORD(v21) = [v5 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v13,  "PiggybackingRequestingInitiateSession",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v20,  8u);
  }

  uint64_t v15 = _AKSignpostLogSystem(v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    double v17 = (double)Nanoseconds / 1000000000.0;
    uint64_t v18 = a1[5];
    unsigned int v19 = [v5 code];
    int v20 = 134218496;
    uint64_t v21 = v18;
    __int16 v22 = 2048;
    double v23 = v17;
    __int16 v24 = 1026;
    unsigned int v25 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggybackingRequestingInitiateSession  Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v20,  0x1Cu);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

uint64_t sub_10005446C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005447C(uint64_t a1)
{
}

void sub_100054484(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000544F8;
  v3[3] = &unk_1001C7300;
  id v4 = *(id *)(a1 + 48);
  [v1 _promptForSecretWithContext:v2 completion:v3];
}

id sub_1000544F8(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Handshake code prompt finished", v5, 2u);
  }

  [*(id *)(a1 + 32) lock];
  [*(id *)(a1 + 32) signal];
  return [*(id *)(a1 + 32) unlock];
}

uint64_t sub_100054578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100054584(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = _AKLogSystem(v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v10) {
      goto LABEL_7;
    }
    *(_DWORD *)double v23 = 138412290;
    *(void *)&v23[4] = v7;
    uint64_t v11 = "Handshake request failed with error: %@";
    __int16 v12 = v9;
    uint32_t v13 = 12;
  }

  else
  {
    if (!v10) {
      goto LABEL_7;
    }
    *(_WORD *)double v23 = 0;
    uint64_t v11 = "Handshake request finished";
    __int16 v12 = v9;
    uint32_t v13 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, v23, v13);
LABEL_7:

  if (v6) {
    [*(id *)(a1 + 32) _startProximityControllerIfNeededWithPushPayload:v6];
  }
  id v14 = objc_msgSend(v7, "ak_isAuthenticationErrorWithCode:", -7064, *(_OWORD *)v23);
  int v15 = (int)v14;
  if (v14 & 1) != 0 || (id v14 = [v6 isURLResponse], (v14))
  {
    uint64_t v16 = _AKLogSystem(v14);
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if (v15) {
        uint64_t v18 = @"YES";
      }
      else {
        uint64_t v18 = @"NO";
      }
      unsigned int v19 = [v6 isURLResponse];
      *(_DWORD *)double v23 = 138412802;
      if (v19) {
        int v20 = @"YES";
      }
      else {
        int v20 = @"NO";
      }
      *(void *)&v23[4] = v18;
      *(_WORD *)&v23[12] = 2112;
      *(void *)&v23[14] = v20;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Handshake request not being marked as completed (isCancellation: %@, isURLResponse: %@) with reply: %@",  v23,  0x20u);
    }
  }

  else
  {
    uint64_t v21 = _AKLogSystem(v14);
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v23 = 138412290;
      *(void *)&v23[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Marking handshake request as completed with reply: %@",  v23,  0xCu);
    }

    [*(id *)(a1 + 40) lock];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
    [*(id *)(a1 + 40) signal];
    [*(id *)(a1 + 40) unlock];
  }
}

id sub_1000547E4(uint64_t a1)
{
  *(void *)&__int128 v2 = 138413058LL;
  __int128 v22 = v2;
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL))
    {
      if (*(void *)(v3 + 88)) {
        break;
      }
    }

    unsigned __int8 v4 = objc_msgSend(*(id *)(v3 + 104), "ak_isUserTryAgainError", v22);
    uint64_t v3 = *(void *)(a1 + 40);
    if ((v4 & 1) != 0) {
      break;
    }
    id v5 = *(id *)(v3 + 104);
    if (v5)
    {
      id v5 = objc_msgSend(v5, "ak_isUserTryAgainError");
      uint64_t v3 = *(void *)(a1 + 40);
      if (!(_DWORD)v5) {
        break;
      }
    }

    if (*(void *)(v3 + 112)) {
      break;
    }
    uint64_t v6 = _AKLogSystem(v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void **)(a1 + 40);
      uint64_t v9 = v8[11];
      int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
      uint64_t v11 = v8[13];
      LODWORD(v_Block_object_dispose((const void *)(v55 - 176), 8) = v8[14] != 0LL;
      *(_DWORD *)buf = v22;
      uint64_t v24 = v9;
      __int16 v25 = 2112;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v10;
      __int16 v29 = 1024;
      int v30 = (int)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Waiting for handshake condition with state: %@ - %@ - %d - %d",  buf,  0x22u);
    }

    uint64_t v12 = _AKLogSystem([*(id *)(a1 + 32) wait]);
    uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(a1 + 40);
      uint64_t v15 = v14[11];
      int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
      uint64_t v17 = v14[13];
      LODWORD(v14) = v14[14] != 0LL;
      *(_DWORD *)buf = v22;
      uint64_t v24 = v15;
      __int16 v25 = 2112;
      uint64_t v26 = v17;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = (int)v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Finished waiting for handshake condition with state: %@ - %@ - %d - %d",  buf,  0x22u);
    }

    if (*(void *)(*(void *)(a1 + 40) + 88LL) && !*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL))
    {
      uint64_t v19 = _AKLogSystem(v18);
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Code entered, but no handshake has been completed",  buf,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }

  if ((objc_msgSend(*(id *)(v3 + 104), "ak_isUserTryAgainError", v22) & 1) != 0
    || objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "ak_isUserCancelError"))
  {
    [*(id *)(a1 + 48) cancel];
  }

  [*(id *)(a1 + 40) _processHandshakeWithContext:*(void *)(a1 + 56) handshakeReply:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) andHandshakeError:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) withCompletion:*(void *)(a1 + 72)];
  return [*(id *)(a1 + 32) unlock];
}

id sub_100054E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processHandshakeWithContext:*(void *)(a1 + 40) handshakeReply:0 andHandshakeError:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
}

void sub_100054E84(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = @"NO";
    if (a2) {
      uint64_t v8 = @"YES";
    }
    int v9 = 138412546;
    int v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Piggybacking completion with final process response: %@ - %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 32) _processHandshakeWithContext:*(void *)(a1 + 40) handshakeReply:*(void *)(a1 + 48) andHandshakeError:v5 withCompletion:*(void *)(a1 + 56)];
}

void sub_100055348(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(a1[5], a1[6]);
  uint64_t v6 = _AKSignpostLogSystem(Nanoseconds);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  os_signpost_id_t v9 = a1[5];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    int v16 = 67240192;
    LODWORD(v17) = [v4 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_END,  v9,  "PiggybackingRequestingProcessPushPayload",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v16,  8u);
  }

  uint64_t v11 = _AKSignpostLogSystem(v10);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    double v13 = (double)Nanoseconds / 1000000000.0;
    uint64_t v14 = a1[5];
    unsigned int v15 = [v4 code];
    int v16 = 134218496;
    uint64_t v17 = v14;
    __int16 v18 = 2048;
    double v19 = v13;
    __int16 v20 = 1026;
    unsigned int v21 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggybackingRequestingProcessPushPayload  Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v16,  0x1Cu);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

id sub_1000554D8(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 32);
  if (v2[11])
  {
    uint64_t v3 = _AKLogSystem(a1);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User entered a new code after verificaiton failure",  buf,  2u);
    }

    if ([*(id *)(a1 + 40) code] == (id)-7036) {
      return [*(id *)(a1 + 32) _deliverPushPayload:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    }
  }

  else
  {
    if (v2[14])
    {
      uint64_t v6 = _AKLogSystem(a1);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v16 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "User succesfully escaped after verification failure",  v16,  2u);
      }

      uint64_t v8 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
      return (id)v8();
    }

    uint64_t v9 = v2[13];
    uint64_t v10 = _AKLogSystem(a1);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v12)
      {
        *(_WORD *)unsigned int v15 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "User escaped with erro after verification failure",  v15,  2u);
      }

      uint64_t v13 = *(void *)(a1 + 56);
      goto LABEL_18;
    }

    if (v12)
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "We failed to handle verification, passing through the failure",  v14,  2u);
    }
  }

  uint64_t v13 = *(void *)(a1 + 56);
LABEL_18:
  uint64_t v8 = *(uint64_t (**)(void))(v13 + 16);
  return (id)v8();
}

LABEL_40:
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_100056020(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(a1[5], a1[6]);
  uint64_t v7 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[5];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    int v18 = 67240192;
    LODWORD(v19) = [v5 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "PiggybackingRequestingReplyWithContext",  " Error=%{public,signpost.telemetry:number1,name=Error}d ",  (uint8_t *)&v18,  8u);
  }

  uint64_t v12 = _AKSignpostLogSystem(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    double v14 = (double)Nanoseconds / 1000000000.0;
    uint64_t v15 = a1[5];
    unsigned int v16 = [v5 code];
    int v18 = 134218496;
    uint64_t v19 = v15;
    __int16 v20 = 2048;
    double v21 = v14;
    __int16 v22 = 1026;
    unsigned int v23 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggybackingRequestingReplyWithContext  Error=%{public,signpost.telemetry:number1,name=Error}d ",  (uint8_t *)&v18,  0x1Cu);
  }

  uint64_t v17 = a1[4];
  if (v17) {
    (*(void (**)(uint64_t, uint64_t, id))(v17 + 16))(v17, a2, v5);
  }
}

void sub_1000561B4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (v9)
  {
    [*(id *)(a1 + 32) processPushPayload:v9 completion:*(void *)(a1 + 40)];
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = 0LL;
      id v8 = v5;
    }

    else
    {
      uint64_t v7 = 1LL;
      id v8 = 0LL;
    }

    (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v7, v8);
  }
}

void sub_100056494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000564B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 112);
  *(void *)(v7 + 112) = v5;
  id v9 = v5;

  uint64_t v11 = _AKLogSystem(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138412290;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Should continue came back with error: %@",  (uint8_t *)&v16,  0xCu);
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  double v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v6;
  id v15 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000569B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000569E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = _AKLogSystem(v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Login code validated", v10, 2u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4 == 0LL;
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v4;
  id v9 = v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100056B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _processCachedUserInputWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100056DAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v8 = _AKSignpostLogSystem(Nanoseconds);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  os_signpost_id_t v11 = *(void *)(a1 + 56);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    int v21 = 67240192;
    LODWORD(v22) = [v6 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_END,  v11,  "PiggyCodeCollect",  " Error=%{public,signpost.telemetry:number1,name=Error}d ",  (uint8_t *)&v21,  8u);
  }

  uint64_t v13 = _AKSignpostLogSystem(v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    double v15 = (double)Nanoseconds / 1000000000.0;
    uint64_t v16 = *(void *)(a1 + 56);
    unsigned int v17 = [v6 code];
    int v21 = 134218496;
    uint64_t v22 = v16;
    __int16 v23 = 2048;
    double v24 = v15;
    __int16 v25 = 1026;
    unsigned int v26 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyCodeCollect  Error=%{public,signpost.telemetry:number1,name=Error}d ",  (uint8_t *)&v21,  0x1Cu);
  }

  if (v6)
  {
    uint64_t v19 = _AKLogSystem(v18);
    __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_100135768();
    }
  }

  [*(id *)(a1 + 32) _cacheSecondFactor:v5 codeCaptureError:v6];
  [*(id *)(a1 + 32) _processCachedUserInputWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000570E8(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  id v8 = objc_msgSend((id)v7, "ak_isUserSkippedError");
  if ((_DWORD)v8)
  {
    uint64_t v9 = _AKLogSystem(v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "User wants to continue using current piggybacking session",  v17,  2u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 96);
    *(void *)(v11 + 96) = 0LL;

    [*(id *)(a1 + 32) _promptForSecretWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    if (v6 | v7)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 104LL), a3);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 112LL), a2);
      if (*(void *)(*(void *)(a1 + 32) + 112LL))
      {
        uint64_t v13 = AKAuthEventType_SECOND_FACTOR_PIGGYBACK_ESCAPE_SMS_SUCCESS;
        uint64_t v14 = 1LL;
        unint64_t v15 = 0LL;
      }

      else
      {
        uint64_t v13 = AKAuthEventType_SECOND_FACTOR_PIGGYBACK_ESCAPE_FAILURE;
        uint64_t v14 = 0LL;
        unint64_t v15 = v7;
      }

      +[AKCAAuthEventReporter reportAuthEventOfType:success:error:]( &OBJC_CLASS___AKCAAuthEventReporter,  "reportAuthEventOfType:success:error:",  v13,  v14,  v15);
    }

    uint64_t v16 = *(void *)(a1 + 48);
    if (v16) {
      (*(void (**)(void))(v16 + 16))();
    }
  }
}

void sub_100057374(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v7) {
    [*(id *)(*(void *)(a1 + 32) + 24) didEscapeRequesting];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_1000579B8(id a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  __int128 v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100135990();
  }
}

uint64_t sub_100058E88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

LABEL_16:
}

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v18, v19, 2u);
    goto LABEL_17;
  }

  uint64_t v16 = 0;
LABEL_19:

  return v16;
}

        swift_bridgeObjectRelease(v21);
        uint64_t v1 = v4[7];
        uint64_t v14 = 8 * v26;

        *(void *)(v1 + v14) = v24;
        isUniquelyReferenced_nonNull_native = 1;
        if (!v12) {
          goto LABEL_18;
        }
      }

      else
      {
        sub_1000F06FC(v29, isUniquelyReferenced_nonNull_native & 1);
        int v30 = sub_1000F9BB8(v22, v21);
        if ((v1 & 1) != (v31 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return result;
        }

        unsigned int v26 = v30;
        id v4 = v51;
        if ((v1 & 1) != 0) {
          goto LABEL_16;
        }
LABEL_41:
        v4[(v26 >> 6) + 8] |= 1LL << v26;
        uint64_t v32 = (uint64_t *)(v4[6] + 16 * v26);
        os_log_s *v32 = v22;
        v32[1] = v21;
        *(void *)(v4[7] + 8 * v26) = v24;
        uint64_t v33 = v4[2];
        uint64_t v34 = __OFADD__(v33, 1LL);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_49;
        }
        v4[2] = v35;
        isUniquelyReferenced_nonNull_native = 1;
        if (!v12) {
          goto LABEL_18;
        }
      }
    }

    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    if (v1 < 0) {
      double v37 = v1;
    }
    else {
      double v37 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    __int128 v2 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v1);
  }

  while (v2);
LABEL_56:
  if (qword_10020CF90 != -1) {
LABEL_61:
  }
    swift_once(&qword_10020CF90, sub_1000E54FC);
  __int16 v38 = type metadata accessor for Logger(0LL);
  int v39 = sub_1000B8C38(v38, (uint64_t)qword_100210FF0);
  id v40 = (os_log_s *)Logger.logObject.getter(v39);
  id v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    id v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "No accounts found in local store", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  return sub_1000F4D1C((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1000594E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _AKLogHme(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7061LL));
  (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
}

LABEL_7:
    LOBYTE(v5) = 1;
    return v5;
  }

  if (v4)
  {
    uint64_t v9 = _AKLogHme(v5, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
      uint64_t v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Internal request made by internal client? %@",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_7;
  }

  return v5;
}

    uint64_t v7 = 1;
    goto LABEL_8;
  }

  if (-[AKAuthenticationContextSanitizer _validateFederatedAppleIDAuthContext:]( self,  "_validateFederatedAppleIDAuthContext:",  v6))
  {
    goto LABEL_7;
  }

  if ([v8 command] == (id)100 || objc_msgSend(v8, "command") == (id)700)
  {
    -[AKAppleIDPushHelperService _unsafe_teardownCurrentLoginNotification]( self,  "_unsafe_teardownCurrentLoginNotification");
    int v21 = (NSString *)objc_claimAutoreleasedReturnValue([v8 messageId]);
    loginCodeNotificationID = self->_loginCodeNotificationID;
    self->_loginCodeNotificationID = v21;

    double v24 = _AKLogSystem(v23);
    __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      sub_10013F714();
    }
  }

  if ([v8 command] == (id)1600)
  {
    -[AKAppleIDPushHelperService _unsafe_tearDownNotificationWithID:]( self,  "_unsafe_tearDownNotificationWithID:",  self->_appleCareNotificationID);
    unsigned int v26 = (NSString *)objc_claimAutoreleasedReturnValue([v8 messageId]);
    appleCareNotificationID = self->_appleCareNotificationID;
    self->_appleCareNotificationID = v26;
  }

  int v28 = (void *)objc_claimAutoreleasedReturnValue([v8 messageId]);
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_notificationsByPushID,  "objectForKeyedSubscript:",  v28));

  if (v29)
  {
    uint64_t v31 = _AKLogSystem(v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
      sub_10013F6B4();
    }
  }

  else
  {
    uint64_t v32 = -[AKPushMessageNotificationPresenter initWithMessage:]( objc_alloc(&OBJC_CLASS___AKPushMessageNotificationPresenter),  "initWithMessage:",  v8);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_notificationsByPushID,  "setObject:forKeyedSubscript:",  v32,  v28);
    +[NSXPCConnection beginTransaction](&OBJC_CLASS___NSXPCConnection, "beginTransaction");
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    void v33[2] = sub_10009E694;
    v33[3] = &unk_1001C9338;
    v33[4] = self;
    uint64_t v34 = v28;
    uint64_t v35 = v10;
    -[os_log_s presentMessageWithAccount:completionHandler:]( v32,  "presentMessageWithAccount:completionHandler:",  v9,  v33);
  }
}

    swift_bridgeObjectRelease(v16);
    uint64_t result = v14;
    id v3 = v33;
  }

  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v32) {
    return 1LL;
  }
  uint64_t v11 = *(void *)(v31 + 8 * v13);
  if (v11)
  {
    uint64_t v12 = v3 + 4;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      return 1LL;
    }
    uint64_t v11 = *(void *)(v31 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }

    uint64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v13 >= v6) {
      goto LABEL_29;
    }
    uint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v7;
    if (!v14)
    {
      uint64_t v7 = v13 + 1;
      if (v13 + 1 >= v6) {
        goto LABEL_29;
      }
      uint64_t v14 = *(void *)(v2 + 8 * v7);
      if (!v14)
      {
        uint64_t v7 = v13 + 2;
        if (v13 + 2 >= v6) {
          goto LABEL_29;
        }
        uint64_t v14 = *(void *)(v2 + 8 * v7);
        if (!v14)
        {
          uint64_t v7 = v13 + 3;
          if (v13 + 3 >= v6) {
            goto LABEL_29;
          }
          uint64_t v14 = *(void *)(v2 + 8 * v7);
          if (!v14) {
            break;
          }
        }
      }
    }

  uint64_t v12 = swift_bridgeObjectRetain_n(*(void *)(v0 + 136), 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter();
  unint64_t v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 136);
  if (v15)
  {
    unsigned int v17 = *(void *)(v0 + 128);
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    int v21 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain(v16);
    *(void *)(v0 + 80) = sub_100103438(v17, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "EULA not available for clientID: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 136), 2LL);
  }

  uint64_t v9 = 0LL;
  uint64_t v11 = 0xE000000000000000LL;
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v9, v11);
}

void sub_10005A91C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10005A934(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005A944(uint64_t a1)
{
}

void sub_10005A94C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = _AKLogSystem(v7);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100136220(a1, (uint64_t)v8, v10);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10005BE88(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  __int128 v2 = (void *)qword_10020F410;
  qword_10020F410 = (uint64_t)v1;
}

void sub_10005C270(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001366AC((uint64_t)v9, v12);
    }
    uint64_t v13 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
      int v20 = 138412290;
      int v21 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Fetched user info for %@",  (uint8_t *)&v20,  0xCu);
    }

    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/x-plist"));
    uint64_t v13 = -[AKAppleIDUserInformationResponse initWithResponseBody:]( objc_alloc(&OBJC_CLASS___AKAppleIDUserInformationResponse),  "initWithResponseBody:",  v12);
    unint64_t v15 = *(void **)(a1 + 40);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
    [v15 _updateUserConfigIfNecessaryForAltDSID:v16 responseParameters:v12];

    unsigned int v17 = *(void **)(a1 + 40);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
    [v17 _processIncomingUserInformationForAltDSID:v18 userInformation:v13];
  }

  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    (*(void (**)(uint64_t, AKAppleIDUserInformationResponse *, id))(v19 + 16))(v19, v13, v9);
  }
}

void sub_10005C4A4(id a1, AKAppleIDUserInformationResponse *a2, NSError *a3)
{
}

void sub_10005C678(id a1, NSDictionary *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Updated user configs with error %@",  (uint8_t *)&v6,  0xCu);
  }
}

LABEL_15:
}

      -[AKAccountManager saveAccount:error:](self->_accountManager, "saveAccount:error:", v8, 0LL);
      __int16 v23 = 1;
      goto LABEL_16;
    }
  }

  else
  {
  }

  uint64_t v22 = 0;
  __int16 v23 = 0;
  if (v5) {
    goto LABEL_9;
  }
LABEL_16:

  return v23;
}

      int v20 = 0;
      goto LABEL_16;
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[AKGrandSlamRequestProvider loadDelegate](self, "loadDelegate"));

  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[AKGrandSlamRequestProvider loadDelegate](self, "loadDelegate"));
  [v11 signRequestWithCommonHeaders:v6];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl concreteAuthenticationContext](self, "concreteAuthenticationContext"));
  double v24 = 0LL;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 authKitAccount:&v24]);
  uint64_t v14 = v24;

  uint64_t v16 = _AKLogSystem(v15);
  unsigned int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  uint64_t v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
  if (v14)
  {
    if (v18) {
      sub_1001389D8((uint64_t)v14, v17);
    }
  }

  else
  {
    if (v18) {
      sub_100138998(v17);
    }

    unsigned int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s continuationTokenForAccount:](v17, "continuationTokenForAccount:", v13));
    objc_msgSend(v6, "ak_addContinutationKeyPresenceHeader:", v19);
  }

  int v20 = 1;
LABEL_16:

  return v20;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10005CD0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10005E52C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshDeviceListForAccount:*(void *)(a1 + 40)];
}

void sub_10005ED9C(uint64_t a1)
{
  __int128 v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) isEqualToString:@"0"];
  if ((_DWORD)v3)
  {
    uint64_t v4 = _AKLogSystem(v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "IDMS sent reset key to revoke authorization Database",  buf,  2u);
    }

    int v6 = objc_opt_new(&OBJC_CLASS___AKApplicationAuthorizationController);
    uint64_t v7 = *(void *)(a1 + 40);
    id v20 = 0LL;
    -[AKApplicationAuthorizationController revokeAuthorizationForAllApplicationsWithAltDSID:error:]( v6,  "revokeAuthorizationForAllApplicationsWithAltDSID:error:",  v7,  &v20);
    id v8 = v20;

    uint64_t v10 = _AKLogSystem(v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100136A00();
      }
    }

    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Authorization database revoked successfully",  v19,  2u);
    }
  }

  else
  {
    uint64_t v13 = objc_opt_new(&OBJC_CLASS___AKApplicationAuthorizationController);
    id v8 = (id)objc_claimAutoreleasedReturnValue( -[AKApplicationAuthorizationController currentAuthorizationListVersionWithAltDSID:]( v13,  "currentAuthorizationListVersionWithAltDSID:",  *(void *)(a1 + 40)));

    uint64_t v15 = _AKLogSystem(v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_100136A60(v2, (uint64_t)v8, v16);
    }

    if (*v2)
    {
      id v17 = *v2;
      uint64_t v18 = v17;
      if (v8 && [v17 isEqual:v8])
      {
      }

      else
      {

        [*(id *)(a1 + 48) _refreshApplicationInformationForAltDSID:*(void *)(a1 + 40)];
      }
    }
  }
}

int64_t sub_10005F3D4(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
  id v10 = v4;
  if ((objc_opt_isKindOfClass(v10, v9) & 1) != 0) {
    id v11 = v10;
  }
  else {
    id v11 = 0LL;
  }

  uint64_t v12 = AKInformationCustodianUuidKey;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:AKInformationCustodianUuidKey]);
  if ((objc_opt_isKindOfClass(v13, v7) & 1) != 0) {
    id v14 = v13;
  }
  else {
    id v14 = 0LL;
  }

  uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString, v15);
  uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v17);
  id v19 = v5;
  if ((objc_opt_isKindOfClass(v19, v18) & 1) != 0) {
    id v20 = v19;
  }
  else {
    id v20 = 0LL;
  }

  id v21 = (id)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v12]);
  if ((objc_opt_isKindOfClass(v21, v16) & 1) != 0) {
    id v22 = v21;
  }
  else {
    id v22 = 0LL;
  }

  id v23 = [v14 compare:v22];
  return (int64_t)v23;
}

int64_t sub_10005F550(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
  id v10 = v4;
  if ((objc_opt_isKindOfClass(v10, v9) & 1) != 0) {
    id v11 = v10;
  }
  else {
    id v11 = 0LL;
  }

  uint64_t v12 = AKInformationBeneficiaryUuidKey;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:AKInformationBeneficiaryUuidKey]);
  if ((objc_opt_isKindOfClass(v13, v7) & 1) != 0) {
    id v14 = v13;
  }
  else {
    id v14 = 0LL;
  }

  uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString, v15);
  uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v17);
  id v19 = v5;
  if ((objc_opt_isKindOfClass(v19, v18) & 1) != 0) {
    id v20 = v19;
  }
  else {
    id v20 = 0LL;
  }

  id v21 = (id)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v12]);
  if ((objc_opt_isKindOfClass(v21, v16) & 1) != 0) {
    id v22 = v21;
  }
  else {
    id v22 = 0LL;
  }

  id v23 = [v14 compare:v22];
  return (int64_t)v23;
}

void sub_10005FAC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    uint64_t v8 = objc_opt_new(&OBJC_CLASS___AKApplicationAuthorizationController);
    -[AKApplicationAuthorizationController updateAuthorizationListWithMetadataInfo:withAltDSID:]( v8,  "updateAuthorizationListWithMetadataInfo:withAltDSID:",  v5,  *(void *)(a1 + 32));
  }

  else
  {
    uint64_t v9 = _AKLogSystem(v6);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100136B00();
    }
  }
}

LABEL_18:
}

  return v6;
}

      __int16 v38 = v37;
      uint64_t v64 = v20;
      uint64_t v66 = v9;
      dispatch_group_enter(v23);
      v73[0] = _NSConcreteStackBlock;
      v73[1] = 3221225472LL;
      v73[2] = sub_10008D3F4;
      v73[3] = &unk_1001CA038;
      v73[4] = self;
      unsigned int v65 = v23;
      int v39 = v23;
      uint64_t v74 = v39;
      id v40 = objc_retainBlock(v73);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([v15 credentialRequestContext]);
      id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 _proxiedAssociatedDomains]);

      if (v42) {
        -[AKAuthorizationDaemonService _fetchCredentialsForAssociatedDomains:completion:]( self,  "_fetchCredentialsForAssociatedDomains:completion:",  v42,  v40);
      }
      else {
        -[AKAuthorizationDaemonService _fetchSafariCredentialsWithCompletion:]( self,  "_fetchSafariCredentialsWithCompletion:",  v40);
      }

      dispatch_group_wait(v39, 0xFFFFFFFFFFFFFFFFLL);
      -[AKAuthorizationDaemonService _setupLoginChoicesForPresentationContext:]( self,  "_setupLoginChoicesForPresentationContext:",  v15);
      __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v15 loginChoices]);
      double v48 = [v47 count];

      if (!v48)
      {
        uint64_t v51 = _AKLogSiwa(v49, v50);
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        uint64_t v9 = v66;
        double v37 = v38;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          sub_10013C560();
        }

        id v23 = v65;
        if (v69
          && (uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v15 credentialRequestContext]),
              uint64_t v54 = [v53 _isRapportLogin],
              v53,
              v54))
        {
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v15 credentialRequestContext]);
          [v55 setPasswordRequest:0];

          v10[2](v10, v15, 0LL);
        }

        else
        {
          id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7089LL, v64));
          ((void (**)(id, void *, void *))v10)[2](v10, 0LL, v57);
        }

        uint64_t v46 = v70;
        id v20 = v64;
        goto LABEL_46;
      }

      v10[2](v10, v15, 0LL);
      id v23 = v65;
      uint64_t v9 = v66;
      uint64_t v46 = v70;
      id v20 = v64;
LABEL_26:
      double v37 = v38;
      goto LABEL_46;
    }

    uint64_t v75 = 0LL;
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( -[AKUserInfoController authorizationUserInformationForRequest:shouldRequestUpdate:error:]( v72,  "authorizationUserInformationForRequest:shouldRequestUpdate:error:",  v20,  &v76,  &v75));
    unsigned int v26 = v75;
    [v15 setUserInformation:v25];

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v20 requestedScopes]);
    uint64_t v67 = v22;
    unsigned int v68 = v14;
    int v28 = v20;
    __int16 v29 = v9;
    if ([v27 count])
    {
    }

    else
    {
      id v43 = v23;
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v15 credentialRequestContext]);
      uint64_t v45 = [v44 _isFirstPartyLogin];

      id v23 = v43;
      if (!v45)
      {
        uint64_t v9 = v29;
        id v20 = v28;
        id v22 = v67;
        id v14 = v68;
        double v37 = v26;
        goto LABEL_39;
      }
    }

    if (v26)
    {
      double v37 = v26;
      ((void (**)(id, void *, id))v10)[2](v10, 0LL, v26);
      uint64_t v9 = v29;
      uint64_t v46 = v70;
      id v20 = v28;
      id v22 = v67;
      id v14 = v68;
LABEL_46:

      uint64_t v8 = v71;
      goto LABEL_47;
    }

    uint64_t v9 = v29;
    if (v76)
    {
      id v20 = v28;
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v28 altDSID]);
      -[AKUserInfoController fetchUserInformationForAltDSID:client:completion:]( v72,  "fetchUserInformationForAltDSID:client:completion:",  v56,  v9,  &stru_1001CA010);

      double v37 = 0LL;
    }

    else
    {
      double v37 = 0LL;
      id v20 = v28;
    }

    id v22 = v67;
    id v14 = v68;
LABEL_39:
    double v24 = 1;
    if (!v22) {
      goto LABEL_40;
    }
    goto LABEL_18;
  }

  int v30 = _AKLogSiwa(v12, v13);
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    sub_10013C5B8((uint64_t)v14, v31, v32);
  }

  if (!v14)
  {
    uint64_t v35 = _AKLogSiwa(v33, v34);
    __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_10013C58C();
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7001LL));
  }

  ((void (**)(id, void *, void *))v10)[2](v10, 0LL, v14);
LABEL_47:
}
}

    goto LABEL_19;
  }

  if (v16)
  {
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Client has special access, populating context with overrides...",  v46,  2u);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v7 appProvidedData]);
  uint64_t v18 = [v17 copy];
  -[AKAuthorizationContext setAppProvidedData:](v8, "setAppProvidedData:", v18);

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 clientID]);
  if (v19)
  {
    id v22 = _AKLogSiwa(v20, v21);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Applying request client ID override",  v46,  2u);
    }

    double v24 = (void *)objc_claimAutoreleasedReturnValue([v7 clientID]);
    -[AKAuthorizationContext setClientID:](v8, "setClientID:", v24);
  }

  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v7 teamID]);

  if (v25)
  {
    int v28 = _AKLogSiwa(v26, v27);
    __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Applying request team ID override", v46, 2u);
    }

    int v30 = (void *)objc_claimAutoreleasedReturnValue([v7 teamID]);
    -[AKAuthorizationContext setTeamID:](v8, "setTeamID:", v30);
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthorizationContext teamID](v8, "teamID"));

  if (!v31)
  {
    uint64_t v34 = _AKLogSiwa(v32, v33);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v46 = 0;
      uint64_t v35 = "Authorization is for an internal application without teamID";
      __int16 v36 = v15;
      double v37 = 2;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, v46, v37);
      goto LABEL_18;
    }

    goto LABEL_18;
  }

      __int16 v47 = 0LL;
      v123 = v44;
      unsigned int v124 = v44 & 0xC000000000000001LL;
      id v119 = v44 + 32;
      uint64_t v121 = v46;
      while (1)
      {
        if (v124)
        {
          double v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v44);
          __int16 v49 = __OFADD__(v47++, 1LL);
          if (v49) {
            goto LABEL_69;
          }
        }

        else
        {
          double v48 = *(id *)(v119 + 8 * v47);
          __int16 v49 = __OFADD__(v47++, 1LL);
          if (v49)
          {
LABEL_69:
            __break(1u);
            goto LABEL_70;
          }
        }

        unsigned int v50 = (char *)v48;
        uint64_t v51 = sub_1000D4404(v50);
        uint64_t v52 = *(void *)&v51[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs];
        if (*(void *)(v52 + 16)) {
          break;
        }
LABEL_21:

        if (v47 == v46) {
          goto LABEL_50;
        }
      }

      uint64_t v53 = v17;
      uint64_t v54 = *(void *)(v0 + 64);
      uint64_t v55 = *(void *)(v0 + 72);
      Hasher.init(_seed:)(v125);
      swift_bridgeObjectRetain(v52);
      String.hash(into:)(v125, v54, v55);
      uint64_t v56 = Hasher._finalize()();
      id v57 = -1LL << *(_BYTE *)(v52 + 32);
      unsigned int v58 = v56 & ~v57;
      if (((*(void *)(v52 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) != 0)
      {
        os_signpost_id_t v59 = *(void *)(v0 + 64);
        unsigned int v60 = *(void *)(v0 + 72);
        uint64_t v61 = *(void *)(v52 + 48);
        uint64_t v62 = (void *)(v61 + 16 * v58);
        NSErrorUserInfoKey v63 = v62[1];
        uint64_t v64 = *v62 == v59 && v63 == v60;
        if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v62, v63, v59, v60, 0LL) & 1) != 0)
        {
LABEL_34:
          swift_bridgeObjectRelease(v52);
          unsigned int v65 = v50;
          uint64_t v17 = v53;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
          uint64_t v67 = *(void *)((*v53 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t v66 = *(void *)((*v53 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          id v44 = v123;
          if (v67 >= v66 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1LL);
          }
          unsigned int v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v65);
          specialized Array._endMutation()(v68);
          unsigned int v50 = v51;
          uint64_t v51 = v65;
          goto LABEL_20;
        }

        __int128 v69 = ~v57;
        while (1)
        {
          unsigned int v58 = (v58 + 1) & v69;
          if (((*(void *)(v52 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) == 0) {
            break;
          }
          __int128 v70 = *(void *)(v0 + 64);
          __int128 v71 = *(void *)(v0 + 72);
          __int128 v72 = (void *)(v61 + 16 * v58);
          id v73 = v72[1];
          uint64_t v74 = *v72 == v70 && v73 == v71;
          if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v72, v73, v70, v71, 0LL) & 1) != 0) {
            goto LABEL_34;
          }
        }
      }

      swift_bridgeObjectRelease(v52);
      uint64_t v17 = v53;
      id v44 = v123;
LABEL_20:
      uint64_t v46 = v121;
      goto LABEL_21;
    }

    if (v26 < 0) {
      int v111 = v26;
    }
    else {
      int v111 = v26 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v26);
    uint64_t v112 = _CocoaArrayWrapper.endIndex.getter(v111);
    swift_bridgeObjectRelease(v26);
    if (!v112) {
      goto LABEL_12;
    }
LABEL_51:
    __int16 v79 = *(void *)(v0 + 16);
    *(void *)(v0 + 104) = v79;
    if ((unint64_t)v79 >> 62)
    {
      if (v79 < 0) {
        v113 = v79;
      }
      else {
        v113 = v79 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v79);
      id v114 = _CocoaArrayWrapper.endIndex.getter(v113);
      swift_bridgeObjectRelease(v79);
      if (!v114)
      {
LABEL_81:
        swift_bridgeObjectRelease(v79);

        return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
      }
    }

    else if (!*(void *)((v79 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_81;
    }

    unsigned int v80 = *(void *)(v0 + 80);
    *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
    uint64_t v81 = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
    *(void *)(v0 + 112) = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
    uint64_t v82 = *(char **)(v80 + v81);
    if (!v82)
    {
      sub_1000BC7B0( (void *)(v80 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController),  *(void *)(v80 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController + 24));
      v105 = (void *)swift_task_alloc(dword_10020EA9C);
      *(void *)(v0 + 120) = v105;
      void *v105 = v0;
      v105[1] = sub_1000D7330;
      return sub_1000EC6D8();
    }

    os_signpost_id_t v83 = *(void *)(v0 + 104);
    __int16 v84 = *(void *)&v82[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain(v84);
    double v85 = v82;
    *(void *)(v0 + 136) = sub_1000ECB1C(v84);

    __int16 v86 = *(void *)(v0 + 104);
    if (v83 >> 62) {
      break;
    }
    unsigned int v87 = *(void *)((v86 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)(v0 + 144) = v87;
    if (!v87) {
      goto LABEL_86;
    }
LABEL_56:
    v88 = 0LL;
    while (1)
    {
      v89 = *(void *)(v0 + 104);
      uint64_t v90 = (v89 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v89)
          : *(id *)(v89 + 8 * v88 + 32);
      *(void *)(v0 + 160) = v90;
      *(void *)(v0 + 16_Block_object_dispose(va, 8) = v88 + 1;
      if (__OFADD__(v88, 1LL)) {
        break;
      }
      uint64_t v91 = (char *)v90;
      uint64_t v92 = sub_1000D4404(v91);
      *(void *)(v0 + 176) = v92;
      v93 = *(void *)(v0 + 136);
      v94 = v92;
      v95 = (uint64_t *)&v92[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v96 = *(void *)&v92[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      v97 = *(void *)&v92[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      swift_bridgeObjectRetain(v97);
      LOBYTE(v96) = sub_1000ECD34(v96, v97, v93);
      swift_bridgeObjectRelease(v97);
      if ((v96 & 1) != 0)
      {
        char v107 = swift_task_alloc(dword_10020E2E4);
        *(void *)(v0 + 184) = v107;
        *(void *)char v107 = v0;
        *(void *)(v107 + _Block_object_dispose(va, 8) = sub_1000D784C;
        v108 = *(void *)(v0 + 80);
        *(_BYTE *)(v107 + 152) = 0;
        *(void *)(v107 + 16) = v94;
        *(void *)(v107 + 24) = v108;
        return swift_task_switch(sub_1000D5500, 0LL, 0LL);
      }

      uint64_t v98 = v94;
      uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
      v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        v101 = swift_slowAlloc(12LL, -1LL);
        v102 = swift_slowAlloc(32LL, -1LL);
        v125[0] = v102;
        *(_DWORD *)v101 = 136315138;
        v103 = *v95;
        id v104 = v95[1];
        swift_bridgeObjectRetain(v104);
        *(void *)(v101 + 4) = sub_100103438(v103, v104, v125);
        swift_bridgeObjectRelease(v104);

        _os_log_impl( (void *)&_mh_execute_header,  v99,  v100,  "Detected credential but the current user no longer has access to the group %s. Skipping...",  (uint8_t *)v101,  0xCu);
        swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v102, -1LL, -1LL);
        swift_slowDealloc(v101, -1LL, -1LL);
      }

      else
      {
      }

      v88 = *(void *)(v0 + 168);
      if (v88 == *(void *)(v0 + 144))
      {
        uint64_t v109 = *(void **)(v0 + 96);
        swift_bridgeObjectRelease(*(void *)(v0 + 104));

        uint64_t v110 = *(void **)(v0 + 32);
        goto LABEL_87;
      }
    }

LABEL_32:
    __int128 v70 = -[AKUserInformation setReachableEmails:](v25, "setReachableEmails:", v56);
    __int128 v72 = _AKLogSiwa(v70, v71);
    id v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v97 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Completed getting UserInformation for account with UserInfo:\n%@",  buf,  0xCu);
    }

    unsigned int v68 = v25;
    goto LABEL_43;
  }

  uint64_t v66 = _AKLogSiwa(v48, v49);
  uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v97 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "Application is not requesting email for this authorization early return with userInfo:\n%@",  buf,  0xCu);
  }

  unsigned int v68 = v25;
  __int128 v69 = v89;
LABEL_44:

  return v68;
}

  id v23 = objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper altDSID](self, "altDSID"));
  if (v23)
  {
    double v24 = (void *)v23;
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationContext appProvidedContext](self->_authContext, "appProvidedContext"));

    if (!v25)
    {
      __int16 v27 = _AKLogSystem(v26);
      int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v29 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper altDSID](self, "altDSID"));
        *(_DWORD *)buf = 138412290;
        __int128 v137 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "altDSID is available for auth: %@",  buf,  0xCu);
      }

      int v30 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper altDSID](self, "altDSID"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v30,  kAppleIDAuthSupportAlternateDSID);
    }
  }

  if (-[AKSRPContextHelper retryAuth](self, "retryAuth")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"retry");
  }
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  uint64_t v32 = objc_claimAutoreleasedReturnValue([v31 serverFriendlyDescription]);

  if (v32) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v32,  kAppleIDAuthSupportClientInfo);
  }
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationContext companionDevice](self->_authContext, "companionDevice"));
  uint64_t v34 = objc_claimAutoreleasedReturnValue([v33 serverFriendlyDescription]);

  if (v34) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v34,  kAppleIDAuthSupportCompanionClientInfo);
  }
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[AKAuthenticationContext proxiedDevice](self->_authContext, "proxiedDevice"));
  __int16 v36 = objc_claimAutoreleasedReturnValue([v35 serverFriendlyDescription]);

  if (v36) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v36,  kAppleIDAuthSupportProxiedClientInfo);
  }
  double v37 = objc_claimAutoreleasedReturnValue(-[AKAuthenticationContext _proxiedAppName](self->_authContext, "_proxiedAppName"));
  if (v37)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v37, @"papp");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v37, AKProxiedAppNameHeader);
  }

  v130 = v4;
  v125 = (void *)v37;
  v127 = (void *)v34;
  v128 = (void *)v32;
  __int16 v38 = objc_claimAutoreleasedReturnValue(-[AKClient name](self->_client, "name"));
  if (v38)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v38, @"capp");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v38, AKClientAppNameHeader);
  }

  unsigned int v124 = (void *)v38;
  int v39 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper client](self, "client"));
  id v40 = objc_claimAutoreleasedReturnValue([v39 bundleID]);

  id v41 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper client](self, "client"));
  id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 bundleID]);
  id v43 = [v42 length];

  if (v43)
  {
    uint64_t v45 = _AKLogSystem(v44);
    uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
      sub_100140994();
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v40, AKClientBundleIDHeader);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v40, @"cbid");
  }

  __int16 v47 = AKStringFromServiceType(-[AKAuthenticationContext serviceType](self->_authContext, "serviceType"));
  double v48 = objc_claimAutoreleasedReturnValue(v47);
  if (v48)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v48, @"svct");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v48, AKContextTypeHeader);
  }

  v122 = (void *)v48;
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  unsigned int v50 = objc_claimAutoreleasedReturnValue([v49 uniqueDeviceIdentifier]);
  if (v50)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v50,  @"X-Mme-Device-Id");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v50,  @"X-Mme-Device-Id");
  }

  uint64_t v51 = objc_claimAutoreleasedReturnValue([v49 MLBSerialNumber]);
  if (v51) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v51, @"X-Apple-I-MLB");
  }
  v126 = (void *)v36;
  uint64_t v52 = objc_claimAutoreleasedReturnValue([v49 ROMAddress]);
  if (v52) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v52, @"X-Apple-I-ROM");
  }
  uint64_t v53 = objc_claimAutoreleasedReturnValue([v49 serialNumber]);
  if (v53) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v53,  @"X-Apple-I-SRL-NO");
  }
  v118 = (void *)v53;
  uint64_t v54 = objc_claimAutoreleasedReturnValue([v49 color]);
  if (v54) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v54, @"dec");
  }
  uint64_t v55 = objc_claimAutoreleasedReturnValue([v49 enclosureColor]);
  if (v55) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v55, @"dc");
  }
  v116 = (void *)v55;
  v120 = (void *)v51;
  uint64_t v121 = (void *)v50;
  uint64_t v56 = objc_claimAutoreleasedReturnValue([v49 modelNumber]);
  if (v56) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v56, @"prtn");
  }
  uint64_t v115 = (void *)v56;
  id v119 = (void *)v52;
  v123 = (void *)v40;
  id v57 = (void *)objc_claimAutoreleasedReturnValue([v49 locale]);
  unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue([v57 localeIdentifier]);

  if (v58) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v58, @"loc");
  }
  os_signpost_id_t v59 = (void *)objc_claimAutoreleasedReturnValue([v49 locale]);
  unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKey:NSLocaleCountryCode]);
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 uppercaseString]);

  if (v61) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v61, @"cou");
  }
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  NSErrorUserInfoKey v63 = [v62 shouldAllowExperimentalMode];

  if (v63 == (id)1)
  {
    uint64_t v64 = [v49 isInternalBuild];
    if ((_DWORD)v64)
    {
      unsigned int v65 = _AKLogSystem(v64);
      uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Opting into Experimental Mode through SRP",  buf,  2u);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKExperimentalModeHeaderKey);
    }
  }

  -[AKSRPContextHelper _addExperimentalFeaturesInfoToClientProvidedData:]( self,  "_addExperimentalFeaturesInfoToClientProvidedData:",  v5);
  uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  unsigned int v68 = [v67 requestedCloudPartition];

  __int128 v69 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lu", v68));
  __int128 v70 = _AKLogSystem(v69);
  __int128 v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v137 = v69;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Sending requested cloud partition: %@",  buf,  0xCu);
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v69,  AKRequestedCloudPartitionHeaderKey);
  __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  id v73 = [v72 shouldEnableTestAccountMode];

  if (v73 == (id)1)
  {
    uint64_t v74 = [v49 isInternalBuild];
    if ((_DWORD)v74)
    {
      uint64_t v75 = _AKLogSystem(v74);
      uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Test Account Header Attached", buf, 2u);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKTestAccountHeaderKey);
    }
  }

  if ([v49 isMultiUserMode]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"mu");
  }
  v117 = (void *)v54;
  __int16 v77 = [v49 isInternalBuild];
  double v78 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  __int16 v79 = [v78 shouldHideInternalBuildHeader];

  if (v77 && v79 != (id)1) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKInternalBuildHeaderKey);
  }
  unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "ak_serverFriendlyString"));

  os_signpost_id_t v83 = v6;
  if (v81) {
    uint64_t v82 = -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v81,  @"X-Apple-I-Client-Time");
  }
  if (self->_password)
  {
    __int16 v84 = _AKLogSystem(v82);
    double v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Password available. Will ask for bootstrap password-based auth.",  buf,  2u);
    }

    __int16 v86 = @"bootstrap";
LABEL_107:
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v86);
    goto LABEL_108;
  }

  if (self->_passwordlessToken)
  {
    unsigned int v87 = _AKLogSystem(v82);
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "PasswordlessToken available. Will ask for passwordlessToken-based auth.",  buf,  2u);
    }

    __int16 v86 = @"pltauth";
    goto LABEL_107;
  }

  if (HIDWORD(v114))
  {
    v93 = _AKLogSystem(v82);
    v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "No password, but CK is available. Will ask for ck-based auth.",  buf,  2u);
    }

    __int16 v86 = @"ckauth";
    goto LABEL_107;
  }

  if ((_DWORD)v114)
  {
    v108 = _AKLogSystem(v82);
    uint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "Master Key avalable.  Will ask for mk-based auth.",  buf,  2u);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"mrkauth");
    uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper decodedRecoveryPET](self, "decodedRecoveryPET"));

    if (v110)
    {
      int v111 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper decodedRecoveryPET](self, "decodedRecoveryPET"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v111,  AKRecoveryPasswordEquivTokenHeader);
    }

    uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper decodedRecoveryIdentityToken](self, "decodedRecoveryIdentityToken"));

    if (v112)
    {
      v113 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper decodedRecoveryIdentityToken](self, "decodedRecoveryIdentityToken"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v113,  AKRecoveryIdentityTokenHeader);
    }
  }

  uint64_t v46 = v79[1];
  __int16 v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  double v48 = [(id)objc_opt_self(AKToken) tokenWithBase64String:v47];

  if (!v48)
  {
LABEL_45:
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    __int128 v69 = type metadata accessor for Logger(0LL);
    __int128 v70 = sub_1000B8C38(v69, (uint64_t)qword_100211008);
    double v24 = (os_log_s *)Logger.logObject.getter(v70);
    __int16 v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_15;
    }
    unsigned int v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unsigned int v26 = 0;
    __int16 v27 = "Failed to verify passkeys. Base64 decoding GS token failed.";
    goto LABEL_14;
  }

  __int16 v49 = [v48 stringValue];
  if (!v49)
  {
    unsigned int v50 = v48;
LABEL_44:

    goto LABEL_45;
  }

  unsigned int v50 = v49;
  uint64_t v51 = a5;
  uint64_t v52 = [v48 name];
  if (!v52)
  {

    goto LABEL_44;
  }

  uint64_t v53 = v52;
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v71[0] = v55;

  uint64_t v56 = sub_1000B86DC(&qword_10020D1C8);
  inited = swift_initStackObject(v56, v74);
  *(_OWORD *)(inited + 16) = xmmword_100162E50;
  unsigned int v58 = v71[0];
  *(void *)(inited + 32) = v54;
  *(void *)(inited + 40) = v58;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v50;
  os_signpost_id_t v59 = sub_1000F4AB0(inited);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v51,  v12);
  unsigned int v60 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v61 = (v60 + 24) & ~v60;
  uint64_t v62 = swift_allocObject(&unk_1001CAE30, v61 + v14, v60 | 7);
  *(void *)(v62 + 16) = v59;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))( v62 + v61,  (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12);
  sub_1000B6940(v72, a1, (void (*)(void))sub_1000B8E40, v62);
  swift_release(v62);
}

          sub_1000CC5C0(a1);
          return (unint64_t)v3;
        }
      }
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_1000613CC(id a1, AKDeviceListResponse *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100136DB0();
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_100136D84();
  }
}

void sub_100061B54(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  id v2 = [v1 initWithAccountManager:v4];
  id v3 = (void *)qword_10020F420;
  qword_10020F420 = (uint64_t)v2;
}

void sub_100061FAC(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"sn"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"sn"]);
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    id v6 = *(void **)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"mid"]);
    [v6 addObject:v7];
  }
}

void sub_10006205C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) altDSID]);
  [v1 _refreshDeviceListForAltDSID:v2];
}

void sub_1000622D4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) altDSID]);
  [v1 _clearDeviceListForAltDSID:v2];
}

void sub_1000624D0(id a1, AKDeviceListResponse *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _AKLogSystem(v3);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100136ECC((uint64_t)v3, v6);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_100136E9C(v6, v7, v8, v9, v10, v11, v12, v13);
  }
}

void sub_100062648(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412803;
    uint64_t v10 = v8;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2113;
    id v14 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Clear device list cache completed for context - %@ with status - %d and error - %{private}@",  (uint8_t *)&v9,  0x1Cu);
  }
}

void sub_100063CC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  id v6 = v3;
  if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0) {
    id v7 = v6;
  }
  else {
    id v7 = 0LL;
  }

  id v8 = [v7 mutableCopy];
  uint64_t v10 = _AKLogSystem(v9);
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_1001370DC(v11, v12, v13, v14, v15, v16, v17, v18);
  }

  [v8 removeObjectForKey:AKInformationBeneficiaryWrappedKeyKey];
  [*(id *)(a1 + 32) addObject:v8];
}

void sub_100064058(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  id v6 = v3;
  if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0) {
    id v7 = v6;
  }
  else {
    id v7 = 0LL;
  }

  id v8 = [v7 mutableCopy];
  uint64_t v10 = _AKLogSystem(v9);
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  uint64_t v13 = AKInformationBeneficiaryUuidKey;
  if (v12) {
    sub_10013728C(v8, AKInformationBeneficiaryUuidKey, v11);
  }

  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = AKInformationBeneficiaryWrappedKeyKey;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:AKInformationBeneficiaryWrappedKeyKey]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v13]);
  [v14 setValue:v16 forKey:v17];

  [v8 removeObjectForKey:v15];
  [*(id *)(a1 + 40) addObject:v8];
}

uint64_t sub_1000641E8(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F430;
  uint64_t v7 = qword_10020F430;
  if (!qword_10020F430)
  {
    v8[0] = *(_OWORD *)off_1001C8F78;
    v8[1] = *(_OWORD *)&off_1001C8F88;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F430 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100064294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000642AC()
{
  id v3 = 0LL;
  uint64_t v0 = sub_1000641E8((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_100064304()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F438;
  uint64_t v7 = qword_10020F438;
  if (!qword_10020F438)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000643B8;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_1000643B8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000643A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_1000643B8(uint64_t a1)
{
  Class result = objc_getClass("RPCompanionLinkClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F438 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_100137320();
    return (Class)sub_10006440C();
  }

  return result;
}

id sub_10006440C()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F440;
  uint64_t v7 = qword_10020F440;
  if (!qword_10020F440)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000644C0;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_1000644C0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000644A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_1000644C0(uint64_t a1)
{
  Class result = objc_getClass("RPCompanionLinkDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F440 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_100137344();
    return (Class)sub_100064514(v3);
  }

  return result;
}

void *sub_100064514()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F448;
  uint64_t v6 = qword_10020F448;
  if (!qword_10020F448)
  {
    id v1 = (void *)sub_1000642AC();
    uint64_t v0 = dlsym(v1, "RPDestinationIdentifierDirectPeer");
    v4[3] = (uint64_t)v0;
    qword_10020F448 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100064588( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000645A0()
{
  uint64_t v0 = (id *)sub_100064514();
  if (v0) {
    return *v0;
  }
  sub_10012D194();
  return sub_1000645C0();
}

void *sub_1000645C0()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F450;
  uint64_t v6 = qword_10020F450;
  if (!qword_10020F450)
  {
    id v1 = (void *)sub_1000642AC();
    uint64_t v0 = dlsym(v1, "RPOptionAllowUnauthenticated");
    v4[3] = (uint64_t)v0;
    qword_10020F450 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100064634( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10006464C()
{
  uint64_t v0 = (id *)sub_1000645C0();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_10006466C(v2);
}

void *sub_10006466C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F458;
  uint64_t v6 = qword_10020F458;
  if (!qword_10020F458)
  {
    id v1 = (void *)sub_1000642AC();
    uint64_t v0 = dlsym(v1, "RPOptionTimeoutSeconds");
    v4[3] = (uint64_t)v0;
    qword_10020F458 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000646E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000646F8()
{
  uint64_t v0 = (id *)sub_10006466C();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_100064718(v2);
}

id sub_100064718()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F460;
  uint64_t v7 = qword_10020F460;
  if (!qword_10020F460)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000647CC;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_1000647CC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000647B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

AKPrivateEmailServiceController *sub_1000647CC(uint64_t a1)
{
  Class result = (AKPrivateEmailServiceController *)objc_getClass("RPAppSignInService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F460 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (AKPrivateEmailServiceController *)sub_100137368();
    return -[AKPrivateEmailServiceController initWithClient:altDSID:](v3, v4, v5, v6);
  }

  return result;
}

void sub_100064978(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = _AKLogSystem(v9);
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001374BC((uint64_t)v10, (uint64_t)v7, v12);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
    uint64_t v14 = -[AKPrivateEmailInformation initWithResponseBody:]( objc_alloc(&OBJC_CLASS___AKPrivateEmailInformation),  "initWithResponseBody:",  v13);
    BOOL v15 = -[AKPrivateEmailInformation invalidListVersionSupplied](v14, "invalidListVersionSupplied");
    if (v15)
    {
      uint64_t v17 = _AKLogHme(v15, v16);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_100137488(v18, v19, v20, v21, v22, v23, v24, v25);
      }

      unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[AKPrivateEmailStoreManager sharedInstance]( &OBJC_CLASS___AKPrivateEmailStoreManager,  "sharedInstance"));
      id v65 = 0LL;
      [v26 clearDatabase:&v65];
      id v27 = v65;
      uint64_t v10 = v27;
      if (v27)
      {
        uint64_t v29 = _AKLogHme(v27, v28);
        int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_100137424((uint64_t)v10, v30, v31, v32, v33, v34, v35, v36);
        }

        id v37 = v10;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( +[AKPrivateEmailStoreManager sharedInstance]( &OBJC_CLASS___AKPrivateEmailStoreManager,  "sharedInstance"));
    id v64 = 0LL;
    unsigned __int8 v39 = [v38 commitChangesToCacheWithInformation:v14 error:&v64];
    id v40 = v64;
    if ((v39 & 1) == 0)
    {
      id v41 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v8, 4LL);
      uint64_t v43 = _AKLogHme(v41, v42);
      id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        sub_1001373C0((uint64_t)v41, v44, v45, v46, v47, v48, v49, v50);
      }

      id v51 = v40;
      uint64_t v10 = v51;
    }

    BOOL v52 = -[AKPrivateEmailInformation shouldSyncWithServer](v14, "shouldSyncWithServer");
    if (v52 && !*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
    {
      uint64_t v54 = _AKLogHme(v52, v53);
      uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)) {
        sub_10013738C(v55, v56, v57, v58, v59, v60, v61, v62);
      }

      NSErrorUserInfoKey v63 = -[AKPrivateEmailServiceController initWithClient:altDSID:]( objc_alloc(&OBJC_CLASS___AKPrivateEmailServiceController),  "initWithClient:altDSID:",  *(void *)(*(void *)(a1 + 32) + 32LL),  *(void *)(*(void *)(a1 + 32) + 40LL));
      -[AKPrivateEmailServiceController setIsSecondCall:](v63, "setIsSecondCall:", 1LL);
      -[AKPrivateEmailServiceController executeFetchHmeListRequestWithCompletion:]( v63,  "executeFetchHmeListRequestWithCompletion:",  *(void *)(a1 + 40));
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

void sub_10006503C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100065058(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v10 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleStartFidoResponse:v11 data:v7 context:*(void *)(a1 + 32) recoveryToken:*(void *)(a1 + 40) error:v8 completion:*(void *)(a1 + 48)];
  }
}

void sub_100065580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_1000655A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v10 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleFinishFidoResponse:v11 data:v7 context:*(void *)(a1 + 32) recoveryToken:*(void *)(a1 + 40) error:v8 completion:*(void *)(a1 + 48)];
  }
}

void sub_100065AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 apps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allKeys]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100065B7C;
  v6[3] = &unk_1001C8FF0;
  id v7 = *(id *)(a1 + 32);
  [v5 enumerateObjectsUsingBlock:v6];

  [*(id *)(a1 + 40) _storeDeveloperTeam:v3 listVersion:*(void *)(a1 + 48)];
}

void sub_100065B7C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  unsigned int v4 = objc_msgSend(v3, "containsObject:");
  id v5 = *(void **)(a1 + 32);
  if (v4) {
    [v5 removeObject:v6];
  }
  else {
    [v5 addObject:v6];
  }
}

id sub_100065CC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_storePrimaryAppAMSMetadata:");
}

void sub_100065EA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_100065EF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100065F00(uint64_t a1)
{
}

void sub_100065F08(uint64_t a1, uint64_t a2)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  2LL,  a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  3LL,  a2));
  id v7 = objc_alloc_init(&OBJC_CLASS___AKAppiTunesMetadata);
  [v7 setBundleId:v8];
  [v7 setAppName:v4];
  [v7 setAppDeveloperName:v5];
  [v7 setAdamID:v6];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v7];
}

void sub_100066008(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10006667C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000666CC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)) {
      *a3 = 1;
    }
  }

void sub_100066774(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100066A7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100066ABC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    *a3 = 1;
  }
}

void sub_100066B20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100066D70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100066DB0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v3 != 0LL;
}

void sub_100066DF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100067080( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20, char a21)
{
}

void sub_1000670B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000673F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_10006743C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10006770C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, char a18)
{
}

void sub_100067754(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100067AE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_100067B40(uint64_t a1, uint64_t a2)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  2LL,  a2));
  id v6 = objc_alloc_init(&OBJC_CLASS___AKDeveloperTeam);
  [v6 setTeamID:v7];
  [v6 setUserIdentifier:v4];
  [v6 setPrivateEmail:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v6];
}

void sub_100067C10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100067E90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100067ED8(uint64_t a1, uint64_t a2)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  2LL,  a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  3LL,  a2));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setBundleId:v7];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAppName:v4];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAppDeveloperName:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAdamID:v6];
}

void sub_100067FD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100068320( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
}

void sub_100068358(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000683C8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  id v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 teamID]);
  [v4 _storeConsentedApplication:v6 teamID:v7 listVersion:a1[6]];
}

void sub_100068778(_Unwind_Exception *a1)
{
}

void sub_1000687AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100068AEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, uint64_t a22, char a23)
{
}

void sub_100068B2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100068ECC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id location)
{
}

void sub_100068F20(uint64_t a1, uint64_t a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  [*(id *)(a1 + 32) addObject:v3];
}

void sub_100068F70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100068FE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100069288( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_1000692D4(uint64_t a1, sqlite3_stmt *a2)
{
  id v19 = (id)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  1LL,  a2));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v18 componentsSeparatedByString:@","]);
  uint64_t v4 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", sqlite3_column_int64(a2, 2));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  3LL,  a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  4LL,  a2));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  5LL,  a2));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper doubleFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "doubleFromColumn:inStatement:",  6LL,  a2));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  7LL,  a2));
  [v8 doubleValue];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
  id v11 = objc_alloc_init(&OBJC_CLASS___AKConsentedApplication);
  [v11 setClientID:v19];
  objc_msgSend(v11, "setState:", objc_msgSend(v16, "integerValue"));
  [v11 setTransferState:v5];
  BOOL v12 = (void *)v3;
  [v11 setScopes:v3];
  [v11 setPrimaryClientID:v6];
  if (v7) {
    uint64_t v13 = v7;
  }
  else {
    uint64_t v13 = (void *)AKAuthorizationCredentialOriginUnknown;
  }
  [v11 setOrigin:v13];
  [v11 setCreationDate:v10];
  [v11 setClientName:v9];
  uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v11 clientID]);
  [v14 setObject:v11 forKeyedSubscript:v15];
}

void sub_100069518(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100069588(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 clientID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchAppMetadataForClientID:v6]);
  [v4 setAppiTunesMetadata:v5];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v4 forKeyedSubscript:v6];
}

void sub_100069854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100069890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    uint64_t v3 = v4;
  }
}

void sub_1000698E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100069A90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
}

void sub_100069AC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100069B48;
  v5[3] = &unk_1001C90E0;
  uint64_t v4 = *(void *)(a1 + 32);
  v5[4] = *(void *)(a1 + 40);
  [v3 performQuery:v4 rowHandler:v5];
}

void sub_100069B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[AKSQLiteHelper stringFromColumn:inStatement:]( &OBJC_CLASS___AKSQLiteHelper,  "stringFromColumn:inStatement:",  0LL,  a2));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100069D14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
}

void sub_100069D48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100069F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_100069F7C(uint64_t a1, sqlite3_stmt *a2)
{
  if (sqlite3_bind_int(a2, 1, *(_DWORD *)(a1 + 40)))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKSQLErrorDomain,  -6004LL,  0LL));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

void sub_100069FEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10006A0D0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v30 - 128), 8) = a1;
}

uint64_t sub_10006A67C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10006A86C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _sanitizeContext:*(void *)(a1 + 40)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

uint64_t sub_10006A954(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006A964(uint64_t a1)
{
}

void sub_10006A96C(uint64_t a1)
{
}

void sub_10006A9FC(uint64_t a1)
{
}

void sub_10006AABC(uint64_t a1)
{
}

void sub_10006AB4C(uint64_t a1)
{
}

void sub_10006AC00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412802;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Transformed %@ (%@)",  (uint8_t *)&v10,  0x20u);
  }
}

void sub_10006B398(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10020F468;
  qword_10020F468 = (uint64_t)v1;
}

void sub_10006B6C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100137F30();
    }

    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7029LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  a3,  @"application/x-plist"));
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v11, v13);
    if ((isKindOfClass & 1) != 0)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"ec"]);
      uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSNumber, v16);
      uint64_t v18 = objc_opt_isKindOfClass(v15, v17);
      if ((v18 & 1) != 0)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _decodeConfigurationInfo:v11]);
        if (v19)
        {
          [*(id *)(a1 + 32) updateUserConfigForAltDSID:*(void *)(a1 + 40) configurationInfo:v19];
          (*(void (**)(void, void *, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v19, 0LL);
        }

        else
        {
          uint64_t v26 = *(void *)(a1 + 48);
          id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
          (*(void (**)(uint64_t, void, void *))(v26 + 16))(v26, 0LL, v27);
        }
      }

      else
      {
        uint64_t v23 = _AKLogSystem(v18);
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          sub_100137E98();
        }

        uint64_t v25 = *(void *)(a1 + 48);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
        (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0LL, v19);
      }
    }

    else
    {
      uint64_t v20 = _AKLogSystem(isKindOfClass);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100137F04();
      }

      uint64_t v22 = *(void *)(a1 + 48);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v15);
    }
  }
}

void sub_10006BC78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013807C();
    }

    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7029LL,  v5));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Set configuration info completed for %@",  (uint8_t *)&v12,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10006C688( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10006C884(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) _continueSRPContractWithAuthURL:a2 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100138174((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }

    uint64_t v15 = *(void *)(a1 + 48);
    if (v15)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7005LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v16);
    }
  }
}

void sub_10006CA28(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    uint64_t v10 = _AKLogSystem(v8);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successful SRP!", v13, 2u);
    }

    uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    if (v7 || !objc_msgSend(v8, "ak_isAuthenticationError"))
    {
      [*(id *)(a1 + 32) _parseFailedServerResponse:v7 withError:v9 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
      goto LABEL_10;
    }

    uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v12();
LABEL_10:
}

void sub_10006D060(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006D12C;
  block[3] = &unk_1001C91F8;
  char v15 = a2;
  id v8 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v12 = v8;
  id v9 = *(id *)(a1 + 48);
  id v13 = v5;
  id v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

id sub_10006D12C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = _AKLogSystem(a1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      LOWORD(v_Block_object_dispose((const void *)(v30 - 128), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Anisette resync was successful. Retrying auth...",  (uint8_t *)&v8,  2u);
    }

    return [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 56)];
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Anisette resync failed. Error: %@",  (uint8_t *)&v8,  0xCu);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_10006D39C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006D468;
  block[3] = &unk_1001C91F8;
  char v15 = a2;
  int v8 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v12 = v8;
  id v9 = *(id *)(a1 + 48);
  id v13 = v5;
  id v14 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

id sub_10006D468(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = _AKLogSystem(a1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      LOWORD(v_Block_object_dispose((const void *)(v30 - 128), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Anisette erase was successful. Retrying auth...",  (uint8_t *)&v8,  2u);
    }

    return [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 56)];
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Anisette erase failed. Error: %@",  (uint8_t *)&v8,  0xCu);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_10006D734(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "URLSwitching was successfull retrying SRP With new url",  v15,  2u);
    }

    [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013827C((uint64_t)v5, v8, v9, v10, v11, v12, v13, v14);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10006E59C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) _isCapableOfSilentAuthForRequest:*(void *)(a1 + 40)];
  if (a2 == 2 || (v6 & 1) != 0)
  {
    [*(id *)(a1 + 32) _sanitizedCredentialStateForExternalClients:a2];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v8 = _AKLogSiwa(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "This device is not trusted, returning 'REVOKED' credential state",  v12,  2u);
    }

    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7084LL));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
  }
}

void sub_10006E9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10006E9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [*(id *)(a1 + 32) _internalCredentialStateForUserState:a2 error:a3];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_10006EB70(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 _sanitizedCredentialStateForExternalClients:a2];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_96:
                      v7[2](v7, [v13 state], 0);
LABEL_30:
                      uint64_t v8 = v114;
LABEL_61:
                      uint64_t v10 = v118;
                      id v19 = v119;
                      goto LABEL_90;
                    }
                  }

                  if (((v77 | HIDWORD(v113) | v67) & 1) == 0)
                  {
                    uint64_t v29 = [v6 shouldIgnoreUserID];
                    if ((_DWORD)v29)
                    {
                      char v107 = _AKLogSiwa(v29, v30);
                      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
                      uint64_t v8 = v114;
                      id v19 = v119;
                      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        uint64_t v109 = "Application in transferred state with no matching user identifier but user identifier mat"
                               "ch is being ignored (for internal credential state) and No match for Team Identifier, dir"
                               "ectly returning application's credential state.";
LABEL_105:
                        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, v109, buf, 2u);
                        goto LABEL_106;
                      }

                      goto LABEL_106;
                    }
                  }

                  uint64_t v8 = v114;
                  id v19 = v119;
                  if ((v68 & 1) == 0)
                  {
                    uint64_t v29 = [v6 shouldIgnoreUserID];
                    if ((_DWORD)v29)
                    {
                      uint64_t v110 = _AKLogSiwa(v29, v30);
                      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
                      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        uint64_t v109 = "Application in transferred state with no matching user identifier but user identifier mat"
                               "ch is being ignored (for internal credential state), directly returning application's credential state.";
                        goto LABEL_105;
                      }

LABEL_106:
                      v116[2](v116, [v13 state], 0);
                      goto LABEL_89;
                    }
                  }

                  int v111 = _AKLogSiwa(v29, v30);
                  uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
                  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Application state cannot be securely determined.",  buf,  2u);
                  }

                  id v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7084LL));
                  goto LABEL_83;
                }

                v105 = _AKLogSiwa(v29, v30);
                v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
                if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  v102 = "Application in expired state with strongly matching user identifier. Directly returning applica"
                         "tion's credential state.";
                  goto LABEL_86;
                }
              }

              else
              {
                v100 = _AKLogSiwa(v29, v30);
                v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
                if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  v102 = "Application in transferred state with strongly matching user identifier. Directly returning app"
                         "lication's credential state.";
LABEL_86:
                  _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, v102, buf, 2u);
                }
              }

              uint64_t v7 = v116;
              v116[2](v116, [v13 state], 0);
              goto LABEL_88;
            }

            v103 = _AKLogSiwa(v29, v30);
            v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              uint64_t v96 = "Application in expired state with strongly matching alternate user identifier.";
              goto LABEL_80;
            }
          }

          else
          {
            v94 = _AKLogSiwa(v29, v30);
            v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
            id v19 = v119;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              uint64_t v96 = "Application in expired state with unsafe matching user identifier.";
LABEL_80:
              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, v96, buf, 2u);
            }
          }

          uint64_t v99 = -7083LL;
LABEL_82:
          id v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v99, v113));
          uint64_t v7 = v116;
LABEL_83:
          ((void (**)(id, id, void *))v7)[2](v7, (id)2, v104);

LABEL_88:
          uint64_t v8 = v114;
LABEL_89:
          uint64_t v10 = v118;
          goto LABEL_90;
        }

        id v19 = v119;
        if ((v18 & v117) == 1)
        {
          __int128 v72 = _AKLogSiwa(v29, v30);
          id v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
          if (!os_log_type_enabled((os_log_t)v73, OS_LOG_TYPE_DEFAULT))
          {
LABEL_35:

            uint64_t v43 = [v13 state];
            uint64_t v7 = v116;
LABEL_36:
            v7[2](v7, v43, 0LL);
            goto LABEL_90;
          }

          *(_WORD *)buf = 0;
          uint64_t v74 = "Application has a credential, directly returning application's credential state.";
        }

        else
        {
          LODWORD(v113) = v117 ^ 1;
          if (!v18)
          {
            HIDWORD(v113) = 0;
            id v65 = 1;
            goto LABEL_22;
          }

          uint64_t v29 = [v6 shouldIgnoreUserID];
          if (((v29 ^ 1 | v26 | v115) & 1) != 0)
          {
            id v65 = 0;
            HIDWORD(v113) = 1;
            goto LABEL_22;
          }

          uint64_t v91 = _AKLogSiwa(v29, v30);
          id v73 = (void *)objc_claimAutoreleasedReturnValue(v91);
          if (!os_log_type_enabled((os_log_t)v73, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_35;
          }
          *(_WORD *)buf = 0;
          uint64_t v74 = "Application has a credential but user identifier match is being ignored (for internal credential state),"
                " directly returning application's credential state.";
        }

        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v73, OS_LOG_TYPE_DEFAULT, v74, buf, 2u);
        goto LABEL_35;
      }
    }

    else
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v6 teamID]);
      id v19 = (id)objc_claimAutoreleasedReturnValue( -[AKAuthorizationCredentialStateController _fetchDeveloperTeamWithTeamID:withAltDSID:]( self,  "_fetchDeveloperTeamWithTeamID:withAltDSID:",  v36,  v8));

      if (v19) {
        goto LABEL_4;
      }
    }

    id v37 = [v6 shouldIgnoreTeamID];
    __int16 v38 = (int)v37;
    id v40 = _AKLogSiwa(v37, v39);
    id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    uint64_t v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    if (v38)
    {
      if (v42)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Credential State Request has an ignore flag on the TeamID returning Credential State",  buf,  2u);
      }

      uint64_t v43 = [v13 state];
      goto LABEL_36;
    }

    if (v42)
    {
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v6 teamID]);
      *(_DWORD *)buf = 138412290;
      uint64_t v121 = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "No developer teams were found with the Team ID: %@",  buf,  0xCu);
    }

    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7073LL));
    ((void (**)(id, id, void *))v7)[2](v7, (id)2, v76);
  }

  else
  {
    uint64_t v33 = _AKLogSiwa(v14, v15);
    uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v6 clientID]);
      *(_DWORD *)buf = 138412290;
      uint64_t v121 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "No applications were found with the provided Client ID: %@",  buf,  0xCu);
    }

    id v19 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7074LL));
    ((void (**)(id, id, id))v7)[2](v7, (id)2, v19);
  }

LABEL_90:
}

void sub_10006FB7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10006FB9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006FBAC(uint64_t a1)
{
}

void sub_10006FBB4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = _AKLogSiwa(v7, v8);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100138430((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
}

void sub_10006FD9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10006FDBC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = _AKLogSiwa(v7, v8);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100138430((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
}

void sub_10006FFD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10006FFF4(uint64_t result, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

uint64_t sub_100070570(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F478;
  uint64_t v7 = qword_10020F478;
  if (!qword_10020F478)
  {
    v8[0] = *(_OWORD *)off_1001C92E0;
    v8[1] = *(_OWORD *)&off_1001C92F0;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F478 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10007061C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100070634()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_100070570((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_10007068C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F480;
  uint64_t v7 = qword_10020F480;
  if (!qword_10020F480)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100070740;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_100070740((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100070728( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100070740(uint64_t a1)
{
  Class result = objc_getClass("CLGeocoder");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_100138498();
    return (Class)sub_100070794(v3);
  }

  return result;
}

id sub_100070794()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F488;
  uint64_t v7 = qword_10020F488;
  if (!qword_10020F488)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100070848;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_100070848((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100070830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

AKPushMessageNotificationPresenter *sub_100070848(uint64_t a1)
{
  Class result = (AKPushMessageNotificationPresenter *)objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F488 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (AKPushMessageNotificationPresenter *)sub_1001384BC();
    return -[AKPushMessageNotificationPresenter initWithMessage:](v3, v4, v5);
  }

  return result;
}

void sub_10007094C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  SEL v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.authkit.pushPresenterQueue", v4);
  uint64_t v3 = (void *)qword_10020F490;
  qword_10020F490 = (uint64_t)v2;
}

void sub_100070E28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, id location)
{
}

uint64_t sub_100070E60(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

uint64_t sub_100070EAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100070EBC(uint64_t a1)
{
}

void sub_100070EC4(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100070F10(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    CFRelease(*(CFTypeRef *)(a1 + 56));
    if (a2 == 1
      && (id v5 = [WeakRetained _isPasswordPromptNecessaryForCommand:*(void *)(a1 + 64)], (_DWORD)v5))
    {
      uint64_t v6 = _AKLogSystem(v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notification requires authentication prompt.",  v8,  2u);
      }

      [WeakRetained _promptForAuthenticationPasswordForAccount:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

uint64_t sub_100071344(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100071450(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dismissed code notification.", v4, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t sub_10007166C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16LL) = *(void *)(result + 40);
  return result;
}

uint64_t sub_100071678(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), a2), "_presenterQueue");
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100071710;
  block[3] = &unk_1001C7300;
  void block[4] = *(void *)(a1 + 32);
  dispatch_sync(v5, block);

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

uint64_t sub_100071710(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16LL) = 0LL;
  return result;
}

void sub_100071CF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10013866C();
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  if (v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 locality]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 administrativeArea]);
    uint64_t v9 = (void *)v7;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v10 = _AKLogSystem(v7);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_1001385F0();
  }

  if (v8 && v9)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [v13 localizedStringForKey:@"APPLE_ID_LOCALE_AND_ADMINISTRATIVE_AREA_FORMAT" value:&stru_1001D1450 table:@"Localizable"]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v14, v8, v9));

    goto LABEL_16;
  }

  if (v8)
  {
    id v12 = v8;
LABEL_15:
    uint64_t v15 = v12;
    goto LABEL_16;
  }

  if (v9)
  {
    id v12 = v9;
    goto LABEL_15;
  }

  uint64_t v15 = 0LL;
LABEL_16:
  uint64_t v16 = _AKLogSystem(v12);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
    sub_100138590();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100072554(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t v2 = *(__CFUserNotification **)(*(void *)(a1 + 32) + 16LL);
  if (v2)
  {
    uint64_t v3 = CFUserNotificationCancel(v2);
    *(void *)(*(void *)v1 + 16LL) = 0LL;
    uint64_t v4 = _AKLogSystem(v3);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)v1 + 8) messageId]);
      int v10 = 138412290;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Torn down notification with ID: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    uint64_t v7 = _AKLogSystem(0LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100138698(v1, v5);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)v1 + 8) messageId]);
  [v8 postNotificationName:@"AKNotificationNameTornDown" object:v9];
}

uint64_t sub_100072830(uint64_t a1)
{
  uint64_t v2 = AKUserNotificationResponseAction(responseFlags);
  uint64_t v3 = _AKLogSystem(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v2));
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notification responded: %@", buf, 0xCu);
  }

  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) _notificationResultFromButtonPressed:v2]);
}

id sub_100072CA0(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    [*(id *)(a1 + 32) _startChangePasswordFlowForAccount:*(void *)(a1 + 40)];
  }
  return +[NSXPCConnection endTransaction](&OBJC_CLASS___NSXPCConnection, "endTransaction");
}

void sub_100073048(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_100138788();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000736F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100138828(a1, v3, v6);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device armed with context %@ successfully.",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _teardownPayloadWithPushMessage:*(void *)(a1 + 48) isArmed:v3 == 0]);
  (*(void (**)(uint64_t, BOOL, void *))(v8 + 16))(v8, v3 == 0LL, v9);
}

void sub_1000740FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100074118(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = WeakRetained;
  if (v3)
  {
    uint64_t v7 = _AKLogSiwa(WeakRetained, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100138A4C(v3);
    }

    [v6 _deactivate];
  }

  else
  {
    [WeakRetained _sendStartAuthorizationRequest];
  }
}

void sub_100074370( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10007439C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (v7)
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
    if ([v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
    {
      id v11 = [v7 code];

      if (v11 == (id)-7071LL)
      {
        uint64_t v14 = _AKLogSiwa(v12, v13);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Ignoring StartAuthorization another endorser is already handling it.",  v17,  2u);
        }

void sub_100074784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000747A8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (v8) {
    [WeakRetained _sendAuthorizationDidFinishRequestWithAuthorization:v8];
  }
  else {
    [WeakRetained _sendAuthorizationDidFinishRequestWithError:v5];
  }
}

void sub_100074A4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100074A78(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v10 = _AKLogSiwa(WeakRetained, v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endorseeDevice]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endorseeDevice]);
    int v14 = 138413058;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    __int16 v18 = 2112;
    id v19 = v12;
    __int16 v20 = 2048;
    uint64_t v21 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received AuthorizationDidFinish response. {response=%@, error=%@, device=%@, device_ptr=%p}",  (uint8_t *)&v14,  0x2Au);
  }

  [WeakRetained _deactivate];
}

void sub_100074E20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100074E4C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v10 = _AKLogSiwa(WeakRetained, v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endorseeDevice]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endorseeDevice]);
    int v14 = 138413058;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    __int16 v18 = 2112;
    id v19 = v12;
    __int16 v20 = 2048;
    uint64_t v21 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received AuthorizationDidFinish response. {response=%@, error=%@, device=%@, device_ptr=%p}",  (uint8_t *)&v14,  0x2Au);
  }

  [WeakRetained _deactivate];
}

void sub_1000750E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100075110(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v6 = _AKLogSiwa(WeakRetained, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100138DC4(v3, WeakRetained, v7);
    }
  }
}

void sub_100075228( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_100075260()
{
  return [v0 code];
}

void sub_1000752AC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AKAuthenticationUILiaison);
  uint64_t v2 = (void *)qword_10020F4A0;
  qword_10020F4A0 = (uint64_t)v1;
}

void sub_100075410(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100138FAC();
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v14 = *(void (**)(void))(v13 + 16);
LABEL_12:
      v14();
    }
  }

  else
  {
    uint64_t v15 = _AKLogSystem(0LL);
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = v16;
    if (v7 && v8)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        sub_100138F3C();
      }

      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        int v14 = *(void (**)(void))(v18 + 16);
        goto LABEL_12;
      }
    }

    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100138ECC();
      }

      uint64_t v19 = *(void *)(a1 + 32);
      if (v19)
      {
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7013LL));
        (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
      }
    }
  }
}

void sub_100075620(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000756E0;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 presentKeepUsingUIForContext:v7 appleID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_1000756E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000757E8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000758A8;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 dismissKeepUsingUIForContext:v7 withCompletion:*(void *)(a1 + 32)];
  }
}

void sub_1000758A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100075A54(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100075B60;
    v13[3] = &unk_1001C95D8;
    id v8 = *(void **)(a1 + 40);
    v13[4] = *(void *)(a1 + 32);
    id v14 = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v13]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100075C54;
    v11[3] = &unk_1001C9628;
    id v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    [v9 presentBasicLoginUIForContext:v7 completion:v11];
  }
}

void sub_100075B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100075BF4;
  v7[3] = &unk_1001C7438;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_100075BF4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10013900C(a1, v3, v4, v5, v6, v7, v8, v9);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100075C54(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = *(void **)(a1 + 40);
  id v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100075D5C;
  block[3] = &unk_1001C9600;
  id v23 = v12;
  id v24 = v13;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  id v18 = v9;
  dispatch_async(v14, block);
}

uint64_t sub_100075D5C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16LL))( a1[8],  a1[4],  a1[5],  a1[6],  a1[7]);
}

void sub_100075E0C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100075F08;
    v11[3] = &unk_1001C8648;
    id v12 = *(id *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v11]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100075F78;
    v9[3] = &unk_1001C6990;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissBasicLoginUIForContext:v7 completion:v9];
  }
}

void sub_100075F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100139074();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100075F78(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100139074();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100076100(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10007622C;
    v14[3] = &unk_1001C95D8;
    void v14[4] = *(void *)(a1 + 32);
    id v15 = *(id *)(a1 + 64);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v14]);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100076320;
    v12[3] = &unk_1001C9628;
    uint64_t v11 = *(void *)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 64);
    [v8 presentLoginAlertForContext:v7 withError:v11 title:v9 message:v10 completion:v12];
  }
}

void sub_10007622C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000762C0;
  v7[3] = &unk_1001C7438;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1000762C0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10013900C(a1, v3, v4, v5, v6, v7, v8, v9);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100076320(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = *(void **)(a1 + 40);
  id v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100076428;
  block[3] = &unk_1001C9600;
  id v23 = v12;
  id v24 = v13;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  id v18 = v9;
  dispatch_async(v14, block);
}

uint64_t sub_100076428(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16LL))( a1[8],  a1[4],  a1[5],  a1[6],  a1[7]);
}

void sub_100076508(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000765C8;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 presentSecondFactorUIForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_1000765C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100076700(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000767C0;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 dismissSecondFactorUIForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_1000767C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007696C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100076A30;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 56);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 presentSecondFactorAlertForContext:v7 withError:*(void *)(a1 + 32) title:*(void *)(a1 + 40) message:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_100076A30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100076CF4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v12 = a2;
  id v9 = a3;
  id v10 = a4;
  [*(id *)(a1 + 32) _sendAnalyticsEvent:a5 withError:v10];
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id, id))(v11 + 16))(v11, v12, v9, v10);
  }
}

void sub_100076D7C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, id, void))(v10 + 16))(v10, 0LL, 0LL, v9, *(void *)(a1 + 32));
    }
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100076ED0;
    v16[3] = &unk_1001C96C8;
    id v18 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 proxyWithErrorHandler:v16]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100076F4C;
    v13[3] = &unk_1001C96F0;
    uint64_t v12 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    [v11 presentServerProvidedUIForContext:v8 withConfiguration:v12 completion:v13];
  }
}

void sub_100076ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void, void, id, void))(v6 + 16))(v6, 0LL, 0LL, v3, *(void *)(a1 + 32));
  }
}

void sub_100076F4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001390D4();
    }
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, id, id, void *, void))(v13 + 16))(v13, v7, v8, v10, *(void *)(a1 + 32));
  }
}

void sub_10007708C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100077188;
    v11[3] = &unk_1001C8648;
    id v12 = *(id *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v11]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000771F8;
    v9[3] = &unk_1001C6990;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissServerProvidedUIForContext:v7 completion:v9];
  }
}

void sub_100077188(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000771F8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = _AKLogSystem(v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100139134();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007743C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v9 = a2;
  id v7 = a3;
  [*(id *)(a1 + 32) _sendAnalyticsEvent:a4 withError:v7];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
  }
}

void sub_1000774B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id, void))(v10 + 16))(v10, 0LL, v9, *(void *)(a1 + 32));
    }
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100077600;
    v16[3] = &unk_1001C96C8;
    id v18 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 proxyWithErrorHandler:v16]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100077678;
    v13[3] = &unk_1001C89A0;
    uint64_t v12 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    [v11 presentNativeRecoveryUIForContext:v8 recoveryContext:v12 completion:v13];
  }
}

void sub_100077600(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void, id, void))(v6 + 16))(v6, 0LL, v3, *(void *)(a1 + 32));
  }
}

void sub_100077678(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100139194();
    }
  }

  uint64_t v10 = _AKLogSystem(v6);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412546;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "presentNativeRecoveryUIForContext did succeed. Recovered info: %@ and error: %@",  (uint8_t *)&v13,  0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, id, void *, void))(v12 + 16))(v12, v5, v7, *(void *)(a1 + 32));
  }
}

void sub_10007782C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100077928;
    v11[3] = &unk_1001C8648;
    id v12 = *(id *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v11]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100077998;
    v9[3] = &unk_1001C6990;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissNativeRecoveryUIForContext:v7 completion:v9];
  }
}

void sub_100077928(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100077998(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = _AKLogSystem(v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001391F4();
    }
  }

  uint64_t v9 = _AKLogSystem(v5);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "dismissNativeRecoveryUIForContext did succeed.",  v11,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100077AF4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100077BB4;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 presentBiometricOrPasscodeValidationForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_100077BB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100077CE8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100077DA8;
    v9[3] = &unk_1001C8648;
    id v10 = *(id *)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 proxyWithErrorHandler:v9]);
    [v8 presentFidoAuthForContext:v7 fidoContext:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100077DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogFido();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100077EC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_100078064(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_100078194(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_1000782B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_1000783CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_1000784C4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = _AKLogSystem(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }
}

void sub_100078584(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = _AKLogSystem(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }
}

void sub_100078BAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7014LL));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_100078C04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7014LL));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_100078C5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7014LL));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_100078CB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7044LL));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

uint64_t sub_100078D0C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5], 0LL);
}

LABEL_4:
  id v12 = 1;
LABEL_5:

LABEL_16:
  return v12;
}

  swift_release(v9);
  uint64_t v3 = v42;
  if (v42 != v39) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease(v38);
  return v44;
}

void sub_100079EF4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    unsigned __int8 v6 = [*(id *)(a1 + 32) needsCredentialRecovery];
    id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _notificationDictionaryForClient:*(void *)(a1 + 48) context:*(void *)(a1 + 32) needFullUI:*(unsigned __int8 *)(a1 + 64)]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AKAlertHandler sharedInstance](&OBJC_CLASS___AKAlertHandler, "sharedInstance"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10007A0E8;
    v22[3] = &unk_1001C97D0;
    unsigned __int8 v24 = v6;
    id v23 = *(id *)(a1 + 56);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_10007A104;
    v19[3] = &unk_1001C97D0;
    unsigned __int8 v21 = v6;
    id v20 = *(id *)(a1 + 56);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10007A118;
    v17[3] = &unk_1001C78D0;
    id v18 = *(id *)(a1 + 56);
    unsigned __int8 v9 = [v8 showAlert:v7 primaryAction:v22 altAction:v19 cancelAction:v17];

    if ((v9 & 1) == 0)
    {
      uint64_t v11 = _AKLogSystem(v10);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1001394C4();
      }

      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7013LL));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7013LL,  v5));
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v16);
    }
  }
}

uint64_t sub_10007A0E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10007A104(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007A118(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7003LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10007A444(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AKAppleIDCheckInHelperService);
  id v2 = (void *)qword_10020F4B0;
  qword_10020F4B0 = (uint64_t)v1;
}

id sub_10007A504(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _setCheckInAllowedToValue:*(unsigned __int8 *)(a1 + 40) forAccount:a2];
}

uint64_t sub_10007A5FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007A70C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKAppleIDPushHelperService sharedService](&OBJC_CLASS___AKAppleIDPushHelperService, "sharedService"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 publicAPSTokenString]);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10007A7E8;
  v8[3] = &unk_1001C6B38;
  uint64_t v7 = *(void *)(a1 + 72);
  id v10 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 56);
  [v2 _checkInWithIDMSWithAccount:v3 pushToken:v5 event:v6 reason:v7 completion:v8];
}

uint64_t sub_10007A7E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007AD40(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Will notify IDMS about teardown response...",  buf,  2u);
  }

  id v4 = [*(id *)(a1 + 32) mutableCopy];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  id v6 = [v5 isProtectedWithPasscode];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v6));
  [v4 setObject:v7 forKeyedSubscript:AKPasscodeIndicatorKey];

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationContext);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSIDForAccount:*(void *)(a1 + 40)]);
  -[AKAppleIDAuthenticationContext setAltDSID:](v8, "setAltDSID:", v10);

  uint64_t v11 = objc_alloc(&OBJC_CLASS___AKGrandSlamRequestProvider);
  id v12 = -[AKURLRequestProviderImpl initWithContext:urlBagKey:]( v11,  "initWithContext:urlBagKey:",  v8,  AKURLBagKeyNotificationAck);
  id v13 = [v4 copy];
  -[AKURLRequestProviderImpl setAuthKitBody:](v12, "setAuthKitBody:", v13);

  -[AKGrandSlamRequestProvider setAuthenticatedRequest:](v12, "setAuthenticatedRequest:", 1LL);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _serviceControllerWithProvider:v12]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10007AF30;
  v15[3] = &unk_1001C7F68;
  id v17 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  [v14 executeRequestWithCompletion:v15];
}

void sub_10007AF30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (v8)
    {
      uint64_t v10 = 0LL;
      id v11 = v8;
    }

    else
    {
      uint64_t v10 = 1LL;
      id v11 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, v10, v11);
  }
}

void sub_10007B0A4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  uint64_t v5 = _AKLogSystem(state);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v7)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", state));
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity registration complete. State: %@.",  buf,  0xCu);
    }

    goto LABEL_8;
  }

  if (v7)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity says that it's time run the liveness heartbeat check-in!",  buf,  2u);
  }

  if (xpc_activity_set_state(v3, 4LL))
  {
    id v8 = (void *)os_transaction_create("com.apple.authkit.heartbeat-as-needed");
    uint64_t v9 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10007B238;
    v11[3] = &unk_1001C6538;
    id v12 = v3;
    id v13 = v8;
    id v6 = v8;
    [v9 _performLivenessCheckInForAllEligibleAccountsWithReason:1 completion:v11];

LABEL_8:
  }
}

void sub_10007B238(uint64_t a1)
{
  BOOL v1 = xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
  uint64_t v2 = _AKLogSystem(v1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "XPC activity for liveness heartbeat check-in completed!",  v4,  2u);
  }
}

void sub_10007B454( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_10007B474(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
  unsigned int v6 = [v5 isDeviceListCacheEnableDryMode];

  if (v6)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
    id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007B60C;
    block[3] = &unk_1001C6538;
    uint64_t v9 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v19 = v9;
    dispatch_async(v8, block);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSIDForAccount:*(void *)(a1 + 40)]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
  unsigned int v13 = [v12 isTokenCacheEnabled];

  if (v13)
  {
    if (v11)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AKTokenManager sharedInstance](&OBJC_CLASS___AKTokenManager, "sharedInstance"));
      uint64_t v17 = 0LL;
      [v15 deleteTokenFromCacheWithIdentifer:0 altDSID:v11 error:&v17];
    }

    else
    {
      uint64_t v16 = _AKLogSystem(v14);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEBUG)) {
        sub_100139734();
      }
    }
  }

  [*(id *)(a1 + 32) _clearBirthDayForAltDSID:v11];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_10007B60C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearDeviceListCacheForAccount:*(void *)(a1 + 40)];
}

void sub_10007B918( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_10007B94C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007BAD8(void *a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Done with account cleanup", v7, 2u);
  }

  id v4 = (void *)a1[5];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AKAppleIDPushHelperService sharedService](&OBJC_CLASS___AKAppleIDPushHelperService, "sharedService"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 publicAPSTokenString]);
  [v4 _performLivenessCheckInForAllEligibleAccountsWithToken:v6 reason:a1[7] completion:a1[6]];
}

void sub_10007BE64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, os_activity_scope_state_s state)
{
}

void sub_10007BE94(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 134349314;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Liveness check-in %{public}lu succeeded for account %@.",  (uint8_t *)&v11,  0x16u);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10013989C(a1, (uint64_t)v5, v8);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10007C1A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_10007C1B8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v8 = a2;
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    +[AKAppleIDCheckInHelperService _setCheckInAllowedToValue:forAccount:]( &OBJC_CLASS___AKAppleIDCheckInHelperService,  "_setCheckInAllowedToValue:forAccount:",  0LL,  *(void *)(a1 + 32));
    [*(id *)(a1 + 40) _handleCheckInResponse:v8 data:v7 context:*(void *)(a1 + 48) account:*(void *)(a1 + 32) error:0 completion:*(void *)(a1 + 56)];
  }
}

void sub_10007C7D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v8 && v7 && !v9)
  {
    int v11 = objc_alloc(&OBJC_CLASS___AKAttestationDataProvider);
    uint64_t v12 = -[AKURLRequestProviderImpl initWithContext:urlBagKey:]( v11,  "initWithContext:urlBagKey:",  *(void *)(a1 + 32),  AKURLBagKeyAttestedOSVersion);
    -[AKAttestationDataProvider setAttestationNonce:](v12, "setAttestationNonce:", *(void *)(a1 + 40));
    -[AKAttestationDataProvider setAttestedData:](v12, "setAttestedData:", v7);
    -[AKAttestationDataProvider setCerts:](v12, "setCerts:", v8);
    __int16 v13 = -[AKServiceControllerImpl initWithRequestProvider:]( objc_alloc(&OBJC_CLASS___AKServiceControllerImpl),  "initWithRequestProvider:",  v12);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_10007CAB0;
    v28[3] = &unk_1001C9950;
    __int128 v30 = *(_OWORD *)(a1 + 56);
    id v29 = *(id *)(a1 + 48);
    -[AKServiceControllerImpl executeRequestWithCompletion:](v13, "executeRequestWithCompletion:", v28);
  }

  else
  {
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 56), *(void *)(a1 + 64));
    uint64_t v15 = _AKSignpostLogSystem(Nanoseconds);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = v16;
    os_signpost_id_t v18 = *(void *)(a1 + 56);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = [v10 code];
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_END,  v18,  "OSVersionAttestation",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  8u);
    }

    uint64_t v20 = _AKSignpostLogSystem(v19);
    unsigned __int8 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      double v22 = (double)Nanoseconds / 1000000000.0;
      uint64_t v23 = *(void *)(a1 + 56);
      unsigned int v24 = [v10 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v32 = v23;
      __int16 v33 = 2048;
      double v34 = v22;
      __int16 v35 = 1026;
      unsigned int v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:OSVersionAttestation  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x1Cu);
    }

    uint64_t v26 = _AKLogSystem(v25);
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_1001399F8();
    }

    [*(id *)(a1 + 48) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(a1 + 48) populateUnderlyingErrorsStartingWithRootError:v10];
    uint64_t v12 = (AKAttestationDataProvider *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
    -[AKAttestationDataProvider sendEvent:](v12, "sendEvent:", *(void *)(a1 + 48));
  }
}

void sub_10007CAB0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v9 = _AKSignpostLogSystem(Nanoseconds);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  int v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    int v23 = 67240192;
    LODWORD(v24) = [v7 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "OSVersionAttestation",  " Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v23,  8u);
  }

  uint64_t v14 = _AKSignpostLogSystem(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = (double)Nanoseconds / 1000000000.0;
    uint64_t v17 = *(void *)(a1 + 40);
    unsigned int v18 = [v7 code];
    int v23 = 134218496;
    uint64_t v24 = v17;
    __int16 v25 = 2048;
    double v26 = v16;
    __int16 v27 = 1026;
    unsigned int v28 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:OSVersionAttestation  Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v23,  0x1Cu);
  }

  uint64_t v19 = *(void **)(a1 + 32);
  if (v7)
  {
    [v19 populateUnderlyingErrorsStartingWithRootError:v7];
    uint64_t v20 = _AKLogSystem([*(id *)(a1 + 32) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed]);
    unsigned __int8 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_100139A5C();
    }
  }

  else
  {
    [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
  }

  double v22 = (void *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
  [v22 sendEvent:*(void *)(a1 + 32)];
}

void sub_10007CF64(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412803;
    uint64_t v10 = v8;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2113;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Clear device list cache completed for context - %@ with status - %d and error - %{private}@",  (uint8_t *)&v9,  0x1Cu);
  }
}

void sub_10007D4FC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _processCredentialStateChanges:v7 completion:*(void *)(a1 + 40)];
  }
}

id sub_10007D5C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processCredentialStateChanges:a2];
}

void sub_10007D6FC(void *a1, uint64_t a2, void *a3)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  id v6 = a3;
  [v4 _credentialStateDidChange:0 forApplicationWithClientID:v5];
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10007D860( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10007D878(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007D888(uint64_t a1)
{
}

void sub_10007D890(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) _processCredentialStateChanges:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10007D934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  signed int v6 = [a2 intValue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10007D9BC;
  v7[3] = &unk_1001C99D0;
  void v7[4] = *(void *)(a1 + 32);
  void v7[5] = v6;
  [v5 enumerateObjectsUsingBlock:v7];
}

id sub_10007D9BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _credentialStateDidChange:*(void *)(a1 + 40) forApplicationWithClientID:a2];
}

void sub_10007DBC8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = _AKLogSiwa(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100139B4C((uint64_t)v2, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_10007DC18(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSiwa();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = @"NO";
    int v10 = 138412802;
    if (a2) {
      uint64_t v9 = @"YES";
    }
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    __int16 v13 = v9;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Client (%@) was notified %@ with error %@",  (uint8_t *)&v10,  0x20u);
  }
}

id sub_10007DDB8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _broadcastCredentialStateChange:*(void *)(a1 + 48) forApplicationWithClientID:*(void *)(a1 + 40) withHandlerBundleID:a2];
}

void sub_10007DF00(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = _AKLogSiwa(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100139BB4((uint64_t)v2, v5, v6, v7, v8, v9, v10, v11);
  }
}

id sub_10007E584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return +[NSXPCConnection endTransaction](&OBJC_CLASS___NSXPCConnection, "endTransaction");
}

id sub_10007E64C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return +[NSXPCConnection endTransaction](&OBJC_CLASS___NSXPCConnection, "endTransaction");
}

void sub_10007E6B4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.authkit.itemstorequeue", v4);
  uint64_t v3 = (void *)qword_10020F4C0;
  qword_10020F4C0 = (uint64_t)v2;
}

uint64_t sub_10007E984(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007F0E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10007F108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007F118(uint64_t a1)
{
}

void sub_10007F120(void *a1)
{
  dispatch_queue_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = objc_msgSend(v2, "_unsafe_openDatabase:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = v4;
}

void sub_10007F5C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10007F5E0(uint64_t a1)
{
  dispatch_queue_attr_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v2 + 40);
  objc_msgSend(v1, "_unsafe_wipeDatabase:", &obj);
  objc_storeStrong((id *)(v2 + 40), obj);
}

id sub_10007F764(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_closeDatabase");
}

void sub_10007F86C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10007F958(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10020F4D0;
  qword_10020F4D0 = (uint64_t)v1;
}

void sub_10007FCFC(_Unwind_Exception *a1)
{
}

void sub_10007FD1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _removeConnectionWithProtocol:*(void *)(a1 + 32) forBundleID:*(void *)(a1 + 40)];
}

void sub_10007FD58(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)]);
  if (!v4)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "setObject:forKey:");
  }

  uint64_t v2 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v4 setObject:*(void *)(a1 + 56) forKey:v3];
}

void sub_10007FE9C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v2 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v4 removeObjectForKey:v3];
  if (![v4 count]) {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
  }
}

id sub_10007FFD8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v3 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v4]);

  return v5;
}

void sub_100080154(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKMIDValidator);
  uint64_t v2 = (void *)qword_10020F4E0;
  qword_10020F4E0 = (uint64_t)v1;
}

void sub_1000801BC(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.akd.anisette.validate", v4);
  uint64_t v3 = (void *)qword_10020F4F0;
  qword_10020F4F0 = (uint64_t)v2;
}

void sub_100080304(uint64_t a1)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v16 = 0LL;
  id v5 = [v2 _calculateAndPersistDriftStatusForMID:v3 anisetteFetchError:v4 error:&v16];
  id v6 = v16;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  id v8 = [v7 lastKnownIDMSEnvironment];

  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v5 == (id)2;
  }
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_generalErrorWithCode:errorDomain:underlyingError:]( &OBJC_CLASS___NSError,  "ak_generalErrorWithCode:errorDomain:underlyingError:",  -8019LL,  AKAnisetteErrorDomain,  *(void *)(a1 + 48)));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createErrorWithMIDDriftUnderlyingError:v10 anisetteFetchError:*(void *)(a1 + 48)]);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[AAFAnalyticsEvent ak_analyticsEventWithEventName:error:]( &OBJC_CLASS___AAFAnalyticsEvent,  "ak_analyticsEventWithEventName:error:",  @"com.apple.authkit.midInvalidated",  v11));
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
    [v13 sendEvent:v12];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
    if ([v14 isMIDDriftTTRDisabled])
    {
    }

    else
    {
      unsigned int v15 = [*(id *)(a1 + 32) _isTTREligibleForMIDDriftedError:v11];

      if (v15) {
        [*(id *)(a1 + 32) _triggerTTRForMIDDriftedError:v11];
      }
    }
  }
}

id sub_1000806EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  a2));
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"percentage"]);
  if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0) {
    id v7 = v6;
  }
  else {
    id v7 = 0LL;
  }

  uint64_t v8 = (uint64_t)[v7 integerValue];
  else {
    unint64_t v9 = v8 & ~(v8 >> 63);
  }
  uint64_t v10 = arc4random_uniform(0x65u);
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = _AKLogSystem(v10);
  __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_10013A360();
  }

  [v3 setObject:0 forKeyedSubscript:@"percentage"];
  if (v9 >= v11) {
    id v14 = [v3 isEqualToDictionary:*(void *)(a1 + 32)];
  }
  else {
    id v14 = 0LL;
  }

  return v14;
}

void sub_10008102C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  dispatch_queue_t v2 = (void *)qword_10020F500;
  qword_10020F500 = (uint64_t)v1;
}

void sub_1000815A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10013A850();
    }
    __int16 v13 = 0LL;
LABEL_11:

    goto LABEL_12;
  }

  id v14 = *(void **)(a1 + 32);
  id v24 = 0LL;
  unsigned int v15 = [v14 validateResponseData:v8 error:&v24];
  id v10 = v24;
  if (v15)
  {
    uint64_t v12 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v8, 4LL);
    uint64_t v16 = _AKLogSystem(v12);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) custodianUUID]);
      *(_DWORD *)buf = 138412802;
      double v26 = v18;
      __int16 v27 = 2112;
      id v28 = v7;
      __int16 v29 = 2112;
      __int128 v30 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Successfully initiated custodian setup for custodianUUID %@\nresponse: %@\ndata: %@",  buf,  0x20u);
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
    __int16 v13 = (void *)objc_opt_new(&OBJC_CLASS___AKCustodianSetupResult);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"encryptedPRKC"]);
    if ([v20 length])
    {
      unsigned __int8 v21 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v20,  0LL);
      [v13 setEncryptedPRKC:v21];
    }

    double v22 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"ownerCustodianAltDSID"]);
    [v13 setOwnerCustodianAltDSID:v22];

    goto LABEL_11;
  }

  __int16 v13 = 0LL;
LABEL_12:
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23) {
    (*(void (**)(uint64_t, void *, id))(v23 + 16))(v23, v13, v10);
  }
}

void sub_100081A40(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10013A934();
    }
    goto LABEL_11;
  }

  __int16 v13 = *(void **)(a1 + 32);
  id v21 = 0LL;
  unsigned int v14 = [v13 validateResponseData:v8 error:&v21];
  id v10 = v21;
  uint64_t v15 = _AKLogSystem(v10);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v12 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10013A934();
    }
LABEL_11:

    uint64_t v20 = *(void *)(a1 + 48);
    if (v20)
    {
      uint64_t v19 = *(void (**)(void))(v20 + 16);
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) custodianUUID]);
    *(_DWORD *)buf = 138412546;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    id v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully finalize custodianship for custodianUUID %@, response: %@",  buf,  0x16u);
  }

  uint64_t v18 = *(void *)(a1 + 48);
  if (v18)
  {
    uint64_t v19 = *(void (**)(void))(v18 + 16);
LABEL_13:
    v19();
  }

void sub_100081E14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10013A9EC();
    }
    goto LABEL_11;
  }

  __int16 v13 = *(void **)(a1 + 32);
  id v21 = 0LL;
  unsigned int v14 = [v13 validateResponseData:v8 error:&v21];
  id v10 = v21;
  uint64_t v15 = _AKLogSystem(v10);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v12 = v16;
  if (!v14)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10013A9EC();
    }
LABEL_11:

    uint64_t v20 = *(void *)(a1 + 48);
    if (v20)
    {
      uint64_t v19 = *(void (**)(void))(v20 + 16);
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) custodianUUID]);
    *(_DWORD *)buf = 138412546;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    id v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully aborted custodian setup for custodianUUID %@, response: %@",  buf,  0x16u);
  }

  uint64_t v18 = *(void *)(a1 + 48);
  if (v18)
  {
    uint64_t v19 = *(void (**)(void))(v18 + 16);
LABEL_13:
    v19();
  }

LABEL_20:
}

  uint64_t v5 = (v11 - 1) & v11;
  __int16 v13 = __clz(__rbit64(v11)) + (v6 << 6);
  while (1)
  {
    *(void *)(v0 + 32) = v6;
    *(void *)(v0 + 40) = v5;
    unsigned int v14 = (void *)(*(void *)(v9 + 48) + 16 * v13);
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = *v14;
    uint64_t v15 = v14[1];
    *(void *)(v0 + 56) = v15;
    uint64_t v16 = *(void **)(*(void *)(v9 + 56) + 8 * v13);
    *(void *)(v0 + 64) = v16;
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = v16;
    uint64_t v18 = [v17 deletedDeviceList];
    if (!v18)
    {

      swift_bridgeObjectRelease(v15);
      if (!v5) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }

    uint64_t v19 = v18;
    uint64_t v20 = sub_1000D0510(0LL, &qword_10020DE40, &OBJC_CLASS___AKRemoteDevice_ptr);
    id v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
    *(void *)(v0 + 72) = v21;

    if ((unint64_t)v21 >> 62)
    {
      double v26 = v21 < 0 ? v21 : v21 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v21);
      double v22 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v21);
    }

    else
    {
      double v22 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    *(void *)(v0 + 80) = v22;
    uint64_t v23 = *(void *)(v0 + 72);
    if (v22) {
      break;
    }
    __int16 v24 = *(void **)(v0 + 64);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(v23);

    id v6 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    if (!v5) {
      goto LABEL_7;
    }
LABEL_26:
    id v25 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    __int16 v13 = v25 | (v6 << 6);
    id v9 = *(void *)(v0 + 16);
  }

  if ((v23 & 0xC000000000000001LL) != 0) {
    __int16 v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 72));
  }
  else {
    __int16 v27 = *(id *)(v23 + 32);
  }
  id v28 = (uint64_t)v27;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = v27;
  *(void *)(v0 + 96) = 1LL;
  __int16 v29 = (void *)swift_task_alloc(dword_10020DE4C);
  *(void *)(v0 + 104) = v29;
  *__int16 v29 = v0;
  v29[1] = sub_1000D013C;
  sub_1000CEC10(v28, *(void *)(v0 + 48), *(void *)(v0 + 56));
}

  uint64_t v5 = (v11 - 1) & v11;
  __int16 v13 = __clz(__rbit64(v11)) + (v6 << 6);
  while (1)
  {
    *(void *)(v0 + 40) = v6;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v5;
    unsigned int v14 = (void *)(*(void *)(v9 + 48) + 16 * v13);
    *(void *)(v0 + 56) = *v14;
    uint64_t v15 = v14[1];
    *(void *)(v0 + 64) = v15;
    uint64_t v16 = *(void **)(*(void *)(v9 + 56) + 8 * v13);
    *(void *)(v0 + 72) = v16;
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = v16;
    uint64_t v18 = [v17 deviceList];
    if (!v18)
    {

      swift_bridgeObjectRelease(v15);
      if (!v5) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }

    uint64_t v19 = v18;
    uint64_t v20 = sub_1000D0510(0LL, &qword_10020DE40, &OBJC_CLASS___AKRemoteDevice_ptr);
    id v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
    *(void *)(v0 + 80) = v21;

    if ((unint64_t)v21 >> 62)
    {
      double v26 = v21 < 0 ? v21 : v21 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v21);
      double v22 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v21);
    }

    else
    {
      double v22 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v22;
    uint64_t v23 = *(void *)(v0 + 80);
    if (v22) {
      break;
    }
    __int16 v24 = *(void **)(v0 + 72);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(v23);

    id v6 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    if (!v5) {
      goto LABEL_7;
    }
LABEL_26:
    id v25 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    __int16 v13 = v25 | (v6 << 6);
    id v9 = *(void *)(v0 + 16);
  }

  if ((v23 & 0xC000000000000001LL) != 0) {
    __int16 v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 80));
  }
  else {
    __int16 v27 = *(id *)(v23 + 32);
  }
  id v28 = (uint64_t)v27;
  *(void *)(v0 + 96) = v27;
  *(void *)(v0 + 104) = 1LL;
  __int16 v29 = (void *)swift_task_alloc(dword_10020E594);
  *(void *)(v0 + 112) = v29;
  *__int16 v29 = v0;
  v29[1] = sub_1000DE884;
  sub_1000DEC14(v28, *(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_100082210(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013AAFC();
    }

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      unsigned int v14 = *(void (**)(void))(v13 + 16);
LABEL_10:
      v14();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) custodianUUID]);
      int v17 = 138412546;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully updated recovery key for custodianUUID %@, response: %@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      unsigned int v14 = *(void (**)(void))(v16 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000825AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000825C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000825D4(uint64_t a1)
{
}

void sub_1000825DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013ABF4();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ownerAppleID]);
      int v17 = 138412546;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully started an account recovery for account %@, response: %@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v12 = *(os_log_s **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, void, id))(v16 + 16))( v16,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  v9);
  }
}

void sub_1000829D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1000829F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013AC80();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully started an account recovery transaction, response: %@",  (uint8_t *)&v14,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, void, id))(v13 + 16))( v13,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  v9);
  }
}

void sub_100082CA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100082CC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013ACE0();
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v14 = *(void (**)(void))(v13 + 16);
LABEL_19:
      v14();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v59 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Call to fetch custodian recovery token returned with response: %@",  buf,  0xCu);
    }

    id v15 = [v7 statusCode];
    uint64_t v16 = _AKLogSystem(v15);
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v15));
      *(_DWORD *)buf = 138412290;
      id v59 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Vetting validation completed with HTTP status code: %@",  buf,  0xCu);
    }

    if (v15 == (id)200)
    {
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
      id v20 = v19;
      if (v19)
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:AKErrorStatusCodeKey]);
        id v22 = [v21 integerValue];
        if (v22)
        {
          uint64_t v23 = _AKLogSystem(v22);
          __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_10012D6DC(v21, v24);
          }

          uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
          uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8LL);
          __int16 v27 = *(void **)(v26 + 40);
          *(void *)(v26 + 40) = v25;

          uint64_t v28 = *(void *)(a1 + 32);
          if (v28) {
            (*(void (**)(uint64_t, void, void))(v28 + 16))( v28,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
          }
        }

        else
        {
          unsigned __int8 v39 = (void *)objc_claimAutoreleasedReturnValue([v7 allHeaderFields]);
          id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 objectForKeyedSubscript:AKCustodianRecoveryTokenKey]);
          id v41 = (void *)objc_claimAutoreleasedReturnValue([v39 objectForKeyedSubscript:AKAltDSIDHeaderKey]);
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[AKToken tokenWithBase64String:](&OBJC_CLASS___AKToken, "tokenWithBase64String:", v40));
          if (v42 && [v41 length])
          {
            uint64_t v57 = v40;
            uint64_t v43 = objc_claimAutoreleasedReturnValue([v42 stringValue]);
            id v44 = v41;
            uint64_t v45 = (void *)v43;
            uint64_t v56 = v44;
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@:%@",  v44,  v43));

            uint64_t v55 = v46;
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 dataUsingEncoding:4]);
            uint64_t v48 = v47;
            uint64_t v49 = *(void *)(a1 + 32);
            if (v49)
            {
              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v47 base64EncodedStringWithOptions:0]);
              (*(void (**)(uint64_t, void *, void))(v49 + 16))(v49, v50, 0LL);
            }

            id v41 = v56;
            id v40 = v57;
          }

          else
          {
            uint64_t v51 = objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
            uint64_t v52 = *(void *)(*(void *)(a1 + 40) + 8LL);
            uint64_t v53 = *(void **)(v52 + 40);
            *(void *)(v52 + 40) = v51;

            uint64_t v54 = *(void *)(a1 + 32);
            if (v54) {
              (*(void (**)(uint64_t, void, void))(v54 + 16))( v54,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
            }
          }
        }
      }

      else
      {
        uint64_t v33 = _AKLogSystem(0LL);
        double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_1001334AC();
        }

        uint64_t v35 = objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7010LL));
        uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8LL);
        id v37 = *(void **)(v36 + 40);
        *(void *)(v36 + 40) = v35;

        uint64_t v38 = *(void *)(a1 + 32);
        if (v38) {
          (*(void (**)(uint64_t, void, void))(v38 + 16))( v38,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
        }
      }
    }

    else
    {
      uint64_t v29 = objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
      uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v31 = *(void **)(v30 + 40);
      *(void *)(v30 + 40) = v29;

      uint64_t v32 = *(void *)(a1 + 32);
      if (v32)
      {
        int v14 = *(void (**)(void))(v32 + 16);
        goto LABEL_19;
      }
    }
  }
}

void sub_100083414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10008342C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013ABF4();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[4];
      int v17 = 138412546;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched data recovery key for account with altDSID %@, response: %@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
    uint64_t v15 = *(void *)(a1[6] + 8LL);
    uint64_t v12 = *(os_log_s **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  uint64_t v16 = a1[5];
  if (v16) {
    (*(void (**)(uint64_t, void, id))(v16 + 16))(v16, *(void *)(*(void *)(a1[6] + 8LL) + 40LL), v9);
  }
}

LABEL_23:
}
}

    id v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    int v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    __int16 v19 = sub_1000F9BB8(v16, v17);
    id v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease(v18);
      return 0LL;
    }

    id v22 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
    uint64_t v23 = swift_bridgeObjectRetain(v22);
    __int16 v24 = sub_1000C5000(v23, v18);
    swift_bridgeObjectRelease(v18);
    uint64_t result = swift_bridgeObjectRelease(v22);
    if ((v24 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }

    id v6 = (v11 - 1) & v11;
    uint64_t v33 = v12;
    id v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    int v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    uint64_t v18 = Hasher._finalize()();
    __int16 v19 = -1LL << *(_BYTE *)(a2 + 32);
    id v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    id v21 = *(void *)(a2 + 48);
    id v22 = (void *)(v21 + 16 * v20);
    uint64_t v23 = v22[1];
    __int16 v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0LL) & 1) == 0)
    {
      uint64_t v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        __int16 v27 = i & v25;
        uint64_t v28 = (void *)(v21 + 16 * v27);
        uint64_t v29 = v28[1];
        uint64_t v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0LL) & 1) != 0) {
          goto LABEL_7;
        }
      }

    id v6 = (v17 - 1) & v17;
    uint64_t v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1000F2AD0(v12, v13);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v13);
    uint64_t result = swift_bridgeObjectRelease(v15);
  }

  uint64_t v18 = v16 + 4;
  if (v18 >= v7) {
    return swift_release(v2);
  }
  int v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    id v8 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    id v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    int v17 = *(void *)(v3 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    id v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    __int16 v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    uint64_t result = Hasher._finalize()();
    id v20 = -1LL << v8[32];
    id v21 = result & ~v20;
    id v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          id v22 = 0LL;
        }
        v24 |= v26;
        __int16 v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    id *v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000CC5C0(a1);
    return swift_release(a3);
  }

  sub_1000F0A1C(v20, a4 & 1, &qword_10020EBC0);
  id v22 = sub_1000F9BB8(v12, v13);
  if ((v21 & 1) == (v23 & 1))
  {
    int v17 = v22;
    __int16 v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v25 = v14;
    uint64_t v26 = 8 * v17;
    __int16 v27 = *(id *)(v24[7] + 8 * v17);
    swift_bridgeObjectRelease(v13);

    uint64_t v28 = v24[7];
    *(void *)(v28 + v26) = v27;
    goto LABEL_13;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

void sub_1000837EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10013AEB8();
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      (*(void (**)(uint64_t, id))(v13 + 16))(v13, v9);
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Embargo end feedback call returned with response: %@",  (uint8_t *)&v20,  0xCu);
    }

    id v14 = [v7 statusCode];
    uint64_t v15 = _AKLogSystem(v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
      int v20 = 138412290;
      id v21 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Embargo end feedback completed with HTTP status code: %@",  (uint8_t *)&v20,  0xCu);
    }

    uint64_t v18 = *(void *)(a1 + 32);
    if (v14 == (id)200)
    {
      if (v18) {
        (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0LL);
      }
    }

    else if (v18)
    {
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
      (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);
    }
  }
}

LABEL_33:
    uint64_t v16 = 0;
    goto LABEL_34;
  }

  uint64_t v13 = _AKLogSystem(v9);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_10013AE8C();
  }

  if (!a5) {
    goto LABEL_33;
  }
  uint64_t v15 = -7026LL;
LABEL_12:
  uint64_t v16 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", v15));
LABEL_34:

  return v16;
}

      swift_release(v5);

      (*(void (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
      return;
    }

    break;
  }

  __break(1u);
LABEL_35:
  __break(1u);
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    double v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    id v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    int v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          int v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int16 v19 = 16 * v18;
    int v20 = (void *)(*(void *)(v8 + 48) + v19);
    void *v20 = v35;
    v20[1] = v34;
    id v21 = (void *)(*(void *)(v8 + 56) + v19);
    *id v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  uint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unsigned __int8 v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    int v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      __int16 v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    __int16 v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    id v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    double v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      uint64_t v35 = v34;
    }

    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    int v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      __int16 v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      __int16 v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    void *v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  __int16 v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int16 v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

void sub_100083FC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100083FDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v11 = WeakRetained;
  if (v9)
  {
    uint64_t v12 = WeakRetained;
    uint64_t v13 = _AKLogSystem(WeakRetained);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10013B078();
    }
LABEL_4:
    id v15 = 0LL;
    goto LABEL_23;
  }

  if (!WeakRetained)
  {
    uint64_t v12 = 0LL;
    uint64_t v22 = _AKLogSystem(0LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10013B04C();
    }
    goto LABEL_4;
  }

  id v14 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v8, 4LL);
  uint64_t v16 = _AKLogSystem(v14);
  int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v48 = v7;
    __int16 v49 = 2112;
    uint64_t v50 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Successfully performed TrustedContactsDataSync\nresponse: %@\ndata: %@",  buf,  0x16u);
  }

  id v44 = v8;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
  id v15 = objc_alloc_init(&OBJC_CLASS___AKTrustedContactsSyncResult);
  uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString, v19);
  id v21 = (id)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"custodianListVersion"]);
  if ((objc_opt_isKindOfClass(v21, v20) & 1) != 0) {
    id v46 = v21;
  }
  else {
    id v46 = 0LL;
  }

  uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSString, v23);
  id v25 = (id)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"beneficiaryListVersion"]);
  if ((objc_opt_isKindOfClass(v25, v24) & 1) != 0) {
    id v43 = v25;
  }
  else {
    id v43 = 0LL;
  }

  uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSArray, v26);
  id v28 = (id)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"custodianUUIDs"]);
  if ((objc_opt_isKindOfClass(v28, v27) & 1) != 0) {
    id v29 = v28;
  }
  else {
    id v29 = 0LL;
  }

  uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSArray, v30);
  id v32 = (id)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"beneficiaryUUIDs"]);
  id v45 = v7;
  if ((objc_opt_isKindOfClass(v32, v31) & 1) != 0) {
    id v33 = v32;
  }
  else {
    id v33 = 0LL;
  }
  id v41 = v33;

  uint64_t v42 = v29;
  double v34 = (void *)objc_claimAutoreleasedReturnValue([v11 _trustedContactOperationsByIDFromArray:v29]);
  uint64_t v12 = v11;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v11 _trustedContactOperationsByIDFromArray:v33]);
  [v15 setCustodianListVersion:v46];
  [v15 setBeneficiaryListVersion:v43];
  [v15 setCustodianOperationsByID:v34];
  [v15 setBeneficiaryOperationsByID:v35];
  uint64_t v36 = *(void **)(a1 + 32);
  id v37 = (void *)objc_claimAutoreleasedReturnValue([v15 custodianListVersion]);
  [v36 setCustodianListVersion:v37 forAccount:*(void *)(a1 + 40)];

  uint64_t v38 = *(void **)(a1 + 32);
  unsigned __int8 v39 = (void *)objc_claimAutoreleasedReturnValue([v15 beneficiaryListVersion]);
  [v38 setBeneficiaryListVersion:v39 forAccount:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) saveAccount:*(void *)(a1 + 40) error:0];
  id v8 = v44;
  id v7 = v45;
LABEL_23:

  uint64_t v40 = *(void *)(a1 + 48);
  if (v40) {
    (*(void (**)(uint64_t, id, id))(v40 + 16))(v40, v15, v9);
  }
}

void sub_100084E18( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100084E74(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKTokenManager);
  dispatch_queue_t v2 = (void *)qword_10020F510;
  qword_10020F510 = (uint64_t)v1;
}

void sub_100085138(void *a1)
{
  uint64_t v3 = -[AKTokenRequestContext initWithIdentifier:altDSID:]( objc_alloc(&OBJC_CLASS___AKTokenRequestContext),  "initWithIdentifier:altDSID:",  a1[4],  a1[5]);
  -[AKTokenRequestContext setToken:](v3, "setToken:", a1[6]);
  [*(id *)(a1[7] + 24) updateWithContext:v3];
  [*(id *)(a1[7] + 32) updateWithContext:v3 error:a1[10]];
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  [v2 setToken:a1[6] tokenID:a1[4] account:a1[8] credential:a1[9]];
}

uint64_t sub_1000854F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100085504(uint64_t a1)
{
}

void sub_10008550C(uint64_t a1)
{
  dispatch_queue_t v2 = -[AKTokenRequestContext initWithIdentifier:altDSID:]( objc_alloc(&OBJC_CLASS___AKTokenRequestContext),  "initWithIdentifier:altDSID:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) fetchWithContext:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v7 = _AKLogSystem(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10013B728();
    }

    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 32) fetchWithContext:v2 error:*(void *)(a1 + 120)]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
  uint64_t v14 = _AKLogSystem(v13);
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    if (v16) {
      sub_10013B6FC();
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
    unsigned int v18 = [v17 isTokenCreationTimeEnabled];

    if (v18)
    {
      uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      if (!v19) {
        goto LABEL_13;
      }
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v19 creationDate]);
      if (!v19) {
        goto LABEL_13;
      }
      uint64_t v20 = v19;
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) creationDate]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) creationDate]);
      id v23 = [v21 compare:v22];

      if (v23 != (id)1)
      {
        uint64_t v26 = *(void *)(a1 + 96);
      }

      else
      {
LABEL_13:
        uint64_t v24 = _AKLogSystem(v19);
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          sub_10013B6D0();
        }

        objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
        uint64_t v26 = *(void *)(a1 + 80);
      }

      *(_BYTE *)(*(void *)(v26 + 8) + 24LL) = 1;
    }

    else
    {
      objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
    }
  }

  else
  {
    if (v16) {
      sub_10013B6A4();
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 1;
    if (*(void *)(a1 + 120))
    {
      uint64_t v27 = _AKLogSystem(v19);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_10013B638(a1 + 120, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    uint64_t v36 = objc_claimAutoreleasedReturnValue( [v35 _tokenWithName:*(void *)(a1 + 32) forAccount:*(void *)(a1 + 56) error:*(void *)(a1 + 120)]);
    uint64_t v37 = *(void *)(*(void *)(a1 + 104) + 8LL);
    uint64_t v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = v36;

    if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL))
    {
      uint64_t v39 = _AKLogSystem(v19);
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
        sub_10013B60C();
      }

      id v41 = (void *)objc_claimAutoreleasedReturnValue(+[AKFeatureManager sharedManager](&OBJC_CLASS___AKFeatureManager, "sharedManager"));
      unsigned int v42 = [v41 isTokenCreationTimeEnabled];

      if (v42)
      {
        id v44 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
        id v45 = (void *)objc_claimAutoreleasedReturnValue( [v44 tokenCreationDateWithIdentifier:*(void *)(a1 + 32) forAccount:*(void *)(a1 + 56) error:0]);

        id v46 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        if (!v46
          || v45
          && (uint64_t v47 = objc_claimAutoreleasedReturnValue([v46 creationDate])) != 0
          && (id v48 = (void *)v47,
              __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                                 + 40LL), "creationDate")),
              id v50 = [v45 compare:v49],
              v49,
              v48,
              v50 == (id)1))
        {
          uint64_t v51 = _AKLogSystem(v46);
          uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
            sub_10013B5B4();
          }

          uint64_t v53 = objc_claimAutoreleasedReturnValue( +[AKToken tokenWithValue:lifetime:]( &OBJC_CLASS___AKToken,  "tokenWithValue:lifetime:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL),  0LL));
          uint64_t v54 = *(void *)(*(void *)(a1 + 72) + 8LL);
          uint64_t v55 = *(void **)(v54 + 40);
          *(void *)(v54 + 40) = v53;
        }
      }

      else
      {
        uint64_t v56 = _AKLogSystem(v43);
        uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
          sub_10013B5E0();
        }

        uint64_t v58 = objc_claimAutoreleasedReturnValue( +[AKToken tokenWithValue:lifetime:]( &OBJC_CLASS___AKToken,  "tokenWithValue:lifetime:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL),  0LL));
        uint64_t v59 = *(void *)(*(void *)(a1 + 72) + 8LL);
        uint64_t v60 = *(void **)(v59 + 40);
        *(void *)(v59 + 40) = v58;
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL) = 1;
    }
  }

  if (*(_BYTE *)(a1 + 128) && *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    uint64_t v61 = _AKLogSystem(v19);
    uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)) {
      sub_10013B50C((void *)a1, v62);
    }

    NSErrorUserInfoKey v63 = -[AKTokenRequestContext initWithIdentifier:altDSID:]( objc_alloc(&OBJC_CLASS___AKTokenRequestContext),  "initWithIdentifier:altDSID:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
    -[AKTokenRequestContext setToken:](v63, "setToken:", *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)) {
      [*(id *)(*(void *)(a1 + 48) + 24) updateWithContext:v63];
    }
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL)) {
      [*(id *)(*(void *)(a1 + 48) + 32) updateWithContext:v63 error:*(void *)(a1 + 120)];
    }
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL))
    {
      id v64 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
      uint64_t v65 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      uint64_t v66 = *(void *)(a1 + 32);
      uint64_t v67 = *(void **)(a1 + 56);
      unsigned int v68 = (void *)objc_claimAutoreleasedReturnValue([v67 credentialWithError:*(void *)(a1 + 120)]);
      [v64 setToken:v65 tokenID:v66 account:v67 credential:v68];
    }
  }
}

void sub_100085F5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100085F74(void *a1)
{
  dispatch_queue_t v2 = -[AKTokenRequestContext initWithIdentifier:altDSID:]( objc_alloc(&OBJC_CLASS___AKTokenRequestContext),  "initWithIdentifier:altDSID:",  a1[4],  a1[5]);
  uint64_t v3 = *(void **)(a1[6] + 24LL);
  if (a1[4])
  {
    [v3 deleteWithContext:v2];
    id v4 = [*(id *)(a1[6] + 32) deleteWithContext:v2 error:a1[9]];
  }

  else
  {
    [v3 clearAllTokensForAltDSID:a1[5]];
    id v4 = [*(id *)(a1[6] + 32) clearAllTokensForAltDSID:a1[5] error:a1[9]];
  }

  if (*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
  {
    uint64_t v5 = _AKLogSystem(v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10013B814();
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    [v7 setToken:0 tokenID:a1[4] account:*(void *)(*(void *)(a1[8] + 8) + 40) credential:a1[7]];
  }
}

void sub_10008667C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013B86C((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  uint64_t v16 = *(void *)(a1 + 32);
  if (v16) {
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v7);
  }
}

void sub_100086838(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013B910();
    }
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
  }
}

void sub_100086978(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013B98C();
    }
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
  }
}

void sub_100086AB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013BA08();
    }
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
  }
}

void sub_100086C28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10013BAF4();
    }
    id v10 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully setup Beneficiary Alias\nresponse: %@",  (uint8_t *)&v13,  0xCu);
    }

    id v10 = objc_alloc_init(&OBJC_CLASS___AKBeneficiaryAliasSetupResult);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"beneficiaryADSID"]);
    [v10 setBeneficiaryAltDSID:v11];

    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"beneficiaryAccountName"]);
    [v10 setBeneficiaryAccountName:v9];
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, id, id))(v12 + 16))(v12, v10, v6);
  }
}

void sub_100086F10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100086F2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100086F3C(uint64_t a1)
{
}

void sub_100086F44(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10013BB70((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }

    id v19 = v10;
  }

  else
  {
    uint64_t v20 = (void *)a1[4];
    id v29 = 0LL;
    unsigned int v21 = [v20 validateResponseData:v8 error:&v29];
    id v22 = v29;
    id v19 = v22;
    if (v21)
    {
      uint64_t v23 = _AKLogSystem(v22);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v31 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Successfully executed the request with response: %@",  buf,  0xCu);
      }

      uint64_t v25 = objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v8,  @"application/json"));
      uint64_t v26 = *(void *)(a1[6] + 8LL);
      uint64_t v27 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;
    }
  }

  uint64_t v28 = a1[5];
  if (v28) {
    (*(void (**)(uint64_t, void, id))(v28 + 16))(v28, *(void *)(*(void *)(a1[6] + 8LL) + 40LL), v19);
  }
}

uint64_t sub_1000870D8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

  ;
}

void sub_1000872C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000872DC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_text(a2, 0);
  if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 intValue];
  }

void sub_10008743C(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stringFromColumn:1 inStatement:a2]);
  if (v4)
  {
    id v9 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stringFromColumn:2 inStatement:a2]);
    id v6 = v5;
    if (v5) {
      id v7 = v5;
    }
    else {
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }
    id v8 = v7;

    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v9];
    id v4 = v9;
  }
}

void sub_10008773C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKURLBagService);
  dispatch_queue_t v2 = (void *)qword_10020F520;
  qword_10020F520 = (uint64_t)v1;

  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.authkit.urlbag.trafficQueue", v4);
  id v6 = *(void **)(qword_10020F520 + 8);
  *(void *)(qword_10020F520 + _Block_object_dispose(va, 8) = v5;

  dispatch_queue_attr_t v7 = dispatch_queue_attr_make_with_autorelease_frequency( &_dispatch_queue_attr_concurrent,  DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v10 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v7);
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.authkit.urlbag.clearanceQueue", v10);
  id v9 = *(void **)(qword_10020F520 + 16);
  *(void *)(qword_10020F520 + 16) = v8;
}

void sub_100087A68(uint64_t a1)
{
  dispatch_queue_t v2 = objc_opt_new(&OBJC_CLASS___NSDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  dispatch_queue_t v5 = objc_opt_new(&OBJC_CLASS___NSDictionary);
  uint64_t v6 = *(void *)(a1 + 32);
  dispatch_queue_attr_t v7 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = v5;
}

void sub_100087DE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100087E14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100087E24(uint64_t a1)
{
}

void sub_100087E2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100088190(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v9)
  {
    id v9 = +[AKAccountManager isAccountsFrameworkAvailable]( &OBJC_CLASS___AKAccountManager,  "isAccountsFrameworkAvailable");
    if ((_DWORD)v9)
    {
      uint64_t v11 = _AKLogSystem(v9);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10013BD4C();
      }

      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ac_secureCodingError"));
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7005LL,  v14));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v15);

      goto LABEL_26;
    }
  }

  if (v7)
  {
    id v14 = v8;
    uint64_t v16 = _AKLogSystem(v14);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 allHeaderFields]);
      *(_DWORD *)buf = 138412290;
      id v41 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "URL Bag response headers: %@", buf, 0xCu);
    }

    id v39 = 0LL;
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v7,  0LL,  0LL,  &v39));
    id v20 = v39;
    unsigned int v21 = v20;
    if (v19)
    {
      uint64_t v22 = _AKLogSystem(v20);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "URL Bag Fetched! %@", buf, 0xCu);
      }

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 altDSID]);

      if (!v25)
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
        objc_msgSend( v26,  "setLastKnownIDMSEnvironment:",  +[AKURLBag IDMSEnvironmentFromBag:](AKURLBag, "IDMSEnvironmentFromBag:", v19));
      }

      uint64_t v27 = *(void **)(a1 + 40);
      uint64_t v28 = (NSString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[NSString altDSID](v28, "altDSID"));
      [v27 _updateCacheWithBag:v19 forAltDSID:v29];
    }

    else
    {
      if (![v7 length])
      {
LABEL_25:
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

        goto LABEL_26;
      }

      uint64_t v33 = objc_alloc(&OBJC_CLASS___NSString);
      id v34 = v7;
      uint64_t v28 = -[NSString initWithBytes:length:encoding:]( v33,  "initWithBytes:length:encoding:",  [v34 bytes],  objc_msgSend(v34, "length"),  4);
      uint64_t v35 = _AKLogSystem(v28);
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_10013BCEC();
      }

      uint64_t v38 = _AKLogSystem(v37);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
        sub_10013BC8C();
      }
    }

    goto LABEL_25;
  }

  uint64_t v30 = _AKLogSystem(v9);
  id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    sub_10013BC60();
  }

  uint64_t v32 = *(void *)(a1 + 48);
  id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7005LL));
  (*(void (**)(uint64_t, void, id))(v32 + 16))(v32, 0LL, v14);
LABEL_26:
}

void sub_1000887A4(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  id v7 = a3;
  id v8 = a2;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v5, v6);
  uint64_t v10 = _AKSignpostLogSystem();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  os_signpost_id_t v13 = a1[5];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v17) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v13,  "FetchURLBag",  "",  (uint8_t *)&v17,  2u);
  }

  uint64_t v14 = _AKSignpostLogSystem();
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a1[5];
    int v17 = 134218240;
    uint64_t v18 = v16;
    __int16 v19 = 2048;
    double v20 = (double)Nanoseconds / 1000000000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchURLBag ",  (uint8_t *)&v17,  0x16u);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

void sub_100088918(uint64_t a1)
{
  dispatch_queue_t v2 = objc_alloc_init(&OBJC_CLASS___AKBagTrafficClearanceRequest);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[AKURLBagFetchContext contextWithAltDSID:]( &OBJC_CLASS___AKURLBagFetchContext,  "contextWithAltDSID:",  *(void *)(a1 + 32)));
  -[AKBagTrafficClearanceRequest setContext:](v2, "setContext:", v3);

  -[AKBagTrafficClearanceRequest setFromURLCache:](v2, "setFromURLCache:", *(unsigned __int8 *)(a1 + 64));
  -[AKBagTrafficClearanceRequest setIgnoreMemoryCache:](v2, "setIgnoreMemoryCache:", *(unsigned __int8 *)(a1 + 65));
  -[AKBagTrafficClearanceRequest setUrlSwitchData:](v2, "setUrlSwitchData:", *(void *)(a1 + 40));
  -[AKBagTrafficClearanceRequest setClearanceHandler:](v2, "setClearanceHandler:", *(void *)(a1 + 56));
  id v4 = *(void **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[AKBagTrafficClearanceRequest context](v2, "context"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 _cachedURLBagForAltDSID:v6]);

    id v8 = *(void **)(a1 + 48);
    if (v7)
    {
      [v8 _invokeClearanceRequest:v2 urlBag:v7 error:0];
    }

    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100088B00;
      v14[3] = &unk_1001C9DE8;
      void v14[4] = v8;
      uint64_t v15 = v2;
      [v8 _fetchBagFromNetworkWithRequest:v15 completion:v14];
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) activeBagFetchRequest]);

    uint64_t v10 = *(void **)(a1 + 48);
    if (v9)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 pendingBagFetchRequests]);
      [v11 addObject:v2];
    }

    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100088B14;
      v12[3] = &unk_1001C9DE8;
      void v12[4] = v10;
      os_signpost_id_t v13 = v2;
      objc_msgSend(v10, "_tq_invokeRequest:completion:", v13, v12);
    }
  }
}

id sub_100088B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _invokeClearanceRequest:*(void *)(a1 + 40) urlBag:a2 error:a3];
}

void sub_100088B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100088B8C;
  block[3] = &unk_1001C7300;
  void block[4] = v4;
  dispatch_async(v5, block);
}

id sub_100088B8C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processPendingRequests");
}

void sub_100088C5C(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Invoking clearance for bag request %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clearanceHandler]);
  v5[2](v5, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_100088E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100088EC8;
  block[3] = &unk_1001C7300;
  void block[4] = v4;
  dispatch_async(v5, block);
}

id sub_100088EC8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processPendingRequests");
}

uint64_t sub_100088FD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100089090(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length]) {
    uint64_t v2 = *(__CFString **)(a1 + 32);
  }
  else {
    uint64_t v2 = @"AKSharedBag";
  }
  uint64_t v3 = v2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:v3]);
  uint64_t v5 = v4;
  if (!v4 || (id v4 = [v4 timeIntervalSinceNow], v6 >= 86400.0))
  {
    uint64_t v10 = _AKLogSystem(v4);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10013BEB4();
    }
    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 56) objectForKeyedSubscript:v3]);
  if (!v7)
  {
    uint64_t v8 = _AKLogSystem(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10013BF28();
    }
LABEL_12:
  }

  return v7;
}

void sub_1000892B8(void *a1)
{
  id v2 = [*(id *)(a1[4] + 56) mutableCopy];
  [v2 setObject:a1[6] forKeyedSubscript:a1[5]];
  id v3 = [v2 copy];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = v3;

  id v6 = [*(id *)(a1[4] + 32) mutableCopy];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v6 setObject:v7 forKeyedSubscript:a1[5]];

  id v8 = [v6 copy];
  uint64_t v9 = a1[4];
  uint64_t v10 = *(void **)(v9 + 32);
  *(void *)(v9 + 32) = v8;

  uint64_t v12 = _AKLogSystem(v11);
  os_signpost_id_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a1[5];
    uint64_t v15 = *(void *)(a1[4] + 32LL);
    int v16 = 138412546;
    uint64_t v17 = v15;
    __int16 v18 = 2112;
    uint64_t v19 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "URL bag cache updated %@ for key: %@",  (uint8_t *)&v16,  0x16u);
  }
}

uint64_t sub_100089744(uint64_t a1, uint64_t a2, xpc_object_t xuint)
{
  if (xuint)
  {
    uint64_t v5 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  xpc_uint64_get_value(xuint));
    id v6 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    id v6 = &off_1001D8E78;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s", a2));
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];

  return 1LL;
}

void sub_1000898E4(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _AKLogSystem(v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully checked in with IDMS.", v8, 2u);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10013C028((uint64_t)v4, v7);
  }
}

void sub_100089DF0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _AKLogSiwa(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10013C09C();
    }

    (*((void (**)(void))a1[6] + 2))();
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Attempting to authorize request: %@",  buf,  0xCu);
    }

    else {
      unsigned int v9 = 0;
    }
    if (([*((id *)a1[5] + 6) authorizationClientProvidesUI] & 1) != 0
      || ([a1[4] _isEligibleForUpgradeFromPassword] | v9) == 1)
    {
      id v10 = [a1[4] copy];
      uint64_t v11 = a1[5];
      uint64_t v12 = (void *)v11[11];
      v11[11] = v10;
    }

    os_signpost_id_t v13 = -[AKCATiburonRequestReporter initWithRequestContext:]( objc_alloc(&OBJC_CLASS___AKCATiburonRequestReporter),  "initWithRequestContext:",  a1[4]);
    uint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    uint64_t v19 = sub_100089FE4;
    double v20 = &unk_1001C9F00;
    unsigned int v21 = v13;
    id v22 = a1[4];
    id v14 = a1[6];
    id v23 = a1[5];
    id v24 = v14;
    uint64_t v15 = v13;
    int v16 = objc_retainBlock(&v17);
    objc_msgSend(a1[5], "_createAndPerformRequest:completion:", a1[4], v16, v17, v18, v19, v20);
  }
}

void sub_100089FE4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [a1[4] didCompleteWithAuthorization:v5 error:v6];
  id v7 = [a1[4] sendReport];
  if (v5)
  {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 authorizedRequest]);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___AKAuthorizationRequest, v10);
    char isKindOfClass = objc_opt_isKindOfClass(v9, v11);

    if ((isKindOfClass & 1) != 0)
    {
      os_signpost_id_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 authorizedRequest]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 _sanitizedCopy]);
      [v5 setAuthorizedRequest:v14];
    }

    uint64_t v15 = (void (*)(void))*((void *)a1[7] + 2);
    goto LABEL_13;
  }

  if (!v6)
  {
    uint64_t v16 = _AKLogSiwa(v7, v8);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_10013C168();
    }

    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7001LL));
    id v6 = v7;
  }

  uint64_t v18 = _AKLogSiwa(v7, v8);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_10013C0FC();
  }

  if ([a1[5] _shouldSkipAuthorizationUI])
  {
    uint64_t v15 = (void (*)(void))*((void *)a1[7] + 2);
LABEL_13:
    v15();
    goto LABEL_14;
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue([a1[6] client]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 bundleID]);

  if (v25)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    id v27 = [v26 mutableCopy];
    uint64_t v28 = v27;
    if (v27) {
      id v29 = v27;
    }
    else {
      id v29 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    }
    uint64_t v30 = v29;

    id v31 = (void *)objc_claimAutoreleasedReturnValue([a1[6] client]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 bundleID]);
    [v30 setObject:v32 forKey:AKClientBundleIDKey];

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    id v34 = [v6 code];
    id v35 = [v30 copy];
    uint64_t v36 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v33,  v34,  v35));

    id v6 = (id)v36;
  }

  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[AKAlertHandler sharedInstance](&OBJC_CLASS___AKAlertHandler, "sharedInstance"));
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_10008A348;
  v40[3] = &unk_1001C84B8;
  id v43 = a1[7];
  id v41 = 0LL;
  id v6 = v6;
  id v42 = v6;
  [v37 showAlertForError:v6 withCompletion:v40];

LABEL_14:
  id v21 = a1[5];
  double v20 = a1[6];
  id v22 = (void *)v20[3];
  uint64_t v23 = v20[6];
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_10008A35C;
  v38[3] = &unk_1001C9ED8;
  id v39 = v21;
  [v22 endSessionWithContext:v39 client:v23 completion:v38];
}

uint64_t sub_10008A348(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10008A35C(uint64_t a1)
{
  uint64_t v2 = _AKLogSiwa();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Authorization ended for requestContext: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10008A550(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v7 = _AKLogSiwa(v4, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10013C194();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10008A754(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008A8D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000LL;
  uint64_t v19 = sub_10008AA68;
  double v20 = sub_10008AA78;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
  id v21 = v7;
  if (v17[5])
  {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
    uint64_t v10 = AKURLBagKeyForgotPasswordWebURL;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10008AA80;
    v13[3] = &unk_1001C9F78;
    uint64_t v15 = &v16;
    id v14 = *(id *)(a1 + 32);
    [v9 urlForKey:v10 fromCache:1 completion:v13];
  }

  else
  {
    uint64_t v11 = _AKLogSiwa(v7, v8);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      sub_10013C1F4();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  _Block_object_dispose(&v16, 8);
}

void sub_10008AA4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10008AA68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008AA78(uint64_t a1)
{
}

void sub_10008AA80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = v5;
  if (a2)
  {
    uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([a2 absoluteString]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 setByAddingObject:v9]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    uint64_t v15 = _AKLogSiwa(v13, v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_10013C2B4();
    }
  }

  else
  {
    uint64_t v17 = _AKLogSiwa(v5, v6);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_10013C254();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008ADAC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = _AKLogSiwa(v5, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  unsigned int v9 = v8;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Revoke upgrade completed successfully.",  v10,  2u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_10013C2E0();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008AE64(uint64_t a1, int a2)
{
  if (a2)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___AKApplicationAuthorizationController);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
    -[AKApplicationAuthorizationController removeAuthorizationForApplicationWithClientID:completion:]( v4,  "removeAuthorizationForApplicationWithClientID:completion:",  v3,  *(void *)(a1 + 40));
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10008B0A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = _AKLogSiwa(v9, v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10013C3A0();
    }

    uint64_t v14 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v7 statusCode]));
      int v16 = 138412290;
      uint64_t v17 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "appleIDAuthorizeHTMLResponseURL response code: %@",  (uint8_t *)&v16,  0xCu);
    }

    uint64_t v14 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v8, 4LL);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008BF40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10008C00C;
  v11[3] = &unk_1001C7B88;
  id v12 = v5;
  id v13 = v6;
  id v14 = v7;
  id v9 = v6;
  id v10 = v5;
  os_unfair_lock_lock(v8);
  sub_10008C00C((uint64_t)v11);
  os_unfair_lock_unlock(v8);
}

uint64_t sub_10008C00C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___AKAuthorizationCredential, v3);
  objc_opt_isKindOfClass(v2, v4);

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_10008C988(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _requestUserAuthorizationForContext:a2 completion:*(void *)(a1 + 40)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10008D3B4(id a1, AKAppleIDUserInformationResponse *a2, NSError *a3)
{
  uint64_t v3 = _AKLogSiwa(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_10013C634();
  }
}

void sub_10008D3F4(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10008DC9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _AKLogSiwa(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_10013C7B0(v3, v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10008DE38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008DFF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _AKLogSiwa(v6, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10013C824();
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialRequestContext]);
  unsigned int v11 = [v10 _clientShouldAuthenticateExternally];

  id v12 = *(void **)(a1 + 40);
  if (v11)
  {
    id v13 = (void *)v12[3];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialRequestContext]);
    [v13 updateUserResponse:v5 withContext:v14 forClient:*(void *)(*(void *)(a1 + 40) + 48)];

    (*((void (**)(id, void, void))v6 + 2))(v6, 0LL, 0LL);
  }

  else
  {
    [v12 _validateAndProcessUserResponse:v5 client:v12[6] completion:v6];
  }
}

uint64_t sub_10008E0E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008E380(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) authorizationContextHelperWithContext:a2 client:*(void *)(a1 + 40)]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rawAccountPassword]);

  if (v4)
  {
    uint64_t v7 = _AKLogSiwa(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10013C90C();
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rawAccountPassword]);
    [v3 setPassword:v9];
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10008E4A8;
  v11[3] = &unk_1001C8328;
  void v11[4] = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 56);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 64);
  [v10 performSRPContractWithContext:v3 completion:v11];
}

id sub_10008E4A8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _completeAuthorizationWithServerResponse:a2 userResponse:*(void *)(a1 + 40) client:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

uint64_t sub_10008E838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _AKLogSiwa(a1, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10013CAE0(a2, v5, v6, v7, v8, v9, v10, v11);
  }

  if ((_DWORD)a2) {
    objc_msgSend(*(id *)(a1 + 32), "set_shouldRequestToArmDeviceToAllowPCSKeyUpload:", 1);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008F334(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = _AKLogSiwa(v2, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10013CC94();
  }
}

void sub_10008F4DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _AKLogSiwa(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_100135FA0();
  }

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7061LL));
  (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
}

void sub_10008F934(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 didCompleteWithAuthorization:v7 error:v6];
  [*(id *)(a1 + 32) sendReport];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000900C8(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v100 = kAppleIDAuthSupportClientProvidedData;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:"));
  id v5 = [v4 mutableCopy];

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  AKTiburonTimeoutIntervalForRequest));
  [v3 setObject:v6 forKeyedSubscript:kAppleIDAuthSupportOptionTimeoutIntervalForRequest];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  AKTiburonTimeoutIntervalForResource));
  [v3 setObject:v7 forKeyedSubscript:kAppleIDAuthSupportOptionTimeoutIntervalForResource];

  uint64_t v101 = a1;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = (id *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 128) request]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 userIdentifier]);

  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 userIdentifier]);
    [v5 setObject:v13 forKeyedSubscript:@"uid"];
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestedScopes]);

  int v16 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  if ([v15 count])
  {
    [v5 setObject:v15 forKeyedSubscript:@"scopes"];
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) userSelection]);
    if (v17 && [v15 containsObject:AKAuthorizationScopeEmail])
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 userInformation]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 selectedEmail]);

      if (v19)
      {
        double v20 = (void *)objc_claimAutoreleasedReturnValue([v17 userInformation]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 selectedEmail]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  v21,  @"selectedEmail");
      }

      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v17 makePrivateEmail]));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  v22,  @"privateEmail");
    }
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  unsigned int v24 = [v23 isEligibleForUpgradeFromPassword];

  if (v24) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  AKAuthorizationCredentialOriginPassword,  @"origin");
  }
  if ([*((id *)*v8 + 16) _isAuthorizingForSharedSIWAAccount])
  {
    uint64_t v25 = objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) _sharedSIWAAccountShareToken]);
    if (v25
      && (id v27 = (void *)v25,
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) _sharedSIWAAccountGroupID]),
          v28,
          v27,
          v28))
    {
      uint64_t v29 = _AKLogSiwa(v25, v26);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Authorizing for shared SIWA account. Adding additional share info in SRP request",  buf,  2u);
      }

      id v31 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) _sharedSIWAAccountShareToken]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  v31,  @"shared_token");

      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) _sharedSIWAAccountGroupID]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v32, @"group_id");
    }

    else
    {
      uint64_t v33 = _AKLogSiwa(v25, v26);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_10013CF78(v32);
      }
    }
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v16, "allKeys"));
  id v35 = [v34 count];

  if (v35) {
    [v5 setObject:v16 forKeyedSubscript:@"upd"];
  }
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 transactionID]);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 UUIDString]);

  if (v38) {
    [v5 setObject:v38 forKeyedSubscript:AKTransactionId];
  }
  id v39 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) clientID]);

  if (v39)
  {
    uint64_t v40 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) clientID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v41, @"client_id");

    id v42 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) clientID]);
    [v3 setObject:v42 forKeyedSubscript:kAppleIDAuthSupportAppleIClientID];

    id v43 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) teamID]);
    if (v43)
    {
      id v44 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) teamID]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v44, @"team_id");

      id v45 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) teamID]);
      [v3 setObject:v45 forKeyedSubscript:kAppleIDAuthSupportAppleITeamID];
    }

    id v46 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 userIdentifier]);

    if (v47)
    {
      id v48 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 userIdentifier]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v49, @"uid");
    }

    id v50 = -[NSMutableDictionary copy](v40, "copy");
    [v5 setObject:v50 forKeyedSubscript:@"amd"];
  }

  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 state]);

  if (v52)
  {
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 state]);
    [v5 setObject:v54 forKeyedSubscript:@"state"];
  }

  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) realUserVerificationData]);

  if (v55)
  {
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) realUserVerificationData]);
    [v5 setObject:v56 forKeyedSubscript:@"claim"];
  }

  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 state]);

  if (v58)
  {
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);

    if (v59)
    {
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);
      uint64_t v61 = (NSMutableDictionary *)[v60 mutableCopy];
    }

    else
    {
      uint64_t v61 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    NSErrorUserInfoKey v63 = (void *)objc_claimAutoreleasedReturnValue([v62 state]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v61, "setObject:forKeyedSubscript:", v63, @"state");

    id v64 = -[NSMutableDictionary copy](v61, "copy");
    [*((id *)*v8 + 16) setAppProvidedData:v64];
  }

  uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 nonce]);

  if (v66)
  {
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);

    if (v67)
    {
      unsigned int v68 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);
      __int128 v69 = (NSMutableDictionary *)[v68 mutableCopy];
    }

    else
    {
      __int128 v69 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    __int128 v70 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([v70 nonce]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v69, "setObject:forKeyedSubscript:", v71, @"nonce");

    id v72 = -[NSMutableDictionary copy](v69, "copy");
    [*((id *)*v8 + 16) setAppProvidedData:v72];
  }

  id v73 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
  if (-[NSMutableDictionary _isSilentAppTransfer](v73, "_isSilentAppTransfer"))
  {
    uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v74 userIdentifier]);

    if (!v75) {
      goto LABEL_52;
    }
    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);

    if (v76)
    {
      __int16 v77 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) appProvidedData]);
      id v73 = (NSMutableDictionary *)[v77 mutableCopy];
    }

    else
    {
      id v73 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    double v78 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v8 + 16) request]);
    __int16 v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v78 _isSilentAppTransfer]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v73,  "setObject:forKeyedSubscript:",  v79,  @"silent_app_transfer");

    id v80 = -[NSMutableDictionary copy](v73, "copy");
    [*((id *)*v8 + 16) setAppProvidedData:v80];
  }

LABEL_52:
  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([*v8 authContext]);
  uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 appProvidedData]);

  if (v82)
  {
    os_signpost_id_t v83 = (void *)objc_claimAutoreleasedReturnValue([*v8 authContext]);
    __int16 v84 = (void *)objc_claimAutoreleasedReturnValue([v83 appProvidedData]);
    [v5 setObject:v84 forKeyedSubscript:@"apd"];
  }

  double v85 = (void *)objc_claimAutoreleasedReturnValue([*v8 authContext]);
  unsigned int v86 = [v85 _clientAuthenticatedExternallyWithPassword];

  if (v86)
  {
    uint64_t v89 = _AKLogSiwa(v87, v88);
    uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
      sub_10013CF38(v90);
    }

    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([*v8 authContext]);
    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v91 _externalAuthToken]);
    [v5 setObject:v92 forKeyedSubscript:@"subscriptionToken"];
  }

  uint64_t v93 = _AKLogSiwa(v87, v88);
  v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG)) {
    sub_10013CE9C(v8, v94);
  }

  v95 = (void *)objc_claimAutoreleasedReturnValue([*v8 authContext]);
  unsigned int v96 = [v95 _shouldRequestToArmDeviceToAllowPCSKeyUpload];

  if (v96) {
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:@"PCSKeysArmedEligible"];
  }
  id v97 = [v5 copy];
  [v3 setObject:v97 forKeyedSubscript:v100];

  uint64_t v98 = *(void *)(v101 + 40);
  id v99 = [v3 copy];
  (*(void (**)(uint64_t, id, void))(v98 + 16))(v98, v99, 0LL);
}

void sub_100090F7C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.authkit.IDSFetchQueue", v4);
  id v3 = (void *)qword_10020F530;
  qword_10020F530 = (uint64_t)v2;
}

void sub_100091144(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestConfiguration]);
    [v3 setResourceLoadDelegate:v4];

    [*(id *)(a1 + 40) _showServerUIWithContext:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100091328( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_10009134C(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 8);
  uint64_t v11 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_21;
  }
  if (v9)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    if ([v12 isEqual:AKAppleIDAuthenticationErrorDomain])
    {
      id v13 = [v9 code];

      if (v13 == (id)-7038LL)
      {
        uint64_t v15 = _AKLogSystem(v14);
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Server UI has been skipped.", buf, 2u);
        }

void sub_1000917A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
    if ([v6 isEqual:AKAppleIDAuthenticationErrorDomain])
    {
      id v7 = [*(id *)(a1 + 32) code];

      if (v7 == (id)-7038LL)
      {
        uint64_t v8 = *(void *)(a1 + 64);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) initiatingServerResponse]);
        (*(void (**)(uint64_t, void *, void, void))(v8 + 16))( v8,  v9,  *(void *)(a1 + 48),  *(void *)(a1 + 32));
LABEL_13:

        goto LABEL_14;
      }
    }

    else
    {
    }

    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (!v10)
    {
      uint64_t v13 = _AKLogSystem(0LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_10013D10C(v14, v15, v16, v17, v18, v19, v20, v21);
      }

      uint64_t v22 = *(void *)(a1 + 64);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) initiatingServerResponse]);
      (*(void (**)(uint64_t, void *, void, void))(v22 + 16))(v22, v9, *(void *)(a1 + 48), 0LL);
      goto LABEL_13;
    }

    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 16))(v11, 0LL, v12, v10);
LABEL_14:
}

void sub_100091BC0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = a3;
  [v8 setPhoneNumberCertificate:a2];
  uint64_t v10 = *(void **)(a1 + 40);
  id v21 = 0LL;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 _fetchPhoneInformationWithAdditionalInfo:v9 error:&v21]);

  id v12 = v21;
  [*(id *)(a1 + 32) setPhoneInformation:v11];

  if (v12)
  {
    uint64_t v14 = _AKLogSystem(v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10013D178();
    }
  }

  uint64_t v16 = *(void **)(a1 + 40);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) authContext]);
  [v16 _reportPacTelemetryForEvent:@"com.apple.authkit.pac.subscriptionInfo" context:v17 error:v12];

  if (v7)
  {
    uint64_t v19 = _AKLogSystem(v18);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch IDS cert info: %@",  buf,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100091E70(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = a3;
  [v8 setPhoneNumberCertificate:a2];
  uint64_t v10 = *(void **)(a1 + 40);
  id v19 = 0LL;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 _fetchPhoneInformationWithAdditionalInfo:v9 error:&v19]);

  id v12 = v19;
  [*(id *)(a1 + 32) setPhoneInformation:v11];

  if (v12)
  {
    uint64_t v14 = _AKLogSystem(v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10013D178();
    }
  }

  id v16 = [*(id *)(a1 + 40) _reportPacTelemetryForEvent:@"com.apple.authkit.pac.subscriptionInfo" context:*(void *)(a1 + 48) error:v12];
  if (v7)
  {
    uint64_t v17 = _AKLogSystem(v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch IDS cert info: %@",  buf,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000927D0(id a1, NSError *a2)
{
  dispatch_queue_t v2 = a2;
  uint64_t v3 = _AKLogSystem(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10013D2E8((uint64_t)v2, v4);
  }
}

id sub_100092DE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) migrateSchemaFromVersion:*(void *)(a1 + 40)];
}

void sub_100092F7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100092FA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100092FB4(uint64_t a1)
{
}

void sub_100092FBC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_text(a2, 0);
  if (v3)
  {
    id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
    [v4 addObject:v5];
  }

void sub_1000932A8(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___AKDaemonConnectionManager);
  dispatch_queue_t v2 = (void *)qword_10020F540;
  qword_10020F540 = (uint64_t)v1;
}

void sub_100093554(_Unwind_Exception *a1)
{
}

void sub_100093D88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_dictionary_get_string(v3, _xpc_event_key_name));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10013D9A0();
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.mobile.keybagd.lock_status"));
  unsigned int v9 = [v5 isEqual:v8];

  uint64_t v10 = *(void **)(a1 + 32);
  if (!v9)
  {
    if ([v10 _isPasscodeChangeNotification:v5])
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
      unsigned __int8 v12 = [v11 isProtectedWithPasscode];

      if ((v12 & 1) != 0) {
        goto LABEL_15;
      }
      uint64_t v14 = _AKLogSystem(v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v22) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Current device is not protected with a passcode, clearing PRK tokens...",  (uint8_t *)&v22,  2u);
      }

      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
      [v16 removeAllPasswordResetTokens];

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[AKAppleIDCheckInHelperService sharedService]( &OBJC_CLASS___AKAppleIDCheckInHelperService,  "sharedService"));
      [v17 performLivenessCheckInForAllEligibleAccountsWithReason:4 completion:&stru_1001CA2D8];

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
      [v18 _removeAllRawPasswordCaches];

      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[AKAuthenticationTrafficController sharedInstance]( &OBJC_CLASS___AKAuthenticationTrafficController,  "sharedInstance"));
      [v19 flushCachedPasswords];
    }

    else
    {
      id v20 = [*(id *)(a1 + 32) _isDeviceScreenUnlockNotification:v5];
      if ((_DWORD)v20)
      {
        [*(id *)(a1 + 32) _checkScreenUnlockStateFromNotificationDictionary:v3];
        goto LABEL_15;
      }

      uint64_t v21 = _AKLogSystem(v20);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 138412290;
        id v23 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEFAULT,  "No special handling for XPC event: %@",  (uint8_t *)&v22,  0xCu);
      }
    }

    goto LABEL_15;
  }

  [v10 _checkKeybagUnlockState];
LABEL_15:
}

void sub_100093FEC(id a1, OS_xpc_object *a2)
{
  dispatch_queue_t v2 = a2;
  id v3 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_dictionary_get_string(v2, _xpc_event_key_name));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 isEqualToString:@"AppSignInEndorser"];
  int v6 = (int)v5;
  uint64_t v7 = _AKLogSystem(v5);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      int v11 = 138412290;
      unsigned __int8 v12 = v2;
      uint64_t v10 = "Ignoring event that will be handled by companionauthd: %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v11, 0xCu);
    }
  }

  else if (v9)
  {
    int v11 = 138412290;
    unsigned __int8 v12 = v2;
    uint64_t v10 = "No special handling for Rapport matching event: %@";
    goto LABEL_6;
  }
}

uint64_t sub_100094428(uint64_t a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  dispatch_queue_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Notified of language change. Will exit when all clear.",  v4,  2u);
  }

  return xpc_transaction_exit_clean();
}

void sub_10009450C(id a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  dispatch_queue_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "akd is exiting due to SIGTERM", v3, 2u);
  }

  exit(0);
}

id sub_1000945FC(uint64_t a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  dispatch_queue_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Handling eligiblity darwin notification.",  v4,  2u);
  }

  return +[AKRegulatoryEligibilityHandler reportRegulatoryEligibilityStatusToIdMS]( &OBJC_CLASS___AKRegulatoryEligibilityHandler,  "reportRegulatoryEligibilityStatusToIdMS");
}

void sub_1000948D0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100094A14(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  dispatch_queue_t v2 = (void *)qword_10020F550;
  qword_10020F550 = (uint64_t)v1;
}

id sub_100094CD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_scheduleNextRequest");
}

void sub_1000950D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem(WeakRetained);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013DAF0();
  }
}

void sub_10009513C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem(WeakRetained);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013DB5C();
  }
}

void sub_1000951A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _AKLogSystem(WeakRetained);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    id v7 = WeakRetained;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Scheduler source event handler called (dispatchInterval: %.2f)",  (uint8_t *)&v6,  0x16u);
  }

  objc_msgSend(WeakRetained, "_unsafe_schedulerSourceDidFire");
}

void sub_100095620( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10009564C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = _AKLogSystem(WeakRetained);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
    int v22 = 138412802;
    id v23 = WeakRetained;
    __int16 v24 = 2112;
    id v25 = v3;
    __int16 v26 = 2112;
    uint64_t v27 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: Handling dispatching response (%@) for executed request (%@)",  (uint8_t *)&v22,  0x20u);
  }

  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber, v8);
  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"ec"]);
  if ((objc_opt_isKindOfClass(v10, v9) & 1) != 0) {
    id v11 = v10;
  }
  else {
    id v11 = 0LL;
  }

  id v12 = [v11 integerValue];
  uint64_t v14 = _AKLogSystem(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v12 == (id)-80040LL)
  {
    if (v16)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
      int v22 = 138412546;
      id v23 = WeakRetained;
      __int16 v24 = 2112;
      id v25 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: Updating algorithm for dispatching info (%@)",  (uint8_t *)&v22,  0x16u);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
    [WeakRetained _updateDispatchingAlgorithmForInfo:v18 withResponse:v3];
  }

  else
  {
    if (v16)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
      int v22 = 138412546;
      id v23 = WeakRetained;
      __int16 v24 = 2112;
      id v25 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: Removing algorithm for dispatching info (%@)",  (uint8_t *)&v22,  0x16u);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
    [WeakRetained _setDispatchingAlgorithm:0 forInfo:v18];
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  [v20 handleResponseCode];

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) calculation]);
  [v21 relinquish];
}

void sub_100095F58(id a1)
{
  v4[0] = @"capp";
  v4[1] = @"papp";
  v4[2] = @"svct";
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 3LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](&OBJC_CLASS___NSOrderedSet, "orderedSetWithArray:", v1));
  id v3 = (void *)qword_10020F560;
  qword_10020F560 = v2;
}

void sub_1000962F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _AKLogSystem(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Revoke request came back with error: %@",  (uint8_t *)&v8,  0xCu);
  }

  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v5 == 0LL, v5);
}

void sub_100096718(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKAuthenticationTrafficController);
  uint64_t v2 = (void *)qword_10020F570;
  qword_10020F570 = (uint64_t)v1;
}

void sub_100096964(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);

  if (!v2)
  {
    uint64_t v4 = _AKLogSystem(v3);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10013DE50();
    }
  }

  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AKPasswordAuthenticationContext]
    && [*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AKAuthenticationContext_Internal])
  {
    [*(id *)(a1 + 48) _updateContextWithCachedPassword:*(void *)(a1 + 40)];
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  id v7 = (void *)v6;
  int v8 = @"com.apple.ak.unknown";
  if (v6) {
    int v8 = (__CFString *)v6;
  }
  id v9 = v8;

  id v10 = objc_alloc_init(&OBJC_CLASS___AKTrafficClearenceRequest);
  -[AKTrafficClearenceRequest setClearanceHandler:](v10, "setClearanceHandler:", *(void *)(a1 + 56));
  -[AKTrafficClearenceRequest setContext:](v10, "setContext:", *(void *)(a1 + 40));
  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AKAuthenticationContext_Internal]) {
    -[AKTrafficClearenceRequest setAuthContext:](v10, "setAuthContext:", *(void *)(a1 + 40));
  }
  uint64_t v11 = _AKLogSystem(-[AKTrafficClearenceRequest setClientBundleID:](v10, "setClientBundleID:", v9));
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_10013DDF0();
  }

  [*(id *)(a1 + 48) _processClearanceRequest:v10 withClient:*(void *)(a1 + 32)];
}

void sub_100096BBC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v3 = (void *)v2;
  uint64_t v4 = @"com.apple.ak.unknown";
  if (v2) {
    uint64_t v4 = (__CFString *)v2;
  }
  id v5 = v4;

  uint64_t v7 = _AKLogSystem(v6);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_10013DFD4();
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) objectForKeyedSubscript:v5]);
  [v9 removeObject:*(void *)(a1 + 48)];

  uint64_t v10 = _AKLogSystem([*(id *)(a1 + 40) _clearNextEligibleRequest]);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_10013DF44();
  }

  id v12 = *(void **)(a1 + 48);
  uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 16LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100096D04;
  v14[3] = &unk_1001C7438;
  id v15 = v12;
  id v16 = *(id *)(a1 + 56);
  dispatch_async(v13, v14);
}

uint64_t sub_100096D04(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013E034();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100096EC8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  [*(id *)(a1 + 32) _removeAuthenticationRequestForContext:*(void *)(a1 + 40) client:*(void *)(a1 + 48)];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*v2 username]);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 56);

    if (v4)
    {
      id v5 = +[NSString _newZStringWithString:](&OBJC_CLASS___NSString, "_newZStringWithString:", *(void *)(a1 + 56));
      uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) username]);
      [v6 setObject:v5 forKey:v7 expiresIn:300.0];
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateManager]);
  unsigned int v9 = [v8 hasRegisteredSurrogateForContext:*(void *)(a1 + 40)];

  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) surrogateManager]);
    [v10 unregisterUISurrogateForContext:*(void *)(a1 + 40)];

    uint64_t v12 = _AKLogSystem(v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Surrogate auth flow is complete!", buf, 2u);
    }
  }

  uint64_t v14 = *(void **)(a1 + 32);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1000970FC;
  v24[3] = &unk_1001CA3F0;
  id v15 = *(id *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 32);
  id v25 = v15;
  uint64_t v26 = v16;
  id v27 = *(id *)(a1 + 56);
  id v28 = *(id *)(a1 + 72);
  uint64_t v17 = _AKLogSystem([v14 _clearNextEligibleRequestWithUpdateBlock:v24]);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    sub_10013E150();
  }

  id v19 = *(void **)(a1 + 40);
  id v20 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000971B0;
  v21[3] = &unk_1001C7438;
  id v22 = v19;
  id v23 = *(id *)(a1 + 80);
  dispatch_async(v20, v21);
}

void sub_1000970FC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1[4])
  {
    uint64_t v5 = _AKLogSystem(v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10013E1E0();
    }
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
    unsigned int v8 = [v7 conformsToProtocol:&OBJC_PROTOCOL___AKPasswordAuthenticationContext];

    if (v8)
    {
      unsigned int v9 = (void *)a1[5];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 context]);
      [v9 _updateContext:v10 withPassword:a1[6] forAppleID:a1[7]];
    }
  }
}

uint64_t sub_1000971B0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10013E20C();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100097384(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 48)];

  uint64_t v5 = _AKLogSystem(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", qos_class_self());
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = *(void *)(a1 + 48);
      int v15 = 138412546;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Daemon auth now requires UI with qos %@ for %@",  (uint8_t *)&v15,  0x16u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    [v11 removeObject:*(void *)(a1 + 48)];

    objc_msgSend( *(id *)(a1 + 32),  "_tq_addContext:toAuthenticatingAppsforClient:",  *(void *)(a1 + 48),  *(void *)(a1 + 40));
    [*(id *)(a1 + 32) _clearNextEligibleRequest];
    uint64_t v12 = *(void *)(a1 + 56);
    if (v12) {
      (*(void (**)(uint64_t, uint64_t, void))(v12 + 16))(v12, 1LL, 0LL);
    }
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10013E29C();
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7121LL));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);
    }
  }

void sub_100097B9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100097BB4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 count];
  if (result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_100097EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100097F04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 count])
  {
    BOOL v6 = +[AKClient isAppWithBundleIDForeground:](&OBJC_CLASS___AKClient, "isAppWithBundleIDForeground:", v5);
    if (v6)
    {
      uint64_t v7 = _AKLogSystem(v6);
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_10013EB0C();
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_1000980D0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", qos_class_self());
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    unsigned int v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Invoking traffic request with qos %@ for %@",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v7 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clearanceHandler]);
  v7[2]();
}

id sub_100098588(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _shouldClearRequest:a2];
}

uint64_t sub_1000988E8()
{
  return v0;
}

void sub_1000988F4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100098940(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKAuthorizationListUpdateService);
  uint64_t v2 = (void *)qword_10020F580;
  qword_10020F580 = (uint64_t)v1;
}

void sub_100098AC0(uint64_t a1, void *a2)
{
  unsigned int v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  uint64_t v5 = _AKLogSystem(state);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v7)
    {
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", state));
      *(_DWORD *)buf = 138412290;
      int v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity registration complete. State: %@.",  buf,  0xCu);
    }

    goto LABEL_8;
  }

  if (v7)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "XPC activity says that it's time to update user information",  buf,  2u);
  }

  if (xpc_activity_set_state(v3, 4LL))
  {
    int v8 = (void *)os_transaction_create("com.apple.authkit.authorization-fetch-user-information");
    unsigned int v9 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100098C50;
    v11[3] = &unk_1001C6538;
    uint64_t v12 = v3;
    id v13 = v8;
    uint64_t v6 = v8;
    [v9 performAuthorizationCheckInWithCompletion:v11];

LABEL_8:
  }
}

BOOL sub_100098C50(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "XPC activity for fetch user information complete",  v5,  2u);
  }

  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
}

void sub_100098EE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v16 = 138412290;
      uint64_t v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Succesfully fetched user information for altDSID: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10013ED10((uint64_t)v5, v8, v10, v11, v12, v13, v14, v15);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_100098FC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearStaleCachedDevices];
}

uint64_t sub_100098FD0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100099100(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100099160(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = _AKLogSystem(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10013ED78((uint64_t)v2, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Succesfully cleared stale devices from cache",  v12,  2u);
  }
}

void sub_1000999B8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKKeychainManager);
  uint64_t v2 = (void *)qword_10020F590;
  qword_10020F590 = (uint64_t)v1;
}

void sub_100099A88(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0LL;
  objc_msgSend(v2, "_unsafe_addKeychainItem:shouldAttemptUpdate:error:", v3, 0, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100099B9C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0LL;
  objc_msgSend(v2, "_unsafe_addKeychainItem:shouldAttemptUpdate:error:", v3, 1, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100099CB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) descriptor]);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = 0LL;
  objc_msgSend(v2, "_unsafe_updateKeychainItemWithDescriptor:newItem:error:", v3, v4, &v6);
  id v5 = v6;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100099DD8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v6 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_unsafe_fetchKeychainItemWithDescriptor:error:", v3, &v6));
  id v5 = v6;
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100099EF0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v6 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_unsafe_fetchKeychainItemsWithDescriptor:error:", v3, &v6));
  id v5 = v6;
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10009A008(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0LL;
  objc_msgSend(v2, "_unsafe_deleteKeychainItemWithDescriptor:error:", v3, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_10009A630(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F5A0;
  uint64_t v7 = qword_10020F5A0;
  if (!qword_10020F5A0)
  {
    v8[0] = *(_OWORD *)off_1001CA510;
    v8[1] = *(_OWORD *)&off_1001CA520;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F5A0 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009A6DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10009A6F4()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_10009A630((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_10009A74C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F5A8;
  uint64_t v7 = qword_10020F5A8;
  if (!qword_10020F5A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10009A800;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_10009A800((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009A7E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10009A800(uint64_t a1)
{
  Class result = objc_getClass("SKSetupServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F5A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10013EFC8();
    return (Class)sub_10009A854(v3);
  }

  return result;
}

id sub_10009A854()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F5B0;
  uint64_t v7 = qword_10020F5B0;
  if (!qword_10020F5B0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10009A908;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_10009A908((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009A8F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10009A908(uint64_t a1)
{
  Class result = objc_getClass("SKSetupAppleIDSignInServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F5B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10013EFEC();
    return (Class)sub_10009A95C(v3);
  }

  return result;
}

id sub_10009A95C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F5B8;
  uint64_t v7 = qword_10020F5B8;
  if (!qword_10020F5B8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10009AA10;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_10009AA10((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009A9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10009AA10(uint64_t a1)
{
  Class result = objc_getClass("SKEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F5B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10013F010();
    return (Class)sub_10009AA64();
  }

  return result;
}

id sub_10009AA64()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F5C0;
  uint64_t v7 = qword_10020F5C0;
  if (!qword_10020F5C0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10009AB18;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_10009AB18((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009AB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10009AB18(uint64_t a1)
{
  Class result = objc_getClass("SKAuthenticationPresentEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F5C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10013F034();
    return (Class)sub_10009AB6C(v3);
  }

  return result;
}

uint64_t sub_10009AB6C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F5C8;
  uint64_t v7 = qword_10020F5C8;
  if (!qword_10020F5C8)
  {
    v8[0] = *(_OWORD *)off_1001CA530;
    v8[1] = *(_OWORD *)&off_1001CA540;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F5C8 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009AC18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10009AC30()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = sub_10009AB6C((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_10009AC88()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F5D0;
  uint64_t v7 = qword_10020F5D0;
  if (!qword_10020F5D0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10009AD3C;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_10009AD3C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10009AD24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10009AD3C(uint64_t a1)
{
  Class result = objc_getClass("APSConnection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F5D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10013F058();
    return (Class)sub_10009AD90(v3);
  }

  return result;
}

void *sub_10009AD90()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F5D8;
  uint64_t v6 = qword_10020F5D8;
  if (!qword_10020F5D8)
  {
    id v1 = (void *)sub_10009AC30();
    uint64_t v0 = dlsym(v1, "APSEnvironmentProduction");
    void v4[3] = (uint64_t)v0;
    qword_10020F5D8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10009AE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10009AE1C()
{
  uint64_t v0 = (id *)sub_10009AD90();
  if (v0) {
    return *v0;
  }
  sub_10012D194();
  return sub_10009AE3C();
}

void *sub_10009AE3C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F5E0;
  uint64_t v6 = qword_10020F5E0;
  if (!qword_10020F5E0)
  {
    id v1 = (void *)sub_10009AC30();
    uint64_t v0 = dlsym(v1, "APSEnvironmentDevelopment");
    void v4[3] = (uint64_t)v0;
    qword_10020F5E0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10009AEB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10009AEC8()
{
  uint64_t v0 = (id *)sub_10009AE3C();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = (void *)sub_10012D194();
  return +[AKAppleIDPushHelperService sharedService](v2, v3);
}

void sub_10009AF28(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKAppleIDPushHelperService);
  uint64_t v2 = (void *)qword_10020F5E8;
  qword_10020F5E8 = (uint64_t)v1;
}

void sub_10009B2D4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Push service starting...", v12, 2u);
  }

  uint64_t v4 = sub_10009AB6C(0LL);
  if (v4)
  {
    id v5 = sub_10009AE1C();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v6);
  if (v4) {

  }
  uint64_t v7 = (objc_class *)sub_10009AB6C(0LL);
  if (v7) {
    uint64_t v7 = (objc_class *)sub_10009AC88();
  }
  id v8 = [[v7 alloc] initWithEnvironmentName:*(void *)(*(void *)(a1 + 32) + 24) namedDelegatePort:@"com.apple.ak.aps" queue:&_dispatch_main_q];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 16);
  *(void *)(v9 + 16) = v8;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "setDelegate:");
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) allObjects]);
  [*(id *)(*(void *)(a1 + 32) + 16) _setEnabledTopics:v11];
}

void sub_10009B3F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = a2;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v3, v4);
  uint64_t v7 = _AKSignpostLogSystem(Nanoseconds);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "APSTokenEnvironment",  "",  (uint8_t *)&v15,  2u);
  }

  uint64_t v12 = _AKSignpostLogSystem(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 134218240;
    uint64_t v16 = v14;
    __int16 v17 = 2048;
    double v18 = (double)Nanoseconds / 1000000000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:APSTokenEnvironment ",  (uint8_t *)&v15,  0x16u);
  }

  [*(id *)(a1 + 32) _ensureDesiredAPSEnvironmentIsInUse:v5];
}

id sub_10009BCEC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processPushMessage:*(void *)(a1 + 40)];
}

void sub_10009BDAC(uint64_t a1)
{
  id v1 = (void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) isEqualToString:*(void *)(*(void *)(a1 + 40) + 24)];
  int v4 = (int)v3;
  uint64_t v5 = _AKLogSystem(v3);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10013F108();
    }
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*v2 + 24);
      uint64_t v9 = *v1;
      int v26 = 138412546;
      uint64_t v27 = v8;
      __int16 v28 = 2112;
      uint64_t v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Active APS env (%@) does not match server-requested env (%@).",  (uint8_t *)&v26,  0x16u);
    }

    os_signpost_id_t v10 = (void *)sub_10009AB6C(0LL);
    if (v10) {
      os_signpost_id_t v10 = sub_10009AC88();
    }
    id v11 = [v10 isValidEnvironment:*v1];
    char v12 = (char)v11;
    uint64_t v13 = _AKLogSystem(v11);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v7 = v14;
    if ((v12 & 1) != 0)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(*v2 + 24);
        int v26 = 138412290;
        uint64_t v27 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Shutting down APS connection with env %@...",  (uint8_t *)&v26,  0xCu);
      }

      [*(id *)(*v2 + 16) setDelegate:0];
      uint64_t v16 = _AKLogSystem([*(id *)(*v2 + 16) shutdown]);
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *v1;
        int v26 = 138412290;
        uint64_t v27 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Starting new APS connection with env %@...",  (uint8_t *)&v26,  0xCu);
      }

      id v19 = (objc_class *)sub_10009AB6C(0LL);
      if (v19) {
        id v19 = (objc_class *)sub_10009AC88();
      }
      id v20 = [[v19 alloc] initWithEnvironmentName:*v1 namedDelegatePort:@"com.apple.ak.aps" queue:&_dispatch_main_q];
      uint64_t v21 = *(void **)(*v2 + 16);
      *(void *)(*v2 + 16) = v20;

      objc_msgSend(*(id *)(*v2 + 16), "setDelegate:");
      id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*v2 + 80) allObjects]);
      [*(id *)(*v2 + 16) _setEnabledTopics:v22];

      id v23 = (void *)*v1;
      uint64_t v24 = *v2;
      id v25 = v23;
      uint64_t v7 = *(os_log_s **)(v24 + 24);
      *(void *)(v24 + 24) = v25;
    }

    else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_10013F16C();
    }
  }
}

void sub_10009C740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10009C768(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009C778(uint64_t a1)
{
}

void sub_10009C780(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) publicToken]);
  uint64_t v4 = *(void *)(v2[1] + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___AKPushTokenKeychainWrapper);
  id v7 = -[AKPushTokenKeychainWrapper updateToken:](v6, "updateToken:", *(void *)(*(void *)(v2[1] + 8LL) + 40LL));
  if (!*(void *)(*v2 + 16LL) || *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    uint64_t v8 = _AKLogSystem(v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*v2 + 16LL);
      int v24 = 138412290;
      uint64_t v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Skipping waiting for push token with connection: %@",  (uint8_t *)&v24,  0xCu);
    }

void sub_10009CBB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_10009CBDC(uint64_t a1)
{
  uint64_t v2 = -[AKPushMessage initWithMessage:]( objc_alloc(&OBJC_CLASS___AKPushMessage),  "initWithMessage:",  *(void *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_unsafe_processPushMessage:", v2);
}

void sub_10009CFD8(id a1, NSDictionary *a2, NSError *a3)
{
}

void sub_10009D3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _AKLogSystem(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 134217984;
    uint64_t v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "User interacted with alert - %lul.",  (uint8_t *)&v15,  0xCu);
  }

  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v7 = _AKLogSystem(v6);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      if (!os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_16:

        return;
      }

      LOWORD(v15) = 0;
      uint64_t v9 = "Notification torn down by server!";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, 2u);
      goto LABEL_16;
    }

id sub_10009D674(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = _AKLogSystem(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PCS arming completed, notifying delegates of results.",  v8,  2u);
  }

  [*(id *)(a1 + 32) _notifyDelegatesOfMessageActivation:*(void *)(a1 + 40) result:1 payload:v4];
  return [*(id *)(a1 + 32) _performCommandForMessage:*(void *)(a1 + 40) forAccount:*(void *)(a1 + 48)];
}

void sub_10009DA7C(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = _AKLogSystem(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10013F654();
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [v7 localizedStringForKey:@"LOGIN_CODE_ALERT_TITLE_FAILED" value:&stru_1001D1450 table:@"Localizable"]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*v2 localizedDescription]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.AuthKit"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 localizedStringForKey:@"LOGIN_CODE_ALERT_OK_BUTTON" value:&stru_1001D1450 table:@"Localizable"]);
    char v12 = +[AKPushMessageNotificationPresenter createUserNotificationWithTitle:body:defaultButtonTitle:alternateButtonTitle:makeNoise:]( &OBJC_CLASS___AKPushMessageNotificationPresenter,  "createUserNotificationWithTitle:body:defaultButtonTitle:alternateButtonTitle:makeNoise:",  v8,  v9,  v11,  0LL,  0LL);

    if (v12)
    {
      CFUserNotificationReceiveResponse(v12, 0.0, 0LL);
      CFRelease(v12);
    }
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Will display login code notification...",  v13,  2u);
    }

    objc_msgSend( *(id *)(a1 + 40),  "_unsafe_showLoginNotificationWithCode:incomingMessage:piggy:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  0);
  }

id sub_10009DD10(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_unsafe_showLoginNotificationWithCode:incomingMessage:piggy:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  1);
}

id sub_10009DD7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_teardownCurrentLoginNotification");
}

void sub_10009DE9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
}

void sub_10009E694(uint64_t a1, uint64_t a2)
{
  v7[0] = _NSConcreteStackBlock;
  _DWORD v7[2] = sub_10009E72C;
  v7[3] = &unk_1001C98D8;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 40);
  v7[1] = 3221225472LL;
  void v7[4] = v4;
  id v8 = v5;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = a2;
  dispatch_async(v6, v7);
}

id sub_10009E72C(void *a1)
{
  return +[NSXPCConnection endTransaction](&OBJC_CLASS___NSXPCConnection, "endTransaction");
}

void sub_10009EDE8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AKBAATimeProvider);
  uint64_t v2 = (void *)qword_10020F600;
  qword_10020F600 = (uint64_t)v1;
}

void sub_10009F3AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = _AKLogSystem(v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10013F7D4((uint64_t)v7, v10);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = [*(id *)(a1 + 32) _unknownAuthModeInfo];
    uint64_t v14 = v13;
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _authModeErrorFromError:v7]);
    (*(void (**)(uint64_t, id, uint64_t, void *))(v11 + 16))(v11, v12, v14, v15);
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) username]);
      int v19 = 138412290;
      uint64_t v20 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fetched authMode for %@",  (uint8_t *)&v19,  0xCu);
    }

    id v17 = [*(id *)(a1 + 32) _authModeInfoFromResponse:v6];
    objc_msgSend(*(id *)(a1 + 32), "_saveAuthMode:withContext:", v17, v18, *(void *)(a1 + 40));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000A1B10(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    if (([WeakRetained _bindStatement:a2 withParameter:*(void *)(a1 + 32) atPosition:1] & 1) == 0)
    {
      uint64_t v6 = _AKLogSystem([v5 setBindingFailure:1]);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10013FC44(a1 + 32, v7, v8, v9, v10, v11, v12, v13);
      }

      if (*(void *)(a1 + 48)) {
        **(void **)(a1 + 4_Block_object_dispose(va, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKSQLErrorDomain,  -6004LL,  0LL));
      }
    }
  }

  else
  {
    uint64_t v14 = _AKLogSystem(0LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
      sub_10013FC14((os_log_s *)v5, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void sub_1000A1CC0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1000A1D78;
    v15[3] = &unk_1001CA6A8;
    id v16 = WeakRetained;
    uint64_t v17 = a2;
    uint64_t v18 = *(void *)(a1 + 48);
    [v5 enumerateObjectsUsingBlock:v15];
  }

  else
  {
    uint64_t v6 = _AKLogSystem(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013FC14(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

void sub_1000A1D78(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  id v7 = a2;
  if (([*(id *)(a1 + 32) _bindStatement:*(void *)(a1 + 40) withParameter:v7 atPosition:(a3 + 1)] & 1) == 0)
  {
    id v8 = [*(id *)(a1 + 32) setBindingFailure:1];
    *a4 = 1;
    uint64_t v9 = _AKLogSystem(v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10013FCB0((uint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }

    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKSQLErrorDomain,  -6004LL,  0LL));
    }
  }
}

id sub_1000A22DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateWithRequest:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
}

void sub_1000A2AD4(uint64_t a1)
{
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v27;
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v24 = v4;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v27 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
        uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7, v24));
        uint64_t v9 = (void *)v8;
        if (v8)
        {
          uint64_t v10 = _AKLogSystem(v8);
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v31 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updating token for service with ID %@...",  buf,  0xCu);
          }

          uint64_t v12 = objc_alloc_init(&OBJC_CLASS___ACAccountCredential);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
          -[ACAccountCredential setToken:](v12, "setToken:", v13);

          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 expirationDate]);
          -[ACAccountCredential setTokenExpiryDate:](v12, "setTokenExpiryDate:", v14);

          id v15 = [*(id *)(a1 + 40) _isTouchIDRequiredForGrandSlamServiceTokenWithID:v7];
          if ((_DWORD)v15)
          {
            uint64_t v16 = _AKLogSystem(v15);
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v31 = v7;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "GS service token with ID %@ marked as requiring TouchID.",  buf,  0xCu);
            }

            -[ACAccountCredential setRequiresTouchID:](v12, "setRequiresTouchID:", 1LL);
          }

          uint64_t v18 = *(void **)(a1 + 48);
          uint64_t v19 = *(void *)(a1 + 56);
          id v25 = 0LL;
          [v18 setCredential:v12 forAccount:v19 serviceID:v7 error:&v25];
          id v20 = v25;
          uint64_t v21 = v20;
          if (v20)
          {
            uint64_t v22 = _AKLogSystem(v20);
            uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v24;
              uint64_t v31 = v7;
              __int16 v32 = 2112;
              uint64_t v33 = v21;
              _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to update token for %@ in keychain. Error: %@",  buf,  0x16u);
            }
          }
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }

    while (v3);
  }
}

void sub_1000A2D98(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    uint64_t v3 = _AKLogSystem(v2);
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10013FDB0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10);
    }

    objc_end_catch();
    JUMPOUT(0x1000A2D5CLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000A3B20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v19 = 138412290;
      uint64_t v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@: Successfully generated authentication parameters... generating SRP context!",  (uint8_t *)&v19,  0xCu);
    }

    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___AKSRPContext);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContext configureWithParameters:](v11, "configureWithParameters:", v5));
    uint64_t v13 = _AKLogSystem(v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = v14;
    if (v12)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10013FF14();
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7004LL,  v12));
      (*(void (**)(uint64_t, void, void, void *))(v16 + 16))(v16, 0LL, 0LL, v17);
    }

    else
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v19 = 138412546;
        uint64_t v20 = v18;
        __int16 v21 = 2112;
        uint64_t v22 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: Performing SRP request with context (%@)",  (uint8_t *)&v19,  0x16u);
      }

      [*(id *)(a1 + 32) _performRequestWithContext:v11 responseHandler:*(void *)(a1 + 40)];
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10013FEAC();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8LL) + 16LL))();
  }
}

void sub_1000A3E88(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0LL;
  unsigned int v3 = objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 32), a2),  "_performRequestWithURL:context:error:",  *(void *)(*(void *)(a1 + 32) + 48),  *(void *)(a1 + 40),  &v13);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) status]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"hsc"]);
  [*(id *)(a1 + 32) setResponseCode:v5];

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) status]);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  uint64_t v8 = -[AKAuthenticationServerResponse initWithSRPContext:]( objc_alloc(&OBJC_CLASS___AKAuthenticationServerResponse),  "initWithSRPContext:",  *(void *)(a1 + 40));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _tokenGenerationInfoForContext:*(void *)(a1 + 40)]);
  -[AKAuthenticationServerResponse reportCriticalAuthTokensTelemetryForFlow:withTokenGenerationInfo:]( v8,  "reportCriticalAuthTokensTelemetryForFlow:withTokenGenerationInfo:",  1LL,  v9);

  uint64_t v10 = v13;
  if (v3) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v13;
  }
  id v12 = v11;
  if ((v3 & 1) == 0) {

  }
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8LL) + 16LL))();
}

id sub_1000A4560(uint64_t a1, uint64_t a2)
{
  id v2 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32), a2));
  unsigned int v3 = (void *)qword_10020F608;
  qword_10020F608 = (uint64_t)v2;

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v5 = *(void **)(qword_10020F608 + 16);
  *(void *)(qword_10020F608 + 16) = v4;

  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v7 = *(void **)(qword_10020F608 + 8);
  *(void *)(qword_10020F608 + _Block_object_dispose(va, 8) = v6;

  dispatch_queue_attr_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v9 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v8);
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.authkit.piggybacking-request", v9);
  uint64_t v11 = *(void **)(qword_10020F608 + 32);
  *(void *)(qword_10020F608 + 32) = v10;

  id v12 = objc_opt_new(&OBJC_CLASS___NSOperationQueue);
  uint64_t v13 = *(void **)(qword_10020F608 + 40);
  *(void *)(qword_10020F608 + 40) = v12;

  return _[*(id *)(qword_10020F608 + 40) setQualityOfService:17];
}

void sub_1000A46C4(_Unwind_Exception *a1)
{
}

void sub_1000A4FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = _AKLogSystem(a1);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (a3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v40) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Accepting session finished successfully",  (uint8_t *)&v40,  2u);
    }

    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v9 = _AKSignpostLogSystem(Nanoseconds);
    dispatch_queue_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = v10;
    os_signpost_id_t v12 = *(void *)(a1 + 48);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      LOWORD(v40) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "PiggybackingProcessPushPayload",  "",  (uint8_t *)&v40,  2u);
    }

    uint64_t v14 = _AKSignpostLogSystem(v13);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      int v40 = 134218240;
      uint64_t v41 = v16;
      __int16 v42 = 2048;
      double v43 = (double)Nanoseconds / 1000000000.0;
      uint64_t v17 = "END [%lld] %fs:PiggybackingProcessPushPayload ";
      uint64_t v18 = v15;
      uint32_t v19 = 22;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v40, v19);
    }
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100140008(v7, v20, v21, v22, v23, v24, v25, v26);
    }

    unint64_t v27 = _AKSignpostGetNanoseconds(*(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v28 = _AKSignpostLogSystem(v27);
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    uint64_t v30 = v29;
    os_signpost_id_t v31 = *(void *)(a1 + 48);
    if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
    {
      int v40 = 67240192;
      LODWORD(v41) = [0 code];
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_INTERVAL_END,  v31,  "PiggybackingProcessPushPayload",  " Error=%{public,signpost.telemetry:number1,name=Error}d ",  (uint8_t *)&v40,  8u);
    }

    uint64_t v33 = _AKSignpostLogSystem(v32);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      double v34 = (double)v27 / 1000000000.0;
      uint64_t v35 = *(void *)(a1 + 48);
      unsigned int v36 = [0 code];
      int v40 = 134218496;
      uint64_t v41 = v35;
      __int16 v42 = 2048;
      double v43 = v34;
      __int16 v44 = 1026;
      unsigned int v45 = v36;
      uint64_t v17 = "END [%lld] %fs:PiggybackingProcessPushPayload  Error=%{public,signpost.telemetry:number1,name=Error}d ";
      uint64_t v18 = v15;
      uint32_t v19 = 28;
      goto LABEL_16;
    }
  }

  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[AKAppleIDPushHelperService sharedService](&OBJC_CLASS___AKAppleIDPushHelperService, "sharedService"));
  [v37 tearDownLoginNotifications];

  uint64_t v38 = *(void **)(a1 + 32);
  id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionId]);
  [v38 _removeAcceptingControllerForTransaction:v39];
}

void sub_1000A54B8(id a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10014009C();
  }

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"prefs:root=WIFI"));
  [v3 openSensitiveURL:v4 withOptions:0];
}

void sub_1000A5540(id a1)
{
  uint64_t v1 = _AKLogSystem(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001400C8();
  }
}

void sub_1000A56CC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionId]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v5 = _AKLogSystem([v4 setPayload:*(void *)(a1 + 40)]);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_queue_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Processing pending reply!", v10, 2u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 condition]);
    [v7 lock];

    dispatch_queue_attr_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 condition]);
    [v8 signal];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 condition]);
    [v9 unlock];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

uint64_t sub_1000A58C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A58D0(uint64_t a1)
{
}

void sub_1000A58D8(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    dispatch_queue_attr_t v8 = -[AKCAPiggybackReporter initWithRequestID:]( objc_alloc(&OBJC_CLASS___AKCAPiggybackReporter),  "initWithRequestID:",  a1[5]);
    uint64_t v5 = -[AKPiggybackAcceptingController initWithPiggybackReporter:]( objc_alloc(&OBJC_CLASS___AKPiggybackAcceptingController),  "initWithPiggybackReporter:",  v8);
    uint64_t v6 = *(void *)(a1[6] + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1[4] + 8) setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:a1[5]];
  }

id sub_1000A5A1C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000A5ACC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained _stopProximityController];

  objc_storeWeak((id *)(*(void *)(a1 + 32) + 24LL), 0LL);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000A6514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, id location)
{
}

void sub_1000A65C8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AKAppleIDPushHelperService sharedService](&OBJC_CLASS___AKAppleIDPushHelperService, "sharedService"));
  [v6 setEnableCriticalReliability:0];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000A6648(id a1, NSHTTPURLResponse *a2, NSData *a3, NSError *a4)
{
  uint64_t v4 = a4;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = _AKLogSystem(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100140120();
    }
  }
}

void sub_1000A669C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) payload]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 transactionId]);
  [v2 setObject:v1 forKeyedSubscript:v3];
}

void sub_1000A6700(uint64_t a1)
{
  uint64_t v88 = _os_activity_create( (void *)&_mh_execute_header,  "authkit/circle-operation",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v88, &state);
  uint64_t v3 = _AKLogSystem(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payload]);
    *(_DWORD *)buf = 138412290;
    v94 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Starting circle operation with context: %@",  buf,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  [*(id *)(a1 + 40) lock];
  while (([WeakRetained isCancelled] & 1) == 0
       && !*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) payload]);
    if (v6)
    {

      break;
    }

    id v7 = [*(id *)(a1 + 56) timeIntervalSinceNow];
    if (v8 <= 0.0) {
      break;
    }
    uint64_t v9 = _AKLogSystem(v7);
    dispatch_queue_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v11 = @"NO";
      }
      [*(id *)(a1 + 56) timeIntervalSinceNow];
      os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412802;
      v94 = v11;
      __int16 v95 = 2112;
      double v96 = *(double *)&v12;
      __int16 v97 = 2112;
      uint64_t v98 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Waiting... %@ - (%@) - %@", buf, 0x20u);
    }

    uint64_t v14 = *(void **)(a1 + 40);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 1.0));
    [v14 waitUntilDate:v15];
  }

  [*(id *)(a1 + 40) unlock];
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(dispatch_queue_s **)(v16 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A71A0;
  block[3] = &unk_1001C6538;
  void block[4] = v16;
  id v91 = *(id *)(a1 + 32);
  dispatch_sync(v17, block);
  id v18 = [WeakRetained isCancelled];
  if ((_DWORD)v18)
  {
    uint64_t v19 = _AKLogSystem(v18);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payload]);
      *(_DWORD *)buf = 138412290;
      v94 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Cancelled piggybacking request: %@",  buf,  0xCu);
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7064LL));
    unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 112), *(void *)(a1 + 120));
    uint64_t v24 = _AKSignpostLogSystem(Nanoseconds);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = v25;
    os_signpost_id_t v27 = *(void *)(a1 + 112);
    if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
    {
      uint64_t v28 = *(const __CFString **)(a1 + 72);
      unsigned int v29 = [v22 code];
      *(_DWORD *)buf = 138543618;
      v94 = v28;
      __int16 v95 = 1026;
      LODWORD(v96) = v29;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v26,  OS_SIGNPOST_INTERVAL_END,  v27,  "PiggyCircleRequest",  " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x12u);
    }

    uint64_t v31 = _AKSignpostLogSystem(v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(const __CFString **)(a1 + 112);
      uint64_t v34 = *(void *)(a1 + 72);
      unsigned int v35 = [v22 code];
      *(_DWORD *)buf = 134218754;
      v94 = v33;
      __int16 v95 = 2048;
      double v96 = (double)Nanoseconds / 1000000000.0;
      __int16 v97 = 2114;
      uint64_t v98 = v34;
      __int16 v99 = 1026;
      unsigned int v100 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{pub lic,signpost.telemetry:number2,name=Error}d ",  buf,  0x26u);
    }

    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
LABEL_24:

    goto LABEL_32;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
  {
    id v49 = [*(id *)(a1 + 56) timeIntervalSinceNow];
    if (v50 >= 0.0)
    {
      uint64_t v73 = _AKLogSystem(v49);
      uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v75 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payload]);
        uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) payload]);
        *(_DWORD *)buf = 138412546;
        v94 = v75;
        __int16 v95 = 2112;
        double v96 = *(double *)&v76;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Circle request (%@) completed with response: %@",  buf,  0x16u);
      }

      unint64_t v77 = _AKSignpostGetNanoseconds(*(void *)(a1 + 112), *(void *)(a1 + 120));
      uint64_t v78 = _AKSignpostLogSystem(v77);
      __int16 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      id v80 = v79;
      os_signpost_id_t v81 = *(void *)(a1 + 112);
      if (v81 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v79))
      {
        uint64_t v82 = *(const __CFString **)(a1 + 72);
        *(_DWORD *)buf = 138543618;
        v94 = v82;
        __int16 v95 = 1026;
        LODWORD(v96) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v80,  OS_SIGNPOST_INTERVAL_END,  v81,  "PiggyCircleRequest",  " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x12u);
      }

      uint64_t v84 = _AKSignpostLogSystem(v83);
      double v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218754;
        uint64_t v86 = *(void *)(a1 + 72);
        v94 = *(const __CFString **)(a1 + 112);
        __int16 v95 = 2048;
        double v96 = (double)v77 / 1000000000.0;
        __int16 v97 = 2114;
        uint64_t v98 = v86;
        __int16 v99 = 1026;
        unsigned int v100 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{p ublic,signpost.telemetry:number2,name=Error}d ",  buf,  0x26u);
      }

      uint64_t v87 = *(void *)(a1 + 88);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) payload]);
      (*(void (**)(uint64_t, void *, void))(v87 + 16))(v87, v22, 0LL);
    }

    else
    {
      uint64_t v51 = _AKLogSystem(v49);
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v53 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payload]);
        *(_DWORD *)buf = 138412290;
        v94 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Timeout for piggybacking request: %@",  buf,  0xCu);
      }

      if ([*(id *)(a1 + 32) _notifyOfTimeout])
      {
        uint64_t v54 = _AKLogSystem([*(id *)(a1 + 80) didCircleTimeout]);
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          sub_100140180();
        }

        [*(id *)(a1 + 32) setWaitForReply:0];
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payload]);
        [v56 setClientErrorCode:-9002];

        id v57 = [*(id *)(a1 + 64) performCircleRequestWithContext:*(void *)(a1 + 32) completion:0];
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
      unint64_t v58 = _AKSignpostGetNanoseconds(*(void *)(a1 + 112), *(void *)(a1 + 120));
      uint64_t v59 = _AKSignpostLogSystem(v58);
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      uint64_t v61 = v60;
      os_signpost_id_t v62 = *(void *)(a1 + 112);
      if (v62 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v60))
      {
        NSErrorUserInfoKey v63 = *(const __CFString **)(a1 + 72);
        unsigned int v64 = [v22 code];
        *(_DWORD *)buf = 138543618;
        v94 = v63;
        __int16 v95 = 1026;
        LODWORD(v96) = v64;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v61,  OS_SIGNPOST_INTERVAL_END,  v62,  "PiggyCircleRequest",  " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x12u);
      }

      uint64_t v66 = _AKSignpostLogSystem(v65);
      uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v68 = *(const __CFString **)(a1 + 112);
        uint64_t v69 = *(void *)(a1 + 72);
        unsigned int v70 = [v22 code];
        *(_DWORD *)buf = 134218754;
        v94 = v68;
        __int16 v95 = 2048;
        double v96 = (double)v58 / 1000000000.0;
        __int16 v97 = 2114;
        uint64_t v98 = v69;
        __int16 v99 = 1026;
        unsigned int v100 = v70;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{p ublic,signpost.telemetry:number2,name=Error}d ",  buf,  0x26u);
      }

      uint64_t v71 = *(void *)(a1 + 88);
      id v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7029LL));
      (*(void (**)(uint64_t, void, void *))(v71 + 16))(v71, 0LL, v72);
    }

    goto LABEL_24;
  }

  unint64_t v36 = _AKSignpostGetNanoseconds(*(void *)(a1 + 112), *(void *)(a1 + 120));
  uint64_t v37 = _AKSignpostLogSystem(v36);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  id v39 = v38;
  os_signpost_id_t v40 = *(void *)(a1 + 112);
  if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
  {
    uint64_t v41 = *(const __CFString **)(a1 + 72);
    unsigned int v42 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
    *(_DWORD *)buf = 138543618;
    v94 = v41;
    __int16 v95 = 1026;
    LODWORD(v96) = v42;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v39,  OS_SIGNPOST_INTERVAL_END,  v40,  "PiggyCircleRequest",  " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ",  buf,  0x12u);
  }

  uint64_t v44 = _AKSignpostLogSystem(v43);
  unsigned int v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = *(const __CFString **)(a1 + 112);
    uint64_t v47 = *(void *)(a1 + 72);
    unsigned int v48 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
    *(_DWORD *)buf = 134218754;
    v94 = v46;
    __int16 v95 = 2048;
    double v96 = (double)v36 / 1000000000.0;
    __int16 v97 = 2114;
    uint64_t v98 = v47;
    __int16 v99 = 1026;
    unsigned int v100 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{publi c,signpost.telemetry:number2,name=Error}d ",  buf,  0x26u);
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
LABEL_32:

  os_activity_scope_leave(&state);
}

void sub_1000A7104( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, os_activity_scope_state_s state)
{
}

void sub_1000A71A0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) payload]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionId]);
  [v1 removeObjectForKey:v2];
}

void sub_1000A71F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v9 = _AKSignpostLogSystem(Nanoseconds);
  dispatch_queue_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 80);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    int v35 = 138543618;
    id v36 = v13;
    __int16 v37 = 1026;
    LODWORD(v3_Block_object_dispose((const void *)(v46 - 176), 8) = [v7 code];
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "PiggyExecuteRequest",  " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v35,  0x12u);
  }

  uint64_t v15 = _AKSignpostLogSystem(v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(double *)&uint64_t v17 = (double)Nanoseconds / 1000000000.0;
    id v18 = *(void **)(a1 + 80);
    uint64_t v19 = *(void **)(a1 + 32);
    unsigned int v20 = [v7 code];
    int v35 = 134218754;
    id v36 = v18;
    __int16 v37 = 2048;
    uint64_t v38 = v17;
    __int16 v39 = 2114;
    os_signpost_id_t v40 = v19;
    __int16 v41 = 1026;
    unsigned int v42 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:PiggyExecuteRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{publ ic,signpost.telemetry:number2,name=Error}d ",  (uint8_t *)&v35,  0x26u);
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) payload]);
  id v22 = [v21 circleStep];

  if (v7)
  {
    uint64_t v24 = _AKLogSystem(v23);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100140120();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a4);
    [*(id *)(a1 + 48) _processUIIfNeededForError:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) circleStep:v22];
    [*(id *)(a1 + 56) lock];
    [*(id *)(a1 + 56) signal];
    id v23 = [*(id *)(a1 + 56) unlock];
  }

  if (!v22)
  {
    uint64_t v26 = _AKLogSystem(v23);
    os_signpost_id_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = 138412290;
      id v36 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Received response for circle (step 0) request: %@",  (uint8_t *)&v35,  0xCu);
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[AKCircleRequestPayload payloadWithResponseData:forCircleStep:]( &OBJC_CLASS___AKCircleRequestPayload,  "payloadWithResponseData:forCircleStep:",  v6,  0LL));
    unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([v28 presenceSID]);

    uint64_t v31 = _AKLogSystem(v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      if (v33)
      {
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v28 presenceSID]);
        int v35 = 138412802;
        id v36 = v28;
        __int16 v37 = 2160;
        uint64_t v38 = 1752392040LL;
        __int16 v39 = 2112;
        os_signpost_id_t v40 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Circle (step 0) response payload (%@) received with presenceSID (%{mask.hash}@)",  (uint8_t *)&v35,  0x20u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      if (v33)
      {
        int v35 = 138412290;
        id v36 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Circle (step 0) response payload (%@) does not contain presenceSID, ignoring response",  (uint8_t *)&v35,  0xCu);
      }
    }
  }
}

void sub_1000A7728(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AKGlobalConfigService);
  uint64_t v2 = (void *)qword_10020F620;
  qword_10020F620 = (uint64_t)v1;
}

void sub_1000A7920(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Fetched global config after locale change.",  v5,  2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  [v4 setLastKnownLocale:*(void *)(a1 + 32)];
}

void sub_1000A7E24(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  id v7 = a3;
  id v8 = a2;
  unint64_t Nanoseconds = _AKSignpostGetNanoseconds(v5, v6);
  uint64_t v10 = _AKSignpostLogSystem();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  os_signpost_id_t v12 = v11;
  os_signpost_id_t v13 = a1[5];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v17) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v13,  "FetchGlobalConfig",  "",  (uint8_t *)&v17,  2u);
  }

  uint64_t v14 = _AKSignpostLogSystem();
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a1[5];
    int v17 = 134218240;
    uint64_t v18 = v16;
    __int16 v19 = 2048;
    double v20 = (double)Nanoseconds / 1000000000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs:FetchGlobalConfig ",  (uint8_t *)&v17,  0x16u);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

void sub_1000A7F98(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  if (v6 && !v7) {
    goto LABEL_5;
  }
  id v8 = [*(id *)(a1 + 40) isRecoverableError:v7];
  if ((v8 & 1) != 0)
  {
    if (v6)
    {
LABEL_5:
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_unsafe_updateCacheWithData:", v6));
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(dispatch_queue_s **)(v10 + 8);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      void v34[2] = sub_1000A812C;
      v34[3] = &unk_1001C6538;
      v34[4] = v10;
      id v35 = v9;
      id v12 = v9;
      dispatch_async(v11, v34);
      (*(void (**)(void, id, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v12,  0LL,  v13,  v14);

      goto LABEL_12;
    }

    uint64_t v23 = _AKLogSystem(v8);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_100140218(v24, v25, v26, v27, v28, v29, v30, v31);
    }

    uint64_t v32 = *(void *)(a1 + 56);
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7005LL));
    (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0LL, v33);
  }

  else
  {
    uint64_t v15 = _AKLogSystem(v8);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10014024C((uint64_t)v7, v16, v17, v18, v19, v20, v21, v22);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_1000A812C(uint64_t a1)
{
}

id sub_1000A8138(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_1001402B0(a1, v3);
  }

  return [*(id *)(a1 + 40) cancelDataTask:*(void *)(a1 + 32)];
}

LABEL_75:
  id v104 = (void *)objc_claimAutoreleasedReturnValue(-[AKLivenessRequestProvider event](self, "event"));
  v105 = [v104 isEqual:AKPostDataEventFinalSignOut];

  if ((v105 & 1) == 0)
  {
    uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    char v107 = (void *)objc_claimAutoreleasedReturnValue([v106 activeServiceNamesForAccount:v47]);

    v108 = [v107 count];
    uint64_t v109 = _AKLogSystem(v108);
    uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    int v111 = v110;
    if (v108)
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v200 = v107;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "Posting active services as: %@",  buf,  0xCu);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v107, @"services");
    }

    else
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
        sub_1001404BC();
      }
    }
  }

  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v112 isInCircle]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v113, @"circleStatus");

  id v114 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([v114 primaryiCloudAccount]);

  if (v115)
  {
    v116 = objc_claimAutoreleasedReturnValue([v115 accountPropertyForKey:@"custodianAssigneeStatus"]);
    v117 = (void *)v116;
    if (v116) {
      v118 = (_UNKNOWN **)v116;
    }
    else {
      v118 = &off_1001D8F20;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v118,  @"isRecoveryContactAssignee");
    id v119 = objc_claimAutoreleasedReturnValue([v115 accountPropertyForKey:@"beneficiaryAssigneeStatus"]);
    v120 = (void *)v119;
    if (v119) {
      uint64_t v121 = (_UNKNOWN **)v119;
    }
    else {
      uint64_t v121 = &off_1001D8F20;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v121,  @"isLegacyContactAssignee");
    v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v115 isEnabledForDataclass:ACAccountDataclassMail]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v122,  @"icloudMailEnabled");
  }

  if ((id)-[AKLivenessRequestProvider livenessReason](self, "livenessReason") == (id)1)
  {
    v123 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    unsigned int v124 = (void *)objc_claimAutoreleasedReturnValue([v123 nextLivenessNonce:v47]);

    if (v124)
    {
      v125 = +[AKSecureKey osVersionAttestationRefKey](&OBJC_CLASS___AKSecureKey, "osVersionAttestationRefKey");
      if (v125)
      {
        v126 = v125;
        v177 = self;
        v175 = (void *)objc_claimAutoreleasedReturnValue([v124 dataUsingEncoding:4]);
        v127 = v124;
        v128 = (void *)objc_claimAutoreleasedReturnValue( +[AKSecurityHelper signData:withKey:error:]( &OBJC_CLASS___AKSecurityHelper,  "signData:withKey:error:"));
        v129 = (os_log_s *)0LL;
        v130 = v129;
        if (v128)
        {
          v131 = (void *)objc_claimAutoreleasedReturnValue([v128 base64EncodedStringWithOptions:0]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v131,  @"livenessNonceSig");

          v132 = v127;
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v127,  @"livenessNonce");
          id v133 = 0LL;
        }

        else
        {
          v132 = v127;
          id v133 = v129;
        }

        CFRelease(v126);

        unsigned int v124 = v132;
        self = v177;
      }

      else
      {
        id v133 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSError ak_generalErrorWithCode:errorDomain:underlyingError:]( &OBJC_CLASS___NSError,  "ak_generalErrorWithCode:errorDomain:underlyingError:",  -10009LL,  AKAttestationErrorDomain,  0LL));
        uint64_t v135 = _AKLogSystem(v133);
        v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
          sub_100140490();
        }
      }

      if (!v133) {
        goto LABEL_105;
      }
    }

    else
    {
      id v134 = objc_claimAutoreleasedReturnValue( +[NSError ak_generalErrorWithCode:errorDomain:underlyingError:]( &OBJC_CLASS___NSError,  "ak_generalErrorWithCode:errorDomain:underlyingError:",  -10008LL,  AKAttestationErrorDomain,  0LL));
      id v133 = (os_log_s *)v134;
      if (!v134) {
        goto LABEL_105;
      }
    }

    v136 = (void *)objc_claimAutoreleasedReturnValue( +[AAFAnalyticsEvent ak_analyticsEventWithEventName:error:]( &OBJC_CLASS___AAFAnalyticsEvent,  "ak_analyticsEventWithEventName:error:",  @"com.apple.authkit.sendLivenessNonce",  v133));
    __int128 v137 = (void *)objc_claimAutoreleasedReturnValue( +[AKAnalyticsReporterRTC rtcAnalyticsReporter]( &OBJC_CLASS___AKAnalyticsReporterRTC,  "rtcAnalyticsReporter"));
    [v137 sendEvent:v136];

    v138 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s errorDescriptionIncludingUnderlyingErrorsWithMaxDepth:]( v133,  "errorDescriptionIncludingUnderlyingErrorsWithMaxDepth:",  3LL));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v138,  @"livenessNonceError");

LABEL_105:
    if (v47)
    {
      id v139 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
      v140 = [v139 edpStateValueForAccount:v47];

      if (v140 == (id)1)
      {
        v142 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl context](self, "context"));
        v178 = self;
        id v143 = v124;
        __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v142 altDSID]);
        id v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[AKCDPFactory contextForAltDSID:](&OBJC_CLASS___AKCDPFactory, "contextForAltDSID:", v144));

        v146 = (void *)objc_claimAutoreleasedReturnValue( +[AKCDPFactory stateControllerWithContext:]( &OBJC_CLASS___AKCDPFactory,  "stateControllerWithContext:",  v145));
        v147 = (void *)objc_claimAutoreleasedReturnValue([v146 createEDPLivenessDictionaryWithContext:v145 error:0]);
        v148 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary aaf_dictionaryByAddingEntriesFromDictionary:]( v4,  "aaf_dictionaryByAddingEntriesFromDictionary:",  v147));
        v149 = (NSMutableDictionary *)[v148 mutableCopy];

        unsigned int v124 = v143;
        self = v178;

        id v4 = v149;
        uint64_t v47 = v196;
      }

      else
      {
        v153 = _AKLogSystem(v141);
        id v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEFAULT,  "EDP not eligible, couldn't fetch EDP health",  buf,  2u);
        }
      }
    }

    else
    {
      v150 = _AKLogSystem(v134);
      id v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
      {
        v151 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl context](self, "context"));
        v152 = (void *)objc_claimAutoreleasedReturnValue([v151 altDSID]);
        *(_DWORD *)buf = 138412290;
        v200 = v152;
        _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEFAULT,  "Couldn't find AuthKit account for altDSID: %@",  buf,  0xCu);
      }
    }

    uint64_t v19 = v194;
    uint64_t v18 = v195;
  }

  v154 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl context](self, "context"));
  v155 = (void *)objc_claimAutoreleasedReturnValue([v154 altDSID]);

  if (v155)
  {
    v157 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
    v158 = (void *)objc_claimAutoreleasedReturnValue(-[AKURLRequestProviderImpl context](self, "context"));
    v159 = (void *)objc_claimAutoreleasedReturnValue([v158 altDSID]);
    v160 = (void *)objc_claimAutoreleasedReturnValue([v157 iCloudAccountForAltDSID:v159]);

    if (v160)
    {
      v163 = objc_opt_class(&OBJC_CLASS___NSNumber, v162);
      v164 = (id)objc_claimAutoreleasedReturnValue( [v160 accountPropertyForKey:@"escrowRecordHealthCheckFailureCount"]);
      if ((objc_opt_isKindOfClass(v164, v163) & 1) != 0) {
        v165 = v164;
      }
      else {
        v165 = 0LL;
      }
      uint64_t v47 = v196;

      if (v165)
      {
        v170 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  (int)[v165 intValue] < 1));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v170,  @"icscStatus");
      }

      v168 = v179;
    }

    else
    {
      v169 = _AKLogSystem(v161);
      v165 = (id)objc_claimAutoreleasedReturnValue(v169);
      v168 = v179;
      uint64_t v47 = v196;
      if (os_log_type_enabled((os_log_t)v165, OS_LOG_TYPE_ERROR)) {
        sub_1001403E8(self, (os_log_s *)v165);
      }
    }

    v167 = v180;
  }

  else
  {
    v166 = _AKLogSystem(v156);
    v160 = (void *)objc_claimAutoreleasedReturnValue(v166);
    if (os_log_type_enabled((os_log_t)v160, OS_LOG_TYPE_ERROR)) {
      sub_1001403BC();
    }
    v168 = v179;
    v167 = v180;
  }

  v171 = -[NSMutableDictionary copy](v4, "copy");
  return v171;
}

void sub_1000AA080(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AKPrivateEmailStoreManager sharedInstance]( &OBJC_CLASS___AKPrivateEmailStoreManager,  "sharedInstance"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 currentEmailListVersion]);
  id v8 = v7;
  if (v10 && v7 && ([v7 isEqualToString:AKPrivateEmailInitialVersion] & 1) == 0)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) appendRequestUrl:v10 queryParameterNamed:AKPrivateEmailListVersionKey value:v8]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1000AACBC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:AKAuthenticationPasswordKey]);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
    }
  }
}

void sub_1000AAE74(id a1)
{
  byte_10020F628 = MGGetBoolAnswer(@"3kmXfug8VcxLI5yEmsqQKw");
}

void sub_1000AB03C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10020F638;
  qword_10020F638 = (uint64_t)v1;
}

void sub_1000AB210(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = _AKLogSystem(v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100140700((uint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetched app info for %@", buf, 0xCu);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  v6,  @"application/x-plist"));
    id v19 = [[AKApplicationMetadataInfo alloc] initWithResponseInfo:v18];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _buildApplicationAuthorizationController]);
    uint64_t v21 = *(void *)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_1000AB3E0;
    v24[3] = &unk_1001C6B38;
    id v22 = *(id *)(a1 + 48);
    id v25 = v19;
    id v26 = v22;
    id v23 = v19;
    [v20 updateAuthorizationListWithMetadataInfo:v23 withAltDSID:v21 completion:v24];
  }
}

uint64_t sub_1000AB3E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000AB5A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100140768((uint64_t)v6, v9, v10, v11, v12, v13, v14, v15);
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = 138412290;
      uint64_t v19 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetched Primary application bundle id for %@",  (uint8_t *)&v18,  0xCu);
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v16();
}

LABEL_108:
  __int16 v95 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper passwordResetToken](self, "passwordResetToken"));
  if (v95) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v95, @"X-Apple-I-PRK");
  }
  double v96 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper additionalHeaders](self, "additionalHeaders"));

  if (v96)
  {
    uint64_t v98 = _AKLogSystem(v97);
    __int16 v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG)) {
      sub_1001408F4(self, v99);
    }

    unsigned int v100 = (void *)objc_claimAutoreleasedReturnValue(-[AKSRPContextHelper additionalHeaders](self, "additionalHeaders"));
    -[NSMutableDictionary addEntriesFromDictionary:](v83, "addEntriesFromDictionary:", v100);
  }

  uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[AKSRPContextHelper walrusEnabled](self, "walrusEnabled")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v101, @"icdrsDisabled");

  v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[AKSRPContextHelper walrusWebAccessEnabled](self, "walrusWebAccessEnabled")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v102,  @"webAccessEnabled");

  if (-[AKSRPContextHelper passcodeAuthEnabled](self, "passcodeAuthEnabled")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  AKPasscodeAuthHeaderKey);
  }
  v103 = -[AKAnisetteProvisioningService initWithClient:authenticationContext:]( objc_alloc(&OBJC_CLASS___AKAnisetteProvisioningService),  "initWithClient:authenticationContext:",  self->_client,  self->_authContext);
  v131[0] = _NSConcreteStackBlock;
  v131[1] = 3221225472LL;
  v131[2] = sub_1000ACA98;
  v131[3] = &unk_1001CA9B8;
  id v104 = v129;
  uint64_t v135 = v104;
  v131[4] = self;
  v105 = v5;
  v132 = v105;
  uint64_t v106 = v83;
  id v133 = v106;
  char v107 = v130;
  id v134 = v107;
  -[AKAnisetteProvisioningService _attestationDataForRequestData:completion:]( v103,  "_attestationDataForRequestData:completion:",  0LL,  v131);
}

void sub_1000ACA98(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6
    || (uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 attestationHeaders]),
        id v13 = [v12 count],
        v12,
        !v13))
  {
    uint64_t v8 = _AKLogSystem(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001409C0((uint64_t)v7, v9);
    }

    uint64_t v10 = (void (**)(id, void, id))a1[8];
    id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSError ak_generalErrorWithCode:errorDomain:underlyingError:]( &OBJC_CLASS___NSError,  "ak_generalErrorWithCode:errorDomain:underlyingError:",  -8001LL,  AKAnisetteErrorDomain,  v7));
    v10[2](v10, 0LL, v11);
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _anisetteHeadersFromAttestationData:v5]);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000ACC5C;
    block[3] = &unk_1001CA418;
    id v18 = a1[5];
    id v19 = v5;
    id v20 = a1[6];
    id v21 = v14;
    id v22 = a1[4];
    id v23 = a1[7];
    id v24 = a1[8];
    id v11 = v14;
    dispatch_async(v16, block);
  }
}

void sub_1000ACC5C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) attestationHeaders]);
  [v2 addEntriesFromDictionary:v3];

  [*(id *)(a1 + 48) addEntriesFromDictionary:*(void *)(a1 + 56)];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueDeviceIdentifier]);

  if (v5)
  {
    uint64_t v7 = _AKLogSystem(v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Context has provieded UDID for proxied device.",  v38,  2u);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueDeviceIdentifier]);
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"X-Mme-Proxied-Device-Id"];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueDeviceIdentifier]);
    [*(id *)(a1 + 48) setObject:v12 forKeyedSubscript:@"X-Mme-Proxied-Device-Id"];
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 color]);

  if (v14)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 color]);
    [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"pdc"];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 enclosureColor]);

  if (v18)
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 enclosureColor]);
    [*(id *)(a1 + 32) setObject:v20 forKeyedSubscript:@"pdec"];
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 locale]);

  if (v22)
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 locale]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 localeIdentifier]);
    [*(id *)(a1 + 32) setObject:v25 forKeyedSubscript:@"ploc"];
  }

  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) companionDevice]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 uniqueDeviceIdentifier]);

  if (v27)
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) companionDevice]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 uniqueDeviceIdentifier]);
    [*(id *)(a1 + 32) setObject:v29 forKeyedSubscript:@"X-Mme-Companion-Device-Id"];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) companionDevice]);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 uniqueDeviceIdentifier]);
    [*(id *)(a1 + 72) setObject:v31 forKeyedSubscript:@"X-Mme-Companion-Device-Id"];
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) appProvidedContext]);

  if (v32)
  {
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 112) appProvidedContext]);
    [*(id *)(a1 + 32) setObject:v33 forKeyedSubscript:AKAppProvidedContextKey];
  }

  id v34 = [*(id *)(a1 + 32) copy];
  [*(id *)(a1 + 72) setObject:v34 forKeyedSubscript:kAppleIDAuthSupportClientProvidedData];

  id v35 = [*(id *)(a1 + 48) copy];
  [*(id *)(a1 + 72) setObject:v35 forKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders];

  uint64_t v36 = *(void *)(a1 + 80);
  id v37 = [*(id *)(a1 + 72) copy];
  (*(void (**)(uint64_t, id, void))(v36 + 16))(v36, v37, 0LL);
}

void sub_1000AD520(uint64_t a1)
{
  id v1 = *(id **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([v1[14] altDSID]);
  [v1 _clearDeviceListCacheForAltDSID:v2];
}

void sub_1000AD688(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412803;
    uint64_t v10 = v8;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2113;
    id v14 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Clear device list cache completed for context - %@ with status - %d and error - %{private}@",  (uint8_t *)&v9,  0x1Cu);
  }
}

void sub_1000AE440(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v8 = 0LL;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  id v5 = off_10020F650;
  __int16 v11 = off_10020F650;
  if (!off_10020F650)
  {
    uint64_t v6 = (void *)sub_1000B0754();
    id v5 = dlsym(v6, "DeviceIdentityIssueClientCertificateWithCompletion");
    v9[3] = (uint64_t)v5;
    off_10020F650 = v5;
  }

  _Block_object_dispose(&v8, 8);
  if (!v5)
  {
    uint64_t v7 = (_Unwind_Exception *)sub_10012D194();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v7);
  }

  ((void (*)(void, id, id))v5)(0LL, v3, v4);
}

void sub_1000AE504(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = _AKLogSystem(v8);
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100140BFC();
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void, void, void, void *))(v12 + 16))(v12, 0LL, 0LL, 0LL, v9);
    }
    goto LABEL_21;
  }

  if (a2)
  {
    id v8 = [v7 count];
    if (v8 == (id)2)
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _attestationWithSecCertRefs:v7]);
      id v14 = [*(id *)(a1 + 32) _isCachedAttestation:v13];
      uint64_t v15 = _AKLogSystem(v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        sub_100140B7C((char)v14, v16, v17);
      }

      id v18 = *(void **)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v28 = 0LL;
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 _signatureForDataFields:v19 withRefKey:a2 error:&v28]);
      id v21 = v28;
      CFRelease(a2);
      uint64_t v22 = *(void *)(a1 + 48);
      if (v21)
      {
        if (v22)
        {
          id v23 = *(void (**)(void))(v22 + 16);
LABEL_19:
          v23();
        }
      }

      else if (v22)
      {
        id v23 = *(void (**)(void))(v22 + 16);
        goto LABEL_19;
      }

      goto LABEL_21;
    }
  }

  uint64_t v24 = _AKLogSystem(v8);
  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
    sub_100140AF8((uint64_t)a2, v7);
  }

  uint64_t v26 = *(void *)(a1 + 48);
  if (v26)
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKGenericErrorDomain,  -17001LL,  0LL));
    (*(void (**)(uint64_t, void, void, void, void *))(v26 + 16))(v26, 0LL, 0LL, 0LL, v27);
  }

void sub_1000AEAAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9 || (id v9 = [v7 length]) == 0)
  {
    uint64_t v11 = _AKLogSystem(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100140C8C();
    }

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(uint64_t, void, void, void *))(v13 + 16))(v13, 0LL, 0LL, v10);
    }
  }

  else
  {
    id v14 = [v7 length];
    if (v14)
    {
      id v14 = [v8 count];
      if (v14 == (id)2)
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _attestationWithSecCertRefs:v8]);
        uint64_t v16 = *(void *)(a1 + 40);
        if (v16) {
          (*(void (**)(uint64_t, id, void *, void))(v16 + 16))(v16, v7, v15, 0LL);
        }
        goto LABEL_15;
      }
    }

    uint64_t v17 = _AKLogSystem(v14);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_100140CF0(v7, v8);
    }

    uint64_t v19 = *(void *)(a1 + 40);
    if (v19)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AKAttestationErrorDomain,  -10001LL,  0LL));
      (*(void (**)(uint64_t, void, void, void *))(v19 + 16))(v19, 0LL, 0LL, v15);
LABEL_15:
    }
  }
}

void sub_1000AECF8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AKConfiguration sharedConfiguration](&OBJC_CLASS___AKConfiguration, "sharedConfiguration"));
  [v2 setStrongDeviceIdentityMarker:*(void *)(a1 + 40)];
}

void sub_1000AEEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

id sub_1000AEF08()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10020F668;
  uint64_t v7 = qword_10020F668;
  if (!qword_10020F668)
  {
    id v1 = (void *)sub_1000B0754();
    uint64_t v0 = (id *)dlsym(v1, "kMAOptionsBAAKeychainAccessGroup");
    v5[3] = (uint64_t)v0;
    qword_10020F668 = (uint64_t)v0;
  }

  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    id v3 = (_Unwind_Exception *)sub_10012D194();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }

  return *v0;
}

id sub_1000AEF9C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10020F670;
  uint64_t v7 = qword_10020F670;
  if (!qword_10020F670)
  {
    id v1 = (void *)sub_1000B0754();
    uint64_t v0 = (id *)dlsym(v1, "kMAOptionsBAAKeychainLabel");
    v5[3] = (uint64_t)v0;
    qword_10020F670 = (uint64_t)v0;
  }

  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    id v3 = (_Unwind_Exception *)sub_10012D194();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }

  return *v0;
}

void sub_1000AF030(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _AKLogSystem(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BAA certs deleted for AuthKit label. Error: {%@}",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v5);
  }
}

id sub_1000AF304()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10020F680;
  uint64_t v7 = qword_10020F680;
  if (!qword_10020F680)
  {
    id v1 = (void *)sub_1000B0754();
    uint64_t v0 = (id *)dlsym(v1, "kMAOptionsBAAOIDKeyUsageProperties");
    v5[3] = (uint64_t)v0;
    qword_10020F680 = (uint64_t)v0;
  }

  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    id v3 = (_Unwind_Exception *)sub_10012D194();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }

  return *v0;
}

void sub_1000AF52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000AF7C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = _AKLogSystem(v6);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001410B4();
    }

    [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:v7];
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      uint64_t v11 = *(void (**)(void))(v10 + 16);
LABEL_6:
      v11();
      goto LABEL_23;
    }

    goto LABEL_23;
  }

  uint64_t v12 = _AKLogSystem(0LL);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = v13;
  if (!v5)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100140F94();
    }

    uint64_t v20 = -10006LL;
    goto LABEL_20;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_100141040(v5, v14);
  }

  id v15 = [v5 count];
  if (v15 != (id)2)
  {
    uint64_t v21 = _AKLogSystem(v15);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_100140FCC(v5, v22);
    }

    uint64_t v20 = -10007LL;
LABEL_20:
    id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_attestationErrorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_attestationErrorWithCode:underlyingError:",  v20,  0LL));
    [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:v23];
    uint64_t v24 = *(void *)(a1 + 56);
    if (v24) {
      (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0LL, v23);
    }

    goto LABEL_23;
  }

  unsigned __int8 v16 = [*(id *)(a1 + 32) requiredOIDPresentInCertificates:v5];
  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  if ((v16 & 1) == 0)
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_attestationErrorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_attestationErrorWithCode:underlyingError:",  -10012LL,  0LL));
    [v17 _sendAnalyticsEvent:v18 withError:v25];

    [*(id *)(a1 + 32) _renewDCRTWithContext:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    goto LABEL_23;
  }

  [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:0];
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19)
  {
    uint64_t v11 = *(void (**)(void))(v19 + 16);
    goto LABEL_6;
  }

void sub_1000AFD38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, void, id))(v7 + 16))(v7, 0LL, 0LL, v6);
    }
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _attestationWithSecCertRefs:v5]);
    uint64_t v9 = *(void *)(a1 + 40);
    id v37 = 0LL;
    uint64_t v10 = +[AKSecureKey createOSVersionAttestationRefKeyWithContext:accessControl:error:]( &OBJC_CLASS___AKSecureKey,  "createOSVersionAttestationRefKeyWithContext:accessControl:error:",  v9,  0LL,  &v37);
    id v11 = v37;
    uint64_t v12 = _AKLogSystem(v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = v13;
    if (v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100141330();
      }

      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v17 = *(void **)(a1 + 32);
      id v36 = 0LL;
      [v17 _updateRefKeyWithNonce:v15 context:v16 refkey:v10 error:&v36];
      id v18 = v36;
      if (v18)
      {
        CFRelease(v10);
        uint64_t v19 = *(void *)(a1 + 56);
        if (v19) {
          (*(void (**)(uint64_t, void, void, id))(v19 + 16))(v19, 0LL, 0LL, v18);
        }
      }

      else
      {
        uint64_t v21 = *(void **)(a1 + 32);
        uint64_t v22 = *(void *)(a1 + 40);
        id v35 = 0LL;
        id v23 = [v21 _retrieveDAK:v22 error:&v35];
        id v24 = v35;
        if (v24)
        {
          CFRelease(v10);
          uint64_t v25 = *(void *)(a1 + 56);
          if (v25) {
            (*(void (**)(uint64_t, void, void, id))(v25 + 16))(v25, 0LL, 0LL, v24);
          }
        }

        else
        {
          uint64_t v26 = *(void **)(a1 + 32);
          uint64_t v27 = *(void *)(a1 + 40);
          id v34 = 0LL;
          id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 _getAttestationData:v27 rk:v10 dak:v23 error:&v34]);
          id v33 = v34;
          CFRelease(v10);
          if (v23) {
            CFRelease(v23);
          }
          uint64_t v30 = _AKLogSystem(v29);
          uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            sub_1001412C4();
          }

          uint64_t v32 = *(void *)(a1 + 56);
          if (v32) {
            (*(void (**)(uint64_t, void *, void *, id))(v32 + 16))(v32, v28, v8, v33);
          }
        }
      }
    }

    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100141260();
      }

      uint64_t v20 = *(void *)(a1 + 56);
      if (v20) {
        (*(void (**)(uint64_t, void, void, id))(v20 + 16))(v20, 0LL, 0LL, v11);
      }
    }
  }
}

void sub_1000B03B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B0754()
{
  id v3 = 0LL;
  if (!qword_10020F658)
  {
    __int128 v4 = off_1001CAA78;
    uint64_t v5 = 0LL;
    qword_10020F658 = _sl_dlopen(&v4, &v3);
  }

  uint64_t v0 = qword_10020F658;
  id v1 = v3;
  if (!qword_10020F658)
  {
    id v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }

  if (v3) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_1000B0804()
{
  id v3 = 0LL;
  if (!qword_10020F690)
  {
    __int128 v4 = off_1001CAA90;
    uint64_t v5 = 0LL;
    qword_10020F690 = _sl_dlopen(&v4, &v3);
  }

  uint64_t v0 = qword_10020F690;
  id v1 = v3;
  if (!qword_10020F690)
  {
    id v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }

  if (v3) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_1000B0960(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v1 = qword_10020F6D0;
  uint64_t v7 = qword_10020F6D0;
  if (!qword_10020F6D0)
  {
    v8[0] = *(_OWORD *)off_1001CAAA8;
    v8[1] = *(_OWORD *)&off_1001CAAB8;
    uint64_t v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_10020F6D0 = v2;
    uint64_t v1 = v2;
  }

  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000B0A0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B0A24()
{
  id v3 = 0LL;
  uint64_t v0 = sub_1000B0960((uint64_t)&v3);
  uint64_t v1 = v3;
  if (!v0)
  {
    uint64_t v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_5;
  }

  if (v3) {
LABEL_5:
  }
    free(v1);
  return v0;
}

id sub_1000B0A7C()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F6D8;
  uint64_t v7 = qword_10020F6D8;
  if (!qword_10020F6D8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000B0B30;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_1000B0B30((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000B0B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_1000B0B30(uint64_t a1)
{
  Class result = objc_getClass("PBSUserPresentationRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F6D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_100141428();
    return (Class)sub_1000B0B84(v3);
  }

  return result;
}

id sub_1000B0B84()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10020F6E0;
  uint64_t v7 = qword_10020F6E0;
  if (!qword_10020F6E0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000B0C38;
    v3[3] = &unk_1001C6750;
    void v3[4] = &v4;
    sub_1000B0C38((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000B0C20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_1000B0C38(uint64_t a1)
{
  Class result = objc_getClass("PBSUserPresentationService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10020F6E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_10014144C();
    return (Class)sub_1000B0C8C(v3);
  }

  return result;
}

void *sub_1000B0C8C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F6E8;
  uint64_t v6 = qword_10020F6E8;
  if (!qword_10020F6E8)
  {
    id v1 = (void *)sub_1000B0A24();
    uint64_t v0 = dlsym(v1, "PBSUPRDialogTypeKey");
    void v4[3] = (uint64_t)v0;
    qword_10020F6E8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B0D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000B0D18()
{
  uint64_t v0 = (id *)sub_1000B0C8C();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_1000B0D38(v2);
}

void *sub_1000B0D38()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F6F0;
  uint64_t v6 = qword_10020F6F0;
  if (!qword_10020F6F0)
  {
    id v1 = (void *)sub_1000B0A24();
    uint64_t v0 = dlsym(v1, "PBSUPRDialogCustomViewServiceNameKey");
    void v4[3] = (uint64_t)v0;
    qword_10020F6F0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B0DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000B0DC4()
{
  uint64_t v0 = (id *)sub_1000B0D38();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_1000B0DE4(v2);
}

void *sub_1000B0DE4()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F6F8;
  uint64_t v6 = qword_10020F6F8;
  if (!qword_10020F6F8)
  {
    id v1 = (void *)sub_1000B0A24();
    uint64_t v0 = dlsym(v1, "PBSUPRDialogCustomViewControllerClassNameKey");
    void v4[3] = (uint64_t)v0;
    qword_10020F6F8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B0E58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000B0E70()
{
  uint64_t v0 = (id *)sub_1000B0DE4();
  if (v0) {
    return *v0;
  }
  uint64_t v2 = sub_10012D194();
  return (id)sub_1000B0E90(v2);
}

void *sub_1000B0E90()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = (void *)qword_10020F700;
  uint64_t v6 = qword_10020F700;
  if (!qword_10020F700)
  {
    id v1 = (void *)sub_1000B0A24();
    uint64_t v0 = dlsym(v1, "PBSUPRDialogTypeCustom");
    void v4[3] = (uint64_t)v0;
    qword_10020F700 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B0F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

AKAuthorizationRapportClient *sub_1000B0F1C()
{
  uint64_t v0 = (id *)sub_1000B0E90();
  if (v0) {
    return (AKAuthorizationRapportClient *)*v0;
  }
  uint64_t v2 = (AKAuthorizationRapportClient *)sub_10012D194();
  return -[AKAuthorizationRapportClient init](v2, v3);
}

void sub_1000B1134(_Unwind_Exception *a1)
{
}

void sub_1000B1150(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v6 = WeakRetained;
  if (WeakRetained && a2)
  {
    [WeakRetained performAuthorization:*(void *)(a1 + 32) companionLinkClient:*(void *)(a1 + 40) advertisingService:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }

  else
  {
    uint64_t v7 = _AKLogSiwa(WeakRetained, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_100141470(v8);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7090LL));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }
}

uint64_t sub_1000B1388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) bundleID]);
    [v4 openApplicationWithBundleID:v5];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000B1684(_Unwind_Exception *a1)
{
}

void sub_1000B16E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _AKLogSiwa(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Authorization Rapport Link Client invalidated",  v6,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidate];
}

void sub_1000B175C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _handleStartAuthorizingWithRequest:v9 options:v8 responseHandler:v7];
}

void sub_1000B17D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _handleAuthorizationDidFinishWithRequest:v9 options:v8 responseHandler:v7];
}

void sub_1000B184C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _handleDidStartServerAuthorizationWithEvent:v6 options:v5];
}

void sub_1000B18B0(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  id v6 = WeakRetained;
  if (v3)
  {
    uint64_t v7 = _AKLogSiwa(WeakRetained, v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100141518(v3);
    }

    id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSError ak_errorWithCode:](&OBJC_CLASS___NSError, "ak_errorWithCode:", -7069LL));
    [v6 _callCompletionWithAuthorization:0 error:v9];
  }

  else
  {
    id v9 = a1[4];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6[2] bundleID]);
    [v9 setAppBundleID:v10];

    id v12 = a1[5];
    id v11 = a1 + 5;
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 authorizationRequest]);
    if (v13
      && (id v14 = (void *)v13,
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*v11 passwordRequest]),
          v15,
          v14,
          v15))
    {
      uint64_t v16 = 3LL;
    }

    else
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*v11 authorizationRequest]);

      if (v17)
      {
        uint64_t v16 = 1LL;
      }

      else
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([*v11 passwordRequest]);

        if (v18)
        {
          uint64_t v16 = 2LL;
        }

        else
        {
          uint64_t v21 = _AKLogSiwa(v19, v20);
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_1001414B0((uint64_t)v11, v22, v23, v24, v25, v26, v27, v28);
          }

          uint64_t v16 = 0LL;
        }
      }
    }

    [v9 setFlags:v16];
    [v6 setAdvertisingService:v9];
    id v29 = [v9 activate];
    uint64_t v31 = _AKLogSiwa(v29, v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Authorization Rapport activated, and AppSignIn is advertising.",  (uint8_t *)v33,  2u);
    }
  }
}

uint64_t sub_1000B204C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B2180( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000B21A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (v4)
  {
    uint64_t v8 = _AKLogSiwa(WeakRetained, v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001415F8(v4);
    }
  }

  [v7 _callCompletionWithAuthorization:0 error:v4];
}

void sub_1000B2320( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000B2344(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = (void *)WeakRetained;
  if (a2
    && (uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSDictionary, v10),
        uint64_t WeakRetained = objc_opt_isKindOfClass(v7, v12),
        (WeakRetained & 1) != 0)
    && (uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 companionServicePresenter]),
        id v14 = [v13 typeOfMessage:v7],
        v13,
        v14 == (id)4))
  {
    id v15 = v7;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [v15 objectForKeyedSubscript:AKAuthorizationTVServicePresenterAppIconReplyKeyImageData]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [v15 objectForKeyedSubscript:AKAuthorizationTVServicePresenterAppIconReplyKeyImageScale]);
    [v11 setTvAppIconData:v16];
    id v18 = [v11 setTvAppIconScale:v17];
    uint64_t v20 = _AKLogSiwa(v18, v19);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [v16 length];
      [v17 floatValue];
      int v25 = 134218240;
      *(void *)uint64_t v26 = v22;
      *(_WORD *)&v26[8] = 2048;
      *(double *)&v26[10] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Fetched TV App Icon. {iconDataLength=%lu, iconScale=%f}",  (uint8_t *)&v25,  0x16u);
    }
  }

  else
  {
    uint64_t v24 = _AKLogSiwa(WeakRetained, v10);
    id v15 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
    {
      int v25 = 67109634;
      *(_DWORD *)uint64_t v26 = a2;
      *(_WORD *)&void v26[4] = 2112;
      *(void *)&v26[6] = v7;
      *(_WORD *)&v26[14] = 2112;
      *(void *)&uint8_t v26[16] = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_ERROR,  "Unexpected TV App Icon Response. {succeeded=%{BOOL}d, response=%@, error=%@}",  (uint8_t *)&v25,  0x1Cu);
    }
  }
}

void sub_1000B2890(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56LL);
  id v10 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v2,  1LL,  &v10));
  id v4 = v10;
  uint64_t v6 = v4;
  if (v3)
  {
    id v11 = @"CredentialRequest";
    uint64_t v12 = v3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v8 = _AKLogSiwa(v4, v5);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100141678();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    [*(id *)(a1 + 32) _callCompletionWithAuthorization:0 error:v6];
  }
}

uint64_t sub_1000B29CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000B2DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)v9), "domain", (void)v13));
        -[NSMutableSet addObject:](v4, "addObject:", v10);

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v4, "allObjects"));
  (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
}

void sub_1000B310C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AKTTRController);
  uint64_t v2 = (void *)qword_10020F708;
  qword_10020F708 = (uint64_t)v1;
}

void sub_1000B3960(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      id v5 = *(void (**)(void))(v4 + 16);
      id v6 = v3;
LABEL_6:
      v5();
      id v3 = v6;
    }
  }

  else if (v4)
  {
    id v5 = *(void (**)(void))(v4 + 16);
    id v6 = 0LL;
    goto LABEL_6;
  }
}

void sub_1000B3B8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  if ([v8 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    id v9 = [v7 code];

    if (v9 == (id)-7052LL)
    {
      uint64_t v11 = _AKLogSystem(v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Upgrade Token requires server UI.",  v26,  2u);
      }

      goto LABEL_12;
    }
  }

  else
  {
  }

  if (!v7)
  {
LABEL_12:
    id v22 = objc_alloc(&OBJC_CLASS___AKAuthenticationServerResponse);
    float v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) username]);
    uint64_t v24 = -[AKAuthenticationServerResponse initWithServerResponse:forAppleID:]( v22,  "initWithServerResponse:forAppleID:",  v6,  v23);

    uint64_t v25 = *(void *)(a1 + 40);
    if (v25) {
      (*(void (**)(uint64_t, AKAuthenticationServerResponse *, void))(v25 + 16))(v25, v24, 0LL);
    }

    goto LABEL_15;
  }

  uint64_t v13 = _AKLogSystem(v10);
  __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1001418C0((uint64_t)v7, v14, v15, v16, v17, v18, v19, v20);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  if (v21) {
    (*(void (**)(uint64_t, void, id))(v21 + 16))(v21, 0LL, v7);
  }
LABEL_15:
}

void sub_1000B3F24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100141988((uint64_t)v9, v12, v13, v14, v15, v16, v17, v18);
    }

    uint64_t v19 = *(void *)(a1 + 32);
    if (v19)
    {
      uint64_t v20 = *(void (**)(void))(v19 + 16);
LABEL_10:
      v20();
    }
  }

  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Successful Upgrade Token!", v22, 2u);
    }

    uint64_t v21 = *(void *)(a1 + 32);
    if (v21)
    {
      uint64_t v20 = *(void (**)(void))(v21 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000B4E24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v10 = a4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
  if ([v5 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    id v6 = [v10 code];

    if (v6 == (id)-7038LL)
    {
      [*(id *)(a1 + 32) _showIdentityProviderUIFromResponse:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
      goto LABEL_8;
    }
  }

  else
  {
  }

  unsigned int v7 = objc_msgSend(v10, "ak_isUserCancelError");
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, void, void, id))(v8 + 16))(v8, 0LL, 0LL, v10);
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ak_errorWithCode:underlyingError:]( &OBJC_CLASS___NSError,  "ak_errorWithCode:underlyingError:",  -7019LL,  v10));
    (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0LL, 0LL, v9);
  }

void sub_1000B5184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1000B521C;
    v6[3] = &unk_1001C8720;
    id v5 = *(void **)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    [v5 _handleIdentityProviderResponsePayload:a3 completion:v6];
  }

uint64_t sub_1000B521C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B5454(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[AAFSerialization dictionaryFromObject:ofType:]( &OBJC_CLASS___AAFSerialization,  "dictionaryFromObject:ofType:",  a3,  @"application/x-plist"));
    uint64_t v8 = -[AKAuthenticationServerResponse initWithServerResponse:responseBody:]( objc_alloc(&OBJC_CLASS___AKAuthenticationServerResponse),  "initWithServerResponse:responseBody:",  v9,  v7);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

uint64_t sub_1000B5670(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000B86DC((uint64_t *)&unk_10020D1B0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v64 = sub_1000B8C38(v10, (uint64_t)qword_100211008);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v64);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = v8;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    uint64_t v16 = v9;
    uint64_t v17 = a2;
    uint64_t v18 = a1;
    uint64_t v19 = v3;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting passkey verification.", v20, 2u);
    uint64_t v21 = v20;
    uint64_t v3 = v19;
    a1 = v18;
    a2 = v17;
    id v9 = v16;
    uint64_t v7 = v15;
    uint64_t v6 = v14;
    uint64_t v8 = v13;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  id v22 = [a1 appProvidedData];
  if (v22)
  {
    float v23 = v22;
    os_signpost_id_t v62 = a1;
    uint64_t v63 = v6;
    uint64_t v24 = sub_1000B86DC(&qword_10020D9A0);
    uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v23,  &type metadata for String,  v24,  &protocol witness table for String);

    uint64_t v26 = *(void **)(v3 + 16);
    uint64_t v27 = v3;
    id v28 = [v26 requestProvider];
    uint64_t v29 = type metadata accessor for AppleIDPasskeyRequestProvider();
    uint64_t v30 = swift_dynamicCastClass(v28, v29);
    if (v30)
    {
      uint64_t v31 = (void *)v30;
      swift_unknownObjectRetain(v28);
      uint64_t v32 = sub_1000C7008(v25);
      swift_bridgeObjectRelease(v25);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v32);
      [v31 setAuthKitBody:isa];
      swift_unknownObjectRelease(v28);

      uint64_t v34 = a2;
      uint64_t v35 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v34, v63);
      uint64_t v36 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v37 = (v36 + 16) & ~v36;
      unint64_t v38 = (v8 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v40 = swift_allocObject(&unk_1001CADE0, v39 + 8, v36 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v40 + v37, v9, v35);
      *(void *)(v40 + v3_Block_object_dispose(&a9, 8) = v27;
      __int16 v41 = v62;
      *(void *)(v40 + v39) = v62;
      aBlock[4] = sub_1000B8CF4;
      uint64_t v66 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000F4E3C;
      aBlock[3] = &unk_1001CADF8;
      unsigned int v42 = _Block_copy(aBlock);
      uint64_t v43 = v66;
      swift_retain(v27);
      id v44 = v41;
      swift_release(v43);
      [v26 executeRequestWithCompletion:v42];
      _Block_release(v42);
      return swift_unknownObjectRelease(v28);
    }

    swift_bridgeObjectRelease(v25);
    uint64_t v54 = swift_unknownObjectRelease(v28);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      id v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Failed to verify passkey. Request provider type mismatch.",  v57,  2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v59 = v58;
    uint64_t v67 = -12007LL;
    unint64_t v60 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v61 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v67, v60, v59, v61);
    uint64_t v67 = aBlock[0];
    uint64_t v53 = v63;
  }

  else
  {
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unsigned int v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unsigned int v48 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Failed to verify passkey. Missing required parameters.",  v48,  2u);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v50 = v49;
    uint64_t v67 = -120012LL;
    unint64_t v51 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v52 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v67, v51, v50, v52);
    uint64_t v67 = aBlock[0];
    uint64_t v53 = v6;
  }

  return CheckedContinuation.resume(throwing:)(&v67, v53);
}

uint64_t sub_1000B5CE0(void *a1, void *aBlock, uint64_t a3)
{
  v3[3] = a1;
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain(a3);
  return swift_task_switch(sub_1000B5D38, 0LL, 0LL);
}

uint64_t sub_1000B5D38()
{
  id v1 = (int8x16_t *)swift_task_alloc(32LL);
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_1000B86DC((uint64_t *)&unk_10020D1A0);
  void *v2 = v0;
  v2[1] = sub_1000B5DEC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD000000000000021LL,  0x800000010016CEE0LL,  sub_1000B8C10,  v1,  v3);
}

uint64_t sub_1000B5DEC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000B5EEC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v4 = sub_1000B5E58;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000B5E58()
{
  uint64_t v1 = *(void *)(v0 + 32);

  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  sub_1000B86DC(&qword_10020D9A0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, Class, void))v4)[2](v4, isa, 0LL);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5EEC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);

  swift_release(v3);
  swift_task_dealloc(v2);
  uint64_t v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  id v5 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, void, void *))v5)[2](v5, 0LL, v4);

  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5F74()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void sub_1000B5FA0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = sub_1000B86DC((uint64_t *)&unk_10020D1B0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  id v72 = a7;
  if (a3 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v16 =  [(id)objc_opt_self(AAFSerialization) dictionaryFromObject:isa ofType:@"application/json"];
  swift_unknownObjectRelease(isa);
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v16,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)&__int128 v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKErrorStatusCodeKey);
  *((void *)&v77 + 1) = v18;
  AnyHashable.init<A>(_:)(v79, &v77, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v17 + 16) && (unint64_t v19 = sub_1000F9B88((uint64_t)v79), (v20 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v77);
  }

  else
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
  }

  swift_bridgeObjectRelease(v17);
  sub_1000B8D94((uint64_t)v79);
  uint64_t v21 = *((void *)&v78 + 1);
  sub_1000B8EC0((uint64_t)&v77, &qword_10020D1C0);
  if (v21)
  {
LABEL_10:
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_1000B8C38(v22, (uint64_t)qword_100211008);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_15;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    uint64_t v27 = "Failed to verify passkey. Missing response.";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
LABEL_15:

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v29 = v28;
    uint64_t v30 = -12007LL;
LABEL_16:
    *(void *)&__int128 v77 = v30;
    unint64_t v31 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v32 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
    _BridgedStoredNSError.init(_:userInfo:)(v79, &v77, v31, v29, v32);
    *(void *)&__int128 v77 = v79[0];
    CheckedContinuation.resume(throwing:)(&v77, v12);
    return;
  }

  v71[1] = a6;
  if (!a1)
  {
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    goto LABEL_31;
  }

  id v33 = [a1 allHeaderFields];
  uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v33,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v35 = AKGSTokenResponseKey;
  *(void *)&__int128 v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKGSTokenResponseKey);
  *((void *)&v75 + 1) = v36;
  AnyHashable.init<A>(_:)(v79, &v75, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v34 + 16) && (unint64_t v37 = sub_1000F9B88((uint64_t)v79), (v38 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v34 + 56) + 32 * v37, (uint64_t)&v75);
  }

  else
  {
    __int128 v75 = 0u;
    __int128 v76 = 0u;
  }

  swift_bridgeObjectRelease(v34);
  sub_1000B8D94((uint64_t)v79);
  if (!*((void *)&v76 + 1))
  {
    v71[0] = a5;
    id v39 = [a1 allHeaderFields];
    uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v39,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v42 = v41;
    Swift::String v43 = String.lowercased()();
    swift_bridgeObjectRelease(v42);
    Swift::String v73 = v43;
    AnyHashable.init<A>(_:)(v79, &v73, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v40 + 16) && (unint64_t v44 = sub_1000F9B88((uint64_t)v79), (v45 & 1) != 0))
    {
      sub_1000B8E74(*(void *)(v40 + 56) + 32 * v44, (uint64_t)&v77);
    }

    else
    {
      __int128 v77 = 0u;
      __int128 v78 = 0u;
    }

    a5 = v71[0];
    swift_bridgeObjectRelease(v40);
    sub_1000B8D94((uint64_t)v79);
LABEL_31:
    sub_1000B8EC0((uint64_t)&v75, &qword_10020D1C0);
    if (!*((void *)&v78 + 1)) {
      goto LABEL_24;
    }
    goto LABEL_32;
  }

  sub_1000B8EB0(&v75, &v77);
  if (!*((void *)&v78 + 1))
  {
LABEL_24:
    sub_1000B8EC0((uint64_t)&v77, &qword_10020D1C0);
LABEL_37:
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_1000B8C38(v63, (uint64_t)qword_100211008);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed to verify passkeys. Missing GS token.", v67, 2u);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v29 = v68;
    uint64_t v30 = -120014LL;
    goto LABEL_16;
  }

uint64_t sub_1000B6738(uint64_t a1)
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v2, (uint64_t)qword_100211008);
  uint64_t v3 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    unint64_t v16 = v7;
    *(_DWORD *)id v6 = 136315138;
    unint64_t v8 = sub_1000B8F28();
    uint64_t v9 = swift_bridgeObjectRetain(a1);
    uint64_t v10 = Dictionary.description.getter(v9, &type metadata for String, v8, &protocol witness table for String);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(a1);
    uint64_t v15 = sub_100103438(v10, v12, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished passkey verification with result %s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  unint64_t v16 = sub_1000C7770(a1);
  uint64_t v13 = sub_1000B86DC((uint64_t *)&unk_10020D1B0);
  return CheckedContinuation.resume(returning:)(&v16, v13);
}

void sub_1000B6940(void *a1, void *a2, void (*a3)(void), unint64_t a4)
{
  v123 = a3;
  sub_1000B86DC(&qword_10020D1D0);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v9 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v121 = *(void *)(v10 - 8);
  uint64_t v122 = v10;
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v120 = (char *)&v114 - v14;
  uint64_t v15 = *(void **)(v4 + 24);
  NSString v16 = [a1 altDSID];
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v18 = v17;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
  }

  id v124 = [v15 authKitAccountWithAltDSID:v16];

  if (v124)
  {
    if (objc_msgSend(v15, "edpStateValueForAccount:") != (id)1)
    {
      if (qword_10020CF98 != -1) {
        swift_once(&qword_10020CF98, sub_1000E5514);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v41 = sub_1000B8C38(v40, (uint64_t)qword_100211008);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "_isEDPEligible: NO", v44, 2u);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      goto LABEL_21;
    }

    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v119 = sub_1000B8C38(v19, (uint64_t)qword_100211008);
    char v20 = (os_log_s *)Logger.logObject.getter(v119);
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "_isEDPEligible: YES", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    if (a2)
    {
      id v23 = [a2 allHeaderFields];
      uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = AKWSCUUIDKey;
      *(void *)&__int128 v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKWSCUUIDKey);
      *((void *)&v134 + 1) = v26;
      AnyHashable.init<A>(_:)(&v126, &v134, &type metadata for String, &protocol witness table for String);
      if (*(void *)(v24 + 16) && (unint64_t v27 = sub_1000F9B88((uint64_t)&v126), (v28 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v24 + 56) + 32 * v27, (uint64_t)&v134);
      }

      else
      {
        __int128 v134 = 0uLL;
        __int128 v135 = 0uLL;
      }

      swift_bridgeObjectRelease(v24);
      sub_1000B8D94((uint64_t)&v126);
      if (*((void *)&v135 + 1))
      {
        sub_1000B8EB0(&v134, &v136);
        if (!*((void *)&v137 + 1))
        {
LABEL_28:
          uint64_t v45 = sub_1000B8EC0((uint64_t)&v136, &qword_10020D1C0);
          goto LABEL_38;
        }

LABEL_35:
        uint64_t v45 = swift_dynamicCast(&v126, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
        if ((v45 & 1) == 0)
        {
LABEL_38:
          uint64_t v42 = (os_log_s *)Logger.logObject.getter(v45);
          os_log_type_t v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v42, v63))
          {
            uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v64 = 0;
            uint64_t v65 = "Did not receive wscUUID in passkey verification response";
LABEL_67:
            _os_log_impl((void *)&_mh_execute_header, v42, v63, v65, v64, 2u);
            swift_slowDealloc(v64, -1LL, -1LL);
            goto LABEL_21;
          }

          goto LABEL_21;
        }

        v117 = v9;
        uint64_t v53 = (uint64_t)v126;
        unint64_t v54 = v127;
        uint64_t v55 = swift_bridgeObjectRetain_n(v127, 2LL);
        uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
        os_log_type_t v57 = static os_log_type_t.debug.getter();
        BOOL v58 = os_log_type_enabled(v56, v57);
        uint64_t v116 = v53;
        if (v58)
        {
          uint64_t v59 = swift_slowAlloc(12LL, -1LL);
          unint64_t v118 = a4;
          uint64_t v60 = (uint8_t *)v59;
          uint64_t v61 = (void **)swift_slowAlloc(32LL, -1LL);
          v126 = v61;
          *(_DWORD *)uint64_t v60 = 136315138;
          uint64_t v115 = (void **)(v60 + 4);
          swift_bridgeObjectRetain(v54);
          *(void *)&__int128 v136 = sub_100103438(v53, v54, (uint64_t *)&v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8);
          swift_bridgeObjectRelease_n(v54, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Received wscUUID in passkey verification response - %s",  v60,  0xCu);
          swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v61, -1LL, -1LL);
          unint64_t v62 = v60;
          a4 = v118;
          swift_slowDealloc(v62, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v54, 2LL);
        }

        os_log_type_t v66 = (__int128 *)v117;
        if (a2)
        {
          unint64_t v118 = v54;
          id v67 = [a2 allHeaderFields];
          uint64_t v68 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          *(void *)&__int128 v134 = 1702125892LL;
          *((void *)&v134 + 1) = 0xE400000000000000LL;
          AnyHashable.init<A>(_:)(&v126, &v134, &type metadata for String, &protocol witness table for String);
          if (*(void *)(v68 + 16) && (unint64_t v69 = sub_1000F9B88((uint64_t)&v126), (v70 & 1) != 0))
          {
            sub_1000B8E74(*(void *)(v68 + 56) + 32 * v69, (uint64_t)&v134);
          }

          else
          {
            __int128 v134 = 0uLL;
            __int128 v135 = 0uLL;
          }

          swift_bridgeObjectRelease(v68);
          sub_1000B8D94((uint64_t)&v126);
          if (*((void *)&v135 + 1))
          {
            sub_1000B8EB0(&v134, &v136);
            unint64_t v54 = v118;
            if (!*((void *)&v137 + 1))
            {
LABEL_49:
              swift_bridgeObjectRelease(v54);
              uint64_t v71 = &qword_10020D1C0;
              id v72 = &v136;
LABEL_64:
              uint64_t v90 = sub_1000B8EC0((uint64_t)v72, v71);
LABEL_65:
              uint64_t v42 = (os_log_s *)Logger.logObject.getter(v90);
              os_log_type_t v63 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v42, v63))
              {
                uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v64 = 0;
                uint64_t v65 = "Missing/unparsable Date in Response";
                goto LABEL_67;
              }

LABEL_56:
            if ((swift_dynamicCast(&v126, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
            {
              uint64_t v90 = swift_bridgeObjectRelease(v54);
              goto LABEL_65;
            }

            __int128 v77 = v126;
            unint64_t v78 = v127;
            __int16 v79 = (void *)objc_opt_self(&OBJC_CLASS___NSDate);
            NSString v80 = String._bridgeToObjectiveC()();
            id v81 = objc_msgSend(v79, "ak_dateFromPasskeyVerificationDateString:", v80);

            if (v81)
            {
              uint64_t v115 = v77;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

              uint64_t v83 = v121;
              uint64_t v82 = v122;
              uint64_t v84 = *(void (**)(__int128 *, char *, uint64_t))(v121 + 32);
              v84(v66, v13, v122);
              (*(void (**)(__int128 *, void, uint64_t, uint64_t))(v83 + 56))(v66, 0LL, 1LL, v82);
              if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v83 + 48))(v66, 1LL, v82) != 1)
              {
                unint64_t v118 = v54;
                v84((__int128 *)v120, (char *)v66, v82);
                uint64_t v85 = swift_bridgeObjectRetain(v78);
                uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
                os_log_type_t v87 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v86, v87))
                {
                  uint64_t v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  uint64_t v89 = (void **)swift_slowAlloc(32LL, -1LL);
                  v126 = v89;
                  *(_DWORD *)uint64_t v88 = 136315138;
                  swift_bridgeObjectRetain(v78);
                  *(void *)&__int128 v136 = sub_100103438((uint64_t)v115, v78, (uint64_t *)&v126);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8);
                  swift_bridgeObjectRelease_n(v78, 3LL);
                  _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "HTTP Date from passkey verification response - %s",  v88,  0xCu);
                  swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v89, -1LL, -1LL);
                  swift_slowDealloc(v88, -1LL, -1LL);
                }

                else
                {

                  swift_bridgeObjectRelease_n(v78, 2LL);
                }

                uint64_t v91 = sub_1000B86DC(&qword_10020D1D8);
                uint64_t inited = swift_initStackObject(v91, v133);
                *(_OWORD *)(inited + 16) = xmmword_100162E50;
                *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"srdwa");
                *(void *)(inited + 40) = v93;
                uint64_t v94 = sub_1000B86DC((uint64_t *)&unk_10020D1E0);
                uint64_t v95 = swift_initStackObject(v94, &v132);
                *(_OWORD *)(v95 + 16) = xmmword_100162E60;
                *(void *)(v95 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"wscUUID");
                *(void *)(v95 + 40) = v96;
                *(void *)(v95 + 72) = &type metadata for String;
                unint64_t v97 = v118;
                *(void *)(v95 + 4_Block_object_dispose(&a9, 8) = v116;
                *(void *)(v95 + 56) = v97;
                *(void *)(v95 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ts");
                *(void *)(v95 + 8_Block_object_dispose(&a9, 8) = v98;
                __int16 v99 = v120;
                double v100 = Date.timeIntervalSince1970.getter();
                *(void *)(v95 + 120) = &type metadata for Double;
                *(double *)(v95 + 96) = v100;
                *(void *)(v95 + 12_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ttlMin");
                *(void *)(v95 + 136) = v101;
                *(void *)(v95 + 16_Block_object_dispose(&a9, 8) = &type metadata for Int;
                *(void *)(v95 + 144) = 10LL;
                *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_1000F4970(v95);
                unint64_t v102 = sub_1000F4AA4(inited);
                uint64_t v103 = sub_1000C73BC(v102);
                swift_bridgeObjectRelease(v102);
                Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v103);
                id v105 =  [(id)objc_opt_self(AKPCSAuthContext) contextFromSRPServerResponseWithShorterTTL:isa];

                if (v105)
                {
                  id v107 = [(id)objc_opt_self(AKWebSessionPCSKeyProvider) sharedInstance];
                  uint64_t v108 = swift_allocObject(&unk_1001CAE58, 32LL, 7LL);
                  *(void *)(v108 + 16) = v123;
                  *(void *)(v108 + 24) = a4;
                  v130 = sub_1000B8F20;
                  uint64_t v131 = v108;
                  v126 = _NSConcreteStackBlock;
                  uint64_t v127 = 1107296256LL;
                  v128 = sub_1000B7B40;
                  v129 = &unk_1001CAE70;
                  uint64_t v109 = _Block_copy(&v126);
                  uint64_t v110 = v131;
                  swift_retain(a4);
                  swift_release(v110);
                  [v107 saveContext:v105 completion:v109];
                  _Block_release(v109);
                }

                else
                {
                  int v111 = (os_log_s *)Logger.logObject.getter(v106);
                  os_log_type_t v112 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v111, v112))
                  {
                    v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)v113 = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "There is no web session auth to save.",  v113,  2u);
                    swift_slowDealloc(v113, -1LL, -1LL);
                  }

                  v123();
                }

                (*(void (**)(char *, uint64_t))(v121 + 8))(v99, v122);
                return;
              }
            }

            else
            {
              (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v66, 1LL, 1LL, v122);
            }

            swift_bridgeObjectRelease(v54);
            swift_bridgeObjectRelease(v78);
            uint64_t v71 = &qword_10020D1D0;
            id v72 = v66;
            goto LABEL_64;
          }

          id v73 = [a2 allHeaderFields];
          uint64_t v74 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          v125._countAndFlagsBits = 1702125924LL;
          v125._object = (void *)0xE400000000000000LL;
          AnyHashable.init<A>(_:)(&v126, &v125, &type metadata for String, &protocol witness table for String);
          if (*(void *)(v74 + 16) && (unint64_t v75 = sub_1000F9B88((uint64_t)&v126), (v76 & 1) != 0))
          {
            sub_1000B8E74(*(void *)(v74 + 56) + 32 * v75, (uint64_t)&v136);
          }

          else
          {
            __int128 v136 = 0uLL;
            __int128 v137 = 0uLL;
          }

          swift_bridgeObjectRelease(v74);
          sub_1000B8D94((uint64_t)&v126);
          unint64_t v54 = v118;
        }

        else
        {
          __int128 v134 = 0u;
          __int128 v135 = 0u;
          __int128 v136 = 0u;
          __int128 v137 = 0u;
        }

        sub_1000B8EC0((uint64_t)&v134, &qword_10020D1C0);
        if (!*((void *)&v137 + 1)) {
          goto LABEL_49;
        }
        goto LABEL_56;
      }

      id v46 = [a2 allHeaderFields];
      uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v49 = v48;
      Swift::String v50 = String.lowercased()();
      swift_bridgeObjectRelease(v49);
      Swift::String v125 = v50;
      AnyHashable.init<A>(_:)(&v126, &v125, &type metadata for String, &protocol witness table for String);
      if (*(void *)(v47 + 16) && (unint64_t v51 = sub_1000F9B88((uint64_t)&v126), (v52 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v47 + 56) + 32 * v51, (uint64_t)&v136);
      }

      else
      {
        __int128 v136 = 0uLL;
        __int128 v137 = 0uLL;
      }

      swift_bridgeObjectRelease(v47);
      sub_1000B8D94((uint64_t)&v126);
    }

    else
    {
      __int128 v134 = 0u;
      __int128 v135 = 0u;
      __int128 v136 = 0u;
      __int128 v137 = 0u;
    }

    sub_1000B8EC0((uint64_t)&v134, &qword_10020D1C0);
    if (!*((void *)&v137 + 1)) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }

  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v29, (uint64_t)qword_100211008);
  id v30 = a1;
  unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc(12LL, -1LL);
    unint64_t v118 = a4;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v35 = (void **)swift_slowAlloc(32LL, -1LL);
    v126 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    id v124 = v34 + 4;
    id v36 = [v30 altDSID];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    *(void *)&__int128 v136 = sub_100103438(v37, v39, (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8);

    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing authkit account for altDSID %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
  }

  v123();
}

uint64_t sub_1000B78F0(uint64_t a1, uint64_t (*a2)(void))
{
  if (a1)
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v4, (uint64_t)qword_100211008);
    swift_errorRetain(a1);
    uint64_t v5 = swift_errorRetain(a1);
    id v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v7))
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      goto LABEL_12;
    }

    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(a1);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v16 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    *uint64_t v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Saved web session details. Error - %@.", v8, 0xCu);
    uint64_t v11 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    goto LABEL_10;
  }

  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_1000B8C38(v12, (uint64_t)qword_100211008);
  id v6 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v14))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v14, "Saved web session details successfully.", v8, 2u);
LABEL_10:
    swift_slowDealloc(v8, -1LL, -1LL);
  }

void sub_1000B7B40(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t variable initialization expression of SignInWithAppleDaemonService.client()
{
  return 0LL;
}

uint64_t variable initialization expression of ProximityAuthFlowController.authCompletion()
{
  return 0LL;
}

uint64_t variable initialization expression of ProximityAuthFlowController.pairingInProgress()
{
  return 0LL;
}

uint64_t type metadata accessor for AppleIDPasskeyVerificationProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd34AppleIDPasskeyVerificationProvider);
}

void type metadata accessor for SignInWithAppleError(uint64_t a1)
{
}

uint64_t sub_1000B7BE4(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D260,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_100163428);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000B7C24(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D260,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_100163428);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000B7C68(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000B7CA8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1000B7CB0(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D138,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162FDC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000B7CF0(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D138,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162FDC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000B7D30(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000B7D70(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D290,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001632D8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000B7DB0(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D290,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001632D8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000B7DF0(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000B7E30()
{
  return *v0;
}

void sub_1000B7E38(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_1000B7E40(uint64_t a1, uint64_t a2)
{
  return sub_1000B896C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000B7E4C(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_1000B7EC0(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000B7F3C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_1000B7F7C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AKAppleIDPasskeyErrorDomain);
}

uint64_t sub_1000B7F8C(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000B7FCC(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000B800C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000B8070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B80C4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AKSignInWithAppleErrorDomain);
}

uint64_t sub_1000B80D4(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000B8114(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000B8154(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000B81B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B8208()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceListErrorDomain);
}

uint64_t sub_1000B8218(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000B8258(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000B8298(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000B82FC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000B8330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000B8380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void *sub_1000B83DC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  return result;
}

void sub_1000B83EC(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1000B83F8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000B8404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000B845C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000B84B4()
{
  return sub_1000B850C( &qword_10020D128,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162F04);
}

uint64_t sub_1000B84E0()
{
  return sub_1000B850C( &qword_10020D130,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162F2C);
}

uint64_t sub_1000B850C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000B854C()
{
  return sub_1000B850C( &qword_10020D138,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162FDC);
}

uint64_t sub_1000B8578()
{
  return sub_1000B850C( &qword_10020D140,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162FAC);
}

uint64_t sub_1000B85A4()
{
  return sub_1000B850C( &qword_10020D148,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_100162F6C);
}

uint64_t sub_1000B85D0()
{
  return sub_1000B850C( &qword_10020D150,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001630BC);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1000B8610()
{
  return sub_1000B850C( &qword_10020D158,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100163084);
}

unint64_t sub_1000B8640()
{
  unint64_t result = qword_10020D160;
  if (!qword_10020D160)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10020D160);
  }

  return result;
}

uint64_t sub_1000B8684()
{
  return sub_1000B850C( &qword_10020D168,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1001630F4);
}

uint64_t sub_1000B86B0()
{
  return sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
}

uint64_t sub_1000B86DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000B871C()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000B8750()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020D184);
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10020D180 + dword_10020D180))(v2, v3, v4);
}

uint64_t sub_1000B87BC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000B8804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000B885C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000B8870@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000B88B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B88DC(uint64_t a1)
{
  uint64_t v2 = sub_1000B850C( &qword_10020D2C8,  (uint64_t (*)(uint64_t))type metadata accessor for Scope,  (uint64_t)&unk_100163520);
  uint64_t v3 = sub_1000B850C( &qword_10020D2D0,  (uint64_t (*)(uint64_t))type metadata accessor for Scope,  (uint64_t)&unk_1001634C8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000B8960(uint64_t a1, uint64_t a2)
{
  return sub_1000B896C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000B896C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000B89A8(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000B89E8()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  Swift::Int v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1000B8A58(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000B8AE4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020EF3C);
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10020EF38 + dword_10020EF38))(v2, v3, v4);
}

uint64_t sub_1000B8B60()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B8B8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10020EF4C);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10020EF48 + dword_10020EF48))( a1,  v4,  v5,  v6);
}

uint64_t sub_1000B8C10(uint64_t a1)
{
  return sub_1000B5670(*(void **)(v1 + 24), a1);
}

uint64_t sub_1000B8C38(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void type metadata accessor for AppleIDPasskeyError(uint64_t a1)
{
}

uint64_t sub_1000B8C64()
{
  uint64_t v1 = sub_1000B86DC((uint64_t *)&unk_10020D1B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1000B8CF4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(sub_1000B86DC((uint64_t *)&unk_10020D1B0) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000B5FA0(a1, a2, a3, a4, v4 + v10, *(void *)(v4 + v11), *(void **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000B8D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B8D8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B8D94(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B8DC8()
{
  uint64_t v1 = sub_1000B86DC((uint64_t *)&unk_10020D1B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B8E40()
{
  return sub_1000B6738(*(void *)(v0 + 16));
}

uint64_t sub_1000B8E74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1000B8EB0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000B8EC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000B86DC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000B8EFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000B8F20(uint64_t a1)
{
  return sub_1000B78F0(a1, *(uint64_t (**)(void))(v1 + 16));
}

unint64_t sub_1000B8F28()
{
  unint64_t result = qword_10020D1F0;
  if (!qword_10020D1F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10020D1F0);
  }

  return result;
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for AKAppleIDSecurityLevel(uint64_t a1)
{
}

void type metadata accessor for DeviceListError(uint64_t a1)
{
}

__n128 sub_1000B8FA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000B8FB0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000B8FD0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t sub_1000B900C()
{
  return sub_1000B850C( &qword_10020D228,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_100163200);
}

uint64_t sub_1000B9038()
{
  return sub_1000B850C( &qword_10020D230,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_100163228);
}

uint64_t sub_1000B9064()
{
  return sub_1000B850C( &qword_10020D238,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_100163350);
}

uint64_t sub_1000B9090()
{
  return sub_1000B850C( &qword_10020D240,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_100163378);
}

uint64_t sub_1000B90BC()
{
  return sub_1000B850C( &qword_10020D248,  (uint64_t (*)(uint64_t))type metadata accessor for Scope,  (uint64_t)&unk_100163490);
}

uint64_t sub_1000B90E8()
{
  return sub_1000B850C( &qword_10020D250,  (uint64_t (*)(uint64_t))type metadata accessor for Scope,  (uint64_t)&unk_100163468);
}

uint64_t sub_1000B9114()
{
  return sub_1000B850C( &qword_10020D258,  (uint64_t (*)(uint64_t))type metadata accessor for Scope,  (uint64_t)&unk_1001634F8);
}

uint64_t sub_1000B9140()
{
  return sub_1000B850C( &qword_10020D260,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_100163428);
}

uint64_t sub_1000B916C()
{
  return sub_1000B850C( &qword_10020D268,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001633F8);
}

uint64_t sub_1000B9198()
{
  return sub_1000B850C( &qword_10020D270,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001633B8);
}

uint64_t sub_1000B91C4()
{
  return sub_1000B850C(&qword_10020D278, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100163648);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_1000B9204()
{
  return sub_1000B850C(&qword_10020D280, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100163610);
}

uint64_t sub_1000B9230()
{
  return sub_1000B850C(&qword_10020D288, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100163680);
}

uint64_t sub_1000B925C()
{
  return sub_1000B850C( (unint64_t *)&qword_10020D440,  (uint64_t (*)(uint64_t))type metadata accessor for AppleIDPasskeyError,  (uint64_t)&unk_1001635A8);
}

uint64_t sub_1000B9288()
{
  return sub_1000B850C( &qword_10020D290,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001632D8);
}

uint64_t sub_1000B92B4()
{
  return sub_1000B850C( &qword_10020D298,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001632A8);
}

uint64_t sub_1000B92E0()
{
  return sub_1000B850C( &qword_10020D2A0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_100163268);
}

uint64_t sub_1000B930C()
{
  return sub_1000B850C(&qword_10020D2A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100163748);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void sub_1000B934C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1000B9390()
{
  return sub_1000B850C(&qword_10020D2B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100163710);
}

uint64_t sub_1000B93BC()
{
  return sub_1000B850C(&qword_10020D2B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100163780);
}

uint64_t sub_1000B93E8()
{
  return sub_1000B850C( (unint64_t *)&qword_10020D2C0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceListError,  (uint64_t)&unk_1001636A8);
}

id sub_1000B9448(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v10 = 0LL;
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for AccountSharingRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v9, "validateResponseData:error:", isa, &v10);

  id v5 = v10;
  if (v4) {
    return v10;
  }
  id v7 = v10;
  _convertNSErrorToError(_:)(v5);

  uint64_t v8 = ((uint64_t (*)(void))swift_willThrow)();
  return (id)swift_willThrow(v8);
}

id sub_1000B985C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountSharingRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountSharingRequestProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd29AccountSharingRequestProvider);
}

uint64_t sub_1000B98AC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000B98C0(result, a2);
  }
  return result;
}

uint64_t sub_1000B98C0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000B9B18(int a1, void *aBlock, void *a3)
{
  *(void *)(v3 + 16) = a3;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  id v5 = a3;
  return swift_task_switch(sub_1000B9B64, 0LL, 0LL);
}

uint64_t sub_1000B9B64()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey creation is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v7 = *(void **)(v0 + 16);
  uint64_t v6 = *(void (***)(void, void, void))(v0 + 24);

  v6[2](v6, 0LL, 0LL);
  _Block_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9D90(int a1, void *aBlock, void *a3)
{
  *(void *)(v3 + 16) = a3;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  id v5 = a3;
  return swift_task_switch(sub_1000B9DDC, 0LL, 0LL);
}

uint64_t sub_1000B9DDC()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey unenroll is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v7 = *(void **)(v0 + 16);
  uint64_t v6 = *(void (***)(void, void, void))(v0 + 24);

  v6[2](v6, 0LL, 0LL);
  _Block_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9EDC()
{
  if ((sub_1000BA264() & 1) != 0)
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v17, (uint64_t)qword_100211008);
    uint64_t v18 = v0;
    os_log_type_t v4 = (void *)Logger.logObject.getter(v18);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v4, v19))
    {

      return 0LL;
    }

    char v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v20 = 138412290;
    uint64_t v22 = *(void **)&v18[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
    uint64_t v26 = (uint64_t)v22;
    id v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    *os_log_type_t v21 = v22;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  v19,  "Account %@ is not passkey supported. Keychain sync is not enabled.",  v20,  0xCu);
    uint64_t v24 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v21, 1LL, v24);
    swift_slowDealloc(v21, -1LL, -1LL);
    uint64_t v16 = (uint64_t)v20;
  }

  else
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v2, (uint64_t)qword_100211008);
    uint64_t v3 = v0;
    os_log_type_t v4 = (void *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v4, v5))
    {

      return 0LL;
    }

    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    id v7 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v8 = *(void **)&v3[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
    uint64_t v26 = (uint64_t)v8;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    *id v7 = v8;

    *(_WORD *)(v6 + 12) = 2112;
    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v11 = v10;
    uint64_t v25 = -12002LL;
    unint64_t v12 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v13 = sub_1000BACEC();
    _BridgedStoredNSError.init(_:userInfo:)(&v26, &v25, v12, v11, v13);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v26);
    uint64_t v26 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    v7[1] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  v5,  "Account %@ is not passkey supported. Error %@",  (uint8_t *)v6,  0x16u);
    uint64_t v15 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v7, 2LL, v15);
    swift_slowDealloc(v7, -1LL, -1LL);
    uint64_t v16 = v6;
  }

  swift_slowDealloc(v16, -1LL, -1LL);

  return 0LL;
}

uint64_t sub_1000BA264()
{
  if ([*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_featureManager] isAppleIDPasskeyFeatureEnabled])
  {
    if ((sub_1000BAAD0() & 1) != 0)
    {
      if ([*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_device] isProtectedWithPasscode])
      {
        uint64_t v1 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
        id v2 = [*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager] DSIDForAccount:v1];
        if (v2)
        {
          uint64_t v3 = v2;
          os_log_type_t v4 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory];
          NSString v5 = [v2 stringValue];
          if (!v5)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            uint64_t v7 = v6;
            NSString v5 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v7);
          }

          unsigned int v8 = [v4 isCDPEnabledForDSID:v5];

          if (v8)
          {

            return 1LL;
          }

          if (qword_10020CF98 != -1) {
            swift_once(&qword_10020CF98, sub_1000E5514);
          }
          uint64_t v27 = type metadata accessor for Logger(0LL);
          uint64_t v28 = sub_1000B8C38(v27, (uint64_t)qword_100211008);
          uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
          os_log_type_t v30 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v29, v30))
          {
            unint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v31 = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Passkey not supported - CDP is not enabled", v31, 2u);
            swift_slowDealloc(v31, -1LL, -1LL);
          }

          goto LABEL_23;
        }

        if (qword_10020CF98 != -1) {
          swift_once(&qword_10020CF98, sub_1000E5514);
        }
        uint64_t v20 = type metadata accessor for Logger(0LL);
        sub_1000B8C38(v20, (uint64_t)qword_100211008);
        os_log_type_t v21 = v0;
        uint64_t v3 = (void *)Logger.logObject.getter(v21);
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled((os_log_t)v3, v22))
        {

          return 0LL;
        }

        id v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v23 = 138412290;
        os_log_type_t v32 = v1;
        id v25 = v1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
        *uint64_t v24 = v1;

        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  v22,  "Passkey not supported - Missing DSID for account %@.",  v23,  0xCu);
        uint64_t v26 = sub_1000B86DC(&qword_10020D770);
        swift_arrayDestroy(v24, 1LL, v26);
        swift_slowDealloc(v24, -1LL, -1LL);
        os_log_type_t v19 = v23;
        goto LABEL_22;
      }

      if (qword_10020CF98 != -1) {
        swift_once(&qword_10020CF98, sub_1000E5514);
      }
      uint64_t v17 = type metadata accessor for Logger(0LL);
      uint64_t v18 = sub_1000B8C38(v17, (uint64_t)qword_100211008);
      uint64_t v3 = (void *)Logger.logObject.getter(v18);
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v3, v12)) {
        goto LABEL_23;
      }
      unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v13 = 0;
      uint64_t v14 = "Passkey not supported - Device is not passcode protected.";
    }

    else
    {
      if (qword_10020CF98 != -1) {
        swift_once(&qword_10020CF98, sub_1000E5514);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      uint64_t v16 = sub_1000B8C38(v15, (uint64_t)qword_100211008);
      uint64_t v3 = (void *)Logger.logObject.getter(v16);
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v3, v12)) {
        goto LABEL_23;
      }
      unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v13 = 0;
      uint64_t v14 = "Passkey not supported - Not a primary account";
    }
  }

  else
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1000B8C38(v10, (uint64_t)qword_100211008);
    uint64_t v3 = (void *)Logger.logObject.getter(v11);
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v3, v12)) {
      goto LABEL_23;
    }
    unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v13 = 0;
    uint64_t v14 = "Passkey not supported - Feature flag is disabled.";
  }

  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v3, v12, v14, v13, 2u);
  os_log_type_t v19 = v13;
LABEL_22:
  swift_slowDealloc(v19, -1LL, -1LL);
LABEL_23:

  return 0LL;
}

uint64_t sub_1000BA884(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return swift_task_switch(sub_1000BA8CC, 0LL, 0LL);
}

uint64_t sub_1000BA8CC()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    NSString v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)NSString v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey deletion is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void **)(v0 + 16);
  uint64_t v6 = *(void (***)(void, void, void))(v0 + 24);

  v6[2](v6, 0LL, 0LL);
  _Block_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000BA9F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyValidator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyValidator()
{
  return objc_opt_self(&OBJC_CLASS___AKAppleIDPasskeyValidator);
}

uint64_t sub_1000BAAD0()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager];
  objc_super v2 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
  id v3 = [v1 altDSIDForAccount:v2];
  if (v3)
  {
    os_log_type_t v4 = v3;
    id v5 = [v1 iCloudAccountForAltDSID:v3];

    if (v5)
    {
      unsigned __int8 v6 = [v1 isPrimaryiCloudAccount:v5];

      if ((v6 & 1) != 0) {
        return 1LL;
      }
    }
  }

  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v8, (uint64_t)qword_100211008);
  id v9 = v0;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v12 = 138412290;
    uint64_t v16 = v2;
    id v14 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    void *v13 = v2;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not a primary account %@.", v12, 0xCu);
    uint64_t v15 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

  return 0LL;
}

unint64_t sub_1000BACEC()
{
  unint64_t result = qword_10020D440;
  if (!qword_10020D440)
  {
    type metadata accessor for AppleIDPasskeyError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001635A8, v1);
    atomic_store(result, (unint64_t *)&qword_10020D440);
  }

  return result;
}

uint64_t sub_1000BAD34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000BAD60()
{
  objc_super v2 = *(const void **)(v0 + 16);
  id v3 = *(void **)(v0 + 24);
  os_log_type_t v4 = (void *)swift_task_alloc(dword_10020D45C);
  *(void *)(v1 + 16) = v4;
  *os_log_type_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020D458 + dword_10020D458))(v2, v3);
}

uint64_t sub_1000BADD0()
{
  int v2 = *(unsigned __int8 *)(v0 + 16);
  os_log_type_t v4 = *(void **)(v0 + 24);
  id v3 = *(void **)(v0 + 32);
  id v5 = (void *)swift_task_alloc(dword_10020D47C);
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_10020D478 + dword_10020D478))(v2, v4, v3);
}

uint64_t sub_1000BAE48()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000BAE74()
{
  int v2 = *(unsigned __int8 *)(v0 + 16);
  os_log_type_t v4 = *(void **)(v0 + 24);
  id v3 = *(void **)(v0 + 32);
  id v5 = (void *)swift_task_alloc(dword_10020D49C);
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_10020D498 + dword_10020D498))(v2, v4, v3);
}

uint64_t sub_1000BAEE8(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return swift_task_switch(sub_1000BAF4C, 0LL, 0LL);
}

uint64_t sub_1000BAF4C()
{
  if (![*(id *)(*(void *)(v0 + 144) + 24) isSiwaCredentialSharingEnabled])
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    os_log_type_t v21 = (void *)(v0 + 16);
    os_log_type_t v22 = (uint64_t *)(v0 + 24);
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_1000B8C38(v23, (uint64_t)qword_100210FF0);
    id v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Feature flag SiwaCredentialSharingEnabled is not enabled",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v29 = v28;
    uint64_t v30 = -16001LL;
    goto LABEL_15;
  }

  sub_1000BBEF8();
  uint64_t v1 = (id *)(v0 + 136);
  id v2 = [*(id *)(v0 + 136) signInWithAppleAccount];
  *(void *)(v0 + 152) = v2;
  if (!v2)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    os_log_type_t v21 = (void *)(v0 + 32);
    os_log_type_t v22 = (uint64_t *)(v0 + 40);
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_1000B8C38(v36, (uint64_t)qword_100210FF0);
    unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No SIWA account set in context.", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v29 = v41;
    uint64_t v30 = -16007LL;
LABEL_15:
    uint64_t *v22 = v30;
    unint64_t v31 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v32 = sub_1000BC768();
    uint64_t v33 = _BridgedStoredNSError.init(_:userInfo:)(v21, v22, v31, v29, v32);
    swift_willThrow(v33);
    goto LABEL_16;
  }

  id v3 = v2;
  id v4 = [v2 shareInfo];
  *(void *)(v0 + 160) = v4;
  if (!v4)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    uint64_t v43 = sub_1000B8C38(v42, (uint64_t)qword_100210FF0);
    unint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "ShareInfo is missing in the account.", v46, 2u);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v48 = v47;
    *(void *)(v0 + 56) = -16007LL;
    unint64_t v49 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v50 = sub_1000BC768();
    unint64_t v51 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 48), v0 + 56, v49, v48, v50);
    swift_willThrow(v51);

    goto LABEL_16;
  }

  id v5 = v4;
  id v6 = [*v1 currentGroupID];
  if (!v6)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    uint64_t v53 = sub_1000B8C38(v52, (uint64_t)qword_100210FF0);
    unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "No currentGroupID set in context.", v56, 2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v58 = v57;
    *(void *)(v0 + 72) = -16007LL;
    unint64_t v59 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v60 = sub_1000BC768();
    uint64_t v61 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 64), v0 + 72, v59, v58, v60);
    goto LABEL_48;
  }

  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v10 = v9;
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v9;
  if (![v5 isCurrentUser])
  {
    if ([*v1 _simulateAccountSharingResponse])
    {
      uint64_t v62 = *(void *)(v0 + 144);

      swift_bridgeObjectRelease(v10);
      os_log_type_t v63 = *(void **)(v62 + 32);
      *(void *)(v0 + 112) = 0LL;
      unsigned int v64 = [v63 removeSharedAccount:v3 error:v0 + 112];
      uint64_t v65 = *(void **)(v0 + 112);
      if (v64)
      {
        id v66 = v65;

LABEL_40:
        uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
        return v34();
      }

      id v93 = v65;
      goto LABEL_47;
    }

    uint64_t v129 = v8;
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v71 = v0 + 80;
    uint64_t v72 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v72, (uint64_t)qword_100210FF0);
    id v73 = v3;
    id v74 = v5;
    id v75 = v73;
    id v76 = v74;
    __int128 v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      log = v77;
      uint64_t v79 = swift_slowAlloc(22LL, -1LL);
      uint64_t v123 = swift_slowAlloc(64LL, -1LL);
      v130[0] = v123;
      *(_DWORD *)uint64_t v79 = 136315394;
      id v126 = v76;
      NSString v80 = v75;
      id v81 = [v75 clientID];
      os_log_type_t type = v78;
      uint64_t v82 = v10;
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      unint64_t v85 = v84;

      uint64_t v86 = v83;
      uint64_t v10 = v82;
      *(void *)(v0 + 96) = sub_100103438(v86, v85, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
      swift_bridgeObjectRelease(v85);

      *(_WORD *)(v79 + 12) = 2080;
      id v87 = [v126 participantID];
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      unint64_t v90 = v89;

      uint64_t v91 = v88;
      id v75 = v80;
      id v76 = v126;
      *(void *)(v0 + 104) = sub_100103438(v91, v90, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      swift_bridgeObjectRelease(v90);

      __int128 v77 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "Unsharing %s belonging to %s", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1LL, -1LL);
      uint64_t v92 = v79;
      uint64_t v71 = v0 + 80;
      swift_slowDealloc(v92, -1LL, -1LL);
    }

    else
    {
    }

    double v100 = (os_log_s *)Logger.logObject.getter(v99);
    os_log_type_t v101 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v100, v101))
    {
      unint64_t v102 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v102 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "Fetching shareToken...", v102, 2u);
      swift_slowDealloc(v102, -1LL, -1LL);
    }

    uint64_t v103 = *(void *)(v0 + 144);

    id v104 = *(void **)(v103 + 32);
    *(void *)(v0 + 80) = 0LL;
    id v105 = [v104 shareTokenForAccount:v75 inGroup:v7 error:v71];

    uint64_t v106 = *(void **)(v0 + 80);
    if (v105)
    {
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      uint64_t v109 = v108;
      *(void *)(v0 + 200) = v108;
      id v110 = v106;

      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0LL;
      unsigned int v111 = [v104 removeSharedAccount:v75 error:v0 + 88];
      os_log_type_t v112 = *(void **)(v0 + 88);
      if (v111)
      {
        sub_1000BC7B0((void *)(*(void *)(v0 + 144) + 40LL), *(void *)(*(void *)(v0 + 144) + 64LL));
        id v113 = v112;
        id v114 = [v75 clientID];
        uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
        uint64_t v117 = v116;

        *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v117;
        unint64_t v118 = (void *)swift_task_alloc(dword_10020D924);
        *(void *)(v0 + 216) = v118;
        void *v118 = v0;
        v118[1] = sub_1000BBD9C;
        return sub_1000BF8E8(v115, v117, v129, v10, v107, v109);
      }

      id v121 = v112;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v109);
      _convertNSErrorToError(_:)(v112);
    }

    else
    {
      id v119 = v106;
      swift_bridgeObjectRelease(v10);
      _convertNSErrorToError(_:)(v106);
    }

    swift_willThrow(v120);

LABEL_16:
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }

  uint64_t v128 = v8;
  uint64_t v11 = v0 + 120;

  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v12, (uint64_t)qword_100210FF0);
  id v3 = v3;
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v125 = swift_slowAlloc(32LL, -1LL);
    v130[0] = v125;
    *(_DWORD *)uint64_t v15 = 136315138;
    id v16 = [v3 clientID];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v127 = v10;
    unint64_t v19 = v18;

    uint64_t v11 = v0 + 120;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = sub_100103438(v17, v19, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    unint64_t v20 = v19;
    uint64_t v10 = v127;
    swift_bridgeObjectRelease(v20);

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unsharing %s belonging to current user", v15, 0xCu);
    swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  id v67 = *(void **)(*(void *)(v0 + 144) + 32LL);
  *(void *)(v0 + 120) = 0LL;
  unsigned int v68 = [v67 removeSharedAccount:v3 error:v11];
  uint64_t v65 = *(void **)(v0 + 120);
  if (!v68)
  {
    id v93 = v65;
    swift_bridgeObjectRelease(v10);
LABEL_47:
    _convertNSErrorToError(_:)(v65);

LABEL_48:
    swift_willThrow(v61);

    goto LABEL_16;
  }

  id v69 = *v1;
  id v70 = v65;
  if ([v69 _simulateAccountSharingResponse])
  {

    swift_bridgeObjectRelease(v10);
    goto LABEL_40;
  }

  sub_1000BC7B0((void *)(*(void *)(v0 + 144) + 40LL), *(void *)(*(void *)(v0 + 144) + 64LL));
  id v94 = [v3 clientID];
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  uint64_t v97 = v96;

  *(void *)(v0 + 176) = v97;
  uint64_t v98 = (void *)swift_task_alloc(dword_10020D924);
  *(void *)(v0 + 184) = v98;
  *uint64_t v98 = v0;
  v98[1] = sub_1000BBBFC;
  return sub_1000BF8E8(v95, v97, v128, v10, 0LL, 0LL);
}

uint64_t sub_1000BBBFC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_1000BBD20;
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 176);
    swift_bridgeObjectRelease(*(void *)(v2 + 168));
    swift_bridgeObjectRelease(v5);
    id v4 = sub_1000BBCBC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000BBCBC()
{
  uint64_t v1 = *(void **)(v0 + 160);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BBD20()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);
  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  swift_bridgeObjectRelease(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BBD9C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_1000BBE68;
  }

  else
  {
    uint64_t v5 = v2[25];
    uint64_t v6 = v2[26];
    swift_bridgeObjectRelease(v2[21]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    id v4 = sub_1000BC7F4;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000BBE68()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void **)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  id v4 = *(void **)(v0 + 152);
  swift_bridgeObjectRelease(*(void *)(v0 + 200));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BBEF8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Entitlement Check", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void **)(v0 + 16);
  id v7 = [v6 hasInternalAccess];
  if ((v7 & 1) != 0 || (id v7 = [v6 hasPrivateAccess], (_DWORD)v7))
  {
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Client has necessary permission for accounts unsharing",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Client doesn't have access to perform account unsharing",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v20 = -16002LL;
    unint64_t v16 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v17 = sub_1000BC768();
    unint64_t v18 = _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    swift_willThrow(v18);
  }

  return 1LL;
}

uint64_t sub_1000BC138(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return swift_task_switch(sub_1000BC150, 0LL, 0LL);
}

uint64_t sub_1000BC150()
{
  if (![*(id *)(*(void *)(v0 + 160) + 24) isSiwaCredentialSharingEnabled])
  {
    os_log_type_t v12 = (void *)(v0 + 120);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v13 = (uint64_t *)(v0 + 128);
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_1000B8C38(v14, (uint64_t)qword_100210FF0);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Feature flag SiwaCredentialSharingEnabled is not enabled",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v20 = v19;
    uint64_t v21 = -16001LL;
    goto LABEL_10;
  }

  sub_1000BBEF8();
  id v1 = [*(id *)(v0 + 152) currentGroupID];
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v1;
  if (!v1)
  {
    os_log_type_t v12 = (void *)(v0 + 136);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v13 = (uint64_t *)(v0 + 144);
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_1000B8C38(v25, (uint64_t)qword_100210FF0);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No currentGroupID set in context.", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v20 = v30;
    uint64_t v21 = -16007LL;
LABEL_10:
    uint64_t *v13 = v21;
    unint64_t v22 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v23 = sub_1000BC768();
    uint64_t v24 = _BridgedStoredNSError.init(_:userInfo:)(v12, v13, v22, v20, v23);
    swift_willThrow(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(void **)(v0 + 152);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v5 = v4;
  *(void *)(v0 + 176) = v4;
  if ([v2 _simulateAccountSharingResponse])
  {
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = v0 + 16;
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v8 = *(void **)(*(void *)(v0 + 160) + 32LL);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000BC5C0;
    uint64_t v9 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v10 = (void *)(v0 + 80);
    v10[1] = 0x40000000LL;
    v10[2] = sub_1000BC698;
    v10[3] = &unk_1001CB320;
    void v10[4] = v9;
    [v8 removeAllAccountsBelongingToCurrentUserFrom:v7 completionHandler:v10];
    return swift_continuation_await(v6);
  }

  else
  {
    sub_1000BC7B0((void *)(*(void *)(v0 + 160) + 40LL), *(void *)(*(void *)(v0 + 160) + 64LL));
    unint64_t v31 = (void *)swift_task_alloc(dword_10020D904);
    *(void *)(v0 + 184) = v31;
    void *v31 = v0;
    v31[1] = sub_1000BC4A8;
    return sub_1000C05EC(v3, v5);
  }

uint64_t sub_1000BC4A8()
{
  uint64_t v2 = *(void *)(*v1 + 184);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  uint64_t v4 = *(void *)(v3 + 176);
  if (v0)
  {
    uint64_t v5 = *(void **)(v3 + 168);
    swift_bridgeObjectRelease(v4);

    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    swift_bridgeObjectRelease(v4);
    return swift_task_switch(sub_1000BC524, 0LL, 0LL);
  }

uint64_t sub_1000BC524()
{
  id v1 = v0 + 2;
  uint64_t v2 = v0[21];
  uint64_t v3 = *(void **)(v0[20] + 32LL);
  v0[2] = v0;
  v0[3] = sub_1000BC5C0;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000BC698;
  v5[3] = &unk_1001CB320;
  v5[4] = v4;
  [v3 removeAllAccountsBelongingToCurrentUserFrom:v2 completionHandler:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_1000BC5C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 192LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000BC654;
  }
  else {
    uint64_t v2 = sub_1000BC620;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000BC620()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BC654()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BC698(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_1000B86DC(&qword_10020DC20);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_1000BC70C()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  sub_1000BC7D4((void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for AccountUnsharingController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd26AccountUnsharingController);
}

unint64_t sub_1000BC768()
{
  unint64_t result = qword_10020D170;
  if (!qword_10020D170)
  {
    type metadata accessor for SignInWithAppleError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10016301C, v1);
    atomic_store(result, (unint64_t *)&qword_10020D170);
  }

  return result;
}

void *sub_1000BC7B0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_1000BC7D4(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000BC7F4()
{
  return sub_1000BBCBC();
}

void sub_1000BC844(uint64_t a1)
{
}

uint64_t sub_1000BC8A4()
{
  id v1 = [v0 code];
  if (qword_10020CF60 != -1) {
    swift_once(&qword_10020CF60, sub_1000BD334);
  }
  if (v1 != [(id)qword_10020D598 code]) {
    return 0LL;
  }
  id v2 = [v0 domain];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  id v6 = [(id)qword_10020D598 domain];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  if (v3 == v7 && v5 == v9)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v9, 0LL);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    uint64_t result = 0LL;
    if ((v11 & 1) == 0) {
      return result;
    }
  }

  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_1000B8C38(v13, (uint64_t)qword_100210FD8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "We got a nil error from ObjC. Treating as success", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  return 1LL;
}

id sub_1000BCA98(uint64_t a1)
{
  id v5 = 0LL;
  id v2 = [v1 keychainItemForDescriptor:a1 error:&v5];
  if (v5)
  {
    id v3 = v5;

    swift_willThrow();
    return 0LL;
  }

  return v2;
}

void *sub_1000BCB88(id a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [a1 setSynchronizable:1];
    NSString v5 = String._bridgeToObjectiveC()();
    [a1 setSharingGroup:v5];
  }

  id v22 = 0LL;
  id v6 = [v3 keychainItemsForDescriptor:a1 error:&v22];
  if (v22)
  {
    id v7 = v22;

    swift_willThrow(v8);
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v7);
    id v10 = [v9 domain];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    if (v11 == v14 && v13 == v15)
    {
      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    else
    {
      uint64_t v17 = v15;
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0LL);
      swift_bridgeObjectRelease(v13);
      id v19 = (id)swift_bridgeObjectRelease(v17);
      if ((v18 & 1) == 0) {
        goto LABEL_14;
      }
    }

    id v19 = [v9 code];
    if (v19 != (id)-25300LL)
    {
LABEL_14:
      swift_willThrow(v19);

      return (void *)v13;
    }

    return _swiftEmptyArrayStorage;
  }

  else
  {
    unint64_t v20 = sub_1000BD3A8();
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v20);
  }

  return (void *)v13;
}

void sub_1000BCE78(uint64_t a1)
{
}

void sub_1000BCED8(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  id v28 = 0LL;
  objc_msgSend(v4, *a2, a1, &v28);
  if (v28)
  {
    id v7 = v28;
    swift_willThrow(v7);
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v7);
    if ((sub_1000BC8A4() & 1) != 0)
    {
      if (qword_10020CF88 != -1) {
        swift_once(&qword_10020CF88, sub_1000E54E4);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = sub_1000B8C38(v9, (uint64_t)qword_100210FD8);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, v13, 2u);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      else
      {
      }
    }

    else
    {
      if (qword_10020CF88 != -1) {
        swift_once(&qword_10020CF88, sub_1000E54E4);
      }
      uint64_t v19 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v19, (uint64_t)qword_100210FD8);
      id v20 = v8;
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v27 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)unint64_t v23 = 138412290;
        id v28 = v20;
        id v24 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        *uint64_t v27 = v20;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, a4, v23, 0xCu);
        uint64_t v25 = sub_1000B86DC(&qword_10020D770);
        swift_arrayDestroy(v27, 1LL, v25);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      else
      {

        uint64_t v21 = (os_log_s *)v20;
      }

      swift_willThrow(v26);
    }
  }

  else
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_1000B8C38(v14, (uint64_t)qword_100210FD8);
    os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, a3, v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

uint64_t sub_1000BD280(void *a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5, const char *a6, const char *a7)
{
  id v11 = a3;
  id v12 = a1;
  sub_1000BCED8((uint64_t)v11, a5, a6, a7);

  return 1LL;
}

void sub_1000BD334()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithDomain:v1 code:0 userInfo:0];

  qword_10020D598 = (uint64_t)v2;
}

unint64_t sub_1000BD3A8()
{
  unint64_t result = qword_10020D5A0;
  if (!qword_10020D5A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AAFKeychainItem);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10020D5A0);
  }

  return result;
}

uint64_t sub_1000BD3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  return swift_task_switch(sub_1000BD450, 0LL, 0LL);
}

uint64_t sub_1000BD450()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 104) + 16LL);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 64) = 0LL;
  LODWORD(v1) = [v1 removeAllAccountsBelongingToParticipantWithParticipantID:v2 from:v3 error:v0 + 64];

  uint64_t v4 = *(void **)(v0 + 64);
  if ((_DWORD)v1)
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 88);
    sub_1000BC7B0((void *)(*(void *)(v0 + 104) + 24LL), *(void *)(*(void *)(v0 + 104) + 48LL));
    uint64_t v7 = sub_1000B86DC(&qword_10020DCC0);
    uint64_t inited = swift_initStackObject(v7, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100162E50;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = v5;
    id v9 = v4;
    swift_bridgeObjectRetain(v5);
    Swift::Int v10 = sub_1000CC420(inited);
    *(void *)(v0 + 112) = v10;
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    id v11 = (void *)swift_task_alloc(dword_10020DF74);
    *(void *)(v0 + 120) = v11;
    void *v11 = v0;
    v11[1] = sub_1000BD61C;
    return sub_1000D07C0(v10);
  }

  else
  {
    id v13 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000BD61C()
{
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 12_Block_object_dispose(&a9, 8) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000BD6E4, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v3 + 112));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000BD6E4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BD744()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for ParticipantGroupDepartureController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd35ParticipantGroupDepartureController);
}

uint64_t sub_1000BD790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  return swift_task_switch(sub_1000BD7F8, 0LL, 0LL);
}

uint64_t sub_1000BD7F8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 192) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 200) = v2;
  uint64_t v3 = type metadata accessor for AccountRevokingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v27 = *(void *)(v0 + 176);
    id v28 = v1;
    id v7 = [*(id *)(v0 + 168) clientID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    *(void *)(v0 + 144) = &type metadata for String;
    *(void *)(v0 + 120) = v8;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v10;
    sub_1000B8EB0((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 80));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24((_OWORD *)(v0 + 80), 0x695F746E65696C63LL, 0xE900000000000064LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    *(void *)(v0 + 104) = &type metadata for String;
    *(void *)(v0 + 80) = v27;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v6;
    sub_1000B8EB0((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    swift_bridgeObjectRetain(v6);
    char v12 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24((_OWORD *)(v0 + 120), 0x64695F6D616574LL, 0xE700000000000000LL, v12);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    *(void *)(v0 + 104) = &type metadata for Int;
    *(void *)(v0 + 80) = 1LL;
    sub_1000B8EB0((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    char v13 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24((_OWORD *)(v0 + 120), 0x747865746E6F63LL, 0xE700000000000000LL, v13);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v14 = sub_1000C7A50((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000BDC24;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CB368;
    [v28 executeRequestWithCompletion:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_1000B8C38(v17, (uint64_t)qword_100210FF0);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to revoke due to an invalid request", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v23 = v22;
    *(void *)(v0 + 120) = -16007LL;
    unint64_t v24 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v25 = sub_1000BC768();
    uint64_t v26 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v24, v23, v25);
    swift_willThrow(v26);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_1000BDC24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 216LL) = v1;
  if (v1) {
    id v2 = sub_1000BE24C;
  }
  else {
    id v2 = sub_1000BDCC8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000BDCC8()
{
  uint64_t v1 = *(void **)(v0 + 208);
  id v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  id v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/xml"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      *(void *)(v0 + 152) = 25445LL;
      *(void *)(v0 + 160) = 0xE200000000000000LL;
      AnyHashable.init<A>(_:)( (void *)(v0 + 80),  v0 + 152,  &type metadata for String,  &protocol witness table for String);
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9B88(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }

      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }

      swift_bridgeObjectRelease(v12);
      sub_1000B8D94(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0
          && !*(void *)(v0 + 152))
        {
          if (qword_10020CF90 != -1) {
            swift_once(&qword_10020CF90, sub_1000E54FC);
          }
          uint64_t v18 = type metadata accessor for Logger(0LL);
          uint64_t v19 = sub_1000B8C38(v18, (uint64_t)qword_100210FF0);
          os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v19);
          os_log_type_t v21 = static os_log_type_t.default.getter();
          BOOL v22 = os_log_type_enabled(v20, v21);
          uint64_t v23 = *(void *)(v0 + 200);
          if (v22)
          {
            unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Account revoke succeeded with IdMS", v24, 2u);
            swift_slowDealloc(v24, -1LL, -1LL);
            sub_1000B98C0(v4, v3);
            swift_unknownObjectRelease(v23);
          }

          else
          {
            swift_unknownObjectRelease(*(void *)(v0 + 200));
            sub_1000B98C0(v4, v3);
          }

          unint64_t v44 = *(uint64_t (**)(uint64_t))(v0 + 8);
          uint64_t v45 = 1LL;
          return v44(v45);
        }
      }

      else
      {
        sub_1000BE490(v0 + 120);
      }
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_1000B8C38(v25, (uint64_t)qword_100210FF0);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Account revoke failed. Invalid response data", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v31 = v30;
    *(void *)id v2 = -16008LL;
    unint64_t v32 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v33 = sub_1000BC768();
    uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v32, v31, v33);
    uint64_t v16 = *(void *)(v0 + 80);
  }

  else
  {
    id v15 = v7;
    uint64_t v16 = _convertNSErrorToError(_:)(v7);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v4, v3);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v34, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v35 = swift_errorRetain(v16);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v39 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v38 = 138412290;
    swift_errorRetain(v16);
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 80) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    *os_log_type_t v39 = v40;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Account revoke failed. Error occurred while executing the request - %@",  v38,  0xCu);
    uint64_t v41 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v39, 1LL, v41);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v42 = *(void *)(v0 + 200);

  swift_willThrow(v43);
  swift_unknownObjectRelease(v42);
  unint64_t v44 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v45 = 0LL;
  return v44(v45);
}

uint64_t sub_1000BE24C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 216);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 80) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Account revoke failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 200);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))(0LL);
}

uint64_t sub_1000BE44C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for AccountRevokingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd22AccountRevokingService);
}

uint64_t sub_1000BE490(uint64_t a1)
{
  uint64_t v2 = sub_1000B86DC(&qword_10020D1C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000BE4D0()
{
}

uint64_t sub_1000BE528(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BE588, 0LL, 0LL);
}

void sub_1000BE588()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = (id *)(v0 + 4);
  uint64_t v2 = (void *)v0[4];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = sub_1000B8C38(v5, (uint64_t)qword_100210FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  swift_retain_n(v6, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = &selRef__verificationQueue;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = v0[5];
    id v52 = (id)v0[4];
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(64LL, -1LL);
    v54[0] = v51;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v11 + 88LL))();
    unint64_t v15 = v14;
    v0[2] = sub_100103438(v13, v14, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    swift_release_n(v11, 2LL);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v12 + 12) = 2080;
    id v16 = [v52 altDSID];
    if (!v16)
    {
LABEL_13:

      __break(1u);
      return;
    }

    uint64_t v17 = v16;
    id v53 = (id)v0[8];
    uint64_t v49 = v0[7];
    uint64_t v50 = v0[6];
    uint64_t v18 = (void *)v0[4];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v21 = v20;

    v0[3] = sub_100103438(v19, v21, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);

    swift_bridgeObjectRelease(v21);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "DeviceListBaseProvider - Begin clearing %s for altDSID %s",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    (*(void (**)(id, uint64_t))(v49 + 8))(v53, v50);
    uint64_t v10 = &selRef__verificationQueue;
  }

  else
  {
    uint64_t v23 = v0[7];
    uint64_t v22 = v0[8];
    uint64_t v25 = v0[5];
    uint64_t v24 = v0[6];
    uint64_t v26 = (void *)v0[4];

    swift_release_n(v25, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }

  id v27 = objc_msgSend(*v1, v10[184], v49, v50);
  if (!v27)
  {
    __break(1u);
    goto LABEL_13;
  }

  os_log_type_t v28 = v27;
  uint64_t v29 = (void *)v0[4];
  uint64_t v30 = v0[5];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  unint64_t v33 = v32;

  sub_1000BF698(v31, v33);
  swift_bridgeObjectRelease(v33);
  v54[0] = 0LL;
  v54[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  uint64_t v34 = swift_bridgeObjectRelease(v54[1]);
  strcpy((char *)v54, "DELETE FROM ");
  BYTE5(v54[1]) = 0;
  HIWORD(v54[1]) = -5120;
  v35._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 88LL))(v34);
  object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(object);
  v37._object = (void *)0x800000010016D7E0LL;
  v37._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v37);
  uint64_t v38 = v54[0];
  uint64_t v39 = v54[1];
  v0[9] = v54[1];
  uint64_t v40 = sub_1000B86DC(&qword_10020E1A0);
  uint64_t v41 = swift_allocObject(v40, 64LL, 7LL);
  v0[10] = v41;
  *(_OWORD *)(v41 + 16) = xmmword_100162E50;
  id v42 = [v29 v10[184]];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v46 = v45;
  }

  else
  {
    uint64_t v44 = 0LL;
    uint64_t v46 = 0LL;
  }

  *(void *)(v41 + 56) = sub_1000B86DC(&qword_10020D858);
  *(void *)(v41 + 32) = v44;
  *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v46;
  uint64_t v47 = (void *)swift_task_alloc(dword_10020D7AC);
  v0[11] = v47;
  *uint64_t v47 = v0;
  v47[1] = sub_1000BE9BC;
  uint64_t v48 = v0[5];
  v47[5] = v41;
  v47[6] = v48;
  v47[3] = v38;
  v47[4] = v39;
  swift_task_switch(sub_1000BEAC8, 0LL, 0LL);
}

uint64_t sub_1000BE9BC(char a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 88LL);
  uint64_t v5 = *(void **)v2;
  swift_task_dealloc(v4);
  uint64_t v7 = v5[9];
  uint64_t v6 = v5[10];
  uint64_t v8 = v5[8];
  if (v1)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_task_dealloc(v8);
    os_log_type_t v9 = (uint64_t (*)(uint64_t))v5[1];
    uint64_t v10 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_task_dealloc(v8);
    os_log_type_t v9 = (uint64_t (*)(uint64_t))v5[1];
    uint64_t v10 = a1 & 1;
  }

  return v9(v10);
}

uint64_t sub_1000BEA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1000BEAC8, 0LL, 0LL);
}

uint64_t sub_1000BEAC8()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  swift_bridgeObjectRetain(v2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  id v4 = [(id)objc_opt_self(AKSQLiteQuery) queryWithString:v3];
  v0[7] = v4;

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[2] = 0LL;
  [v4 bindParameters:isa error:v0 + 2];

  uint64_t v6 = (void *)v0[2];
  v0[8] = v6;
  uint64_t v7 = swift_task_alloc(32LL);
  v0[9] = v7;
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = v4;
  uint64_t v8 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
  id v9 = v6;
  uint64_t v10 = (void *)swift_task_alloc(v8);
  v0[10] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000BEC40;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 12,  0LL,  0LL,  0xD000000000000016LL,  0x800000010016D7C0LL,  sub_1000BF530,  v7,  &type metadata for Bool);
}

uint64_t sub_1000BEC40()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 8_Block_object_dispose(&a9, 8) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_1000BED6C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    id v4 = sub_1000BECF8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000BECF8()
{
  uint64_t v1 = *(void **)(v0 + 64);

  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000BED6C()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_1000BEDE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1000B86DC(&qword_10020D850);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___AKSQLiteExecutor);
  uint64_t v11 = swift_allocObject(&unk_1001CB3C8, 24LL, 7LL);
  swift_weakInit(v11 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1001CB3F0, v14 + 8, v12 | 7);
  *(void *)(v15 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  *(void *)(v15 + v14) = a3;
  aBlock[4] = sub_1000BF5F0;
  uint64_t v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F4EEC;
  aBlock[3] = &unk_1001CB408;
  id v16 = _Block_copy(aBlock);
  uint64_t v17 = v20;
  id v18 = a3;
  swift_release(v17);
  [v10 performBlockAndWait:v16];
  _Block_release(v16);
}

uint64_t sub_1000BEF74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v49, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = Strong;
    uint64_t v7 = *(void **)(Strong + 16);
    id v48 = 0LL;
    unsigned __int8 v8 = [v7 performQuery:a3 error:&v48];
    id v9 = v48;
    if ((v8 & 1) != 0)
    {
      uint64_t v10 = qword_10020CF88;
      id v11 = v48;
      if (v10 != -1) {
        swift_once(&qword_10020CF88, sub_1000E54E4);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v12, (uint64_t)qword_100210FD8);
      id v13 = a3;
      unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)id v16 = 138412290;
        id v48 = v13;
        id v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
        void *v17 = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "DeviceListBaseProvider - Finished query: %@", v16, 0xCu);
        uint64_t v19 = sub_1000B86DC(&qword_10020D770);
        swift_arrayDestroy(v17, 1LL, v19);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {

        unint64_t v14 = (os_log_s *)v13;
      }

      LOBYTE(v4_Block_object_dispose(&a9, 8) = 1;
      uint64_t v44 = sub_1000B86DC(&qword_10020D850);
      CheckedContinuation.resume(returning:)(&v48, v44);
    }

    else
    {
      id v31 = v48;
      unint64_t v32 = (void *)_convertNSErrorToError(_:)(v9);

      swift_willThrow(v33);
      if (qword_10020CF88 != -1) {
        swift_once(&qword_10020CF88, sub_1000E54E4);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v34, (uint64_t)qword_100210FD8);
      id v35 = a3;
      swift_errorRetain(v32);
      id v36 = v35;
      uint64_t v37 = swift_errorRetain(v32);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc(22LL, -1LL);
        uint64_t v46 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v40 = 138412546;
        swift_errorRetain(v32);
        uint64_t v41 = (void *)_swift_stdlib_bridgeErrorToNSError(v32);
        id v48 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
        *uint64_t v46 = v41;
        swift_errorRelease(v32);
        swift_errorRelease(v32);
        *(_WORD *)(v40 + 12) = 2112;
        id v48 = v36;
        id v42 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
        v46[1] = v36;

        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error %@ executing query: %@", (uint8_t *)v40, 0x16u);
        uint64_t v43 = sub_1000B86DC(&qword_10020D770);
        swift_arrayDestroy(v46, 2LL, v43);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v32);
        swift_errorRelease(v32);

        uint64_t v38 = (os_log_s *)v36;
      }

      id v48 = v32;
      uint64_t v45 = sub_1000B86DC(&qword_10020D850);
      CheckedContinuation.resume(throwing:)(&v48, v45);
    }

    return swift_release(v6);
  }

  else
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_1000B8C38(v20, (uint64_t)qword_100210FD8);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "DeviceListBaseProvider - Missing instance", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    type metadata accessor for DeviceListError(0LL);
    uint64_t v26 = v25;
    uint64_t v47 = -14001LL;
    unint64_t v27 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000BF650();
    _BridgedStoredNSError.init(_:userInfo:)(&v48, &v47, v27, v26, v28);
    uint64_t v47 = (uint64_t)v48;
    uint64_t v29 = sub_1000B86DC(&qword_10020D850);
    return CheckedContinuation.resume(throwing:)(&v47, v29);
  }

uint64_t sub_1000BF4EC()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for DeviceListBaseProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd22DeviceListBaseProvider);
}

void sub_1000BF530(uint64_t a1)
{
}

uint64_t sub_1000BF538()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000BF55C()
{
  uint64_t v1 = sub_1000B86DC(&qword_10020D850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000BF5F0()
{
  uint64_t v1 = *(void *)(sub_1000B86DC(&qword_10020D850) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000BEF74( *(void *)(v0 + 16),  v0 + v2,  *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000BF638(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BF648(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000BF650()
{
  unint64_t result = qword_10020D2C0;
  if (!qword_10020D2C0)
  {
    type metadata accessor for DeviceListError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001636A8, v1);
    atomic_store(result, (unint64_t *)&qword_10020D2C0);
  }

  return result;
}

void sub_1000BF698(uint64_t a1, unint64_t a2)
{
  id v13 = [(id)objc_opt_self(AKAccountManager) sharedInstance];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v13 authKitAccountWithAltDSID:v4];

  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    [v13 setDeviceListVersion:v6 forAccount:v5];
  }

  else
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v7, (uint64_t)qword_100210FD8);
    uint64_t v8 = swift_bridgeObjectRetain_n(a2, 2LL);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v15 = v12;
      *(_DWORD *)id v11 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v14 = sub_100103438(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing authkit account for altDSID %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      return;
    }

    swift_bridgeObjectRelease_n(a2, 2LL);
  }
}

uint64_t sub_1000BF8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[26] = a6;
  v7[27] = v6;
  v7[24] = a4;
  v7[25] = a5;
  v7[22] = a2;
  v7[23] = a3;
  v7[21] = a1;
  return swift_task_switch(sub_1000BF958, 0LL, 0LL);
}

uint64_t sub_1000BF958()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 216) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 224) = v2;
  uint64_t v3 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 232) = v4;
  if (v4)
  {
    id v5 = (void *)v4;
    unint64_t v32 = v1;
    uint64_t v33 = (_OWORD *)(v0 + 120);
    uint64_t v34 = (_OWORD *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 184);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 176);
    swift_bridgeObjectRetain(v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v8, v7, 0x64695F70756F7267LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_bridgeObjectRetain(v9);
    char v12 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v10, v9, 0xD000000000000011LL, 0x800000010016D8A0LL, v12);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (v6)
    {
      uint64_t v14 = *(void *)(v0 + 200);
      uint64_t v13 = *(void *)(v0 + 208);
      swift_bridgeObjectRetain(v13);
      char v15 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      sub_1000F0E54(v14, v13, 0x745F646572616873LL, 0xEC0000006E656B6FLL, v15);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    uint64_t v16 = sub_1000B86DC((uint64_t *)&unk_10020D910);
    uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
    *(void *)(v17 + 32) = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 104) = sub_1000B86DC(&qword_10020DCB0);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v17;
    sub_1000B8EB0(v34, v33);
    char v18 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24(v33, 0x6E695F70756F7267LL, 0xEA00000000006F66LL, v18);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v19 = sub_1000C7A50((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v33;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000BFDC4;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CB470;
    [v32 executeRequestWithCompletion:v34];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_1000B8C38(v22, (uint64_t)qword_100210FF0);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to unshare due to an invalid request", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v28 = v27;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v29 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v30 = sub_1000BC768();
    id v31 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 80, v29, v28, v30);
    swift_willThrow(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000BFDC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 240LL) = v1;
  if (v1) {
    id v2 = sub_1000C03F0;
  }
  else {
    id v2 = sub_1000BFE68;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000BFE68()
{
  uint64_t v1 = *(void **)(v0 + 232);
  id v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      *(void *)(v0 + 152) = 25445LL;
      *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0xE200000000000000LL;
      AnyHashable.init<A>(_:)( (void *)(v0 + 80),  v0 + 152,  &type metadata for String,  &protocol witness table for String);
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9B88(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }

      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }

      swift_bridgeObjectRelease(v12);
      sub_1000B8D94(v0 + 80);
      if (!*(void *)(v0 + 144))
      {
        sub_1000BE490(v0 + 120);
LABEL_25:
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v38 = type metadata accessor for Logger(0LL);
        uint64_t v39 = sub_1000B8C38(v38, (uint64_t)qword_100210FF0);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.default.getter();
        BOOL v42 = os_log_type_enabled(v40, v41);
        uint64_t v43 = *(void *)(v0 + 224);
        if (v42)
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully unshared account", v44, 2u);
          swift_slowDealloc(v44, -1LL, -1LL);
          sub_1000B98C0(v4, v3);
          swift_unknownObjectRelease(v43);
        }

        else
        {
          swift_unknownObjectRelease(*(void *)(v0 + 224));
          sub_1000B98C0(v4, v3);
        }

        uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
        return v37();
      }

      if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0
        || !*(void *)(v0 + 152))
      {
        goto LABEL_25;
      }
    }

    else
    {
      if (qword_10020CF90 != -1) {
        swift_once(&qword_10020CF90, sub_1000E54FC);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = sub_1000B8C38(v18, (uint64_t)qword_100210FF0);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Unshare account request failed. Invalid response data",  v22,  2u);
        swift_slowDealloc(v22, -1LL, -1LL);
      }
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v24 = v23;
    *(void *)id v2 = -16008LL;
    unint64_t v25 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v26 = sub_1000BC768();
    uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v25, v24, v26);
    uint64_t v16 = *(void *)(v0 + 80);
  }

  else
  {
    id v15 = v7;
    uint64_t v16 = _convertNSErrorToError(_:)(v7);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v4, v3);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v28 = swift_errorRetain(v16);
  unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    id v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v31 = 138412290;
    swift_errorRetain(v16);
    uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    uint64_t *v32 = v33;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Unshare account request failed. Error occurred while executing the request - %@",  v31,  0xCu);
    uint64_t v34 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v32, 1LL, v34);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v35 = *(void *)(v0 + 224);

  swift_willThrow(v36);
  swift_unknownObjectRelease(v35);
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_1000C03F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 240);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  id v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Unshare account request failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 224);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C05EC(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return swift_task_switch(sub_1000C0654, 0LL, 0LL);
}

uint64_t sub_1000C0654()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 192) = v2;
  uint64_t v3 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 176);
    swift_bridgeObjectRetain(v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v6, v7, 0x64695F70756F7267LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v9 = sub_1000B86DC((uint64_t *)&unk_10020D910);
    uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
    *(void *)(v10 + 32) = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 104) = sub_1000B86DC(&qword_10020DCB0);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
    sub_1000B8EB0((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    char v11 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24((_OWORD *)(v0 + 120), 0x6E695F70756F7267LL, 0xEA00000000006F66LL, v11);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v12 = sub_1000C7A50((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000C0A0C;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CB458;
    [v1 executeRequestWithCompletion:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_1000B8C38(v15, (uint64_t)qword_100210FF0);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to unshare due to an invalid request", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v21 = v20;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v22 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v23 = sub_1000BC768();
    uint64_t v24 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 80, v22, v21, v23);
    swift_willThrow(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000C0A0C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 208LL) = v1;
  if (v1) {
    id v2 = sub_1000C1038;
  }
  else {
    id v2 = sub_1000C0AB0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000C0AB0()
{
  uint64_t v1 = *(void **)(v0 + 200);
  id v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      *(void *)(v0 + 152) = 25445LL;
      *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0xE200000000000000LL;
      AnyHashable.init<A>(_:)( (void *)(v0 + 80),  v0 + 152,  &type metadata for String,  &protocol witness table for String);
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9B88(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }

      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }

      swift_bridgeObjectRelease(v12);
      sub_1000B8D94(v0 + 80);
      if (!*(void *)(v0 + 144))
      {
        sub_1000BE490(v0 + 120);
LABEL_25:
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v38 = type metadata accessor for Logger(0LL);
        uint64_t v39 = sub_1000B8C38(v38, (uint64_t)qword_100210FF0);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.default.getter();
        BOOL v42 = os_log_type_enabled(v40, v41);
        uint64_t v43 = *(void *)(v0 + 192);
        if (v42)
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Successfully unshared all accounts in the group",  v44,  2u);
          swift_slowDealloc(v44, -1LL, -1LL);
          sub_1000B98C0(v4, v3);
          swift_unknownObjectRelease(v43);
        }

        else
        {
          swift_unknownObjectRelease(*(void *)(v0 + 192));
          sub_1000B98C0(v4, v3);
        }

        uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
        return v37();
      }

      if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0
        || !*(void *)(v0 + 152))
      {
        goto LABEL_25;
      }
    }

    else
    {
      if (qword_10020CF90 != -1) {
        swift_once(&qword_10020CF90, sub_1000E54FC);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = sub_1000B8C38(v18, (uint64_t)qword_100210FF0);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v22 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Unshare account request failed. Invalid response data",  v22,  2u);
        swift_slowDealloc(v22, -1LL, -1LL);
      }
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v24 = v23;
    *(void *)id v2 = -16008LL;
    unint64_t v25 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v26 = sub_1000BC768();
    uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v25, v24, v26);
    uint64_t v16 = *(void *)(v0 + 80);
  }

  else
  {
    id v15 = v7;
    uint64_t v16 = _convertNSErrorToError(_:)(v7);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v4, v3);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v28 = swift_errorRetain(v16);
  unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    id v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v31 = 138412290;
    swift_errorRetain(v16);
    uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    uint64_t *v32 = v33;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Unshare account request failed. Error occurred while executing the request - %@",  v31,  0xCu);
    uint64_t v34 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v32, 1LL, v34);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v35 = *(void *)(v0 + 192);

  swift_willThrow(v36);
  swift_unknownObjectRelease(v35);
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_1000C1038(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 208);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  id v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Unshare account request failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 192);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for AccountUnsharingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd23AccountUnsharingService);
}

NSString sub_1000C1254()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100210FA0 = (uint64_t)result;
  return result;
}

NSString sub_1000C1288()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100210FA8 = (uint64_t)result;
  return result;
}

id sub_1000C12D4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ProximityAuthFlowController()) init];
  static ProximityAuthFlowController.shared = (uint64_t)result;
  return result;
}

id SignInWithAppleDaemonService.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

uint64_t *ProximityAuthFlowController.shared.unsafeMutableAddressor()
{
  if (qword_10020CF78 != -1) {
    swift_once(&qword_10020CF78, sub_1000C12D4);
  }
  return &static ProximityAuthFlowController.shared;
}

id static ProximityAuthFlowController.shared.getter()
{
  if (qword_10020CF78 != -1) {
    swift_once(&qword_10020CF78, sub_1000C12D4);
  }
  return (id)static ProximityAuthFlowController.shared;
}

void sub_1000C1488(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1000B86DC(&qword_10020D9A0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_1000C1520()
{
  uint64_t v1 = v0;
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000B8C38(v2, (uint64_t)static Logger.akd);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Stop Device Discovery for Proximity Apple ID Authentication",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = OBJC_IVAR___AKProximityAuthFlowController_server;
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR___AKProximityAuthFlowController_server);
  if (v8)
  {
    [v8 invalidate];
    uint64_t v8 = *(void **)(v1 + v7);
  }

  *(void *)(v1 + v7) = 0LL;
}

uint64_t sub_1000C1614(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_1000B86DC(&qword_10020D9A0);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  v7,  &protocol witness table for String);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

void sub_1000C16A4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AKProximityAuthFlowController_context);
  *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_context) = 0LL;

  uint64_t v2 = (void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
  void *v2 = 0LL;
  v2[1] = 0LL;
  sub_1000C36E4(v3, v4);
  uint64_t v5 = (void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion + 8);
  void *v5 = 0LL;
  v5[1] = 0LL;
  sub_1000C36E4(v6, v7);
  *(_BYTE *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 0;
  id v8 = *(void **)(v0 + OBJC_IVAR___AKProximityAuthFlowController_cbManager);
  *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_cbManager) = 0LL;

  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_1000B8C38(v9, (uint64_t)static Logger.akd);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Posting ProximityAppleIDSignInEndNotification...", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  unint64_t v14 = sub_1000C3E00();
  id v15 = [(id)swift_getObjCClassFromMetadata(v14) defaultCenter];
  id v16 = v15;
  if (qword_10020CF70 != -1)
  {
    swift_once(&qword_10020CF70, sub_1000C1288);
    id v15 = v16;
  }

  [v15 postNotificationName:qword_100210FA8 object:0];
}

void sub_1000C18A0(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_1000B8C38(v4, (uint64_t)static Logger.akd);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Initiating pairing flow...", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  id v9 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)&v2[OBJC_IVAR___AKProximityAuthFlowController_context];
    os_log_type_t v12 = *(void **)&v2[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v13 = swift_allocObject(&unk_1001CB540, 24LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v2;
    void v19[4] = sub_1000C3760;
    uint64_t v20 = v13;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256LL;
    void v19[2] = sub_1000C1614;
    v19[3] = &unk_1001CB558;
    unint64_t v14 = _Block_copy(v19);
    uint64_t v15 = v20;
    id v16 = v12;
    uint64_t v17 = v2;
    id v18 = v11;
    swift_release(v15);
    [v10 presentProximityPairingUIForContext:v18 client:v16 event:a1 completion:v14];
    _Block_release(v14);
  }

void sub_1000C1A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000B8C38(v6, (uint64_t)static Logger.akd);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Proximity pairing UI called completion...", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  if (a2)
  {
    uint64_t v11 = swift_errorRetain(a2);
    os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Proximity UI finished with error...invalidating server",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    sub_1000C1520();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    if (v15)
    {
      uint64_t v16 = *(void *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
      swift_errorRetain(a2);
      sub_1000C3768((uint64_t)v15, v16);
      v15(a1, a2);
      swift_errorRelease(a2);
      sub_1000C36E4((uint64_t)v15, v16);
    }

    sub_1000C16A4();
    swift_errorRelease(a2);
  }

void sub_1000C1CA8(uint64_t a1)
{
  if (!*(void *)&v1[OBJC_IVAR___AKProximityAuthFlowController_server])
  {
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_1000B8C38(v11, (uint64_t)static Logger.akd);
    oslog = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v13)) {
      goto LABEL_15;
    }
    unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v14 = 0;
    uint64_t v15 = "Proximity Auth not in progress, nothing to do ..";
    goto LABEL_14;
  }

  if (v1[OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress] != 1)
  {
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_1000B8C38(v16, (uint64_t)static Logger.akd);
    oslog = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v13)) {
      goto LABEL_15;
    }
    unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v14 = 0;
    uint64_t v15 = "Skipping endbroadcast, pairing view already in progress ..";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, oslog, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
LABEL_15:

    return;
  }

  id v3 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void **)&v1[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v6 = swift_allocObject(&unk_1001CB4F0, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v1;
    aBlock[4] = sub_1000C3758;
    uint64_t v20 = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C1614;
    aBlock[3] = &unk_1001CB508;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = v20;
    id v9 = v5;
    uint64_t v10 = v1;
    swift_release(v8);
    [v4 dismissProximityPairingUIForContext:a1 client:v9 completion:v7];
    _Block_release(v7);
  }

void sub_1000C1F20()
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_1000B8C38(v0, (uint64_t)static Logger.akd);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Dismissed Proximity Pairing UI up ..", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  sub_1000C1520();
  sub_1000C16A4();
}

void sub_1000C2050()
{
  v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress] = 1;
  id v1 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
  if (v1)
  {
    uint64_t v2 = v1;
    os_log_type_t v3 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_server];
    if (v3) {
      id v4 = [v3 messageSessionTemplate];
    }
    else {
      id v4 = 0LL;
    }
    uint64_t v5 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v6 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
    uint64_t v7 = swift_allocObject(&unk_1001CB4A0, 24LL, 7LL);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v0;
    void v13[4] = sub_1000C3738;
    uint64_t v14 = v7;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256LL;
    v13[2] = sub_1000C1614;
    v13[3] = &unk_1001CB4B8;
    uint64_t v8 = _Block_copy(v13);
    uint64_t v9 = v14;
    id v10 = v6;
    uint64_t v11 = v0;
    id v12 = v5;
    swift_release(v9);
    [v2 activateProximitySession:v4 client:v12 context:v10 completion:v8];
    _Block_release(v8);
  }

void sub_1000C21BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000B8C38(v6, (uint64_t)static Logger.akd);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Proximity based authentication finished, calling end authentication",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  *(_BYTE *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) = 0;
  sub_1000C1520();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
    swift_retain(v12);
    v11(a1, a2);
    sub_1000C36E4((uint64_t)v11, v12);
  }

  sub_1000C16A4();
}

Swift::Void __swiftcall ProximityAuthFlowController.centralManagerDidUpdateState(_:)(CBCentralManager a1)
{
  if ((*(_BYTE *)(v1 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) & 1) == 0)
  {
    uint64_t v2 = v1;
    os_log_type_t v3 = (char *)-[objc_class state](a1.super.super.isa, "state");
    if ((unint64_t)(v3 - 3) >= 2)
    {
      if (v3 == (char *)5)
      {
        if (qword_10020CF80 != -1) {
          swift_once(&qword_10020CF80, sub_1000D05FC);
        }
        uint64_t v14 = type metadata accessor for Logger(0LL);
        uint64_t v15 = sub_1000B8C38(v14, (uint64_t)static Logger.akd);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Bluetooth powered On", v18, 2u);
          swift_slowDealloc(v18, -1LL, -1LL);
        }

        if ((*(_BYTE *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) & 1) == 0) {
          sub_1000C2688();
        }
      }

      else
      {
        if (qword_10020CF80 != -1) {
          swift_once(&qword_10020CF80, sub_1000D05FC);
        }
        uint64_t v19 = type metadata accessor for Logger(0LL);
        uint64_t v20 = sub_1000B8C38(v19, (uint64_t)static Logger.akd);
        oslog = (os_log_s *)Logger.logObject.getter(v20);
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v21))
        {
          unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v21, "Bluetooth state unknown", v22, 2u);
          swift_slowDealloc(v22, -1LL, -1LL);
        }
      }
    }

    else
    {
      if (qword_10020CF80 != -1) {
        swift_once(&qword_10020CF80, sub_1000D05FC);
      }
      uint64_t v4 = type metadata accessor for Logger(0LL);
      uint64_t v5 = sub_1000B8C38(v4, (uint64_t)static Logger.akd);
      uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Bluetooth powered off, cannot proceed with prox auth",  v8,  2u);
        swift_slowDealloc(v8, -1LL, -1LL);
      }

      if ((*(_BYTE *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) & 1) == 0)
      {
        os_log_type_t v9 = *(void (**)(void, id))(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
        if (v9)
        {
          uint64_t v10 = *(void *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
          id v11 = objc_allocWithZone(&OBJC_CLASS___NSError);
          swift_retain(v10);
          NSString v12 = String._bridgeToObjectiveC()();
          id v13 = [v11 initWithDomain:v12 code:-13010 userInfo:0];

          v9(0LL, v13);
          sub_1000C36E4((uint64_t)v9, v10);
        }

        sub_1000C1520();
        sub_1000C16A4();
      }
    }
  }

void sub_1000C2688()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_server];
  if (v2)
  {
    id v3 = v2;
    [v3 setPersistentPairing:0];
    [v3 setPasswordType:2];
    uint64_t v4 = swift_allocObject(&unk_1001CB608, 24LL, 7LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
    aBlock[4] = sub_1000C3E3C;
    uint64_t v25 = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C32C8;
    aBlock[3] = &unk_1001CB620;
    uint64_t v5 = _Block_copy(aBlock);
    uint64_t v6 = v25;
    id v7 = v3;
    v1;
    swift_release(v6);
    [v7 setEventHandler:v5];
    _Block_release(v5);

    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_1000B8C38(v8, (uint64_t)static Logger.akd);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      NSString v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Start Device Discovery for Proximity Apple ID Authentication",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    [v7 activate];
    sub_1000C3318();
  }

  else
  {
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_1000B8C38(v13, (uint64_t)static Logger.akd);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Server not found, cannot begin broadcasting...", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    id v18 = &v1[OBJC_IVAR___AKProximityAuthFlowController_authCompletion];
    uint64_t v19 = *(void (**)(void, id))&v1[OBJC_IVAR___AKProximityAuthFlowController_authCompletion];
    if (v19)
    {
      uint64_t v20 = *((void *)v18 + 1);
      id v21 = objc_allocWithZone(&OBJC_CLASS___NSError);
      swift_retain(v20);
      NSString v22 = String._bridgeToObjectiveC()();
      id v23 = [v21 initWithDomain:v22 code:-13001 userInfo:0];

      v19(0LL, v23);
      sub_1000C36E4((uint64_t)v19, v20);
    }
  }

id ProximityAuthFlowController.init()()
{
  ObjectType = (objc_class *)swift_getObjectType(v0);
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_client] = 0LL;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_context] = 0LL;
  uint64_t v2 = &v0[OBJC_IVAR___AKProximityAuthFlowController_authCompletion];
  void *v2 = 0LL;
  v2[1] = 0LL;
  id v3 = &v0[OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion];
  *id v3 = 0LL;
  v3[1] = 0LL;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_server] = 0LL;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_cbManager] = 0LL;
  v0[OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress] = 0;
  v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress] = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

id ProximityAuthFlowController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000C2B70(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v4, (uint64_t)static Logger.akd);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v40 = v1;
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v42 = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Handler invoked with SetupKit event %@", v8, 0xCu);
    uint64_t v11 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    NSString v12 = v8;
    uint64_t v2 = v1;
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

  id v13 = objc_msgSend(v5, "eventType", v40, v42);
  if ((int)v13 <= 109)
  {
    if ((_DWORD)v13 == 30 || (_DWORD)v13 == 41)
    {
      os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Invalidated/connection ended in flowcontroller...",  v19,  2u);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      sub_1000C30D8();
    }
  }

  else
  {
    switch((_DWORD)v13)
    {
      case 0x12C:
        uint64_t v20 = (os_log_s *)Logger.logObject.getter(v13);
        os_log_type_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          NSString v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)NSString v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Basic Config updated...", v22, 2u);
          swift_slowDealloc(v22, -1LL, -1LL);
        }

        break;
      case 0x8C:
        id v23 = [v5 error];
        if (v23)
        {
          id v24 = v23;
          id v25 = v23;
          unint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
          os_log_type_t v27 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v41 = v2;
            uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            unint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v28 = 138412290;
            id v30 = v25;
            uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(v30);
            id v42 = (id)v31;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
            *unint64_t v29 = v31;

            _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Proximity UI finished with error %@...invalidating server",  v28,  0xCu);
            uint64_t v32 = sub_1000B86DC(&qword_10020D770);
            swift_arrayDestroy(v29, 1LL, v32);
            swift_slowDealloc(v29, -1LL, -1LL);
            uint64_t v33 = v28;
            uint64_t v2 = v41;
            swift_slowDealloc(v33, -1LL, -1LL);
          }

          else
          {

            unint64_t v26 = (os_log_s *)v25;
          }

          *(_BYTE *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 0;
          sub_1000C1520();
          uint64_t v37 = *(void (**)(void, id))(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
          if (v37)
          {
            uint64_t v38 = *(void *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
            id v39 = v25;
            sub_1000C3768((uint64_t)v37, v38);
            v37(0LL, v24);

            sub_1000C36E4((uint64_t)v37, v38);
          }

          else
          {
          }
        }

        else
        {
          uint64_t v34 = (os_log_s *)Logger.logObject.getter(0LL);
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v36 = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "Proceeding to perform authentication...", v36, 2u);
            swift_slowDealloc(v36, -1LL, -1LL);
          }

          sub_1000C2050();
        }

        break;
      case 0x6E:
        uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          os_log_type_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)os_log_type_t v16 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Received Setupkit event to present pairing flow",  v16,  2u);
          swift_slowDealloc(v16, -1LL, -1LL);
        }

        *(_BYTE *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 1;
        sub_1000C18A0((uint64_t)v5);
        break;
    }
  }

void sub_1000C30D8()
{
  if ((v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress] & 1) != 0)
  {
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_1000B8C38(v1, (uint64_t)static Logger.akd);
    oslog = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v3,  "Proximity setup is already in progress, messageSession termination will handle clean up, nothing to do ...",  v4,  2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }
  }

  else
  {
    id v5 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
    if (v5)
    {
      uint64_t v6 = v5;
      os_log_type_t v7 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
      uint64_t v8 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
      uint64_t v9 = swift_allocObject(&unk_1001CB6A8, 24LL, 7LL);
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = v0;
      aBlock[4] = sub_1000C3E64;
      uint64_t v17 = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000C1614;
      aBlock[3] = &unk_1001CB6C0;
      id v10 = _Block_copy(aBlock);
      uint64_t v11 = v17;
      id v12 = v8;
      id v13 = v0;
      id v14 = v7;
      swift_release(v11);
      [v6 showProximityErrorForContext:v14 client:v12 completion:v10];
      _Block_release(v10);
    }
  }

void sub_1000C32C8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_1000C3318()
{
  id v1 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
    uint64_t v4 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v5 = swift_allocObject(&unk_1001CB658, 24LL, 7LL);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v0;
    void v11[4] = sub_1000C3E5C;
    uint64_t v12 = v5;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256LL;
    v11[2] = sub_1000C1614;
    v11[3] = &unk_1001CB670;
    uint64_t v6 = _Block_copy(v11);
    uint64_t v7 = v12;
    id v8 = v4;
    uint64_t v9 = v0;
    id v10 = v3;
    swift_release(v7);
    [v2 presentProximityBroadcastUIForContext:v10 client:v8 completion:v6];
    _Block_release(v6);
  }

void sub_1000C3434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000B8C38(v6, (uint64_t)static Logger.akd);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Proximity Broadcast UI finished", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  sub_1000C1520();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
    swift_retain(v12);
    v11(a1, a2);
    sub_1000C36E4((uint64_t)v11, v12);
  }

  sub_1000C16A4();
}

void sub_1000C355C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_1000B8C38(v4, (uint64_t)static Logger.akd);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Show Proximity Pairing error up ..", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  os_log_type_t v9 = *(void (**)(void, id))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
    id v11 = objc_allocWithZone(&OBJC_CLASS___NSError);
    swift_retain(v10);
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = [v11 initWithDomain:v12 code:-130011 userInfo:0];

    v9(0LL, v13);
    sub_1000C36E4((uint64_t)v9, v10);
  }

  sub_1000C1520();
  sub_1000C16A4();
}

uint64_t sub_1000C36D4(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  _BYTE *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000C36E4(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t type metadata accessor for ProximityAuthFlowController()
{
  return objc_opt_self(&OBJC_CLASS___AKProximityAuthFlowController);
}

uint64_t sub_1000C3714()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C3738(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000C3740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C3750(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000C3758()
{
}

void sub_1000C3760(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000C3768(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

void sub_1000C3778(void *a1, void *a2, void *a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v10 = swift_allocObject(&unk_1001CB5E0, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a5;
  uint64_t v11 = OBJC_IVAR___AKProximityAuthFlowController_server;
  if (*(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_server))
  {
    _Block_copy(a5);
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_1000B8C38(v12, (uint64_t)static Logger.akd);
    id v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Proximity Auth is already in progress...", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    id v17 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v17 initWithDomain:v18 code:-13003 userInfo:0];

    id v39 = (id)_convertErrorToNSError(_:)(v19);
    a5[2](a5, 0LL);
    swift_release(v10);
  }

  else
  {
    uint64_t v20 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_client);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_client) = a1;
    _Block_copy(a5);

    os_log_type_t v21 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_context);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_context) = a2;
    id v22 = a1;

    id v23 = *(void **)(a4 + v11);
    *(void *)(a4 + v11) = a3;
    id v24 = a2;

    id v25 = (void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    uint64_t v26 = *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    uint64_t v27 = *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion + 8);
    *id v25 = sub_1000C3E6C;
    v25[1] = v10;
    id v28 = a3;
    sub_1000C36E4(v26, v27);
    id v29 = objc_allocWithZone(&OBJC_CLASS___CBCentralManager);
    swift_retain(v10);
    id v30 = [v29 initWithDelegate:a4 queue:0];
    uint64_t v31 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_cbManager);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_cbManager) = v30;

    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_1000B8C38(v32, (uint64_t)static Logger.akd);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Posting ProximityAppleIDSignInBeganNotification...", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    unint64_t v37 = sub_1000C3E00();
    id v38 = [(id)swift_getObjCClassFromMetadata(v37) defaultCenter];
    id v39 = v38;
    if (qword_10020CF68 != -1)
    {
      swift_once(&qword_10020CF68, sub_1000C1254);
      id v38 = v39;
    }

    [v38 postNotificationName:qword_100210FA0 object:0];
    swift_release(v10);
  }
}

void sub_1000C3AFC(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject(&unk_1001CB590, 24LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a2;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR___AKProximityAuthFlowController_server);
  _Block_copy(a2);
  if (v5)
  {
    sub_1000C1520();
    id v6 = [(id)objc_opt_self(AKAuthenticationUILiaison) sharedInstance];
    if (v6)
    {
      os_log_type_t v7 = v6;
      id v8 = *(void **)(a1 + OBJC_IVAR___AKProximityAuthFlowController_context);
      os_log_type_t v9 = *(void **)(a1 + OBJC_IVAR___AKProximityAuthFlowController_client);
      aBlock[4] = sub_1000C3DF8;
      uint64_t v26 = v4;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000C1614;
      aBlock[3] = &unk_1001CB5A8;
      uint64_t v10 = _Block_copy(aBlock);
      uint64_t v11 = v26;
      id v12 = v9;
      swift_retain(v4);
      id v13 = v8;
      swift_release(v11);
      [v7 dismissProximityPairingUIForContext:v13 client:v12 completion:v10];
      _Block_release(v10);

      sub_1000C16A4();
      swift_release(v4);
    }

    else
    {
      swift_release(v4);
    }
  }

  else
  {
    if (qword_10020CF80 != -1) {
      swift_once(&qword_10020CF80, sub_1000D05FC);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_1000B8C38(v14, (uint64_t)static Logger.akd);
    os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      NSString v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Proximity Auth not in progress", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(AKAppleIDProximityAuthErrorDomain);
    uint64_t v20 = v19;
    id v21 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    id v23 = [v21 initWithDomain:v22 code:-13005 userInfo:0];

    id v24 = (id)_convertErrorToNSError(_:)(v23);
    ((void (**)(void, void, id))a2)[2](a2, 0LL, v24);
    swift_release(v4);
  }

uint64_t sub_1000C3DD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C3DF8(objc_class *a1, uint64_t a2)
{
}

unint64_t sub_1000C3E00()
{
  unint64_t result = qword_10020D9A8;
  if (!qword_10020D9A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDistributedNotificationCenter);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10020D9A8);
  }

  return result;
}

void sub_1000C3E3C(void *a1)
{
}

void sub_1000C3E5C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C3E64(uint64_t a1, uint64_t a2)
{
}

id sub_1000C3EC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v11 = 0LL;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for AccountRevokingRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v10, "validateResponseData:error:", isa, &v11);

  id v5 = v11;
  if (v4) {
    return v11;
  }
  id v7 = v11;
  _convertNSErrorToError(_:)(v5);

  uint64_t v9 = swift_willThrow(v8);
  return (id)swift_willThrow(v9);
}

id sub_1000C42DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountRevokingRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountRevokingRequestProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd30AccountRevokingRequestProvider);
}

BOOL sub_1000C4358(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000C4370()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000C43B4()
{
}

Swift::Int sub_1000C43DC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000C441C()
{
  if (*v0) {
    return 0x7461446465766173LL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

uint64_t sub_1000C4460@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C56F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C4484()
{
  return 0LL;
}

void sub_1000C4490(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000C449C(uint64_t a1)
{
  unint64_t v2 = sub_1000C4DCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C44C4(uint64_t a1)
{
  unint64_t v2 = sub_1000C4DCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1000C44EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedGroupsMembershipInfo(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C4570()
{
  return type metadata accessor for SharedGroupsMembershipInfo(0LL);
}

uint64_t type metadata accessor for SharedGroupsMembershipInfo(uint64_t a1)
{
  uint64_t result = qword_10020DA08;
  if (!qword_10020DA08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharedGroupsMembershipInfo);
  }
  return result;
}

uint64_t sub_1000C45B4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000C4630(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000B86DC(&qword_10020DA58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000BC7B0(a1, v9);
  unint64_t v11 = sub_1000C4DCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SharedGroupsMembershipInfo.CodingKeys,  &type metadata for SharedGroupsMembershipInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants);
  HIBYTE(v1_Block_object_dispose(&a9, 8) = 0;
  uint64_t v12 = sub_1000B86DC(&qword_10020DA28);
  unint64_t v13 = sub_1000C53B8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, (char *)&v18 + 7, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate;
    BYTE6(v1_Block_object_dispose(&a9, 8) = 1;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = sub_1000B850C( &qword_10020DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, (char *)&v18 + 6, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_1000C47AC(void *a1)
{
  uint64_t v2 = (void *)type metadata accessor for Date(0LL);
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_1000B86DC(&qword_10020DA18);
  uint64_t v6 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  id v29 = a1;
  sub_1000BC7B0(a1, v10);
  unint64_t v11 = sub_1000C4DCC();
  id v30 = v30;
  uint64_t v27 = v8;
  uint64_t v12 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SharedGroupsMembershipInfo.CodingKeys,  &type metadata for SharedGroupsMembershipInfo.CodingKeys,  v11,  v10,  v9);
  if (v12)
  {
    id v21 = v30;
    sub_1000BC7D4(v29);

    uint64_t v22 = type metadata accessor for SharedGroupsMembershipInfo(0LL);
    swift_deallocPartialClassInstance( v21,  v22,  *(unsigned int *)((swift_isaMask & *(void *)v21) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v21) + 0x34LL));
  }

  else
  {
    unint64_t v13 = v5;
    uint64_t v31 = v3;
    uint64_t v14 = v6;
    uint64_t v15 = sub_1000B86DC(&qword_10020DA28);
    char v33 = 0;
    unint64_t v16 = sub_1000C4E10();
    uint64_t v17 = v15;
    uint64_t v18 = v28;
    uint64_t v19 = v15;
    uint64_t v20 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v17, &v33, v28, v19, v16);
    id v24 = v30;
    *(void *)&v30[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants] = v34;
    LOBYTE(v34) = 1;
    uint64_t v25 = sub_1000B850C( &qword_10020DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v2, &v34, v18, v2, v25);
    (*(void (**)(char *, void *, void *))(v31 + 32))( &v24[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate],  v13,  v2);

    uint64_t v26 = (objc_class *)type metadata accessor for SharedGroupsMembershipInfo(0LL);
    v32.receiver = v24;
    v32.super_class = v26;
    uint64_t v2 = objc_msgSendSuper2(&v32, "init");
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v18);
    sub_1000BC7D4(v29);
  }

  return v2;
}

void *sub_1000C4A58@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for SharedGroupsMembershipInfo(0LL));
  uint64_t result = sub_1000C47AC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000C4AAC(void *a1)
{
  return sub_1000C4630(a1);
}

uint64_t sub_1000C4ACC(uint64_t a1)
{
  if (!v10)
  {
    sub_1000BE490((uint64_t)v9);
    goto LABEL_5;
  }

  uint64_t v2 = type metadata accessor for SharedGroupsMembershipInfo(0LL);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v2, 6LL) & 1) == 0)
  {
LABEL_5:
    char v6 = 0;
    return v6 & 1;
  }

  uint64_t v3 = v8;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants);
  uint64_t v5 = *(void *)&v8[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
  swift_bridgeObjectRetain(v5);
  char v6 = sub_1000C4B7C(v4, v5);

  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_1000C4B7C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1LL;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

unint64_t sub_1000C4DCC()
{
  unint64_t result = qword_10020DA20;
  if (!qword_10020DA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163C60, &type metadata for SharedGroupsMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020DA20);
  }

  return result;
}

unint64_t sub_1000C4E10()
{
  unint64_t result = qword_10020DA30;
  if (!qword_10020DA30)
  {
    uint64_t v1 = sub_1000C4E90(&qword_10020DA28);
    sub_1000C5438( &qword_10020DA38,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10020DA30);
  }

  return result;
}

uint64_t sub_1000C4E90(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

id sub_1000C4ED4(void *a1)
{
  id v3 = v1;
  uint64_t v5 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = JSONEncoder.init()();
  uint64_t v17 = a1;
  uint64_t v7 = type metadata accessor for SharedGroupsMembershipInfo(0LL);
  uint64_t v8 = sub_1000B850C(&qword_10020DA50, type metadata accessor for SharedGroupsMembershipInfo, (uint64_t)&unk_100163B4C);
  uint64_t v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v17, v7, v8);
  if (v2)
  {

    swift_release(v6);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    swift_release(v6);
    id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
    id v14 = sub_1000C5284();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v3 = [v13 initWithDescriptor:v14 value:isa];

    sub_1000B98C0(v11, v12);
  }

  return v3;
}

uint64_t sub_1000C5000(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v3 = 0LL;
  uint64_t v31 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v32 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v33 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }

    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v10 >= v32) {
      return 1LL;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v32) {
        return 1LL;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v32) {
          return 1LL;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }

LABEL_43:
  __break(1u);
  return result;
}

                  a5[3] = v15;
                  a5[4] = 0LL;
                  swift_retain(a3);
                  return (unint64_t *)sub_1000F2F38(v40, a2, v39, a3);
                }
              }
            }
          }

id sub_1000C5284()
{
  id v0 = [objc_allocWithZone(AAFKeychainItemDescriptor) init];
  [v0 setItemClass:1];
  [v0 setAccessGroup:AKSignInWithAppleKeychainAccessGroup];
  [v0 setSynchronizable:2];
  [v0 setItemAccessible:2];
  [v0 setUseDataProtection:2];
  [v0 setInvisible:2];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setService:v1];

  return v0;
}

uint64_t sub_1000C5370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B86DC(&qword_10020D1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C53B8()
{
  unint64_t result = qword_10020DA60;
  if (!qword_10020DA60)
  {
    uint64_t v1 = sub_1000C4E90(&qword_10020DA28);
    sub_1000C5438( &qword_10020DA68,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10020DA60);
  }

  return result;
}

uint64_t sub_1000C5438(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000C4E90(&qword_10020DA40);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for SharedGroupsMembershipInfo.CodingKeys(_BYTE *result, _BYTE *a2)
{
  void *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SharedGroupsMembershipInfo.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for SharedGroupsMembershipInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000C5580 + 4 * byte_100163B25[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C55B4 + 4 * asc_100163B20[v4]))();
}

uint64_t sub_1000C55B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C55BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C55C4LL);
  }
  return result;
}

uint64_t sub_1000C55D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C55D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000C55DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C55E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C55F0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000C55FC(_BYTE *result, char a2)
{
  void *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SharedGroupsMembershipInfo.CodingKeys()
{
  return &type metadata for SharedGroupsMembershipInfo.CodingKeys;
}

unint64_t sub_1000C561C()
{
  unint64_t result = qword_10020DA78;
  if (!qword_10020DA78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163C38, &type metadata for SharedGroupsMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020DA78);
  }

  return result;
}

unint64_t sub_1000C5664()
{
  unint64_t result = qword_10020DA80;
  if (!qword_10020DA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163BA8, &type metadata for SharedGroupsMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020DA80);
  }

  return result;
}

unint64_t sub_1000C56AC()
{
  unint64_t result = qword_10020DA88;
  if (!qword_10020DA88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163BD0, &type metadata for SharedGroupsMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020DA88);
  }

  return result;
}

uint64_t sub_1000C56F0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v4 = 0x800000010016DC30LL;
    if (a2 == 0x800000010016DC30LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010016DC30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x7461446465766173LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461446465766173LL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000C57E8(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 192) = v1;
  return swift_task_switch(sub_1000C584C, 0LL, 0LL);
}

uint64_t sub_1000C584C()
{
  if ([*(id *)(*(void *)(v0 + 192) + 16) isSiwaInPasswordsFeatureEnabled])
  {
    sub_1000C65E8();
    id v1 = [*(id *)(v0 + 184) signInWithAppleAccount];
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
    if (v1)
    {
      id v2 = v1;
      id v3 = [*(id *)(v0 + 184) altDSID];
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v6 = v5;

      *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v6;
      BOOL v7 = (void *)swift_task_alloc(dword_10020DB64);
      *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v7;
      *BOOL v7 = v0;
      v7[1] = sub_1000C5B68;
      uint64_t v8 = *(void *)(v0 + 192);
      v7[18] = v6;
      v7[19] = v8;
      uint8_t v7[16] = v2;
      v7[17] = v4;
      return swift_task_switch(sub_1000C6844, 0LL, 0LL);
    }

    int64_t v10 = (void *)(v0 + 120);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v11 = (uint64_t *)(v0 + 128);
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_1000B8C38(v23, (uint64_t)qword_100210FF0);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No SIWA account set in context.", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v18 = v28;
    uint64_t v19 = -16007LL;
  }

  else
  {
    int64_t v10 = (void *)(v0 + 144);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v11 = (uint64_t *)(v0 + 152);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_1000B8C38(v12, (uint64_t)qword_100210FF0);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Feature flag SiwaInPasswords is not enabled", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v18 = v17;
    uint64_t v19 = -16001LL;
  }

  uint64_t *v11 = v19;
  unint64_t v20 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v21 = sub_1000BC768();
  uint64_t v22 = _BridgedStoredNSError.init(_:userInfo:)(v10, v11, v20, v18, v21);
  swift_willThrow(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C5B68(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void *)(*(void *)v3 + 216LL);
  v5[28] = a2;
  v5[29] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    BOOL v7 = sub_1000C6510;
  }

  else
  {
    swift_bridgeObjectRelease(v5[26]);
    v5[30] = a1;
    BOOL v7 = sub_1000C5C28;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_1000C5C28()
{
  id v1 = (void *)swift_task_alloc(dword_10020D764);
  v0[31] = v1;
  void *v1 = v0;
  v1[1] = sub_1000C5CBC;
  return sub_1000BD790(v0[25], v0[30], v0[28]);
}

uint64_t sub_1000C5CBC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 248);
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000C5E84;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 224));
    uint64_t v4 = sub_1000C5D74;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000C5D74()
{
  id v1 = *(void **)(*(void *)(v0 + 192) + 32LL);
  NSString v2 = [*(id *)(v0 + 200) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v4 = v3;
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  uint64_t v5 = v0 + 16;
  *(void *)(v0 + 264) = v2;
  *(void *)(v0 + 56) = v0 + 280;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1000C5EEC;
  uint64_t v6 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
  BOOL v7 = (void *)(v0 + 80);
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1000ECCB4;
  v7[3] = &unk_1001CB838;
  void v7[4] = v6;
  [v1 removeApplicationWithClientID:v2 completion:v7];
  return swift_continuation_await(v5);
}

uint64_t sub_1000C5E84()
{
  id v1 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease(*(void *)(v0 + 224));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C5EEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 272LL) = v1;
  if (v1) {
    NSString v2 = sub_1000C6574;
  }
  else {
    NSString v2 = sub_1000C5F90;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000C5F90()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 200);
  if (v5)
  {
    BOOL v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v51 = v8;
    *(_DWORD *)BOOL v7 = 136315138;
    id v9 = [v6 clientID];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v12 = v11;

    *(void *)(v0 + 136) = sub_100103438(v10, v12, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
    swift_bridgeObjectRelease(v12);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully revoked %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  id v13 = [*(id *)(v0 + 200) shareInfo];
  if (v13)
  {
    uint64_t v14 = v0 + 160;
    os_log_type_t v15 = *(void **)(v0 + 200);

    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void **)(v0 + 200);
    if (v18)
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v49;
      *(_DWORD *)unint64_t v20 = 136315138;
      id v21 = [v19 clientID];
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v24 = v23;

      uint64_t v25 = v22;
      uint64_t v14 = v0 + 160;
      *(void *)(v0 + 176) = sub_100103438(v25, v24, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
      swift_bridgeObjectRelease(v24);

      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "The account for %s was also previously shared. Removing the keychain item.",  v20,  0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v26 = *(void *)(v0 + 200);
    uint64_t v27 = *(void **)(*(void *)(v0 + 192) + 40LL);
    *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
    unsigned int v28 = [v27 removeSharedAccount:v26 error:v14];
    uint64_t v29 = *(void **)(v0 + 160);
    if (v28)
    {
      id v30 = v29;
    }

    else
    {
      uint64_t v31 = *(void **)(v0 + 200);
      id v32 = v29;
      uint64_t v33 = _convertNSErrorToError(_:)(v29);

      swift_willThrow(v34);
      os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v36 = static os_log_type_t.default.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      id v38 = *(void **)(v0 + 200);
      if (v37)
      {
        id v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v50 = v33;
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        uint64_t v51 = v40;
        *(_DWORD *)id v39 = 136315138;
        id v41 = [v38 clientID];
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        unint64_t v44 = v43;

        *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = sub_100103438(v42, v44, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
        swift_bridgeObjectRelease(v44);

        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "An error occurred while removing shared account for %s.",  v39,  0xCu);
        swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
        uint64_t v45 = v50;
      }

      else
      {

        uint64_t v45 = v33;
      }

      swift_errorRelease(v45);
    }
  }

  uint64_t v46 = *(void **)(v0 + 200);
  id v47 = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
  [v47 postNotificationName:AKSignInWithAppleAccountsListChangedNotification object:0];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6510()
{
  uint64_t v1 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease(*(void *)(v0 + 208));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6574()
{
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 200);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C65E8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    BOOL v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Entitlement Check", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void **)(v0 + 24);
  id v7 = [v6 hasInternalAccess];
  if ((v7 & 1) != 0 || (id v7 = [v6 hasPrivateAccess], (_DWORD)v7))
  {
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Client has necessary permission for accounts revoking",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Client doesn't have access to perform account revoking",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v20 = -16002LL;
    unint64_t v16 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v17 = sub_1000BC768();
    BOOL v18 = _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    swift_willThrow(v18);
  }

  return 1LL;
}

uint64_t sub_1000C6828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1000C6844, 0LL, 0LL);
}

uint64_t sub_1000C6844()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 152) + 32LL);
  NSString v2 = [*(id *)(v0 + 128) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v4 = v3;
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  uint64_t v5 = v0 + 16;
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v6;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1000C6940;
  uint64_t v7 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
  uint64_t v8 = (void *)(v0 + 80);
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_1000E711C;
  v8[3] = &unk_1001CB850;
  void v8[4] = v7;
  [v1 fetchDeveloperTeamWithClientID:v2 withAltDSID:v6 completion:v8];
  return swift_continuation_await(v5);
}

uint64_t sub_1000C6940()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 176LL) = v1;
  if (v1) {
    NSString v2 = sub_1000C6F20;
  }
  else {
    NSString v2 = sub_1000C69A0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000C69A0()
{
  uint64_t v1 = (void *)(v0 + 120);
  NSString v2 = *(void **)(v0 + 120);
  uint64_t v3 = (void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 160);
  uint64_t v5 = *(void **)(v0 + 128);

  id v6 = [v2 apps];
  unint64_t v7 = sub_1000C6FCC();
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for String,  v7,  &protocol witness table for String);

  id v9 = [v5 clientID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  if (!*(void *)(v8 + 16) || (sub_1000F9BB8(v10, v12), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v23 = *(void **)(v0 + 128);
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v24, (uint64_t)qword_100210FF0);
    id v25 = v2;
    id v26 = v23;
    id v27 = v25;
    unsigned int v28 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void **)(v0 + 128);
    if (v30)
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v65 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v32 = 136315394;
      v66[0] = v65;
      os_log_type_t type = v29;
      id v33 = [v27 teamID];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      unint64_t v36 = v35;

      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v34, v36, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v36);

      *(_WORD *)(v32 + 12) = 2080;
      id v37 = [v31 clientID];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v40 = v39;

      uint64_t v41 = v38;
      uint64_t v3 = (void *)(v0 + 80);
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v41, v40, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v40);

      _os_log_impl( (void *)&_mh_execute_header,  v28,  type,  "Developer team %s doesn't have the app with client id %s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v43 = v42;
    void *v1 = -16007LL;
    unint64_t v44 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v45 = sub_1000BC768();
    uint64_t v46 = v3;
    uint64_t v47 = v0 + 120;
    unint64_t v48 = v44;
    goto LABEL_12;
  }

  uint64_t v14 = *(void **)(v0 + 128);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v12);
  id v15 = [v14 userID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  id v19 = [v2 userIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  if (v16 != v20 || v18 != v22)
  {
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v18);
    if ((v51 & 1) != 0) {
      goto LABEL_14;
    }
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_1000B8C38(v57, (uint64_t)qword_100210FF0);
    unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "User identfier doesn't match", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v43 = v62;
    void *v1 = -16007LL;
    unint64_t v63 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v45 = sub_1000BC768();
    uint64_t v46 = (void *)(v0 + 80);
    uint64_t v47 = v0 + 120;
    unint64_t v48 = v63;
LABEL_12:
    uint64_t v49 = _BridgedStoredNSError.init(_:userInfo:)(v46, v47, v48, v43, v45);
    swift_willThrow(v49);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_bridgeObjectRelease_n(v18, 2LL);
LABEL_14:
  id v52 = [v2 teamID];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  unint64_t v54 = v2;
  uint64_t v56 = v55;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v53, v56);
}

uint64_t sub_1000C6F20()
{
  uint64_t v1 = *(void **)(v0 + 168);
  NSString v2 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6F68()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  sub_1000BC7D4((void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for AccountRevokingController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd25AccountRevokingController);
}

unint64_t sub_1000C6FCC()
{
  unint64_t result = qword_10020DB68;
  if (!qword_10020DB68)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AKConsentedApplication);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10020DB68);
  }

  return result;
}

uint64_t sub_1000C7008(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC(&qword_10020DC28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v29) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v29) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v29) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v29) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v30 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1000C73BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC(&qword_10020DC28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v29) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v29) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v29) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v29) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v30 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

unint64_t sub_1000C7770(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC(&qword_10020DCA0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v13 >= v31) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v32 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v32 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v14 = *(void *)(v32 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1LL)) {
                goto LABEL_36;
              }
              if (v15 >= v31) {
                break;
              }
              unint64_t v14 = *(void *)(v32 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_1000C7A50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC(&qword_10020DC28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1000C7E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC(&qword_10020DC28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v31) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1000C81D0(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4)
  {
    uint64_t v6 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else if (a2)
  {
    id v11 = a2;
    id v12 = a3;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v15 = v14;

    int64_t v16 = *(void **)(*(void *)(v4 + 64) + 40LL);
    void *v16 = v11;
    v16[1] = v13;
    v16[2] = v15;
    return swift_continuation_throwingResume(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000C8290(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return swift_task_switch(sub_1000C82F8, 0LL, 0LL);
}

uint64_t sub_1000C82F8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 192) = v2;
  uint64_t v3 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v0 + 168);
    id v7 = [*(id *)(v0 + 176) groupID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v8, v10, 0x64695F70756F7267LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v12 = [v6 userID];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    char v16 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v13, v15, 6580597LL, 0xE300000000000000LL, v16);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v17 = [v6 clientID];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    char v21 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v18, v20, 0xD000000000000011LL, 0x800000010016D8A0LL, v21);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v22 = sub_1000C7E14((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000C871C;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CB8B0;
    [v1 executeRequestWithCompletion:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_1000B8C38(v25, (uint64_t)qword_100210FF0);
    char v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to share due to an invalid request", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v31 = v30;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v32 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v33 = sub_1000BC768();
    __int128 v34 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v32, v31, v33);
    swift_willThrow(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000C871C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 208LL) = v1;
  if (v1) {
    id v2 = sub_1000C8DAC;
  }
  else {
    id v2 = sub_1000C87C0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000C87C0()
{
  uint64_t v1 = *(void **)(v0 + 200);
  id v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  id v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      strcpy((char *)(v0 + 152), "shared_token");
      *(_BYTE *)(v0 + 165) = 0;
      *(_WORD *)(v0 + 166) = -5120;
      AnyHashable.init<A>(_:)( (void *)(v0 + 80),  v0 + 152,  &type metadata for String,  &protocol witness table for String);
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9B88(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }

      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }

      swift_bridgeObjectRelease(v12);
      sub_1000B8D94(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          id v18 = sub_1000E67D4( *(id *)(v0 + 168),  *(id *)(v0 + 176),  *(void *)(v0 + 152),  *(void *)(v0 + 160));
          uint64_t v19 = *(void **)(v0 + 168);

          if (qword_10020CF90 != -1) {
            swift_once(&qword_10020CF90, sub_1000E54FC);
          }
          uint64_t v20 = type metadata accessor for Logger(0LL);
          uint64_t v21 = sub_1000B8C38(v20, (uint64_t)qword_100210FF0);
          uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
          os_log_type_t v23 = static os_log_type_t.default.getter();
          BOOL v24 = os_log_type_enabled(v22, v23);
          uint64_t v25 = *(void *)(v0 + 192);
          if (v24)
          {
            uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v26 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully generated share token", v26, 2u);
            swift_slowDealloc(v26, -1LL, -1LL);
            sub_1000B98C0(v4, v3);
            swift_unknownObjectRelease(v25);
          }

          else
          {
            swift_unknownObjectRelease(*(void *)(v0 + 192));
            sub_1000B98C0(v4, v3);
          }

          return (*(uint64_t (**)(id))(v0 + 8))(v18);
        }
      }

      else
      {
        sub_1000BE490(v0 + 120);
      }
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
    BOOL v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Generate share token failed. Invalid response data", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v33 = v32;
    *(void *)id v2 = -16008LL;
    unint64_t v34 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v35 = sub_1000BC768();
    id v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v34, v33, v35);
    uint64_t v16 = *(void *)(v0 + 80);
  }

  else
  {
    id v15 = v7;
    uint64_t v16 = _convertNSErrorToError(_:)(v7);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v4, v3);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v36, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v37 = swift_errorRetain(v16);
  __int128 v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v40 = 138412290;
    swift_errorRetain(v16);
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    *uint64_t v41 = v42;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Generate share token failed. Error occurred while executing the request - %@",  v40,  0xCu);
    uint64_t v43 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v41, 1LL, v43);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v44 = *(void *)(v0 + 192);

  swift_willThrow(v45);
  swift_unknownObjectRelease(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 208);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Generate share token failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 192);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C8FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[26] = a6;
  v7[27] = v6;
  v7[24] = a4;
  v7[25] = a5;
  v7[22] = a2;
  v7[23] = a3;
  v7[21] = a1;
  return swift_task_switch(sub_1000C9018, 0LL, 0LL);
}

uint64_t sub_1000C9018()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 216) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 224) = v2;
  uint64_t v3 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 232) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v39 = *(void *)(v0 + 184);
    uint64_t v40 = *(void *)(v0 + 200);
    uint64_t v8 = *(void **)(v0 + 168);
    id v41 = v1;
    id v9 = [*(id *)(v0 + 176) groupID];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v10, v12, 0x64695F70756F7267LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v14 = [v8 userID];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    char v18 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v15, v17, 6580597LL, 0xE300000000000000LL, v18);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v19 = [v8 clientID];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    char v23 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v20, v22, 0xD000000000000011LL, 0x800000010016D8A0LL, v23);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_bridgeObjectRetain(v7);
    char v24 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v39, v7, 0x756F72675F646C6FLL, 0xEC00000064695F70LL, v24);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_bridgeObjectRetain(v6);
    char v25 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0E54(v40, v6, 0xD000000000000010LL, 0x800000010016DDA0LL, v25);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v26 = sub_1000C7E14((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000C94F4;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CB898;
    [v41 executeRequestWithCompletion:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_1000B8C38(v29, (uint64_t)qword_100210FF0);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to update share due to an invalid request", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v35 = v34;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v36 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v37 = sub_1000BC768();
    __int128 v38 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v36, v35, v37);
    swift_willThrow(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000C94F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 240LL) = v1;
  if (v1) {
    id v2 = sub_1000C9B84;
  }
  else {
    id v2 = sub_1000C9598;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000C9598()
{
  uint64_t v1 = *(void **)(v0 + 232);
  id v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      strcpy((char *)(v0 + 152), "shared_token");
      *(_BYTE *)(v0 + 165) = 0;
      *(_WORD *)(v0 + 166) = -5120;
      AnyHashable.init<A>(_:)( (void *)(v0 + 80),  v0 + 152,  &type metadata for String,  &protocol witness table for String);
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9B88(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }

      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }

      swift_bridgeObjectRelease(v12);
      sub_1000B8D94(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          id v18 = sub_1000E67D4( *(id *)(v0 + 168),  *(id *)(v0 + 176),  *(void *)(v0 + 152),  *(void *)(v0 + 160));
          id v19 = *(void **)(v0 + 168);

          if (qword_10020CF90 != -1) {
            swift_once(&qword_10020CF90, sub_1000E54FC);
          }
          uint64_t v20 = type metadata accessor for Logger(0LL);
          uint64_t v21 = sub_1000B8C38(v20, (uint64_t)qword_100210FF0);
          uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
          os_log_type_t v23 = static os_log_type_t.default.getter();
          BOOL v24 = os_log_type_enabled(v22, v23);
          uint64_t v25 = *(void *)(v0 + 224);
          if (v24)
          {
            uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v26 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully updated share token", v26, 2u);
            swift_slowDealloc(v26, -1LL, -1LL);
            sub_1000B98C0(v4, v3);
            swift_unknownObjectRelease(v25);
          }

          else
          {
            swift_unknownObjectRelease(*(void *)(v0 + 224));
            sub_1000B98C0(v4, v3);
          }

          return (*(uint64_t (**)(id))(v0 + 8))(v18);
        }
      }

      else
      {
        sub_1000BE490(v0 + 120);
      }
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Update share token failed. Invalid response data", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v33 = v32;
    *(void *)id v2 = -16008LL;
    unint64_t v34 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v35 = sub_1000BC768();
    uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v34, v33, v35);
    uint64_t v16 = *(void *)(v0 + 80);
  }

  else
  {
    id v15 = v7;
    uint64_t v16 = _convertNSErrorToError(_:)(v7);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v4, v3);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v36, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v37 = swift_errorRetain(v16);
  __int128 v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v41 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v40 = 138412290;
    swift_errorRetain(v16);
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    *id v41 = v42;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Update share token failed. Error occurred while executing the request - %@",  v40,  0xCu);
    uint64_t v43 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v41, 1LL, v43);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v44 = *(void *)(v0 + 224);

  swift_willThrow(v45);
  swift_unknownObjectRelease(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9B84(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 240);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Update share token failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 224);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C9D80()
{
  *(void *)(v1 + 472) = v0;
  return swift_task_switch(sub_1000C9DE4, 0LL, 0LL);
}

uint64_t sub_1000C9DE4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 472) + 16LL);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  uint64_t v3 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 48_Block_object_dispose(&a9, 8) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v0 + 16;
    swift_unknownObjectRetain(v2);
    unint64_t v7 = sub_1000F4ABC((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    *(void *)(v0 + 56) = v0 + 312;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000CA0A8;
    uint64_t v9 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
    uint64_t v10 = (void *)(v0 + 128);
    v10[1] = 0x40000000LL;
    v10[2] = sub_1000C81D0;
    v10[3] = &unk_1001CB8E0;
    void v10[4] = v9;
    [v1 executeRequestWithCompletion:v10];
    return swift_continuation_await(v6);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_1000B8C38(v12, (uint64_t)qword_100210FF0);
    char v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to update share due to an invalid request", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v18 = v17;
    *(void *)(v0 + 432) = -16007LL;
    unint64_t v19 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v20 = sub_1000BC768();
    uint64_t v21 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 376), v0 + 432, v19, v18, v20);
    swift_willThrow(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000CA0A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 496LL) = v1;
  if (v1) {
    id v2 = sub_1000CAE50;
  }
  else {
    id v2 = sub_1000CA14C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CA14C()
{
  uint64_t v1 = (void *)(v0 + 408);
  id v2 = *(void **)(v0 + 488);

  uint64_t v4 = *(void *)(v0 + 320);
  unint64_t v3 = *(void *)(v0 + 328);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 392) = 0LL;
  LODWORD(v2) = [v2 validateResponseData:isa error:v0 + 392];

  uint64_t v6 = *(void **)(v0 + 392);
  if (!(_DWORD)v2)
  {
    id v14 = v6;
    uint64_t v15 = _convertNSErrorToError(_:)(v6);

LABEL_16:
    swift_willThrow(v16);
    uint64_t v23 = v4;
    unint64_t v24 = v3;
    goto LABEL_17;
  }

  unint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
  id v8 = v6;
  Class v9 = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [v7 dictionaryFromObject:v9 ofType:@"application/json"];

  if (!v10)
  {
    if (qword_10020CF90 != -1) {
LABEL_76:
    }
      swift_once(&qword_10020CF90, sub_1000E54FC);
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_1000B8C38(v25, (uint64_t)qword_100210FF0);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Update share token failed. Invalid response data", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v31 = v30;
    *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = -16008LL;
    unint64_t v32 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v33 = sub_1000BC768();
    uint64_t v16 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 384), v0 + 368, v32, v31, v33);
    uint64_t v15 = *(void *)(v0 + 384);
    goto LABEL_16;
  }

  unint64_t v118 = v3;
  unint64_t v3 = (unint64_t)&type metadata for Any;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)(v0 + 336) = 25445LL;
  *(void *)(v0 + 344) = 0xE200000000000000LL;
  AnyHashable.init<A>(_:)((void *)(v0 + 208), v0 + 336, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_1000F9B88(v0 + 208), (v13 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v11 + 56) + 32 * v12, v0 + 248);
  }

  else
  {
    *(_OWORD *)(v0 + 24_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
  }

  uint64_t v17 = (void *)(v0 + 448);
  sub_1000B8D94(v0 + 208);
  if (*(void *)(v0 + 272))
  {
    if ((swift_dynamicCast(v0 + 448, v0 + 248, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0
      && *v17)
    {
      swift_bridgeObjectRelease(v11);
      type metadata accessor for SignInWithAppleError(0LL);
      uint64_t v19 = v18;
      *(void *)(v0 + 464) = -16008LL;
      unint64_t v20 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v21 = sub_1000BC768();
      uint64_t v22 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 456), v0 + 464, v20, v19, v21);
      uint64_t v15 = *(void *)(v0 + 456);
      swift_willThrow(v22);
      uint64_t v23 = v4;
      unint64_t v24 = v118;
LABEL_17:
      sub_1000B98C0(v23, v24);
      goto LABEL_18;
    }
  }

  else
  {
    sub_1000BE490(v0 + 248);
  }

  *(void *)(v0 + 352) = 0x6E695F70756F7267LL;
  *(void *)(v0 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0xEA00000000006F66LL;
  AnyHashable.init<A>(_:)((void *)(v0 + 168), v0 + 352, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v11 + 16) && (unint64_t v47 = sub_1000F9B88(v0 + 168), (v48 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v11 + 56) + 32 * v47, v0 + 280);
  }

  else
  {
    *(_OWORD *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
  }

  swift_bridgeObjectRelease(v11);
  sub_1000B8D94(v0 + 168);
  if (!*(void *)(v0 + 304))
  {
    sub_1000BE490(v0 + 280);
    goto LABEL_35;
  }

  uint64_t v49 = sub_1000B86DC(&qword_10020DCB0);
  if ((swift_dynamicCast(v0 + 408, v0 + 280, (char *)&type metadata for Any + 8, v49, 6LL) & 1) == 0)
  {
LABEL_35:
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_1000B8C38(v63, (uint64_t)qword_100210FF0);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      id v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v67 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Successfully fetched sharing status - No apps are currently shared.",  v67,  2u);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    uint64_t v68 = *(void *)(v0 + 480);

    id v69 = (void *)sub_1000F4BFC((uint64_t)_swiftEmptyArrayStorage);
    sub_1000B98C0(v4, v118);
    swift_unknownObjectRelease(v68);
    return (*(uint64_t (**)(void *))(v0 + 8))(v69);
  }

  uint64_t v117 = v4;
  uint64_t v50 = *v1;
  if (qword_10020CF90 != -1) {
LABEL_78:
  }
    swift_once(&qword_10020CF90, sub_1000E54FC);
  uint64_t v51 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v51, (uint64_t)qword_100210FF0);
  uint64_t v52 = swift_bridgeObjectRetain_n(v50, 2LL);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.default.getter();
  uint64_t v116 = v1;
  uint64_t v114 = v50;
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    v119[0] = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    swift_bridgeObjectRetain(v50);
    uint64_t v57 = sub_1000B86DC(&qword_10020DCC8);
    uint64_t v58 = Array.description.getter(v50, v57);
    unint64_t v60 = v59;
    swift_bridgeObjectRelease(v114);
    uint64_t v61 = v58;
    uint64_t v50 = v114;
    *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v61, v60, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v17);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease_n(v114, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Successfully fetched sharing status - %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, v3 + 8);
    uint64_t v62 = v56;
    uint64_t v1 = v116;
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v50, 2LL);
  }

  uint64_t v70 = v117;
  uint64_t v115 = *(void **)(v50 + 16);
  if (!v115)
  {
    id v69 = &_swiftEmptyDictionarySingleton;
LABEL_67:
    uint64_t v102 = *(void *)(v0 + 480);
    swift_bridgeObjectRelease(v50);
    swift_unknownObjectRelease(v102);
    sub_1000B98C0(v70, v118);
    return (*(uint64_t (**)(void *))(v0 + 8))(v69);
  }

  unint64_t v3 = 0LL;
  id v113 = (uint64_t *)(v0 + 416);
  id v69 = &_swiftEmptyDictionarySingleton;
  os_log_type_t v112 = (void *)(v0 + 424);
  while (1)
  {
    uint64_t v73 = *(void *)(v50 + 8 * v3 + 32);
    if (!*(void *)(v73 + 16))
    {
      uint64_t v73 = v50;
      goto LABEL_71;
    }

    swift_bridgeObjectRetain(*(void *)(v50 + 8 * v3 + 32));
    unint64_t v74 = sub_1000F9BB8(0x64695F70756F7267LL, 0xE800000000000000LL);
    if ((v75 & 1) == 0) {
      break;
    }
    id v76 = (uint64_t *)(*(void *)(v73 + 56) + 16 * v74);
    uint64_t v4 = *v76;
    uint64_t v17 = (void *)v76[1];
    uint64_t v77 = *(void *)(v73 + 16);
    swift_bridgeObjectRetain(v17);
    if (!v77 || (unint64_t v78 = sub_1000F9BB8(0xD000000000000011LL, 0x800000010016D8A0LL), (v79 & 1) == 0))
    {
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v17);
      uint64_t v70 = v117;
      goto LABEL_71;
    }

    NSString v80 = (uint64_t *)(*(void *)(v73 + 56) + 16 * v78);
    uint64_t v82 = *v80;
    uint64_t v81 = v80[1];
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRelease(v73);
    if (v69[2])
    {
      swift_bridgeObjectRetain(v17);
      unint64_t v83 = sub_1000F9BB8(v4, (uint64_t)v17);
      if ((v84 & 1) != 0)
      {
        uint64_t v85 = *(void *)(v69[7] + 8 * v83);
        swift_bridgeObjectRetain(v85);
        swift_bridgeObjectRelease(v17);
        sub_1000F1A58(v119, v82, v81);
        swift_bridgeObjectRelease(v119[1]);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
        v119[0] = (uint64_t)v69;
        sub_1000F0FD4(v85, v4, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        id v69 = (void *)v119[0];
        swift_bridgeObjectRelease(0x8000000000000000LL);
        swift_bridgeObjectRelease(v17);
        uint64_t v1 = v116;
        uint64_t v70 = v117;
        goto LABEL_46;
      }

      swift_bridgeObjectRelease(v17);
    }

    uint64_t v87 = sub_1000B86DC(&qword_10020DCC0);
    uint64_t inited = swift_initStackObject(v87, v0 + 80);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
    *(void *)(inited + 32) = v82;
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v81;
    uint64_t v1 = (void *)sub_1000CC420(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    uint64_t v89 = swift_isUniquelyReferenced_nonNull_native(v69);
    v119[0] = (uint64_t)v69;
    unint64_t v91 = sub_1000F9BB8(v4, (uint64_t)v17);
    uint64_t v92 = v69[2];
    BOOL v93 = (v90 & 1) == 0;
    uint64_t v94 = v92 + v93;
    if (__OFADD__(v92, v93))
    {
      __break(1u);
      goto LABEL_76;
    }

    char v95 = v90;
    if (v69[3] >= v94)
    {
      if ((v89 & 1) != 0)
      {
        uint64_t v50 = v114;
        if ((v90 & 1) == 0) {
          goto LABEL_62;
        }
      }

      else
      {
        sub_1000F16FC();
        id v69 = (void *)v119[0];
        uint64_t v50 = v114;
        if ((v95 & 1) == 0) {
          goto LABEL_62;
        }
      }
    }

    else
    {
      sub_1000F0708(v94, v89);
      id v69 = (void *)v119[0];
      unint64_t v96 = sub_1000F9BB8(v4, (uint64_t)v17);
      if ((v95 & 1) != (v97 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      unint64_t v91 = v96;
      uint64_t v50 = v114;
      if ((v95 & 1) == 0)
      {
LABEL_62:
        v69[(v91 >> 6) + 8] |= 1LL << v91;
        uint64_t v98 = (uint64_t *)(v69[6] + 16 * v91);
        *uint64_t v98 = v4;
        v98[1] = (uint64_t)v17;
        *(void *)(v69[7] + 8 * v91) = v1;
        uint64_t v99 = v69[2];
        BOOL v100 = __OFADD__(v99, 1LL);
        uint64_t v101 = v99 + 1;
        if (v100)
        {
          __break(1u);
          goto LABEL_78;
        }

        v69[2] = v101;
        swift_bridgeObjectRetain(v17);
        goto LABEL_45;
      }
    }

    uint64_t v71 = v69[7];
    uint64_t v72 = 8 * v91;
    swift_bridgeObjectRelease(*(void *)(v71 + v72));
    *(void *)(v71 + v72) = v1;
LABEL_45:
    uint64_t v1 = v116;
    uint64_t v70 = v117;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_bridgeObjectRelease(v17);
LABEL_46:
  }

  swift_bridgeObjectRelease(v50);
LABEL_71:
  uint64_t v103 = swift_bridgeObjectRelease(v73);
  id v104 = (os_log_s *)Logger.logObject.getter(v103);
  os_log_type_t v105 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v106 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "Missing groupID or primaryClientID in groupInfo response",  v106,  2u);
    swift_slowDealloc(v106, -1LL, -1LL);
  }

  type metadata accessor for SignInWithAppleError(0LL);
  uint64_t v108 = v107;
  *os_log_type_t v112 = -16008LL;
  unint64_t v109 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v110 = sub_1000BC768();
  unsigned int v111 = _BridgedStoredNSError.init(_:userInfo:)(v113, v112, v109, v108, v110);
  uint64_t v15 = *v113;
  swift_willThrow(v111);
  sub_1000B98C0(v70, v118);
  swift_bridgeObjectRelease(v69);
LABEL_18:
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v34, (uint64_t)qword_100210FF0);
  swift_errorRetain(v15);
  uint64_t v35 = swift_errorRetain(v15);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    __int128 v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v39 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)__int128 v38 = 138412290;
    swift_errorRetain(v15);
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError(v15);
    id v41 = v1;
    uint64_t v42 = v40;
    *(void *)(v0 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v41);
    *os_log_type_t v39 = v42;
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Failed to fetch sharing status. Error occurred while executing the request - %@",  v38,  0xCu);
    uint64_t v43 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v39, 1LL, v43);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  uint64_t v44 = *(void *)(v0 + 480);

  swift_willThrow(v45);
  swift_unknownObjectRelease(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CAE50(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 496);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 400, v1 + 408);
    *id v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Failed to fetch sharing status. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 480);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CB04C(uint64_t a1)
{
  *(void *)(v2 + 16_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 176) = v1;
  return swift_task_switch(sub_1000CB0B0, 0LL, 0LL);
}

uint64_t sub_1000CB0B0()
{
  uint64_t v1 = (void *)(v0 + 80);
  uint64_t v2 = (char **)(v0 + 120);
  uint64_t v3 = *(void **)(*(void *)(v0 + 176) + 16LL);
  id v4 = [v3 requestProvider];
  *(void *)(v0 + 184) = v4;
  uint64_t v5 = type metadata accessor for AccountSharingRequestProvider();
  uint64_t v6 = swift_dynamicCastClass(v4, v5);
  *(void *)(v0 + 192) = v6;
  if (!v6)
  {
    swift_unknownObjectRelease(v4);
    if (qword_10020CF90 == -1)
    {
LABEL_41:
      uint64_t v48 = type metadata accessor for Logger(0LL);
      uint64_t v49 = sub_1000B8C38(v48, (uint64_t)qword_100210FF0);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Failed to rotate tokens due to an invalid request",  v52,  2u);
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      type metadata accessor for SignInWithAppleError(0LL);
      uint64_t v54 = v53;
      void *v1 = -16007LL;
      unint64_t v55 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v56 = sub_1000BC768();
      uint64_t v57 = _BridgedStoredNSError.init(_:userInfo:)(v2, v1, v55, v54, v56);
      swift_willThrow(v57);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

LABEL_52:
    swift_once(&qword_10020CF90, sub_1000E54FC);
    goto LABEL_41;
  }

  id v70 = (id)v6;
  id v71 = v3;
  id v72 = v4;
  uint64_t v73 = (_OWORD *)(v0 + 120);
  unint64_t v74 = (_OWORD *)(v0 + 80);
  char v75 = (void *)v0;
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = v7 + 64;
  uint64_t v9 = -1LL;
  uint64_t v10 = -1LL << *(_BYTE *)(v7 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1LL << -(char)v10);
  }
  unint64_t v0 = v9 & *(void *)(v7 + 64);
  int64_t v77 = (unint64_t)(63 - v10) >> 6;
  swift_bridgeObjectRetain(v7);
  int64_t v11 = 0LL;
  id v76 = _swiftEmptyArrayStorage;
  uint64_t v2 = &selRef_authenticatingDaemons;
  if (v0) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    if (v14 < v77)
    {
      unint64_t v15 = *(void *)(v8 + 8 * v14);
      ++v11;
      if (v15) {
        goto LABEL_23;
      }
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v77) {
        break;
      }
      unint64_t v15 = *(void *)(v8 + 8 * v11);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v11 = v14 + 2;
      if (v14 + 2 >= v77) {
        break;
      }
      unint64_t v15 = *(void *)(v8 + 8 * v11);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v11 = v14 + 3;
      if (v14 + 3 >= v77) {
        break;
      }
      unint64_t v15 = *(void *)(v8 + 8 * v11);
      if (v15)
      {
LABEL_23:
        unint64_t v0 = (v15 - 1) & v15;
        for (unint64_t i = __clz(__rbit64(v15)) + (v11 << 6); ; unint64_t i = v12 | (v11 << 6))
        {
          id v17 = *(id *)(*(void *)(v7 + 56) + 8 * i);
          id v18 = [v17 shareInfo];
          if (!v18) {
            goto LABEL_28;
          }
          uint64_t v19 = v18;
          id v20 = [v18 groupID];

          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          uint64_t v23 = v22;

          id v24 = [v17 shareInfo];
          if (!v24) {
            break;
          }
          uint64_t v25 = v24;
          id v26 = [v24 shareToken];

          if (!v26) {
            break;
          }
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          uint64_t v68 = v33;
          uint64_t v69 = v32;

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          sub_1000F0E54(v21, v23, 0x64695F70756F7267LL, 0xE800000000000000LL, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease(0x8000000000000000LL);
          id v35 = [v17 clientID];
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          uint64_t v38 = v37;

          char v39 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          sub_1000F0E54(v36, v38, 0xD000000000000011LL, 0x800000010016D8A0LL, v39);
          swift_bridgeObjectRelease(0x8000000000000000LL);
          char v40 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          sub_1000F0E54(v69, v68, 0x745F646572616873LL, 0xEC0000006E656B6FLL, v40);
          uint64_t v1 = &_swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease(0x8000000000000000LL);
          if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0) {
            id v76 = sub_1000EB89C(0LL, v76[2] + 1LL, 1, v76);
          }
          unint64_t v42 = v76[2];
          unint64_t v41 = v76[3];
          if (v42 >= v41 >> 1) {
            id v76 = sub_1000EB89C((void *)(v41 > 1), v42 + 1, 1, v76);
          }
          v76[2] = v42 + 1;
          v76[v42 + 4] = &_swiftEmptyDictionarySingleton;

          if (!v0) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v12 = __clz(__rbit64(v0));
          v0 &= v0 - 1;
        }

        swift_bridgeObjectRelease(v23);
LABEL_28:
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v27 = type metadata accessor for Logger(0LL);
        uint64_t v28 = sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
        uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        uint64_t v1 = (void *)v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v1,  "Account has invalid shareInfo. Skipping.",  v31,  2u);
          swift_slowDealloc(v31, -1LL, -1LL);
        }

        if (!v0) {
          continue;
        }
        goto LABEL_7;
      }

      int64_t v16 = v14 + 4;
      if (v16 < v77)
      {
        unint64_t v15 = *(void *)(v8 + 8 * v16);
        if (v15)
        {
          int64_t v11 = v16;
          goto LABEL_23;
        }

        while (1)
        {
          int64_t v11 = v16 + 1;
          if (__OFADD__(v16, 1LL)) {
            goto LABEL_51;
          }
          if (v11 >= v77) {
            goto LABEL_38;
          }
          unint64_t v15 = *(void *)(v8 + 8 * v11);
          ++v16;
          if (v15) {
            goto LABEL_23;
          }
        }
      }
    }

    break;
  }

    swift_bridgeObjectRelease_n(v24, 2LL);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    int64_t v77 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v77, (uint64_t)qword_100210FF0);
    swift_bridgeObjectRetain_n(v90, 2LL);
    unint64_t v78 = swift_bridgeObjectRetain_n(a7, 2LL);
    char v79 = (os_log_s *)Logger.logObject.getter(v78);
    NSString v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = swift_slowAlloc(22LL, -1LL);
      uint64_t v82 = swift_slowAlloc(64LL, -1LL);
      v93[0] = v82;
      *(_DWORD *)uint64_t v81 = 136315394;
      swift_bridgeObjectRetain(a7);
      uint64_t v94 = sub_100103438(v92, a7, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease_n(a7, 3LL);
      *(_WORD *)(v81 + 12) = 2080;
      swift_bridgeObjectRetain(v90);
      uint64_t v94 = sub_100103438(v88, v90, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease_n(v90, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "No such participant (%s) in the group (%s)",  (uint8_t *)v81,  0x16u);
      swift_arrayDestroy(v82, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1LL, -1LL);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v90, 2LL);
      swift_bridgeObjectRelease_n(a7, 2LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    char v84 = v83;
    uint64_t v94 = -16011LL;
    uint64_t v85 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v86 = sub_1000BC768();
    _BridgedStoredNSError.init(_:userInfo:)(v93, &v94, v85, v84, v86);
    uint64_t v94 = v93[0];
    uint64_t v87 = sub_1000B86DC(&qword_10020E928);
    CheckedContinuation.resume(throwing:)(&v94, v87);
  }

  else
  {
    unint64_t v47 = a4;
    uint64_t v48 = a1;
    uint64_t v49 = [v48 participants];
    uint64_t v50 = sub_1000D0510(0LL, &qword_10020E8F8, &OBJC_CLASS___KCSharingParticipant_ptr);
    os_log_type_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

    swift_bridgeObjectRetain(a7);
    uint64_t v28 = sub_1000EBF90(v51, v20, a7);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(a7);
    if (v28)
    {
LABEL_38:
      unint64_t v60 = [v28 handle];
      os_log_type_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      uint64_t v63 = v62;

      if (qword_10020CF90 != -1) {
        swift_once(&qword_10020CF90, sub_1000E54FC);
      }
      uint64_t v64 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v64, (uint64_t)qword_100210FF0);
      swift_bridgeObjectRetain_n(a7, 2LL);
      unint64_t v65 = swift_bridgeObjectRetain_n(v63, 2LL);
      unint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      id v67 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = swift_slowAlloc(22LL, -1LL);
        uint64_t v69 = swift_slowAlloc(64LL, -1LL);
        v93[0] = v69;
        *(_DWORD *)uint64_t v68 = 136315394;
        swift_bridgeObjectRetain(a7);
        uint64_t v94 = sub_100103438(v20, a7, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
        swift_bridgeObjectRelease_n(a7, 3LL);
        *(_WORD *)(v68 + 12) = 2080;
        swift_bridgeObjectRetain(v63);
        uint64_t v94 = sub_100103438(v61, v63, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
        swift_bridgeObjectRelease_n(v63, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Handle for participant(%s - %s", (uint8_t *)v68, 0x16u);
        swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        swift_slowDealloc(v68, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v63, 2LL);
        swift_bridgeObjectRelease_n(a7, 2LL);
      }

      v93[0] = v61;
      v93[1] = v63;
      id v70 = sub_1000B86DC(&qword_10020E928);
      CheckedContinuation.resume(returning:)(v93, v70);
    }

    else
    {
      uint64_t v52 = v20;
      uint64_t v53 = a3;
      if (qword_10020CF90 != -1) {
        swift_once(&qword_10020CF90, sub_1000E54FC);
      }
      uint64_t v54 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v54, (uint64_t)qword_100210FF0);
      swift_bridgeObjectRetain_n(v47, 2LL);
      unint64_t v55 = swift_bridgeObjectRetain_n(a7, 2LL);
      unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      uint64_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        uint64_t v59 = swift_slowAlloc(64LL, -1LL);
        v93[0] = v59;
        *(_DWORD *)uint64_t v58 = 136315394;
        swift_bridgeObjectRetain(a7);
        uint64_t v94 = sub_100103438(v52, a7, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
        swift_bridgeObjectRelease_n(a7, 3LL);
        *(_WORD *)(v58 + 12) = 2080;
        swift_bridgeObjectRetain(v47);
        uint64_t v94 = sub_100103438(v53, v47, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
        swift_bridgeObjectRelease_n(v47, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "No such participant (%s) in the group (%s)",  (uint8_t *)v58,  0x16u);
        swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v47, 2LL);
        swift_bridgeObjectRelease_n(a7, 2LL);
      }

      type metadata accessor for SignInWithAppleError(0LL);
      id v72 = v71;
      uint64_t v94 = -16011LL;
      uint64_t v73 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v74 = sub_1000BC768();
      _BridgedStoredNSError.init(_:userInfo:)(v93, &v94, v73, v72, v74);
      uint64_t v94 = v93[0];
      char v75 = sub_1000B86DC(&qword_10020E928);
      CheckedContinuation.resume(throwing:)(&v94, v75);
    }
  }

LABEL_38:
  unint64_t v0 = (unint64_t)v75;
  swift_release(v75[21]);
  if (v76[2])
  {
    uint64_t v43 = sub_1000B86DC(&qword_10020DCB0);
    v75[25] = v43;
    v75[13] = v43;
    v75[10] = v76;
    sub_1000B8EB0(v74, v73);
    char v44 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24(v73, 0x6E695F70756F7267LL, 0xEA00000000006F66LL, v44);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v72);
    uint64_t v45 = sub_1000C7A50((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    [v70 setAuthKitBody:isa];

    swift_unknownObjectRelease(v72);
    v75[7] = v73;
    v75[2] = v75;
    v75[3] = sub_1000CB944;
    v75[14] = swift_continuation_init(v75 + 2, 1LL);
    v75[10] = _NSConcreteStackBlock;
    v75[11] = 0x40000000LL;
    v75[12] = sub_1000C81D0;
    v75[13] = &unk_1001CB8C8;
    [v71 executeRequestWithCompletion:v74];
    return swift_continuation_await(v75 + 2);
  }

  swift_bridgeObjectRelease(v76);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_1000B8C38(v58, (uint64_t)qword_100210FF0);
  unint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to rorate tokens. No eligible accounts.", v62, 2u);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  type metadata accessor for SignInWithAppleError(0LL);
  uint64_t v64 = v63;
  *(void *)uint64_t v73 = -16007LL;
  unint64_t v65 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v66 = sub_1000BC768();
  id v67 = _BridgedStoredNSError.init(_:userInfo:)(v74, v73, v65, v64, v66);
  swift_willThrow(v67);
  swift_unknownObjectRelease(v72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CB944()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 208LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000CC204;
  }
  else {
    uint64_t v2 = sub_1000CB9E8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CB9E8()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v4 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  uint64_t v8 = &OBJC_PROTOCOL___AKProximityEngineController;
  if (!v6)
  {
    id v16 = v7;
    uint64_t v17 = _convertNSErrorToError(_:)(v7);

LABEL_34:
    swift_willThrow(v18);
    sub_1000B98C0(v3, v4);
    if (v8[55].inst_meths != (__objc2_meth_list *)-1LL) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v53, (uint64_t)qword_100210FF0);
    swift_errorRetain(v17);
    uint64_t v54 = swift_errorRetain(v17);
    unint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v57 = 138412290;
      swift_errorRetain(v17);
      uint64_t v59 = _swift_stdlib_bridgeErrorToNSError(v17);
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      uint64_t *v58 = v59;
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Generate share token failed. Error occurred while executing the request - %@",  v57,  0xCu);
      uint64_t v60 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v58, 1LL, v60);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v17);
      swift_errorRelease(v17);
    }

    uint64_t v61 = *(void *)(v0 + 184);

    swift_willThrow(v62);
    swift_unknownObjectRelease(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
  id v10 = v7;
  Class v11 = Data._bridgeToObjectiveC()().super.isa;
  id v12 = [v9 dictionaryFromObject:v11 ofType:@"application/json"];

  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)(v0 + 152) = 0x6E695F70756F7267LL;
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0xEA00000000006F66LL;
  AnyHashable.init<A>(_:)((void *)(v0 + 80), v0 + 152, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_1000F9B88(v0 + 80), (v15 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v13 + 56) + 32 * v14, v0 + 120);
  }

  else
  {
    _OWORD *v2 = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
  }

  swift_bridgeObjectRelease(v13);
  sub_1000B8D94(v0 + 80);
  if (!*(void *)(v0 + 144))
  {
    sub_1000BE490(v0 + 120);
    uint64_t v8 = &OBJC_PROTOCOL___AKProximityEngineController;
    goto LABEL_28;
  }

  uint64_t v8 = &OBJC_PROTOCOL___AKProximityEngineController;
  if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, *(void *)(v0 + 200), 6LL) & 1) == 0)
  {
LABEL_28:
    if (v8[55].inst_meths != (__objc2_meth_list *)-1LL) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    uint64_t v44 = sub_1000B8C38(v43, (uint64_t)qword_100210FF0);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v45, v46)) {
      goto LABEL_33;
    }
    unint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v47 = 0;
    uint64_t v48 = "Update share token failed. Invalid response data";
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v45, v46, v48, v47, 2u);
    swift_slowDealloc(v47, -1LL, -1LL);
LABEL_33:

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v50 = v49;
    *(void *)uint64_t v2 = -16008LL;
    unint64_t v51 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v52 = sub_1000BC768();
    id v18 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v51, v50, v52);
    uint64_t v17 = *(void *)(v0 + 80);
    goto LABEL_34;
  }

  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v71 = *(void *)(v19 + 16);
  if (v71)
  {
    uint64_t v20 = 0LL;
    uint64_t v70 = *(void *)(v0 + 168);
    uint64_t v68 = *(void *)(v0 + 152);
    unint64_t v69 = v4;
    while (1)
    {
      uint64_t v21 = *(void *)(v19 + 8 * v20 + 32);
      if (!*(void *)(v21 + 16))
      {
        uint64_t v21 = v19;
        goto LABEL_46;
      }

      swift_bridgeObjectRetain(*(void *)(v19 + 8 * v20 + 32));
      sub_1000F9BB8(0x64695F70756F7267LL, 0xE800000000000000LL);
      if ((v22 & 1) == 0) {
        break;
      }
      if (!*(void *)(v21 + 16)) {
        break;
      }
      unint64_t v23 = sub_1000F9BB8(0xD000000000000011LL, 0x800000010016D8A0LL);
      if ((v24 & 1) == 0 || !*(void *)(v21 + 16)) {
        break;
      }
      uint64_t v25 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v23);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      swift_bridgeObjectRetain(v27);
      unint64_t v28 = sub_1000F9BB8(0x745F646572616873LL, 0xEC0000006E656B6FLL);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRelease(v27);
        break;
      }

      uint64_t v30 = *(void *)(*(void *)(v21 + 56) + 16 * v28 + 8);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v21);
      if (!*(void *)(v70 + 16) || (unint64_t v31 = sub_1000F9BB8(v26, v27), (v32 & 1) == 0))
      {
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v30);
        unint64_t v4 = v69;
        goto LABEL_47;
      }

      id v33 = *(id *)(*(void *)(*(void *)(v0 + 168) + 56LL) + 8 * v31);
      swift_bridgeObjectRelease(v27);
      id v34 = [v33 shareInfo];
      if (v34)
      {
        id v35 = v34;
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v30);
        [v35 setShareToken:v36];
      }

      else
      {
        swift_bridgeObjectRelease(v30);
      }

      id v37 = v33;
      sub_1000E64F8(v37);
      id v39 = v38;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
      unint64_t v41 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v40 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v41 >= v40 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1LL);
      }
      ++v20;
      uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized Array._endMutation()(v42);

      uint64_t v19 = v68;
      unint64_t v4 = v69;
      if (v71 == v20)
      {
        uint64_t v67 = *(void *)(v0 + 184);
        swift_bridgeObjectRelease(v68);
        swift_unknownObjectRelease(v67);
        goto LABEL_41;
      }
    }

    swift_bridgeObjectRelease(v19);
LABEL_46:
    swift_bridgeObjectRelease(v21);
LABEL_47:
    uint64_t v8 = &OBJC_PROTOCOL___AKProximityEngineController;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v65 = type metadata accessor for Logger(0LL);
    uint64_t v66 = sub_1000B8C38(v65, (uint64_t)qword_100210FF0);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v45, v46)) {
      goto LABEL_33;
    }
    unint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v47 = 0;
    uint64_t v48 = "Missing parameters in response";
    goto LABEL_32;
  }

  uint64_t v64 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease(v19);
  swift_unknownObjectRelease(v64);
LABEL_41:
  sub_1000B98C0(v3, v4);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1000CC204(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 208);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Generate share token failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 184);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for AccountSharingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd21AccountSharingService);
}

Swift::Int sub_1000CC420(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B86DC((uint64_t *)&unk_10020DCD0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      os_log_type_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        id v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      unint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + swift_weakDestroy(v0 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000CC5C0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000CC620(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  return swift_task_switch(sub_1000CC688, 0LL, 0LL);
}

uint64_t sub_1000CC688()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 168) + OBJC_IVAR___AKApplicationMetadataService_serviceController);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 176) = v2;
  uint64_t v3 = type metadata accessor for ApplicationMetadataRequestProvider();
  uint64_t v4 = swift_dynamicCastClass(v2, v3);
  *(void *)(v0 + 184) = v4;
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 160);
    *(void *)(v0 + 104) = &type metadata for String;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v6;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v7;
    sub_1000B8EB0((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    swift_bridgeObjectRetain(v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1000F0D24((_OWORD *)(v0 + 120), 0x695F746E65696C63LL, 0xE900000000000064LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_unknownObjectRetain(v2);
    uint64_t v9 = sub_1000C7A50((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    [v5 setAuthKitBody:isa];

    swift_unknownObjectRelease(v2);
    unint64_t v11 = &v5[OBJC_IVAR___AKApplicationMetadataRequestProvider_clientID];
    uint64_t v12 = *(void *)&v5[OBJC_IVAR___AKApplicationMetadataRequestProvider_clientID + 8];
    *(void *)unint64_t v11 = v6;
    *((void *)v11 + 1) = v7;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease(v12);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000CCA04;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000C81D0;
    *(void *)(v0 + 104) = &unk_1001CBA08;
    [v1 executeRequestWithCompletion:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_1000B8C38(v14, (uint64_t)qword_100210FF0);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      BOOL v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to fetch Primary App Info due to an invalid request",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v20 = v19;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v21 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v22 = sub_1000BC768();
    unint64_t v23 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v21, v20, v22);
    swift_willThrow(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000CCA04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 192LL) = v1;
  if (v1) {
    id v2 = sub_1000CCFB8;
  }
  else {
    id v2 = sub_1000CCAA8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CCAA8()
{
  uint64_t v1 = *(void **)(v0 + 184);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  unsigned int v5 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v6 = *(void **)(v0 + 80);
  if (v5)
  {
    uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
    id v8 = v6;
    Class v9 = Data._bridgeToObjectiveC()().super.isa;
    id v10 = [v7 dictionaryFromObject:v9 ofType:@"application/x-plist"];

    if (v10)
    {
      uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      unint64_t v12 = sub_1000F4F18(v11);
      swift_bridgeObjectRelease(v11);
      if (v12)
      {
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v13 = type metadata accessor for Logger(0LL);
        uint64_t v14 = sub_1000B8C38(v13, (uint64_t)qword_100210FF0);
        uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
        os_log_type_t v16 = static os_log_type_t.default.getter();
        BOOL v17 = os_log_type_enabled(v15, v16);
        uint64_t v18 = *(void *)(v0 + 176);
        if (v17)
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetch Primary App Info succeeded", v19, 2u);
          swift_slowDealloc(v19, -1LL, -1LL);
          sub_1000B98C0(v3, v2);
          swift_unknownObjectRelease(v18);
        }

        else
        {
          swift_unknownObjectRelease(*(void *)(v0 + 176));
          sub_1000B98C0(v3, v2);
        }

        return (*(uint64_t (**)(unint64_t))(v0 + 8))(v12);
      }
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_1000B8C38(v23, (uint64_t)qword_100210FF0);
    BOOL v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Fetch Primary App Info failed. Invalid response data",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v29 = v28;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16008LL;
    unint64_t v30 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v31 = sub_1000BC768();
    unint64_t v22 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v30, v29, v31);
    uint64_t v21 = *(void *)(v0 + 80);
  }

  else
  {
    id v20 = v6;
    uint64_t v21 = _convertNSErrorToError(_:)(v6);
  }

  swift_willThrow(v22);
  sub_1000B98C0(v3, v2);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v32, (uint64_t)qword_100210FF0);
  swift_errorRetain(v21);
  uint64_t v33 = swift_errorRetain(v21);
  id v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    NSString v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v37 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)NSString v36 = 138412290;
    swift_errorRetain(v21);
    uint64_t v38 = _swift_stdlib_bridgeErrorToNSError(v21);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    *id v37 = v38;
    swift_errorRelease(v21);
    swift_errorRelease(v21);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Fetch Primary App Info failed. Error occurred while executing the request - %@",  v36,  0xCu);
    uint64_t v39 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v37, 1LL, v39);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v21);
    swift_errorRelease(v21);
  }

  uint64_t v40 = *(void *)(v0 + 176);

  swift_willThrow(v41);
  swift_unknownObjectRelease(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CCFB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 192);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  unsigned int v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *id v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Fetch Primary App Info failed. Error occurred while executing the request - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 176);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CD2E4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10020DD54;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000CD384;
  v11[20] = v8;
  v11[21] = v10;
  v11[19] = v6;
  return swift_task_switch(sub_1000CC688, 0LL, 0LL);
}

uint64_t sub_1000CD384(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v12 = (void *)v10;
  }

  else
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    uint64_t v12 = isa;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000CD470()
{
  *(void *)(v1 + 192) = v0;
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  *(void *)(v1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000CD4F4, 0LL, 0LL);
}

uint64_t sub_1000CD4F4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 192) + OBJC_IVAR___AKApplicationMetadataService_serviceController);
  id v2 = [v1 requestProvider];
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v2;
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___AKGrandSlamRequestProvider);
  uint64_t v4 = swift_dynamicCastObjCClass(v2, v3);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v4;
  if (v4)
  {
    uint64_t v5 = v0 + 16;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000CD758;
    uint64_t v6 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    uint64_t v7 = (void *)(v0 + 80);
    v7[1] = 0x40000000LL;
    _DWORD v7[2] = sub_1000C81D0;
    v7[3] = &unk_1001CB978;
    void v7[4] = v6;
    [v1 executeRequestWithCompletion:v7];
    return swift_continuation_await(v5);
  }

  else
  {
    swift_unknownObjectRelease(v2);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000B8C38(v9, (uint64_t)qword_100210FF0);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to share due to an invalid request", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    *(void *)(v0 + 144) = -16007LL;
    unint64_t v16 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v17 = sub_1000BC768();
    uint64_t v18 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 152), v0 + 144, v16, v15, v17);
    swift_willThrow(v18);
    swift_task_dealloc(*(void *)(v0 + 200));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000CD758()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 224LL) = v1;
  if (v1) {
    id v2 = sub_1000CDC04;
  }
  else {
    id v2 = sub_1000CD7FC;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CD7FC()
{
  uint64_t v1 = *(void **)(v0 + 216);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = 0LL;
  unsigned int v5 = [v1 validateResponseData:isa error:v0 + 168];

  uint64_t v6 = *(void **)(v0 + 168);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 200);
    static String.Encoding.utf8.getter(v6);
    uint64_t v8 = String.init(data:encoding:)(v3, v2, v7);
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      uint64_t v13 = *(void *)(v0 + 200);
      uint64_t v12 = *(void *)(v0 + 208);
      sub_1000B98C0(v3, v2);
      swift_unknownObjectRelease(v12);
      swift_task_dealloc(v13);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v11);
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_1000B8C38(v18, (uint64_t)qword_100210FF0);
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Fetch Authorization HTML template failed. Invalid response data",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v24 = v23;
    *(void *)(v0 + 184) = -16008LL;
    unint64_t v25 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v26 = sub_1000BC768();
    unint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 176), v0 + 184, v25, v24, v26);
    uint64_t v16 = *(void *)(v0 + 176);
  }

  else
  {
    id v15 = v6;
    uint64_t v16 = _convertNSErrorToError(_:)(v6);
  }

  swift_willThrow(v17);
  sub_1000B98C0(v3, v2);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v27, (uint64_t)qword_100210FF0);
  swift_errorRetain(v16);
  uint64_t v28 = swift_errorRetain(v16);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    NSString v36 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v31 = 138412290;
    swift_errorRetain(v16);
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
    uint64_t *v36 = v32;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Fetch Authorization HTML template failed with error - %@",  v31,  0xCu);
    uint64_t v33 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v36, 1LL, v33);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v34 = *(void *)(v0 + 208);

  swift_willThrow(v35);
  swift_unknownObjectRelease(v34);
  swift_task_dealloc(*(void *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CDC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 224);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FF0);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  unsigned int v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v2);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Fetch Authorization HTML template failed with error - %@",  v7,  0xCu);
    uint64_t v10 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v11 = *(void *)(v1 + 208);

  swift_willThrow(v12);
  swift_unknownObjectRelease(v11);
  swift_task_dealloc(*(void *)(v1 + 200));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CDF24(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020DD2C;
  a2;
  unsigned int v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1000CDF84;
  return sub_1000CD470();
}

uint64_t sub_1000CDF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 32);
  uint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc(v7);

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    NSString v11 = 0LL;
    uint64_t v12 = (void *)v10;
  }

  else
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    uint64_t v10 = 0LL;
    uint64_t v12 = v11;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, NSString, uint64_t))v13)[2](v13, v11, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t type metadata accessor for ApplicationMetadataService()
{
  return objc_opt_self(&OBJC_CLASS___AKApplicationMetadataService);
}

uint64_t sub_1000CE0B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CE0DC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10020DD1C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020DD18 + dword_10020DD18))(v2, v3);
}

uint64_t sub_1000CE148()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000CE17C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unsigned int v5 = (void *)swift_task_alloc(dword_10020DD34);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020DD30 + dword_10020DD30))(v2, v3, v4);
}

unint64_t sub_1000CE1F0()
{
  return 0xD000000000000013LL;
}

os_log_s *sub_1000CE20C(void *a1)
{
  aBlock = 0LL;
  v45[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v40 = sub_1000B8C38(v2, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unsigned int v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void **)swift_slowAlloc(32LL, -1LL);
    aBlock = v6;
    *(_DWORD *)unsigned int v5 = 136315138;
    uint64_t v43 = sub_100103438(0xD000000000000033LL, 0x800000010016DED0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &aBlock);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeletedDeviceListProvider - Begin fetching deleted devices from cache for query %s",  v5,  0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = swift_allocObject(&unk_1001CBA30, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  NSString v8 = String._bridgeToObjectiveC()();
  id v42 = [(id)objc_opt_self(AKSQLiteQuery) queryWithString:v8];

  uint64_t v9 = sub_1000B86DC(&qword_10020E1A0);
  uint64_t v10 = swift_allocObject(v9, 64LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
  id v11 = [a1 altDSID];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  *(void *)(v10 + 56) = sub_1000B86DC(&qword_10020D858);
  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v15;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  aBlock = 0LL;
  unint64_t v17 = v42;
  [v42 bindParameters:isa error:&aBlock];

  uint64_t v18 = aBlock;
  v45[3] = sub_1000D04F0;
  uint64_t v46 = v7;
  aBlock = _NSConcreteStackBlock;
  v45[0] = 1107296256LL;
  v45[1] = sub_1000DCDD0;
  v45[2] = &unk_1001CBA48;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = v46;
  os_log_type_t v21 = v18;
  swift_retain(v7);
  swift_release(v20);
  [v42 setRowHandler:v19];
  _Block_release(v19);
  unint64_t v22 = *(void **)(v41 + 16);
  aBlock = 0LL;
  unsigned int v23 = [v22 performQuery:v42 error:&aBlock];
  uint64_t v24 = aBlock;
  if (v23)
  {
    unint64_t v25 = (os_log_s *)Logger.logObject.getter(aBlock);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "DeletedDeviceListProvider - Finished fetching deleted devices from cache",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    swift_beginAccess(v7 + 16, &aBlock, 0LL, 0LL);
    uint64_t v28 = *(os_log_s **)(v7 + 16);
    swift_bridgeObjectRetain(v28);

    swift_release(v7);
  }

  else
  {
    uint64_t v29 = aBlock;
    uint64_t v30 = _convertNSErrorToError(_:)(v24);

    swift_willThrow(v31);
    swift_errorRetain(v30);
    uint64_t v32 = swift_errorRetain(v30);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v34 = 138412290;
      swift_errorRetain(v30);
      NSString v36 = (void **)_swift_stdlib_bridgeErrorToNSError(v30);
      aBlock = v36;
      unint64_t v17 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v45);
      *uint64_t v35 = v36;
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v28, v33, "Error %@ fetching deleted devices from cache", v34, 0xCu);
      uint64_t v37 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v35, 1LL, v37);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }

    swift_willThrow(v38);
    swift_release(v7);
  }

  return v28;
}

uint64_t sub_1000CE7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = sub_1000F4970((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v57 = v4;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceMachineIdKey);
  uint64_t v7 = v6;
  NSString v8 = (void *)objc_opt_self(&OBJC_CLASS___AKSQLiteHelper);
  id v9 = [v8 stringFromColumn:0 inStatement:a1];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    os_log_type_t v56 = &type metadata for String;
    *(void *)&__int128 v55 = v11;
    *((void *)&v55 + 1) = v13;
    sub_1000B8EB0(&v55, v54);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    unint64_t v50 = v4;
    unint64_t v57 = 0x8000000000000000LL;
    sub_1000F0D24(v54, v5, v7, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = v57;
    unint64_t v57 = v50;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    sub_1000DFB2C(v5, v7, &v55);
    swift_bridgeObjectRelease(v7);
    sub_1000BE490((uint64_t)&v55);
  }

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceRemovalReasonKey);
  uint64_t v18 = v17;
  id v19 = [v8 integerFromColumn:1 inStatement:a1];
  os_log_type_t v56 = (void *)sub_1000D0510(0LL, &qword_10020DE50, &OBJC_CLASS___NSNumber_ptr);
  *(void *)&__int128 v55 = v19;
  sub_1000B8EB0(&v55, v54);
  unint64_t v20 = v57;
  char v21 = swift_isUniquelyReferenced_nonNull_native(v57);
  unint64_t v51 = v20;
  unint64_t v57 = 0x8000000000000000LL;
  sub_1000F0D24(v54, v16, v18, v21);
  unint64_t v22 = v57;
  unint64_t v57 = v51;
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceLastUpdatedDateKey);
  uint64_t v25 = v24;
  id v26 = [v8 doubleFromColumn:2 inStatement:a1];
  [v26 doubleValue];
  double v28 = v27;

  os_log_type_t v56 = &type metadata for Double;
  *(double *)&__int128 v55 = v28 * 1000.0;
  sub_1000B8EB0(&v55, v54);
  unint64_t v29 = v57;
  char v30 = swift_isUniquelyReferenced_nonNull_native(v57);
  unint64_t v52 = v29;
  unint64_t v57 = 0x8000000000000000LL;
  sub_1000F0D24(v54, v23, v25, v30);
  unint64_t v31 = v57;
  unint64_t v57 = v52;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceDeletedDateKey);
  uint64_t v34 = v33;
  id v35 = [v8 doubleFromColumn:4 inStatement:a1];
  [v35 doubleValue];
  double v37 = v36;

  os_log_type_t v56 = &type metadata for Double;
  *(double *)&__int128 v55 = v37 * 1000.0;
  sub_1000B8EB0(&v55, v54);
  unint64_t v38 = v57;
  char v39 = swift_isUniquelyReferenced_nonNull_native(v57);
  unint64_t v53 = v38;
  unint64_t v57 = 0x8000000000000000LL;
  sub_1000F0D24(v54, v32, v34, v39);
  unint64_t v40 = v57;
  unint64_t v57 = v53;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v40);
  id v41 = [v8 stringFromColumn:3 inStatement:a1];
  if (!v41) {
    return swift_bridgeObjectRelease(v57);
  }
  id v42 = (void *)(a3 + 16);

  unint64_t v43 = v57;
  swift_beginAccess(a3 + 16, &v55, 33LL, 0LL);
  uint64_t v44 = *(void **)(a3 + 16);
  char v45 = swift_isUniquelyReferenced_nonNull_native(v44);
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = v44;
  if ((v45 & 1) == 0)
  {
    uint64_t v44 = sub_1000EB8B0(0LL, v44[2] + 1LL, 1, v44);
    *id v42 = v44;
  }

  unint64_t v47 = v44[2];
  unint64_t v46 = v44[3];
  if (v47 >= v46 >> 1)
  {
    uint64_t v44 = sub_1000EB8B0((void *)(v46 > 1), v47 + 1, 1, v44);
    *id v42 = v44;
  }

  v44[2] = v47 + 1;
  v44[v47 + 4] = v43;
  return swift_endAccess(&v55);
}

uint64_t sub_1000CEC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  void v4[5] = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_1000B86DC(&qword_10020D1D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[11] = swift_task_alloc(v7);
  v4[12] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000CECA8, 0LL, 0LL);
}

uint64_t sub_1000CECA8()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 104) = sub_1000B8C38(v2, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 32);
  if (v5)
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v7 = 138412290;
    *(void *)(v0 + 24) = v6;
    id v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *uint64_t v54 = v6;

    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeletedDeviceListProvider - Begin saving deleted device %@",  v7,  0xCu);
    uint64_t v9 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v54, 1LL, v9);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  id v10 = [*(id *)(v0 + 32) lastUpdatedDate];
  uint64_t v11 = *(void *)(v0 + 96);
  if (!v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 72) + 56LL))( *(void *)(v0 + 96),  1LL,  1LL,  *(void *)(v0 + 64));
    goto LABEL_17;
  }

  uint64_t v12 = v10;
  uint64_t v14 = *(void **)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 64);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v14[4];
  v16(v11, v13, v15);
  uint64_t v6 = (void *)v14[7];
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v6)(v11, 0LL, 1LL, v15);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14[6];
  uint64_t v18 = v17(v11, 1LL, v15);
  if ((_DWORD)v18 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 64);
  uint64_t v21 = *(void *)(v0 + 72);
  unint64_t v22 = *(void **)(v0 + 32);
  double v23 = Date.timeIntervalSince1970.getter(v18);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v24(v19, v20);
  id v25 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v23];
  *(void *)(v0 + 112) = v25;
  id v26 = [v22 deletedDate];
  uint64_t v11 = *(void *)(v0 + 88);
  if (!v26)
  {
LABEL_18:
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v6)(v11, 1LL, 1LL, *(void *)(v0 + 64));
    goto LABEL_19;
  }

  double v27 = v26;
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v29 = *(void *)(v0 + 64);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v16(v11, v28, v29);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v6)(v11, 0LL, 1LL, v29);
  uint64_t result = v17(v11, 1LL, v29);
  if ((_DWORD)result != 1)
  {
    uint64_t v31 = *(void *)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v33 = *(void **)(v0 + 32);
    double v34 = Date.timeIntervalSince1970.getter(result);
    v24(v31, v32);
    id v35 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v34];
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v35;
    uint64_t v36 = sub_1000B86DC(&qword_10020E1A0);
    uint64_t v37 = swift_allocObject(v36, 192LL, 7LL);
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v37;
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_100163DE0;
    id v38 = [v33 machineId];
    if (v38)
    {
      char v39 = v38;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      unint64_t v42 = v41;

      *(void *)(v37 + 56) = &type metadata for String;
      if (v42)
      {
LABEL_15:
        uint64_t v44 = *(void *)(v0 + 40);
        uint64_t v43 = *(void *)(v0 + 48);
        char v45 = *(void **)(v0 + 32);
        *(void *)(v37 + 32) = v40;
        *(void *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v42;
        id v46 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v45, "removalReason"));
        *(void *)(v37 + 8_Block_object_dispose(&a9, 8) = sub_1000D0510(0LL, &qword_10020DE50, &OBJC_CLASS___NSNumber_ptr);
        *(void *)(v37 + 64) = v46;
        uint64_t v47 = sub_1000D0510(0LL, &qword_10020DE58, &OBJC_CLASS___NSDecimalNumber_ptr);
        *(void *)(v37 + 96) = v25;
        *(void *)(v37 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v47;
        *(void *)(v37 + 12_Block_object_dispose(&a9, 8) = v44;
        *(void *)(v37 + 136) = v43;
        *(void *)(v37 + 184) = v47;
        *(void *)(v37 + 152) = &type metadata for String;
        *(void *)(v37 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v35;
        id v48 = v25;
        swift_bridgeObjectRetain(v43);
        id v49 = v35;
        _StringGuts.grow(_:)(105LL);
        v50._countAndFlagsBits = 0xD000000000000017LL;
        v50._object = (void *)0x800000010016DE30LL;
        String.append(_:)(v50);
        v51._object = (void *)0x800000010016DE50LL;
        v51._countAndFlagsBits = 0xD000000000000013LL;
        String.append(_:)(v51);
        v52._countAndFlagsBits = 0xD000000000000050LL;
        v52._object = (void *)0x800000010016DE70LL;
        String.append(_:)(v52);
        *(void *)(v0 + 136) = 0xE000000000000000LL;
        unint64_t v53 = (void *)swift_task_alloc(dword_10020D7AC);
        *(void *)(v0 + 144) = v53;
        void *v53 = v0;
        v53[1] = sub_1000CF1C8;
        return sub_1000BEA60(0LL, 0xE000000000000000LL, v37);
      }

      uint64_t v40 = 0LL;
    }

    else
    {
      uint64_t v40 = 0LL;
      *(void *)(v37 + 56) = &type metadata for String;
    }

    unint64_t v42 = 0xE000000000000000LL;
    goto LABEL_15;
  }

uint64_t sub_1000CF1C8(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 136);
  uint64_t v4 = *(void *)(*v2 + 144);
  uint64_t v6 = *(void *)(*v2 + 128);
  *(_BYTE *)(v3 + 164) = a1;
  *(void *)(v3 + 152) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  if (v1) {
    unint64_t v7 = sub_1000CF42C;
  }
  else {
    unint64_t v7 = sub_1000CF254;
  }
  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_1000CF254()
{
  uint64_t v1 = (void **)(v0 + 32);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 32));
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v15 = *(unsigned __int8 *)(v0 + 164);
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = swift_slowAlloc(18LL, -1LL);
    uint64_t v14 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412546;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v4;
    id v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    void *v14 = v4;

    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 164);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "DeletedDeviceListProvider - Finished saving deleted device %@ with success: %{BOOL}d",  (uint8_t *)v5,  0x12u);
    uint64_t v7 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v14, 1LL, v7);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
    uint64_t v1 = (void **)(v0 + 112);
  }

  else
  {

    uint64_t v2 = *(os_log_s **)(v0 + 112);
  }

  id v8 = *v1;
  uint64_t v9 = *(void **)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 80);

  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF42C()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF48C(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000CF4A4, 0LL, 0LL);
}

uint64_t sub_1000CF4A4()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeletedDeviceListProvider - Begin clearing stale deleted devices",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v6 = *(void **)(v0 + 16);

  id v7 = [v6 allAuthKitAccounts];
  if (!v7)
  {
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "DeletedDeviceListProvider - No IdMS accounts found. Ineligible for clearing cache.",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  id v8 = v7;
  uint64_t v9 = sub_1000D0510(0LL, &qword_10020DE60, &OBJC_CLASS___ACAccount_ptr);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
  *(void *)(v0 + 32) = v10;

  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v10);
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v23;
    if (v23) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v11;
  if (!v11)
  {
LABEL_19:
    swift_bridgeObjectRelease(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000CF718()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 32));
    os_log_type_t v4 = sub_1000CF858;
  }

  else
  {
    os_log_type_t v4 = sub_1000CF784;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

id sub_1000CF784()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);

  if (v1 == v2)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 32));
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 32);
    if ((v5 & 0xC000000000000001LL) != 0) {
      id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(void *)(v0 + 56), v5);
    }
    else {
      id result = *(id *)(v5 + 8 * v4 + 32);
    }
    id v6 = result;
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = result;
    *(void *)(v0 + 56) = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
    }

    else
    {
      id v7 = (void *)swift_task_alloc(dword_10020DE6C);
      *(void *)(v0 + 64) = v7;
      *id v7 = v0;
      v7[1] = sub_1000CF718;
      uint64_t v9 = *(void *)(v0 + 16);
      uint64_t v8 = *(void *)(v0 + 24);
      void v7[4] = v6;
      void v7[5] = v8;
      v7[3] = v9;
      return (id)swift_task_switch(sub_1000CF8A8, 0LL, 0LL);
    }
  }

  return result;
}

uint64_t sub_1000CF858()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF88C(uint64_t a1, uint64_t a2)
{
  void v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_1000CF8A8, 0LL, 0LL);
}

uint64_t sub_1000CF8A8()
{
  id v1 = [*(id *)(v0 + 24) altDSIDForAccount:*(void *)(v0 + 32)];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void **)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v7 = v6;

    id v8 = [v4 deletedDevicesCacheExpiryOffsetForAccount:v3];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v12 = v11;
    }

    else
    {
      uint64_t v12 = (void *)0xE200000000000000LL;
      uint64_t v10 = 13361LL;
    }

    _StringGuts.grow(_:)(95LL);
    v22._countAndFlagsBits = 0x46204554454C4544LL;
    v22._object = (void *)0xEC000000204D4F52LL;
    String.append(_:)(v22);
    v23._object = (void *)0x800000010016DE50LL;
    v23._countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0xD000000000000048LL;
    v24._object = (void *)0x800000010016DF20LL;
    String.append(_:)(v24);
    v25._countAndFlagsBits = v10;
    v25._object = v12;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v12);
    v26._countAndFlagsBits = 0x29292779616420LL;
    v26._object = (void *)0xE700000000000000LL;
    String.append(_:)(v26);
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = 0xE000000000000000LL;
    uint64_t v27 = sub_1000B86DC(&qword_10020E1A0);
    uint64_t v28 = swift_allocObject(v27, 64LL, 7LL);
    *(void *)(v0 + 56) = v28;
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 32) = v5;
    *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v7;
    uint64_t v29 = (void *)swift_task_alloc(dword_10020D7AC);
    *(void *)(v0 + 64) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1000CFC04;
    return sub_1000BEA60(0LL, 0xE000000000000000LL, v28);
  }

  else
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    id v13 = *(void **)(v0 + 32);
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v14, (uint64_t)qword_100210FD8);
    os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void **)(v0 + 32);
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v19 = 138412290;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v18;
      id v20 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      void *v31 = v18;

      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "DeletedDeviceListProvider - Account %@ is missing altDSID. Ineligible for clearing cache.",  v19,  0xCu);
      uint64_t v21 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v31, 1LL, v21);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000CFC04(char a1)
{
  uint64_t v3 = *(void *)(*v2 + 64);
  uint64_t v4 = *v2;
  *(_BYTE *)(v4 + 76) = a1;
  swift_task_dealloc(v3);
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v5 = *(void *)(v4 + 56);
  if (v1)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    return swift_task_switch(sub_1000CFCA8, 0LL, 0LL);
  }

uint64_t sub_1000CFCA8()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = *(unsigned __int8 *)(v0 + 76);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 67109120;
    *(_DWORD *)(v0 + 72) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 76);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeletedDeviceListProvider - Finished clearing cache with success: %{BOOL}d",  v6,  8u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DeletedDeviceListProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd25DeletedDeviceListProvider);
}

uint64_t sub_1000CFDE8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000CFE08(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1000CFE2C@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000CFE54(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000CFE6C, 0LL, 0LL);
}

void sub_1000CFE6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  uint64_t v3 = 1LL << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  int64_t v6 = 0LL;
  if (v5) {
    goto LABEL_26;
  }
LABEL_7:
  int64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  int64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v0 + 120)) + 63) >> 6;
  uint64_t v9 = *(void *)(v0 + 16);
  if (v7 >= v8)
  {
LABEL_31:
    swift_release(v9);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v10 = v9 + 64;
  unint64_t v11 = *(void *)(v9 + 64 + 8 * v7);
  ++v6;
  if (!v11)
  {
    int64_t v6 = v7 + 1;
    if (v7 + 1 >= v8) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (!v11)
    {
      int64_t v6 = v7 + 2;
      if (v7 + 2 >= v8) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v10 + 8 * v6);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v12 < v8)
        {
          unint64_t v11 = *(void *)(v10 + 8 * v12);
          if (v11)
          {
            int64_t v6 = v12;
            goto LABEL_20;
          }

          while (1)
          {
            int64_t v6 = v12 + 1;
            if (__OFADD__(v12, 1LL)) {
              break;
            }
            if (v6 >= v8) {
              goto LABEL_31;
            }
            unint64_t v11 = *(void *)(v10 + 8 * v6);
            ++v12;
            if (v11) {
              goto LABEL_20;
            }
          }

LABEL_37:
          __break(1u);
          return;
        }

        goto LABEL_31;
      }
    }
  }

              __break(1u);
LABEL_38:
              __break(1u);
              return;
            }

            unint64_t v5 = v14;
          }
        }
      }

          __break(1u);
          return;
        }

        goto LABEL_31;
      }
    }
  }

              __break(1u);
LABEL_38:
              __break(1u);
              return;
            }

            unint64_t v5 = v14;
          }
        }
      }

uint64_t sub_1000D013C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 56);
    swift_bridgeObjectRelease(*(void *)(v2 + 72));
    swift_bridgeObjectRelease(v4);
    unint64_t v5 = sub_1000D0484;
  }

  else
  {
    unint64_t v5 = sub_1000D01B4;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_1000D01B4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);

  if (v1 == v2)
  {
LABEL_2:
    uint64_t v4 = *(void **)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 72);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(v3);

    int64_t v5 = *(void *)(v0 + 32);
    unint64_t v6 = *(void *)(v0 + 40);
    if (v6)
    {
LABEL_3:
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v5 << 6);
      uint64_t v9 = *(void *)(v0 + 16);
      goto LABEL_18;
    }

    while (1)
    {
      int64_t v10 = v5 + 1;
      if (__OFADD__(v5, 1LL))
      {
        __break(1u);
        goto LABEL_37;
      }

      int64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v0 + 120)) + 63) >> 6;
      uint64_t v9 = *(void *)(v0 + 16);
      if (v10 >= v11) {
        goto LABEL_32;
      }
      uint64_t v12 = v9 + 64;
      unint64_t v13 = *(void *)(v9 + 64 + 8 * v10);
      ++v5;
      if (!v13)
      {
        int64_t v5 = v10 + 1;
        if (v10 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v12 + 8 * v5);
        if (!v13)
        {
          int64_t v5 = v10 + 2;
          if (v10 + 2 >= v11) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v12 + 8 * v5);
          if (!v13)
          {
            int64_t v14 = v10 + 3;
            if (v14 >= v11)
            {
LABEL_32:
              swift_release(v9);
              (*(void (**)(void))(v0 + 8))();
              return;
            }

            unint64_t v13 = *(void *)(v12 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v5 = v14 + 1;
                if (__OFADD__(v14, 1LL)) {
                  break;
                }
                if (v5 >= v11) {
                  goto LABEL_32;
                }
                unint64_t v13 = *(void *)(v12 + 8 * v5);
                ++v14;
                if (v13) {
                  goto LABEL_17;
                }
              }

uint64_t sub_1000D0484()
{
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 16);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D04CC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D04F0(uint64_t a1, uint64_t a2)
{
  return sub_1000CE7D4(a1, a2, v2);
}

uint64_t sub_1000D04F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D0508(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000D0510(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1000D0548()
{
  sub_1000BC7D4((void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  sub_1000BC7D4((void *)(v0 + 72));
  sub_1000BC7D4((void *)(v0 + 112));
  sub_1000BC7D4((void *)(v0 + 152));
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t type metadata accessor for SharedGroupsSyncController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd26SharedGroupsSyncController);
}

uint64_t Logger.akd.unsafeMutableAddressor()
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return sub_1000B8C38(v0, (uint64_t)static Logger.akd);
}

uint64_t sub_1000D05FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1000D06E8(v0, static Logger.akd);
  sub_1000B8C38(v0, (uint64_t)static Logger.akd);
  uint64_t v1 = qword_10020DF38;
  uint64_t v2 = off_10020DF40;
  swift_bridgeObjectRetain(off_10020DF40);
  return Logger.init(subsystem:category:)(v1, v2, 1701998435LL, 0xE400000000000000LL);
}

uint64_t static Logger.akd.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10020CF80 != -1) {
    swift_once(&qword_10020CF80, sub_1000D05FC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000B8C38(v2, (uint64_t)static Logger.akd);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t *sub_1000D06E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_1000D0728(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    unint64_t v11 = sub_1000D1E28();
    **(void **)(*(void *)(v3 + 64) + 40LL) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000D07C0(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(sub_1000D07D8, 0LL, 0LL);
}

uint64_t sub_1000D07D8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[5] = sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v9;
    *(_DWORD *)id v8 = 136315138;
    uint64_t v10 = swift_bridgeObjectRetain(v7);
    uint64_t v11 = Set.description.getter(v10, &type metadata for String, &protocol witness table for String);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[2] = sub_100103438(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Rotating share tokens for accounts in groups - %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v14 = swift_task_alloc(dword_10020E024);
  v0[6] = v14;
  *(void *)uint64_t v14 = v0;
  *(void *)(v14 + _Block_object_dispose(&a9, 8) = sub_1000D09FC;
  *(_OWORD *)(v14 + 12_Block_object_dispose(&a9, 8) = *(_OWORD *)(v0 + 3);
  return swift_task_switch(sub_1000D0F00, 0LL, 0LL);
}

uint64_t sub_1000D09FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 48);
  uint64_t v4 = *v2;
  *(void *)(v4 + 56) = a1;
  swift_task_dealloc(v3);
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return swift_task_switch(sub_1000D0A70, 0LL, 0LL);
  }
}

uint64_t sub_1000D0A70()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (*(void *)(v1 + 16))
  {
    sub_1000BC7B0((void *)(*(void *)(v0 + 32) + 72LL), *(void *)(*(void *)(v0 + 32) + 96LL));
    uint64_t v2 = (void *)swift_task_alloc(dword_10020DCAC);
    *(void *)(v0 + 64) = v2;
    void *v2 = v0;
    v2[1] = sub_1000D0B74;
    return sub_1000CB04C(*(void *)(v0 + 56));
  }

  else
  {
    uint64_t v4 = swift_bridgeObjectRelease(v1);
    os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No SIWA accounts found in the departed groups.", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000D0B74(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    os_log_type_t v6 = sub_1000D0DD0;
  }

  else
  {
    *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
    os_log_type_t v6 = sub_1000D0BE8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D0BE8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[11] = v4;
  void v4[2] = v1;
  void v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[12] = v5;
  void *v5 = v0;
  v5[1] = sub_1000D0C88;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000D0C88()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000D0D04, 0LL, 0LL);
}

uint64_t sub_1000D0D04()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10020EA9C);
  *(void *)(v0 + 104) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D0D5C;
  return sub_1000EC6D8();
}

uint64_t sub_1000D0D5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 104);
  uint64_t v4 = *v2;
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return swift_task_switch(sub_1000D0E04, 0LL, 0LL);
  }
}

uint64_t sub_1000D0DD0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D0E04()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  sub_1000BC7B0((void *)(*(void *)(v0 + 32) + 24LL), *(void *)(*(void *)(v0 + 32) + 48LL));
  sub_1000EC8D8(v1);
  if (v2)
  {

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Token rotation complete", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v4();
}

uint64_t sub_1000D0EE8(uint64_t a1)
{
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_1000D0F00, 0LL, 0LL);
}

uint64_t sub_1000D0F00()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[17] + 64LL);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000D0F98;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000D0728;
  void v4[3] = &unk_1001CBB00;
  v4[4] = v3;
  [v2 fetchAllSharedAccountsWithShareTokenWithCompletionHandler:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1000D0F98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 144LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000D1498;
  }
  else {
    uint64_t v2 = sub_1000D0FF8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

void sub_1000D0FF8()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      return;
    }

    uint64_t v3 = 0LL;
    unint64_t v45 = v1 & 0xC000000000000001LL;
    uint64_t v43 = &_swiftEmptyDictionarySingleton;
    uint64_t v41 = v1;
    unint64_t v42 = v0;
    uint64_t v44 = v2;
    while (1)
    {
      if (v45) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      }
      else {
        id v4 = *(id *)(v1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = [v4 shareInfo];
      if (!v6)
      {
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v24 = type metadata accessor for Logger(0LL);
        sub_1000B8C38(v24, (uint64_t)qword_100210FF0);
        id v25 = v5;
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc(12LL, -1LL);
          uint64_t v29 = swift_slowAlloc(32LL, -1LL);
          id v46 = (void *)v29;
          *(_DWORD *)uint64_t v28 = 136315138;
          id v30 = [v25 clientID];
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          unint64_t v33 = v32;

          *(void *)(v28 + 4) = sub_100103438(v31, v33, (uint64_t *)&v46);
          unint64_t v34 = v33;
          uint64_t v1 = v41;
          uint64_t v0 = v42;
          swift_bridgeObjectRelease(v34);

          _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Shared SIWA account (%s) with nil share info. Skipping...",  (uint8_t *)v28,  0xCu);
          swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v29, -1LL, -1LL);
          swift_slowDealloc(v28, -1LL, -1LL);
        }

        else
        {
        }

        goto LABEL_30;
      }

      uint64_t v7 = v6;
      uint64_t v8 = v0[16];
      id v9 = [v6 groupID];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      LOBYTE(v9) = sub_1000ECD34(v10, v12, v8);
      swift_bridgeObjectRelease(v12);
      if ((v9 & 1) != 0)
      {
      }

LABEL_6:
      if (v2 == ++v3) {
        goto LABEL_39;
      }
    }

    uint64_t v0 = [v5 clientID];
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    uint64_t v14 = v13;

    id v15 = v5;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
    id v46 = v43;
    unint64_t v18 = sub_1000F9BB8(v1, v14);
    uint64_t v19 = v43[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (!__OFADD__(v19, v20))
    {
      uint64_t v0 = v17;
      if (v43[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
        }

        else
        {
          sub_1000F16F0();
          uint64_t v43 = v46;
        }
      }

      else
      {
        sub_1000F06FC(v21, isUniquelyReferenced_nonNull_native);
        uint64_t v43 = v46;
        unint64_t v22 = sub_1000F9BB8(v1, v14);
        if ((v0 & 1) != (v23 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          return;
        }

        unint64_t v18 = v22;
        if ((v0 & 1) == 0)
        {
LABEL_27:
          v43[(v18 >> 6) + 8] |= 1LL << v18;
          uint64_t v36 = (uint64_t *)(v43[6] + 16 * v18);
          uint64_t *v36 = v1;
          v36[1] = v14;
          *(void *)(v43[7] + 8 * v1_Block_object_dispose(&a9, 8) = v15;
          uint64_t v37 = v43[2];
          BOOL v38 = __OFADD__(v37, 1LL);
          uint64_t v39 = v37 + 1;
          if (v38) {
            goto LABEL_33;
          }
          v43[2] = v39;
          swift_bridgeObjectRetain(v14);
LABEL_29:
          swift_bridgeObjectRelease(0x8000000000000000LL);
          swift_bridgeObjectRelease(v14);

          uint64_t v1 = v41;
          uint64_t v0 = v42;
LABEL_30:
          uint64_t v2 = v44;
          goto LABEL_6;
        }
      }

      uint64_t v35 = v43[7];

      *(void *)(v35 + 8 * v1_Block_object_dispose(&a9, 8) = v15;
      goto LABEL_29;
    }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    if (v1 < 0) {
      uint64_t v40 = v1;
    }
    else {
      uint64_t v40 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v1);
  }

  uint64_t v43 = &_swiftEmptyDictionarySingleton;
LABEL_39:
  swift_bridgeObjectRelease(v1);
  ((void (*)(void *))v0[1])(v43);
}

uint64_t sub_1000D1498()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D14D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  unint64_t v6 = (*(void *)(*(void *)(sub_1000B86DC(&qword_10020D450) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v6);
  v5[14] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000D1544, 0LL, 0LL);
}

uint64_t sub_1000D1544()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v44 = *(void *)(v0 + 80);
    }
    else {
      uint64_t v44 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 80));
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v44);
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    uint64_t v45 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(*(void *)(v0 + 80));
  if (!v2) {
    goto LABEL_30;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v48 = v0 + 48;
    id v46 = (void *)(v0 + 16);
    uint64_t v5 = *(void *)(v0 + 88);
    unint64_t v55 = v1 & 0xC000000000000001LL;
    uint64_t v50 = *(void *)(v0 + 80) + 32LL;
    uint64_t v47 = v0;
    uint64_t v54 = v5;
    uint64_t v49 = v2;
    while (1)
    {
      if (v55) {
        unint64_t v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(void *)(v0 + 80));
      }
      else {
        unint64_t v6 = (char *)*(id *)(v50 + 8 * v4);
      }
      uint64_t v7 = v6;
      uint64_t v8 = (uint64_t *)&v6[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
      if (!*(void *)(v5 + 16)) {
        goto LABEL_15;
      }
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      swift_bridgeObjectRetain(v9);
      unint64_t v11 = sub_1000F9BB8(v10, v9);
      if ((v12 & 1) == 0) {
        break;
      }
      uint64_t v13 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 112);
      uint64_t v52 = *(void *)(v0 + 96);
      id v15 = *(id *)(*(void *)(v5 + 56) + 8 * v11);
      swift_bridgeObjectRelease(v9);
      uint64_t v16 = type metadata accessor for TaskPriority(0LL);
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v14, 1LL, 1LL, v16);
      unint64_t v18 = (void *)swift_allocObject(&unk_1001CBAE8, 56LL, 7LL);
      void v18[2] = 0LL;
      uint64_t v19 = v18 + 2;
      v18[3] = 0LL;
      void v18[4] = v52;
      v18[5] = v15;
      v18[6] = v7;
      sub_1000D1CAC(v14, v13);
      uint64_t v51 = v17;
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v13, 1LL, v16);
      id v53 = v15;
      id v20 = v7;
      uint64_t v21 = swift_retain(v52);
      uint64_t v22 = *(void *)(v47 + 104);
      if ((_DWORD)v13 == 1)
      {
        sub_1000D1CF4(*(void *)(v47 + 104));
        uint64_t v23 = 0LL;
      }

      else
      {
        unsigned __int8 v33 = TaskPriority.rawValue.getter(v21);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v22, v16);
        uint64_t v23 = v33;
      }

      uint64_t v34 = *v19;
      uint64_t v0 = v47;
      if (*v19)
      {
        uint64_t v35 = v18[3];
        uint64_t ObjectType = swift_getObjectType(*v19);
        swift_unknownObjectRetain(v34);
        uint64_t v37 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v35);
        uint64_t v39 = v38;
        swift_unknownObjectRelease(v34);
      }

      else
      {
        uint64_t v37 = 0LL;
        uint64_t v39 = 0LL;
      }

      uint64_t v40 = **(void **)(v47 + 72);
      uint64_t v41 = (void *)(v39 | v37);
      if (v39 | v37)
      {
        uint64_t v41 = v46;
        *id v46 = 0LL;
        v46[1] = 0LL;
        *(void *)(v47 + 32) = v37;
        *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v39;
      }

      uint64_t v2 = v49;
      uint64_t v42 = *(void *)(v47 + 112);
      *(void *)(v47 + 4_Block_object_dispose(&a9, 8) = 1LL;
      *(void *)(v47 + 56) = v41;
      *(void *)(v47 + 64) = v40;
      uint64_t v43 = swift_task_create(v23 | 0x3100, v48, (char *)&type metadata for () + 8, &unk_10020E040, v18);

      swift_release(v43);
      sub_1000D1CF4(v42);
      uint64_t v5 = v54;
LABEL_6:
      if (v2 == ++v4) {
        goto LABEL_30;
      }
    }

    swift_bridgeObjectRelease(v9);
LABEL_15:
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v24, (uint64_t)qword_100210FF0);
    id v25 = v7;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = *v8;
      unint64_t v31 = v8[1];
      swift_bridgeObjectRetain(v31);
      *(void *)(v28 + 4) = sub_100103438(v30, v31, &v56);

      swift_bridgeObjectRelease(v31);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "No matching account found with bundleID %s",  (uint8_t *)v28,  0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v32 = v28;
      uint64_t v5 = v54;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_6;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D19B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch(sub_1000D1A20, 0LL, 0LL);
}

uint64_t sub_1000D1A20()
{
  uint64_t v1 = *(void **)(v0[3] + 64LL);
  v0[2] = 0LL;
  unsigned int v2 = [v1 removeSharedAccount:v0[4] error:v0 + 2];
  uint64_t v3 = (void *)v0[2];
  if (v2
    && (uint64_t v4 = v0[5],
        v0[2] = 0LL,
        id v5 = v3,
        unsigned int v6 = [v1 addSharedAccountWithCredential:v4 error:v0 + 2],
        uint64_t v3 = (void *)v0[2],
        v6))
  {
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    id v7 = v3;
    uint64_t v8 = v11;
  }

  else
  {
    id v9 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
  }

  return v8();
}

uint64_t sub_1000D1B30()
{
  sub_1000BC7D4((void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  sub_1000BC7D4((void *)(v0 + 72));
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for SharedAccountsTokenRotationController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd37SharedAccountsTokenRotationController);
}

uint64_t sub_1000D1B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  id v9 = (void *)swift_task_alloc(dword_10020E02C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  *id v9 = v3;
  v9[1] = sub_1000B87BC;
  return sub_1000D14D4(a1, a2, v6, v7, v8);
}

uint64_t sub_1000D1C08()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000D1C44()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_10020E03C);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + _Block_object_dispose(&a9, 8) = sub_1000B9420;
  *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return swift_task_switch(sub_1000D1A20, 0LL, 0LL);
}

uint64_t sub_1000D1CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B86DC(&qword_10020D450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D1CF4(uint64_t a1)
{
  uint64_t v2 = sub_1000B86DC(&qword_10020D450);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void (*sub_1000D1D34( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000D1DB4(v6, a2, a3);
  return sub_1000D1D88;
}

void sub_1000D1D88(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_1000D1DB4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000D1E20;
  }

  __break(1u);
  return result;
}

void sub_1000D1E20(id *a1)
{
}

unint64_t sub_1000D1E28()
{
  unint64_t result = qword_10020E6F0;
  if (!qword_10020E6F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AKSignInWithAppleAccount);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10020E6F0);
  }

  return result;
}

uint64_t AppleIDPasskeyDaemonService.serviceName.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AKAppleIDPasskeyMachService);
}

__objc2_prot *AppleIDPasskeyDaemonService.exportedProtocol.getter()
{
  return &OBJC_PROTOCOL___AKAppleIDPasskeyDaemonProtocol;
}

id AppleIDPasskeyDaemonService.exportedObject.getter@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for AppleIDPasskeyDaemonService();
  *a1 = v3;
  return v3;
}

uint64_t type metadata accessor for AppleIDPasskeyDaemonService()
{
  return objc_opt_self(&OBJC_CLASS___AKAppleIDPasskeyDaemonService);
}

Swift::Bool __swiftcall AppleIDPasskeyDaemonService.shouldAcceptNewConnection(_:)(NSXPCConnection *a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  unsigned int v3 = -[NSXPCConnection shouldAcceptNewConnection:](&v7, "shouldAcceptNewConnection:", a1);
  if (v3)
  {
    id v4 = [objc_allocWithZone((Class)AKClient) initWithConnection:a1];
    id v5 = *(void **)&v1[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client];
    *(void *)&v1[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client] = v4;
  }

  return v3;
}

id AppleIDPasskeyDaemonService.init()()
{
  *(void *)&v0[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client] = 0LL;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  return objc_msgSendSuper2(&v2, "init");
}

id AppleIDPasskeyDaemonService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AppleIDPasskeyDaemonService.setupAppleIDPasskey(with:)()
{
  unsigned int v3 = (uint64_t (__cdecl *)())((char *)&dword_10020E0C0 + dword_10020E0C0);
  uint64_t v1 = (void *)swift_task_alloc(unk_10020E0C4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D21C0;
  return v3();
}

uint64_t sub_1000D21C0(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000D234C(int a1, void *aBlock)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = _Block_copy(aBlock);
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10020E0C0 + dword_10020E0C0);
  unsigned int v3 = (void *)swift_task_alloc(unk_10020E0C4);
  *(void *)(v2 + 24) = v3;
  *unsigned int v3 = v2;
  v3[1] = sub_1000D23B0;
  return v5();
}

uint64_t sub_1000D23B0(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 24);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v1)
  {
    objc_super v7 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    (*(void (**)(void, void, void))(v6 + 16))(*(void *)(v5 + 16), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t AppleIDPasskeyDaemonService.verifyAppleIDPasskey(with:)(uint64_t a1)
{
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  *(void *)(v2 + 4_Block_object_dispose(&a9, 8) = v1;
  return swift_task_switch(sub_1000D246C, 0LL, 0LL);
}

uint64_t sub_1000D246C()
{
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = v1;
  unsigned int v3 = *(void **)(v0 + 40);
  uint64_t v4 = *(void **)(*(void *)(v0 + 48) + OBJC_IVAR___AKAppleIDPasskeyDaemonService_client);
  id v5 = v4;
  uint64_t v6 = sub_1000DB680(v3, (uint64_t)v4);
  *(void *)(v0 + 64) = v6;

  objc_super v7 = (objc_class *)type metadata accessor for AppleIDPasskeyVerificationController();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyVerificationController_passkeyValidator] = v2;
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyVerificationController_verificationProvider] = v6;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v0 + 24) = v7;
  swift_unknownObjectRetain(v2);
  swift_unknownObjectRetain(v6);
  *(void *)(v0 + 72) = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  id v9 = (void *)swift_task_alloc(dword_10020E3FC);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
  *id v9 = v0;
  v9[1] = sub_1000D2730;
  return sub_1000DB228(*(void *)(v0 + 40));
}

uint64_t sub_1000D2730(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  *(void *)(*v2 + 8_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000D27F0;
  }

  else
  {
    *(void *)(v4 + 96) = a1;
    uint64_t v6 = sub_1000D27A4;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D27A4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);

  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 96));
}

uint64_t sub_1000D27F0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);

  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v2);
  uint64_t v3 = *(void *)(v0 + 88);
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v4, (uint64_t)qword_100211008);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v3);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(void *)(v0 + 32) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    *id v9 = v10;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Verify passkey failed with error: %@.", v8, 0xCu);
    uint64_t v11 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  swift_willThrow(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2AF8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020E0CC;
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *id v9 = v3;
  v9[1] = sub_1000D2B88;
  void v9[5] = v7;
  v9[6] = v8;
  return swift_task_switch(sub_1000D246C, 0LL, 0LL);
}

uint64_t sub_1000D2B88(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  id v8 = *(void **)(*v2 + 16);
  id v7 = *(void **)(*v2 + 24);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v11 = (void *)a1;
  }

  else if (a1)
  {
    sub_1000B86DC(&qword_10020D9A0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    a1 = 0LL;
    uint64_t v11 = isa;
  }

  else
  {
    Class isa = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v12)[2](v12, isa, a1);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t AppleIDPasskeyDaemonService.unenrollAppleIDPasskey(with:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10020E0E0 + dword_10020E0E0);
  uint64_t v1 = (void *)swift_task_alloc(unk_10020E0E4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D41A0;
  return v3();
}

uint64_t sub_1000D2E0C(int a1, void *aBlock)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = _Block_copy(aBlock);
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10020E0E0 + dword_10020E0E0);
  uint64_t v3 = (void *)swift_task_alloc(unk_10020E0E4);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000D419C;
  return v5();
}

uint64_t AppleIDPasskeyDaemonService.appleIDPasskeyStatus(with:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10020E0F0 + dword_10020E0F0);
  uint64_t v1 = (void *)swift_task_alloc(unk_10020E0F4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D2EC8;
  return v3();
}

uint64_t sub_1000D2EC8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000D304C(int a1, void *aBlock)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = _Block_copy(aBlock);
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10020E0F0 + dword_10020E0F0);
  uint64_t v3 = (void *)swift_task_alloc(unk_10020E0F4);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000D30B0;
  return v5();
}

uint64_t sub_1000D30B0(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 24);
  uint64_t v7 = *v2;
  swift_task_dealloc(v6);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v9 = (void *)a1;
  }

  else if (a1)
  {
    sub_1000B86DC(&qword_10020D9A0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    a1 = 0LL;
    uint64_t v9 = isa;
  }

  else
  {
    Class isa = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = *(void (***)(void, void, void))(v5 + 16);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, a1);

  _Block_release(v10);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000D3198( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000D31CC(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

_BYTE **sub_1000D31EC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  void *result = v4 + 1;
  return result;
}

void sub_1000D31FC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    *uint64_t v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

void _s3akd27AppleIDPasskeyDaemonServiceC26configureExportedInterfaceyySo14NSXPCInterfaceCF_0(void *a1)
{
  id v37 = (id)sub_1000B86DC(&qword_10020E1A0);
  uint64_t v2 = swift_allocObject(v37, 224LL, 7LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_100163F60;
  uint64_t v3 = sub_1000D0510(0LL, &qword_10020E1A8, &OBJC_CLASS___AKAppleIDPasskeySetupContext_ptr);
  *(void *)(v2 + 56) = sub_1000B86DC(&qword_10020E1B0);
  *(void *)(v2 + 32) = v3;
  uint64_t v4 = sub_1000D0510(0LL, &qword_10020E1B8, &OBJC_CLASS___NSData_ptr);
  uint64_t v35 = sub_1000B86DC(&qword_10020E1C0);
  uint64_t v36 = v4;
  *(void *)(v2 + 8_Block_object_dispose(&a9, 8) = v35;
  *(void *)(v2 + 64) = v4;
  uint64_t v5 = sub_1000D0510(0LL, &qword_10020E1C8, &OBJC_CLASS___NSError_ptr);
  uint64_t v33 = sub_1000B86DC((uint64_t *)&unk_10020E1D0);
  uint64_t v34 = v5;
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v33;
  *(void *)(v2 + 96) = v5;
  uint64_t v6 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D1F0, &OBJC_CLASS___NSString_ptr);
  uint64_t v7 = sub_1000B86DC(&qword_10020E1E0);
  *(void *)(v2 + 152) = v7;
  uint64_t v32 = v6;
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = v6;
  uint64_t v8 = sub_1000D0510(0LL, &qword_10020E1E8, &OBJC_CLASS___NSDictionary_ptr);
  uint64_t v9 = sub_1000B86DC((uint64_t *)&unk_10020E1F0);
  *(void *)(v2 + 184) = v9;
  *(void *)(v2 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v8;
  uint64_t v10 = sub_1000D0510(0LL, &qword_10020F130, &OBJC_CLASS___NSNull_ptr);
  uint64_t v11 = sub_1000B86DC((uint64_t *)&unk_10020E200);
  *(void *)(v2 + 2swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v2 + 192) = v10;
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  id v14 = [v12 initWithArray:isa];

  uint64_t v39 = 0LL;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)( v14,  &v39,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

  uint64_t v15 = v39;
  if (v39)
  {
    uint64_t v16 = swift_allocObject(v37, 192LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_100163DE0;
    *(void *)(v16 + 32) = v36;
    *(void *)(v16 + 56) = v35;
    *(void *)(v16 + 64) = v34;
    *(void *)(v16 + 8_Block_object_dispose(&a9, 8) = v33;
    *(void *)(v16 + 96) = v32;
    *(void *)(v16 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v7;
    *(void *)(v16 + 12_Block_object_dispose(&a9, 8) = v8;
    *(void *)(v16 + 184) = v11;
    *(void *)(v16 + 152) = v9;
    *(void *)(v16 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
    id v17 = objc_allocWithZone(&OBJC_CLASS___NSSet);
    Class v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    id v19 = [v17 initWithArray:v18];

    uint64_t v39 = 0LL;
    static Set._conditionallyBridgeFromObjectiveC(_:result:)( v19,  &v39,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

    uint64_t v20 = v39;
    if (v39)
    {
      Class v21 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v21 forSelector:"setupAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:0];

      Class v22 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v22 forSelector:"setupAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:1];

      Class v23 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v23 forSelector:"setupAppleIDPasskeyWithContext:completion:" argumentIndex:1 ofReply:1];

      Class v24 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v24 forSelector:"verifyAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:0];

      Class v25 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v25 forSelector:"verifyAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:1];

      Class v26 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v26 forSelector:"verifyAppleIDPasskeyWithContext:completion:" argumentIndex:1 ofReply:1];

      Class v27 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v27 forSelector:"unenrollAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:0];

      Class v28 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v28 forSelector:"unenrollAppleIDPasskeyWithContext:completion:" argumentIndex:0 ofReply:1];

      Class v29 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v29 forSelector:"unenrollAppleIDPasskeyWithContext:completion:" argumentIndex:1 ofReply:1];

      Class v30 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      [a1 setClasses:v30 forSelector:"appleIDPasskeyStatusWithContext:completion:" argumentIndex:0 ofReply:0];

      Class v31 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v31 forSelector:"appleIDPasskeyStatusWithContext:completion:" argumentIndex:0 ofReply:1];

      Class v38 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v20);
      [a1 setClasses:v38 forSelector:"appleIDPasskeyStatusWithContext:completion:" argumentIndex:1 ofReply:1];

      return;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x800000010016E230LL,  "akd/AppleIDPasskeyDaemonService.swift",  37LL,  2LL,  51LL,  0);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x800000010016E1E0LL,  "akd/AppleIDPasskeyDaemonService.swift",  37LL,  2LL,  41LL,  0);
  }

  __break(1u);
}

uint64_t sub_1000D38D4()
{
  return swift_task_switch(sub_1000D38E8, 0LL, 0LL);
}

uint64_t sub_1000D38E8()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey setup is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  type metadata accessor for AppleIDPasskeyError(0LL);
  uint64_t v7 = v6;
  *(void *)(v0 + 24) = -12002LL;
  unint64_t v8 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v9 = sub_1000BACEC();
  uint64_t v10 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v8, v7, v9);
  swift_willThrow(v10);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_1000D3A28()
{
  id v0 = [(id)objc_opt_self(AKAccountManager) sharedInstance];
  id v1 = [v0 primaryAuthKitAccount];
  if (v1)
  {
    id v2 = v1;
    id v20 = [(id)objc_opt_self(AKFeatureManager) sharedManager];
    id v3 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyServerConfiguration()) init];
    id v4 = [(id)objc_opt_self(AKDevice) currentDevice];
    if (v4)
    {
      id v5 = v4;
      id v6 = [objc_allocWithZone(AKCDPFactory) init];
      id v7 = [objc_allocWithZone(AKAppleIDPasskeyAuthenticationController) init];
      unint64_t v8 = (objc_class *)type metadata accessor for AppleIDPasskeyValidator();
      unint64_t v9 = (char *)objc_allocWithZone(v8);
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_account] = v2;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager] = v0;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_featureManager] = v20;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_configuration] = v3;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_device] = v5;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory] = v6;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_authenticationController] = v7;
      v21.receiver = v9;
      v21.super_class = v8;
      objc_msgSendSuper2(&v21, "init");
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1000B8C38(v10, (uint64_t)qword_100211008);
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing primary account.", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v16 = v15;
    uint64_t v22 = -120017LL;
    unint64_t v17 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v18 = sub_1000BACEC();
    id v19 = _BridgedStoredNSError.init(_:userInfo:)(&v23, &v22, v17, v16, v18);
    swift_willThrow(v19);
  }

uint64_t sub_1000D3CE4()
{
  return swift_task_switch(sub_1000D3CF8, 0LL, 0LL);
}

uint64_t sub_1000D3CF8()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey unenroll is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  type metadata accessor for AppleIDPasskeyError(0LL);
  uint64_t v7 = v6;
  *(void *)(v0 + 24) = -12002LL;
  unint64_t v8 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v9 = sub_1000BACEC();
  uint64_t v10 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v8, v7, v9);
  swift_willThrow(v10);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000D3E38()
{
  return swift_task_switch(sub_1000D3E4C, 0LL, 0LL);
}

uint64_t sub_1000D3E4C()
{
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100211008);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey status is not supported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  type metadata accessor for AppleIDPasskeyError(0LL);
  uint64_t v7 = v6;
  *(void *)(v0 + 24) = -12002LL;
  unint64_t v8 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v9 = sub_1000BACEC();
  uint64_t v10 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v8, v7, v9);
  swift_willThrow(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3F8C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  id v3 = *(void **)(v0 + 24);
  os_log_type_t v4 = (void *)swift_task_alloc(dword_10020E12C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *os_log_type_t v4 = v1;
  v4[1] = sub_1000B87BC;
  return ((uint64_t (*)(int, void *))((char *)&dword_10020E128 + dword_10020E128))(v2, v3);
}

uint64_t sub_1000D4004()
{
  uint64_t v2 = *(void *)(v0 + 16);
  id v3 = *(void **)(v0 + 24);
  os_log_type_t v4 = (void *)swift_task_alloc(dword_10020E13C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *os_log_type_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(int, void *))((char *)&dword_10020E138 + dword_10020E138))(v2, v3);
}

uint64_t sub_1000D407C()
{
  uint64_t v2 = (void *)v0[2];
  id v3 = (void *)v0[3];
  os_log_type_t v4 = (void *)v0[4];
  id v5 = (void *)swift_task_alloc(dword_10020E15C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020E158 + dword_10020E158))(v2, v3, v4);
}

uint64_t sub_1000D40F4()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D4128()
{
  uint64_t v2 = *(void *)(v0 + 16);
  id v3 = *(void **)(v0 + 24);
  os_log_type_t v4 = (void *)swift_task_alloc(dword_10020E17C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *os_log_type_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(int, void *))((char *)&dword_10020E178 + dword_10020E178))(v2, v3);
}

id sub_1000D41A4(char *a1)
{
  id v3 = v1;
  id v5 = sub_1000D4930();
  uint64_t v6 = *(void *)&a1[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8];
  swift_bridgeObjectRetain(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  [v5 setAccount:v7];

  uint64_t v8 = *(void *)&a1[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8];
  swift_bridgeObjectRetain(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  [v5 setLabel:v9];

  uint64_t v10 = *(void *)&a1[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID + 8];
  swift_bridgeObjectRetain(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  [v5 setServer:v11];

  uint64_t v12 = *(void *)&a1[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
  swift_bridgeObjectRetain(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v5 setSharingGroup:v13];

  uint64_t v14 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = JSONEncoder.init()();
  Class v25 = a1;
  uint64_t v16 = type metadata accessor for SignInWithAppleSharedCredential();
  uint64_t v17 = sub_1000B850C( &qword_10020E218,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleSharedCredential,  (uint64_t)&unk_100164230);
  uint64_t v18 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v25, v16, v17);
  if (v2)
  {

    swift_release(v15);
  }

  else
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_release(v15);
    id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v3 = [v22 initWithDescriptor:v5 value:isa];

    sub_1000B98C0(v20, v21);
  }

  return v3;
}

char *sub_1000D4404(char *a1)
{
  uint64_t v2 = a1;
  id v3 = [a1 descriptor];
  if (!v3) {
    goto LABEL_11;
  }
  os_log_type_t v4 = v3;
  id v5 = [v3 server];
  if (!v5)
  {

    goto LABEL_11;
  }

  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v9 = v8;

  id v10 = [v4 account];
  if (!v10)
  {

    uint64_t v24 = v9;
    goto LABEL_10;
  }

  NSString v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  id v15 = [v2 value];
  if (!v15)
  {

    swift_bridgeObjectRelease(v9);
    uint64_t v24 = v14;
    goto LABEL_10;
  }

  uint64_t v16 = v15;
  uint64_t v65 = v12;
  uint64_t v67 = v14;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v19 = v18;

  uint64_t v20 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = JSONDecoder.init()();
  id v22 = (objc_class *)type metadata accessor for SignInWithAppleSharedCredential();
  uint64_t v23 = sub_1000B850C( &qword_10020E210,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleSharedCredential,  (uint64_t)&unk_100164258);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v70, v22, v17, v19, v22, v23);
  if (!v1)
  {
    uint64_t v63 = v17;
    unint64_t v64 = v19;
    swift_release(v21);
    Class v31 = v70;
    uint64_t v32 = (uint64_t *)&v70[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
    uint64_t v33 = *(void *)&v70[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
    uint64_t v34 = *(void *)&v70[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID + 8];
    if (v33 == v7 && v34 == v9)
    {
      swift_bridgeObjectRelease(v9);
      uint64_t v35 = v67;
LABEL_17:
      id v37 = (uint64_t *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
      uint64_t v38 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
      uint64_t v39 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8];
      if (v38 == v65 && v39 == v35)
      {
        swift_bridgeObjectRelease(v35);
      }

      else
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v65, v35, 0LL);
        swift_bridgeObjectRelease(v35);
        if ((v40 & 1) == 0)
        {

          sub_1000B98C0(v63, v64);
          goto LABEL_11;
        }
      }

      uint64_t v66 = *v32;
      uint64_t v68 = v32[1];
      uint64_t v62 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
      uint64_t v54 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID + 8];
      uint64_t v41 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName + 8];
      uint64_t v60 = *v37;
      uint64_t v61 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
      uint64_t v50 = v37[1];
      uint64_t v42 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken + 8];
      uint64_t v59 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
      uint64_t v43 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      uint64_t v58 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v57 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
      uint64_t v53 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8];
      uint64_t v56 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
      uint64_t v52 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName + 8];
      uint64_t v55 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
      uint64_t v49 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail + 8];
      uint64_t v44 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName + 8];
      uint64_t v51 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
      objc_allocWithZone(v22);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v53);
      uint64_t v45 = swift_bridgeObjectRetain(v52);
      id v46 = sub_1000E55B8( v66,  v68,  v62,  v54,  v61,  v41,  v60,  v50,  v59,  v42,  v58,  v43,  v57,  v53,  v56,  v45,  v55,  v49,  v51,  v44);

      sub_1000B98C0(v63, v64);
      uint64_t v47 = *(void *)&v31[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs];
      uint64_t v2 = (char *)v46;
      swift_bridgeObjectRetain(v47);

      uint64_t v48 = *(void *)&v2[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs];
      *(void *)&v2[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = v47;

      swift_bridgeObjectRelease(v48);
      return v2;
    }

    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v7, v9, 0LL);
    swift_bridgeObjectRelease(v9);
    uint64_t v35 = v67;
    if ((v36 & 1) != 0) {
      goto LABEL_17;
    }

    sub_1000B98C0(v63, v64);
    uint64_t v24 = v67;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    goto LABEL_11;
  }

  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v9);

  sub_1000B98C0(v17, v19);
  swift_errorRelease(v1);
  swift_release(v21);
LABEL_11:
  type metadata accessor for SignInWithAppleError(0LL);
  uint64_t v26 = v25;
  uint64_t v69 = -16009LL;
  unint64_t v27 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = sub_1000B850C( (unint64_t *)&qword_10020D170,  (uint64_t (*)(uint64_t))type metadata accessor for SignInWithAppleError,  (uint64_t)&unk_10016301C);
  Class v29 = _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v27, v26, v28);
  swift_willThrow(v29);

  return v2;
}

id sub_1000D4930()
{
  id v0 = [objc_allocWithZone(AAFKeychainItemDescriptor) init];
  [v0 setItemClass:2];
  [v0 setAccessGroup:AKSignInWithAppleKeychainAccessGroup];
  [v0 setSynchronizable:1];
  [v0 setItemAccessible:1];
  [v0 setUseDataProtection:2];
  object = String.init(_:)((NSString)(id)kSecAttrProtocolHTTPS)._object;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  [v0 setItemProtocol:v2];

  return v0;
}

id sub_1000D4A54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyServerConfiguration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyServerConfiguration()
{
  return objc_opt_self(&OBJC_CLASS___AKAppleIDPasskeyServerConfiguration);
}

uint64_t sub_1000D4B14()
{
  *(void *)(v1 + 136) = v0;
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000D4B2C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier;
  v0[18] = OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier;
  id v3 = (uint64_t *)(v1 + v2);
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    NSString v11 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    swift_bridgeObjectRetain(v4);
    return v11(v5, v4);
  }

  else
  {
    uint64_t v7 = v0 + 2;
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager);
    v0[7] = v0 + 15;
    v0[2] = v0;
    v0[3] = sub_1000D4C20;
    uint64_t v9 = swift_continuation_init(v0 + 2, 1LL);
    v0[10] = _NSConcreteStackBlock;
    id v10 = v0 + 10;
    v10[1] = 0x40000000LL;
    v10[2] = sub_1000D4D30;
    v10[3] = &unk_1001CBD18;
    void v10[4] = v9;
    [v8 fetchCurrentUserIdentifierWithReply:v10];
    return swift_continuation_await(v7);
  }

uint64_t sub_1000D4C20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 152LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000D4CF4;
  }
  else {
    uint64_t v2 = sub_1000D4C80;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000D4C80()
{
  uint64_t v1 = (void *)(v0[17] + v0[18]);
  uint64_t v2 = v0[16];
  uint64_t v3 = v1[1];
  void *v1 = v0[15];
  v1[1] = v2;
  uint64_t result = swift_bridgeObjectRelease(v3);
  uint64_t v5 = v1[1];
  if (v5)
  {
    uint64_t v6 = *(void *)(v0[17] + v0[18]);
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    swift_bridgeObjectRetain(v5);
    return v7(v6, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D4CF4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4D30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    NSString v11 = *(uint64_t **)(*(void *)(v3 + 64) + 40LL);
    uint64_t *v11 = v10;
    v11[1] = v12;
    return swift_continuation_throwingResume(v3);
  }

void sub_1000D4DB8(void *a1)
{
  uint64_t v3 = v1;
  sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
  id v5 = sub_1000D41A4((char *)a1);
  if (!v2)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(v3 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    id v13 = 0LL;
    unsigned __int8 v8 = [v7 addWithItem:v6 error:&v13];
    id v9 = v13;
    if ((v8 & 1) != 0)
    {
      id v10 = v13;
    }

    else
    {
      id v11 = v13;
      _convertNSErrorToError(_:)(v9);

      swift_willThrow(v12);
    }
  }

uint64_t sub_1000D4EB8(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  void v3[4] = a1;
  return swift_task_switch(sub_1000D4F20, 0LL, 0LL);
}

uint64_t sub_1000D4F20()
{
  uint64_t v1 = (void **)(v0 + 16);
  NSString v2 = *(NSString *)(v0 + 40);
  uint64_t v3 = *(void **)(*(void *)(v0 + 48) + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v4 = sub_1000D4930();
  if (v2) {
    NSString v2 = String._bridgeToObjectiveC()();
  }
  void *v1 = 0LL;
  id v5 = [v3 keychainItemsForDescriptor:v4 withGroup:v2 error:v0 + 16];

  uint64_t v6 = *v1;
  if (!v5)
  {
    id v13 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v7 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v7);
  *(void *)(v0 + 56) = v8;
  id v9 = v6;

  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v20 = v8;
    }
    else {
      uint64_t v20 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v8);
    *(void *)(v0 + 64) = v21;
    if (v21) {
      goto LABEL_6;
    }
LABEL_15:
    swift_bridgeObjectRelease(v8);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)(v0 + 64) = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v11 = *(void *)(v0 + 56);
  if ((v11 & 0xC000000000000001LL) != 0) {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
  }
  else {
    id v12 = *(id *)(v11 + 32);
  }
  *(void *)(v0 + 72) = v12;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 1LL;
  id v15 = sub_1000D4404((char *)v12);
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v15;
  uint64_t v17 = v15;
  uint64_t v18 = swift_task_alloc(dword_10020E2E4);
  *(void *)(v0 + 96) = v18;
  *(void *)uint64_t v18 = v0;
  *(void *)(v18 + _Block_object_dispose(&a9, 8) = sub_1000D51B0;
  uint64_t v19 = *(void *)(v0 + 48);
  *(_BYTE *)(v18 + 152) = 0;
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
  *(void *)(v18 + 24) = v19;
  return swift_task_switch(sub_1000D5500, 0LL, 0LL);
}

uint64_t sub_1000D51B0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 96LL);
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[7]);
    swift_bridgeObjectRelease(v3[3]);
    id v5 = sub_1000D547C;
  }

  else
  {
    id v5 = sub_1000D5278;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000D5278()
{
  unint64_t v2 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v1 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v2 >= v1 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v1 > 1, v2 + 1, 1LL);
  }
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v6 = *(void **)(v0 + 72);
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
  specialized Array._endMutation()(v8);

  if (v5 == v7)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    if ((v12 & 0xC000000000000001LL) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(void *)(v0 + 80), v12);
    }
    else {
      id v13 = *(id *)(v12 + 8 * v11 + 32);
    }
    *(void *)(v0 + 72) = v13;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      __break(1u);
    }
    uint64_t v14 = (char *)v13;
    id v15 = sub_1000D4404(v14);
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v15;
    if (v10)
    {
      uint64_t v16 = *(void *)(v0 + 56);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(*(void *)(v0 + 24));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      uint64_t v17 = v15;
      uint64_t v18 = swift_task_alloc(dword_10020E2E4);
      *(void *)(v0 + 96) = v18;
      *(void *)uint64_t v18 = v0;
      *(void *)(v18 + _Block_object_dispose(&a9, 8) = sub_1000D51B0;
      uint64_t v19 = *(void *)(v0 + 48);
      *(_BYTE *)(v18 + 152) = 0;
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
      *(void *)(v18 + 24) = v19;
      return swift_task_switch(sub_1000D5500, 0LL, 0LL);
    }
  }

uint64_t sub_1000D547C()
{
  unint64_t v1 = *(void **)(v0 + 72);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D54E4(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 152) = a2;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return swift_task_switch(sub_1000D5500, 0LL, 0LL);
}

uint64_t sub_1000D5500()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID);
  v0[4] = v3;
  uint64_t v4 = *(void *)(v2 + 8);
  v0[5] = v4;
  uint64_t v5 = v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID);
  v0[6] = v6;
  uint64_t v7 = *(void *)(v5 + 8);
  v0[7] = v7;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName + 8);
  id v9 = objc_allocWithZone(&OBJC_CLASS___AKSignInWithAppleAccountShareInfo);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v0[8] = [v9 initWithGroupID:v10 participantID:v11 participantName:v12];

  id v13 = (void *)swift_task_alloc(dword_10020E2DC);
  v0[9] = v13;
  void *v13 = v0;
  v13[1] = sub_1000D567C;
  uint64_t v14 = v0[3];
  v13[26] = v4;
  v13[27] = v14;
  v13[24] = v7;
  v13[25] = v3;
  v13[23] = v6;
  return swift_task_switch(sub_1000DA738, 0LL, 0LL);
}

uint64_t sub_1000D567C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  *(void *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000D56D8, 0LL, 0LL);
}

uint64_t sub_1000D56D8()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = (void *)v0[8];
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  [v2 setParticipantHandle:v3];

  uint64_t v4 = (void *)swift_task_alloc(dword_10020E2A4);
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000D5774;
  v4[17] = v0[3];
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000D5774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 96LL);
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  swift_task_dealloc(v5);
  if (v2) {
    uint64_t v6 = sub_1000D5B5C;
  }
  else {
    uint64_t v6 = sub_1000D57E4;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D57E4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  if (v1 == v3 && v2 == v4)
  {
    char v6 = 1;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, v3, v4, 0LL);
    uint64_t v2 = *(void *)(v0 + 112);
  }

  uint64_t v7 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease(v2);
  [v7 setIsCurrentUser:v6 & 1];
  uint64_t v8 = swift_task_alloc(dword_10020E2DC);
  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v8;
  *(void *)uint64_t v8 = v0;
  *(void *)(v8 + _Block_object_dispose(&a9, 8) = sub_1000D589C;
  __int128 v10 = *(_OWORD *)(v0 + 32);
  __int128 v9 = *(_OWORD *)(v0 + 48);
  *(void *)(v8 + 2swift_weakDestroy(v0 + 16) = *(void *)(v0 + 24);
  *(_OWORD *)(v8 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
  *(_OWORD *)(v8 + 184) = v9;
  return swift_task_switch(sub_1000DA738, 0LL, 0LL);
}

uint64_t sub_1000D589C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 128);
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000D58F8, 0LL, 0LL);
}

uint64_t sub_1000D58F8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 64);
  int v3 = *(unsigned __int8 *)(v0 + 152);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  [v2 setParticipantHandle:v4];

  if (v3 == 1)
  {
    uint64_t v5 = *(void **)(v0 + 64);
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setShareToken:v6];
  }

  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v7 + OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID + 8);
  uint64_t v9 = *(void *)(v7 + OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8);
  id v10 = objc_allocWithZone(&OBJC_CLASS___AKSignInWithAppleAccount);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  id v13 = [v10 initWithClientID:v11 userID:v12];

  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setLocalizedAppName:v14];

  if (*(void *)(v7 + OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail + 8)) {
    NSString v15 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v15 = 0LL;
  }
  uint64_t v16 = *(void **)(v0 + 64);
  [v13 setPrivateEmail:v15];

  NSString v17 = String._bridgeToObjectiveC()();
  [v13 setTeamID:v17];

  NSString v18 = String._bridgeToObjectiveC()();
  [v13 setLocalizedAppDeveloperName:v18];

  [v13 setShareInfo:v16];
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

uint64_t sub_1000D5B5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D5CC0(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  void v3[4] = v7;
  uint64_t v8 = dword_10020E2AC;
  id v9 = a3;
  id v10 = (void *)swift_task_alloc(v8);
  void v3[5] = v10;
  *id v10 = v3;
  v10[1] = sub_1000D5D6C;
  v10[5] = v7;
  v10[6] = v9;
  void v10[4] = a1;
  return swift_task_switch(sub_1000D4F20, 0LL, 0LL);
}

uint64_t sub_1000D5D6C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(*(void *)(v7 + 32));
  if (v3)
  {
    uint64_t v8 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    id v10 = (void *)v8;
  }

  else
  {
    sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v8 = 0LL;
    id v10 = isa;
  }

  NSString v11 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v11)[2](v11, isa, v8);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000D5E50()
{
  *(void *)(v1 + 32) = v0;
  return swift_task_switch(sub_1000D5EB4, 0LL, 0LL);
}

uint64_t sub_1000D5EB4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 32) + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v2 = sub_1000D4930();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  id v3 = [v1 keychainItemsForDescriptor:v2 withGroup:0 error:v0 + 16];

  NSString v4 = *(void **)(v0 + 16);
  if (!v3)
  {
    id v11 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v5 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v5);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v6;
  id v7 = v4;

  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v6);
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v19;
    if (v19) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease(v6);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v8;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v9 = *(void *)(v0 + 40);
  if ((v9 & 0xC000000000000001LL) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    id v10 = *(id *)(v9 + 32);
  }
  *(void *)(v0 + 56) = v10;
  *(void *)(v0 + 64) = 1LL;
  id v13 = sub_1000D4404((char *)v10);
  *(void *)(v0 + 72) = v13;
  NSString v15 = v13;
  uint64_t v16 = swift_task_alloc(dword_10020E2E4);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v16;
  *(void *)uint64_t v16 = v0;
  *(void *)(v16 + _Block_object_dispose(&a9, 8) = sub_1000D6130;
  uint64_t v17 = *(void *)(v0 + 32);
  *(_BYTE *)(v16 + 152) = 1;
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v15;
  *(void *)(v16 + 24) = v17;
  return swift_task_switch(sub_1000D5500, 0LL, 0LL);
}

uint64_t sub_1000D6130(uint64_t a1)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 80LL);
  v3[11] = a1;
  v3[12] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[5]);
    swift_bridgeObjectRelease(v3[3]);
    uint64_t v5 = sub_1000D6400;
  }

  else
  {
    uint64_t v5 = sub_1000D61F8;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000D61F8()
{
  unint64_t v2 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v1 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v2 >= v1 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v1 > 1, v2 + 1, 1LL);
  }
  id v3 = *(void **)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
  specialized Array._endMutation()(v8);

  if (v5 == v7)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 40);
    if ((v12 & 0xC000000000000001LL) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(void *)(v0 + 64), v12);
    }
    else {
      id v13 = *(id *)(v12 + 8 * v11 + 32);
    }
    *(void *)(v0 + 56) = v13;
    *(void *)(v0 + 64) = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      __break(1u);
    }
    NSString v14 = (char *)v13;
    NSString v15 = sub_1000D4404(v14);
    *(void *)(v0 + 72) = v15;
    if (v10)
    {
      uint64_t v16 = *(void *)(v0 + 40);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(*(void *)(v0 + 24));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      uint64_t v17 = v15;
      uint64_t v18 = swift_task_alloc(dword_10020E2E4);
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v18;
      *(void *)uint64_t v18 = v0;
      *(void *)(v18 + _Block_object_dispose(&a9, 8) = sub_1000D6130;
      uint64_t v19 = *(void *)(v0 + 32);
      *(_BYTE *)(v18 + 152) = 1;
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
      *(void *)(v18 + 24) = v19;
      return swift_task_switch(sub_1000D5500, 0LL, 0LL);
    }
  }

uint64_t sub_1000D6400()
{
  unint64_t v1 = *(void **)(v0 + 56);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6584(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020E2B4;
  id v5 = a2;
  uint64_t v6 = (void *)swift_task_alloc(v4);
  v2[4] = v6;
  void *v6 = v2;
  v6[1] = sub_1000D65FC;
  void v6[4] = v5;
  return swift_task_switch(sub_1000D5EB4, 0LL, 0LL);
}

uint64_t sub_1000D65FC(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 32);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    uint64_t v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v11 = (void *)v9;
  }

  else
  {
    sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v9 = 0LL;
    uint64_t v11 = isa;
  }

  uint64_t v12 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000D66D8(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_1000D6740, 0LL, 0LL);
}

uint64_t sub_1000D6740()
{
  if (qword_10020CF90 != -1) {
    goto LABEL_71;
  }
  while (1)
  {
    uint64_t v122 = v0 + 56;
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v2;
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching keychain SIWA shared credentials", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void *)(v0 + 72);

    id v7 = sub_1000D4930();
    *(void *)(v0 + 96) = v7;
    uint64_t v8 = swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    unint64_t v12 = *(void *)(v0 + 72);
    uint64_t v120 = v7;
    if (v11)
    {
      uint64_t v13 = *(void *)(v0 + 64);
      NSString v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      v125[0] = v15;
      *(_DWORD *)NSString v14 = 136315138;
      swift_bridgeObjectRetain(v12);
      *(void *)(v0 + 56) = sub_100103438(v13, v12, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v0 + 64);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Searching keychain for groups with SIWA app ID %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      uint64_t v16 = v14;
      id v7 = v120;
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    uint64_t v17 = (uint64_t *)(v0 + 16);
    uint64_t v18 = *(void *)(v0 + 80);
    NSString v19 = String._bridgeToObjectiveC()();
    [v7 setServer:v19];

    uint64_t v20 = *(void **)(v18 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    *(void *)(v0 + 24) = 0LL;
    uint64_t v21 = &selRef_authenticatingDaemons;
    id v22 = [v20 keychainItemsForDescriptor:v7 withGroup:0 error:v0 + 24];
    uint64_t v23 = *(void **)(v0 + 24);
    if (v22)
    {
      uint64_t v24 = v22;
      uint64_t v25 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
      uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);
      id v27 = v23;
    }

    else
    {
      id v28 = v23;
      uint64_t v29 = _convertNSErrorToError(_:)(v23);

      swift_willThrow(v30);
      swift_errorRelease(v29);
      uint64_t v26 = (uint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t *v17 = v26;
    if (!((unint64_t)v26 >> 62))
    {
      if (*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_51;
      }
LABEL_12:
      Class v31 = (void **)(v0 + 40);
      uint64_t v32 = swift_bridgeObjectRetain_n(*(void *)(v0 + 72), 2LL);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      unint64_t v36 = *(void *)(v0 + 72);
      if (v35)
      {
        uint64_t v118 = *(void *)(v0 + 64);
        id v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        v125[0] = v38;
        *(_DWORD *)id v37 = 136315138;
        swift_bridgeObjectRetain(v36);
        *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = sub_100103438(v118, v36, v125);
        Class v31 = (void **)(v0 + 40);
        uint64_t v21 = &selRef_authenticatingDaemons;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v122);
        swift_bridgeObjectRelease_n(v36, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "There are no items matching clientID. Looking for items that have %s in their groupedAppsBundleIDs",  v37,  0xCu);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        uint64_t v39 = v37;
        uint64_t v17 = (uint64_t *)(v0 + 16);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(*(void *)(v0 + 72), 2LL);
      }

      id v40 = sub_1000D4930();
      char *v31 = 0LL;
      id v41 = objc_msgSend(v20, v21[145], v40, 0, v31);

      uint64_t v42 = *v31;
      if (v41)
      {
        uint64_t v43 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
        uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v43);
        id v45 = v42;
      }

      else
      {
        id v75 = v42;
        uint64_t v76 = _convertNSErrorToError(_:)(v42);

        swift_willThrow(v77);
        swift_errorRelease(v76);
        uint64_t v44 = (uint64_t)_swiftEmptyArrayStorage;
        if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
        {
LABEL_17:
          uint64_t v46 = *(void *)((v44 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          if (v46) {
            goto LABEL_18;
          }
          goto LABEL_50;
        }
      }

      if (v44 < 0) {
        uint64_t v78 = v44;
      }
      else {
        uint64_t v78 = v44 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v44);
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease(v44);
      if (!v46)
      {
LABEL_50:
        swift_bridgeObjectRelease(v44);
        goto LABEL_51;
      }

LABEL_70:
    __break(1u);
LABEL_71:
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }

  if (v86 < 0) {
    uint64_t v115 = *(void *)(v0 + 104);
  }
  else {
    uint64_t v115 = v86 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 104));
  uint64_t v116 = _CocoaArrayWrapper.endIndex.getter(v115);
  swift_bridgeObjectRelease(v86);
  *(void *)(v0 + 144) = v116;
  if (v116) {
    goto LABEL_56;
  }
LABEL_86:
  uint64_t v117 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));

  unint64_t v110 = _swiftEmptyArrayStorage;
LABEL_87:
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void *))(v0 + 8))(v110);
}

uint64_t sub_1000D7330(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 120);
  *(void *)(*v2 + 12_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000D77D0;
  }

  else
  {
    *(void *)(v4 + 152) = a1;
    uint64_t v6 = sub_1000D73E8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D73E8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void **)(v2 + v1);
  *(void *)(v2 + v1) = *(void *)(v0 + 152);

  uint64_t v4 = *(char **)(v2 + v1);
  if (!v4) {
    __break(1u);
  }
  uint64_t v5 = *(void *)(v0 + 128);
  unint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)&v4[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = v4;
  *(void *)(v0 + 136) = sub_1000ECB1C(v7);

  uint64_t v9 = *(void *)(v0 + 104);
  if (v6 >> 62) {
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)(v0 + 144) = v10;
  if (v10)
  {
    do
    {
      uint64_t v9 = 0LL;
      while (1)
      {
        uint64_t v11 = *(void *)(v0 + 104);
        id v12 = (v11 & 0xC000000000000001LL) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v11)
            : *(id *)(v11 + 8 * v9 + 32);
        *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v12;
        *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v9 + 1;
        if (__OFADD__(v9, 1LL)) {
          break;
        }
        uint64_t v13 = (char *)v12;
        NSString v14 = sub_1000D4404(v13);
        *(void *)(v0 + 176) = v14;
        uint64_t v15 = *(void *)(v0 + 136);
        if (v5)
        {
          uint64_t v27 = *(void *)(v0 + 104);

          swift_bridgeObjectRelease(v15);
          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(*(void *)(v0 + 32));
          return (*(uint64_t (**)(void))(v0 + 8))();
        }

        uint64_t v16 = v14;
        uint64_t v17 = (uint64_t *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
        uint64_t v18 = *(void *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
        uint64_t v19 = *(void *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
        swift_bridgeObjectRetain(v19);
        LOBYTE(v1_Block_object_dispose(&a9, 8) = sub_1000ECD34(v18, v19, v15);
        swift_bridgeObjectRelease(v19);
        if ((v18 & 1) != 0)
        {
          uint64_t v29 = swift_task_alloc(dword_10020E2E4);
          *(void *)(v0 + 184) = v29;
          *(void *)uint64_t v29 = v0;
          *(void *)(v29 + _Block_object_dispose(&a9, 8) = sub_1000D784C;
          uint64_t v30 = *(void *)(v0 + 80);
          *(_BYTE *)(v29 + 152) = 0;
          *(void *)(v29 + swift_weakDestroy(v0 + 16) = v16;
          *(void *)(v29 + 24) = v30;
          return swift_task_switch(sub_1000D5500, 0LL, 0LL);
        }

        uint64_t v20 = v16;
        uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
        os_log_type_t v22 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc(12LL, -1LL);
          uint64_t v24 = swift_slowAlloc(32LL, -1LL);
          uint64_t v36 = v24;
          *(_DWORD *)uint64_t v23 = 136315138;
          uint64_t v25 = *v17;
          unint64_t v26 = v17[1];
          swift_bridgeObjectRetain(v26);
          *(void *)(v23 + 4) = sub_100103438(v25, v26, &v36);
          swift_bridgeObjectRelease(v26);

          _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Detected credential but the current user no longer has access to the group %s. Skipping...",  (uint8_t *)v23,  0xCu);
          swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v24, -1LL, -1LL);
          swift_slowDealloc(v23, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v5 = 0LL;
        uint64_t v9 = *(void *)(v0 + 168);
        if (v9 == *(void *)(v0 + 144))
        {
          Class v31 = *(void **)(v0 + 96);
          swift_bridgeObjectRelease(*(void *)(v0 + 104));

          uint64_t v32 = *(void **)(v0 + 32);
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_19:
      if (v9 < 0) {
        uint64_t v33 = v9;
      }
      else {
        uint64_t v33 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v9);
      *(void *)(v0 + 144) = v34;
    }

    while (v34);
  }

  BOOL v35 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));

  uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void *))(v0 + 8))(v32);
}

uint64_t sub_1000D77D0()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D784C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 184LL);
  v3[24] = a1;
  v3[25] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[13];
    swift_bridgeObjectRelease(v3[17]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v3[4]);
    unint64_t v6 = sub_1000D7D1C;
  }

  else
  {
    unint64_t v6 = sub_1000D7920;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D7920()
{
  id v2 = [*(id *)(v0 + 192) shareInfo];
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned __int8 v4 = [v2 isCurrentUser];
    uint64_t v5 = *(void **)(v0 + 192);
    if ((v4 & 1) == 0)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      uint64_t v1 = *(void ***)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v7 = *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      goto LABEL_6;
    }

    unint64_t v6 = *(void **)(v0 + 176);
  }

  else
  {
    unint64_t v6 = *(void **)(v0 + 192);
    uint64_t v3 = *(void **)(v0 + 176);
    uint64_t v5 = *(void **)(v0 + 160);
  }

  while (1)
  {

    uint64_t v11 = *(void *)(v0 + 168);
    if (v11 == *(void *)(v0 + 144)) {
      break;
    }
    uint64_t v15 = *(void *)(v0 + 200);
    while (1)
    {
      uint64_t v18 = *(void *)(v0 + 104);
      id v19 = (v18 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v18)
          : *(id *)(v18 + 8 * v11 + 32);
      unint64_t v7 = v11 + 1;
      *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v19;
      *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        break;
      }
      uint64_t v20 = (char *)v19;
      uint64_t v21 = sub_1000D4404(v20);
      *(void *)(v0 + 176) = v21;
      uint64_t v22 = *(void *)(v0 + 136);
      if (v15)
      {
        uint64_t v29 = *(void *)(v0 + 104);

        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(*(void *)(v0 + 32));
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      uint64_t v23 = v21;
      uint64_t v1 = (void **)&v21[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v24 = *(void *)&v21[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v25 = *(void *)&v21[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      swift_bridgeObjectRetain(v25);
      LOBYTE(v24) = sub_1000ECD34(v24, v25, v22);
      swift_bridgeObjectRelease(v25);
      if ((v24 & 1) != 0)
      {
        uint64_t v30 = swift_task_alloc(dword_10020E2E4);
        *(void *)(v0 + 184) = v30;
        *(void *)uint64_t v30 = v0;
        *(void *)(v30 + _Block_object_dispose(&a9, 8) = sub_1000D784C;
        uint64_t v31 = *(void *)(v0 + 80);
        *(_BYTE *)(v30 + 152) = 0;
        *(void *)(v30 + swift_weakDestroy(v0 + 16) = v23;
        *(void *)(v30 + 24) = v31;
        return swift_task_switch(sub_1000D5500, 0LL, 0LL);
      }

      unint64_t v26 = v23;
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v16 = swift_slowAlloc(12LL, -1LL);
        uint64_t v17 = swift_slowAlloc(32LL, -1LL);
        uint64_t v32 = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        uint64_t v3 = *v1;
        uint64_t v1 = (void **)v1[1];
        swift_bridgeObjectRetain(v1);
        *(void *)(v16 + 4) = sub_100103438((uint64_t)v3, (unint64_t)v1, &v32);
        swift_bridgeObjectRelease(v1);

        _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Detected credential but the current user no longer has access to the group %s. Skipping...",  (uint8_t *)v16,  0xCu);
        swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v15 = 0LL;
      uint64_t v11 = *(void *)(v0 + 168);
      if (v11 == *(void *)(v0 + 144)) {
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_23:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, (char *)v1 + 1, 1LL);
LABEL_6:
    uint64_t v5 = *(void **)(v0 + 192);
    uint64_t v8 = *(void **)(v0 + 176);
    uint64_t v9 = *(void **)(v0 + 160);
    uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v5);
    specialized Array._endMutation()(v10);

    unint64_t v6 = v3;
    uint64_t v3 = v8;
  }

uint64_t sub_1000D7D1C()
{
  uint64_t v1 = *(void **)(v0 + 176);
  id v2 = *(void **)(v0 + 160);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D7EC4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10020E2BC;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000D7F64;
  v11[9] = v8;
  v11[10] = v10;
  v11[8] = v6;
  return swift_task_switch(sub_1000D6740, 0LL, 0LL);
}

uint64_t sub_1000D7F64(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    id v12 = (void *)v10;
  }

  else
  {
    sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    id v12 = isa;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

id sub_1000D8050(void *a1)
{
  id v4 = sub_1000D4930();
  NSString v5 = [a1 clientID];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v7 = v6;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }

  [v4 setServer:v5];

  NSString v8 = [a1 userID];
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v10 = v9;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
  }

  [v4 setAccount:v8];

  NSString v11 = String._bridgeToObjectiveC()();
  [v4 setSharingGroup:v11];

  id v12 = [a1 shareInfo];
  if (!v12)
  {
    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v26 = v25;
    uint64_t v69 = -16007LL;
    unint64_t v27 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000BC768();
    uint64_t v29 = _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v27, v26, v28);
    swift_willThrow(v29);

    return v4;
  }

  uint64_t v13 = v12;
  NSString v14 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v70 = 0LL;
  id v15 = [v14 keychainItemsForDescriptor:v4 withGroup:0 error:&v70];
  id v16 = v70;
  if (!v15)
  {
    id v30 = v70;
    _convertNSErrorToError(_:)(v16);

LABEL_37:
    swift_willThrow(v31);

    return v4;
  }

  uint64_t v17 = v15;
  uint64_t v18 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);
  id v20 = v16;

  if (!((unint64_t)v19 >> 62))
  {
    if (*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10) == 1LL) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  if (v19 < 0) {
    uint64_t v59 = v19;
  }
  else {
    uint64_t v59 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v19);
  uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  swift_bridgeObjectRelease(v19);
  if (v60 != 1
    || (swift_bridgeObjectRetain(v19),
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v59),
        swift_bridgeObjectRelease(v19),
        !v61))
  {
LABEL_36:
    swift_bridgeObjectRelease(v19);
    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v63 = v62;
    uint64_t v69 = -16009LL;
    unint64_t v64 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v65 = sub_1000BC768();
    uint64_t v31 = _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v64, v63, v65);
    goto LABEL_37;
  }

uint64_t sub_1000D8740(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1000D875C, 0LL, 0LL);
}

uint64_t sub_1000D875C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
  uint64_t v3 = *(char **)(v1 + v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)&v3[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = v3;
    uint64_t v8 = sub_1000ECB1C(v6);

    LOBYTE(v5) = sub_1000ECD34(v4, v5, v8);
    swift_bridgeObjectRelease(v8);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5 & 1);
  }

  else
  {
    sub_1000BC7B0( (void *)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController),  *(void *)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController + 24));
    uint64_t v10 = (void *)swift_task_alloc(dword_10020EA9C);
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1000D8844;
    return sub_1000EC6D8();
  }

uint64_t sub_1000D8844(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 48);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))(0LL);
  }
  *(void *)(v4 + 56) = a1;
  return swift_task_switch(sub_1000D88C4, 0LL, 0LL);
}

void sub_1000D88C4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = *(void *)(v0 + 56);

  uint64_t v4 = *(char **)(v1 + v2);
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = *(void *)&v4[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = v4;
    uint64_t v9 = sub_1000ECB1C(v7);

    LOBYTE(v6) = sub_1000ECD34(v5, v6, v9);
    swift_bridgeObjectRelease(v9);
    (*(void (**)(uint64_t))(v0 + 8))(v6 & 1);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000D8A98(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10020E2C4;
  id v10 = a3;
  NSString v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000D8B38;
  v11[3] = v8;
  void v11[4] = v10;
  v11[2] = v6;
  return swift_task_switch(sub_1000D875C, 0LL, 0LL);
}

uint64_t sub_1000D8B38(char a1)
{
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc(v4);

  swift_bridgeObjectRelease(v5);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v1)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }

  else
  {
    (*(void (**)(void, void, void))(v8 + 16))(*(void *)(v7 + 24), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v7 + 24));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

void sub_1000D8BF4(void *a1)
{
  id v3 = [a1 shareInfo];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = sub_1000D4930();
    NSString v6 = [a1 clientID];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v8 = v7;
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
    }

    [v5 setServer:v6];

    NSString v9 = [a1 userID];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v11 = v10;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
    }

    [v5 setAccount:v9];

    NSString v12 = [v4 groupID];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v14 = v13;
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
    }

    [v5 setSharingGroup:v12];

    id v15 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    id v27 = 0LL;
    unsigned __int8 v16 = [v15 deleteKeychainItemsFor:v5 error:&v27];
    id v17 = v27;
    if ((v16 & 1) != 0)
    {
      id v18 = v27;
    }

    else
    {
      id v24 = v27;
      _convertNSErrorToError(_:)(v17);

      swift_willThrow(v25);
    }
  }

  else
  {
    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v20 = v19;
    uint64_t v26 = -16007LL;
    unint64_t v21 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v22 = sub_1000BC768();
    uint64_t v23 = _BridgedStoredNSError.init(_:userInfo:)(&v27, &v26, v21, v20, v22);
    swift_willThrow(v23);
  }

uint64_t sub_1000D8E2C(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v7 = a3;
  id v8 = a1;
  a5(v7);

  return 1LL;
}

uint64_t sub_1000D8EC4()
{
  *(void *)(v1 + 32) = v0;
  return swift_task_switch(sub_1000D8F28, 0LL, 0LL);
}

uint64_t sub_1000D8F28()
{
  v0[5] = sub_1000D4930();
  uint64_t v1 = (void *)swift_task_alloc(dword_10020E2A4);
  v0[6] = v1;
  void *v1 = v0;
  v1[1] = sub_1000D8FBC;
  v1[17] = v0[4];
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000D8FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 48);
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    id v8 = sub_1000D965C;
  }

  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    id v8 = sub_1000D9080;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1000D9080()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  [v2 setLabel:v4];

  id v5 = *(void **)(v3 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  id v6 = [v5 keychainItemsForDescriptor:v2 withGroup:0 error:v0 + 16];
  uint64_t v7 = *(void **)(v0 + 16);
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = sub_1000D0510(0LL, (unint64_t *)&qword_10020D5A0, &OBJC_CLASS___AAFKeychainItem_ptr);
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    id v11 = v7;

    uint64_t v12 = *(void *)(v0 + 56);
  }

  else
  {
    id v13 = v7;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    uint64_t v12 = 0LL;
    uint64_t v10 = (uint64_t)_swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v26 = v10;
    }
    else {
      uint64_t v26 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v10);
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v27;
    if (v27) {
      goto LABEL_6;
    }
LABEL_16:
    unint64_t v28 = *(void **)(v0 + 40);
    swift_bridgeObjectRelease(v10);

    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

  uint64_t v16 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v16;
  if (!v16) {
    goto LABEL_16;
  }
LABEL_6:
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  uint64_t v17 = *(void *)(v0 + 80);
  if ((v17 & 0xC000000000000001LL) != 0) {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
  }
  else {
    id v18 = *(id *)(v17 + 32);
  }
  *(void *)(v0 + 96) = v18;
  *(void *)(v0 + 104) = 1LL;
  uint64_t v19 = (char *)v18;
  uint64_t v20 = sub_1000D4404(v19);
  *(void *)(v0 + 112) = v20;
  if (v12)
  {
    uint64_t v21 = *(void *)(v0 + 80);

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(*(void *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v23 = v20;
    uint64_t v24 = swift_task_alloc(dword_10020E2E4);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v24;
    *(void *)uint64_t v24 = v0;
    *(void *)(v24 + _Block_object_dispose(&a9, 8) = sub_1000D9340;
    uint64_t v25 = *(void *)(v0 + 32);
    *(_BYTE *)(v24 + 152) = 0;
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v23;
    *(void *)(v24 + 24) = v25;
    return swift_task_switch(sub_1000D5500, 0LL, 0LL);
  }

uint64_t sub_1000D9340(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 120LL);
  uint8_t v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[10]);
    swift_bridgeObjectRelease(v3[3]);
    id v5 = sub_1000D96BC;
  }

  else
  {
    id v5 = sub_1000D9408;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000D9408()
{
  id v1 = [*(id *)(v0 + 128) shareInfo];
  if (!v1)
  {
    uint64_t v2 = *(void **)(v0 + 112);
    goto LABEL_7;
  }

  uint64_t v2 = v1;
  if (([v1 isCurrentUser] & 1) == 0)
  {

    goto LABEL_7;
  }

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v0 + 128));
  unint64_t v4 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v3 = *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v4 >= v3 >> 1) {
    goto LABEL_17;
  }
  while (1)
  {
    id v5 = *(void **)(v0 + 112);
    uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, *(void *)(v0 + 128));
    specialized Array._endMutation()(v6);

    uint64_t v2 = v5;
LABEL_7:

    uint64_t v7 = *(void **)(v0 + 128);
    uint64_t v2 = *(void **)(v0 + 104);
    id v8 = *(void **)(v0 + 88);

    if (v2 == v8)
    {
      uint64_t v9 = *(void **)(v0 + 40);
      swift_bridgeObjectRelease(*(void *)(v0 + 80));

      return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
    }

    unint64_t v4 = *(void *)(v0 + 136);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 80);
    id v13 = (v12 & 0xC000000000000001LL) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(void *)(v0 + 104), v12)
        : *(id *)(v12 + 8 * v11 + 32);
    unint64_t v3 = v11 + 1;
    *(void *)(v0 + 96) = v13;
    *(void *)(v0 + 104) = v11 + 1;
    if (!__OFADD__(v11, 1LL)) {
      break;
    }
    __break(1u);
LABEL_17:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1LL);
  }

  uint64_t v14 = (char *)v13;
  uint64_t v15 = sub_1000D4404(v14);
  *(void *)(v0 + 112) = v15;
  if (v4)
  {
    uint64_t v16 = *(void *)(v0 + 80);

    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(*(void *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v17 = v15;
    uint64_t v18 = swift_task_alloc(dword_10020E2E4);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v18;
    *(void *)uint64_t v18 = v0;
    *(void *)(v18 + _Block_object_dispose(&a9, 8) = sub_1000D9340;
    uint64_t v19 = *(void *)(v0 + 32);
    *(_BYTE *)(v18 + 152) = 0;
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
    *(void *)(v18 + 24) = v19;
    return swift_task_switch(sub_1000D5500, 0LL, 0LL);
  }

uint64_t sub_1000D965C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D96BC()
{
  id v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 96);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D9850(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020E2CC;
  id v5 = a2;
  uint64_t v6 = (void *)swift_task_alloc(v4);
  v2[4] = v6;
  void *v6 = v2;
  v6[1] = sub_1000DB224;
  void v6[4] = v5;
  return swift_task_switch(sub_1000D8F28, 0LL, 0LL);
}

uint64_t sub_1000D98C8(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  void v3[4] = a1;
  return swift_task_switch(sub_1000D9930, 0LL, 0LL);
}

uint64_t sub_1000D9930()
{
  id v1 = sub_1000D4930();
  v0[7] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setServer:v2];

  unint64_t v3 = (void *)swift_task_alloc(dword_10020E2A4);
  v0[8] = v3;
  *unint64_t v3 = v0;
  v3[1] = sub_1000D99FC;
  v3[17] = v0[6];
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000D99FC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 64);
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    id v8 = sub_1000D9D68;
  }

  else
  {
    *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a2;
    *(void *)(v6 + 8_Block_object_dispose(&a9, 8) = a1;
    id v8 = sub_1000D9AC0;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1000D9AC0()
{
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[6];
  uint64_t v2 = (void *)v0[7];
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  [v2 setLabel:v4];

  id v5 = *(void **)(v3 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  v0[2] = 0LL;
  unsigned int v6 = [v5 deleteKeychainItemsFor:v2 error:v0 + 2];
  uint64_t v7 = (void *)v0[2];
  if (v6)
  {
    uint64_t v8 = qword_10020CF90;
    id v9 = v7;
    if (v8 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v10 = v0[5];
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v11, (uint64_t)qword_100210FF0);
    uint64_t v12 = swift_bridgeObjectRetain_n(v10, 2LL);
    id v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = (void *)v0[7];
    unint64_t v17 = v0[5];
    if (v15)
    {
      uint64_t v18 = v0[4];
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain(v17);
      v0[3] = sub_100103438(v18, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
      swift_bridgeObjectRelease_n(v17, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Deleted keychain item for %s.", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v0[5], 2LL);
    }

    uint64_t v24 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v21 = (void *)v0[7];
    id v22 = v7;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v23);
    uint64_t v24 = (uint64_t (*)(void))v0[1];
  }

  return v24();
}

uint64_t sub_1000D9D68()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D9EF8(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10020E2D4;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000D9F98;
  void v11[5] = v8;
  v11[6] = v10;
  void v11[4] = v6;
  return swift_task_switch(sub_1000D9930, 0LL, 0LL);
}

uint64_t sub_1000D9F98()
{
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v2 = *(void *)(*v1 + 40);
  NSString v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  uint64_t v6 = *(void *)(v5 + 24);
  if (v0)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }

  else
  {
    (*(void (**)(void, void))(v6 + 16))(*(void *)(v5 + 24), 0LL);
  }

  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000DA170(uint64_t a1, void *aBlock, void *a3)
{
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  v3[2] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[3] = v6;
  v3[6] = v6;
  uint64_t v7 = dword_10020E2A4;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v7);
  v3[7] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000DA200;
  v9[17] = v8;
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000DA200(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*v3 + 56);
  uint64_t v7 = *v3;
  *(void *)(v7 + 64) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    uint64_t v8 = *(void *)(v7 + 48);

    swift_bridgeObjectRelease(v8);
    uint64_t v9 = *(void *)(v7 + 40);
    id v10 = (void *)_convertErrorToNSError(_:)(v2);
    swift_errorRelease(v2);
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

    _Block_release(*(const void **)(v7 + 40));
    return (*(uint64_t (**)(void))(v7 + 8))();
  }

  else
  {
    uint64_t v12 = *(void *)(v7 + 16);
    *(void *)(v7 + 72) = a2;
    *(void *)(v7 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
    *(void *)(v7 + 8_Block_object_dispose(&a9, 8) = v12;
    return swift_task_switch(sub_1000DA2D4, 0LL, 0LL);
  }

uint64_t sub_1000DA2D4()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  NSString v4 = *(void **)(v0 + 32);
  sub_1000DA388();
  swift_bridgeObjectRelease(v1);

  swift_bridgeObjectRelease(v3);
  uint64_t v5 = *(void *)(v0 + 40);
  if (v2)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v2);
    swift_errorRelease(v2);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v0 + 40), 0LL);
  }

  _Block_release(*(const void **)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000DA388()
{
  id v1 = sub_1000D4930();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setSharingGroup:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setLabel:v3];

  NSString v4 = *(void **)(v0 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v10 = 0LL;
  unsigned __int8 v5 = [v4 deleteKeychainItemsFor:v1 error:&v10];
  id v6 = v10;
  if ((v5 & 1) != 0)
  {
    id v7 = v10;
  }

  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v9);
  }
}

void sub_1000DA588()
{
  id v1 = sub_1000D4930();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setSharingGroup:v2];

  NSString v3 = *(void **)(v0 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v9 = 0LL;
  unsigned __int8 v4 = [v3 deleteKeychainItemsFor:v1 error:&v9];
  id v5 = v9;
  if ((v4 & 1) != 0)
  {
    id v6 = v9;
  }

  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
  }
}

uint64_t sub_1000DA718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[26] = a4;
  v5[27] = v4;
  v5[24] = a2;
  v5[25] = a3;
  v5[23] = a1;
  return swift_task_switch(sub_1000DA738, 0LL, 0LL);
}

uint64_t sub_1000DA738()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap;
  *(void *)(v0 + 224) = OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap;
  NSString v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 120, 0LL, 0LL);
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    unint64_t v7 = sub_1000F9BB8(v6, v5);
    uint64_t v8 = *(void *)(v0 + 192);
    if ((v9 & 1) != 0)
    {
      id v10 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v8);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v12);
    }

    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v8);
  }

  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 216)
                                    + OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager);
  *(void *)(v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = String._bridgeToObjectiveC()();
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = String._bridgeToObjectiveC()();
  os_log_type_t v14 = (void *)swift_task_alloc(dword_10020E2A4);
  *(void *)(v0 + 256) = v14;
  void *v14 = v0;
  v14[1] = sub_1000DA884;
  v14[17] = *(void *)(v0 + 216);
  return swift_task_switch(sub_1000D4B2C, 0LL, 0LL);
}

uint64_t sub_1000DA884(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  swift_task_dealloc(*(void *)(*(void *)v3 + 256LL));
  if (v2)
  {
    uint64_t v8 = (void *)v6[30];
    unint64_t v7 = (void *)v6[31];
    swift_errorRelease(v2);

    char v9 = sub_1000DAB2C;
  }

  else
  {
    v6[33] = a2;
    v6[34] = a1;
    char v9 = sub_1000DA90C;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_1000DA90C()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[33];
  uint64_t v4 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = (void *)v0[29];
  NSString v6 = String._bridgeToObjectiveC()();
  v0[35] = v6;
  swift_bridgeObjectRelease(v2);
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = sub_1000DA9E4;
  uint64_t v7 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v8 = v0 + 10;
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_1000D4D30;
  v8[3] = &unk_1001CBD00;
  void v8[4] = v7;
  [v5 fetchParticipantHandleFor:v4 groupID:v3 currentUserParticipantID:v6 completionHandler:v8];
  return swift_continuation_await(v1);
}

uint64_t sub_1000DA9E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 288LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000DABF4;
  }
  else {
    uint64_t v2 = sub_1000DAA44;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000DAA44()
{
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);

  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = (void *)(*(void *)(v0 + 216) + *(void *)(v0 + 224));
  swift_beginAccess(v7, v0 + 144, 33LL, 0LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  uint64_t v11 = *v7;
  *uint64_t v7 = 0x8000000000000000LL;
  sub_1000F0E54(v3, v4, v6, v5, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *v7;
  *uint64_t v7 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v5);
  swift_endAccess(v0 + 144);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_1000DAB2C()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = (void *)(*(void *)(v0 + 216) + *(void *)(v0 + 224));
  swift_beginAccess(v3, v0 + 144, 33LL, 0LL);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(0xE000000000000000LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v7 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_1000F0E54(0LL, 0xE000000000000000LL, v2, v1, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = *v3;
  *uint64_t v3 = v7;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v1);
  swift_endAccess(v0 + 144);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xE000000000000000LL);
}

uint64_t sub_1000DABF4(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 280);
  uint64_t v2 = *(void *)(v1 + 288);
  uint64_t v5 = *(void **)(v1 + 240);
  uint64_t v4 = *(void **)(v1 + 248);
  swift_willThrow(a1);
  swift_errorRelease(v2);

  uint64_t v7 = *(void *)(v1 + 184);
  uint64_t v6 = *(void *)(v1 + 192);
  uint64_t v8 = (void *)(*(void *)(v1 + 216) + *(void *)(v1 + 224));
  swift_beginAccess(v8, v1 + 144, 33LL, 0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(0xE000000000000000LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  uint64_t v12 = *v8;
  *uint64_t v8 = 0x8000000000000000LL;
  sub_1000F0E54(0LL, 0xE000000000000000LL, v7, v6, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *v8;
  *uint64_t v8 = v12;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v6);
  swift_endAccess(v1 + 144);
  return (*(uint64_t (**)(void, unint64_t))(v1 + 8))(0LL, 0xE000000000000000LL);
}

id sub_1000DAD14()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SharedAccountsStorageController()
{
  return objc_opt_self(&OBJC_CLASS___AKSharedAccountsStorageController);
}

id sub_1000DADE0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = &a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier];
  *(void *)uint64_t v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap] = &_swiftEmptyDictionarySingleton;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo] = 0LL;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController] = a1;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager] = a2;
  uint64_t v7 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v8 = swift_allocObject(v7, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = (uint64_t *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController];
  v9[3] = v7;
  void v9[4] = (uint64_t)&off_1001CC608;
  *uint64_t v9 = v8;
  v11.receiver = a3;
  v11.super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a2);
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t sub_1000DAEC4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E2EC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020E2E8 + dword_10020E2E8))(v2, v3, v4);
}

uint64_t sub_1000DAF3C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E2FC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020E2F8 + dword_10020E2F8))(v2, v3, v4);
}

uint64_t sub_1000DAFB4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10020E31C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020E318 + dword_10020E318))(v2, v3);
}

uint64_t sub_1000DB024()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E33C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020E338 + dword_10020E338))(v2, v3, v4);
}

uint64_t sub_1000DB09C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E35C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020E358 + dword_10020E358))(v2, v3, v4);
}

uint64_t sub_1000DB114()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000DB140()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10020E37C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020E378 + dword_10020E378))(v2, v3);
}

uint64_t sub_1000DB1B0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E39C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020E398 + dword_10020E398))(v2, v3, v4);
}

uint64_t sub_1000DB228(uint64_t a1)
{
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_1000DB240, 0LL, 0LL);
}

uint64_t sub_1000DB240()
{
  if (objc_msgSend( *(id *)(*(void *)(v0 + 136)
                             + OBJC_IVAR___AKAppleIDPasskeyVerificationController_passkeyValidator),
                       "canVerifyPasskey"))
  {
    uint64_t v1 = *(void *)(v0 + 128);
    uint64_t v2 = *(void **)(*(void *)(v0 + 136) + OBJC_IVAR___AKAppleIDPasskeyVerificationController_verificationProvider);
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000DB42C;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000DB550;
    *(void *)(v0 + 104) = &unk_1001CC080;
    [v2 performVerificationRequestWith:v1 completionHandler:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    if (qword_10020CF98 != -1) {
      swift_once(&qword_10020CF98, sub_1000E5514);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000B8C38(v4, (uint64_t)qword_100211008);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Passkey verification failed. Device is not passkey eligible.",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    type metadata accessor for AppleIDPasskeyError(0LL);
    uint64_t v10 = v9;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -12002LL;
    unint64_t v11 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v12 = sub_1000BACEC();
    id v13 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 80), v0 + 120, v11, v10, v12);
    swift_willThrow(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000DB42C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 144LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000DB49C;
  }
  else {
    uint64_t v2 = sub_1000DB48C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000DB48C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t sub_1000DB49C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DB550(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *os_log_type_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = sub_1000B86DC(&qword_10020D9A0);
    **(void **)(*(void *)(v3 + 64) + 40LL) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  v11,  &protocol witness table for String);
    return swift_continuation_throwingResume(v3);
  }

uint64_t type metadata accessor for AppleIDPasskeyVerificationController()
{
  return objc_opt_self(&OBJC_CLASS___AKAppleIDPasskeyVerificationController);
}

void *sub_1000DB680(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000B86DC(&qword_10020E408);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = [(id)objc_opt_self(AKURLBag) sharedBag];
  if (!result)
  {
    __break(1u);
    return result;
  }

  unint64_t v12 = result;
  id v13 = [result generateVerificationTokenURL];

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0LL, 1LL, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) != 1)
    {
      sub_1000DBA6C((uint64_t)v10);
      id v14 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
      NSString v15 = [a1 altDSID];
      if (!v15)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v17 = v16;
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v17);
      }

      [v14 setAltDSID:v15];

      id v18 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyRequestProvider()) initWithContext:v14 urlBagKey:AKURLBagKeyGenerateVerificationToken];
      [v18 setAuthenticatedRequest:1];
      [v18 setClient:a2];
      id v19 = [objc_allocWithZone(AKAuthHandlerImpl) init];
      [v19 setForceSilentAuth:1];
      id v20 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v18];
      [v20 setAuthenticationDelegate:v19];

      id v21 = [(id)objc_opt_self(AKAccountManager) sharedInstance];
      uint64_t v22 = type metadata accessor for AppleIDPasskeyVerificationProvider();
      uint64_t result = (void *)swift_allocObject(v22, 32LL, 7LL);
      result[2] = v20;
      result[3] = v21;
      return result;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1LL, 1LL, v4);
  }

  sub_1000DBA6C((uint64_t)v10);
  if (qword_10020CF98 != -1) {
    swift_once(&qword_10020CF98, sub_1000E5514);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_1000B8C38(v23, (uint64_t)qword_100211008);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing passkey verification url.", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  type metadata accessor for AppleIDPasskeyError(0LL);
  uint64_t v29 = v28;
  uint64_t v34 = -120013LL;
  unint64_t v30 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v31 = sub_1000BACEC();
  uint64_t v32 = _BridgedStoredNSError.init(_:userInfo:)(&v35, &v34, v30, v29, v31);
  return (void *)swift_willThrow(v32);
}

uint64_t sub_1000DBA6C(uint64_t a1)
{
  uint64_t v2 = sub_1000B86DC(&qword_10020E408);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000DBB4C(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  return swift_task_switch(sub_1000DBB64, 0LL, 0LL);
}

uint64_t sub_1000DBB64()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  id v3 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
  v0[6] = (uint64_t)v3;
  id v4 = [v1 altDSID];
  [v3 setAltDSID:v4];

  id v5 = [objc_allocWithZone((Class)AKDeviceListRequestProvider) initWithContext:v3 urlBagKey:AKURLBagKeyDeviceList];
  v0[7] = (uint64_t)v5;
  id v6 = sub_1000DBFD8(v1);
  [v5 setDeviceRequestContext:v6];

  [v5 setClient:*(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_client)];
  id v7 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v5];
  v0[8] = (uint64_t)v7;
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_cdpFactory);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_accountManager);
  uint64_t v10 = (uint64_t **)swift_task_alloc(dword_10020ECD4);
  v0[9] = (uint64_t)v10;
  *uint64_t v10 = v0;
  v10[1] = (uint64_t *)sub_1000DBCDC;
  return sub_1000F5AB8(v0[4], v8, (uint64_t)v7, v9);
}

uint64_t sub_1000DBCDC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 72);
  *(void *)(*v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    id v6 = sub_1000DBD94;
  }

  else
  {
    *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = a1;
    id v6 = sub_1000DBD50;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000DBD50()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 48);

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 88));
}

uint64_t sub_1000DBD94()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FD8);
  id v4 = v1;
  swift_errorRetain(v2);
  id v5 = v4;
  uint64_t v6 = swift_errorRetain(v2);
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void **)(v0 + 32);
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    id v21 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138412546;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v11;
    id v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *id v21 = v11;

    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v10);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v0 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    v21[1] = v14;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  type,  "Failed to fetch device list  for context - %@ with error - %@",  (uint8_t *)v12,  0x16u);
    uint64_t v15 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v21, 2LL, v15);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v16 = *(void **)(v0 + 56);
  uint64_t v17 = *(void **)(v0 + 64);
  id v18 = *(void **)(v0 + 48);
  swift_willThrow(v19);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000DBFD8(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___AKDeviceListRequester_cdpFactory);
  id v3 = [a1 altDSID];
  LODWORD(v2) = [v2 isHSA2EnabledForAltDSID:v3];

  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v5, (uint64_t)qword_100210FD8);
  id v6 = a1;
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    BOOL v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v9 = 138412290;
    id v16 = v6;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    *uint64_t v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setting server provided context from context - %@", v9, 0xCu);
    uint64_t v12 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  id v13 = [objc_allocWithZone(AKDeviceListRequestContext) init];
  id v14 = [v6 altDSID];
  [v13 setAltDSID:v14];

  [v13 setIncludeUntrustedDevices:1];
  return v13;
}

uint64_t sub_1000DC37C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020E45C;
  id v7 = a1;
  id v8 = a3;
  BOOL v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *BOOL v9 = v3;
  v9[1] = sub_1000DC40C;
  void v9[4] = v7;
  void v9[5] = v8;
  return swift_task_switch(sub_1000DBB64, 0LL, 0LL);
}

uint64_t sub_1000DC40C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 40);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v6 = *(void **)(*v2 + 24);
  uint64_t v8 = *v2;
  swift_task_dealloc(v5);

  BOOL v9 = *(void (***)(void, void, void))(v8 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0LL);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000DC4D4(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000DC4EC, 0LL, 0LL);
}

uint64_t sub_1000DC4EC()
{
  v0[4] = *(void *)(v0[3] + OBJC_IVAR___AKDeviceListRequester_storeManager);
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_10020D7A4);
  v0[5] = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = (uint64_t *)sub_1000DC55C;
  return sub_1000BE528(v0[2]);
}

uint64_t sub_1000DC55C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))(0LL);
  }
  *(_BYTE *)(v4 + 56) = a1 & 1;
  return swift_task_switch(sub_1000DC5E0, 0LL, 0LL);
}

uint64_t sub_1000DC5E0()
{
  if (*(_BYTE *)(v0 + 56) != 1) {
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_10020D7A4);
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v1;
  void *v1 = v0;
  v1[1] = sub_1000DC668;
  return sub_1000BE528(*(void *)(v0 + 16));
}

uint64_t sub_1000DC668(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000DC7F4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020E464;
  id v7 = a1;
  id v8 = a3;
  BOOL v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *BOOL v9 = v3;
  v9[1] = sub_1000DC884;
  v9[2] = v7;
  v9[3] = v8;
  return swift_task_switch(sub_1000DC4EC, 0LL, 0LL);
}

uint64_t sub_1000DC884(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v5 = *(void **)(*v2 + 24);
  uint64_t v7 = *v2;
  swift_task_dealloc(v4);

  uint64_t v8 = *(void *)(v7 + 32);
  if (v1)
  {
    BOOL v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }

  else
  {
    (*(void (**)(void, void, void))(v8 + 16))(*(void *)(v7 + 32), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v7 + 32));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

id sub_1000DC968()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceListRequester();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListRequester()
{
  return objc_opt_self(&OBJC_CLASS___AKDeviceListRequester);
}

uint64_t sub_1000DCA14()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E46C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020E468 + dword_10020E468))(v2, v3, v4);
}

uint64_t sub_1000DCA8C()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020E47C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020E478 + dword_10020E478))(v2, v3, v4);
}

id sub_1000DCD80()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyRequestProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd29AppleIDPasskeyRequestProvider);
}

uint64_t sub_1000DCDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_1000DCE18()
{
  return 0x6C5F656369766564LL;
}

os_log_s *sub_1000DCE38(void *a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = sub_1000DFDF0(a1);
  unint64_t v4 = v3;
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v5, (uint64_t)qword_100210FD8);
  uint64_t v6 = swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    BOOL v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = v1;
    id v11 = (void **)swift_slowAlloc(32LL, -1LL);
    aBlock = v11;
    *(_DWORD *)BOOL v9 = 136315138;
    swift_bridgeObjectRetain(v4);
    uint64_t v50 = sub_100103438(v2, v4, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &aBlock);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "DeviceListProvider - Begin fetching devices from cache for query %s",  v9,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v12 = v11;
    uint64_t v1 = v10;
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  uint64_t v13 = swift_allocObject(&unk_1001CC198, 24LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  id v15 = [(id)objc_opt_self(AKSQLiteQuery) queryWithString:v14];

  uint64_t v16 = sub_1000B86DC(&qword_10020E1A0);
  uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
  id v18 = [v1 altDSID];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v22 = 0LL;
  }

  *(void *)(v17 + 56) = sub_1000B86DC(&qword_10020D858);
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v22;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  aBlock = 0LL;
  [v15 bindParameters:isa error:&aBlock];

  uint64_t v24 = aBlock;
  v52[3] = sub_1000E04B0;
  uint64_t v53 = v13;
  aBlock = _NSConcreteStackBlock;
  v52[0] = 1107296256LL;
  v52[1] = sub_1000DCDD0;
  v52[2] = &unk_1001CC1B0;
  uint64_t v25 = _Block_copy(&aBlock);
  uint64_t v26 = v53;
  uint64_t v27 = v24;
  swift_retain(v13);
  swift_release(v26);
  [v15 setRowHandler:v25];
  _Block_release(v25);
  uint64_t v28 = *(void **)(v48 + 16);
  aBlock = 0LL;
  unsigned int v29 = [v28 performQuery:v15 error:&aBlock];
  unint64_t v30 = aBlock;
  if (v29)
  {
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(aBlock);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "DeviceListProvider - Finished fetching devices from cache",  v33,  2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    swift_beginAccess(v13 + 16, &aBlock, 0LL, 0LL);
    uint64_t v34 = *(os_log_s **)(v13 + 16);
    swift_bridgeObjectRetain(v34);

    swift_release(v13);
  }

  else
  {
    uint64_t v35 = aBlock;
    uint64_t v36 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v37);
    swift_errorRetain(v36);
    uint64_t v38 = swift_errorRetain(v36);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v39))
    {
      id v49 = v27;
      uint64_t v40 = v36;
      uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v41 = 138412290;
      swift_errorRetain(v36);
      id v42 = (void **)_swift_stdlib_bridgeErrorToNSError(v36);
      aBlock = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v52);
      *uint64_t v47 = v42;
      uint64_t v43 = v40;
      uint64_t v27 = v49;
      swift_errorRelease(v43);
      swift_errorRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v34, v39, "Error %@ fetching devices from cache", v41, 0xCu);
      uint64_t v44 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v47, 1LL, v44);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v36);
      swift_errorRelease(v36);
    }

    swift_willThrow(v45);
    swift_release(v13);
  }

  return v34;
}

uint64_t sub_1000DD424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v175 = sub_1000F4970((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceMachineIdKey);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AKSQLiteHelper);
  uint64_t v174 = a1;
  id v8 = [v7 stringFromColumn:0 inStatement:a1];
  if (v8)
  {
    BOOL v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v10;
    *((void *)&v179 + 1) = v12;
    sub_1000B8EB0(&v179, &v177);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v4, v6, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v4, v6, &v179);
    swift_bridgeObjectRelease(v6);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceNameKey);
  uint64_t v16 = v15;
  id v17 = [v7 stringFromColumn:1 inStatement:v174];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v19;
    *((void *)&v179 + 1) = v21;
    sub_1000B8EB0(&v179, &v177);
    char v22 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v14, v16, v22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v14, v16, &v179);
    swift_bridgeObjectRelease(v16);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceSerialNumberKey);
  uint64_t v25 = v24;
  id v26 = [v7 stringFromColumn:2 inStatement:v174];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v30 = v29;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v28;
    *((void *)&v179 + 1) = v30;
    sub_1000B8EB0(&v179, &v177);
    char v31 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v23, v25, v31);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v23, v25, &v179);
    swift_bridgeObjectRelease(v25);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceModelKey);
  uint64_t v34 = v33;
  id v35 = [v7 stringFromColumn:3 inStatement:v174];
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v39 = v38;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v37;
    *((void *)&v179 + 1) = v39;
    sub_1000B8EB0(&v179, &v177);
    char v40 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v32, v34, v40);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v32, v34, &v179);
    swift_bridgeObjectRelease(v34);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceOSNameKey);
  uint64_t v43 = v42;
  id v44 = [v7 stringFromColumn:4 inStatement:v174];
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v48 = v47;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v46;
    *((void *)&v179 + 1) = v48;
    sub_1000B8EB0(&v179, &v177);
    char v49 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v41, v43, v49);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v41, v43, &v179);
    swift_bridgeObjectRelease(v43);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceOSVersionKey);
  uint64_t v52 = v51;
  id v53 = [v7 stringFromColumn:5 inStatement:v174];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v57 = v56;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v55;
    *((void *)&v179 + 1) = v57;
    sub_1000B8EB0(&v179, &v177);
    char v58 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v50, v52, v58);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v50, v52, &v179);
    swift_bridgeObjectRelease(v52);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceColorCodeKey);
  uint64_t v61 = v60;
  id v62 = [v7 stringFromColumn:6 inStatement:v174];
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    uint64_t v66 = v65;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v64;
    *((void *)&v179 + 1) = v66;
    sub_1000B8EB0(&v179, &v177);
    char v67 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v59, v61, v67);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v59, v61, &v179);
    swift_bridgeObjectRelease(v61);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceCoverGlassColorCodeKey);
  uint64_t v70 = v69;
  id v71 = [v7 stringFromColumn:7 inStatement:v174];
  if (v71)
  {
    id v72 = v71;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    uint64_t v75 = v74;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v73;
    *((void *)&v179 + 1) = v75;
    sub_1000B8EB0(&v179, &v177);
    char v76 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v68, v70, v76);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v68, v70, &v179);
    swift_bridgeObjectRelease(v70);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceBackingColorCodeKey);
  uint64_t v79 = v78;
  id v80 = [v7 stringFromColumn:8 inStatement:v174];
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    uint64_t v84 = v83;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v82;
    *((void *)&v179 + 1) = v84;
    sub_1000B8EB0(&v179, &v177);
    char v85 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v77, v79, v85);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v77, v79, &v179);
    swift_bridgeObjectRelease(v79);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceHousingColorCodeKey);
  uint64_t v88 = v87;
  id v89 = [v7 stringFromColumn:9 inStatement:v174];
  if (v89)
  {
    id v90 = v89;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v93 = v92;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v91;
    *((void *)&v179 + 1) = v93;
    sub_1000B8EB0(&v179, &v177);
    char v94 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v86, v88, v94);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v86, v88, &v179);
    swift_bridgeObjectRelease(v88);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceEnclosureColorCodeKey);
  uint64_t v97 = v96;
  id v98 = [v7 stringFromColumn:10 inStatement:v174];
  if (v98)
  {
    uint64_t v99 = v98;
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
    uint64_t v102 = v101;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v100;
    *((void *)&v179 + 1) = v102;
    sub_1000B8EB0(&v179, &v177);
    char v103 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v95, v97, v103);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v95, v97, &v179);
    swift_bridgeObjectRelease(v97);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceInCircleKey);
  uint64_t v106 = v105;
  id v107 = [v7 integerFromColumn:11 inStatement:v174];
  unsigned __int8 v108 = [v107 BOOLValue];

  *((void *)&v180 + 1) = &type metadata for Bool;
  LOBYTE(v179) = v108;
  sub_1000B8EB0(&v179, &v177);
  char v109 = swift_isUniquelyReferenced_nonNull_native(v175);
  *(void *)&v176[0] = v175;
  sub_1000F0D24(&v177, v104, v106, v109);
  swift_bridgeObjectRelease(v106);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceBuildNumberKey);
  uint64_t v112 = v111;
  id v113 = [v7 stringFromColumn:12 inStatement:v174];
  if (v113)
  {
    uint64_t v114 = v113;
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    uint64_t v117 = v116;

    *((void *)&v180 + 1) = &type metadata for String;
    *(void *)&__int128 v179 = v115;
    *((void *)&v179 + 1) = v117;
    sub_1000B8EB0(&v179, &v177);
    char v118 = swift_isUniquelyReferenced_nonNull_native(v175);
    *(void *)&v176[0] = v175;
    sub_1000F0D24(&v177, v110, v112, v118);
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v110, v112, &v179);
    swift_bridgeObjectRelease(v112);
    sub_1000BE490((uint64_t)&v179);
  }

  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceTrustedKey);
  uint64_t v121 = v120;
  id v122 = [v7 integerFromColumn:13 inStatement:v174];
  unsigned __int8 v123 = [v122 BOOLValue];

  *((void *)&v180 + 1) = &type metadata for Bool;
  LOBYTE(v179) = v123;
  sub_1000B8EB0(&v179, &v177);
  char v124 = swift_isUniquelyReferenced_nonNull_native(v175);
  *(void *)&v176[0] = v175;
  sub_1000F0D24(&v177, v119, v121, v124);
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceLastUpdatedDateKey);
  uint64_t v127 = v126;
  uint64_t v128 = &selRef_dependentAuthTokenForAccount_;
  id v129 = [v7 doubleFromColumn:14 inStatement:v174];
  v130 = &selRef_dependentAuthTokenForAccount_;
  [v129 doubleValue];
  double v132 = v131;

  *((void *)&v180 + 1) = &type metadata for Double;
  *(double *)&__int128 v179 = v132 * 1000.0;
  sub_1000B8EB0(&v179, &v177);
  char v133 = swift_isUniquelyReferenced_nonNull_native(v175);
  sub_1000F0D24(&v177, v125, v127, v133);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v134 = [v7 dataFromColumn:15 inStatement:v174];
  uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v134);
  unint64_t v137 = v136;

  v138 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v179 = 0LL;
  id v140 = [v138 JSONObjectWithData:isa options:0 error:&v179];

  id v141 = (id)v179;
  if (v140)
  {
    _bridgeAnyObjectToAny(_:)(&v179, v140);
    swift_unknownObjectRelease(v140);
  }

  else
  {
    v142 = v141;
    uint64_t v143 = _convertNSErrorToError(_:)(v141);

    swift_willThrow(v144);
    swift_errorRelease(v143);
    __int128 v179 = 0u;
    __int128 v180 = 0u;
  }

  uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceAdditionalInfoKey);
  uint64_t v147 = v146;
  sub_1000C5370((uint64_t)&v179, (uint64_t)&v177);
  if (v178)
  {
    uint64_t v148 = sub_1000B86DC(&qword_10020E598);
    if ((swift_dynamicCast(v176, &v177, (char *)&type metadata for Any + 8, v148, 6LL) & 1) != 0)
    {
      v178 = (void *)v148;
      *(void *)&__int128 v177 = *(void *)&v176[0];
      sub_1000B8EB0(&v177, v176);
      char v149 = swift_isUniquelyReferenced_nonNull_native(v175);
      sub_1000F0D24(v176, v145, v147, v149);
      swift_bridgeObjectRelease(v147);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      goto LABEL_45;
    }
  }

  else
  {
    sub_1000BE490((uint64_t)&v177);
  }

  sub_1000DFB2C(v145, v147, &v177);
  swift_bridgeObjectRelease(v147);
  sub_1000BE490((uint64_t)&v177);
LABEL_45:
  uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceServicesKey);
  uint64_t v152 = v151;
  id v153 = [v7 stringFromColumn:17 inStatement:v174];
  if (v153)
  {
    v154 = v153;
    uint64_t v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
    uint64_t v157 = v156;

    v178 = &type metadata for String;
    *(void *)&__int128 v177 = v155;
    *((void *)&v177 + 1) = v157;
    uint64_t v128 = &selRef_dependentAuthTokenForAccount_;
    v130 = &selRef_dependentAuthTokenForAccount_;
    sub_1000B8EB0(&v177, v176);
    char v158 = swift_isUniquelyReferenced_nonNull_native(v175);
    sub_1000F0D24(v176, v150, v152, v158);
    swift_bridgeObjectRelease(v152);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_1000DFB2C(v150, v152, &v177);
    swift_bridgeObjectRelease(v152);
    sub_1000BE490((uint64_t)&v177);
  }

  uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceLastCacheUpdatedDateKey);
  uint64_t v161 = v160;
  id v162 = objc_msgSend(v7, v128[52], 18, v174);
  [v162 v130[53]];
  double v164 = v163;

  v178 = &type metadata for Double;
  *(double *)&__int128 v177 = v164 * 1000.0;
  sub_1000B8EB0(&v177, v176);
  char v165 = swift_isUniquelyReferenced_nonNull_native(v175);
  sub_1000F0D24(v176, v159, v161, v165);
  swift_bridgeObjectRelease(v161);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v166 = [v7 stringFromColumn:16 inStatement:v174];
  if (v166)
  {
    v167 = (void *)(a3 + 16);

    swift_beginAccess(a3 + 16, &v177, 33LL, 0LL);
    v168 = *(void **)(a3 + 16);
    char v169 = swift_isUniquelyReferenced_nonNull_native(v168);
    *(void *)(a3 + swift_weakDestroy(v0 + 16) = v168;
    if ((v169 & 1) == 0)
    {
      v168 = sub_1000EB8B0(0LL, v168[2] + 1LL, 1, v168);
      void *v167 = v168;
    }

    unint64_t v171 = v168[2];
    unint64_t v170 = v168[3];
    if (v171 >= v170 >> 1)
    {
      v168 = sub_1000EB8B0((void *)(v170 > 1), v171 + 1, 1, v168);
      void *v167 = v168;
    }

    v168[2] = v171 + 1;
    v168[v171 + 4] = v175;
    swift_endAccess(&v177);
    sub_1000B98C0(v135, v137);
    return sub_1000BE490((uint64_t)&v179);
  }

  else
  {
    sub_1000B98C0(v135, v137);
    sub_1000BE490((uint64_t)&v179);
    return swift_bridgeObjectRelease(v175);
  }

uint64_t sub_1000DE4F8(uint64_t a1, uint64_t a2)
{
  v3[2] = a2;
  v3[3] = v2;
  uint64_t v5 = (void *)swift_task_alloc(dword_10020D7A4);
  void v3[4] = v5;
  void *v5 = v3;
  v5[1] = sub_1000DE548;
  return sub_1000BE528(a1);
}

uint64_t sub_1000DE548()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  if (v0) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else {
    return swift_task_switch(sub_1000DE5B4, 0LL, 0LL);
  }
}

void sub_1000DE5B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 12_Block_object_dispose(&a9, 8) = v2;
  uint64_t v3 = 1LL << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  int64_t v6 = 0LL;
  if (v5) {
    goto LABEL_26;
  }
LABEL_7:
  int64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  int64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v0 + 128)) + 63) >> 6;
  uint64_t v9 = *(void *)(v0 + 16);
  if (v7 >= v8)
  {
LABEL_31:
    swift_release(v9);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v10 = v9 + 64;
  unint64_t v11 = *(void *)(v9 + 64 + 8 * v7);
  ++v6;
  if (!v11)
  {
    int64_t v6 = v7 + 1;
    if (v7 + 1 >= v8) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (!v11)
    {
      int64_t v6 = v7 + 2;
      if (v7 + 2 >= v8) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v10 + 8 * v6);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v12 < v8)
        {
          unint64_t v11 = *(void *)(v10 + 8 * v12);
          if (v11)
          {
            int64_t v6 = v12;
            goto LABEL_20;
          }

          while (1)
          {
            int64_t v6 = v12 + 1;
            if (__OFADD__(v12, 1LL)) {
              break;
            }
            if (v6 >= v8) {
              goto LABEL_31;
            }
            unint64_t v11 = *(void *)(v10 + 8 * v6);
            ++v12;
            if (v11) {
              goto LABEL_20;
            }
          }

uint64_t sub_1000DE884()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 64);
    swift_bridgeObjectRelease(*(void *)(v2 + 80));
    swift_bridgeObjectRelease(v4);
    unint64_t v5 = sub_1000DEBCC;
  }

  else
  {
    unint64_t v5 = sub_1000DE8FC;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_1000DE8FC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);

  if (v1 == v2)
  {
LABEL_2:
    uint64_t v4 = *(void **)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(v3);

    int64_t v5 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
    if (v6)
    {
LABEL_3:
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v5 << 6);
      uint64_t v9 = *(void *)(v0 + 16);
      goto LABEL_18;
    }

    while (1)
    {
      int64_t v10 = v5 + 1;
      if (__OFADD__(v5, 1LL))
      {
        __break(1u);
        goto LABEL_37;
      }

      int64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v0 + 128)) + 63) >> 6;
      uint64_t v9 = *(void *)(v0 + 16);
      if (v10 >= v11) {
        goto LABEL_32;
      }
      uint64_t v12 = v9 + 64;
      unint64_t v13 = *(void *)(v9 + 64 + 8 * v10);
      ++v5;
      if (!v13)
      {
        int64_t v5 = v10 + 1;
        if (v10 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v12 + 8 * v5);
        if (!v13)
        {
          int64_t v5 = v10 + 2;
          if (v10 + 2 >= v11) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v12 + 8 * v5);
          if (!v13)
          {
            int64_t v14 = v10 + 3;
            if (v14 >= v11)
            {
LABEL_32:
              swift_release(v9);
              (*(void (**)(void))(v0 + 8))();
              return;
            }

            unint64_t v13 = *(void *)(v12 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v5 = v14 + 1;
                if (__OFADD__(v14, 1LL)) {
                  break;
                }
                if (v5 >= v11) {
                  goto LABEL_32;
                }
                unint64_t v13 = *(void *)(v12 + 8 * v5);
                ++v14;
                if (v13) {
                  goto LABEL_17;
                }
              }

uint64_t sub_1000DEBCC()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 16);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DEC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000B86DC(&qword_10020D1D0);
  v4[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000DECC8, 0LL, 0LL);
}

uint64_t sub_1000DECC8()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 104) = sub_1000B8C38(v2, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 40);
  uint64_t v150 = (void **)(v0 + 40);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v148 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v0 + 32) = v6;
    id v8 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    *uint64_t v148 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DeviceListProvider - Begin saving device %@", v7, 0xCu);
    uint64_t v9 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v148, 1LL, v9);
    swift_slowDealloc(v148, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  id v10 = [*(id *)(v0 + 40) lastUpdatedDate];
  uint64_t v11 = *(void *)(v0 + 96);
  if (!v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 80) + 56LL))( *(void *)(v0 + 96),  1LL,  1LL,  *(void *)(v0 + 72));
LABEL_86:
    __break(1u);
  }

  uint64_t v12 = v10;
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 72);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v10);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v14, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v15);
  uint64_t v16 = (id *)(v0 + 16);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v21 = *(void **)(v0 + 40);
  double v22 = ((double (*)(void))Date.timeIntervalSince1970.getter)();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v23(v17, v20);
  id v147 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v22];
  *(void *)(v0 + 112) = v147;
  uint64_t v24 = Date.init()();
  double v25 = Date.timeIntervalSince1970.getter(v24);
  v23(v18, v20);
  id v149 = [objc_allocWithZone(NSDecimalNumber) initWithDouble:v25];
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v149;
  id v26 = [v21 additionalInfo];
  if (v26)
  {
    uint64_t v27 = v26;
    unint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v26,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  else
  {
    unint64_t v28 = sub_1000F4ABC((uint64_t)_swiftEmptyArrayStorage);
  }

  uint64_t v29 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  id *v16 = 0LL;
  id v31 = [v29 dataWithJSONObject:isa options:0 error:v16];

  id v32 = *v16;
  if (v31)
  {
    uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v35 = v34;
  }

  else
  {
    uint64_t v36 = v32;
    uint64_t v37 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v38);
    swift_errorRelease(v37);
    uint64_t v33 = 0LL;
    unint64_t v35 = 0xF000000000000000LL;
  }

  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v33;
  *(void *)(v0 + 136) = v35;
  uint64_t v39 = *(void **)(v0 + 40);
  uint64_t v40 = sub_1000B86DC(&qword_10020E1A0);
  uint64_t v41 = swift_allocObject(v40, 640LL, 7LL);
  *(void *)(v0 + 144) = v41;
  *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_1001640E0;
  id v42 = [v39 machineId];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v46 = v45;

    *(void *)(v41 + 56) = &type metadata for String;
    if (v46) {
      goto LABEL_19;
    }
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 0LL;
    *(void *)(v41 + 56) = &type metadata for String;
  }

  unint64_t v46 = 0xE000000000000000LL;
LABEL_19:
  uint64_t v47 = *v150;
  *(void *)(v41 + 32) = v44;
  *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v46;
  id v48 = [v47 name];
  if (v48)
  {
    char v49 = v48;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    unint64_t v52 = v51;

    id v53 = (uint64_t *)(v41 + 64);
    *(void *)(v41 + 8_Block_object_dispose(&a9, 8) = &type metadata for String;
    if (v52)
    {
      uint64_t *v53 = v50;
      goto LABEL_24;
    }
  }

  else
  {
    id v53 = (uint64_t *)(v41 + 64);
    *(void *)(v41 + 8_Block_object_dispose(&a9, 8) = &type metadata for String;
  }

  uint64_t *v53 = 0LL;
  unint64_t v52 = 0xE000000000000000LL;
LABEL_24:
  uint64_t v54 = *v150;
  *(void *)(v41 + 72) = v52;
  id v55 = [v54 serialNumber];
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    unint64_t v59 = v58;

    uint64_t v60 = (uint64_t *)(v41 + 96);
    *(void *)(v41 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
    if (v59)
    {
      *uint64_t v60 = v57;
      goto LABEL_29;
    }
  }

  else
  {
    uint64_t v60 = (uint64_t *)(v41 + 96);
    *(void *)(v41 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
  }

  *uint64_t v60 = 0LL;
  unint64_t v59 = 0xE000000000000000LL;
LABEL_29:
  uint64_t v61 = *v150;
  *(void *)(v41 + 104) = v59;
  id v62 = [v61 model];
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    unint64_t v66 = v65;

    char v67 = (uint64_t *)(v41 + 128);
    *(void *)(v41 + 152) = &type metadata for String;
    if (v66)
    {
      *char v67 = v64;
      goto LABEL_34;
    }
  }

  else
  {
    char v67 = (uint64_t *)(v41 + 128);
    *(void *)(v41 + 152) = &type metadata for String;
  }

  *char v67 = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
LABEL_34:
  uint64_t v68 = *v150;
  *(void *)(v41 + 136) = v66;
  id v69 = [v68 operatingSystemName];
  if (v69)
  {
    uint64_t v70 = v69;
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    unint64_t v73 = v72;

    uint64_t v74 = (uint64_t *)(v41 + 160);
    *(void *)(v41 + 184) = &type metadata for String;
    if (v73)
    {
      *uint64_t v74 = v71;
      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v74 = (uint64_t *)(v41 + 160);
    *(void *)(v41 + 184) = &type metadata for String;
  }

  *uint64_t v74 = 0LL;
  unint64_t v73 = 0xE000000000000000LL;
LABEL_39:
  uint64_t v75 = *v150;
  *(void *)(v41 + 16_Block_object_dispose(&a9, 8) = v73;
  id v76 = [v75 operatingSystemVersion];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    unint64_t v80 = v79;

    uint64_t v81 = (uint64_t *)(v41 + 192);
    *(void *)(v41 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
    if (v80)
    {
      *uint64_t v81 = v78;
      goto LABEL_44;
    }
  }

  else
  {
    uint64_t v81 = (uint64_t *)(v41 + 192);
    *(void *)(v41 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
  }

  *uint64_t v81 = 0LL;
  unint64_t v80 = 0xE000000000000000LL;
LABEL_44:
  uint64_t v82 = *v150;
  *(void *)(v41 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v80;
  id v83 = [v82 colorCode];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    unint64_t v87 = v86;

    uint64_t v88 = (uint64_t *)(v41 + 224);
    *(void *)(v41 + 24_Block_object_dispose(&a9, 8) = &type metadata for String;
    if (v87)
    {
      uint64_t *v88 = v85;
      goto LABEL_49;
    }
  }

  else
  {
    uint64_t v88 = (uint64_t *)(v41 + 224);
    *(void *)(v41 + 24_Block_object_dispose(&a9, 8) = &type metadata for String;
  }

  uint64_t *v88 = 0LL;
  unint64_t v87 = 0xE000000000000000LL;
LABEL_49:
  id v89 = *v150;
  *(void *)(v41 + 232) = v87;
  id v90 = [v89 coverGlassColorCode];
  if (v90)
  {
    uint64_t v91 = v90;
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    unint64_t v94 = v93;

    uint64_t v95 = (uint64_t *)(v41 + 256);
    *(void *)(v41 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
    if (v94)
    {
      uint64_t *v95 = v92;
      goto LABEL_54;
    }
  }

  else
  {
    uint64_t v95 = (uint64_t *)(v41 + 256);
    *(void *)(v41 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
  }

  uint64_t *v95 = 0LL;
  unint64_t v94 = 0xE000000000000000LL;
LABEL_54:
  uint64_t v96 = *v150;
  *(void *)(v41 + 264) = v94;
  id v97 = [v96 backingColorCode];
  if (v97)
  {
    id v98 = v97;
    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    unint64_t v101 = v100;

    uint64_t v102 = (uint64_t *)(v41 + 288);
    *(void *)(v41 + 312) = &type metadata for String;
    if (v101)
    {
      uint64_t *v102 = v99;
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v102 = (uint64_t *)(v41 + 288);
    *(void *)(v41 + 312) = &type metadata for String;
  }

  uint64_t *v102 = 0LL;
  unint64_t v101 = 0xE000000000000000LL;
LABEL_59:
  char v103 = *v150;
  *(void *)(v41 + 296) = v101;
  id v104 = [v103 housingColorCode];
  if (v104)
  {
    uint64_t v105 = v104;
    uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    unint64_t v108 = v107;

    char v109 = (uint64_t *)(v41 + 320);
    *(void *)(v41 + 344) = &type metadata for String;
    if (v108)
    {
      *char v109 = v106;
      goto LABEL_64;
    }
  }

  else
  {
    char v109 = (uint64_t *)(v41 + 320);
    *(void *)(v41 + 344) = &type metadata for String;
  }

  *char v109 = 0LL;
  unint64_t v108 = 0xE000000000000000LL;
LABEL_64:
  uint64_t v110 = *v150;
  *(void *)(v41 + 32_Block_object_dispose(&a9, 8) = v108;
  id v111 = [v110 enclosureColorCode];
  if (v111)
  {
    uint64_t v112 = v111;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
    unint64_t v115 = v114;

    uint64_t v116 = (uint64_t *)(v41 + 352);
    *(void *)(v41 + 376) = &type metadata for String;
    if (v115)
    {
      uint64_t *v116 = v113;
      goto LABEL_69;
    }
  }

  else
  {
    uint64_t v116 = (uint64_t *)(v41 + 352);
    *(void *)(v41 + 376) = &type metadata for String;
  }

  uint64_t *v116 = 0LL;
  unint64_t v115 = 0xE000000000000000LL;
LABEL_69:
  uint64_t v117 = *v150;
  *(void *)(v41 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v115;
  [v117 inCircle];
  Class v118 = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v119 = sub_1000D0510(0LL, &qword_10020DE50, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v41 + 40_Block_object_dispose(&a9, 8) = v119;
  *(void *)(v41 + 384) = v118;
  id v120 = [v117 buildNumber];
  if (v120)
  {
    uint64_t v121 = v120;
    uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
    unint64_t v124 = v123;

    uint64_t v125 = (uint64_t *)(v41 + 416);
    *(void *)(v41 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
    if (v124)
    {
      uint64_t *v125 = v122;
      goto LABEL_74;
    }
  }

  else
  {
    uint64_t v125 = (uint64_t *)(v41 + 416);
    *(void *)(v41 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
  }

  uint64_t *v125 = 0LL;
  unint64_t v124 = 0xE000000000000000LL;
LABEL_74:
  uint64_t v126 = *(void *)(v0 + 48);
  uint64_t v127 = *(void *)(v0 + 56);
  uint64_t v128 = *(void **)(v0 + 40);
  *(void *)(v41 + 424) = v124;
  [v128 trusted];
  v129.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(void *)(v41 + 472) = v119;
  *(NSNumber *)(v41 + 44_Block_object_dispose(&a9, 8) = v129;
  uint64_t v130 = sub_1000D0510(0LL, &qword_10020DE58, &OBJC_CLASS___NSDecimalNumber_ptr);
  uint64_t v131 = v130;
  *(void *)(v41 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v147;
  *(void *)(v41 + 536) = &type metadata for Data;
  if (v35 >> 60 == 15) {
    uint64_t v132 = 0LL;
  }
  else {
    uint64_t v132 = v33;
  }
  unint64_t v133 = 0xC000000000000000LL;
  if (v35 >> 60 != 15) {
    unint64_t v133 = v35;
  }
  *(void *)(v41 + 504) = v130;
  *(void *)(v41 + 512) = v132;
  *(void *)(v41 + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v133;
  *(void *)(v41 + 56_Block_object_dispose(&a9, 8) = &type metadata for String;
  *(void *)(v41 + 544) = v126;
  *(void *)(v41 + 552) = v127;
  id v134 = v147;
  swift_bridgeObjectRetain(v127);
  sub_1000DFAD4(v33, v35);
  id v135 = [v128 services];
  if (!v135)
  {
    id v140 = (uint64_t *)(v41 + 576);
    *(void *)(v41 + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
    goto LABEL_83;
  }

  unint64_t v136 = v135;
  uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
  unint64_t v139 = v138;

  id v140 = (uint64_t *)(v41 + 576);
  *(void *)(v41 + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = &type metadata for String;
  if (!v139)
  {
LABEL_83:
    uint64_t *v140 = 0LL;
    unint64_t v139 = 0xE000000000000000LL;
    goto LABEL_84;
  }

  uint64_t *v140 = v137;
LABEL_84:
  *(void *)(v41 + 584) = v139;
  *(void *)(v41 + 632) = v131;
  *(void *)(v41 + 60_Block_object_dispose(&a9, 8) = v149;
  id v141 = v149;
  _StringGuts.grow(_:)(286LL);
  v142._object = (void *)0x800000010016DE30LL;
  v142._countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v142);
  v143._countAndFlagsBits = 0x6C5F656369766564LL;
  v143._object = (void *)0xEB00000000747369LL;
  String.append(_:)(v143);
  v144._countAndFlagsBits = 0xD000000000000105LL;
  v144._object = (void *)0x800000010016E600LL;
  String.append(_:)(v144);
  *(void *)(v0 + 152) = 0xE000000000000000LL;
  uint64_t v145 = (void *)swift_task_alloc(dword_10020D7AC);
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v145;
  *uint64_t v145 = v0;
  v145[1] = sub_1000DF734;
  return sub_1000BEA60(0LL, 0xE000000000000000LL, v41);
}

uint64_t sub_1000DF734(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 160);
  *(_BYTE *)(v3 + 18_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  *(void *)(v3 + 16_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = *(void *)(v3 + 152);
  swift_bridgeObjectRelease(*(void *)(v3 + 144));
  swift_bridgeObjectRelease(v5);
  if (v1) {
    uint64_t v6 = sub_1000DFA24;
  }
  else {
    uint64_t v6 = sub_1000DF800;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000DF800()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 40));
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v16 = *(unsigned __int8 *)(v0 + 180);
    uint64_t v18 = *(void *)(v0 + 128);
    unint64_t v19 = *(void *)(v0 + 136);
    uint64_t v17 = *(void **)(v0 + 120);
    uint64_t v3 = *(void **)(v0 + 40);
    log = v1;
    uint64_t v4 = swift_slowAlloc(18LL, -1LL);
    uint64_t v5 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v4 = 138412546;
    *(void *)(v0 + 24) = v3;
    id v6 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    void *v5 = v3;

    *(_WORD *)(v4 + 12) = 1024;
    *(_DWORD *)(v0 + 176) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 180);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v2,  "DeviceListProvider - Finished saving device %@ with success: %{BOOL}d",  (uint8_t *)v4,  0x12u);
    uint64_t v7 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v5, 1LL, v7);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);

    sub_1000B98AC(v18, v19);
    uint64_t v8 = 112LL;
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 128);
    unint64_t v9 = *(void *)(v0 + 136);
    uint64_t v11 = *(void **)(v0 + 40);

    sub_1000B98AC(v10, v9);
    uint64_t v8 = 120LL;
  }

  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v13 = *(void *)(v0 + 96);

  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DFA24()
{
  os_log_type_t v2 = *(void **)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  sub_1000B98AC(*(void *)(v0 + 128), *(void *)(v0 + 136));

  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DeviceListProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd18DeviceListProvider);
}

uint64_t sub_1000DFAD4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000DFAE8(result, a2);
  }
  return result;
}

uint64_t sub_1000DFAE8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

double sub_1000DFB2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_1000F9BB8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000F1354();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_1000B8EB0((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_1000DFC1C(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

unint64_t sub_1000DFC1C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          int v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            _OWORD *v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            _OWORD *v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1000DFDF0(void *a1)
{
  v73[0] = 0LL;
  v73[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unsigned int v2 = [a1 includeUntrustedDevices];
  if (v2) {
    unint64_t v3 = 0xD00000000000002BLL;
  }
  else {
    unint64_t v3 = 0xD00000000000003BLL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010016E710LL;
  }
  else {
    unint64_t v4 = 0x800000010016E740LL;
  }
  id v5 = [a1 serialNumbers];
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String);

    int64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      unint64_t v71 = v3;
      sub_1000F3390(0, v8, 0);
      uint64_t v68 = v7;
      __int128 v9 = (void *)(v7 + 40);
      do
      {
        uint64_t v10 = *(v9 - 1);
        uint64_t v11 = (void *)*v9;
        v73[0] = 39LL;
        v73[1] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(*v9);
        v12._countAndFlagsBits = v10;
        v12._object = v11;
        String.append(_:)(v12);
        v13._countAndFlagsBits = 39LL;
        v13._object = (void *)0xE100000000000000LL;
        String.append(_:)(v13);
        swift_bridgeObjectRelease(v11);
        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1) {
          sub_1000F3390(v14 > 1, v15 + 1, 1);
        }
        v9 += 2;
        _swiftEmptyArrayStorage[2] = v15 + 1;
        int v16 = &_swiftEmptyArrayStorage[2 * v15];
        void v16[4] = 39LL;
        void v16[5] = 0xE100000000000000LL;
        --v8;
      }

      while (v8);
      swift_bridgeObjectRelease(v68);
      unint64_t v3 = v71;
    }

    else
    {
      swift_bridgeObjectRelease(v7);
    }

    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v17 = sub_1000B86DC(&qword_10020E5A0);
    unint64_t v18 = sub_1000E04D0();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v17, v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23._countAndFlagsBits = 41LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    v73[0] = v3;
    v73[1] = v4;
    swift_bridgeObjectRetain(v4);
    v24._countAndFlagsBits = 0xD000000000000017LL;
    v24._object = (void *)0x800000010016E7A0LL;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(0x800000010016E7A0LL);
  }

  id v25 = [a1 operatingSystems];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);

    int64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      unint64_t v72 = v3;
      sub_1000F3390(0, v28, 0);
      uint64_t v69 = v27;
      uint64_t v29 = (void *)(v27 + 40);
      do
      {
        uint64_t v30 = *(v29 - 1);
        id v31 = (void *)*v29;
        v73[0] = 39LL;
        v73[1] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(*v29);
        v32._countAndFlagsBits = v30;
        v32._object = v31;
        String.append(_:)(v32);
        v33._countAndFlagsBits = 39LL;
        v33._object = (void *)0xE100000000000000LL;
        String.append(_:)(v33);
        swift_bridgeObjectRelease(v31);
        unint64_t v35 = _swiftEmptyArrayStorage[2];
        unint64_t v34 = _swiftEmptyArrayStorage[3];
        if (v35 >= v34 >> 1) {
          sub_1000F3390(v34 > 1, v35 + 1, 1);
        }
        v29 += 2;
        _swiftEmptyArrayStorage[2] = v35 + 1;
        uint64_t v36 = &_swiftEmptyArrayStorage[2 * v35];
        v36[4] = 39LL;
        v36[5] = 0xE100000000000000LL;
        --v28;
      }

      while (v28);
      swift_bridgeObjectRelease(v69);
      unint64_t v3 = v72;
    }

    else
    {
      swift_bridgeObjectRelease(v27);
    }

    strcpy((char *)v73, " AND os IN (");
    BYTE5(v73[1]) = 0;
    HIWORD(v73[1]) = -5120;
    uint64_t v37 = sub_1000B86DC(&qword_10020E5A0);
    unint64_t v38 = sub_1000E04D0();
    uint64_t v39 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v37, v38);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v41);
    v43._countAndFlagsBits = 41LL;
    v43._object = (void *)0xE100000000000000LL;
    String.append(_:)(v43);
    uint64_t v44 = v73[0];
    unint64_t v45 = (void *)v73[1];
    v73[0] = v3;
    v73[1] = v4;
    swift_bridgeObjectRetain(v4);
    v46._countAndFlagsBits = v44;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v45);
  }

  id v47 = [a1 services];
  if (v47)
  {
    id v48 = v47;
    uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, &type metadata for String);

    int64_t v50 = *(void *)(v49 + 16);
    if (v50)
    {
      sub_1000F3390(0, v50, 0);
      uint64_t v70 = v49;
      unint64_t v51 = (void *)(v49 + 40);
      do
      {
        uint64_t v52 = *(v51 - 1);
        id v53 = (void *)*v51;
        swift_bridgeObjectRetain(*v51);
        _StringGuts.grow(_:)(20LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        v73[0] = 0xD000000000000010LL;
        v73[1] = 0x800000010016E780LL;
        v54._countAndFlagsBits = v52;
        v54._object = v53;
        String.append(_:)(v54);
        v55._countAndFlagsBits = 10021LL;
        v55._object = (void *)0xE200000000000000LL;
        String.append(_:)(v55);
        swift_bridgeObjectRelease(v53);
        unint64_t v57 = _swiftEmptyArrayStorage[2];
        unint64_t v56 = _swiftEmptyArrayStorage[3];
        if (v57 >= v56 >> 1) {
          sub_1000F3390(v56 > 1, v57 + 1, 1);
        }
        v51 += 2;
        _swiftEmptyArrayStorage[2] = v57 + 1;
        unint64_t v58 = &_swiftEmptyArrayStorage[2 * v57];
        v58[4] = 0xD000000000000010LL;
        v58[5] = 0x800000010016E780LL;
        --v50;
      }

      while (v50);
      swift_bridgeObjectRelease(v70);
    }

    else
    {
      swift_bridgeObjectRelease(v49);
    }

    uint64_t v59 = sub_1000B86DC(&qword_10020E5A0);
    unint64_t v60 = sub_1000E04D0();
    uint64_t v61 = BidirectionalCollection<>.joined(separator:)(542265120LL, 0xE400000000000000LL, v59, v60);
    uint64_t v63 = v62;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v64._countAndFlagsBits = v61;
    v64._object = v63;
    String.append(_:)(v64);
    swift_bridgeObjectRelease(v63);
    v65._countAndFlagsBits = 41LL;
    v65._object = (void *)0xE100000000000000LL;
    String.append(_:)(v65);
    v73[0] = v3;
    v73[1] = v4;
    swift_bridgeObjectRetain(v4);
    v66._countAndFlagsBits = 0x2820444E4120LL;
    v66._object = (void *)0xE600000000000000LL;
    String.append(_:)(v66);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(0xE600000000000000LL);
  }

  return v3;
}

uint64_t sub_1000E048C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000E04B0(uint64_t a1, uint64_t a2)
{
  return sub_1000DD424(a1, a2, v2);
}

uint64_t sub_1000E04B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E04C8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000E04D0()
{
  unint64_t result = qword_10020E5A8;
  if (!qword_10020E5A8)
  {
    uint64_t v1 = sub_1000C4E90(&qword_10020E5A0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10020E5A8);
  }

  return result;
}

void sub_1000E052C(void *a1)
{
  id v12 = 0LL;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  unsigned int v3 = objc_msgSendSuper2(&v11, "signRequest:error:", a1, &v12);
  id v4 = v12;
  if (v3)
  {
    uint64_t v5 = *(void *)&v1[OBJC_IVAR___AKApplicationMetadataRequestProvider_clientID + 8];
    id v6 = v12;
    if (v5)
    {
      swift_bridgeObjectRetain(v5);
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      NSString v8 = String._bridgeToObjectiveC()();
      [a1 addValue:v7 forHTTPHeaderField:v8];
    }
  }

  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v10);
  }

void sub_1000E06F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  *(void *)&__int128 v24 = 0LL;
  v23.receiver = v2;
  v23.super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v23, "validateResponseData:error:", isa, &v24);

  uint64_t v5 = v24;
  if (v4)
  {
    id v6 = (id)v24;
    return;
  }

  id v7 = (id)v24;
  uint64_t v8 = _convertNSErrorToError(_:)(v5);

  swift_willThrow(v9);
  uint64_t v10 = (void *)_convertErrorToNSError(_:)(v8);
  if ([v10 code] != (id)-7010) {
    goto LABEL_16;
  }
  id v11 = [v10 userInfo];
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_1000F9BB8(25445LL, 0xE200000000000000LL), (v14 & 1) != 0))
  {
    sub_1000B8E74(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v24);
  }

  else
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
  }

  swift_bridgeObjectRelease(v12);
  if (!*((void *)&v25 + 1))
  {
    sub_1000BE490((uint64_t)&v24);
LABEL_16:
    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v16 = v18;
    uint64_t v17 = -16008LL;
    goto LABEL_17;
  }

  if ((swift_dynamicCast(&v22, &v24, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0
    || v22 != -24000)
  {
    goto LABEL_16;
  }

  type metadata accessor for SignInWithAppleError(0LL);
  uint64_t v16 = v15;
  uint64_t v17 = -16012LL;
LABEL_17:
  uint64_t v22 = v17;
  unint64_t v19 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v20 = sub_1000BC768();
  uint64_t v21 = _BridgedStoredNSError.init(_:userInfo:)(&v24, &v22, v19, v16, v20);
  swift_willThrow(v21);
  swift_errorRelease(v8);
}

id sub_1000E0CE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ApplicationMetadataRequestProvider()
{
  return objc_opt_self(&OBJC_CLASS___AKApplicationMetadataRequestProvider);
}

void *sub_1000E0D4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    unint64_t result = (void *)sub_1000E470C(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 64;
    uint64_t v19 = v2;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v20 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      unint64_t result = (void *)specialized ContiguousArray._endMutation()(v13);
      int64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(v8 + 8 * v10);
      if ((v14 & (1LL << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v15 = v14 & (-2LL << (v4 & 0x3F));
      if (v15)
      {
        int64_t v9 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v16 = v10 + 1;
        unint64_t v17 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v17)
        {
          unint64_t v18 = *(void *)(v8 + 8 * v16);
          if (v18)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v18)) + (v16 << 6);
          }

          else
          {
            while (v17 - 2 != v10)
            {
              unint64_t v18 = *(void *)(a1 + 80 + 8 * v10++);
              if (v18)
              {
                unint64_t v16 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }

      uint64_t v7 = v20 + 1;
      uint64_t v4 = v9;
      if (v20 + 1 == v19) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  return result;
}

uint64_t sub_1000E0F28(uint64_t a1)
{
  *(void *)(v2 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  *(void *)(v2 + 28_Block_object_dispose(&a9, 8) = v1;
  return swift_task_switch(sub_1000E0F40, 0LL, 0LL);
}

uint64_t sub_1000E0F40()
{
  if ([*(id *)(*(void *)(v0 + 288) + 16) isSiwaInPasswordsFeatureEnabled])
  {
    sub_1000E26B8();
    id v1 = [*(id *)(v0 + 280) altDSID];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v4 = v3;

    *(void *)(v0 + 296) = v4;
    int v5 = (void *)swift_task_alloc(dword_10020E6C4);
    *(void *)(v0 + 304) = v5;
    void *v5 = v0;
    v5[1] = sub_1000E112C;
    uint64_t v6 = *(void *)(v0 + 288);
    v5[17] = v4;
    v5[18] = v6;
    uint8_t v5[16] = v2;
    return swift_task_switch(sub_1000E2914, 0LL, 0LL);
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_1000B8C38(v8, (uint64_t)qword_100210FF0);
    unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Feature flag SiwaInPasswords is not enabled", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v14 = v13;
    *(void *)(v0 + 264) = -16001LL;
    unint64_t v15 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v16 = sub_1000BC768();
    unint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 272), v0 + 264, v15, v14, v16);
    swift_willThrow(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000E112C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 304LL);
  v3[39] = a1;
  v3[40] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    int v5 = sub_1000E23D0;
  }

  else
  {
    swift_bridgeObjectRelease(v3[37]);
    int v5 = sub_1000E11A0;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000E11A0()
{
  if (sub_1000E5364(*(void *)(v0 + 312)))
  {
    uint64_t v1 = *(void **)(v0 + 280);
    uint64_t v2 = *(void *)(v0 + 288);
    swift_bridgeObjectRelease(*(void *)(v0 + 312));
    uint64_t v3 = *(void **)(v2 + 96);
    NSString v4 = [v1 altDSID];
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v6 = v5;
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }

    uint64_t v7 = v0 + 80;
    *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = v4;
    uint64_t v8 = *(void *)(*(void *)(v0 + 288) + 24LL);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v0 + 256;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v0;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = sub_1000E1500;
    uint64_t v9 = swift_continuation_init(v0 + 80, 1LL);
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    unint64_t v10 = (void *)(v0 + 144);
    v10[1] = 0x40000000LL;
    v10[2] = sub_1000E2D64;
    v10[3] = &unk_1001CC240;
    void v10[4] = v9;
    [v3 fetchAppInformationWithAltDSID:v4 client:v8 completion:v10];
    uint64_t v11 = v7;
    return swift_continuation_await(v11);
  }

  uint64_t v13 = *(void *)(v0 + 312);
  uint64_t v14 = *(void *)(v0 + 320);
  *(void *)(v0 + 376) = v13;
  uint64_t v15 = swift_bridgeObjectRetain(v13);
  unint64_t v16 = (unint64_t)sub_1000E0D4C(v15);
  swift_bridgeObjectRelease(v13);
  if ((v16 & 0x8000000000000000LL) != 0 || (v16 & 0x4000000000000000LL) != 0)
  {
    uint64_t v17 = (uint64_t)sub_1000F369C(v16);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    uint64_t v17 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }

  uint64_t v19 = *(void **)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 288);
  *(void *)(v0 + 232) = v17;
  sub_1000BC7B0((void *)(v18 + 56), *(void *)(v18 + 80));
  id v20 = [v19 altDSID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v22 = v21;

  char v23 = sub_1000EC120();
  if (v14)
  {
    swift_errorRelease(v14);
    swift_bridgeObjectRelease(v13);
    uint64_t v13 = v22;
  }

  else
  {
    char v24 = v23;
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = v0 + 16;
      uint64_t v26 = *(void **)(*(void *)(v0 + 288) + 48LL);
      id v27 = [*(id *)(v0 + 280) currentGroupID];
      *(void *)(v0 + 384) = v27;
      *(void *)(v0 + 56) = v0 + 224;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1000E1914;
      uint64_t v28 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 184) = _NSConcreteStackBlock;
      uint64_t v29 = (void *)(v0 + 184);
      v29[1] = 0x40000000LL;
      v29[2] = sub_1000D0728;
      v29[3] = &unk_1001CC228;
      void v29[4] = v28;
      [v26 fetchSharedAccountsWithGroupID:v27 completionHandler:v29];
      uint64_t v11 = v25;
      return swift_continuation_await(v11);
    }
  }

  swift_bridgeObjectRelease(v13);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v31 = sub_1000B8C38(v30, (uint64_t)qword_100210FF0);
  Swift::String v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Account is not eligible for sharing. Skipping fetching of shared accounts.",  v34,  2u);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  sub_1000E2E04((uint64_t *)(v0 + 232));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
}

uint64_t sub_1000E1500()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 336LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E2404;
  }
  else {
    uint64_t v2 = sub_1000E1560;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000E1560()
{
  uint64_t v1 = *(void **)(v0 + 256);

  uint64_t v2 = *(void **)(v0 + 280);
  id v3 = [v2 altDSID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *(void *)(v0 + 344) = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_10020E6C4);
  *(void *)(v0 + 352) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000E1610;
  uint64_t v8 = *(void *)(v0 + 288);
  v7[17] = v6;
  v7[18] = v8;
  uint8_t v7[16] = v4;
  return swift_task_switch(sub_1000E2914, 0LL, 0LL);
}

uint64_t sub_1000E1610(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 352);
  *(void *)(*v2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000E24C0;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 344));
    *(void *)(v4 + 36_Block_object_dispose(&a9, 8) = a1;
    uint64_t v6 = sub_1000E168C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000E168C()
{
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  *(void *)(v0 + 376) = v1;
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  unint64_t v4 = (unint64_t)sub_1000E0D4C(v3);
  swift_bridgeObjectRelease(v1);
  if ((v4 & 0x8000000000000000LL) != 0 || (v4 & 0x4000000000000000LL) != 0)
  {
    uint64_t v5 = (uint64_t)sub_1000F369C(v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }

  uint64_t v7 = *(void **)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 288);
  *(void *)(v0 + 232) = v5;
  sub_1000BC7B0((void *)(v6 + 56), *(void *)(v6 + 80));
  id v8 = [v7 altDSID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v10 = v9;

  char v11 = sub_1000EC120();
  if (v2)
  {
    swift_errorRelease(v2);
    swift_bridgeObjectRelease(v1);
    uint64_t v1 = v10;
  }

  else
  {
    char v12 = v11;
    swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = v0 + 16;
      uint64_t v14 = *(void **)(*(void *)(v0 + 288) + 48LL);
      id v15 = [*(id *)(v0 + 280) currentGroupID];
      *(void *)(v0 + 384) = v15;
      *(void *)(v0 + 56) = v0 + 224;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1000E1914;
      uint64_t v16 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 184) = _NSConcreteStackBlock;
      uint64_t v17 = (void *)(v0 + 184);
      v17[1] = 0x40000000LL;
      v17[2] = sub_1000D0728;
      v17[3] = &unk_1001CC228;
      void v17[4] = v16;
      [v14 fetchSharedAccountsWithGroupID:v15 completionHandler:v17];
      return swift_continuation_await(v13);
    }
  }

  swift_bridgeObjectRelease(v1);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_1000B8C38(v19, (uint64_t)qword_100210FF0);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v23 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Account is not eligible for sharing. Skipping fetching of shared accounts.",  v23,  2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  sub_1000E2E04((uint64_t *)(v0 + 232));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
}

uint64_t sub_1000E1914()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 392) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 376));
    uint64_t v3 = sub_1000E24F4;
  }

  else
  {
    uint64_t v3 = sub_1000E197C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000E197C()
{
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = v0[36];
  v0[50] = v0[28];

  sub_1000BC7B0((void *)(v2 + 104), *(void *)(v2 + 128));
  uint64_t v3 = (void *)swift_task_alloc(dword_10020EA9C);
  v0[51] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000E19E4;
  return sub_1000EC6D8();
}

uint64_t sub_1000E19E4(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 408LL);
  *(void *)(*(void *)v2 + 416LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[47];
    swift_bridgeObjectRelease(v4[50]);
    swift_bridgeObjectRelease(v6);
    uint64_t v7 = sub_1000E2218;
  }

  else
  {
    v4[53] = a1;
    uint64_t v7 = sub_1000E1A6C;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

void sub_1000E1A6C()
{
  uint64_t v1 = *(char **)(v0 + 424);
  unint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = swift_bridgeObjectRetain(*(void *)&v1[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants]);
  uint64_t v4 = sub_1000ECB1C(v3);

  if (v2 >> 62)
  {
    uint64_t v67 = *(void *)(v0 + 400);
    if (v67 < 0) {
      uint64_t v68 = *(void *)(v0 + 400);
    }
    else {
      uint64_t v68 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 400));
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease(v67);
    uint64_t v6 = (uint64_t *)(v0 + 232);
    if (v5) {
      goto LABEL_3;
    }
LABEL_40:
    uint64_t v69 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease(*(void *)(v0 + 400));
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v69);
    sub_1000E2E04(v6);
    (*(void (**)(void))(v0 + 8))(*(void *)(v0 + 232));
    return;
  }

  uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v6 = (uint64_t *)(v0 + 232);
  if (!v5) {
    goto LABEL_40;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v7 = 0LL;
    unint64_t v77 = v2 & 0xC000000000000001LL;
    uint64_t v73 = *(void *)(v0 + 400) + 32LL;
    uint64_t v71 = *(void *)(v0 + 376);
    uint64_t v74 = v6;
    uint64_t v75 = v0;
    uint64_t v72 = v4;
    uint64_t v76 = v5;
    while (1)
    {
      if (v77) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *(void *)(v0 + 400));
      }
      else {
        id v8 = *(id *)(v73 + 8 * v7);
      }
      uint64_t v9 = v8;
      id v10 = [v8 shareInfo];
      if (!v10)
      {
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v23 = type metadata accessor for Logger(0LL);
        sub_1000B8C38(v23, (uint64_t)qword_100210FF0);
        id v24 = v9;
        uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
        os_log_type_t v26 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc(12LL, -1LL);
          uint64_t v28 = swift_slowAlloc(32LL, -1LL);
          v78[0] = v28;
          *(_DWORD *)uint64_t v27 = 136315138;
          id v29 = [v24 clientID];
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          unint64_t v32 = v31;

          *(void *)(v27 + 4) = sub_100103438(v30, v32, v78);
          unint64_t v33 = v32;
          uint64_t v6 = v74;
          uint64_t v0 = v75;
          swift_bridgeObjectRelease(v33);

          _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "We have a keychain item (%s that has an invalid shareInfo",  (uint8_t *)v27,  0xCu);
          swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v28, -1LL, -1LL);
          uint64_t v34 = v27;
          uint64_t v5 = v76;
          swift_slowDealloc(v34, -1LL, -1LL);
        }

        else
        {
        }

        goto LABEL_7;
      }

      char v11 = v10;
      id v12 = [v10 groupID];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      LOBYTE(v12) = sub_1000ECD34(v13, v15, v4);
      swift_bridgeObjectRelease(v15);
      if ((v12 & 1) == 0)
      {
        if (qword_10020CF90 != -1) {
          swift_once(&qword_10020CF90, sub_1000E54FC);
        }
        uint64_t v35 = type metadata accessor for Logger(0LL);
        sub_1000B8C38(v35, (uint64_t)qword_100210FF0);
        id v36 = v9;
        id v37 = v11;
        id v38 = v36;
        id v39 = v37;
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc(22LL, -1LL);
          uint64_t v43 = swift_slowAlloc(64LL, -1LL);
          v78[0] = v43;
          *(_DWORD *)uint64_t v42 = 136315394;
          id v44 = [v38 clientID];
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          unint64_t v47 = v46;

          *(void *)(v42 + 4) = sub_100103438(v45, v47, v78);
          swift_bridgeObjectRelease(v47);

          *(_WORD *)(v42 + 12) = 2080;
          id v48 = [v39 groupID];
          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          unint64_t v51 = v50;

          *(void *)(v42 + 14) = sub_100103438(v49, v51, v78);
          unint64_t v52 = v51;
          uint64_t v6 = v74;
          uint64_t v0 = v75;
          swift_bridgeObjectRelease(v52);

          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Keychain item for (%s is associated with group %s where the user is not a member of. Skipping...",  (uint8_t *)v42,  0x16u);
          swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1LL, -1LL);
          uint64_t v53 = v42;
          uint64_t v4 = v72;
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        else
        {
        }

        goto LABEL_6;
      }

      if (![v11 isCurrentUser])
      {
        id v54 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
        unint64_t v56 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v55 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v56 >= v55 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1LL);
        }
        uint64_t v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
        specialized Array._endMutation()(v57);

        goto LABEL_6;
      }

      id v16 = [v9 clientID];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      if (*(void *)(v71 + 16))
      {
        unint64_t v20 = sub_1000F9BB8(v17, v19);
        if ((v21 & 1) != 0) {
          break;
        }
      }

      swift_bridgeObjectRelease(v19);
      if (qword_10020CF90 != -1) {
        swift_once(&qword_10020CF90, sub_1000E54FC);
      }
      uint64_t v58 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v58, (uint64_t)qword_100210FF0);
      id v59 = v9;
      os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v60 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v22, v60))
      {

        goto LABEL_34;
      }

      uint64_t v61 = swift_slowAlloc(12LL, -1LL);
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      v78[0] = v70;
      *(_DWORD *)uint64_t v61 = 136315138;
      id v62 = [v59 clientID];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      unint64_t v65 = v64;

      uint64_t v66 = v63;
      uint64_t v6 = v74;
      uint64_t v0 = v75;
      *(void *)(v61 + 4) = sub_100103438(v66, v65, v78);
      swift_bridgeObjectRelease(v65);

      _os_log_impl( (void *)&_mh_execute_header,  v22,  v60,  "We have a keychain item (%s which doesn't map to a local account ",  (uint8_t *)v61,  0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);

LABEL_35:
      uint64_t v4 = v72;
LABEL_6:
      uint64_t v5 = v76;
LABEL_7:
      if (v5 == ++v7) {
        goto LABEL_40;
      }
    }

    os_log_type_t v22 = (os_log_s *)*(id *)(*(void *)(v71 + 56) + 8 * v20);
    swift_bridgeObjectRelease(v19);
    -[os_log_s setShareInfo:](v22, "setShareInfo:", v11);

LABEL_34:
    goto LABEL_35;
  }

  __break(1u);
}

uint64_t sub_1000E2218()
{
  uint64_t v1 = *(void *)(v0 + 416);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "There was an error fetching shared acccounts. Skipping shared accounts. Error: %@",  v6,  0xCu);
    uint64_t v9 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  sub_1000E2E04((uint64_t *)(v0 + 232));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
}

uint64_t sub_1000E23D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E2404(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 336);
  swift_willThrow(a1);
  swift_errorRelease(v2);
  uint64_t v3 = *(void **)(v1 + 280);

  id v4 = [v3 altDSID];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  *(void *)(v1 + 344) = v7;
  uint64_t v8 = (void *)swift_task_alloc(dword_10020E6C4);
  *(void *)(v1 + 352) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000E1610;
  uint64_t v9 = *(void *)(v1 + 288);
  v8[17] = v7;
  v8[18] = v9;
  uint8_t v8[16] = v5;
  return swift_task_switch(sub_1000E2914, 0LL, 0LL);
}

uint64_t sub_1000E24C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E24F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 384);
  swift_willThrow(a1);

  uint64_t v3 = *(void *)(v1 + 392);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    *(void *)(v1 + 24_Block_object_dispose(&a9, 8) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 248, v1 + 256);
    *uint64_t v9 = v10;
    swift_errorRelease(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "There was an error fetching shared acccounts. Skipping shared accounts. Error: %@",  v8,  0xCu);
    uint64_t v11 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v3);
  }

  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  sub_1000E2E04((uint64_t *)(v1 + 232));
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 232));
}

uint64_t sub_1000E26B8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Entitlement Check", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void **)(v0 + 24);
  id v7 = [v6 hasInternalAccess];
  if ((v7 & 1) != 0 || (id v7 = [v6 hasPrivateAccess], (_DWORD)v7))
  {
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client has necessary permission for accounts listing", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Client doesn't have access to perform account listing",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v20 = -16002LL;
    unint64_t v16 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v17 = sub_1000BC768();
    uint64_t v18 = _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    swift_willThrow(v18);
  }

  return 1LL;
}

uint64_t sub_1000E28F8(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  return swift_task_switch(sub_1000E2914, 0LL, 0LL);
}

uint64_t sub_1000E2914()
{
  uint64_t v1 = (void *)(v0 + 80);
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v2 = v0 + 120;
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
  uint64_t v5 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v9 = *(void *)(v0 + 136);
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v31;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = v10;
    uint64_t v1 = (void *)(v0 + 80);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v13, v9, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Fetcing SIWA accounts from local store for altDSID %s",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v14 = v12;
    uint64_t v2 = v0 + 120;
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 136), 2LL);
  }

  uint64_t v15 = *(void **)(*(void *)(v0 + 144) + 32LL);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 authKitAccountWithAltDSID:v16];

  if (v17)
  {
    uint64_t v19 = *(void *)(v0 + 144);

    uint64_t v20 = *(void **)(v19 + 40);
    NSString v21 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 152) = v21;
    *(void *)(v0 + 56) = v2;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000E2C74;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = 0x40000000LL;
    *(void *)(v0 + 96) = sub_1000ECE68;
    *(void *)(v0 + 104) = &unk_1001CC210;
    [v20 fetchAllDeveloperTeamsAndApplicationsForAltDSID:v21 withCompletion:v1];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v18);
    uint64_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "No authkit account for altDSID", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v27 = v26;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16004LL;
    unint64_t v28 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v29 = sub_1000BC768();
    uint64_t v30 = _BridgedStoredNSError.init(_:userInfo:)(v1, v2, v28, v27, v29);
    swift_willThrow(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000E2C74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 160LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E2D24;
  }
  else {
    uint64_t v2 = sub_1000E2CD4;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000E2CD4()
{
  unint64_t v1 = *(void *)(v0 + 120);

  unint64_t v2 = sub_1000E4ECC(v1);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000E2D24()
{
  unint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E2D64(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *os_log_type_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v12 = a2;
    uint64_t v10 = *(void *)(*(void *)(v3 + 64) + 40LL);
    id v11 = a2;
    sub_1000E5498((uint64_t)&v12, v10);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000E2E04(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000LL) != 0)
  {
    uint64_t v2 = sub_1000E46A4(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  v7[0] = (v2 & 0xFFFFFFFFFFFFFF8LL) + 32;
  v7[1] = v4;
  Swift::Int v5 = sub_1000E3694(v7);
  return specialized Array._endMutation()(v5);
}

uint64_t sub_1000E2E88(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000E2EA0, 0LL, 0LL);
}

uint64_t sub_1000E2EA0()
{
  id v1 = [*(id *)(v0 + 16) altDSID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  *(void *)(v0 + 32) = v4;
  Swift::Int v5 = (void *)swift_task_alloc(dword_10020E6C4);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v5;
  void *v5 = v0;
  v5[1] = sub_1000E2F68;
  uint64_t v6 = *(void *)(v0 + 24);
  v5[17] = v4;
  v5[18] = v6;
  uint8_t v5[16] = v2;
  return swift_task_switch(sub_1000E2914, 0LL, 0LL);
}

uint64_t sub_1000E2F68(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  *(void *)(*v2 + 4_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000E306C;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 32));
    *(void *)(v4 + 56) = a1;
    uint64_t v6 = sub_1000E2FE4;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000E2FE4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1000E30A0(v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = sub_1000F4164(v3);
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(id))(v0 + 8))([objc_allocWithZone(NSNumber) initWithInteger:v5]);
}

uint64_t sub_1000E306C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E30A0(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  id v8 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v7 << 6))
  {
    id v11 = *(id *)(*(void *)(a1 + 56) + 8 * i);
    id v12 = [v11 privateEmail];
    if (v12)
    {
      NSString v16 = v12;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v21 = v17;

      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
        id v8 = sub_1000EB9DC(0LL, v8[2] + 1LL, 1, v8);
      }
      unint64_t v19 = v8[2];
      unint64_t v18 = v8[3];
      if (v19 >= v18 >> 1) {
        id v8 = sub_1000EB9DC((void *)(v18 > 1), v19 + 1, 1, v8);
      }
      _OWORD v8[2] = v19 + 1;
      uint64_t v20 = &v8[2 * v19];
      void v20[4] = v22;
      void v20[5] = v21;
      if (v5) {
        goto LABEL_4;
      }
    }

    else
    {

      if (v5) {
        goto LABEL_4;
      }
    }

LABEL_22:
    unint64_t v5 = (v14 - 1) & v14;
  }

  int64_t v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }

  unint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v7 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    int64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    id v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    id v12 = *v11;
    int64_t v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1000F1A58(v17, v12, v13);
    unint64_t result = swift_bridgeObjectRelease(v17[1]);
  }

  NSString v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v18;
  }

  int64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    uint64_t v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    int64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v27;
  }
  return result;
}

  __break(1u);
}

uint64_t sub_1000E32C0()
{
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  sub_1000BC7D4((void *)(v0 + 56));

  sub_1000BC7D4((void *)(v0 + 104));
  return v0;
}

uint64_t sub_1000E3314()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for AccountsListingController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd25AccountsListingController);
}

void sub_1000E3354(uint64_t a1)
{
  int64_t v2 = 0LL;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v3;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v3) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v13 = v2 + 1;
  if (!__OFADD__(v2, 1LL))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v13);
      ++v2;
      if (v14) {
        goto LABEL_22;
      }
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v2);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v2 = v13 + 2;
      if (v13 + 2 >= v8) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v2);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v2 = v13 + 3;
      if (v13 + 3 >= v8) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v2);
      if (v14)
      {
LABEL_22:
        unint64_t v7 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v2 << 6); ; unint64_t i = v11 | (v2 << 6))
        {
          id v16 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          id v17 = [v16 localizedAppName];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          unint64_t v20 = v19;

          swift_bridgeObjectRelease(v20);
          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000LL) == 0) {
            uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (v21)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v9 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
            uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v16);
            specialized ContiguousArray._endMutation()(v10);
            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {

            if (!v7) {
              goto LABEL_7;
            }
          }

id sub_1000E3548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  type metadata accessor for Scope(0LL);
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a6, 1LL, v18) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a6, v18);
  }

  if (a8)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8);
  }

  else
  {
    NSString v21 = 0LL;
  }

  id v22 = [v9 initWithClientID:v15 userID:v16 scopes:v17.super.isa creationDate:isa privateEmail:v21];

  return v22;
}

Swift::Int sub_1000E3694(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_150;
    }
    if (v3) {
      return sub_1000E3F5C(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_158;
  }
  Swift::Int v122 = result;
  uint64_t v119 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v135 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v130 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v12 >= 2)
      {
        uint64_t v112 = *v119;
        do
        {
          unint64_t v113 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_145;
          }
          if (!v112) {
            goto LABEL_157;
          }
          uint64_t v114 = *(void *)&v9[16 * v113 + 32];
          uint64_t v115 = *(void *)&v9[16 * v12 + 24];
          sub_1000E40DC( (void **)(v112 + 8 * v114),  (id *)(v112 + 8LL * *(void *)&v9[16 * v12 + 16]),  (id *)(v112 + 8 * v115),  v130);
          if (v1) {
            break;
          }
          if (v115 < v114) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
            uint64_t v9 = sub_1000E4690((uint64_t)v9);
          }
          if (v113 >= *((void *)v9 + 2)) {
            goto LABEL_147;
          }
          uint64_t v116 = &v9[16 * v113 + 32];
          *(void *)uint64_t v116 = v114;
          *((void *)v116 + 1) = v115;
          unint64_t v117 = *((void *)v9 + 2);
          if (v12 > v117) {
            goto LABEL_148;
          }
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v117 - v12));
          *((void *)v9 + 2) = v117 - 1;
          unint64_t v12 = v117 - 1;
        }

        while (v117 > 2);
      }

LABEL_127:
      uint64_t v118 = swift_bridgeObjectRelease(v9);
      *(void *)((v135 & 0xFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
      specialized Array._endMutation()(v118);
      return swift_bridgeObjectRelease(v135);
    }
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v6;
    uint64_t v130 = (void **)((v8 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v135 = v8;
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v120 = *a1 + 16;
  uint64_t v121 = *a1 - 8;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v127 = v3;
  uint64_t v131 = *a1;
  while (2)
  {
    Swift::Int v13 = v10 + 1;
    Swift::Int v126 = v10;
    if (v10 + 1 >= v3) {
      goto LABEL_45;
    }
    unint64_t v123 = v9;
    unint64_t v14 = *(void **)(v11 + 8 * v10);
    id v15 = *(id *)(v11 + 8 * v13);
    id v16 = v14;
    id v17 = [v15 localizedAppName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    id v21 = [v16 localizedAppName];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    if (v18 == v22 && v20 == v24)
    {
      int v128 = 0;
      uint64_t v24 = v20;
    }

    else
    {
      int v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v24, 1LL);
    }

    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v24);

    Swift::Int v13 = v10 + 2;
    Swift::Int v3 = v127;
    if (v10 + 2 >= v127) {
      goto LABEL_36;
    }
    uint64_t v26 = (id *)(v120 + 8 * v10);
    while (1)
    {
      Swift::Int v132 = v13;
      unint64_t v28 = *(v26 - 1);
      id v29 = *v26;
      id v30 = v28;
      id v31 = [v29 localizedAppName];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      id v35 = [v30 localizedAppName];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v38 = v37;

      if (v32 == v36 && v34 == v38)
      {

        swift_bridgeObjectRelease_n(v34, 2LL);
        if ((v128 & 1) != 0)
        {
          uint64_t v9 = v123;
          Swift::Int v10 = v126;
          Swift::Int v3 = v127;
          uint64_t v11 = v131;
          Swift::Int v13 = v132;
          goto LABEL_37;
        }

        goto LABEL_25;
      }

      int v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v36, v38, 1LL);

      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v38);
      if (((v128 ^ v27) & 1) != 0) {
        break;
      }
LABEL_25:
      Swift::Int v13 = v132 + 1;
      ++v26;
      Swift::Int v3 = v127;
      if (v127 == v132 + 1)
      {
        Swift::Int v13 = v127;
        goto LABEL_35;
      }
    }

    Swift::Int v3 = v127;
    Swift::Int v13 = v132;
LABEL_35:
    Swift::Int v10 = v126;
LABEL_36:
    uint64_t v9 = v123;
    uint64_t v11 = v131;
    if ((v128 & 1) != 0)
    {
LABEL_37:
      if (v13 < v10) {
        goto LABEL_151;
      }
      if (v10 < v13)
      {
        uint64_t v40 = (uint64_t *)(v121 + 8 * v13);
        Swift::Int v41 = v13;
        Swift::Int v42 = v10;
        uint64_t v43 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v42 != --v41)
          {
            if (!v11) {
              goto LABEL_156;
            }
            uint64_t v44 = *v43;
            uint64_t *v43 = *v40;
            *uint64_t v40 = v44;
          }

          ++v42;
          --v40;
          ++v43;
        }

        while (v42 < v41);
      }
    }

LABEL_45:
    if (v13 >= v3) {
      goto LABEL_68;
    }
    if (__OFSUB__(v13, v10)) {
      goto LABEL_149;
    }
    if (v13 - v10 >= v122)
    {
LABEL_68:
      if (v13 < v10) {
        goto LABEL_144;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        uint64_t v9 = sub_1000E44F0(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
      }
      unint64_t v64 = *((void *)v9 + 2);
      unint64_t v63 = *((void *)v9 + 3);
      unint64_t v12 = v64 + 1;
      if (v64 >= v63 >> 1) {
        uint64_t v9 = sub_1000E44F0((char *)(v63 > 1), v64 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v12;
      unint64_t v65 = v9 + 32;
      uint64_t v66 = &v9[16 * v64 + 32];
      *(void *)uint64_t v66 = v10;
      *((void *)v66 + 1) = v13;
      Swift::Int v134 = v13;
      if (!v64)
      {
        unint64_t v12 = 1LL;
LABEL_14:
        Swift::Int v3 = v127;
        Swift::Int v10 = v134;
        if (v134 >= v127) {
          goto LABEL_116;
        }
        continue;
      }

      while (1)
      {
        unint64_t v67 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v72 = &v65[16 * v12];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_133;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_134;
          }
          unint64_t v79 = v12 - 2;
          unint64_t v80 = &v65[16 * v12 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_136;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_139;
          }
          if (v84 >= v75)
          {
            uint64_t v102 = &v65[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_143;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_105;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v96 = *((void *)v9 + 4);
            uint64_t v97 = *((void *)v9 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_99;
          }

          uint64_t v69 = *((void *)v9 + 4);
          uint64_t v68 = *((void *)v9 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }

        if ((v71 & 1) != 0) {
          goto LABEL_135;
        }
        unint64_t v79 = v12 - 2;
        uint64_t v85 = &v65[16 * v12 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_138;
        }
        uint64_t v91 = &v65[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_141;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_142;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_105:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_107;
        }

LABEL_99:
        if ((v90 & 1) != 0) {
          goto LABEL_137;
        }
        id v98 = &v65[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_140;
        }
        if (v101 < v89) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v12)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }

        if (!v11) {
          goto LABEL_155;
        }
        unint64_t v107 = &v65[16 * v106];
        uint64_t v108 = *(void *)v107;
        char v109 = &v65[16 * v67];
        uint64_t v110 = *((void *)v109 + 1);
        sub_1000E40DC( (void **)(v11 + 8LL * *(void *)v107),  (id *)(v11 + 8LL * *(void *)v109),  (id *)(v11 + 8 * v110),  v130);
        if (v1) {
          goto LABEL_127;
        }
        if (v110 < v108) {
          goto LABEL_130;
        }
        if (v67 > *((void *)v9 + 2)) {
          goto LABEL_131;
        }
        *(void *)unint64_t v107 = v108;
        *(void *)&v65[16 * v106 + 8] = v110;
        unint64_t v111 = *((void *)v9 + 2);
        if (v67 >= v111) {
          goto LABEL_132;
        }
        unint64_t v12 = v111 - 1;
        memmove(&v65[16 * v67], v109 + 16, 16 * (v111 - 1 - v67));
        *((void *)v9 + 2) = v111 - 1;
        if (v111 <= 2) {
          goto LABEL_14;
        }
      }
    }

    break;
  }

  if (__OFADD__(v10, v122)) {
    goto LABEL_152;
  }
  if (v10 + v122 >= v3) {
    Swift::Int v45 = v3;
  }
  else {
    Swift::Int v45 = v10 + v122;
  }
  if (v45 >= v10)
  {
    if (v13 != v45)
    {
      unint64_t v124 = v9;
      Swift::Int v125 = v45;
      uint64_t v46 = v121 + 8 * v13;
      do
      {
        id v48 = *(void **)(v11 + 8 * v13);
        uint64_t v129 = v46;
        Swift::Int v133 = v13;
        while (1)
        {
          uint64_t v49 = *(void **)v46;
          id v50 = v48;
          id v51 = v49;
          id v52 = [v50 localizedAppName];
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          uint64_t v55 = v54;

          id v56 = [v51 localizedAppName];
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          uint64_t v59 = v58;

          if (v53 == v57 && v55 == v59)
          {

            swift_bridgeObjectRelease_n(v55, 2LL);
            uint64_t v11 = v131;
            Swift::Int v47 = v133;
            goto LABEL_56;
          }

          char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v57, v59, 1LL);

          swift_bridgeObjectRelease(v55);
          swift_bridgeObjectRelease(v59);
          uint64_t v11 = v131;
          if ((v61 & 1) == 0) {
            break;
          }
          if (!v131) {
            goto LABEL_154;
          }
          id v62 = *(void **)v46;
          id v48 = *(void **)(v46 + 8);
          *(void *)uint64_t v46 = v48;
          *(void *)(v46 + _Block_object_dispose(&a9, 8) = v62;
          v46 -= 8LL;
          ++v10;
          Swift::Int v47 = v133;
          if (v133 == v10) {
            goto LABEL_56;
          }
        }

        Swift::Int v47 = v133;
LABEL_56:
        Swift::Int v13 = v47 + 1;
        uint64_t v46 = v129 + 8;
        Swift::Int v10 = v126;
      }

      while (v13 != v125);
      Swift::Int v13 = v125;
      uint64_t v9 = v124;
    }

    goto LABEL_68;
  }

LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000E3F5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v25 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v25 + 8 * a3);
    uint64_t v7 = v23;
    uint64_t v24 = v4;
    uint64_t v26 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 localizedAppName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      id v15 = [v10 localizedAppName];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      if (v12 == v16 && v14 == v18)
      {

        Swift::Int result = swift_bridgeObjectRelease_n(v14, 2LL);
        uint64_t v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v24 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v18, 1LL);

      swift_bridgeObjectRelease(v14);
      Swift::Int result = swift_bridgeObjectRelease(v18);
      uint64_t v5 = v26;
      if ((v20 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v25) {
        break;
      }
      id v21 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + _Block_object_dispose(&a9, 8) = v21;
      v4 -= 8LL;
      if (v26 == ++v7) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000E40DC(void **__src, id *a2, id *a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  uint64_t v13 = v12 >> 3;
  char v61 = __src;
  os_log_type_t v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    id v51 = v4;
    id v31 = &v4[v13];
    uint64_t v59 = v31;
    char v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_1000E45E8((void **)&v61, (const void **)&v60, &v59);
      return 1LL;
    }

    uint64_t v32 = v6;
    id v56 = v7;
    while (1)
    {
      id v52 = v31;
      uint64_t v54 = v6;
      uint64_t v58 = v5;
      uint64_t v34 = *--v31;
      uint64_t v33 = v34;
      id v35 = *--v32;
      id v36 = v33;
      id v37 = v35;
      id v38 = [v36 localizedAppName];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      id v42 = [v37 localizedAppName];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;

      if (v39 == v43 && v41 == v45) {
        break;
      }
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v43, v45, 1LL);

      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v45);
      id v48 = v58;
      uint64_t v5 = v58 - 1;
      if ((v47 & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v49 = (unint64_t)v56;
      id v31 = v52;
      if (v58 != v54 || v5 >= v54) {
        id *v5 = *v32;
      }
      char v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        uint64_t v6 = v32;
        if (v31 > v51) {
          continue;
        }
      }

      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n(v41, 2LL);
    id v48 = v58;
    uint64_t v5 = v58 - 1;
LABEL_46:
    uint64_t v32 = v54;
    unint64_t v49 = (unint64_t)v56;
    uint64_t v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52) {
      id *v5 = *v31;
    }
    goto LABEL_50;
  }

  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v53 = &v4[v10];
    uint64_t v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      uint64_t v57 = v5;
      while (1)
      {
        uint64_t v55 = v7;
        uint64_t v14 = v6;
        id v15 = *v4;
        id v16 = *v6;
        id v17 = v15;
        id v18 = [v16 localizedAppName];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        id v22 = [v17 localizedAppName];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        if (v19 == v23 && v21 == v25) {
          break;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v25, 1LL);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v25);
        if ((v27 & 1) == 0) {
          goto LABEL_23;
        }
        unint64_t v28 = v14 + 1;
        id v29 = v55;
        id v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14) {
          *uint64_t v55 = *v14;
        }
LABEL_26:
        uint64_t v7 = v29 + 1;
        if (v4 < v53)
        {
          uint64_t v6 = v28;
          if (v28 < v30) {
            continue;
          }
        }

        char v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_23:
      id v29 = v55;
      id v30 = v57;
      if (v55 != v4) {
        *uint64_t v55 = *v4;
      }
      os_log_type_t v60 = ++v4;
      unint64_t v28 = v14;
      goto LABEL_26;
    }

    goto LABEL_52;
  }

LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        __break(1u);
LABEL_54:

        __break(1u);
        return;
      }

      if (qword_10020CF88 != -1) {
        swift_once(&qword_10020CF88, sub_1000E54E4);
      }
      id v31 = sub_1000B8C38(v8, (uint64_t)qword_100210FD8);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v31, v8);
      id v17 = a4;
      id v15 = (id)Logger.logObject.getter(v17);
      uint64_t v32 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v15, v32))
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        goto LABEL_16;
      }

      unint64_t v123 = a2;
      unint64_t v124 = v9;
      Swift::Int v126 = v8;
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      Swift::Int v127 = swift_slowAlloc(32LL, -1LL);
      Swift::Int v132 = v127;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v34 = [v17 altDSID];
      if (v34)
      {
        id v35 = v34;
        id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        id v38 = v37;

        uint64_t v131 = sub_100103438(v36, v38, &v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);

        swift_bridgeObjectRelease(v38);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v32,  "Missing authkit account for altDSID %s",  v33,  0xCu);
        uint64_t v39 = v127;
        swift_arrayDestroy(v127, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);

        int64_t v8 = v126;
        (*(void (**)(char *, uint64_t))(v124 + 8))(v14, v126);
LABEL_16:
        type metadata accessor for DeviceListError(0LL);
        uint64_t v43 = v42;
        uint64_t v131 = -14006LL;
        uint64_t v44 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v45 = sub_1000BF650();
        uint64_t v46 = _BridgedStoredNSError.init(_:userInfo:)(&v132, &v131, v44, v43, v45);
        char v47 = v132;
        swift_willThrow(v46);
        if (qword_10020CF88 != -1) {
          swift_once(&qword_10020CF88, sub_1000E54E4);
        }
        sub_1000B8C38(v8, (uint64_t)qword_100210FD8);
        swift_errorRetain(v47);
        id v48 = swift_errorRetain(v47);
        unint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
        id v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          id v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v52 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)id v51 = 138412290;
          swift_errorRetain(v47);
          uint64_t v53 = _swift_stdlib_bridgeErrorToNSError(v47);
          Swift::Int v132 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133);
          *id v52 = v53;
          swift_errorRelease(v47);
          swift_errorRelease(v47);
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Error %@ fetching device list from cache", v51, 0xCu);
          uint64_t v54 = sub_1000B86DC(&qword_10020D770);
          swift_arrayDestroy(v52, 1LL, v54);
          swift_slowDealloc(v52, -1LL, -1LL);
          swift_slowDealloc(v51, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(v47);
          swift_errorRelease(v47);
        }

        Swift::Int v132 = v47;
        uint64_t v55 = sub_1000B86DC(&qword_10020ED18);
        CheckedContinuation.resume(throwing:)(&v132, v55);
        id v56 = v128;
        goto LABEL_22;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_53;
  }

  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  id v22 = sub_1000B8C38(v8, (uint64_t)qword_100210FD8);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  uint64_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "DeviceListStoreManager - Missing instance", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  type metadata accessor for DeviceListError(0LL);
  char v27 = v26;
  uint64_t v131 = -14001LL;
  unint64_t v28 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  id v29 = sub_1000BF650();
  _BridgedStoredNSError.init(_:userInfo:)(&v132, &v131, v28, v27, v29);
  uint64_t v131 = v132;
  id v30 = sub_1000B86DC(&qword_10020ED18);
  CheckedContinuation.resume(throwing:)(&v131, v30);
}

char *sub_1000E44F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000B86DC(&qword_10020E6F8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  id v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000E45E8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

char *sub_1000E4690(uint64_t a1)
{
  return sub_1000E44F0(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000E46A4(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_1000E470C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_1000E4794(void *a1)
{
  uint64_t v2 = sub_1000B86DC(&qword_10020D1D0);
  __chkstk_darwin(v2);
  uint64_t v76 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v84 = a1;
  id v4 = [a1 privateEmail];
  if (v4)
  {
    char v5 = v4;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v83 = v6;
  }

  else
  {
    uint64_t v78 = 0LL;
    uint64_t v83 = 0LL;
  }

  id v7 = v84;
  id v8 = [v84 userIdentifier];
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v82 = v9;

  id v10 = [v7 apps];
  uint64_t v11 = sub_1000D0510(0LL, (unint64_t *)&qword_10020DB68, &OBJC_CLASS___AKConsentedApplication_ptr);
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  v11,  &protocol witness table for String);

  int64_t v13 = 0LL;
  uint64_t v14 = v12 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v12 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v85 = &_swiftEmptyDictionarySingleton;
  if (v17) {
    goto LABEL_9;
  }
LABEL_10:
  while (2)
  {
    int64_t v21 = v13 + 1;
    if (!__OFADD__(v13, 1LL))
    {
      if (v21 < v18)
      {
        unint64_t v22 = *(void *)(v14 + 8 * v21);
        ++v13;
        if (v22) {
          goto LABEL_25;
        }
        int64_t v13 = v21 + 1;
        if (v21 + 1 >= v18) {
          goto LABEL_57;
        }
        unint64_t v22 = *(void *)(v14 + 8 * v13);
        if (v22) {
          goto LABEL_25;
        }
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_57;
        }
        unint64_t v22 = *(void *)(v14 + 8 * v13);
        if (v22) {
          goto LABEL_25;
        }
        int64_t v13 = v21 + 3;
        if (v21 + 3 >= v18) {
          goto LABEL_57;
        }
        unint64_t v22 = *(void *)(v14 + 8 * v13);
        if (v22)
        {
LABEL_25:
          unint64_t v17 = (v22 - 1) & v22;
          for (unint64_t i = __clz(__rbit64(v22)) + (v13 << 6); ; unint64_t i = v19 | (v13 << 6))
          {
            id v24 = *(id *)(*(void *)(v12 + 56) + 8 * i);
            id v25 = [v24 primaryClientID];
            if (!v25) {
              break;
            }
            uint64_t v26 = v25;
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            uint64_t v29 = v28;

            if (v27 == 1280070990 && v29 == 0xE400000000000000LL)
            {
              swift_bridgeObjectRelease(0xE400000000000000LL);
            }

            else
            {
              char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, 1280070990LL, 0xE400000000000000LL, 0LL);
              swift_bridgeObjectRelease(v29);
              if ((v31 & 1) == 0) {
                break;
              }
            }

            if ([v24 state] != (id)1 && objc_msgSend(v24, "state") != (id)3) {
              break;
            }
            id v32 = [v24 clientID];
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
            uint64_t v35 = v34;

            id v36 = [v24 scopes];
            if (v36)
            {
              id v37 = v36;
              type metadata accessor for Scope(0LL);
              unint64_t v79 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);
            }

            else
            {
              unint64_t v79 = _swiftEmptyArrayStorage;
            }

            id v39 = [v24 creationDate];
            uint64_t v80 = v35;
            uint64_t v81 = v33;
            if (v39)
            {
              uint64_t v40 = v39;
              uint64_t v41 = (uint64_t)v76;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

              uint64_t v42 = type metadata accessor for Date(0LL);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))( v41,  0LL,  1LL,  v42);
            }

            else
            {
              uint64_t v43 = type metadata accessor for Date(0LL);
              uint64_t v41 = (uint64_t)v76;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))( v76,  1LL,  1LL,  v43);
            }

            id v44 = objc_allocWithZone(&OBJC_CLASS___AKSignInWithAppleAccount);
            uint64_t v45 = v82;
            swift_bridgeObjectRetain(v82);
            uint64_t v46 = v83;
            swift_bridgeObjectRetain(v83);
            id v47 = sub_1000E3548(v81, v80, v77, v45, (uint64_t)v79, v41, v78, v46);
            id v48 = [v24 appiTunesMetadata];
            NSString v49 = [v48 appName];

            if (!v49)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
              uint64_t v51 = v50;
              NSString v49 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v51);
            }

            [v47 setLocalizedAppName:v49];

            id v52 = [v24 appiTunesMetadata];
            id v53 = [v52 appDeveloperName];

            if (v53)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
              unint64_t v55 = v54;
            }

            else
            {
              unint64_t v55 = 0xE000000000000000LL;
            }

            NSString v56 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v55);
            [v47 setLocalizedAppDeveloperName:v56];

            NSString v57 = [v84 teamID];
            if (!v57)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
              uint64_t v59 = v58;
              NSString v57 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v59);
            }

            [v47 setTeamID:v57];

            id v60 = [v24 appiTunesMetadata];
            id v61 = [v60 adamID];

            if (v61)
            {
              uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              uint64_t v64 = v63;

              if (v62 == 1280070990 && v64 == 0xE400000000000000LL)
              {
                swift_bridgeObjectRelease(0xE400000000000000LL);
              }

              else
              {
                char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, 1280070990LL, 0xE400000000000000LL, 0LL);
                swift_bridgeObjectRelease(v64);
                if ((v65 & 1) == 0)
                {
                  id v66 = [v24 appiTunesMetadata];
                  id v67 = [v66 adamID];

                  [v47 setAppStoreAdamID:v67];
                }
              }
            }

            id v68 = [v24 clientID];
            uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
            uint64_t v71 = v70;

            id v72 = v47;
            uint64_t v73 = v85;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
            uint64_t v86 = v73;
            sub_1000F0FC8((uint64_t)v72, v69, v71, isUniquelyReferenced_nonNull_native);
            uint64_t v85 = v86;

            swift_bridgeObjectRelease(v71);
            swift_bridgeObjectRelease(0x8000000000000000LL);
            if (!v17) {
              goto LABEL_10;
            }
LABEL_9:
            unint64_t v19 = __clz(__rbit64(v17));
            v17 &= v17 - 1;
          }

          if (!v17) {
            continue;
          }
          goto LABEL_9;
        }

        int64_t v23 = v21 + 4;
        if (v23 < v18)
        {
          unint64_t v22 = *(void *)(v14 + 8 * v23);
          if (v22)
          {
            int64_t v13 = v23;
            goto LABEL_25;
          }

          while (1)
          {
            int64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1LL)) {
              goto LABEL_59;
            }
            if (v13 >= v18) {
              break;
            }
            unint64_t v22 = *(void *)(v14 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_25;
            }
          }
        }
      }

LABEL_57:
      swift_bridgeObjectRelease(v83);
      swift_release(v12);
      swift_bridgeObjectRelease(v82);
      return;
    }

    break;
  }

  __break(1u);
LABEL_59:
  __break(1u);
}

unint64_t sub_1000E4ECC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    goto LABEL_56;
  }
  do
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_61;
    }

    unint64_t v46 = v1 & 0xC000000000000001LL;
    uint64_t v43 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = 0LL;
    id v4 = &_swiftEmptyDictionarySingleton;
    uint64_t v44 = v2;
    uint64_t v45 = v1;
    while (1)
    {
      if (v46) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      }
      else {
        id v6 = *(id *)(v43 + 8 * v3);
      }
      char v5 = v6;
      sub_1000E4794(v6);
      uint64_t v8 = v7;
      if (!*(void *)(v7 + 16))
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_6;
      }

      id v47 = v5;
      uint64_t v48 = v3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      uint64_t v49 = v8 + 64;
      uint64_t v10 = 1LL << *(_BYTE *)(v8 + 32);
      uint64_t v11 = v10 < 64 ? ~(-1LL << v10) : -1LL;
      unint64_t v12 = v11 & *(void *)(v8 + 64);
      int64_t v50 = (unint64_t)(v10 + 63) >> 6;
      uint64_t v51 = v4;
      swift_bridgeObjectRetain(v8);
      int64_t v13 = 0LL;
      if (v12) {
        break;
      }
LABEL_18:
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_50;
      }
      if (v17 < v50)
      {
        unint64_t v18 = *(void *)(v49 + 8 * v17);
        ++v13;
        if (v18) {
          goto LABEL_33;
        }
        int64_t v13 = v17 + 1;
        if (v17 + 1 < v50)
        {
          unint64_t v18 = *(void *)(v49 + 8 * v13);
          if (v18) {
            goto LABEL_33;
          }
          int64_t v13 = v17 + 2;
          if (v17 + 2 < v50)
          {
            unint64_t v18 = *(void *)(v49 + 8 * v13);
            if (v18) {
              goto LABEL_33;
            }
            int64_t v13 = v17 + 3;
            if (v17 + 3 < v50)
            {
              unint64_t v18 = *(void *)(v49 + 8 * v13);
              if (v18) {
                goto LABEL_33;
              }
              int64_t v19 = v17 + 4;
              if (v19 < v50)
              {
                unint64_t v18 = *(void *)(v49 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v13 = v19 + 1;
                    if (__OFADD__(v19, 1LL)) {
                      goto LABEL_51;
                    }
                    if (v13 >= v50) {
                      goto LABEL_5;
                    }
                    unint64_t v18 = *(void *)(v49 + 8 * v13);
                    ++v19;
                    if (v18) {
                      goto LABEL_33;
                    }
                  }
                }

                int64_t v13 = v19;
LABEL_33:
                unint64_t v12 = (v18 - 1) & v18;
                unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
                goto LABEL_34;
              }
            }
          }
        }
      }

BOOL sub_1000E5364(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain(a1);
  sub_1000E3354(v2);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0) {
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v3);
  }

  else
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  swift_bridgeObjectRelease(v4);
  if (v5 != v6)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_1000B8C38(v7, (uint64_t)qword_100210FF0);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Some accounts are missing metadata. Requires app metadata fetch from server",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }
  }

  return v5 != v6;
}

uint64_t sub_1000E5498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B86DC((uint64_t *)&unk_10020E6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E54E4(uint64_t a1)
{
  return sub_1000E5534(a1, qword_100210FD8, 1701998435LL, 0xE400000000000000LL);
}

uint64_t sub_1000E54FC(uint64_t a1)
{
  return sub_1000E5534(a1, qword_100210FF0, 1635215731LL, 0xE400000000000000LL);
}

uint64_t sub_1000E5514(uint64_t a1)
{
  return sub_1000E5534(a1, qword_100211008, 0x79656B73736170LL, 0xE700000000000000LL);
}

uint64_t sub_1000E5534(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_1000D06E8(v7, a2);
  sub_1000B8C38(v7, (uint64_t)a2);
  uint64_t v8 = qword_10020E700;
  uint64_t v9 = off_10020E708;
  swift_bridgeObjectRetain(off_10020E708);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

id sub_1000E55B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)&v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = &_swiftEmptySetSingleton;
  uint64_t v21 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
  *(void *)uint64_t v21 = a1;
  *((void *)v21 + 1) = a2;
  uint64_t v22 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
  *(void *)uint64_t v22 = a3;
  *((void *)v22 + 1) = a4;
  int64_t v23 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
  *(void *)int64_t v23 = a5;
  *((void *)v23 + 1) = a6;
  id v24 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
  *(void *)id v24 = a7;
  *((void *)v24 + 1) = a8;
  uint64_t v25 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
  *(void *)uint64_t v25 = a9;
  *((void *)v25 + 1) = a10;
  unint64_t v26 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
  *(void *)unint64_t v26 = a11;
  *((void *)v26 + 1) = a12;
  uint64_t v27 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
  *(void *)uint64_t v27 = a13;
  *((void *)v27 + 1) = a14;
  BOOL v28 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
  *(void *)BOOL v28 = a15;
  *((void *)v28 + 1) = a16;
  uint64_t v29 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
  *(void *)uint64_t v29 = a17;
  *((void *)v29 + 1) = a18;
  unint64_t v30 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
  *(void *)unint64_t v30 = a19;
  *((void *)v30 + 1) = a20;
  v32.receiver = v20;
  v32.super_class = (Class)type metadata accessor for SignInWithAppleSharedCredential();
  return objc_msgSendSuper2(&v32, "init");
}

uint64_t sub_1000E56F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E572C + 4 * byte_1001641F0[a1]))( 0x4449746E65696C63LL,  0xE800000000000000LL);
}

uint64_t sub_1000E572C()
{
  return 0x44496D616574LL;
}

uint64_t sub_1000E5740()
{
  return 0x614E746E65696C63LL;
}

uint64_t sub_1000E575C()
{
  return 0x444972657375LL;
}

uint64_t sub_1000E5770()
{
  return 0x6B6F546572616873LL;
}

uint64_t sub_1000E5790()
{
  return 0x444970756F7267LL;
}

uint64_t sub_1000E57A8()
{
  return 0x7069636974726170LL;
}

uint64_t sub_1000E57E0()
{
  return 0x65706F6C65766564LL;
}

unint64_t sub_1000E5804()
{
  return 0xD000000000000014LL;
}

uint64_t sub_1000E5820()
{
  return 0x4565746176697270LL;
}

BOOL sub_1000E5840(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000E5854()
{
  return sub_1000E56F8(*v0);
}

uint64_t sub_1000E585C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000E6C38(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E5880(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1000E588C(uint64_t a1)
{
  unint64_t v2 = sub_1000E64B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E58B4(uint64_t a1)
{
  unint64_t v2 = sub_1000E64B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1000E58DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignInWithAppleSharedCredential();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SignInWithAppleSharedCredential()
{
  return objc_opt_self(&OBJC_CLASS___AKSignInWithAppleSharedCredential);
}

uint64_t sub_1000E5A1C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000B86DC(&qword_10020E7A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000BC7B0(a1, v9);
  unint64_t v11 = sub_1000E64B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SignInWithAppleSharedCredential.CodingKeys,  &type metadata for SignInWithAppleSharedCredential.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID + 8);
  LOBYTE(v36) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v36, v5);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID);
    uint64_t v15 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID + 8);
    LOBYTE(v36) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v36, v5);
    uint64_t v16 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName);
    uint64_t v17 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName + 8);
    LOBYTE(v36) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v36, v5);
    uint64_t v18 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_userID);
    uint64_t v19 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8);
    LOBYTE(v36) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v36, v5);
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken);
    uint64_t v21 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken + 8);
    LOBYTE(v36) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v36, v5);
    uint64_t v22 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID);
    uint64_t v23 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8);
    LOBYTE(v36) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v36, v5);
    uint64_t v24 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID);
    uint64_t v25 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8);
    LOBYTE(v36) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v36, v5);
    uint64_t v26 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName);
    uint64_t v27 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName + 8);
    LOBYTE(v36) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v36, v5);
    uint64_t v28 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail);
    uint64_t v29 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail + 8);
    LOBYTE(v36) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v36, v5);
    uint64_t v30 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName);
    uint64_t v31 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName + 8);
    LOBYTE(v36) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v36, v5);
    uint64_t v36 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs);
    HIBYTE(v35) = 10;
    uint64_t v32 = sub_1000B86DC(&qword_10020DA40);
    uint64_t v33 = sub_1000C5438( &qword_10020DA68,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, (char *)&v35 + 7, v5, v32, v33);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_1000E5D54(void *a1)
{
  uint64_t v52 = sub_1000B86DC(&qword_10020E790);
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs;
  *(void *)&v1[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = &_swiftEmptySetSingleton;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000BC7B0(a1, v7);
  unint64_t v9 = sub_1000E64B4();
  id v53 = v1;
  unint64_t v55 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SignInWithAppleSharedCredential.CodingKeys,  &type metadata for SignInWithAppleSharedCredential.CodingKeys,  v9,  v7,  v8);
  if (v2)
  {
    uint64_t v12 = v55;
    sub_1000BC7D4(a1);
    id v50 = *(id *)&v53[v54];

    swift_bridgeObjectRelease(v50);
    uint64_t v13 = type metadata accessor for SignInWithAppleSharedCredential();
    swift_deallocPartialClassInstance(v12, v13, 176LL, 7LL);
  }

  else
  {
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 0;
    uint64_t v10 = v52;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v52);
    uint64_t v15 = v55;
    uint64_t v16 = (uint64_t *)&v55[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
    uint64_t *v16 = v11;
    v16[1] = v17;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 1;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v19 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
    uint64_t *v19 = v18;
    v19[1] = v20;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 2;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v22 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
    uint64_t *v22 = v21;
    v22[1] = v23;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 3;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v25 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
    *uint64_t v25 = v24;
    v25[1] = v26;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 4;
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v28 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
    uint64_t *v28 = v27;
    v28[1] = v29;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 5;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v31 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    uint64_t *v31 = v30;
    v31[1] = v32;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 6;
    uint64_t v51 = 0LL;
    uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    BOOL v34 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
    *BOOL v34 = v33;
    v34[1] = v35;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 7;
    uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v37 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
    *uint64_t v37 = v36;
    v37[1] = v38;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 8;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v58, v10);
    uint64_t v40 = (uint64_t *)&v15[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
    *uint64_t v40 = v39;
    v40[1] = v41;
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 9;
    uint64_t v42 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v10);
    uint64_t v43 = (uint64_t *)&v55[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
    uint64_t *v43 = v42;
    v43[1] = v44;
    uint64_t v45 = sub_1000B86DC(&qword_10020DA40);
    char v57 = 10;
    uint64_t v46 = sub_1000C5438( &qword_10020DA38,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, v45, &v57, v52, v45, v46);
    uint64_t v47 = *(void *)&v53[v54];
    *(void *)&v53[v54] = v58;
    uint64_t v48 = v55;

    swift_bridgeObjectRelease(v47);
    uint64_t v49 = (objc_class *)type metadata accessor for SignInWithAppleSharedCredential();
    v56.receiver = v48;
    v56.super_class = v49;
    id v50 = objc_msgSendSuper2(&v56, "init");
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v52);
    sub_1000BC7D4(a1);
  }

  return v50;
}

id sub_1000E6444@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  id result = sub_1000E5D54(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000E6494(void *a1)
{
  return sub_1000E5A1C(a1);
}

unint64_t sub_1000E64B4()
{
  unint64_t result = qword_10020E798;
  if (!qword_10020E798)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164344, &type metadata for SignInWithAppleSharedCredential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020E798);
  }

  return result;
}

void sub_1000E64F8(void *a1)
{
  id v2 = [a1 shareInfo];
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  id v4 = [v2 shareToken];
  if (!v4)
  {

LABEL_6:
    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v36 = v35;
    uint64_t v59 = -16007LL;
    unint64_t v37 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v38 = sub_1000BC768();
    uint64_t v39 = _BridgedStoredNSError.init(_:userInfo:)(&v60, &v59, v37, v36, v38);
    swift_willThrow(v39);

    return;
  }

  id v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v57 = v7;
  uint64_t v58 = v6;

  id v8 = [a1 clientID];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v55 = v10;
  uint64_t v56 = v9;

  id v11 = [a1 teamID];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v53 = v13;
  uint64_t v54 = v12;

  id v14 = [a1 localizedAppName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v51 = v16;
  uint64_t v52 = v15;

  id v17 = [a1 userID];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v49 = v19;
  uint64_t v50 = v18;

  id v20 = [v3 groupID];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v47 = v22;
  uint64_t v48 = v21;

  id v23 = [v3 participantID];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v45 = v25;
  uint64_t v46 = v24;

  id v26 = [v3 participantName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  id v30 = [a1 privateEmail];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v34 = v33;
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v34 = 0LL;
  }

  id v40 = [a1 localizedAppDeveloperName];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  id v44 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  sub_1000E55B8(v56, v55, v54, v53, v52, v51, v50, v49, v58, v57, v48, v47, v46, v45, v27, v29, v32, v34, v41, v43);
}

id sub_1000E67D4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = [a1 clientID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v48 = v8;
  uint64_t v49 = v7;

  id v9 = [a1 teamID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v46 = v11;
  uint64_t v47 = v10;

  id v12 = [a1 localizedAppName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v44 = v14;
  uint64_t v45 = v13;

  id v15 = [a1 userID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v42 = v17;
  uint64_t v43 = v16;

  id v18 = [a2 groupID];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v40 = v20;
  uint64_t v41 = v19;

  id v21 = [a2 participantID];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  id v25 = [a2 participantName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  id v29 = [a1 privateEmail];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v33 = v32;
  }

  else
  {
    uint64_t v31 = 0LL;
    uint64_t v33 = 0LL;
  }

  id v34 = [a1 localizedAppDeveloperName];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v37 = v36;

  id v38 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  return sub_1000E55B8(v49, v48, v47, v46, v45, v44, v43, v42, a3, a4, v41, v40, v22, v24, v26, v28, v31, v33, v35, v37);
}

uint64_t getEnumTagSinglePayload for SignInWithAppleSharedCredential.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for SignInWithAppleSharedCredential.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_1000E6AD8 + 4 * byte_100164200[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000E6B0C + 4 * byte_1001641FB[v4]))();
}

uint64_t sub_1000E6B0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6B14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6B1CLL);
  }
  return result;
}

uint64_t sub_1000E6B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E6B30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_1000E6B34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6B3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000E6B48(_BYTE *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SignInWithAppleSharedCredential.CodingKeys()
{
  return &type metadata for SignInWithAppleSharedCredential.CodingKeys;
}

unint64_t sub_1000E6B64()
{
  unint64_t result = qword_10020E7A8;
  if (!qword_10020E7A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016431C, &type metadata for SignInWithAppleSharedCredential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020E7A8);
  }

  return result;
}

unint64_t sub_1000E6BAC()
{
  unint64_t result = qword_10020E7B0;
  if (!qword_10020E7B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016428C, &type metadata for SignInWithAppleSharedCredential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020E7B0);
  }

  return result;
}

unint64_t sub_1000E6BF4()
{
  unint64_t result = qword_10020E7B8;
  if (!qword_10020E7B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001642B4, &type metadata for SignInWithAppleSharedCredential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10020E7B8);
  }

  return result;
}

uint64_t sub_1000E6C38(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449746E65696C63LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449746E65696C63LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x44496D616574LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496D616574LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x614E746E65696C63LL && a2 == 0xEA0000000000656DLL)
  {
    unint64_t v8 = 0xEA0000000000656DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E746E65696C63LL, 0xEA0000000000656DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x444972657375LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444972657375LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6B6F546572616873LL && a2 == 0xEA00000000006E65LL)
  {
    unint64_t v10 = 0xEA00000000006E65LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F546572616873LL, 0xEA00000000006E65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x444970756F7267LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v11 = 0xE700000000000000LL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970756F7267LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_38;
  }

  if (a1 == 0x7069636974726170LL && a2 == 0xED00004449746E61LL)
  {
    unint64_t v12 = 0xED00004449746E61LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069636974726170LL, 0xED00004449746E61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0x7069636974726170LL && a2 == 0xEF656D614E746E61LL)
  {
    unint64_t v13 = 0xEF656D614E746E61LL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069636974726170LL, 0xEF656D614E746E61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_50;
  }

  if (a1 == 0x4565746176697270LL && a2 == 0xEC0000006C69616DLL)
  {
    unint64_t v14 = 0xEC0000006C69616DLL;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4565746176697270LL, 0xEC0000006C69616DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_56;
  }

  if (a1 == 0x65706F6C65766564LL && a2 == 0xED0000656D614E72LL)
  {
    unint64_t v15 = 0xED0000656D614E72LL;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65706F6C65766564LL, 0xED0000656D614E72LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_62;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000010016EA20LL)
  {
    swift_bridgeObjectRelease(0x800000010016EA20LL);
    return 10LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010016EA20LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_1000E711C(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000E71A8(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_1000E71C4, 0LL, 0LL);
}

uint64_t sub_1000E71C4()
{
  if ([*(id *)(*(void *)(v0 + 80) + 24) isSiwaCredentialSharingEnabled])
  {
    sub_1000E7938();
    id v1 = [*(id *)(v0 + 64) signInWithAppleAccount];
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v1;
    if (v1)
    {
      id v2 = v1;
      uint64_t v3 = *(void **)(v0 + 64);
      sub_1000BC7B0((void *)(*(void *)(v0 + 80) + 32LL), *(void *)(*(void *)(v0 + 80) + 56LL));
      id v4 = [v3 altDSID];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v6 = v5;

      sub_1000EC120();
      uint64_t v26 = *(void **)(v0 + 64);
      swift_bridgeObjectRelease(v6);
      id v27 = [v26 altDSID];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v30 = v29;

      *(void *)(v0 + 96) = v30;
      uint64_t v31 = (void *)swift_task_alloc(dword_10020E8D4);
      *(void *)(v0 + 104) = v31;
      void *v31 = v0;
      v31[1] = sub_1000E7524;
      uint64_t v32 = *(void *)(v0 + 80);
      v31[18] = v30;
      v31[19] = v32;
      v31[16] = v2;
      v31[17] = v28;
      return swift_task_switch(sub_1000E7B94, 0LL, 0LL);
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v7 = (void *)(v0 + 32);
    id v8 = (uint64_t *)(v0 + 40);
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_1000B8C38(v20, (uint64_t)qword_100210FF0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No SIWA account set in context.", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v25;
    uint64_t v16 = -16007LL;
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    unint64_t v7 = (void *)(v0 + 16);
    id v8 = (uint64_t *)(v0 + 24);
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000B8C38(v9, (uint64_t)qword_100210FF0);
    unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Feature flag SiwaCredentialSharingEnabled is not enabled",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v16 = -16001LL;
  }

  *id v8 = v16;
  unint64_t v17 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v18 = sub_1000BC768();
  uint64_t v19 = _BridgedStoredNSError.init(_:userInfo:)(v7, v8, v17, v15, v18);
  swift_willThrow(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E7524()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_1000E7898;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 96));
    id v4 = sub_1000E7590;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000E7590()
{
  if (![*(id *)(v0 + 64) _isMoveAccountRequest])
  {
    uint64_t v17 = swift_task_alloc(dword_10020E7F4);
    *(void *)(v0 + 144) = v17;
    *(void *)uint64_t v17 = v0;
    *(void *)(v17 + _Block_object_dispose(&a9, 8) = sub_1000E7834;
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 64);
    *(_OWORD *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = *(_OWORD *)(v0 + 72);
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 32) = v18;
    uint64_t v16 = sub_1000E82D8;
    return swift_task_switch(v16, 0LL, 0LL);
  }

  id v1 = [*(id *)(v0 + 64) currentGroupID];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void **)(v0 + 72);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v6 = v5;

    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v6;
    id v7 = [v3 groupID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    if (v4 == v8 && v6 == v10)
    {
      swift_bridgeObjectRelease(v6);
    }

    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v10, 0LL);
      swift_bridgeObjectRelease(v10);
      if ((v12 & 1) == 0)
      {
        uint64_t v13 = swift_task_alloc(dword_10020E7FC);
        *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v13;
        *(void *)uint64_t v13 = v0;
        *(void *)(v13 + _Block_object_dispose(&a9, 8) = sub_1000E7784;
        uint64_t v14 = *(void *)(v0 + 88);
        uint64_t v15 = *(void *)(v0 + 64);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v0 + 72);
        *(void *)(v13 + 56) = v4;
        *(void *)(v13 + 64) = v6;
        *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v15;
        *(void *)(v13 + 4_Block_object_dispose(&a9, 8) = v14;
        uint64_t v16 = sub_1000E90A8;
        return swift_task_switch(v16, 0LL, 0LL);
      }
    }

    swift_bridgeObjectRelease(v6);
  }

  uint64_t v21 = *(void **)(v0 + 88);
  type metadata accessor for SignInWithAppleError(0LL);
  uint64_t v23 = v22;
  *(void *)(v0 + 56) = -16007LL;
  unint64_t v24 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v25 = sub_1000BC768();
  uint64_t v26 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 48), v0 + 56, v24, v23, v25);
  swift_willThrow(v26);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E7784()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 120));
  if (v0) {
    uint64_t v4 = sub_1000E78D0;
  }
  else {
    uint64_t v4 = sub_1000E77F0;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000E77F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 88));
}

uint64_t sub_1000E7834()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000E7904;
  }
  else {
    uint64_t v3 = sub_1000E9B28;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000E7898()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 96));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E78D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E7904()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E7938()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Entitlement Check", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void **)(v0 + 16);
  id v7 = [v6 hasInternalAccess];
  if ((v7 & 1) != 0 || (id v7 = [v6 hasPrivateAccess], (_DWORD)v7))
  {
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client has necessary permission for accounts sharing", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Client doesn't have access to perform account sharing",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v20 = -16002LL;
    unint64_t v16 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v17 = sub_1000BC768();
    uint64_t v18 = _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    swift_willThrow(v18);
  }

  return 1LL;
}

uint64_t sub_1000E7B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1000E7B94, 0LL, 0LL);
}

uint64_t sub_1000E7B94()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 152) + 72LL);
  NSString v2 = [*(id *)(v0 + 128) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v4 = v3;
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  uint64_t v5 = v0 + 16;
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v6;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1000E7C90;
  uint64_t v7 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
  uint64_t v8 = (void *)(v0 + 80);
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_1000E711C;
  v8[3] = &unk_1001CC3B8;
  void v8[4] = v7;
  [v1 fetchDeveloperTeamWithClientID:v2 withAltDSID:v6 completion:v8];
  return swift_continuation_await(v5);
}

uint64_t sub_1000E7C90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 176LL) = v1;
  if (v1) {
    NSString v2 = sub_1000E8224;
  }
  else {
    NSString v2 = sub_1000E7CF0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000E7CF0()
{
  uint64_t v1 = (void *)(v0 + 120);
  NSString v2 = *(void **)(v0 + 120);
  uint64_t v3 = (void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 160);
  uint64_t v5 = *(void **)(v0 + 128);

  id v6 = [v2 apps];
  unint64_t v7 = sub_1000C6FCC();
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for String,  v7,  &protocol witness table for String);

  id v9 = [v5 clientID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  if (!*(void *)(v8 + 16) || (sub_1000F9BB8(v10, v12), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v23 = *(void **)(v0 + 128);
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v24, (uint64_t)qword_100210FF0);
    id v25 = v2;
    id v26 = v23;
    id v27 = v25;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void **)(v0 + 128);
    if (v30)
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v60 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v32 = 136315394;
      v61[0] = v60;
      os_log_type_t type = v29;
      id v33 = [v27 teamID];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      unint64_t v36 = v35;

      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v34, v36, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v36);

      *(_WORD *)(v32 + 12) = 2080;
      id v37 = [v31 clientID];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v40 = v39;

      uint64_t v41 = v38;
      uint64_t v3 = (void *)(v0 + 80);
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v41, v40, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v40);

      _os_log_impl( (void *)&_mh_execute_header,  v28,  type,  "Developer team %s doesn't have the app with client id %s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v43 = v42;
    void *v1 = -16007LL;
    unint64_t v44 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v45 = sub_1000BC768();
    uint64_t v46 = v3;
    uint64_t v47 = v0 + 120;
    unint64_t v48 = v44;
    goto LABEL_12;
  }

  uint64_t v14 = *(void **)(v0 + 128);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v12);
  id v15 = [v14 userID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  id v19 = [v2 userIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  if (v16 != v20 || v18 != v22)
  {
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v18);
    if ((v51 & 1) != 0) {
      goto LABEL_14;
    }
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    uint64_t v53 = sub_1000B8C38(v52, (uint64_t)qword_100210FF0);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "User identfier doesn't match", v56, 2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v43 = v57;
    void *v1 = -16007LL;
    unint64_t v58 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v45 = sub_1000BC768();
    uint64_t v46 = (void *)(v0 + 80);
    uint64_t v47 = v0 + 120;
    unint64_t v48 = v58;
LABEL_12:
    uint64_t v49 = _BridgedStoredNSError.init(_:userInfo:)(v46, v47, v48, v43, v45);
    swift_willThrow(v49);

    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  swift_bridgeObjectRelease_n(v18, 2LL);
LABEL_14:

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_1000E8224()
{
  uint64_t v1 = *(void **)(v0 + 168);
  NSString v2 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000E8270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1000E82D8, 0LL, 0LL);
}

uint64_t sub_1000E82D8()
{
  if ([*(id *)(v0 + 24) _simulateAccountSharingResponse])
  {
    uint64_t v1 = *(void **)(v0 + 40);
    id v2 = *(id *)(v0 + 32);
    id v3 = v1;
    uint64_t v4 = sub_1000E9A24();
    id v6 = sub_1000E67D4(v2, v3, v4, v5);
    unint64_t v7 = *(void **)(v0 + 32);

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1000B8C38(v10, (uint64_t)qword_100210FF0);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Simulated share token", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    *(void *)(v0 + 72) = v6;
    id v15 = *(void **)(v0 + 24);
    id v16 = [*(id *)(v0 + 32) clientID];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v19;
    id v20 = [v15 altDSID];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v23;
    uint64_t v24 = (void *)swift_task_alloc(dword_10020E8BC);
    *(void *)(v0 + 96) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1000E8754;
    uint64_t v25 = *(void *)(v0 + 48);
    v24[19] = v23;
    v24[20] = v25;
    v24[17] = v19;
    v24[18] = v21;
    v24[16] = v17;
    return swift_task_switch(sub_1000E891C, 0LL, 0LL);
  }

  else
  {
    sub_1000BC7B0((void *)(*(void *)(v0 + 48) + 88LL), *(void *)(*(void *)(v0 + 48) + 112LL));
    uint64_t v8 = (void *)swift_task_alloc(dword_10020DC34);
    *(void *)(v0 + 56) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000E8588;
    return sub_1000C8290(*(void *)(v0 + 32), *(void *)(v0 + 40));
  }

uint64_t sub_1000E8588(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 64) = a1;
  return swift_task_switch(sub_1000E8648, 0LL, 0LL);
}

uint64_t sub_1000E8648()
{
  *(void *)(v0 + 72) = *(void *)(v0 + 64);
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = [*(id *)(v0 + 32) clientID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v5;
  id v6 = [v1 altDSID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_10020E8BC);
  *(void *)(v0 + 96) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000E8754;
  uint64_t v11 = *(void *)(v0 + 48);
  v10[19] = v9;
  v10[20] = v11;
  v10[17] = v5;
  v10[18] = v7;
  uint8_t v10[16] = v3;
  return swift_task_switch(sub_1000E891C, 0LL, 0LL);
}

uint64_t sub_1000E8754(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 104LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_1000E87F8, 0LL, 0LL);
}

uint64_t sub_1000E87F8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs);
  *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs) = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = *(void **)(v2 + 80);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  unsigned int v5 = [v4 addSharedAccountWithCredential:v1 error:v0 + 16];
  id v6 = *(void **)(v0 + 16);
  uint64_t v7 = *(void **)(v0 + 72);
  if (v5)
  {
    id v8 = v6;
  }

  else
  {
    id v9 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E88FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  uint8_t v5[16] = a1;
  return swift_task_switch(sub_1000E891C, 0LL, 0LL);
}

uint64_t sub_1000E891C()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[21] = sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[17];
  if (v6)
  {
    uint64_t v8 = v0[16];
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[10] = sub_100103438(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetcing all grouped apps for %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[17], 2LL);
  }

  uint64_t v11 = *(void **)(v0[20] + 72LL);
  NSString v12 = String._bridgeToObjectiveC()();
  v0[22] = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  v0[23] = v13;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000E8B70;
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000E711C;
  v0[13] = &unk_1001CC3A0;
  [v11 fetchDeveloperTeamWithClientID:v12 withAltDSID:v13 completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1000E8B70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 192LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E8EAC;
  }
  else {
    uint64_t v2 = sub_1000E8BD0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

void sub_1000E8BD0()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 120);

  BOOL v30 = v2;
  id v3 = [v2 apps];
  unint64_t v4 = sub_1000C6FCC();
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  v4,  &protocol witness table for String);

  int64_t v6 = 0LL;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v31 = v5 + 64;
  uint64_t v8 = -1LL;
  uint64_t v9 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v9);
  }
  unint64_t v10 = v8 & v7;
  int64_t v32 = (unint64_t)(63 - v9) >> 6;
  if ((v8 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  while (2)
  {
    int64_t v13 = v6 + 1;
    if (!__OFADD__(v6, 1LL))
    {
      if (v13 < v32)
      {
        unint64_t v14 = *(void *)(v31 + 8 * v13);
        ++v6;
        if (v14) {
          goto LABEL_22;
        }
        int64_t v6 = v13 + 1;
        if (v13 + 1 >= v32) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v6);
        if (v14) {
          goto LABEL_22;
        }
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v6);
        if (v14) {
          goto LABEL_22;
        }
        int64_t v6 = v13 + 3;
        if (v13 + 3 >= v32) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v6);
        if (v14)
        {
LABEL_22:
          unint64_t v10 = (v14 - 1) & v14;
          for (unint64_t i = __clz(__rbit64(v14)) + (v6 << 6); ; unint64_t i = v11 | (v6 << 6))
          {
            id v16 = *(id *)(*(void *)(v5 + 56) + 8 * i);
            id v17 = [v16 primaryClientID];
            if (!v17) {
              break;
            }
            uint64_t v18 = v17;
            uint64_t v20 = *(void *)(v0 + 128);
            uint64_t v19 = *(void *)(v0 + 136);
            uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            uint64_t v23 = v22;

            if (v21 == v20 && v23 == v19)
            {
              swift_bridgeObjectRelease(*(void *)(v0 + 136));
            }

            else
            {
              char v25 = _stringCompareWithSmolCheck(_:_:expecting:)( v21,  v23,  *(void *)(v0 + 128),  *(void *)(v0 + 136),  0LL);
              swift_bridgeObjectRelease(v23);
              if ((v25 & 1) == 0) {
                break;
              }
            }

            id v26 = [v16 clientID];
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
            uint64_t v29 = v28;

            sub_1000F1A58(v33, v27, v29);
            swift_bridgeObjectRelease(v33[1]);
            if (!v10) {
              goto LABEL_7;
            }
LABEL_6:
            unint64_t v11 = __clz(__rbit64(v10));
            v10 &= v10 - 1;
          }

          if (!v10) {
            continue;
          }
          goto LABEL_6;
        }

        int64_t v15 = v13 + 4;
        if (v15 < v32)
        {
          unint64_t v14 = *(void *)(v31 + 8 * v15);
          if (v14)
          {
            int64_t v6 = v15;
            goto LABEL_22;
          }

          while (1)
          {
            int64_t v6 = v15 + 1;
            if (__OFADD__(v15, 1LL)) {
              goto LABEL_35;
            }
            if (v6 >= v32) {
              break;
            }
            unint64_t v14 = *(void *)(v31 + 8 * v6);
            ++v15;
            if (v14) {
              goto LABEL_22;
            }
          }
        }
      }

uint64_t sub_1000E8EAC(uint64_t a1)
{
  id v3 = *(void **)(v1 + 184);
  uint64_t v2 = *(void *)(v1 + 192);
  unint64_t v4 = *(void **)(v1 + 176);
  uint64_t v5 = *(void *)(v1 + 136);
  swift_willThrow(a1);
  swift_errorRelease(v2);

  uint64_t v6 = swift_bridgeObjectRetain_n(v5, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = *(void *)(v1 + 128);
    unint64_t v9 = *(void *)(v1 + 136);
    unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100103438(v10, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "No matching team found for %s. Continuing...", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v1 + 136), 2LL);
  }

  return (*(uint64_t (**)(void *))(v1 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_1000E903C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  return swift_task_switch(sub_1000E90A8, 0LL, 0LL);
}

uint64_t sub_1000E90A8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v2;
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching old keychain item..", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 48);

  os_log_type_t v8 = *(void **)(v6 + 80);
  *(void *)(v0 + 96) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  id v10 = [v8 shareTokenForAccount:v7 inGroup:v9 error:v0 + 16];

  unint64_t v11 = *(void **)(v0 + 16);
  if (v10)
  {
    uint64_t v12 = *(void **)(v0 + 40);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    *(void *)(v0 + 104) = v14;
    id v16 = v11;

    if ([v12 _simulateAccountSharingResponse])
    {
      id v17 = *(void **)(v0 + 72);
      uint64_t v18 = *(void **)(v0 + 48);
      swift_bridgeObjectRelease(v15);
      id v19 = v18;
      id v20 = v17;
      uint64_t v21 = sub_1000E9A24();
      id v23 = sub_1000E67D4(v19, v20, v21, v22);
      uint64_t v24 = *(void **)(v0 + 48);

      id v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Simulated share token", v28, 2u);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v23;
      uint64_t v29 = *(void **)(v0 + 40);
      id v30 = [*(id *)(v0 + 48) clientID];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v33 = v32;

      *(void *)(v0 + 136) = v33;
      id v34 = [v29 altDSID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      *(void *)(v0 + 144) = v37;
      uint64_t v38 = (void *)swift_task_alloc(dword_10020E8BC);
      *(void *)(v0 + 152) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_1000E966C;
      uint64_t v39 = *(void *)(v0 + 80);
      v38[19] = v37;
      v38[20] = v39;
      v38[17] = v33;
      v38[18] = v35;
      uint8_t v38[16] = v31;
      return swift_task_switch(sub_1000E891C, 0LL, 0LL);
    }

    else
    {
      sub_1000BC7B0((void *)(*(void *)(v0 + 80) + 88LL), *(void *)(*(void *)(v0 + 80) + 112LL));
      uint64_t v43 = (void *)swift_task_alloc(dword_10020DC14);
      *(void *)(v0 + 112) = v43;
      void *v43 = v0;
      v43[1] = sub_1000E9498;
      return sub_1000C8FA8( *(void *)(v0 + 48),  *(void *)(v0 + 72),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  v13,  v15);
    }
  }

  else
  {
    id v41 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000E9498(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(*(void *)(v5 + 104));
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  return swift_task_switch(sub_1000E9560, 0LL, 0LL);
}

uint64_t sub_1000E9560()
{
  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = *(void *)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = [*(id *)(v0 + 48) clientID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  *(void *)(v0 + 136) = v5;
  id v6 = [v1 altDSID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(v0 + 144) = v9;
  id v10 = (void *)swift_task_alloc(dword_10020E8BC);
  *(void *)(v0 + 152) = v10;
  *id v10 = v0;
  v10[1] = sub_1000E966C;
  uint64_t v11 = *(void *)(v0 + 80);
  v10[19] = v9;
  v10[20] = v11;
  v10[17] = v5;
  v10[18] = v7;
  uint8_t v10[16] = v3;
  return swift_task_switch(sub_1000E891C, 0LL, 0LL);
}

uint64_t sub_1000E966C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 160LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_1000E9710, 0LL, 0LL);
}

uint64_t sub_1000E9710()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs);
  *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs) = v0[20];
  uint64_t v3 = swift_bridgeObjectRelease(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Removing old keychain item", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = (void *)v0[12];
  uint64_t v8 = v0[6];

  v0[3] = 0LL;
  unsigned int v9 = [v7 removeSharedAccount:v8 error:v0 + 3];
  id v10 = (void *)v0[3];
  if (!v9)
  {
    id v17 = (void *)v0[16];
LABEL_9:
    id v20 = v10;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow();
    id v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }

  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Removed old keychain item. Adding new keychain item with updated group.",  v13,  2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = v0[16];
  uint64_t v15 = (void *)v0[12];

  v0[4] = 0LL;
  unsigned int v16 = [v15 addSharedAccountWithCredential:v14 error:v0 + 4];
  id v10 = (void *)v0[4];
  id v17 = (void *)v0[16];
  if (!v16) {
    goto LABEL_9;
  }
  id v18 = v10;

  id v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000E9930()
{
  sub_1000BC7D4((void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  swift_unknownObjectRelease(*(void *)(v0 + 80));
  sub_1000BC7D4((void *)(v0 + 88));
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for AccountSharingController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd24AccountSharingController);
}

unint64_t sub_1000E999C(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    unint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000E9A24()
{
  unint64_t v0 = sub_1000E999C(0xFFFFuLL);
  unint64_t v1 = sub_1000E999C(0xFFFFuLL);
  uint64_t v2 = sub_1000B86DC((uint64_t *)&unk_10020E8C0);
  uint64_t v3 = swift_allocObject(v2, 112LL, 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_1001643A0;
  *(void *)(v3 + 56) = &type metadata for Int;
  *(void *)(v3 + 64) = &protocol witness table for Int;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 96) = &type metadata for Int;
  *(void *)(v3 + 104) = &protocol witness table for Int;
  *(void *)(v3 + 72) = v1;
  uint64_t v4 = String.init(format:_:)(0x5836302558363025LL, 0xE800000000000000LL, v3);
  id v6 = v5;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  return 0x7261685374736554LL;
}

void sub_1000E9B2C( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  id v32 = a2;
  uint64_t v11 = sub_1000B86DC(&qword_10020E928);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v15 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1001CC4E8, v19 + 16, v16 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20 + v17, v14, v11);
  uint64_t v21 = (void *)(v20 + v18);
  uint64_t v22 = v29;
  *uint64_t v21 = v28;
  v21[1] = v22;
  id v23 = (void *)(v20 + v19);
  uint64_t v24 = v31;
  void *v23 = v30;
  v23[1] = v24;
  aBlock[4] = sub_1000EBEEC;
  uint64_t v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000EA958;
  aBlock[3] = &unk_1001CC500;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = v34;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  swift_release(v26);
  [v32 getGroupByGroupID:v15 completion:v25];
  _Block_release(v25);
}

void sub_1000E9CD8( void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    uint64_t v11 = a2;
    swift_errorRetain(a2);
    if (qword_10020CF90 == -1)
    {
LABEL_3:
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_1000B8C38(v12, (uint64_t)qword_100210FF0);
      uint64_t v13 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v17 = swift_slowAlloc(32LL, -1LL);
        v93[0] = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v94 = sub_100103438(a3, a4, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error fetching information for group (%s)", v16, 0xCu);
        swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      v93[0] = v11;
      uint64_t v35 = sub_1000B86DC(&qword_10020E928);
      uint64_t v36 = v93;
LABEL_24:
      CheckedContinuation.resume(throwing:)(v36, v35);
      return;
    }

LABEL_47:
    swift_once(&qword_10020CF90, sub_1000E54FC);
    goto LABEL_3;
  }

  if (!a1)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_1000B8C38(v37, (uint64_t)qword_100210FF0);
    uint64_t v38 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      v93[0] = v42;
      *(_DWORD *)id v41 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v94 = sub_100103438(a3, a4, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Current user is not part of the group (%s)", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v44 = v43;
    uint64_t v94 = -16010LL;
    unint64_t v45 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v46 = sub_1000BC768();
    _BridgedStoredNSError.init(_:userInfo:)(v93, &v94, v45, v44, v46);
    uint64_t v94 = v93[0];
    uint64_t v35 = sub_1000B86DC(&qword_10020E928);
    uint64_t v36 = &v94;
    goto LABEL_24;
  }

  uint64_t v20 = a6;
  if (a6 == a8 && a7 == a9 || (_stringCompareWithSmolCheck(_:_:expecting:)(a6, a7, a8, a9, 0LL) & 1) != 0)
  {
    unint64_t v90 = a4;
    id v21 = a1;
    id v22 = [v21 participants];
    uint64_t v23 = sub_1000D0510(0LL, &qword_10020E8F8, &OBJC_CLASS___KCSharingParticipant_ptr);
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    uint64_t v88 = a3;
    uint64_t v89 = v21;
    uint64_t v92 = v20;
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0) {
        uint64_t v76 = v24;
      }
      else {
        uint64_t v76 = v24 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v24);
      a4 = _CocoaArrayWrapper.endIndex.getter(v76);
      if (a4)
      {
LABEL_11:
        a3 = v24 & 0xC000000000000001LL;
        uint64_t v25 = 4LL;
        while (1)
        {
          uint64_t v11 = v25 - 4;
          id v27 = a3
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v24)
              : *(id *)(v24 + 8 * v25);
          uint64_t v28 = v27;
          uint64_t v29 = v25 - 3;
          if (__OFADD__(v11, 1LL)) {
            break;
          }
          id v30 = objc_msgSend(v27, "participantID", v88, v89);
          if (v30)
          {
            uint64_t v31 = v30;
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
            uint64_t v34 = v33;

            if (v32 == 0xD000000000000010LL && v34 == 0x800000010016EBB0LL)
            {
              swift_bridgeObjectRelease_n(v24, 2LL);
              swift_bridgeObjectRelease(0x800000010016EBB0LL);
LABEL_37:
              uint64_t v20 = v92;
              goto LABEL_38;
            }

            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, 0xD000000000000010LL, 0x800000010016EBB0LL, 0LL);
            swift_bridgeObjectRelease(v34);
            if ((v26 & 1) != 0)
            {
              swift_bridgeObjectRelease_n(v24, 2LL);
              goto LABEL_37;
            }
          }

          ++v25;
          if (v29 == a4) {
            goto LABEL_52;
          }
        }

        __break(1u);
        goto LABEL_47;
      }
    }

    else
    {
      a4 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v24);
      if (a4) {
        goto LABEL_11;
      }
    }

void sub_1000EA958(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_1000EAB18(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[4] = a5;
  void v5[5] = _Block_copy(aBlock);
  v5[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5[7] = v10;
  v5[8] = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5[9] = v11;
  v5[10] = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5[11] = v12;
  id v13 = a5;
  return swift_task_switch(sub_1000EAB9C, 0LL, 0LL);
}

uint64_t sub_1000EAB9C()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  __int128 v9 = *(_OWORD *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = swift_task_alloc(80LL);
  *(void *)(v0 + 96) = v6;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v3;
  *(_OWORD *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v9;
  *(void *)(v6 + 56) = v2;
  *(void *)(v6 + 64) = v1;
  id v7 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 104) = v7;
  *id v7 = v0;
  v7[1] = sub_1000EAC74;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD00000000000003DLL,  0x800000010016EB40LL,  sub_1000EBE2C,  v6,  &type metadata for String);
}

uint64_t sub_1000EAC74()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000EAD78;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 96));
    uint64_t v4 = sub_1000EACE0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000EACE0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = *(void *)(v0 + 24);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, NSString, void))v6)[2](v6, v5, 0LL);

  _Block_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EAD78()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v2);
  uint64_t v6 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  id v7 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, void, void *))v7)[2](v7, 0LL, v6);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EAE20()
{
  v1[18] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[19] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[20] = v3;
  v1[21] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000EAE80, 0LL, 0LL);
}

uint64_t sub_1000EAE80()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[18];
  id v3 = [(id)objc_opt_self(KCSharingGroupFetchRequest) all];
  v0[22] = v3;
  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_1000EAF48;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000EB524;
  v5[3] = &unk_1001CC448;
  v5[4] = v4;
  [v2 getGroupsWithRequest:v3 completion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_1000EAF48()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 184LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EB4D8;
  }
  else {
    uint64_t v2 = sub_1000EAFA8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EAFA8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 136);

  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v59 = v2;
  while (v3)
  {
    unint64_t v4 = 0LL;
    unint64_t v61 = v2 & 0xC000000000000001LL;
    uint64_t v57 = v2 + 32;
    uint64_t v58 = v2 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    uint64_t v60 = v3;
    while (v61)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v59);
      BOOL v8 = __OFADD__(v4, 1LL);
      unint64_t v9 = v4 + 1;
      if (v8) {
        goto LABEL_50;
      }
LABEL_12:
      id v63 = v7;
      id v10 = [v7 participants];
      uint64_t v11 = sub_1000D0510(0LL, &qword_10020E8F8, &OBJC_CLASS___KCSharingParticipant_ptr);
      uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

      if ((unint64_t)v12 >> 62)
      {
        if (v12 < 0) {
          uint64_t v46 = v12;
        }
        else {
          uint64_t v46 = v12 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v12);
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v46);
      }

      else
      {
        uint64_t v2 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v12);
      }

      uint64_t v64 = (uint64_t)v5;
      unint64_t v62 = v9;
      if (v2)
      {
        if (v2 < 1) {
          goto LABEL_52;
        }
        uint64_t v13 = 0LL;
        uint64_t v14 = _swiftEmptyArrayStorage;
        do
        {
          if ((v12 & 0xC000000000000001LL) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v12);
          }
          else {
            id v15 = *(id *)(v12 + 8 * v13 + 32);
          }
          uint64_t v16 = v15;
          id v17 = [v15 participantID];
          if (v17)
          {
            unint64_t v18 = v17;
            uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            uint64_t v21 = v20;

            if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
              uint64_t v14 = sub_1000EB9DC(0LL, v14[2] + 1LL, 1, v14);
            }
            unint64_t v23 = v14[2];
            unint64_t v22 = v14[3];
            if (v23 >= v22 >> 1) {
              uint64_t v14 = sub_1000EB9DC((void *)(v22 > 1), v23 + 1, 1, v14);
            }
            v14[2] = v23 + 1;
            uint64_t v24 = &v14[2 * v23];
            void v24[4] = v19;
            void v24[5] = v21;
          }

          else
          {
          }

          ++v13;
        }

        while (v2 != v13);
      }

      else
      {
        uint64_t v14 = _swiftEmptyArrayStorage;
      }

      swift_bridgeObjectRelease_n(v12, 2LL);
      id v25 = [v63 groupID];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v2 = v27;

      uint64_t v28 = Set.init(minimumCapacity:)(v14[2], &type metadata for String, &protocol witness table for String);
      uint64_t v65 = v28;
      uint64_t v29 = v14[2];
      if (v29)
      {
        id v30 = v14 + 5;
        do
        {
          uint64_t v31 = *(v30 - 1);
          uint64_t v32 = *v30;
          swift_bridgeObjectRetain(*v30);
          sub_1000F1A58(v66, v31, v32);
          swift_bridgeObjectRelease(v66[1]);
          v30 += 2;
          --v29;
        }

        while (v29);
        uint64_t v33 = v65;
      }

      else
      {
        uint64_t v33 = v28;
      }

      swift_bridgeObjectRelease(v14);
      uint64_t v5 = (void *)v64;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
      v66[0] = v64;
      unint64_t v36 = sub_1000F9BB8(v26, v2);
      uint64_t v37 = *(void *)(v64 + 16);
      BOOL v38 = (v35 & 1) == 0;
      uint64_t v39 = v37 + v38;
      if (__OFADD__(v37, v38)) {
        goto LABEL_51;
      }
      char v40 = v35;
      if (*(void *)(v64 + 24) >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v35 & 1) != 0) {
            goto LABEL_4;
          }
        }

        else
        {
          sub_1000F16FC();
          uint64_t v5 = (void *)v66[0];
          if ((v40 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      else
      {
        sub_1000F0708(v39, isUniquelyReferenced_nonNull_native);
        uint64_t v5 = (void *)v66[0];
        unint64_t v41 = sub_1000F9BB8(v26, v2);
        if ((v40 & 1) != (v42 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        unint64_t v36 = v41;
        if ((v40 & 1) != 0)
        {
LABEL_4:
          uint64_t v6 = v5[7];
          swift_bridgeObjectRelease(*(void *)(v6 + 8 * v36));
          *(void *)(v6 + 8 * v36) = v33;
          goto LABEL_5;
        }
      }

      v5[(v36 >> 6) + 8] |= 1LL << v36;
      uint64_t v43 = (uint64_t *)(v5[6] + 16 * v36);
      uint64_t *v43 = v26;
      v43[1] = v2;
      *(void *)(v5[7] + 8 * v36) = v33;
      uint64_t v44 = v5[2];
      BOOL v8 = __OFADD__(v44, 1LL);
      uint64_t v45 = v44 + 1;
      if (v8) {
        goto LABEL_53;
      }
      v5[2] = v45;
      swift_bridgeObjectRetain(v2);
LABEL_5:
      swift_bridgeObjectRelease(0x8000000000000000LL);
      swift_bridgeObjectRelease(v2);

      unint64_t v4 = v62;
      if (v62 == v60) {
        goto LABEL_60;
      }
    }

    if (v4 >= *(void *)(v58 + 16)) {
      goto LABEL_54;
    }
    id v7 = *(id *)(v57 + 8 * v4);
    BOOL v8 = __OFADD__(v4, 1LL);
    unint64_t v9 = v4 + 1;
    if (!v8) {
      goto LABEL_12;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    if (v2 < 0) {
      uint64_t v48 = v2;
    }
    else {
      uint64_t v48 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease(v2);
    uint64_t v59 = v2;
  }

  uint64_t v5 = &_swiftEmptyDictionarySingleton;
LABEL_60:
  uint64_t v49 = *(void *)(v56 + 160);
  uint64_t v50 = *(void *)(v56 + 168);
  uint64_t v51 = *(void *)(v56 + 152);
  swift_bridgeObjectRelease(v59);
  uint64_t v52 = (objc_class *)type metadata accessor for SharedGroupsMembershipInfo(0LL);
  uint64_t v53 = (char *)objc_allocWithZone(v52);
  *(void *)&v53[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants] = v5;
  uint64_t v54 = v53;
  static Date.now.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))( &v54[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate],  v50,  v51);

  *(void *)(v56 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v54;
  *(void *)(v56 + 12_Block_object_dispose(&a9, 8) = v52;
  id v55 = objc_msgSendSuper2((objc_super *)(v56 + 120), "init");
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(id))(v56 + 8))(v55);
}

uint64_t sub_1000EB4D8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 168);
  swift_willThrow();

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB524(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *id v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = sub_1000D0510(0LL, &qword_10020E900, &OBJC_CLASS___KCSharingGroup_ptr);
    **(void **)(*(void *)(v3 + 64) + 40LL) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000EB6E8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020E8F4;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1000EB748;
  return sub_1000EAE20();
}

uint64_t sub_1000EB748(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc(v5);

  id v8 = *(void (***)(void, void, void))(v7 + 24);
  if (v3)
  {
    unint64_t v9 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v8)[2](v8, 0LL, v9);

    _Block_release(v8);
  }

  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0LL);
    _Block_release(v8);
  }

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000EB804()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000EB830()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10020E8E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020E8E0 + dword_10020E8E0))(v2, v3);
}

void *sub_1000EB89C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000EB8C4(a1, a2, a3, a4, (uint64_t *)&unk_10020D910, &qword_10020DCC8);
}

void *sub_1000EB8B0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000EB8C4(a1, a2, a3, a4, &qword_10020E930, &qword_10020DC38);
}

void *sub_1000EB8C4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_1000B86DC(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      id v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      id v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4]) {
          memmove(v17, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000EBAE8(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_1000EB9DC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1000B86DC(&qword_10020DCC0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000EBBEC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EBAE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 8 * a1 + 32;
    unint64_t v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_1000B86DC(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EBBEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000EBCDC()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000EBD20()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  unint64_t v5 = (void *)v0[5];
  unint64_t v6 = (void *)v0[6];
  unint64_t v7 = (void *)swift_task_alloc(dword_10020E90C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *unint64_t v7 = v1;
  v7[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *))((char *)&dword_10020E908 + dword_10020E908))( v2,  v3,  v4,  v5,  v6);
}

uint64_t sub_1000EBDA8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc(dword_10020EF4C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_1000B87BC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10020EF48 + dword_10020EF48))( a1,  v4,  v5,  v6);
}

void sub_1000EBE2C(uint64_t a1)
{
}

uint64_t sub_1000EBE40()
{
  uint64_t v1 = sub_1000B86DC(&qword_10020E928);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_1000EBEEC(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1000B86DC(&qword_10020E928) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000E9CD8( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  v2 + v6,  *(void *)(v2 + v7),  *(void *)(v2 + v7 + 8),  *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1000EBF78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EBF88(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1000EBF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      uint64_t v6 = 4LL;
      while (1)
      {
        id v7 = (a1 & 0xC000000000000001LL) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        unint64_t v8 = v7;
        uint64_t v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1LL)) {
          break;
        }
        id v10 = [v7 participantID];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            uint64_t v17 = a3;
            goto LABEL_18;
          }

          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            uint64_t v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5) {
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_20:
      uint64_t v18 = a3;
      if (a1 < 0) {
        uint64_t v19 = a1;
      }
      else {
        uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      uint64_t v5 = v20;
    }

    while (v20);
  }

uint64_t sub_1000EC120()
{
  uint64_t v1 = *(void **)(v0 + 16);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 authKitAccountWithAltDSID:v2];

  if (v3)
  {
    sub_1000EC298((uint64_t)v3);
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Ineligible to share account - No authkit account for altDSID",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v10 = v9;
    uint64_t v15 = -16004LL;
    unint64_t v11 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v12 = sub_1000BC768();
    uint64_t v13 = _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v11, v10, v12);
    swift_willThrow(v13);
  }

  return 1LL;
}

uint64_t sub_1000EC298(uint64_t a1)
{
  if ([*(id *)(v1 + 16) securityLevelForAccount:a1] != (id)4)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_1000B8C38(v7, (uint64_t)qword_100210FF0);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ineligible to share account - Account is not HSA2", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v13 = v12;
    uint64_t v14 = -16005LL;
    goto LABEL_18;
  }

  if (![*(id *)(v1 + 24) isUserVisibleKeychainSyncEnabled])
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_1000B8C38(v15, (uint64_t)qword_100210FF0);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Ineligible to share account - User visible keychain is not enabled",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v13 = v20;
    uint64_t v14 = -16006LL;
LABEL_18:
    uint64_t v25 = v14;
    unint64_t v21 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v22 = sub_1000BC768();
    unint64_t v23 = _BridgedStoredNSError.init(_:userInfo:)(&v26, &v25, v21, v13, v22);
    swift_willThrow(v23);
    return 1LL;
  }

  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Eligible to perform account sharing", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  return 1LL;
}

uint64_t type metadata accessor for AccountSharingPreFlightChecker()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd30AccountSharingPreFlightChecker);
}

uint64_t sub_1000EC57C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000EC604()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, *(void *)(*(void *)v0 + 80LL));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 104LL)));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000EC664()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Oneshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EC6AC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Oneshot);
}

uint64_t sub_1000EC688()
{
  return v0;
}

uint64_t sub_1000EC694()
{
  return sub_1000EC688();
}

uint64_t sub_1000EC6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _DWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000EC6D8()
{
  *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = v0;
  return swift_task_switch(sub_1000EC6F0, 0LL, 0LL);
}

uint64_t sub_1000EC6F0()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching current group memership info", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0 + 2;
  uint64_t v7 = v0[16];

  uint64_t v8 = *(void **)(v7 + 16);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000EC83C;
  uint64_t v9 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  os_log_type_t v10 = v0 + 10;
  v10[1] = 0x40000000LL;
  v10[2] = sub_1000E711C;
  v10[3] = &unk_1001CC630;
  void v10[4] = v9;
  [v8 fetchGroupParticipantsWithCompletionHandler:v10];
  return swift_continuation_await(v6);
}

uint64_t sub_1000EC83C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 136LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EC89C;
  }
  else {
    uint64_t v2 = sub_1000DB48C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EC89C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000EC8D8(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000B8C38(v6, (uint64_t)qword_100210FF0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Saving shared group membership info", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  unint64_t v11 = *(void **)(v4 + 24);
  id v12 = sub_1000C5284();
  id v26 = 0LL;
  unsigned int v13 = [v11 deleteKeychainItemsFor:v12 error:&v26];

  id v14 = v26;
  if (v13)
  {
    id v15 = v26;
  }

  else
  {
    id v16 = v26;
    uint64_t v17 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v18);
    swift_errorRelease(v17);
    uint64_t v3 = 0LL;
  }

  sub_1000BD3A8();
  id v19 = sub_1000C4ED4(a1);
  if (!v3)
  {
    uint64_t v20 = v19;
    id v26 = 0LL;
    unsigned __int8 v21 = [v11 addWithItem:v19 error:&v26];
    id v22 = v26;
    if ((v21 & 1) != 0)
    {
      id v23 = v26;
    }

    else
    {
      id v24 = v26;
      _convertNSErrorToError(_:)(v22);

      swift_willThrow(v25);
    }
  }

uint64_t sub_1000ECAD0()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for SharedGroupsMembershipController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3akd32SharedGroupsMembershipController);
}

uint64_t sub_1000ECB20(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String);
  int64_t v3 = 0LL;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1000ECCB4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(_BYTE **)(*(void *)(v3 + 64) + 40LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000ECD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1000ECE68(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000EF168(a1, a2, a3, (unint64_t *)&unk_10020EBC8, &OBJC_CLASS___AKDeveloperTeam_ptr);
}

uint64_t sub_1000ECE7C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_1000F3874(a1, (uint64_t)sub_1000F412C, 0LL, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

uint64_t sub_1000ECF84(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  return swift_task_switch(sub_1000ECFA0, 0LL, 0LL);
}

uint64_t sub_1000ECFA0()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[19] = sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[17];
  if (v6)
  {
    uint64_t v8 = v0[16];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[10] = sub_100103438(v8, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching EULA for clientID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[17], 2LL);
  }

  uint64_t v11 = v0[17];
  uint64_t v12 = v0[16];
  BOOL v13 = *(void **)(v0[18] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  uint64_t v14 = sub_1000B86DC(&qword_10020DCC0);
  uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
  *(void *)(v15 + 32) = v12;
  *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v11;
  swift_bridgeObjectRetain(v11);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[20] = isa;
  swift_bridgeObjectRelease(v15);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000ED228;
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000ED638;
  v0[13] = &unk_1001CC6E0;
  [v13 appMetadataForBundleIDs:isa completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1000ED228()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 168LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000ED4A8;
  }
  else {
    uint64_t v2 = sub_1000ED288;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000ED288()
{
  uint64_t v1 = *(void *)(v0 + 120);

  if (!*(void *)(v1 + 16)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain(v2);
  unint64_t v4 = sub_1000F9BB8(v3, v2);
  uint64_t v5 = *(void *)(v0 + 136);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 136));
LABEL_6:
    swift_bridgeObjectRelease(v1);
    goto LABEL_7;
  }

  id v7 = *(id *)(*(void *)(v1 + 56) + 8 * v4);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);
  id v8 = [v7 eula];

  if (v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v9, v11);
  }

uint64_t sub_1000ED4A8(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 160);
  uint64_t v2 = *(void *)(v1 + 168);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v1 + 168);
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetch EULA failed with error: %@", v8, 0xCu);
    uint64_t v11 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void *)(v1 + 168);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  swift_willThrow(v13);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000ED638(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = sub_1000D0510(0LL, (unint64_t *)&unk_10020EBD8, &OBJC_CLASS___AKAppiTunesMetadata_ptr);
    **(void **)(*(void *)(v3 + 64) + 40LL) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  v11,  &protocol witness table for String);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000ED6F0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
  *(double *)(v5 + 144) = a3;
  *(double *)(v5 + 152) = a4;
  *(void *)(v5 + 12_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v5 + 136) = a2;
  return swift_task_switch(sub_1000ED710, 0LL, 0LL);
}

uint64_t sub_1000ED710()
{
  v0[21] = [objc_allocWithZone(AKIconContext) init];
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[22] = sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[17];
  if (v6)
  {
    uint64_t v8 = v0[16];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[10] = sub_100103438(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching app icon from AMS for clientID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[17], 2LL);
  }

  uint64_t v11 = *(void **)(v0[20] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  NSString v12 = String._bridgeToObjectiveC()();
  v0[23] = v12;
  Class isa = CGSize._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000ED990;
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000EDBD8;
  v0[13] = &unk_1001CC6C8;
  [v11 appIconForBundleID:v12 size:isa completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1000ED990()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 200LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EDA3C;
  }
  else {
    uint64_t v2 = sub_1000ED9F0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000ED9F0()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 120);

  uint64_t v3 = *(void **)(v0 + 168);
  if (v2)
  {

    uint64_t v3 = v2;
  }

  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t sub_1000EDA3C(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 192);
  uint64_t v2 = *(void *)(v1 + 200);
  uint64_t v4 = *(void **)(v1 + 184);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  uint64_t v5 = swift_errorRetain(v2);
  BOOL v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v1 + 200);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v8);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    *uint64_t v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetch app icon failed with error: %@", v9, 0xCu);
    uint64_t v12 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v1 + 200);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  os_log_type_t v14 = *(void **)(v1 + 168);

  swift_willThrow(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000EDBD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *os_log_type_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v12 = a2;
    uint64_t v10 = *(void *)(*(void *)(v3 + 64) + 40LL);
    id v11 = a2;
    sub_1000F46BC((uint64_t)&v12, v10);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000EDDBC(uint64_t a1, void *aBlock, void *a3, double a4, double a5)
{
  v5[2] = a3;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = dword_10020EB8C;
  id v14 = a3;
  uint64_t v15 = swift_task_alloc(v13);
  void v5[5] = v15;
  *(void *)uint64_t v15 = v5;
  *(void *)(v15 + _Block_object_dispose(&a9, 8) = sub_1000EDE70;
  *(void *)(v15 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v14;
  *(double *)(v15 + 144) = a4;
  *(double *)(v15 + 152) = a5;
  *(void *)(v15 + 12_Block_object_dispose(&a9, 8) = v10;
  *(void *)(v15 + 136) = v12;
  return swift_task_switch(sub_1000ED710, 0LL, 0LL);
}

uint64_t sub_1000EDE70(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *(void *)(*v2 + 32);
  uint64_t v5 = *(void *)(*v2 + 40);
  os_log_type_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  uint64_t v9 = *(void (***)(void, void, void))(v8 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    ((void (**)(void, void *, void))v9)[2](*(void *)(v8 + 24), a1, 0LL);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000EDF3C(uint64_t a1, uint64_t a2)
{
  uint8_t v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch(sub_1000EDF58, 0LL, 0LL);
}

uint64_t sub_1000EDF58()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[17] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[18] = v3;
  v0[7] = v0 + 20;
  v0[2] = v0;
  v0[3] = sub_1000EE014;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000ECCB4;
  v5[3] = &unk_1001CC6B0;
  v5[4] = v4;
  [v2 cancelAppIconRequestForBundleID:v3 completion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_1000EE014()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 152LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EE0A8;
  }
  else {
    uint64_t v2 = sub_1000EE074;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EE074()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE0A8()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE218(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10020EB94;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000D9F98;
  uint8_t v11[16] = v8;
  v11[17] = v10;
  v11[15] = v6;
  return swift_task_switch(sub_1000EDF58, 0LL, 0LL);
}

uint64_t sub_1000EE2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1000EE2D4, 0LL, 0LL);
}

uint64_t sub_1000EE2D4()
{
  uint64_t v1 = sub_1000F41F8(*(void *)(v0 + 128));
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  if (v1[2])
  {
    uint64_t v2 = swift_task_alloc(dword_10020EBA4);
    *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v2;
    *(void *)uint64_t v2 = v0;
    *(void *)(v2 + _Block_object_dispose(&a9, 8) = sub_1000EE424;
    uint64_t v3 = *(void *)(v0 + 136);
    *(_OWORD *)(v2 + 136) = *(_OWORD *)(v0 + 144);
    *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = v3;
    return swift_task_switch(sub_1000EECAC, 0LL, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_1000B8C38(v5, (uint64_t)qword_100210FF0);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "No primary applications found, unable to update primary apps metadata.",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000EE424(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 168);
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1000EE7B8;
  }
  else {
    uint64_t v5 = sub_1000EE490;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000EE490()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 160);
  if (*(void *)(v1 + 16) <= *(void *)(v2 + 16) >> 3)
  {
    uint64_t v7 = *(unint64_t **)(v0 + 160);
    sub_1000F24D4(v1);
    swift_bridgeObjectRelease(v1);
    uint64_t v3 = v7;
  }

  else
  {
    uint64_t v3 = sub_1000F2668(*(void *)(v0 + 176), v2);
    swift_bridgeObjectRelease(v1);
  }

  *(void *)(v0 + 192) = v3;
  if (v3[2])
  {
    uint64_t v4 = swift_task_alloc(dword_10020EBAC);
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
    *(void *)uint64_t v4 = v0;
    *(void *)(v4 + _Block_object_dispose(&a9, 8) = sub_1000EE57C;
    uint64_t v5 = *(void *)(v0 + 136);
    *(_OWORD *)(v4 + 152) = *(_OWORD *)(v0 + 144);
    *(void *)(v4 + 136) = v3;
    *(void *)(v4 + 144) = v5;
    return swift_task_switch(sub_1000EF224, 0LL, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000EE57C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 200);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(*(void *)(v5 + 192));
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v5 + 20_Block_object_dispose(&a9, 8) = a1;
  return swift_task_switch(sub_1000EE600, 0LL, 0LL);
}

uint64_t sub_1000EE600()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[26];
  uint64_t v3 = *(void **)(v0[19] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  sub_1000D0510(0LL, (unint64_t *)&unk_10020EBD8, &OBJC_CLASS___AKAppiTunesMetadata_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = isa;
  swift_bridgeObjectRelease(v2);
  NSString v5 = String._bridgeToObjectiveC()();
  v0[28] = v5;
  v0[7] = v0 + 30;
  v0[2] = v0;
  v0[3] = sub_1000EE720;
  uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v7 = v0 + 10;
  v7[1] = 0x40000000LL;
  uint64_t v7[2] = sub_1000ECCB4;
  v7[3] = &unk_1001CC698;
  void v7[4] = v6;
  [v3 updatePrimaryAppsWithAMSAppMetadata:isa withAltDSID:v5 withCompletion:v7];
  return swift_continuation_await(v1);
}

uint64_t sub_1000EE720()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 232LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EE7EC;
  }
  else {
    uint64_t v2 = sub_1000EE780;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EE780()
{
  uint64_t v1 = *(void **)(v0 + 216);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE7B8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE7EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 224);
  uint64_t v3 = *(void **)(v1 + 216);
  swift_willThrow(a1);

  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v4 = *(void *)(v1 + 232);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v5, (uint64_t)qword_100210FF0);
  swift_errorRetain(v4);
  uint64_t v6 = swift_errorRetain(v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v1 + 232);
  if (v9)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain(v10);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128);
    *uint64_t v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Storing primary apps metadata failed with error: %@", v11, 0xCu);
    uint64_t v14 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v1 + 232));
    swift_errorRelease(v10);
  }

  swift_willThrow(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000EEAFC(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = sub_1000D0510(0LL, (unint64_t *)&unk_10020EBC8, &OBJC_CLASS___AKDeveloperTeam_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v8);
  v4[4] = v9;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v12 = v11;
  void v4[5] = v11;
  uint64_t v13 = dword_10020EB9C;
  id v14 = a4;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_1000EEBD4;
  v15[18] = v12;
  v15[19] = v14;
  uint8_t v15[16] = v9;
  v15[17] = v10;
  return swift_task_switch(sub_1000EE2D4, 0LL, 0LL);
}

uint64_t sub_1000EEBD4()
{
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v7 = *(void *)(v6 + 24);
  if (v0)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }

  else
  {
    (*(void (**)(void, void))(v7 + 16))(*(void *)(v6 + 24), 0LL);
  }

  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000EEC90(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  return swift_task_switch(sub_1000EECAC, 0LL, 0LL);
}

uint64_t sub_1000EECAC()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[18] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000EED68;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000EF154;
  v5[3] = &unk_1001CC680;
  v5[4] = v4;
  [v2 fetchAllPrimaryApplicationMetadataForAltDSID:v3 withCompletion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_1000EED68()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 160LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EF114;
  }
  else {
    uint64_t v2 = sub_1000EEDC8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EEDC8()
{
  uint64_t v1 = *(void *)(v0 + 120);

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  if (v2)
  {
    unint64_t v35 = v0;
    unint64_t v3 = 0LL;
    while (1)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      }

      else
      {
        if (v3 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          if (v1 < 0) {
            uint64_t v32 = v1;
          }
          else {
            uint64_t v32 = v1 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v1);
          uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v1);
          goto LABEL_3;
        }

        id v4 = *(id *)(v1 + 8 * v3 + 32);
      }

      uint64_t v5 = v4;
      unint64_t v0 = v3 + 1;
      if (__OFADD__(v3, 1LL)) {
        goto LABEL_35;
      }
      id v6 = [v4 bundleId];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      unint64_t v9 = v8;

      swift_bridgeObjectRelease(v9);
      uint64_t v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000LL) == 0) {
        uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
      }
      if (!v10) {
        goto LABEL_5;
      }
      id v11 = [v5 appName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      unint64_t v14 = v13;

      swift_bridgeObjectRelease(v14);
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (v15
        && (id v16 = [v5 appDeveloperName]) != 0
        && (v16, (id v17 = [v5 adamID]) != 0))
      {

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v5);
        specialized ContiguousArray._endMutation()(v19);
      }

      else
      {
LABEL_5:
      }

      ++v3;
      if (v0 == v2)
      {
        unint64_t v0 = v35;
        break;
      }
    }
  }

  swift_bridgeObjectRelease(v1);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000LL) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000LL) == 0)
  {
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    if (v20) {
      goto LABEL_25;
    }
LABEL_41:
    swift_release(_swiftEmptyArrayStorage);
    uint64_t v34 = sub_1000F4164((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v34);
  }

  uint64_t v33 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_release(_swiftEmptyArrayStorage);
  if (!v20) {
    goto LABEL_41;
  }
LABEL_25:
  uint64_t result = sub_1000F3390(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    uint64_t v22 = 0LL;
    do
    {
      else {
        id v23 = (id)_swiftEmptyArrayStorage[v22 + 4];
      }
      id v24 = v23;
      id v25 = [v23 bundleId];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v28 = v27;

      unint64_t v30 = _swiftEmptyArrayStorage[2];
      unint64_t v29 = _swiftEmptyArrayStorage[3];
      if (v30 >= v29 >> 1) {
        sub_1000F3390(v29 > 1, v30 + 1, 1);
      }
      ++v22;
      _swiftEmptyArrayStorage[2] = v30 + 1;
      uint64_t v31 = &_swiftEmptyArrayStorage[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
    }

    while (v20 != v22);
    goto LABEL_41;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EF114()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EF154(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000EF168(a1, a2, a3, (unint64_t *)&unk_10020EBD8, &OBJC_CLASS___AKAppiTunesMetadata_ptr);
}

uint64_t sub_1000EF168(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v7 = sub_1000B86DC(&qword_10020DC20);
    uint64_t v8 = swift_allocError(v7, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v9 = a3;
    id v10 = a3;
    return swift_continuation_throwingResumeWithError(v5, v8);
  }

  else
  {
    uint64_t v13 = sub_1000D0510(0LL, a4, a5);
    **(void **)(*(void *)(v5 + 64) + 40LL) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v13);
    return swift_continuation_throwingResume(v5);
  }

uint64_t sub_1000EF208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  return swift_task_switch(sub_1000EF224, 0LL, 0LL);
}

uint64_t sub_1000EF224()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_1000F3790(v4);
  swift_bridgeObjectRelease(v3);
  id v6 = *(void **)(v2 + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  swift_release(v5);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000EF314;
  uint64_t v8 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  unint64_t v9 = v0 + 10;
  v9[1] = 0x40000000LL;
  v9[2] = sub_1000ED638;
  v9[3] = &unk_1001CC668;
  void v9[4] = v8;
  [v6 appMetadataForBundleIDs:isa completion:v9];
  return swift_continuation_await(v1);
}

uint64_t sub_1000EF314()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 176LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EF594;
  }
  else {
    uint64_t v2 = sub_1000EF374;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EF374()
{
  uint64_t v1 = *(void *)(v0 + 120);

  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  uint64_t v4 = sub_1000ECB20(v3);
  unint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v0 + 136);
  if (*(void *)(v4 + 16) <= v5 >> 3)
  {
    id v11 = *(unint64_t **)(v0 + 136);
    swift_bridgeObjectRetain(v6);
    sub_1000F24D4(v4);
    swift_bridgeObjectRelease(v4);
    uint64_t v7 = v11;
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 136));
    uint64_t v7 = sub_1000F2668(v4, v6);
    swift_bridgeObjectRelease(v4);
  }

  *(void *)(v0 + 192) = v7;
  if (v7[2])
  {
    uint64_t v8 = swift_task_alloc(dword_10020EBB4);
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v8;
    *(void *)uint64_t v8 = v0;
    *(void *)(v8 + _Block_object_dispose(&a9, 8) = sub_1000EF498;
    uint64_t v9 = *(void *)(v0 + 144);
    *(_OWORD *)(v8 + 144) = *(_OWORD *)(v0 + 152);
    *(void *)(v8 + 12_Block_object_dispose(&a9, 8) = v7;
    *(void *)(v8 + 136) = v9;
    return swift_task_switch(sub_1000EF884, 0LL, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }

uint64_t sub_1000EF498(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 200);
  uint64_t v4 = *v2;
  *(void *)(v4 + 20_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v4 + 2swift_weakDestroy(v0 + 16) = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = *(void *)(v4 + 192);
  if (v1)
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease(v5);
    return (*(uint64_t (**)(void))(v4 + 8))(*(void *)(v4 + 184));
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 192));
    return swift_task_switch(sub_1000EF53C, 0LL, 0LL);
  }

uint64_t sub_1000EF53C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = sub_1000ECE7C(v1, *(void *)(v0 + 184));
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    uint64_t v2 = *(void *)(v0 + 184);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000EF594(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 168);
  swift_willThrow(a1);

  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v1 + 176);
  if (v8)
  {
    id v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v10 = 138412290;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136);
    uint64_t *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching app metadata from AMS failed with error: %@", v10, 0xCu);
    uint64_t v13 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v9);
  }

  else
  {
    swift_errorRelease(*(void *)(v1 + 176));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  *(void *)(v1 + 184) = &_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v1 + 136);
  uint64_t v15 = swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
  uint64_t v16 = sub_1000ECB20(v15);
  unint64_t v17 = *(void *)(v14 + 16);
  uint64_t v18 = *(void *)(v1 + 136);
  if (*(void *)(v16 + 16) <= v17 >> 3)
  {
    id v23 = *(unint64_t **)(v1 + 136);
    swift_bridgeObjectRetain(v18);
    sub_1000F24D4(v16);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = v23;
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v1 + 136));
    uint64_t v19 = sub_1000F2668(v16, v18);
    swift_bridgeObjectRelease(v16);
  }

  *(void *)(v1 + 192) = v19;
  if (v19[2])
  {
    uint64_t v20 = swift_task_alloc(dword_10020EBB4);
    *(void *)(v1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v20;
    *(void *)uint64_t v20 = v1;
    *(void *)(v20 + _Block_object_dispose(&a9, 8) = sub_1000EF498;
    uint64_t v21 = *(void *)(v1 + 144);
    *(_OWORD *)(v20 + 144) = *(_OWORD *)(v1 + 152);
    *(void *)(v20 + 12_Block_object_dispose(&a9, 8) = v19;
    *(void *)(v20 + 136) = v21;
    return swift_task_switch(sub_1000EF884, 0LL, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease(v19);
    return (*(uint64_t (**)(void *))(v1 + 8))(&_swiftEmptyDictionarySingleton);
  }

uint64_t sub_1000EF868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1000EF884, 0LL, 0LL);
}

uint64_t sub_1000EF884()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v2, (uint64_t)qword_100210FF0);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[16];
  if (v6)
  {
    BOOL v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)BOOL v8 = 136315138;
    uint64_t v17 = v9;
    uint64_t v10 = swift_bridgeObjectRetain(v7);
    uint64_t v11 = Set.description.getter(v10, &type metadata for String, &protocol witness table for String);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(v7);
    v0[10] = sub_100103438(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using WWDR client names for bundleIDs : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[16], 2LL);
  }

  uint64_t v14 = *(void **)(v0[19] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  NSString v15 = String._bridgeToObjectiveC()();
  v0[20] = v15;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000EFAE8;
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000ECE68;
  v0[13] = &unk_1001CC650;
  [v14 fetchAllDeveloperTeamsAndApplicationsForAltDSID:v15 withCompletion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1000EFAE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 168LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EFBC0;
  }
  else {
    uint64_t v2 = sub_1000EFB48;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000EFB48()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);

  swift_bridgeObjectRetain(v2);
  uint64_t v3 = sub_1000F458C(&_swiftEmptyDictionarySingleton, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t sub_1000EFBC0()
{
  uint64_t v1 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000EFC00(void *a1, id *a2, uint64_t a3)
{
  id v4 = [*a2 apps];
  uint64_t v5 = sub_1000D0510(0LL, (unint64_t *)&qword_10020DB68, &OBJC_CLASS___AKConsentedApplication_ptr);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  v5,  &protocol witness table for String);

  int64_t v7 = 0LL;
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v41 = v6 + 64;
  uint64_t v44 = v6;
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v42 = (unint64_t)(v9 + 63) >> 6;
  if ((v10 & v8) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v14 = v7 + 1;
  if (!__OFADD__(v7, 1LL))
  {
    if (v14 < v42)
    {
      unint64_t v15 = *(void *)(v41 + 8 * v14);
      ++v7;
      if (v15) {
        goto LABEL_22;
      }
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v41 + 8 * v7);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v7 = v14 + 2;
      if (v14 + 2 >= v42) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v41 + 8 * v7);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v7 = v14 + 3;
      if (v14 + 3 >= v42) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v41 + 8 * v7);
      if (v15)
      {
LABEL_22:
        unint64_t v11 = (v15 - 1) & v15;
        for (unint64_t i = __clz(__rbit64(v15)) + (v7 << 6); ; unint64_t i = v12 | (v7 << 6))
        {
          id v17 = *(id *)(*(void *)(v44 + 56) + 8 * i);
          id v18 = [v17 clientID];
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          uint64_t v21 = v20;

          LOBYTE(v1_Block_object_dispose(&a9, 8) = sub_1000ECD34(v19, v21, a3);
          swift_bridgeObjectRelease(v21);
          if ((v18 & 1) == 0)
          {

            if (!v11) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }

          id v22 = [objc_allocWithZone(AKAppiTunesMetadata) init];
          NSString v23 = [v17 clientID];
          if (!v23)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            uint64_t v25 = v24;
            NSString v23 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v25);
          }

          [v22 setBundleId:v23];

          id v26 = [v17 clientName];
          if (v26)
          {
            NSString v27 = v26;
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
            uint64_t v30 = v29;
            if (v28 == 1280070990 && v29 == 0xE400000000000000LL)
            {

              swift_bridgeObjectRelease(0xE400000000000000LL);
            }

            else
            {
              char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 1280070990LL, 0xE400000000000000LL, 0LL);
              swift_bridgeObjectRelease(v30);
              if ((v31 & 1) == 0) {
                goto LABEL_34;
              }
            }
          }

          NSString v27 = [v17 clientID];
          if (!v27)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
            uint64_t v33 = v32;
            NSString v27 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v33);
          }

id sub_1000F0044()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountsMetadataController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountsMetadataController()
{
  return objc_opt_self(&OBJC_CLASS___AKAccountsMetadataController);
}

uint64_t sub_1000F00DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000B86DC((uint64_t *)&unk_10020F110);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    id v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

Swift::Int sub_1000F03D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000B86DC((uint64_t *)&unk_10020EC50);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

Swift::Int sub_1000F06FC(uint64_t a1, uint64_t a2)
{
  return sub_1000F0A1C(a1, a2, &qword_10020EC60);
}

Swift::Int sub_1000F0708(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000B86DC(&qword_10020EC48);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_1000F0A1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_1000B86DC(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  char v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          id v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

_OWORD *sub_1000F0D24(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000F9BB8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        unint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_1000BC7D4(v19);
        return sub_1000B8EB0(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000F1354();
      goto LABEL_7;
    }

    sub_1000F00DC(v15, a4 & 1);
    unint64_t v21 = sub_1000F9BB8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000F12A4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000F0E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000F9BB8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000F1538();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease(v21[1]);
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }

void sub_1000F0FC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000F0FD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000F9BB8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000F16FC();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void sub_1000F1130(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000F9BB8(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000F18B0(a5);
LABEL_7:
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

_OWORD *sub_1000F12A4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000B8EB0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_1000F130C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_1000F1354()
{
  uint64_t v1 = v0;
  sub_1000B86DC((uint64_t *)&unk_10020F110);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_1000F1538()
{
  uint64_t v1 = v0;
  sub_1000B86DC((uint64_t *)&unk_10020EC50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

id sub_1000F16F0()
{
  return sub_1000F18B0(&qword_10020EC60);
}

void *sub_1000F16FC()
{
  uint64_t v1 = v0;
  sub_1000B86DC(&qword_10020EC48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_1000F18B0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000B86DC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

uint64_t sub_1000F1A58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000F1EE0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int sub_1000F1C04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000B86DC((uint64_t *)&unk_10020DCD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_1000F1EE0(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000F1C04(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_1000F2078();
      goto LABEL_22;
    }

    sub_1000F2228(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_1000F2078()
{
  uint64_t v1 = v0;
  sub_1000B86DC((uint64_t *)&unk_10020DCD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1000F2228(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000B86DC((uint64_t *)&unk_10020DCD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000F24D4(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v16 >= v7) {
      return swift_release(v2);
    }
    unint64_t v17 = *(void *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v17 = *(void *)(v3 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v17 = *(void *)(v3 + 8 * v8);
        if (!v17)
        {
          int64_t v8 = v16 + 3;
          if (v16 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v17 = *(void *)(v3 + 8 * v8);
          if (!v17) {
            break;
          }
        }
      }
    }

unint64_t *sub_1000F2668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_49;
        }

        if (v12 >= v40) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v40) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v40) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v40) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v41 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_1000CC5C0(a1);
                  return (unint64_t *)v2;
                }

                unint64_t v13 = *(void *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v40) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v41 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

uint64_t sub_1000F2AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F2078();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1000F31CC(v8);
  uint64_t v16 = *v2;
  void *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t *sub_1000F2C5C( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  int64_t v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }

        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_45;
          }

          int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }

            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }

              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }

Swift::Int sub_1000F2F38(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000B86DC((uint64_t *)&unk_10020DCD0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

unint64_t sub_1000F31CC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            _OWORD *v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_1000F3390(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000F33C8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000F33AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000F3530(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000F33C8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000B86DC(&qword_10020DCC0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000F3530(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000B86DC(&qword_10020E1A0);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

void *sub_1000F369C(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_1000B86DC((uint64_t *)&unk_10020F150);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = sub_1000F3B9C((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void *sub_1000F3790(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1000B86DC(&qword_10020DCC0);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  void v4[2] = v1;
  void v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_1000F3DA4((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000CC5C0(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1000F3874(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  uint64_t v15 = (void *)*a5;
  unint64_t v17 = sub_1000F9BB8(v9, v10);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  char v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      char v24 = (void *)*a5;
      if ((v16 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      sub_1000F18B0(&qword_10020EBC0);
      char v24 = (void *)*a5;
      if ((v21 & 1) != 0) {
        goto LABEL_9;
      }
    }

uint64_t sub_1000F3B9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000F4924();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1000B86DC(&qword_10020EC68);
          uint64_t v13 = sub_1000D1D34(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000F3DA4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void sub_1000F3FA0()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    int64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }

  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              unint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v0[3] = v4;
    v0[4] = 0LL;
  }

id sub_1000F412C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain(v2);
  return v4;
}

uint64_t sub_1000F4164(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    id v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000F1A58(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

void *sub_1000F41F8(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v44 = &_swiftEmptySetSingleton;
  if (a1 >> 62) {
    goto LABEL_49;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
  {
LABEL_53:
    swift_bridgeObjectRelease(v1);
    return &_swiftEmptySetSingleton;
  }

  while (1)
  {
    unint64_t v3 = 0LL;
    uint64_t v39 = v2;
    unint64_t v40 = v1 & 0xC000000000000001LL;
    uint64_t v37 = v1 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v38 = v1;
    uint64_t v36 = v1 + 32;
    uint64_t v1 = (uint64_t)&selRef_loadDelegate;
LABEL_5:
    if (v40)
    {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v38);
      BOOL v5 = __OFADD__(v3, 1LL);
      unint64_t v6 = v3 + 1;
      if (!v5) {
        break;
      }
      goto LABEL_47;
    }

    if (v3 >= *(void *)(v37 + 16)) {
      goto LABEL_48;
    }
    id v4 = *(id *)(v36 + 8 * v3);
    BOOL v5 = __OFADD__(v3, 1LL);
    unint64_t v6 = v3 + 1;
    if (!v5) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    if (v1 < 0) {
      uint64_t v35 = v1;
    }
    else {
      uint64_t v35 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v35);
    if (!v2) {
      goto LABEL_53;
    }
  }

  uint64_t v41 = v4;
  unint64_t v42 = v6;
  id v7 = objc_msgSend(v4, "apps", v36);
  uint64_t v8 = sub_1000D0510(0LL, (unint64_t *)&qword_10020DB68, &OBJC_CLASS___AKConsentedApplication_ptr);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String,  v8,  &protocol witness table for String);

  int64_t v10 = 0LL;
  uint64_t v11 = v9 + 64;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & *(void *)(v9 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v10 << 6);
      goto LABEL_35;
    }

    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    if (v22 >= v15) {
      goto LABEL_4;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v15) {
        goto LABEL_4;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v10);
      if (!v23)
      {
        int64_t v10 = v22 + 2;
        if (v22 + 2 >= v15) {
          goto LABEL_4;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v10);
        if (!v23)
        {
          int64_t v10 = v22 + 3;
          if (v22 + 3 >= v15) {
            goto LABEL_4;
          }
          unint64_t v23 = *(void *)(v11 + 8 * v10);
          if (!v23) {
            break;
          }
        }
      }
    }

void *sub_1000F458C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = a1;
  id v16 = a1;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v10 = (a2 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      id v7 = v10;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v15 = v10;
      sub_1000EFC00(&v16, &v15, a3);
      if (v4)
      {
        uint64_t v12 = v16;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v12);
        return v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease(a2);
        return v16;
      }
    }

    __break(1u);
LABEL_13:
    if (a2 < 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
  }

  swift_bridgeObjectRelease(a2);
  return v7;
}

uint64_t sub_1000F46BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B86DC((uint64_t *)&unk_10020EBE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F4704()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000F4740()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  BOOL v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  unint64_t v6 = (void *)swift_task_alloc(dword_10020EBFC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000B87BC;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_10020EBF8 + dword_10020EBF8))( v2,  v3,  v5,  v4);
}

uint64_t sub_1000F47C0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000F47F4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  BOOL v5 = (void *)swift_task_alloc(dword_10020EC0C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020EC08 + dword_10020EC08))(v2, v3, v4);
}

uint64_t sub_1000F4868()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000F489C()
{
  uint64_t v2 = *((void *)v0 + 2);
  double v3 = v0[3];
  double v4 = v0[4];
  unint64_t v6 = (void *)*((void *)v0 + 5);
  BOOL v5 = (void *)*((void *)v0 + 6);
  id v7 = (void *)swift_task_alloc(dword_10020EC2C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v1;
  v7[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *, double, double))((char *)&dword_10020EC28 + dword_10020EC28))( v2,  v6,  v5,  v3,  v4);
}

unint64_t sub_1000F4924()
{
  unint64_t result = qword_10020EC70;
  if (!qword_10020EC70)
  {
    uint64_t v1 = sub_1000C4E90(&qword_10020EC68);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10020EC70);
  }

  return result;
}

unint64_t sub_1000F4970(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    double v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000B86DC((uint64_t *)&unk_10020F110);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  double v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000FACC8(v7, (uint64_t)&v16, &qword_10020ED28);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_1000F9BB8(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000B8EB0(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000F4AA4(uint64_t a1)
{
  return sub_1000F4C08(a1, &qword_10020EDF0);
}

unint64_t sub_1000F4AB0(uint64_t a1)
{
  return sub_1000F4D28(a1, &qword_10020EDF8);
}

unint64_t sub_1000F4ABC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    double v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000B86DC(&qword_10020DC28);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  double v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000FACC8(v7, (uint64_t)v16, &qword_10020EDE8);
    unint64_t result = sub_1000F9B88((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_1000B8EB0(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000F4BFC(uint64_t a1)
{
  return sub_1000F4C08(a1, &qword_10020EC48);
}

unint64_t sub_1000F4C08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000B86DC(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_1000F9BB8(v8, v9);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v5[6] + 16 * result);
    uint64_t *v13 = v8;
    v13[1] = v9;
    *(void *)(v5[7] + 8 * result) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000F4D1C(uint64_t a1)
{
  return sub_1000F4D28(a1, &qword_10020EC60);
}

unint64_t sub_1000F4D28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000B86DC(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    id v11 = v10;
    unint64_t result = sub_1000F9BB8(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * result);
    uint64_t *v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000F4E3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v8 = *(void (**)(void *, void *, unint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (a3)
  {
    swift_retain(v7);
    id v9 = a2;
    id v10 = v5;
    uint64_t v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v12 = v11;
  }

  else
  {
    swift_retain(v7);
    id v13 = a2;
    unint64_t v12 = 0xF000000000000000LL;
  }

  id v14 = a4;
  v8(a2, v5, v12, a4);

  sub_1000B98AC((uint64_t)v5, v12);
  return swift_release(v7);
}

uint64_t sub_1000F4EEC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

unint64_t sub_1000F4F18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000B86DC((uint64_t *)&unk_10020F110);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v26 = a1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v11 = (v6 - 1) & v6;
      unint64_t v12 = __clz(__rbit64(v6)) | (v8 << 6);
      int64_t v13 = v8;
    }

    else
    {
      int64_t v14 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_37;
      }
      if (v14 >= v25)
      {
LABEL_33:
        sub_1000CC5C0(a1);
        return (unint64_t)v3;
      }

      unint64_t v15 = *(void *)(v26 + 8 * v14);
      int64_t v13 = v8 + 1;
      if (!v15)
      {
        int64_t v13 = v8 + 2;
        if (v8 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v13);
        if (!v15)
        {
          int64_t v13 = v8 + 3;
          if (v8 + 3 >= v25) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v26 + 8 * v13);
          if (!v15)
          {
            int64_t v13 = v8 + 4;
            if (v8 + 4 >= v25) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v26 + 8 * v13);
            if (!v15)
            {
              int64_t v16 = v8 + 5;
              if (v8 + 5 >= v25) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  int64_t v13 = v16 + 1;
                  if (__OFADD__(v16, 1LL)) {
                    goto LABEL_38;
                  }
                  if (v13 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = *(void *)(v26 + 8 * v13);
                  ++v16;
                  if (v15) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v8 + 5;
            }
          }
        }
      }

uint64_t sub_1000F52D8()
{
  uint64_t v0 = NSHomeDirectory();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  swift_bridgeObjectRetain(v3);
  v4._object = (void *)0x800000010016F1E0LL;
  v4._countAndFlagsBits = 0xD000000000000038LL;
  String.append(_:)(v4);
  uint64_t result = swift_bridgeObjectRelease(v3);
  qword_10020EC78 = v1;
  unk_10020EC80 = v3;
  return result;
}

id sub_1000F5364()
{
  if (qword_10020CFA0 != -1) {
    swift_once(&qword_10020CFA0, sub_1000F52D8);
  }
  uint64_t v0 = unk_10020EC80;
  id v1 = objc_allocWithZone((Class)type metadata accessor for DeviceListStoreMigrator());
  swift_bridgeObjectRetain(v0);
  id v2 = [v1 init];
  id v3 = objc_allocWithZone((Class)&OBJC_CLASS___AKSQLiteExecutor);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  id v5 = [v3 initWithDatabasePath:v4 migrationController:v2];

  unint64_t v6 = (objc_class *)type metadata accessor for DeviceListStoreManager();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR___AKDeviceListStoreManager_executor] = v5;
  uint64_t v8 = type metadata accessor for DeviceListProvider();
  uint64_t v9 = swift_allocObject(v8, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)&v7[OBJC_IVAR___AKDeviceListStoreManager_deviceListProvider] = v9;
  uint64_t v10 = type metadata accessor for DeletedDeviceListProvider();
  uint64_t v11 = swift_allocObject(v10, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)&v7[OBJC_IVAR___AKDeviceListStoreManager_deletedDeviceListProvider] = v11;
  v14.receiver = v7;
  v14.super_class = v6;
  id v12 = v5;
  id result = objc_msgSendSuper2(&v14, "init");
  qword_100211020 = (uint64_t)result;
  return result;
}

uint64_t sub_1000F5508()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000F556C, 0LL, 0LL);
}

uint64_t sub_1000F556C()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DeviceListStoreManager - Begin clearing database", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[3];

  uint64_t v7 = *(void **)(v6 + OBJC_IVAR___AKDeviceListStoreManager_executor);
  v0[2] = 0LL;
  id v8 = [v7 wipeDatabase:v0 + 2];
  uint64_t v9 = (void *)v0[2];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      int64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int64_t v13 = 138412290;
      v0[2] = v10;
      id v14 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
      void *v22 = v9;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Clearing database failed with error %@", v13, 0xCu);
      uint64_t v15 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v22, 1LL, v15);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
    }

    swift_willThrow(v20);
    __int128 v19 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    int64_t v16 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "DeviceListStoreManager - Cleared database successfully",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    __int128 v19 = (uint64_t (*)(void))v0[1];
  }

  return v19();
}

uint64_t sub_1000F59A0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020ECCC;
  id v5 = a2;
  uint64_t v6 = (void *)swift_task_alloc(v4);
  v2[4] = v6;
  void *v6 = v2;
  v6[1] = sub_1000F5A18;
  void v6[3] = v5;
  return swift_task_switch(sub_1000F556C, 0LL, 0LL);
}

uint64_t sub_1000F5A18()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  id v3 = *(void **)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc(v2);

  uint64_t v5 = *(void *)(v4 + 24);
  if (v0)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v4 + 24), 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000F5AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[13] = v7;
  v5[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000F5B20, 0LL, 0LL);
}

void sub_1000F5B20()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v2 = (id *)(v0 + 56);
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = sub_1000B8C38(v5, (uint64_t)qword_100210FD8);
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = &selRef__verificationQueue;
  if (os_log_type_enabled(v7, v8))
  {
    id v10 = *v2;
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v11 = 136315138;
    id v12 = [v10 altDSID];
    if (!v12)
    {

      __break(1u);
      return;
    }

    int64_t v13 = v12;
    uint64_t v34 = v0 + 48;
    uint64_t v35 = *(void *)(v0 + 104);
    uint64_t v36 = *(void *)(v0 + 96);
    uint64_t v37 = *(void *)(v0 + 112);
    id v14 = *(void **)(v0 + 56);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v17 = v16;

    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = sub_100103438(v15, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);

    swift_bridgeObjectRelease(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "DeviceListStoreManager - Fetching device list for altDSID %s",  v11,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    uint64_t v9 = &selRef__verificationQueue;
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v20 = *(void *)(v0 + 96);
    char v21 = *(void **)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  uint64_t v22 = *(void **)(v0 + 64);
  id v23 = objc_msgSend(*(id *)(v0 + 56), v9[184], v34);
  LODWORD(v22) = [v22 isHSA2EnabledForAltDSID:v23];

  if (!(_DWORD)v22
    || (id v24 = [*v2 includeFamilyDevices], (v24 & 1) != 0)
    || (id v24 = [*v2 isForceFetch], (v24 & 1) != 0))
  {
    int64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Not eligible for device cache. Fetching from server instead.",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    uint64_t v28 = swift_task_alloc(dword_10020ED34);
    *(void *)(v0 + 144) = v28;
    *(void *)uint64_t v28 = v0;
    *(void *)(v28 + _Block_object_dispose(&a9, 8) = sub_1000F5F3C;
    __int128 v29 = *(_OWORD *)(v0 + 56);
    __int128 v30 = *(_OWORD *)(v0 + 72);
    *(void *)(v28 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = *(void *)(v0 + 88);
    *(_OWORD *)(v28 + 4_Block_object_dispose(&a9, 8) = v29;
    *(_OWORD *)(v28 + 64) = v30;
    __int128 v31 = sub_1000F625C;
  }

  else
  {
    uint64_t v32 = swift_task_alloc(dword_10020ECDC);
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v32;
    *(void *)uint64_t v32 = v0;
    *(void *)(v32 + _Block_object_dispose(&a9, 8) = sub_1000F5EB4;
    uint64_t v33 = *(void *)(v0 + 56);
    *(_OWORD *)(v32 + 32) = *(_OWORD *)(v0 + 80);
    *(void *)(v32 + 24) = v33;
    __int128 v31 = sub_1000F747C;
  }

  swift_task_switch(v31, 0LL, 0LL);
}

uint64_t sub_1000F5EB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 128);
  uint64_t v5 = *v2;
  *(void *)(v5 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_1000F5F9C, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 112));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1000F5F3C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 144);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = swift_task_dealloc(*(void *)(v5 + 112));
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000F5F9C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeviceListStoreManager - Failed to fetch devices from cache with error %@. Trying server now.",  v6,  0xCu);
    uint64_t v9 = sub_1000B86DC(&qword_10020D770);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 136);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = swift_task_alloc(dword_10020ED34);
  *(void *)(v0 + 152) = v11;
  *(void *)uint64_t v11 = v0;
  *(void *)(v11 + _Block_object_dispose(&a9, 8) = sub_1000F6150;
  __int128 v12 = *(_OWORD *)(v0 + 56);
  __int128 v13 = *(_OWORD *)(v0 + 72);
  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = *(void *)(v0 + 88);
  *(_OWORD *)(v11 + 4_Block_object_dispose(&a9, 8) = v12;
  *(_OWORD *)(v11 + 64) = v13;
  return swift_task_switch(sub_1000F625C, 0LL, 0LL);
}

uint64_t sub_1000F6150(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  void v3[4] = v1;
  uint64_t v4 = v3[19];
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1000F6200;
  }
  else {
    uint64_t v5 = sub_1000F61BC;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000F61BC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc(*(void *)(v0 + 112));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000F6200()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F623C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  return swift_task_switch(sub_1000F625C, 0LL, 0LL);
}

uint64_t sub_1000F625C()
{
  if ([*(id *)(v0 + 48) type] == (id)2)
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Fetch device list context is cache only. Skipping fetch from server.",  v5,  2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    type metadata accessor for DeviceListError(0LL);
    uint64_t v7 = v6;
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -14008LL;
    unint64_t v8 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v9 = sub_1000BF650();
    uint64_t v10 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 32), v0 + 40, v8, v7, v9);
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_1000B8C38(v12, (uint64_t)qword_100210FD8);
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v13;
    id v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "DeviceListStoreManager - Begin fetching device list from server",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 48);

    uint64_t v19 = swift_task_alloc(32LL);
    *(void *)(v0 + 96) = v19;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v17;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 104) = v20;
    uint64_t v21 = sub_1000D0510(0LL, &qword_10020ED10, &OBJC_CLASS___AKDeviceListResponse_ptr);
    void *v20 = v0;
    v20[1] = sub_1000F6504;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD00000000000002BLL,  0x800000010016F190LL,  sub_1000FA790,  v19,  v21);
  }

uint64_t sub_1000F6504()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1000F6808;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 96));
    os_log_type_t v4 = sub_1000F6570;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000F6570(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeviceListStoreManager - Finished fetching device list from server",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void **)(v1 + 48);
  uint64_t v6 = *(void **)(v1 + 56);

  id v8 = [v7 altDSID];
  LODWORD(v6) = [v6 isHSA2EnabledForAltDSID:v8];

  if ((_DWORD)v6 && ([*(id *)(v1 + 48) includeFamilyDevices] & 1) == 0)
  {
    uint64_t v18 = (void *)swift_task_alloc(dword_10020ECEC);
    *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = v18;
    void *v18 = v1;
    v18[1] = sub_1000F683C;
    uint64_t v19 = *(void *)(v1 + 80);
    uint64_t v20 = *(void *)(v1 + 48);
    v18[10] = v2;
    v18[11] = v19;
    v18[9] = v20;
    return swift_task_switch(sub_1000F8B84, 0LL, 0LL);
  }

  else
  {
    unint64_t v9 = (os_log_s *)Logger.logObject.getter(*(id *)(v1 + 48));
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void **)(v1 + 48);
    if (v11)
    {
      uint64_t v21 = v2;
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v14 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v1 + 24) = v12;
      id v15 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32);
      void *v14 = v12;

      uint64_t v2 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "DeviceListStoreManager - Cache is not supported for context - %@",  v13,  0xCu);
      uint64_t v16 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v14, 1LL, v16);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
    }

    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
  }

uint64_t sub_1000F6808()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F683C()
{
  uint64_t v2 = *(void *)(*v1 + 128);
  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    os_log_type_t v4 = sub_1000F6980;
  }

  else
  {
    uint64_t v5 = swift_task_alloc(dword_10020ECDC);
    *(void *)(v3 + 144) = v5;
    *(void *)uint64_t v5 = v3;
    *(void *)(v5 + _Block_object_dispose(&a9, 8) = sub_1000F68D4;
    uint64_t v6 = *(void *)(v3 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v3 + 72);
    *(void *)(v5 + 24) = v6;
    os_log_type_t v4 = sub_1000F747C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000F68D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000F69B4;
  }

  else
  {
    *(void *)(v4 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
    uint64_t v6 = sub_1000F6948;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000F6948()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 160));
}

uint64_t sub_1000F6980()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F69B4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F6B3C(void *a1, void *a2, void *a3, void *a4, void *aBlock, void *a6)
{
  v6[5] = a4;
  v6[6] = a6;
  void v6[3] = a2;
  void v6[4] = a3;
  _DWORD v6[2] = a1;
  v6[7] = _Block_copy(aBlock);
  uint64_t v12 = dword_10020ECD4;
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  a6;
  uint64_t v17 = (void *)swift_task_alloc(v12);
  v6[8] = v17;
  void *v17 = v6;
  v17[1] = sub_1000F6BF8;
  return sub_1000F5AB8((uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16);
}

uint64_t sub_1000F6BF8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 64);
  uint64_t v7 = *(void **)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 48);
  unint64_t v9 = *(void **)(*v2 + 24);
  id v8 = *(void **)(*v2 + 32);
  os_log_type_t v10 = *(void **)(*v2 + 16);
  uint64_t v11 = *v2;
  swift_task_dealloc(v5);

  uint64_t v12 = *(void (***)(void, void, void))(v11 + 56);
  if (v3)
  {
    id v13 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v12)[2](v12, 0LL, v13);

    _Block_release(v12);
  }

  else
  {
    ((void (**)(void, void *, void))v12)[2](v12, a1, 0LL);
    _Block_release(v12);
  }

  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_1000F6E0C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return swift_task_switch(sub_1000F6E60, 0LL, 0LL);
}

uint64_t sub_1000F6E60()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10020D7A4);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  void *v1 = v0;
  v1[1] = sub_1000F6EBC;
  return sub_1000BE528(*(void *)(v0 + 16));
}

uint64_t sub_1000F6EBC(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  *(void *)(*v2 + 4_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    id v6 = sub_1000F6FD8;
  }

  else
  {
    *(_BYTE *)(v4 + 72) = a1 & 1;
    id v6 = sub_1000F6F34;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000F6F34()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_10020D7A4);
    *(void *)(v0 + 56) = v2;
    void *v2 = v0;
    v2[1] = sub_1000F7050;
    return sub_1000BE528(*(void *)(v0 + 16));
  }

  else
  {

    (*(void (**)(void))(*(void *)(v0 + 32) + 16LL))();
    _Block_release(*(const void **)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000F6FD8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);

  uint64_t v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0LL, v4);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F7050()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000F70F4, 0LL, 0LL);
  }
  uint64_t v5 = *(void **)(v3 + 24);

  (*(void (**)(void))(*(void *)(v3 + 32) + 16LL))();
  _Block_release(*(const void **)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F70F4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);

  uint64_t v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0LL, v4);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F729C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return swift_task_switch(sub_1000F72F0, 0LL, 0LL);
}

uint64_t sub_1000F72F0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10020DD8C);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  void *v1 = v0;
  v1[1] = sub_1000F734C;
  return sub_1000CF48C(*(void *)(v0 + 16));
}

uint64_t sub_1000F734C()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  *(void *)(v3 + 4_Block_object_dispose(&a9, 8) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000F73EC, 0LL, 0LL);
  }
  id v6 = *(void **)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);

  (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0LL);
  _Block_release(*(const void **)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F73EC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);

  uint64_t v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F7460(uint64_t a1, uint64_t a2)
{
  void v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_1000F747C, 0LL, 0LL);
}

uint64_t sub_1000F747C()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "DeviceListStoreManager - Begin fetching device list from cache",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[1].i64[1];
  int8x16_t v11 = v0[2];

  id v7 = (int8x16_t *)swift_task_alloc(48LL);
  v0[3].i64[0] = (uint64_t)v7;
  v7[1] = vextq_s8(v11, v11, 8uLL);
  v7[2].i64[0] = v6;
  id v8 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[3].i64[1] = (uint64_t)v8;
  uint64_t v9 = sub_1000D0510(0LL, &qword_10020ED10, &OBJC_CLASS___AKDeviceListResponse_ptr);
  *id v8 = v0;
  v8[1] = (int8x16_t *)sub_1000F75F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( &v0[1],  0LL,  0LL,  0xD00000000000002ELL,  0x800000010016F160LL,  sub_1000FA650,  v7,  v9);
}

uint64_t sub_1000F75F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1000F7670;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    os_log_type_t v4 = sub_1000F7664;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000F7664()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1000F7670()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F76A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_1000B86DC(&qword_10020ED18);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  int8x16_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = (id)objc_opt_self(&OBJC_CLASS___AKSQLiteExecutor);
  uint64_t v12 = swift_allocObject(&unk_1001CC870, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  unint64_t v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1001CC898, v16 + 8, v13 | 7);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + v14, v11, v8);
  *(void *)(v17 + v15) = a3;
  *(void *)(v17 + vswift_weakDestroy(v0 + 16) = a4;
  aBlock[4] = sub_1000FA724;
  uint64_t v25 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F4EEC;
  aBlock[3] = &unk_1001CC8B0;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v25;
  id v20 = a3;
  id v21 = a4;
  swift_release(v19);
  [v23 performBlockAndWait:v18];
  _Block_release(v18);
}

void sub_1000F7844(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v122 - v13;
  id v15 = (id)(a1 + 16);
  swift_beginAccess(v15, v133, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    uint64_t v17 = (char *)Strong;
    Swift::Int v125 = v12;
    id v18 = [a4 altDSID];
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = [a3 authKitAccountWithAltDSID:v18];

      uint64_t v127 = (uint64_t)v20;
      id v128 = v17;
      if (v20)
      {
        uint64_t v124 = v9;
        uint64_t v126 = v8;
        uint64_t v21 = *(void *)&v17[OBJC_IVAR___AKDeviceListStoreManager_deviceListProvider];
        swift_retain(v21);
        unint64_t v40 = sub_1000DCE38(a4);
        swift_release(v21);
        uint64_t v41 = *(void *)&v17[OBJC_IVAR___AKDeviceListStoreManager_deletedDeviceListProvider];
        swift_retain(v41);
        uint64_t v57 = sub_1000CE20C(a4);
        swift_release(v41);
        uint64_t v58 = sub_1000B86DC((uint64_t *)&unk_10020D1E0);
        uint64_t inited = swift_initStackObject(v58, &v130);
        *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001645C0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeviceListVersionKey);
        *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v60;
        id v61 = [a3 deviceListVersionForAccount:v127];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        uint64_t v64 = v63;

        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v62;
        *(void *)(inited + 56) = v64;
        *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(AKAltDSIDKey);
        *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v65;
        id v66 = [a4 altDSID];
        uint64_t v123 = a2;
        if (v66)
        {
          os_log_type_t v67 = v66;
          uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          uint64_t v70 = v69;
        }

        else
        {
          uint64_t v68 = 0LL;
          uint64_t v70 = 0LL;
        }

        uint64_t v71 = v125;
        *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_1000B86DC(&qword_10020D858);
        *(void *)(inited + 96) = v68;
        *(void *)(inited + 104) = v70;
        *(void *)(inited + 12_Block_object_dispose(&a9, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDevicesKey);
        *(void *)(inited + 136) = v72;
        uint64_t v73 = sub_1000B86DC(&qword_10020ED20);
        *(void *)(inited + 16_Block_object_dispose(&a9, 8) = v73;
        *(void *)(inited + 144) = v40;
        *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(AKDeletedDevicesKey);
        *(void *)(inited + 184) = v74;
        *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v73;
        *(void *)(inited + 192) = v57;
        unint64_t v75 = sub_1000F4970(inited);
        uint64_t v76 = (void *)objc_opt_self(&OBJC_CLASS___AKDeviceListResponse);
        uint64_t v77 = swift_initStackObject(v58, &v129);
        __int128 v122 = xmmword_100162E50;
        *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
        *(void *)(v77 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AKAccountInfoKey);
        *(void *)(v77 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v78;
        uint64_t v79 = sub_1000B86DC(&qword_10020E930);
        uint64_t v80 = swift_allocObject(v79, 40LL, 7LL);
        *(_OWORD *)(v80 + swift_weakDestroy(v0 + 16) = v122;
        *(void *)(v80 + 32) = v75;
        *(void *)(v77 + 72) = v73;
        *(void *)(v77 + 4_Block_object_dispose(&a9, 8) = v80;
        unint64_t v81 = sub_1000F4970(v77);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v81);
        id v15 = [v76 deviceMapFromResponseBody:isa];

        uint64_t v83 = sub_1000D0510(0LL, &qword_10020ED10, &OBJC_CLASS___AKDeviceListResponse_ptr);
        uint64_t v84 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v15,  &type metadata for String,  v83,  &protocol witness table for String);

        id v85 = [a4 altDSID];
        if (v85)
        {
          unint64_t v86 = v85;
          uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          uint64_t v89 = v88;

          uint64_t v90 = v126;
          uint64_t v91 = v124;
          if (*(void *)(v84 + 16) && (unint64_t v92 = sub_1000F9BB8(v87, v89), (v93 & 1) != 0))
          {
            id v94 = *(id *)(*(void *)(v84 + 56) + 8 * v92);
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v84);
            id v95 = [v94 deviceList];
            if (v95)
            {
              uint64_t v96 = v95;
              uint64_t v97 = sub_1000D0510(0LL, &qword_10020DE40, &OBJC_CLASS___AKRemoteDevice_ptr);
              uint64_t v98 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v96, v97);

              if ((unint64_t)v98 >> 62)
              {
                uint64_t v121 = v98 < 0 ? v98 : v98 & 0xFFFFFFFFFFFFFF8LL;
                swift_bridgeObjectRetain(v98);
                uint64_t v99 = _CocoaArrayWrapper.endIndex.getter(v121);
                swift_bridgeObjectRelease(v98);
              }

              else
              {
                uint64_t v99 = *(void *)((v98 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              }

              swift_bridgeObjectRelease(v98);
              if (v99)
              {
                if (qword_10020CF88 != -1) {
                  swift_once(&qword_10020CF88, sub_1000E54E4);
                }
                uint64_t v100 = sub_1000B8C38(v90, (uint64_t)qword_100210FD8);
                uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
                os_log_type_t v102 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v101, v102))
                {
                  uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                  *(_WORD *)uint64_t v103 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v101,  v102,  "DeviceListStoreManager - Finished fetching device list from cache",  v103,  2u);
                  swift_slowDealloc(v103, -1LL, -1LL);
                }

                uint64_t v132 = (uint64_t)v94;
                uint64_t v104 = sub_1000B86DC(&qword_10020ED18);
                CheckedContinuation.resume(returning:)(&v132, v104);

                id v56 = (id)v127;
                goto LABEL_22;
              }
            }
          }

          else
          {
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v84);
          }

          id v105 = v128;
          if (qword_10020CF88 != -1) {
            swift_once(&qword_10020CF88, sub_1000E54E4);
          }
          uint64_t v106 = sub_1000B8C38(v90, (uint64_t)qword_100210FD8);
          (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v71, v106, v90);
          id v15 = a4;
          unint64_t v107 = (void *)Logger.logObject.getter(v15);
          os_log_type_t v108 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled((os_log_t)v107, v108))
          {

            (*(void (**)(char *, uint64_t))(v91 + 8))(v71, v90);
            goto LABEL_46;
          }

          char v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v110 = swift_slowAlloc(32LL, -1LL);
          uint64_t v132 = v110;
          *(_DWORD *)char v109 = 136315138;
          id v111 = [v15 altDSID];
          if (v111)
          {
            uint64_t v112 = v111;
            *(void *)&__int128 v122 = v109 + 4;
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
            unint64_t v115 = v114;

            uint64_t v131 = sub_100103438(v113, v115, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);

            swift_bridgeObjectRelease(v115);
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v107,  v108,  "Device not found for altDSID %s",  v109,  0xCu);
            swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v110, -1LL, -1LL);
            swift_slowDealloc(v109, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v90);
            id v105 = v128;
LABEL_46:
            type metadata accessor for DeviceListError(0LL);
            uint64_t v117 = v116;
            uint64_t v131 = -14002LL;
            unint64_t v118 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
            unint64_t v119 = sub_1000BF650();
            _BridgedStoredNSError.init(_:userInfo:)(&v132, &v131, v118, v117, v119);
            uint64_t v131 = v132;
            uint64_t v120 = sub_1000B86DC(&qword_10020ED18);
            CheckedContinuation.resume(throwing:)(&v131, v120);

            id v56 = (id)v127;
LABEL_22:

            return;
          }

          goto LABEL_54;
        }

uint64_t sub_1000F8524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  void v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  uint64_t v8 = (void *)swift_task_alloc(dword_10020ECDC);
  v5[6] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1000F859C;
  void v8[4] = a3;
  void v8[5] = v4;
  v8[3] = a2;
  return swift_task_switch(sub_1000F747C, 0LL, 0LL);
}

uint64_t sub_1000F859C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *v2;
  *(void *)(v5 + 56) = a1;
  swift_task_dealloc(v4);
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))(0LL);
  }
  id v7 = (void *)swift_task_alloc(dword_10020ED04);
  *(void *)(v5 + 64) = v7;
  *id v7 = v5;
  v7[1] = sub_1000F8648;
  void v7[4] = *(void *)(v5 + 16);
  void v7[5] = a1;
  return swift_task_switch(sub_1000F9DD8, 0LL, 0LL);
}

uint64_t sub_1000F8648()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v3 = *(void **)v1;
  void v3[9] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = sub_1000F86DC;
  }

  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_10020ED0C);
    v3[10] = v5;
    void *v5 = v3;
    v5[1] = sub_1000F8774;
    uint64_t v6 = v3[7];
    v5[4] = v3[2];
    void v5[5] = v6;
    uint64_t v4 = sub_1000F9F64;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000F86DC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_1000FA0D8( 0xD000000000000032LL,  0x800000010016F0E0LL,  *(id *)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  v1);
  swift_errorRelease(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_10020ED0C);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  void *v2 = v0;
  v2[1] = sub_1000F8774;
  uint64_t v3 = *(void *)(v0 + 56);
  v2[4] = *(void *)(v0 + 16);
  v2[5] = v3;
  return swift_task_switch(sub_1000F9F64, 0LL, 0LL);
}

uint64_t sub_1000F8774()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000F8818;
  }
  else {
    uint64_t v3 = sub_1000F87D8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000F87D8()
{
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(void *)(v0 + 72) == 0LL);
}

uint64_t sub_1000F8818()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 56);
  sub_1000FA0D8( 0xD000000000000032LL,  0x800000010016F120LL,  *(id *)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  v1);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000F89D8(void *a1, void *a2, void *a3, void *a4, void *aBlock, void *a6)
{
  v6[5] = a4;
  v6[6] = a6;
  void v6[3] = a2;
  void v6[4] = a3;
  _DWORD v6[2] = a1;
  v6[7] = _Block_copy(aBlock);
  uint64_t v12 = dword_10020ECE4;
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  a6;
  uint64_t v17 = (void *)swift_task_alloc(v12);
  v6[8] = v17;
  void *v17 = v6;
  v17[1] = sub_1000F8A94;
  return sub_1000F8524((uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16);
}

uint64_t sub_1000F8A94(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 64);
  uint64_t v6 = *(void **)(*v2 + 40);
  uint64_t v5 = *(void **)(*v2 + 48);
  uint64_t v8 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 32);
  uint64_t v9 = *(void **)(*v2 + 16);
  uint64_t v10 = *v2;
  swift_task_dealloc(v4);

  uint64_t v11 = *(void *)(v10 + 56);
  if (v1)
  {
    uint64_t v12 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);
  }

  else
  {
    (*(void (**)(void, void, void))(v11 + 16))(*(void *)(v10 + 56), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v10 + 56));
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1000F8B68(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  return swift_task_switch(sub_1000F8B84, 0LL, 0LL);
}

id sub_1000F8B84()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updating device list cache. Saving server response.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)v0[9];

  uint64_t v7 = sub_1000B86DC(&qword_10020ECF0);
  uint64_t inited = swift_initStackObject(v7, v0 + 2);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100162E50;
  id result = [v6 altDSID];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = (void *)v0[10];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v14 = v13;

    *(void *)(inited + 32) = v12;
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v14;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v11;
    id v15 = v11;
    unint64_t v16 = sub_1000F4D28(inited, &qword_10020ECF8);
    v0[12] = v16;
    uint64_t v17 = (uint64_t **)swift_task_alloc(dword_10020E4EC);
    v0[13] = (uint64_t)v17;
    void *v17 = v0;
    v17[1] = (uint64_t *)sub_1000F8D24;
    return (id)sub_1000DE4F8(v0[9], v16);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F8D24()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch(sub_1000F8D94, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 96));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000F8D94()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_10020DE38 + dword_10020DE38);
  uint64_t v1 = (void *)swift_task_alloc(unk_10020DE3C);
  *(void *)(v0 + 112) = v1;
  void *v1 = v0;
  v1[1] = sub_1000F8E04;
  return v3(*(void *)(v0 + 96));
}

uint64_t sub_1000F8E04()
{
  uint64_t v1 = *(void *)(*v0 + 96);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 112));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F8F90(void *a1, void *a2, void *aBlock, void *a4)
{
  void v4[3] = a2;
  v4[4] = a4;
  void v4[2] = a1;
  void v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10020ECEC;
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  uint64_t v12 = (void *)swift_task_alloc(v8);
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000F9034;
  v12[10] = v10;
  v12[11] = v11;
  v12[9] = v9;
  return swift_task_switch(sub_1000F8B84, 0LL, 0LL);
}

uint64_t sub_1000F9034()
{
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v3 = *(void **)(*v1 + 32);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(v2);

  uint64_t v7 = *(void *)(v6 + 40);
  if (v0)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }

  else
  {
    (*(void (**)(void, void))(v7 + 16))(*(void *)(v6 + 40), 0LL);
  }

  _Block_release(*(const void **)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

id sub_1000F9114()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceListStoreManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListStoreManager()
{
  return objc_opt_self(&OBJC_CLASS___AKDeviceListStoreManager);
}

void sub_1000F91AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = sub_1000B86DC(&qword_10020ED18);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  unint64_t v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_1001CC8E8, v12 + 8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v11, v9, v6);
  *(void *)(v13 + v12) = a3;
  aBlock[4] = sub_1000FA810;
  uint64_t v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F4E3C;
  aBlock[3] = &unk_1001CC900;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v18;
  id v16 = a3;
  swift_release(v15);
  [a2 executeRequestWithCompletion:v14];
  _Block_release(v14);
}

void sub_1000F92F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a4)
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    sub_1000B8C38(v11, (uint64_t)qword_100210FD8);
    swift_errorRetain(a4);
    uint64_t v15 = swift_errorRetain(a4);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v18 = 138412290;
      swift_errorRetain(a4);
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a4);
      uint64_t v82 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      uint64_t *v19 = v20;
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed with server error %@", v18, 0xCu);
      uint64_t v21 = sub_1000B86DC(&qword_10020D770);
      swift_arrayDestroy(v19, 1LL, v21);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);
    }

    uint64_t v82 = a4;
    swift_errorRetain(a4);
    uint64_t v30 = sub_1000B86DC(&qword_10020ED18);
    uint64_t v31 = &v82;
LABEL_14:
    CheckedContinuation.resume(throwing:)(v31, v30);
    return;
  }

  if (a3 >> 60 == 15)
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v22 = sub_1000B8C38(v11, (uint64_t)qword_100210FD8);
    id v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing server response data", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    type metadata accessor for DeviceListError(0LL);
    uint64_t v27 = v26;
    uint64_t v81 = -14004LL;
    unint64_t v28 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v29 = sub_1000BF650();
    _BridgedStoredNSError.init(_:userInfo:)(&v82, &v81, v28, v27, v29);
    uint64_t v81 = v82;
    uint64_t v30 = sub_1000B86DC(&qword_10020ED18);
    uint64_t v31 = &v81;
    goto LABEL_14;
  }

  os_log_type_t v32 = (void *)objc_opt_self(&OBJC_CLASS___AAFSerialization);
  sub_1000DFAE8(a2, a3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v34 = [v32 dictionaryFromObject:isa ofType:@"application/json"];

  if (!v34
    || (uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v34,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable),  v34,  v36 = sub_1000F4F18(v35),  swift_bridgeObjectRelease(v35),  !v36))
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v52 = sub_1000B8C38(v11, (uint64_t)qword_100210FD8);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Missing response parameters", v55, 2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    type metadata accessor for DeviceListError(0LL);
    uint64_t v57 = v56;
    uint64_t v81 = -14005LL;
    unint64_t v58 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v59 = sub_1000BF650();
    _BridgedStoredNSError.init(_:userInfo:)(&v82, &v81, v58, v57, v59);
    uint64_t v81 = v82;
    uint64_t v60 = sub_1000B86DC(&qword_10020ED18);
    goto LABEL_33;
  }

  uint64_t v80 = a5;
  unint64_t v37 = (void *)objc_opt_self(&OBJC_CLASS___AKDeviceListResponse);
  Class v38 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  id v39 = [v37 deviceMapFromResponseBody:v38];

  uint64_t v40 = sub_1000D0510(0LL, &qword_10020ED10, &OBJC_CLASS___AKDeviceListResponse_ptr);
  uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v39,  &type metadata for String,  v40,  &protocol witness table for String);

  id v42 = [a6 altDSID];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v46 = v45;

    if (*(void *)(v41 + 16))
    {
      unint64_t v47 = sub_1000F9BB8(v44, v46);
      if ((v48 & 1) != 0)
      {
        id v49 = *(id *)(*(void *)(v41 + 56) + 8 * v47);
        swift_bridgeObjectRelease(v46);
        swift_bridgeObjectRelease(v41);
        uint64_t v82 = (uint64_t)v49;
        id v50 = v49;
        uint64_t v51 = sub_1000B86DC(&qword_10020ED18);
        CheckedContinuation.resume(returning:)(&v82, v51);
        sub_1000B98AC(a2, a3);

        return;
      }
    }

    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v41);
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v61 = sub_1000B8C38(v11, (uint64_t)qword_100210FD8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v61, v11);
    a6 = a6;
    uint64_t v62 = (void *)Logger.logObject.getter(a6);
    int v63 = static os_log_type_t.error.getter();
    id v79 = v62;
    if (!os_log_type_enabled((os_log_t)v62, (os_log_type_t)v63))
    {

      goto LABEL_32;
    }

    int v78 = v63;
    uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v77 = swift_slowAlloc(32LL, -1LL);
    uint64_t v82 = v77;
    *(_DWORD *)uint64_t v64 = 136315138;
    id v65 = [a6 altDSID];
    if (v65)
    {
      id v66 = v65;
      v76[1] = v64 + 4;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      unint64_t v69 = v68;

      uint64_t v81 = sub_100103438(v67, v69, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);

      swift_bridgeObjectRelease(v69);
      id v70 = v79;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v79,  (os_log_type_t)v78,  "Missing deviceListResponse for altDSID %s",  v64,  0xCu);
      uint64_t v71 = v77;
      swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);

LABEL_32:
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      type metadata accessor for DeviceListError(0LL);
      uint64_t v73 = v72;
      uint64_t v81 = -14005LL;
      unint64_t v74 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v75 = sub_1000BF650();
      _BridgedStoredNSError.init(_:userInfo:)(&v82, &v81, v74, v73, v75);
      uint64_t v81 = v82;
      uint64_t v60 = sub_1000B86DC(&qword_10020ED18);
LABEL_33:
      CheckedContinuation.resume(throwing:)(&v81, v60);
      sub_1000B98AC(a2, a3);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000F9B60(uint64_t (*a1)(void))
{
  uint64_t result = a1();
  if (result) {
    return _swift_stdlib_bridgeErrorToNSError(result);
  }
  return result;
}

unint64_t sub_1000F9B88(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000F9C1C(a1, v4);
}

unint64_t sub_1000F9BB8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_1000F9CE0(a1, a2, v4);
}

unint64_t sub_1000F9C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000FA88C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000B8D94((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_1000F9CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_1000F9DC0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a2;
  return swift_task_switch(sub_1000F9DD8, 0LL, 0LL);
}

uint64_t sub_1000F9DD8()
{
  id v1 = [*(id *)(v0 + 32) trustedDevicesClientHash];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v5 = 0LL;
  }

  id v6 = [*(id *)(v0 + 40) trustedDevicesClientHash];
  if (!v6)
  {
    if (v5) {
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }

  char v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v10 = v9;

  if (!v5)
  {
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }

  if (!v10)
  {
LABEL_14:
    uint64_t v10 = v5;
LABEL_16:
    swift_bridgeObjectRelease(v10);
    goto LABEL_17;
  }

  if (v3 == v8 && v5 == v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v5);
    goto LABEL_19;
  }

  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v8, v10, 0LL);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v5);
  if ((v12 & 1) != 0) {
    goto LABEL_19;
  }
LABEL_17:
  type metadata accessor for DeviceListError(0LL);
  uint64_t v14 = v13;
  *(void *)(v0 + 24) = -14009LL;
  unint64_t v15 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v16 = sub_1000BF650();
  os_log_type_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v15, v14, v16);
  swift_willThrow(v17);
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1000F9F4C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a2;
  return swift_task_switch(sub_1000F9F64, 0LL, 0LL);
}

uint64_t sub_1000F9F64()
{
  id v1 = [*(id *)(v0 + 32) deletedDevicesClientHash];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v5 = 0LL;
  }

  id v6 = [*(id *)(v0 + 40) deletedDevicesClientHash];
  if (!v6)
  {
    if (v5) {
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }

  char v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v10 = v9;

  if (!v5)
  {
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }

  if (!v10)
  {
LABEL_14:
    uint64_t v10 = v5;
LABEL_16:
    swift_bridgeObjectRelease(v10);
    goto LABEL_17;
  }

  if (v3 == v8 && v5 == v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v5);
    goto LABEL_19;
  }

  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v8, v10, 0LL);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v5);
  if ((v12 & 1) != 0) {
    goto LABEL_19;
  }
LABEL_17:
  type metadata accessor for DeviceListError(0LL);
  uint64_t v14 = v13;
  *(void *)(v0 + 24) = -14010LL;
  unint64_t v15 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v16 = sub_1000BF650();
  os_log_type_t v17 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v15, v14, v16);
  swift_willThrow(v17);
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

void sub_1000FA0D8(uint64_t a1, uint64_t a2, id a3, void *a4, void *a5, uint64_t a6)
{
  id v51 = a5;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v50 - v14;
  id v16 = [a3 altDSID];
  if (!v16)
  {
    __break(1u);
    goto LABEL_21;
  }

  os_log_type_t v17 = v16;
  id v18 = [a4 authKitAccountWithAltDSID:v16];

  if (!v18)
  {
    if (qword_10020CF88 != -1) {
      swift_once(&qword_10020CF88, sub_1000E54E4);
    }
    uint64_t v27 = sub_1000B8C38(v10, (uint64_t)qword_100210FD8);
    uint64_t v28 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v13, v27, v10);
    a3 = a3;
    unint64_t v29 = (void *)Logger.logObject.getter(a3);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v29, v30))
    {

      unint64_t v37 = *(void (**)(char *, uint64_t))(v28 + 8);
      goto LABEL_16;
    }

    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v51 = (id)swift_slowAlloc(32LL, -1LL);
    id v53 = v51;
    *(_DWORD *)id v6 = 136315138;
    id v31 = [a3 altDSID];
    if (v31)
    {
      os_log_type_t v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      unint64_t v35 = v34;

      id v55 = (id)sub_100103438(v33, v35, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

      swift_bridgeObjectRelease(v35);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  v30,  "DeviceListStoreManager - Unable to report MID hash mismatch event. No idms account found for altDSID - %s.",  v6,  0xCu);
      id v36 = v51;
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);

      unint64_t v37 = *(void (**)(char *, uint64_t))(v52 + 8);
LABEL_16:
      id v49 = v13;
LABEL_19:
      v37(v49, v10);
      return;
    }

void sub_1000FA650(uint64_t a1)
{
}

uint64_t sub_1000FA65C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000FA680()
{
  uint64_t v1 = sub_1000B86DC(&qword_10020ED18);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1000FA724()
{
  uint64_t v1 = *(void *)(sub_1000B86DC(&qword_10020ED18) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000F7844(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000FA778(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FA788(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000FA790(uint64_t a1)
{
}

uint64_t sub_1000FA798()
{
  uint64_t v1 = sub_1000B86DC(&qword_10020ED18);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000FA810(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(sub_1000B86DC(&qword_10020ED18) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_1000F92F8(a1, a2, a3, a4, v4 + v10, *(id *)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000FA88C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000FA8C8(uint64_t a1)
{
  uint64_t v2 = sub_1000B86DC(&qword_10020ED38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000FA908()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000FA944()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  unint64_t v6 = (void *)swift_task_alloc(dword_10020ED44);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10020ED40 + dword_10020ED40))( v2,  v3,  v5,  v4);
}

uint64_t sub_1000FA9C8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  unint64_t v7 = (void *)v0[6];
  unint64_t v6 = (void *)v0[7];
  uint64_t v8 = (void *)swift_task_alloc(dword_10020ED54);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *, void *, void *, void *))((char *)&dword_10020ED50
                                                                                 + dword_10020ED50))( v2,  v3,  v4,  v5,  v7,  v6);
}

uint64_t sub_1000FAA60()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020ED6C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020ED68 + dword_10020ED68))(v2, v3, v4);
}

uint64_t sub_1000FAAD8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10020ED8C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020ED88 + dword_10020ED88))(v2, v3, v4);
}

uint64_t sub_1000FAB50()
{
  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000FAB9C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  unint64_t v7 = (void *)v0[6];
  unint64_t v6 = (void *)v0[7];
  uint64_t v8 = (void *)swift_task_alloc(dword_10020EDAC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000B87BC;
  return ((uint64_t (*)(void *, void *, void *, void *, void *, void *))((char *)&dword_10020EDA8
                                                                                 + dword_10020EDA8))( v2,  v3,  v4,  v5,  v7,  v6);
}

uint64_t sub_1000FAC30()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000FAC5C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10020EDCC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020EDC8 + dword_10020EDC8))(v2, v3);
}

uint64_t sub_1000FACC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000B86DC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t SignInWithAppleDaemonService.serviceName.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AKSignInWithAppleMachService);
}

__objc2_prot *SignInWithAppleDaemonService.exportedProtocol.getter()
{
  return &OBJC_PROTOCOL___AKSignInWithAppleDaemonProtocol;
}

id SignInWithAppleDaemonService.exportedObject.getter@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for SignInWithAppleDaemonService();
  *a1 = v3;
  return v3;
}

uint64_t type metadata accessor for SignInWithAppleDaemonService()
{
  return objc_opt_self(&OBJC_CLASS___AKSignInWithAppleDaemonService);
}

void *sub_1000FADDC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    sub_1000F33AC(0, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *v4;
      uint64_t v5 = sub_1000B86DC(&qword_10020F140);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000F33AC(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1000F33AC(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v2[2] = v7 + 1;
      sub_1000B8EB0(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

Swift::Bool __swiftcall SignInWithAppleDaemonService.shouldAcceptNewConnection(_:)(NSXPCConnection *a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  unsigned int v3 = -[NSXPCConnection shouldAcceptNewConnection:](&v7, "shouldAcceptNewConnection:", a1);
  if (v3)
  {
    id v4 = [objc_allocWithZone((Class)AKClient) initWithConnection:a1];
    uint64_t v5 = *(void **)&v1[OBJC_IVAR___AKSignInWithAppleDaemonService_client];
    *(void *)&v1[OBJC_IVAR___AKSignInWithAppleDaemonService_client] = v4;
  }

  return v3;
}

id SignInWithAppleDaemonService.init()()
{
  *(void *)&v0[OBJC_IVAR___AKSignInWithAppleDaemonService_client] = 0LL;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  return objc_msgSendSuper2(&v2, "init");
}

id SignInWithAppleDaemonService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t SignInWithAppleDaemonService.fetchAccounts(with:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  return swift_task_switch(sub_1000FB158, 0LL, 0LL);
}

uint64_t sub_1000FB158()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 40) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v1;
  if (v1)
  {
    uint64_t v2 = qword_10020CF90;
    id v3 = v1;
    if (v2 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
    unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching SIWA accounts", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___AKAccountManager);
    id v10 = [v9 sharedInstance];
    id v11 = [objc_allocWithZone(AKCDPFactory) init];
    uint64_t v12 = type metadata accessor for AccountSharingPreFlightChecker();
    uint64_t v13 = swift_allocObject(v12, 32LL, 7LL);
    *(void *)(v0 + 56) = v13;
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    *(void *)(v13 + 24) = v11;
    id v14 = [objc_allocWithZone(AAFKeychainManager) init];
    unint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___KCSharingGroupManager);
    id v16 = [v15 sharedInstance];
    os_log_type_t v17 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v18 = sub_100100E3C(v14, v16, v17);
    *(void *)(v0 + 64) = v18;
    id v19 = [v15 sharedInstance];
    id v20 = [objc_allocWithZone(AAFKeychainManager) init];
    uint64_t v21 = type metadata accessor for SharedGroupsMembershipController();
    uint64_t v22 = swift_allocObject(v21, 32LL, 7LL);
    *(void *)(v0 + 72) = v22;
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
    *(void *)(v22 + 24) = v20;
    id v23 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
    id v24 = v3;
    id v25 = [v23 sharedManager];
    id v26 = [v9 sharedInstance];
    id v27 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
    id v28 = objc_allocWithZone((Class)&OBJC_CLASS___AKApplicationInformationController);
    id v29 = v18;
    swift_retain(v13);
    id v30 = [v28 init];
    swift_retain(v22);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100100CA0( (uint64_t)v24,  (uint64_t)v25,  (uint64_t)v26,  (uint64_t)v27,  (uint64_t)v29,  v13,  (uint64_t)v30,  v22);
    id v31 = (void *)swift_task_alloc(dword_10020E6D4);
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v31;
    void *v31 = v0;
    v31[1] = sub_1000FB590;
    return sub_1000E0F28(*(void *)(v0 + 32));
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_1000B8C38(v33, (uint64_t)qword_100210FF0);
    unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Client is not set. Invalid connection", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v39 = v38;
    *(void *)(v0 + 24) = -16003LL;
    unint64_t v40 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v41 = sub_1000BC768();
    id v42 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v40, v39, v41);
    swift_willThrow(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FB590(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = sub_1000FB664;
  }

  else
  {
    *(void *)(v4 + 104) = a1;
    unint64_t v6 = sub_1000FB604;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000FB604()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  id v3 = *(void **)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 48);
  swift_release(*(void *)(v0 + 80));
  swift_release(v1);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
}

uint64_t sub_1000FB664()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  id v3 = *(void **)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 48);
  swift_release(*(void *)(v0 + 80));
  swift_release(v1);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FB7F0(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EE6C;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000FB880;
  void v9[4] = v7;
  void v9[5] = v8;
  return swift_task_switch(sub_1000FB158, 0LL, 0LL);
}

uint64_t sub_1000FB880(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  id v8 = *(void **)(*v2 + 16);
  id v7 = *(void **)(*v2 + 24);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v12 = (void *)v10;
  }

  else
  {
    sub_1000D0510(0LL, (unint64_t *)&qword_10020E6F0, &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    uint64_t v12 = isa;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t SignInWithAppleDaemonService.fetchEULA(forClientID:)(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10020EE80 + dword_10020EE80);
  uint64_t v5 = (void *)swift_task_alloc(unk_10020EE84);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000FB9D4;
  return v7(a1, a2);
}

uint64_t sub_1000FB9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*v3 + 16);
  uint64_t v7 = *v3;
  uint64_t v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_1000FBB68(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = unk_10020EE84;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10020EE80 + dword_10020EE80);
  id v10 = a3;
  id v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000FBC08;
  return v13(v6, v8);
}

uint64_t sub_1000FBC08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v3;
  uint64_t v8 = *(void *)(*v3 + 32);
  uint64_t v7 = *(void *)(*v3 + 40);
  uint64_t v9 = *(void **)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc(v7);

  swift_bridgeObjectRelease(v8);
  if (v4)
  {
    a2 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    NSString v11 = 0LL;
    uint64_t v12 = (void *)a2;
  }

  else if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    a2 = 0LL;
    uint64_t v12 = v11;
  }

  else
  {
    NSString v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, NSString, uint64_t))v13)[2](v13, v11, a2);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t SignInWithAppleDaemonService.revokeAcccount(with:)(uint64_t a1)
{
  *(void *)(v2 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
  *(void *)(v2 + 16_Block_object_dispose(&a9, 8) = v1;
  return swift_task_switch(sub_1000FBD08, 0LL, 0LL);
}

uint64_t sub_1000FBD08()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 168) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 176) = v1;
  if (v1)
  {
    uint64_t v2 = qword_10020CF90;
    id v3 = v1;
    if (v2 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Revoking SIWA account", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void **)(v0 + 160);

    id v10 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
    *(void *)(v0 + 184) = v10;
    NSString v11 = [v9 altDSID];
    if (!v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v13 = v12;
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v13);
    }

    [v10 setAltDSID:v11];

    id v14 = [objc_allocWithZone((Class)type metadata accessor for AccountRevokingRequestProvider()) initWithContext:v10 urlBagKey:AKURLBagKeyDeleteAuthorizedApp];
    *(void *)(v0 + 192) = v14;
    [v14 setAuthenticatedRequest:1];
    [v14 setClient:v3];
    id v15 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v14];
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v15;
    uint64_t v16 = type metadata accessor for AccountRevokingService();
    uint64_t v17 = swift_allocObject(v16, 24LL, 7LL);
    *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v17;
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    id v18 = objc_allocWithZone(&OBJC_CLASS___AAFKeychainManager);
    id v19 = v15;
    id v20 = [v18 init];
    id v21 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
    uint64_t v22 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v23 = sub_100100E3C(v20, v21, v22);
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v23;
    id v24 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
    id v48 = v3;
    id v47 = [v24 sharedManager];
    id v46 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v16;
    *(void *)(v0 + 136) = &off_1001CB358;
    uint64_t v25 = v16;
    *(void *)(v0 + 104) = v17;
    uint64_t v26 = type metadata accessor for AccountRevokingController();
    uint64_t inited = (void *)swift_initStackObject(v26, v0 + 16);
    *(void *)(v0 + 224) = inited;
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v29 = sub_1001017CC(v0 + 104, v28);
    uint64_t v30 = *(void *)(v28 - 8);
    id v31 = (uint64_t *)swift_task_alloc((*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(v31, v29, v28);
    uint64_t v32 = *v31;
    inited[9] = v25;
    inited[10] = &off_1001CB358;
    inited[5] = v23;
    inited[6] = v32;
    inited[2] = v47;
    inited[3] = v48;
    inited[4] = v46;
    id v33 = v23;
    swift_retain(v17);
    sub_1000BC7D4((void *)(v0 + 104));
    swift_task_dealloc(v31);
    uint64_t v34 = (void *)swift_task_alloc(dword_10020DB54);
    *(void *)(v0 + 232) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_1000FC1EC;
    return sub_1000C57E8(*(void *)(v0 + 160));
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_1000B8C38(v36, (uint64_t)qword_100210FF0);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Client is not set. Invalid connection", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v42 = v41;
    *(void *)(v0 + 152) = -16003LL;
    unint64_t v43 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v44 = sub_1000BC768();
    uint64_t v45 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 144), v0 + 152, v43, v42, v44);
    swift_willThrow(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FC1EC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 240LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_1000FC2F4;
  }
  else {
    id v3 = sub_1000FC250;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000FC250()
{
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v4 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v6 = *(void **)(v0 + 184);
  uint64_t v5 = *(void **)(v0 + 192);
  os_log_type_t v7 = *(void **)(v0 + 176);
  swift_setDeallocating(v1);

  swift_unknownObjectRelease(*(void *)(v1 + 32));
  swift_unknownObjectRelease(*(void *)(v1 + 40));
  sub_1000BC7D4((void *)(v1 + 48));

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FC2F4()
{
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v4 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v6 = *(void **)(v0 + 184);
  uint64_t v5 = *(void **)(v0 + 192);
  os_log_type_t v7 = *(void **)(v0 + 176);
  swift_setDeallocating(v1);

  swift_unknownObjectRelease(*(void *)(v1 + 32));
  swift_unknownObjectRelease(*(void *)(v1 + 40));
  sub_1000BC7D4((void *)(v1 + 48));

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FC4C8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EE8C;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100102790;
  v9[20] = v7;
  v9[21] = v8;
  return swift_task_switch(sub_1000FBD08, 0LL, 0LL);
}

uint64_t SignInWithAppleDaemonService.fetchAppIcon(forClientID:iconSize:)( uint64_t a1, uint64_t a2, double a3, double a4)
{
  NSString v11 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&dword_10020EE98 + dword_10020EE98);
  uint64_t v9 = (void *)swift_task_alloc(unk_10020EE9C);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000D2EC8;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_1000FC724(uint64_t a1, void *aBlock, void *a3, double a4, double a5)
{
  v5[2] = a3;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = unk_10020EE9C;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&dword_10020EE98 + dword_10020EE98);
  id v14 = a3;
  id v15 = (void *)swift_task_alloc(v13);
  void v5[5] = v15;
  *id v15 = v5;
  v15[1] = sub_1000EDE70;
  return v17(v10, v12, a4, a5);
}

uint64_t SignInWithAppleDaemonService.cancelAppIconRequest(forClientID:)(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10020EEA8 + dword_10020EEA8);
  uint64_t v5 = (void *)swift_task_alloc(unk_10020EEAC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000B87BC;
  return v7(a1, a2);
}

uint64_t sub_1000FC97C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = unk_10020EEAC;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10020EEA8 + dword_10020EEA8);
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  void *v11 = v3;
  v11[1] = sub_1000FCA1C;
  return v13(v6, v8);
}

uint64_t sub_1000FCA1C()
{
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  uint64_t v6 = *(void *)(v5 + 24);
  if (v0)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v6 + 16))(*(void *)(v5 + 24), 1LL, 0LL);
  }

  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t SignInWithAppleDaemonService.shareAccount(context:with:)(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  void v3[4] = a1;
  return swift_task_switch(sub_1000FCAE8, 0LL, 0LL);
}

uint64_t sub_1000FCAE8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 48) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 56) = v1;
  if (v1)
  {
    uint64_t v2 = qword_10020CF90;
    id v3 = v1;
    if (v2 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000B8C38(v4, (uint64_t)qword_100210FF0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sharing SIWA account", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void **)(v0 + 32);

    id v10 = [(id)objc_opt_self(AKAccountManager) sharedInstance];
    id v11 = [objc_allocWithZone(AKCDPFactory) init];
    uint64_t v12 = type metadata accessor for AccountSharingPreFlightChecker();
    uint64_t v13 = swift_allocObject(v12, 32LL, 7LL);
    *(void *)(v0 + 64) = v13;
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    *(void *)(v13 + 24) = v11;
    id v14 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
    *(void *)(v0 + 72) = v14;
    NSString v15 = [v9 altDSID];
    if (!v15)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v17 = v16;
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
    }

    id v18 = *(void **)(v0 + 32);
    [v14 setAltDSID:v15];

    unsigned int v19 = [v18 _isMoveAccountRequest];
    *(_BYTE *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v19;
    id v20 = (void *)AKURLBagKeySIWAUpdateShareToken;
    id v21 = (void *)AKURLBagKeySIWAGenerateShareToken;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = AKURLBagKeySIWAUpdateShareToken;
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v21;
    if (v19) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = v21;
    }
    id v23 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v14 urlBagKey:v22];
    *(void *)(v0 + 96) = v23;
    [v23 setAuthenticatedRequest:1];
    [v23 setClient:v3];
    id v24 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v23];
    *(void *)(v0 + 104) = v24;
    uint64_t v25 = type metadata accessor for AccountSharingService();
    uint64_t v26 = (uint64_t *)swift_allocObject(v25, 24LL, 7LL);
    *(void *)(v0 + 112) = v26;
    _OWORD v26[2] = (uint64_t)v24;
    id v27 = objc_allocWithZone(&OBJC_CLASS___AAFKeychainManager);
    id v28 = v24;
    id v29 = [v27 init];
    id v30 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
    id v31 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v32 = sub_100100E3C(v29, v30, v31);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v32;
    id v33 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
    id v34 = v3;
    id v35 = [v33 sharedManager];
    id v36 = objc_allocWithZone((Class)&OBJC_CLASS___AKAuthorizationStoreManager);
    swift_retain(v13);
    id v37 = [v36 init];
    id v38 = v32;
    swift_retain(v26);
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = sub_100100F18((uint64_t)v34, (uint64_t)v35, v13, (uint64_t)v37, (uint64_t)v38, v26);
    os_log_type_t v39 = (void *)swift_task_alloc(dword_10020E7EC);
    *(void *)(v0 + 136) = v39;
    *os_log_type_t v39 = v0;
    v39[1] = sub_1000FCFE0;
    return sub_1000E71A8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    uint64_t v42 = sub_1000B8C38(v41, (uint64_t)qword_100210FF0);
    unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Client is not set. Invalid connection", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v47 = v46;
    *(void *)(v0 + 24) = -16003LL;
    unint64_t v48 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v49 = sub_1000BC768();
    id v50 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v48, v47, v49);
    swift_willThrow(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FCFE0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 136);
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000FD0F4;
  }

  else
  {
    *(void *)(v4 + 152) = a1;
    uint64_t v6 = sub_1000FD054;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000FD054()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v3 = *(void **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void **)(v0 + 96);
  uint64_t v5 = (void **)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 64);
  os_log_type_t v7 = *(void **)(v0 + 72);
  uint64_t v8 = *(void **)(v0 + 56);
  if (*(_BYTE *)(v0 + 160)) {
    uint64_t v5 = (void **)(v0 + 80);
  }
  uint64_t v9 = *v5;
  swift_release(*(void *)(v0 + 128));

  swift_release(v2);
  swift_release(v6);

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 152));
}

uint64_t sub_1000FD0F4()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v3 = *(void **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void **)(v0 + 96);
  uint64_t v5 = (void **)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 64);
  os_log_type_t v7 = *(void **)(v0 + 72);
  uint64_t v8 = *(void **)(v0 + 56);
  if (*(_BYTE *)(v0 + 160)) {
    uint64_t v5 = (void **)(v0 + 80);
  }
  uint64_t v9 = *v5;
  swift_release(*(void *)(v0 + 128));

  swift_release(v2);
  swift_release(v6);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD2C8(void *a1, void *a2, void *aBlock, void *a4)
{
  void v4[3] = a2;
  v4[4] = a4;
  void v4[2] = a1;
  void v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10020EEB4;
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  uint64_t v12 = (void *)swift_task_alloc(v8);
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000FD36C;
  void v12[5] = v10;
  v12[6] = v11;
  void v12[4] = v9;
  return swift_task_switch(sub_1000FCAE8, 0LL, 0LL);
}

uint64_t sub_1000FD36C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 48);
  os_log_type_t v7 = *(void **)(*v2 + 24);
  uint64_t v6 = *(void **)(*v2 + 32);
  uint64_t v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v5);

  id v10 = *(void (***)(void, void, void))(v9 + 40);
  if (v3)
  {
    id v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v10)[2](v10, 0LL, v11);

    _Block_release(v10);
  }

  else
  {
    ((void (**)(void, void *, void))v10)[2](v10, a1, 0LL);
    _Block_release(v10);
  }

  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t SignInWithAppleDaemonService.unshareAccount(context:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  return swift_task_switch(sub_1000FD454, 0LL, 0LL);
}

uint64_t sub_1000FD454()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 160) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 152);
    id v3 = objc_allocWithZone(&OBJC_CLASS___AAFKeychainManager);
    id v4 = v1;
    id v5 = [v3 init];
    id v6 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
    os_log_type_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v40 = sub_100100E3C(v5, v6, v7);
    *(void *)(v0 + 176) = v40;
    id v8 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
    *(void *)(v0 + 184) = v8;
    NSString v9 = [v2 altDSID];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v11 = v10;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
    }

    [v8 setAltDSID:v9];

    id v12 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v8 urlBagKey:AKURLBagKeySIWARevokeShareToken];
    *(void *)(v0 + 192) = v12;
    [v12 setAuthenticatedRequest:1];
    [v12 setClient:v4];
    id v13 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v12];
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v13;
    uint64_t v14 = type metadata accessor for AccountUnsharingService();
    uint64_t v15 = swift_allocObject(v14, 24LL, 7LL);
    *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v15;
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
    id v39 = v4;
    id v17 = v13;
    id v18 = [v16 sharedManager];
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v14;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = &off_1001CB438;
    *(void *)(v0 + 96) = v15;
    uint64_t v19 = type metadata accessor for AccountUnsharingController();
    uint64_t inited = (void *)swift_initStackObject(v19, v0 + 16);
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = inited;
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = sub_1001017CC(v0 + 96, v21);
    uint64_t v23 = *(void *)(v21 - 8);
    id v24 = (uint64_t *)swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v24, v22, v21);
    uint64_t v25 = *v24;
    inited[8] = v14;
    inited[9] = &off_1001CB438;
    inited[2] = v39;
    inited[3] = v18;
    inited[4] = v40;
    inited[5] = v25;
    id v26 = v40;
    swift_retain(v15);
    sub_1000BC7D4((void *)(v0 + 96));
    swift_task_dealloc(v24);
    id v27 = (void *)swift_task_alloc(dword_10020D4EC);
    *(void *)(v0 + 224) = v27;
    *id v27 = v0;
    v27[1] = sub_1000FD86C;
    return sub_1000BAEE8(*(void *)(v0 + 152));
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_1000B8C38(v29, (uint64_t)qword_100210FF0);
    id v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Client is not set. Invalid connection", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v35 = v34;
    *(void *)(v0 + 144) = -16003LL;
    unint64_t v36 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v37 = sub_1000BC768();
    id v38 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 136), v0 + 144, v36, v35, v37);
    swift_willThrow(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FD86C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_100102794;
  }
  else {
    id v3 = sub_100102798;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000FDA00(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EEBC;
  id v7 = a1;
  id v8 = a3;
  NSString v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *NSString v9 = v3;
  v9[1] = sub_100102790;
  v9[19] = v7;
  v9[20] = v8;
  return swift_task_switch(sub_1000FD454, 0LL, 0LL);
}

uint64_t SignInWithAppleDaemonService.leaveGroup(context:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  return swift_task_switch(sub_1000FDAA8, 0LL, 0LL);
}

uint64_t sub_1000FDAA8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 160) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 16_Block_object_dispose(&a9, 8) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 152);
    id v3 = objc_allocWithZone(&OBJC_CLASS___AAFKeychainManager);
    id v4 = v1;
    id v5 = [v3 init];
    id v6 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
    id v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v40 = sub_100100E3C(v5, v6, v7);
    *(void *)(v0 + 176) = v40;
    id v8 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
    *(void *)(v0 + 184) = v8;
    NSString v9 = [v2 altDSID];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v11 = v10;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
    }

    [v8 setAltDSID:v9];

    id v12 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v8 urlBagKey:AKURLBagKeySIWARevokeShareToken];
    *(void *)(v0 + 192) = v12;
    [v12 setAuthenticatedRequest:1];
    [v12 setClient:v4];
    id v13 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v12];
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v13;
    uint64_t v14 = type metadata accessor for AccountUnsharingService();
    uint64_t v15 = swift_allocObject(v14, 24LL, 7LL);
    *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v15;
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
    id v39 = v4;
    id v17 = v13;
    id v18 = [v16 sharedManager];
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v14;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = &off_1001CB438;
    *(void *)(v0 + 96) = v15;
    uint64_t v19 = type metadata accessor for AccountUnsharingController();
    uint64_t inited = (void *)swift_initStackObject(v19, v0 + 16);
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = inited;
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = sub_1001017CC(v0 + 96, v21);
    uint64_t v23 = *(void *)(v21 - 8);
    id v24 = (uint64_t *)swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v24, v22, v21);
    uint64_t v25 = *v24;
    inited[8] = v14;
    inited[9] = &off_1001CB438;
    inited[2] = v39;
    inited[3] = v18;
    inited[4] = v40;
    inited[5] = v25;
    id v26 = v40;
    swift_retain(v15);
    sub_1000BC7D4((void *)(v0 + 96));
    swift_task_dealloc(v24);
    id v27 = (void *)swift_task_alloc(dword_10020D4F4);
    *(void *)(v0 + 224) = v27;
    *id v27 = v0;
    v27[1] = sub_1000FDEC0;
    return sub_1000BC138(*(void *)(v0 + 152));
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_1000B8C38(v29, (uint64_t)qword_100210FF0);
    id v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Client is not set. Invalid connection", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v35 = v34;
    *(void *)(v0 + 144) = -16003LL;
    unint64_t v36 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v37 = sub_1000BC768();
    id v38 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 136), v0 + 144, v36, v35, v37);
    swift_willThrow(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FDEC0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_1000FDFC0;
  }
  else {
    id v3 = sub_1000FDF24;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000FDF24()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  id v4 = *(void **)(v0 + 192);
  id v3 = *(void **)(v0 + 200);
  id v6 = *(void **)(v0 + 176);
  id v5 = *(void **)(v0 + 184);
  id v7 = *(void **)(v0 + 168);
  swift_setDeallocating(v2);

  swift_unknownObjectRelease(*(void *)(v2 + 32));
  sub_1000BC7D4((void *)(v2 + 40));
  swift_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDFC0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  id v4 = *(void **)(v0 + 192);
  id v3 = *(void **)(v0 + 200);
  id v6 = *(void **)(v0 + 176);
  id v5 = *(void **)(v0 + 184);
  id v7 = *(void **)(v0 + 168);
  swift_setDeallocating(v2);

  swift_unknownObjectRelease(*(void *)(v2 + 32));
  sub_1000BC7D4((void *)(v2 + 40));
  swift_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FE18C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EEC4;
  id v7 = a1;
  id v8 = a3;
  NSString v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *NSString v9 = v3;
  v9[1] = sub_1000FE21C;
  v9[19] = v7;
  v9[20] = v8;
  return swift_task_switch(sub_1000FDAA8, 0LL, 0LL);
}

uint64_t sub_1000FE21C()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  id v4 = *(void **)(*v1 + 16);
  id v3 = *(void **)(*v1 + 24);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);

  uint64_t v6 = *(void *)(v5 + 32);
  if (v0)
  {
    id v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v6 + 16))(*(void *)(v5 + 32), 1LL, 0LL);
  }

  _Block_release(*(const void **)(v5 + 32));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t SignInWithAppleDaemonService.deleteAllItemsFromDepartedGroup(context:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  return swift_task_switch(sub_1000FE2E0, 0LL, 0LL);
}

uint64_t sub_1000FE2E0()
{
  if (!*(void *)(*(void *)(v0 + 40) + OBJC_IVAR___AKSignInWithAppleDaemonService_client))
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000B8C38(v9, (uint64_t)qword_100210FF0);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client is not set. Invalid connection", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v14;
    uint64_t v16 = -16003LL;
    goto LABEL_14;
  }

  id v1 = [*(id *)(v0 + 32) currentGroupID];
  if (!v1)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_1000B8C38(v17, (uint64_t)qword_100210FF0);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Context is missing groupID", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v15 = v22;
    uint64_t v16 = -16007LL;
LABEL_14:
    *(void *)(v0 + 24) = v16;
    unint64_t v23 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v24 = sub_1000BC768();
    uint64_t v25 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v23, v15, v24);
    swift_willThrow(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  id v5 = [objc_allocWithZone(AAFKeychainManager) init];
  id v6 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
  id v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v8 = sub_100100E3C(v5, v6, v7);
  sub_1000DA588();

  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FE6D4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EECC;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100102790;
  void v9[4] = v7;
  void v9[5] = v8;
  return swift_task_switch(sub_1000FE2E0, 0LL, 0LL);
}

uint64_t SignInWithAppleDaemonService.participantRemovedWithContext(context:participantID:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  return swift_task_switch(sub_1000FE780, 0LL, 0LL);
}

uint64_t sub_1000FE780()
{
  id v1 = *(void **)(*(void *)(v0 + 176) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 184) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 152);
    id v3 = v1;
    id v4 = [v2 currentGroupID];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void **)(v0 + 152);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v46 = v8;
      uint64_t v47 = v7;
      uint64_t v9 = v8;

      *(void *)(v0 + 192) = v9;
      id v10 = [objc_allocWithZone(AAFKeychainManager) init];
      id v11 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
      os_log_type_t v12 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
      id v13 = sub_100100E3C(v10, v11, v12);
      *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v13;
      uint64_t v14 = sub_100101CE8((uint64_t)v3, v6);
      *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v14;
      uint64_t v15 = type metadata accessor for SharedAccountsTokenRotationController();
      *(void *)(v0 + 104) = v15;
      *(void *)(v0 + 112) = &off_1001CBAB8;
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v14;
      uint64_t v16 = type metadata accessor for ParticipantGroupDepartureController();
      uint64_t inited = (void *)swift_initStackObject(v16, v0 + 16);
      *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = inited;
      uint64_t v18 = *(void *)(v0 + 104);
      uint64_t v19 = sub_1001017CC(v0 + 80, v18);
      uint64_t v20 = *(void *)(v18 - 8);
      uint64_t v21 = (uint64_t *)swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v21, v19, v18);
      uint64_t v22 = *v21;
      inited[6] = v15;
      inited[7] = &off_1001CBAB8;
      inited[2] = v13;
      inited[3] = v22;
      id v23 = v13;
      swift_retain(v14);
      sub_1000BC7D4((void *)(v0 + 80));
      swift_task_dealloc(v21);
      unint64_t v24 = (void *)swift_task_alloc(dword_10020D5D4);
      *(void *)(v0 + 224) = v24;
      *unint64_t v24 = v0;
      v24[1] = sub_1000FEBA0;
      return sub_1000BD3E4(*(void *)(v0 + 160), *(void *)(v0 + 168), v47, v46);
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_1000B8C38(v36, (uint64_t)qword_100210FF0);
    id v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Context is missing groupID", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v42 = v41;
    *(void *)(v0 + 144) = -16007LL;
    unint64_t v43 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v44 = sub_1000BC768();
    uint64_t v45 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 136), v0 + 144, v43, v42, v44);
    swift_willThrow(v45);
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_1000B8C38(v26, (uint64_t)qword_100210FF0);
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client is not set. Invalid connection", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v32 = v31;
    *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = -16003LL;
    unint64_t v33 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v34 = sub_1000BC768();
    uint64_t v35 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 128, v33, v32, v34);
    swift_willThrow(v35);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FEBA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 224);
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 192));
  if (v0) {
    id v4 = sub_1000FEC80;
  }
  else {
    id v4 = sub_1000FEC0C;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000FEC0C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  id v4 = *(void **)(v0 + 184);
  swift_setDeallocating(v2);
  swift_unknownObjectRelease(*(void *)(v2 + 16));
  sub_1000BC7D4((void *)(v2 + 24));
  swift_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FEC80()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  id v4 = *(void **)(v0 + 184);
  swift_setDeallocating(v2);
  swift_unknownObjectRelease(*(void *)(v2 + 16));
  sub_1000BC7D4((void *)(v2 + 24));
  swift_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FEE2C(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a1;
  void v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v10 = v9;
  void v4[5] = v9;
  uint64_t v11 = dword_10020EED4;
  id v12 = a1;
  id v13 = a4;
  uint64_t v14 = (void *)swift_task_alloc(v11);
  v4[6] = v14;
  void *v14 = v4;
  v14[1] = sub_1000FEEE0;
  v14[21] = v10;
  v14[22] = v13;
  v14[19] = v12;
  v14[20] = v8;
  return swift_task_switch(sub_1000FE780, 0LL, 0LL);
}

uint64_t sub_1000FEEE0()
{
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v2 = *(void *)(*v1 + 48);
  id v5 = *(void **)(*v1 + 16);
  id v4 = *(void **)(*v1 + 24);
  uint64_t v6 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  uint64_t v7 = *(void *)(v6 + 32);
  if (v0)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v7 + 16))(*(void *)(v6 + 32), 1LL, 0LL);
  }

  _Block_release(*(const void **)(v6 + 32));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t SignInWithAppleDaemonService.fetchSharedGroups(with:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(sub_1000FEFB4, 0LL, 0LL);
}

uint64_t sub_1000FEFB4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 64) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 56);
    id v3 = objc_allocWithZone(&OBJC_CLASS___AKAppleIDAuthenticationContext);
    id v4 = v1;
    id v5 = [v3 init];
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v5;
    NSString v6 = [v2 altDSID];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v8 = v7;
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
    }

    [v5 setAltDSID:v6];

    id v9 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v5 urlBagKey:AKURLBagKeySIWAFetchSharedGroups];
    *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v9;
    [v9 setAuthenticatedRequest:1];
    [v9 setClient:v4];
    id v10 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v9];
    *(void *)(v0 + 96) = v10;
    uint64_t v11 = type metadata accessor for AccountSharingService();
    uint64_t inited = swift_initStackObject(v11, v0 + 16);
    *(void *)(v0 + 104) = inited;
    *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    uint64_t v13 = dword_10020DCBC;
    id v14 = v10;
    uint64_t v15 = (void *)swift_task_alloc(v13);
    *(void *)(v0 + 112) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000FF26C;
    return sub_1000C9D80();
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_1000B8C38(v17, (uint64_t)qword_100210FF0);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Client is not set. Invalid connection", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v23 = v22;
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = -16003LL;
    unint64_t v24 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v25 = sub_1000BC768();
    uint64_t v26 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 40), v0 + 48, v24, v23, v25);
    swift_willThrow(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FF26C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 112LL);
  *(void *)(*(void *)v2 + 120LL) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    id v5 = sub_1000FF344;
  }

  else
  {
    swift_bridgeObjectRelease(a1);
    id v5 = sub_1000FF2DC;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000FF2DC()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 80);
  id v3 = *(void **)(v0 + 88);
  id v5 = *(void **)(v0 + 72);
  swift_setDeallocating(v2);
  swift_unknownObjectRelease(*(void *)(v2 + 16));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF344()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 80);
  id v3 = *(void **)(v0 + 88);
  id v5 = *(void **)(v0 + 72);
  swift_setDeallocating(v2);
  swift_unknownObjectRelease(*(void *)(v2 + 16));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF4DC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EEDC;
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *id v9 = v3;
  v9[1] = sub_100102790;
  v9[7] = v7;
  v9[8] = v8;
  return swift_task_switch(sub_1000FEFB4, 0LL, 0LL);
}

uint64_t SignInWithAppleDaemonService.performTokenRotation(with:)(uint64_t a1)
{
  *(void *)(v2 + 4_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 56) = v1;
  return swift_task_switch(sub_1000FF584, 0LL, 0LL);
}

uint64_t sub_1000FF584()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 56) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 64) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 48);
    id v3 = v1;
    id v4 = [v2 _groups];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void **)(v0 + 48);
      uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  &protocol witness table for String);
      *(void *)(v0 + 72) = v7;

      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100101CE8((uint64_t)v3, v6);
      id v8 = (void *)swift_task_alloc(dword_10020DF74);
      *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v8;
      *id v8 = v0;
      v8[1] = sub_1000FF888;
      return sub_1000D07C0(v7);
    }

    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_1000B8C38(v20, (uint64_t)qword_100210FF0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Groups is not set.", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v26 = v25;
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v27 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000BC768();
    os_log_type_t v29 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 32), v0 + 40, v27, v26, v28);
    swift_willThrow(v29);
  }

  else
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1000B8C38(v10, (uint64_t)qword_100210FF0);
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Client is not set. Invalid connection", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v16 = v15;
    *(void *)(v0 + 24) = -16003LL;
    unint64_t v17 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v18 = sub_1000BC768();
    uint64_t v19 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v17, v16, v18);
    swift_willThrow(v19);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF888()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 72));
  if (v0) {
    id v4 = sub_1000FF930;
  }
  else {
    id v4 = sub_1000FF8F4;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000FF8F4()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_release(*(void *)(v0 + 80));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF930()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_release(*(void *)(v0 + 80));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FFA9C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10020EEE4;
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)swift_task_alloc(v6);
  void v3[5] = v9;
  *id v9 = v3;
  v9[1] = sub_100102790;
  v9[6] = v7;
  v9[7] = v8;
  return swift_task_switch(sub_1000FF584, 0LL, 0LL);
}

uint64_t SignInWithAppleDaemonService.performHealthCheck(context:)()
{
  return sub_100101F58(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000FFC6C(int a1, void *aBlock)
{
  uint64_t v3 = (void (**)(void *, uint64_t, void))_Block_copy(aBlock);
  v3[2](v3, 1LL, 0LL);
  _Block_release(v3);
  return sub_100102108(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t SignInWithAppleDaemonService.fetchSignInWithApplePrivateEmailCount()()
{
  *(void *)(v1 + 64) = v0;
  return swift_task_switch(sub_1000FFCD4, 0LL, 0LL);
}

uint64_t sub_1000FFCD4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 64) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 72) = v1;
  if (!v1)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_1000B8C38(v40, (uint64_t)qword_100210FF0);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Client is not set. Invalid connection", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v46 = v45;
    *(void *)(v0 + 24) = -16003LL;
    unint64_t v47 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v48 = sub_1000BC768();
    unint64_t v49 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 16), v0 + 24, v47, v46, v48);
    swift_willThrow(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___AKAccountManager);
  id v3 = v1;
  id v4 = [v2 sharedInstance];
  id v5 = [v4 primaryAuthKitAccount];
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v5;

  if (!v5)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_1000B8C38(v50, (uint64_t)qword_100210FF0);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "No primary authKit account", v54, 2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v56 = v55;
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = -16007LL;
    unint64_t v57 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v58 = sub_1000BC768();
    unint64_t v59 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 32), v0 + 40, v57, v56, v58);
    swift_willThrow(v59);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  id v6 = [v2 sharedInstance];
  id v7 = [v6 altDSIDForAccount:v5];

  if (!v7)
  {
    if (qword_10020CF90 != -1) {
      swift_once(&qword_10020CF90, sub_1000E54FC);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    uint64_t v61 = sub_1000B8C38(v60, (uint64_t)qword_100210FF0);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "No authKit account", v64, 2u);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    type metadata accessor for SignInWithAppleError(0LL);
    uint64_t v66 = v65;
    *(void *)(v0 + 56) = -16007LL;
    unint64_t v67 = sub_1001006E8((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v68 = sub_1000BC768();
    unint64_t v69 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 48), v0 + 56, v67, v66, v68);
    swift_willThrow(v69);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v9 = v8;

  id v10 = objc_allocWithZone(&OBJC_CLASS___AKSignInWithAppleRequestContext);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  id v70 = [v10 initWithAltDSID:v11];
  *(void *)(v0 + 8_Block_object_dispose(&a9, 8) = v70;

  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_1000B8C38(v12, (uint64_t)qword_100210FF0);
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetching SIWA accounts", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  id v17 = [v2 sharedInstance];
  id v18 = [objc_allocWithZone(AKCDPFactory) init];
  uint64_t v19 = type metadata accessor for AccountSharingPreFlightChecker();
  uint64_t v20 = swift_allocObject(v19, 32LL, 7LL);
  *(void *)(v0 + 96) = v20;
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *(void *)(v20 + 24) = v18;
  id v21 = [objc_allocWithZone(AAFKeychainManager) init];
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___KCSharingGroupManager);
  id v23 = [v22 sharedInstance];
  unint64_t v24 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v25 = sub_100100E3C(v21, v23, v24);
  *(void *)(v0 + 104) = v25;
  id v26 = [v22 sharedInstance];
  id v27 = [objc_allocWithZone(AAFKeychainManager) init];
  uint64_t v28 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v29 = swift_allocObject(v28, 32LL, 7LL);
  *(void *)(v0 + 112) = v29;
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
  *(void *)(v29 + 24) = v27;
  uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___AKFeatureManager);
  id v31 = v3;
  id v32 = [v30 sharedManager];
  id v33 = [v2 sharedInstance];
  id v34 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  id v35 = objc_allocWithZone((Class)&OBJC_CLASS___AKApplicationInformationController);
  id v36 = v25;
  swift_retain(v20);
  id v37 = [v35 init];
  swift_retain(v29);
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = sub_100100CA0( (uint64_t)v31,  (uint64_t)v32,  (uint64_t)v33,  (uint64_t)v34,  (uint64_t)v36,  v20,  (uint64_t)v37,  v29);
  id v38 = (void *)swift_task_alloc(dword_10020E6BC);
  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v38;
  *id v38 = v0;
  v38[1] = sub_1001003F0;
  return sub_1000E2E88((uint64_t)v70);
}

uint64_t sub_1001003F0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 128);
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    id v6 = sub_1001004E4;
  }

  else
  {
    *(void *)(v4 + 144) = a1;
    id v6 = sub_100100464;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100100464()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 104);
  id v6 = *(void **)(v0 + 80);
  uint64_t v5 = *(void **)(v0 + 88);
  id v7 = *(void **)(v0 + 72);
  swift_release(*(void *)(v0 + 120));
  swift_release(v2);

  swift_release(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1001004E4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 88);
  id v6 = *(void **)(v0 + 72);
  swift_release(*(void *)(v0 + 120));
  swift_release(v1);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100670(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10020EEF4;
  id v5 = a2;
  id v6 = (void *)swift_task_alloc(v4);
  v2[4] = v6;
  void *v6 = v2;
  v6[1] = sub_1000EB748;
  v6[8] = v5;
  return swift_task_switch(sub_1000FFCD4, 0LL, 0LL);
}

unint64_t sub_1001006E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000B86DC((uint64_t *)&unk_10020F110);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100102748(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100100810(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000B8EB0(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100100810(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_100100874(a1, a2, v4);
}

unint64_t sub_100100874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_1001009B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000B9420;
  return v6();
}

uint64_t sub_100100A0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1000B9420;
  return v7();
}

uint64_t sub_100100A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1000D1CF4(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1001CCC88, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10020EF60, v16);
}

uint64_t sub_100100BA4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100100C08;
  return v6(a1);
}

uint64_t sub_100100C08()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100100C54()
{
  uint64_t v0 = sub_1000B86DC(&qword_10020F140);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_10020F150;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_10020F148;
  }
  return sub_1000B86DC(v2);
}

void *sub_100100CA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a7;
  uint64_t v14 = type metadata accessor for AccountSharingPreFlightChecker();
  v34[3] = v14;
  v34[4] = &off_1001CC528;
  v34[0] = a6;
  uint64_t v15 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v32 = v15;
  id v33 = &off_1001CC608;
  v31[0] = a8;
  uint64_t v16 = type metadata accessor for AccountsListingController();
  uint64_t v17 = (void *)swift_allocObject(v16, 144LL, 7LL);
  uint64_t v18 = sub_1001017CC((uint64_t)v34, v14);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1001017CC((uint64_t)v31, v32);
  __chkstk_darwin(v22);
  unint64_t v24 = (uint64_t *)((char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = *v20;
  uint64_t v27 = *v24;
  v17[10] = v14;
  v17[11] = &off_1001CC528;
  uint8_t v17[16] = v15;
  v17[17] = &off_1001CC608;
  uint64_t v17[2] = a2;
  v17[3] = a1;
  void v17[4] = a3;
  void v17[5] = a4;
  v17[6] = v29;
  v17[7] = v26;
  v17[12] = v30;
  v17[13] = v27;
  sub_1000BC7D4(v31);
  sub_1000BC7D4(v34);
  return v17;
}

id sub_100100E3C(void *a1, void *a2, char *a3)
{
  uint64_t v6 = &a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier];
  *(void *)uint64_t v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap] = &_swiftEmptyDictionarySingleton;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo] = 0LL;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController] = a1;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager] = a2;
  uint64_t v7 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v8 = swift_allocObject(v7, 32LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = (uint64_t *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController];
  v9[3] = v7;
  void v9[4] = (uint64_t)&off_1001CC608;
  *uint64_t v9 = v8;
  v13.receiver = a3;
  v13.super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  id v10 = a1;
  id v11 = a2;
  return objc_msgSendSuper2(&v13, "init");
}

void *sub_100100F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = type metadata accessor for AccountSharingPreFlightChecker();
  v30[3] = v13;
  v30[4] = &off_1001CC528;
  v30[0] = a3;
  uint64_t v28 = v12;
  uint64_t v29 = &off_1001CB870;
  v27[0] = a6;
  uint64_t v14 = type metadata accessor for AccountSharingController();
  uint64_t v15 = (void *)swift_allocObject(v14, 128LL, 7LL);
  uint64_t v16 = sub_1001017CC((uint64_t)v30, v13);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_1001017CC((uint64_t)v27, v28);
  __chkstk_darwin(v20);
  uint64_t v22 = (void *)((char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  uint64_t v24 = *v18;
  uint64_t v25 = *v22;
  v15[7] = v13;
  v15[8] = &off_1001CC528;
  void v15[4] = v24;
  v15[14] = v12;
  v15[15] = &off_1001CB870;
  v15[10] = a5;
  v15[11] = v25;
  v15[2] = a1;
  v15[3] = a2;
  v15[9] = a4;
  sub_1000BC7D4(v27);
  sub_1000BC7D4(v30);
  return v15;
}

void *sub_1001010A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = type metadata accessor for SharedGroupsMembershipController();
  v26[3] = v9;
  void v26[4] = &off_1001CC608;
  v26[0] = a2;
  uint64_t v24 = v8;
  uint64_t v25 = &off_1001CB870;
  v23[0] = a4;
  uint64_t v10 = type metadata accessor for SharedAccountsTokenRotationController();
  id v11 = (void *)swift_allocObject(v10, 112LL, 7LL);
  uint64_t v12 = sub_1001017CC((uint64_t)v26, v9);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_1001017CC((uint64_t)v23, v24);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = *v14;
  uint64_t v21 = *v18;
  v11[6] = v9;
  v11[7] = &off_1001CC608;
  v11[12] = v8;
  v11[13] = &off_1001CB870;
  v11[2] = a1;
  v11[3] = v20;
  v11[8] = a3;
  v11[9] = v21;
  sub_1000BC7D4(v23);
  sub_1000BC7D4(v26);
  return v11;
}

void _s3akd28SignInWithAppleDaemonServiceC26configureExportedInterfaceyySo14NSXPCInterfaceCF_0(void *a1)
{
  uint64_t v2 = sub_100100C54();
  uint64_t inited = swift_initStackObject(v2, v23);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100162E60;
  *(void *)(inited + 32) = sub_1000D0510( 0LL,  (unint64_t *)&unk_10020F120,  &OBJC_CLASS___AKSignInWithAppleRequestContext_ptr);
  uint64_t v4 = sub_1000D0510(0LL, &qword_10020E1C8, &OBJC_CLASS___NSError_ptr);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
  uint64_t v5 = sub_1000D0510(0LL, &qword_10020F130, &OBJC_CLASS___NSNull_ptr);
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v5;
  uint64_t v6 = sub_100100C54();
  uint64_t v7 = swift_initStackObject(v6, v22);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001645C0;
  *(void *)(v7 + 32) = sub_1000D0510( 0LL,  (unint64_t *)&qword_10020E6F0,  &OBJC_CLASS___AKSignInWithAppleAccount_ptr);
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v4;
  *(void *)(v7 + 4_Block_object_dispose(&a9, 8) = v5;
  *(void *)(v7 + 56) = sub_1000D0510(0LL, &qword_10020F138, &OBJC_CLASS___AKIconContext_ptr);
  uint64_t v8 = sub_1000FADDC(inited);
  swift_bridgeObjectRelease(inited);
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  id v11 = [v9 initWithArray:isa];

  uint64_t v21 = 0LL;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)( v11,  &v21,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

  uint64_t v12 = v21;
  if (v21)
  {
    uint64_t v13 = sub_1000FADDC(v7);
    swift_setDeallocating(v7);
    id v14 = objc_allocWithZone(&OBJC_CLASS___NSSet);
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    id v16 = [v14 initWithArray:v15];

    uint64_t v21 = 0LL;
    static Set._conditionallyBridgeFromObjectiveC(_:result:)( v16,  &v21,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

    uint64_t v17 = v21;
    if (v21)
    {
      Class v18 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      [a1 setClasses:v18 forSelector:"fetchAccountsWithContext:completion:" argumentIndex:0 ofReply:0];

      Class v19 = Set._bridgeToObjectiveC()().super.isa;
      [a1 setClasses:v19 forSelector:"fetchAccountsWithContext:completion:" argumentIndex:0 ofReply:1];

      Class v20 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v17);
      [a1 setClasses:v20 forSelector:"fetchAppIconForClientID:iconSize:completion:" argumentIndex:0 ofReply:1];

      return;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x800000010016E230LL,  "akd/SignInWithAppleDaemonService.swift",  38LL,  2LL,  49LL,  0);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x800000010016E230LL,  "akd/SignInWithAppleDaemonService.swift",  38LL,  2LL,  45LL,  0);
  }

  __break(1u);
}

uint64_t sub_10010153C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a2;
  return swift_task_switch(sub_100101554, 0LL, 0LL);
}

uint64_t sub_100101554()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching EULA", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v6 = [(id)objc_opt_self(AKMediaServicesController) sharedInstance];
  id v7 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  uint64_t v8 = (objc_class *)type metadata accessor for AccountsMetadataController();
  id v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v6;
  *(void *)&v9[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v7;
  *(void *)&v9[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0LL;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v0 + 24) = v8;
  *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  uint64_t v10 = (void *)swift_task_alloc(dword_10020EB84);
  *(void *)(v0 + 56) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001016E8;
  return sub_1000ECF84(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001016E8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 56);
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = sub_100101798;
  }

  else
  {
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1;
    uint64_t v8 = sub_100101760;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100101760()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 72));
}

uint64_t sub_100101798()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001017CC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1001017F4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)(v4 + 4_Block_object_dispose(&a9, 8) = a3;
  *(double *)(v4 + 56) = a4;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a2;
  return swift_task_switch(sub_100101810, 0LL, 0LL);
}

uint64_t sub_100101810()
{
  id v1 = [(id)objc_opt_self(AKMediaServicesController) sharedInstance];
  id v2 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  uint64_t v3 = (objc_class *)type metadata accessor for AccountsMetadataController();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v1;
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v2;
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0LL;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v0 + 24) = v3;
  *(void *)(v0 + 64) = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  uint64_t v5 = (void *)swift_task_alloc(dword_10020EB8C);
  *(void *)(v0 + 72) = v5;
  void *v5 = v0;
  v5[1] = sub_1001018FC;
  return sub_1000ED6F0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_1001018FC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 72);
  *(void *)(*v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1001019AC;
  }

  else
  {
    *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = a1;
    uint64_t v6 = sub_100101970;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100101970()
{
  uint64_t v1 = *(void *)(v0 + 88);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1001019AC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001019E0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1001019F8, 0LL, 0LL);
}

uint64_t sub_1001019F8()
{
  if (qword_10020CF90 != -1) {
    swift_once(&qword_10020CF90, sub_1000E54FC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FF0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Canceling app icon fetch request", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0 + 16;

  id v7 = [(id)objc_opt_self(AKMediaServicesController) sharedInstance];
  id v8 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  id v9 = (objc_class *)type metadata accessor for AccountsMetadataController();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v7;
  *(void *)&v10[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v8;
  *(void *)&v10[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0LL;
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v10;
  *(void *)(v0 + 12_Block_object_dispose(&a9, 8) = v9;
  id v11 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 120), "init");
  *(void *)(v0 + 152) = v11;
  uint64_t v12 = *(void **)&v11[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController];
  NSString v13 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v13;
  *(void *)(v0 + 56) = v0 + 176;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100101C08;
  uint64_t v14 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = _NSConcreteStackBlock;
  Class v15 = (void *)(v0 + 80);
  v15[1] = 0x40000000LL;
  v15[2] = sub_1000ECCB4;
  v15[3] = &unk_1001CD2B8;
  void v15[4] = v14;
  [v12 cancelAppIconRequestForBundleID:v13 completion:v15];
  return swift_continuation_await(v6);
}

uint64_t sub_100101C08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 168LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100101CA0;
  }
  else {
    uint64_t v2 = sub_100101C68;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100101C68()
{
  uint64_t v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101CA0()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100101CE8(uint64_t a1, void *a2)
{
  id v4 = [objc_allocWithZone(AKAppleIDAuthenticationContext) init];
  NSString v5 = [a2 altDSID];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v7 = v6;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }

  [v4 setAltDSID:v5];

  id v8 = [(id)objc_opt_self(KCSharingGroupManager) sharedInstance];
  id v9 = [objc_allocWithZone(AAFKeychainManager) init];
  uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v11 = v9;
  id v12 = v8;
  id v13 = sub_100100E3C(v11, v12, v10);
  uint64_t v14 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v15 = swift_allocObject(v14, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v15 + 24) = v11;
  uint64_t v16 = AKURLBagKeySIWARotateShareTokens;
  id v17 = objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider());
  id v18 = v11;
  id v19 = v12;
  id v20 = [v17 initWithContext:v4 urlBagKey:v16];
  [v20 setAuthenticatedRequest:1];
  [v20 setClient:a1];
  id v21 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v20];
  uint64_t v22 = type metadata accessor for AccountSharingService();
  uint64_t v23 = (uint64_t *)swift_allocObject(v22, 24LL, 7LL);
  void v23[2] = (uint64_t)v21;
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___AKAccountManager);
  id v25 = v21;
  id v26 = [v24 sharedInstance];
  swift_retain(v15);
  id v27 = v13;
  swift_retain(v23);
  uint64_t v28 = sub_1001010A0((uint64_t)v26, v15, (uint64_t)v27, v23);
  swift_release(v23);

  swift_release(v15);
  return v28;
}

uint64_t sub_100101F58(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100101F64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100101F90()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  id v4 = (void *)swift_task_alloc(dword_10020EF2C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10020EF28 + dword_10020EF28))(v2, v3);
}

uint64_t sub_100101FFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100102020(uint64_t a1)
{
  id v4 = *(int **)(v1 + 16);
  NSString v5 = (void *)swift_task_alloc(dword_10020EF5C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000B87BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10020EF58 + dword_10020EF58))(a1, v4);
}

uint64_t sub_100102094()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  id v4 = (void *)swift_task_alloc(dword_10020EF6C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_1000B9420;
  return ((uint64_t (*)(int, void *))((char *)&dword_10020EF68 + dword_10020EF68))(v2, v3);
}

uint64_t sub_100102108(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100102114()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020EF8C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020EF88 + dword_10020EF88))(v2, v3, v4);
}

uint64_t sub_10010218C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020EFAC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020EFA8 + dword_10020EFA8))(v2, v3, v4);
}

uint64_t sub_100102204()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  NSString v5 = (void *)v0[4];
  id v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_10020EFCC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000B87BC;
  return ((uint64_t (*)(void *, uint64_t, void *, void *))((char *)&dword_10020EFC8 + dword_10020EFC8))( v2,  v3,  v5,  v4);
}

uint64_t sub_100102288()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020EFEC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020EFE8 + dword_10020EFE8))(v2, v3, v4);
}

uint64_t sub_100102300()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F00C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020F008 + dword_10020F008))(v2, v3, v4);
}

uint64_t sub_100102378()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F02C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020F028 + dword_10020F028))(v2, v3, v4);
}

uint64_t sub_1001023F0()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10010242C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  NSString v5 = (void *)v0[4];
  id v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_10020F04C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10020F048 + dword_10020F048))( v2,  v3,  v5,  v4);
}

uint64_t sub_1001024B0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F06C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020F068 + dword_10020F068))(v2, v3, v4);
}

uint64_t sub_100102524()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100102558()
{
  uint64_t v2 = *((void *)v0 + 2);
  double v3 = v0[3];
  double v4 = v0[4];
  uint64_t v6 = (void *)*((void *)v0 + 5);
  NSString v5 = (void *)*((void *)v0 + 6);
  uint64_t v7 = (void *)swift_task_alloc(dword_10020F08C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *, double, double))((char *)&dword_10020F088 + dword_10020F088))( v2,  v6,  v5,  v3,  v4);
}

uint64_t sub_1001025E4()
{
  uint64_t v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F0AC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020F0A8 + dword_10020F0A8))(v2, v3, v4);
}

uint64_t sub_10010265C()
{
  uint64_t v2 = v0[2];
  double v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F0CC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10020F0C8 + dword_10020F0C8))(v2, v3, v4);
}

uint64_t sub_1001026D4()
{
  uint64_t v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  double v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc(dword_10020F0EC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000B9420;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10020F0E8 + dword_10020F0E8))(v2, v3, v4);
}

uint64_t sub_100102748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B86DC(&qword_10020ED28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1001027D0(uint64_t a1)
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v3, (uint64_t)qword_100210FD8);
  id v4 = v1;
  NSString v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    id v9 = [v4 storeName];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v12 = v11;

    uint64_t v13 = sub_100103438(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v7 + 12) = 2048;
    uint64_t v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "%s Database Migration requested from version:%llu",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    if (a1 == 1) {
      goto LABEL_9;
    }
  }

  else
  {

    if (a1 == 1) {
      goto LABEL_9;
    }
  }

  if (a1) {
    return;
  }
  sub_1001029D8();
LABEL_9:
  sub_10010310C();
}

void sub_1001029D8()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  id v2 = v0;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    NSString v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = v6;
    *(_DWORD *)NSString v5 = 136315138;
    uint64_t v7 = v2;
    id v8 = [v2 storeName];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    id v2 = v7;
    uint64_t v58 = sub_100103438(v9, v11, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Building %s database with schema version: 1", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Start creating device_list table", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  id v16 = [v2 executor];
  if (v16)
  {
    id v17 = v16;
    NSString v18 = String._bridgeToObjectiveC()();
    [v17 performQuery:v18];
  }

  id v19 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Done creating device_list table", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Start creating deleted_device_list table", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  id v26 = [v2 executor];
  if (v26)
  {
    id v27 = v26;
    NSString v28 = String._bridgeToObjectiveC()();
    [v27 performQuery:v28];
  }

  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    id v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Done creating deleted_device_list table", v31, 2u);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  id v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    id v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Start creating version table", v35, 2u);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  id v36 = [v2 executor];
  if (v36)
  {
    id v37 = v36;
    NSString v38 = String._bridgeToObjectiveC()();
    [v37 performQuery:v38];
  }

  os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Done creating version table", v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  os_log_type_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Initializing version table", v45, 2u);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  uint64_t v59 = 0LL;
  unint64_t v60 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  v46._object = (void *)0x800000010016F950LL;
  v46._countAndFlagsBits = 0xD000000000000034LL;
  String.append(_:)(v46);
  uint64_t v58 = 1LL;
  v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v47._object;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(object);
  v49._countAndFlagsBits = 3877159LL;
  v49._object = (void *)0xE300000000000000LL;
  String.append(_:)(v49);
  unint64_t v50 = v60;
  id v51 = [v2 executor];
  if (v51)
  {
    uint64_t v52 = v51;
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    [v52 performInsertQuery:v53];
  }

  else
  {
    uint64_t v54 = swift_bridgeObjectRelease(v50);
  }

  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    unint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Done initializing version table", v57, 2u);
    swift_slowDealloc(v57, -1LL, -1LL);
  }
}

void sub_10010310C()
{
  if (qword_10020CF88 != -1) {
    swift_once(&qword_10020CF88, sub_1000E54E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_1000B8C38(v1, (uint64_t)qword_100210FD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    NSString v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)NSString v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start creating deleted_device_list table if not exists", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v6 = [v0 executor];
  if (v6)
  {
    uint64_t v7 = v6;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 performQuery:v8];
  }

  oslog = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Done creating deleted_device_list table", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }
}

id sub_100103374()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceListStoreMigrator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListStoreMigrator()
{
  return objc_opt_self(&OBJC_CLASS___AKDeviceListStoreMigrator);
}

uint64_t sub_1001033C8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = sub_100103438(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_100103438(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100103508(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000B8E74((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000B8E74((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1000BC7D4(v12);
  return v7;
}

uint64_t sub_100103508(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_1001036C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100103754(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10010392C(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10010392C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100103754(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      NSString v5 = sub_1001038C8(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1001038C8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000B86DC(&qword_10020F188);
  NSString v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10010392C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000B86DC(&qword_10020F188);
    unint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

void *sub_100103A78(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL,  2,  487LL,  0);
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_100103B0C(mach_port_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  int v15 = 1;
  uint64_t v16 = a2;
  int v17 = 16777472;
  int v18 = a3;
  NDR_record_t v19 = NDR_record;
  int v20 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  v14.msgh_remote_port = a1;
  v14.msgh_local_port = reply_port;
  v14.msgh_bits = -2147478253;
  *(void *)&v14.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&v14);
    mach_port_t reply_port = v14.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&v14, 3, 0x38u, 0x40u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v14.msgh_local_port);
    return v10;
  }

  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(v14.msgh_local_port);
    return v10;
  }

  if (v14.msgh_id == 71)
  {
    uint64_t v12 = 4294966988LL;
  }

  else if (v14.msgh_id == 1300)
  {
    if ((v14.msgh_bits & 0x80000000) != 0)
    {
      uint64_t v12 = 4294966996LL;
      if (v15 == 1 && v14.msgh_size == 56 && !v14.msgh_remote_port && HIBYTE(v17) == 1)
      {
        int v13 = v18;
        if (v18 == v20)
        {
          *a4 = v16;
          *a5 = v13;
          return 0LL;
        }
      }
    }

    else if (v14.msgh_size == 36)
    {
      uint64_t v12 = 4294966996LL;
      if (HIDWORD(v16))
      {
        if (v14.msgh_remote_port) {
          uint64_t v12 = 4294966996LL;
        }
        else {
          uint64_t v12 = HIDWORD(v16);
        }
      }
    }

    else
    {
      uint64_t v12 = 4294966996LL;
    }
  }

  else
  {
    uint64_t v12 = 4294966995LL;
  }

  mach_msg_destroy(&v14);
  return v12;
}

uint64_t sub_100103CF4(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a1 + 8) <= 6 && ((0x7Du >> (a1 + 8)) & 1) != 0) {
    __asm { BR              X8 }
  }

  return 4294922295LL;
}

void sub_100104204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v20 = *(void **)(v19 - 136);
  (*(void (**)(void))(v19 - 184))(*v20);
  void *v20 = a13;
  *a14 = a19;
  JUMPOUT(0x10010424CLL);
}

uint64_t sub_1001042F0()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((51 * (((v1 == 0) ^ (v0 - 25)) & 1)) ^ v0)) - 12LL))();
}

uint64_t sub_100104338()
{
  int v3 = v0 & 0x3B14F77B;
  unsigned int v4 = *(_DWORD *)(v1 + 12) - 437755;
  unsigned int v5 = *(_DWORD *)(v1 + 8) - 1168668869 + 35 * ((v3 - 581074497) & 0x22A27DDD ^ 0x131);
  BOOL v6 = v4 < 0xFFF95201;
  BOOL v7 = v4 > v5;
  if (v6 != v5 < 0xFFF95201) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((725 * v7) ^ v3)) - 12LL))();
}

uint64_t sub_1001043D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  id v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8LL * ((54 * (((v22 == 0) ^ (v25 + ((v21 + 109) | 7) - 1)) & 1)) ^ v21));
  *(void *)(v26 - 152) = v24;
  return v27(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

uint64_t sub_10010442C()
{
  unsigned int v5 = v1 - 1264275502;
  BOOL v6 = (v1 - 1264275502) < 0xFA4674F9;
  unsigned int v7 = (((5 * (v0 ^ (v4 + 40))) ^ 0xCFF3ABE4) & (2 * (2 * v1 + 1958507946))) + ((2 * v1 + 1958507946) ^ 0x67F9D57F);
  if (v6 != v7 - 1840472198 < 0xFA4674F9) {
    BOOL v8 = v7 - 1840472198 < 0xFA4674F9;
  }
  else {
    BOOL v8 = v7 - 1840472198 > v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((53 * v8) ^ (v3 + v0 + 116))) - 8LL))();
}

uint64_t sub_1001044DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  int v28 = (v23 - 23) | 0x420;
  uint64_t v29 = *(void *)(v24 - 0x7E68C352E3647217LL);
  unsigned int v30 = (a9 ^ 0x9FB77FEF) + 1615362802 + ((2 * a9) & 0x3F6EFFDE);
  *(_BYTE *)(v29 + v30 + 1311) = -123;
  *(_BYTE *)(v29 + v30 + 1312) = -2;
  *(_BYTE *)(v29 + v30 + v2_Block_object_dispose(&a9, 8) = 99;
  *(_BYTE *)(v29 + v30 + 1314) = -80;
  *v22 += 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 + 8LL * ((((v28 + 443) ^ (v26 + 446)) + v27 + v28 - 1313) ^ v28)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_1001046AC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 | (v1 == 0)))
                            - ((v0 - 1475) | 2u)
                            - ((v0 - 1085851773) & 0x40B8C3F7)
                            + 878LL))();
}

uint64_t sub_1001046F4()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) - 1642909503;
  unsigned int v4 = ((v0 - 494) ^ 0x58716B92 ^ ((v0 - 567) | 0x49)) + *(_DWORD *)(v1 + 8);
  BOOL v5 = v3 < 0x9E1330BD;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x9E1330BD) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1239 * v6) ^ v0)) - 12LL))();
}

uint64_t sub_100104774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  LODWORD(a24) = v24;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 8LL * ((556 * (((v26 == 0) ^ (v25 - 22)) & 1)) ^ v25)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  v27);
}

uint64_t sub_1001047B8()
{
  unsigned int v3 = v0 - 1838730449;
  BOOL v4 = (v0 - 1838730449) < 0xD808F856;
  unsigned int v5 = ((2 * (2 * v0 + 1958507946)) & 0xAB77CB74) + ((2 * v0 + 1958507946) ^ 0x55BBE5BB);
  if (v4 != v5 - 2108878181 < ((v1 - 1290690224) & 0x4CEE5DFDu) - 670500883) {
    BOOL v6 = v5 - 2108878181 < ((v1 - 1290690224) & 0x4CEE5DFDu) - 670500883;
  }
  else {
    BOOL v6 = v5 - 2108878181 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((1671 * v6) ^ (v1 + 489))))();
}

uint64_t sub_100104874( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v20 = (*(uint64_t (**)(void))(v19 - 144))(v16 + (v17 ^ 0x60) - 1438377412);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v18 + 8LL * ((21 * (((v20 == 0) ^ (v17 - 78)) & 1)) ^ v17)) - 8LL))( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  0LL);
}

void sub_1001048D4()
{
  *(void *)(v1 - 16_Block_object_dispose(&a9, 8) = v0;
  JUMPOUT(0x100104938LL);
}

uint64_t sub_100104944( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, _DWORD *a25)
{
  uint64_t v27 = *(void *)(v26 - 168);
  uint64_t v28 = (*(uint64_t (**)(void))(v26 - 184))(*(void *)(v27 - 0x7E68C352E3647217LL));
  *(void *)(v27 - 0x7E68C352E3647217LL) = a17;
  *a25 = a24;
  *(void *)(v26 - 152) = v25;
  return sub_10010499C(v28);
}

uint64_t sub_10010499C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  int v32 = v28 + 178;
  uint64_t v33 = *(void *)(v29 - 0x7E68C352E3647217LL);
  unsigned int v34 = ((2 * a9) & 0xF3FEFBDE) + (a9 ^ 0x79FF7DEF);
  *(_BYTE *)(v33 + v34 + (v32 ^ 0x8600830A)) = 0;
  v34 -= 2046787054;
  *(_BYTE *)(v33 + v34) = 0;
  *(_BYTE *)(v33 + v34 + 1) = 0;
  *(_BYTE *)(v33 + v34 + 2) = 1;
  *v26 += 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 8LL * (int)((((v32 + 708763203) & 0xD5C121F9) - 116) ^ v32)) - (v32 ^ (v31 + 261) ^ v27)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
}

uint64_t sub_100104A54()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((((v0 + 387) ^ 0x41) * (v1 != 0)) ^ v0)) - 12LL))();
}

uint64_t sub_100104A8C()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + 1189778007;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 21548324;
  BOOL v5 = v3 < (v0 ^ 0x46EA9094u);
  BOOL v6 = v3 > v4;
  if (v5 != v4 < ((v0 - 459) | 0x48u) + 1189777655) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1685 * v6) ^ v0)) - 4LL))();
}

uint64_t sub_100104B14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  HIDWORD(a24) = v26;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 + 8LL * (v27 ^ (822 * (v28 != 0)))) - ((v27 + 969) ^ (v27 - 2078692058) & 0x7BE653BDu ^ 0x711LL)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
}

uint64_t sub_100104B6C()
{
  unsigned int v3 = v0 - 1788623653;
  BOOL v4 = (v0 - 1788623653) < 0xDB0589FE;
  unsigned int v5 = (((2 * v0 + 1958507946) << (v1 - 59)) & 0xEB6FFEF4) + ((2 * v0 + 1958507946) ^ 0xF5B7FF7B);
  if (v4 != v5 - 447903101 < 0xDB0589FE) {
    BOOL v6 = v5 - 447903101 < 0xDB0589FE;
  }
  else {
    BOOL v6 = v5 - 447903101 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((1691 * v6) ^ v1)))();
}

uint64_t sub_100104C0C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  uint64_t v34 = v30;
  uint64_t v35 = *(void *)(v33 - 160);
  int v36 = v29 + 969;
  uint64_t v37 = v35 - ((v35 << (v36 ^ 0x20u)) & 0x3C26F14D02574F54LL) + 0x1E1378A6812BA7AALL;
  NSString v38 = (_BYTE *)(*(void *)(v34 - 0x7E68C352E3647217LL)
                + ((2LL * a9) & 0x1F7FBEEBELL)
                + (a9 ^ 0x478DBFF7FBFDF75FLL)
                - 0x478DBFF7FBFDF75FLL);
  *NSString v38 = HIBYTE(v37) ^ 0x1E;
  v38[1] = BYTE6(v37) ^ 0x13;
  _OWORD v38[2] = BYTE5(v37) ^ 0x78;
  _OWORD v38[3] = BYTE4(v37) ^ 0xA6;
  void v38[4] = ((v35 - (((_DWORD)v35 << (v36 ^ 0x20)) & 0x2574F54) - 2127845462) >> 24) ^ 0x81;
  v38[5] = ((v35 - (((_DWORD)v35 << (v36 ^ 0x20)) & 0x2574F54) - 2127845462) >> 16) ^ 0x2B;
  v38[6] = ((unsigned __int16)(v35 - (((_WORD)v35 << (v36 ^ 0x20)) & 0x4F54) - 22614) >> 8) ^ 0xA7;
  v38[7] = (v35 - (((_BYTE)v35 << (v36 ^ 0x20)) & 0x54) - 86) ^ 0xAA;
  *v27 += 8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 - (v32 + ((v36 + 1904485778) & 0x8E7BD7EE) - 674) + *(void *)(v31 + 8LL * (v36 ^ 0x47)) - 4))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27);
}

uint64_t sub_100104E88()
{
  *(void *)(v3 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  return (*(uint64_t (**)(void))(v1 + 8LL * (((v2 - 207) * (v0 != 0)) ^ v2)))();
}

uint64_t sub_100104EC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  uint64_t v33 = (*(uint64_t (**)(void))(v28 + 8LL * (v30 ^ 0x2BD)))();
  (*(void (**)(uint64_t, uint64_t, void, void))(v28 + 8LL * (v30 - 647)))( v33,  *(void *)(v28 + 8LL * (v30 ^ 0x2BF)) - 4LL,  **(void **)(v32 - 136),  *(unsigned int *)(*(void *)(v32 - 136) + 12LL));
  uint64_t v34 = (*(uint64_t (**)(void, void))(v28 + 8LL * (v30 - 659)))(*(void *)(v32 - 176), 0LL);
  *(void *)(v32 - 20_Block_object_dispose(&a9, 8) = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8LL * ((30 * (((v30 ^ (v31 - 98)) ^ (v34 == 0)) & 1)) ^ v30)))( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28);
}

uint64_t sub_100104F64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  uint64_t v33 = (*(uint64_t (**)(void, uint64_t, void))(v29 + 8LL * (v31 - 651)))(*(void *)(v32 - 176), a1, 0LL);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8LL * (int)((((((v31 - 392) ^ (v33 == 0)) & 1) == 0) * (((v31 + 807546725) | 0xC0C10408) + 253545970)) | v31));
  *(void *)(v32 - 20_Block_object_dispose(&a9, 8) = a1;
  return v34( v33,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29);
}

uint64_t sub_100104FF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8LL * (v36 - 270));
  *(void *)(v39 - 16_Block_object_dispose(&a9, 8) = v41;
  v41(a1, a36);
  uint64_t v42 = *(uint64_t (**)(void))(v37 + 8LL * (v36 - 252));
  *(void *)(v39 - 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v42;
  uint64_t v43 = v42();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8LL * (((v43 == *(void *)(v37 + 8LL * (v36 - 250)) - 12LL) * (v36 + 1278)) ^ v36)) - ((v36 + 1205) ^ 0x5CBLL)))( v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_10010509C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int *a30)
{
  return ((uint64_t (*)(void))(*(void *)(v31
                                        + 8LL
                                        * (int)(((a30 == (&off_1001D1180)[(v30 + 93) & 0x809DBC84] - 2)
                                               * ((((v30 - 213657567) & 0xCBC27DE) - 253545338) ^ (v30 + 93) ^ 0xF0E33778)) ^ (v30 + 93)))
                            - 4LL))();
}

uint64_t sub_100105124( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v40 = (*(uint64_t (**)(void))(v39 - 200))();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 + 8LL * (int)(((v40 == v36) * ((((v38 - 218) | 0x110) ^ 0xFFFFFE47) + v38 + 1205)) ^ v38)) - 4LL))( v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_100105178( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return ((uint64_t (*)(void))(*(void *)(v32 + 8LL * ((39 * (a30 != v30)) ^ v31)) - 4LL))();
}

uint64_t sub_1001051C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  unsigned int v40 = 2 * (v36 ^ 0xF0E33682);
  (*(void (**)(uint64_t, uint64_t))(v39 - 168))(a26, a36);
  uint64_t v41 = (*(uint64_t (**)(void))(v39 - 200))();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8LL * (int)(((v41 == v37) * (((v40 ^ 0x4D5) - 1112) ^ 0x145)) ^ v40)) - 4LL))( v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_100105224( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return ((uint64_t (*)(void))(*(void *)(v31
}

uint64_t sub_100105290( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v40 = (*(uint64_t (**)(void))(v39 - 200))();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8LL * ((1344 * (v40 == v37)) ^ v36)) - ((v36 + 66925797) & 0xFC02CFCF ^ ((v36 + 810) | 0x18B) ^ 4LL)))( v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_1001052F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return ((uint64_t (*)(void))(*(void *)(v31 + 8LL * (v32 ^ (904 * (a30 == v30)))) - (((v32 - 1485) | 0x118u) ^ 0x116LL)))();
}

uint64_t sub_100105354( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v41 = (*(uint64_t (**)(void))(v40 - 200))();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 - ((v37 + 1356935400) | 0xA002040D) + *(void *)(v39 + 8LL * (((v41 == v38) * ((v37 ^ 0x4D5) - 1378)) ^ v37))))( v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_1001053C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(&off_1001D1180)[v32 - 370])(a30, v31, v33 - 120);
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 8LL * ((21 * (v34 != 0)) ^ v32))
                                                                                              - (((v32 - 1063256007) | 0x30433007u)
                                                                                               + (((v32 - 963) | 0x401u) ^ 0xFFFFFFFF0F1CCFF0LL)));
  *(void *)(v33 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x79483BA612D83A8ELL;
  return v35(v34, v36, v37, v38, v39, v40, v41);
}

uint64_t sub_100105470()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(v2 - 144))(24LL);
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1
                                                                                               + 8LL
                                                                                               * (((v3 != 0)
                                                                                                 * ((537 * (v0 ^ 0x60E)) ^ 0x676)) ^ v0));
  *(void *)(v2 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x79483BA612D83A8ELL;
  return v4(v3, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001054F4(uint64_t a1)
{
  *(void *)(v3 - 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = a1 + 0x79483BA612D83A8ELL;
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 349861347;
  *(_DWORD *)(a1 + 12) = 2131113073;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v3 - 144))(4096LL);
  *(void *)a1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((39 * (v5 == 0)) ^ v1))
                            - (257 * (v1 ^ 0x64Fu)
}

uint64_t sub_100105578()
{
  uint64_t v6 = (uint64_t (*)(void))(*(void *)(v2 + 8LL * ((138 * (((v3 == 0) ^ (v1 + 24)) & 1)) ^ v1))
                         + v0
                         - (v4 + v1 - 375));
  *(void *)(v5 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x79483BA612D83A8ELL;
  return v6();
}

uint64_t sub_1001055D8@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  unsigned int v33 = a1 & 0xF6E3FF7F;
  (*(void (**)(uint64_t))(v32 - 184))(v31);
  *(void *)(v32 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x79483BA612D83A8ELL;
  uint64_t v34 = (&off_1001D1180)[v33 + 253544953];
  ((void (*)(uint64_t))v34)(a30);
  ((void (*)(uint64_t))v34)(a19);
  return ((uint64_t (*)(void))(*(void *)(v30 + 8LL * (int)((47 * (a29 != 0)) ^ (v33 + 253545269))) - 4LL))();
}

uint64_t sub_100105B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v35 = v30();
  uint64_t v36 = *(uint64_t (**)(uint64_t))(v32 + 8LL * ((v31 + 640) ^ (1085 * (a30 != 0))));
  *(void *)(v34 - 20_Block_object_dispose(&a9, 8) = v33;
  return v36(v35);
}

uint64_t sub_100105B8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v37 = v30(a30);
  uint64_t v38 = *(void *)(v36 - 136);
  *(void *)(v36 - 20_Block_object_dispose(&a9, 8) = v34;
  if (v32 == -45004)
  {
    *(void *)(v36 - 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v33;
    *(void *)(v36 - 12_Block_object_dispose(&a9, 8) = 0LL;
    *(_DWORD *)(v36 - 112) = 0;
    uint64_t v39 = ((uint64_t (*)(void, void, void, uint64_t, uint64_t))*(&off_1001D1180 + v35 + 253544950))( **(&off_1001D1180 + v35 + 253544945),  *(void *)v38,  *(unsigned int *)(v38 + 12),  v36 - 128,  v36 - 112);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 + 8LL * ((1521 * ((v39 ^ 0x55D7BC4F) - 88152072 + ((2 * (_DWORD)v39) & 0xABAF789E) == 1620485194)) ^ (v35 + 253545143))) - (v35 + 253545228) + 271LL))( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27);
  }

  else if (v32)
  {
    return ((uint64_t (*)(uint64_t))(*(void *)(v31 + 8LL * ((17 * (v38 == 0)) ^ 0x5AF)) - 12LL))(v37);
  }

  else
  {
    return ((uint64_t (*)(uint64_t))(*(void *)(v31
                                                        + 8LL
                                                        * ((698
  }

uint64_t sub_1001061D0()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (v2 ^ 0x757 ^ (110 * (v3 != 0))))
                            - (v0
                             + (v2 ^ 0x757u)
                             - 1582)
                            - (v0
                             + (v2 ^ 0x757u)
                             - 1582)
                            + 0x1E1C66C12LL))();
}

uint64_t sub_100106218()
{
  uint64_t v6 = ((uint64_t (*)(void, void, void))*(&off_1001D1180 + v4 + v0 - 6))( **(&off_1001D1180 + v4 + v0 + 3),  *(void *)(v5 - 128),  *(unsigned int *)(v5 - 112));
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * ((448 * (v2 != 0)) ^ (v4 + v0 + 185))) - 4LL);
  *(void *)(v5 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x79483BA612D83A8ELL;
  return v7(v6);
}

uint64_t sub_100106238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, _DWORD *a31, int a32, int a33)
{
  uint64_t v38 = (*(uint64_t (**)(void))(v37 - 184))(*(void *)(v34 - 0x79483BA612D83A8ELL));
  *(void *)(v34 - 0x79483BA612D83A8ELL) = a23;
  *a31 = a33;
  *(void *)(v37 - 152) = v35;
  return ((uint64_t (*)(uint64_t))(*(void *)(v33
                                                      + 8LL
                                                      * (int)(((((v36 ^ (v36 + 364)) - 343) ^ 0xFFFFFF6F)
                                                             + (v36 ^ (v36 + 364))
                                                             - 217) ^ v36 ^ (v36 + 364)))
                                          - 8LL))(v38);
}

void sub_1001062C4()
{
  *(void *)(v1 - 192) = v0;
  JUMPOUT(0x100106334LL);
}

uint64_t sub_100106344@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((a2 > a1) * (35 * v3 - 490)) ^ v2)) - 12LL))();
}

uint64_t sub_100106380()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v1 - v4 - 561) ^ (v5 + 267)) * (v0 != v2)) ^ v1))
                            - 5 * (v1 ^ 0x22Eu)
                            + 613LL))();
}

uint64_t sub_1001063BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v7 = (unint64_t)(a1 - a2) < 0x20 || v2 < 8;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
}

uint64_t sub_100106400()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((526
}

uint64_t sub_100106454@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
}

void sub_1001064A4()
{
}

uint64_t sub_1001064B4()
{
}

uint64_t sub_1001064FC()
{
}

uint64_t sub_100106530()
{
}

uint64_t sub_100106574()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_1001065D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = ((151 * (v3 ^ (v6 - 7))) ^ 0xFFFFFBDE) + v2;
  __int128 v8 = *(_OWORD *)(a2 + v7 - 15);
  __int128 v9 = *(_OWORD *)(a2 + v7 - 31);
  uint64_t v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = v8;
  *(_OWORD *)(v10 - 31) = v9;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((747 * ((v2 & 0xFFFFFFE0) == 32LL)) ^ (v5 + v3 + 1241))) - 8LL))();
}

void sub_100106640()
{
}

uint64_t sub_100106648()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (v2 | (v1 == v0))))();
}

uint64_t sub_10010665C()
{
  return ((uint64_t (*)(void))(v2
                            + *(void *)(v3 + 8LL
                                             * (int)((v1 + 181907749) & 0xF5284AF3 ^ (1690 * ((v0 & 0x18) != 0LL))))
                            - (((v1 + 181907749) & 0xF5284AF3 ^ 0x7DA)
                             - v4
                             - 1417)
                            - 8))();
}

uint64_t sub_1001066AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v3) = *(void *)(a2 + v3);
}

void sub_1001066F8()
{
}

uint64_t sub_100106700()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v2 ^ (v5 - 435)) + v4) * (v1 != v0)) ^ v2)) - 12LL))();
}

uint64_t sub_100106728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a1 + v3) = *(_BYTE *)(a2 + v3);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((60 * (v3 + 1 == v2)) ^ (v6 + v4 + 1019))) - 8LL))();
}

uint64_t sub_10010675C()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((176 * (((v1 == v0) ^ v2) & 1)) ^ v2)) - 8LL))();
}

uint64_t sub_100106784()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((v0 & 0x18) == ((v1 - 539 - v4 - 484) ^ (unint64_t)(v2 + 4)))
                                          * (((v1 - 1023) | 0x2C8) ^ 0x5E8)) ^ (v1 - 539)))
                            - 12LL))();
}

uint64_t sub_1001067D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 - 7 + (~(_DWORD)v3 + v2)) = *(void *)(a2 - 7 + (~(_DWORD)v3 + v2));
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v3 - (v2 & 0xFFFFFFF8) == -8) * ((v4 ^ 0xB9) - 94)) ^ v4)) - 4LL))();
}

uint64_t sub_100106828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v5 + a2) = *(void *)(v3 + a2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (((a3 == 0) * v6) ^ v4)) - 4LL))( a1,  a2 - 8,  a3 + 8);
}

uint64_t sub_100106858()
{
}

uint64_t sub_10010689C()
{
  uint64_t v3 = *(void *)(v2 - 192);
  *(_DWORD *)(v3 - 0x79483BA612D83A86LL) = (*(_DWORD *)(v2 - 112) ^ 0x76DF7DE3)
                                         - 1644496896
                                         + ((2 * *(_DWORD *)(v2 - 112)) & 0xEDBEFBC6);
  *(_DWORD *)(v3 - 0x79483BA612D83A82LL) = 2131113073;
  uint64_t v4 = ((uint64_t (*)(void, void, void))*(&off_1001D1180 + v1 - 253544951))( **(&off_1001D1180 + v1 - 253544942),  *(void *)(v2 - 128),  *(unsigned int *)(v2 - 112));
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 8LL * (v1 - 253544760)) - 4LL);
  *(void *)(v2 - 2swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return v5(v4);
}

uint64_t sub_10010690C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v6 = v2 - 1;
  *(_BYTE *)(a1 + v6) = *(_BYTE *)(a2 + v6);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((1991 * (v6 != 0LL)) ^ (v5 + v3 + 561))) - 12LL))();
}

uint64_t sub_100106940()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (int)(((v3 + ((v0 - 201361580) & 0xFCE3BE1F) + 18)
                                               * (v1 == 0x79483BA612D83A8ELL)) ^ v0))
                            - ((v0 - 201361580) ^ 0xF3FF77E7LL)))();
}

uint64_t sub_1001069A0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

void sub_1001069F8()
{
  int v3 = *(void (**)(void))(v2 - 184);
  v3();
  void *v1 = 0LL;
  *(_DWORD *)(v0 - 0x79483BA612D83A86LL) = 349861347;
  *(_DWORD *)(v0 - 0x79483BA612D83A82LL) = 2131113073;
  ((void (*)(void *))v3)(v1);
  JUMPOUT(0x100106A54LL);
}

uint64_t sub_100106B1C()
{
  uint64_t v4 = *(void *)(v3 - 216);
  int v5 = *(_DWORD *)(v4 - 0x79483BA612D83A86LL);
  LODWORD(v4) = *(_DWORD *)(v4 - 0x79483BA612D83A82LL) - 1624582410;
  BOOL v6 = v4 < 0x1E310B63;
  BOOL v7 = v4 > v5 + 156669312;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((115 * (((v0 ^ (v2 + 31)) ^ v7) & 1)) ^ v0)) - 8LL))();
}

uint64_t sub_100106BC0@<X0>(int a1@<W8>)
{
  int v5 = (void *)(*(void *)(v4 - 216) - 0x79483BA612D83A8ELL);
  int v6 = (*(unsigned __int8 *)(*v5 + (a1 - 2131113073)) << 24) | (*(unsigned __int8 *)(*v5
                                                                                                 + (a1 - 2131113072)) << 16) | (*(unsigned __int8 *)(*v5 + (a1 - 2131113071)) << 8);
  int v7 = *(unsigned __int8 *)(*v5 + (a1 - 2131113070));
  _DWORD *v1 = a1 + 4;
  if (!(v6 | v7)) {
    return ((uint64_t (*)(void))(*(void *)(v2
  }
                                          + 8LL
                                          * ((424
  if ((v6 | v7) == 0xFFFF4FFB) {
    return ((uint64_t (*)(void))(*(void *)(v2
  }
                                          + 8LL
                                          * (((((*(void *)(&off_1001D1180)[v3 ^ (v3 + 7)] == 0LL) ^ ((v3 ^ (v3 + 90)) + 1)) & 1)
                                            * (v3 + 253545289)) ^ (v3 + 253546583)))
                              - 12LL))();
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1001
                                          * ((((*(void *)(v4 - 216) == 0x79483BA612D83A8ELL) ^ 0xD63F553C) & 1) == 0)) ^ 0x11B))
                            - 4LL))();
}

uint64_t sub_100106FFC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((994 * (((*v1 == 0LL) ^ (v3 + (a1 & 0xDF) - 28)) & 1)) ^ a1 & 0x29C0AFDFu)))();
}

void sub_100107038()
{
  uint64_t v4 = *(void (**)(void))(v3 - 184);
  v4();
  *int v0 = 0LL;
  _DWORD *v2 = 349861347;
  _DWORD *v1 = 2131113073;
  ((void (*)(void *))v4)(v0);
  JUMPOUT(0x10010706CLL);
}

uint64_t sub_1001070B4@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((*v1 != 0LL) * ((v3 + a1 - 1629) ^ (v3 + 125))) ^ a1)) - 12LL))();
}

void sub_1001070E4()
{
  uint64_t v2 = *(void **)(v1 - 136);
  void *v2 = 0LL;
  v2[1] = 1168229675LL;
  ((void (*)(void *))v0)(v2);
  JUMPOUT(0x100103E80LL);
}

uint64_t sub_100107108()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

void sub_100107138()
{
  unint64_t v0 = (qword_10020F1A0 + qword_10020F1C0) ^ (unint64_t)&v2;
  qword_10020F1C0 = 142025987 * v0 + 0x60A26FE5DEEB276BLL;
  qword_10020F1A0 = 142025987 * (v0 ^ 0x9F5D901A2114D895LL);
  uint64_t v1 = (char *)*(&off_1001CD2F0
               + ((485
                 * (((uint64_t (*)(uint64_t))*(&off_1001D1180
                                                      + ((3
                                                                         * ((qword_10020F1A0 - qword_10020F1C0) ^ 0x95)) ^ byte_100164FD0[byte_100164CA0[(3 * ((qword_10020F1A0 - qword_10020F1C0) ^ 0x95))] ^ 0x89])
                                                      - 98))(24LL) != 0)) ^ 0x4E7u))
     - 12;
  __asm { BR              X8 }

uint64_t sub_100107248(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 650052673LL;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)(v3 - 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  uint64_t v5 = v1(4096LL);
  *(void *)a1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((4 * (v5 == 0)) | (8 * (v5 == 0)) | 0x392u)) - 4LL))();
}

uint64_t sub_100107298()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((324 * (v0 != 0)) ^ 0x4E7)) - 12LL))();
}

uint64_t sub_100107308()
{
  return v2;
}

void sub_10010AADC(unint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 > 0xFFFFFFFFFFFFFFEFLL && a2 != 0;
  __asm { BR              X8 }

uint64_t sub_10010AB48(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  BOOL v5 = (*(uint64_t (**)(uint64_t))(v4 + 168))(24LL) != 0;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((81 * v5) ^ v2)) - 4LL))();
}

uint64_t sub_10010AB84(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 499716454LL;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v4 = v2(4096LL);
  *(void *)a1 = v4;
  return (*(uint64_t (**)(void))(v1 + 8LL * ((3 * (v4 == 0)) ^ 0x6A5)))();
}

uint64_t sub_10010ABEC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (485 * (v0 == 0))))
                            - ((v1 - 1096859086) & 0xFDFFFFED)
                            + 3164554501LL))();
}

uint64_t sub_10010AC34()
{
  return v2;
}

void sub_10010DD68()
{
  uint64_t v0 = qword_10020F1A0 - qword_10020F198 - (void)&v2;
  qword_10020F198 = 142025987 * v0 + 0x60A26FE5DEEB276BLL;
  qword_10020F1A0 = 142025987 * (v0 ^ 0x9F5D901A2114D895LL);
  uint64_t v1 = (char *)*(&off_1001CD2F0
               + ((1233
                 * (((uint64_t (*)(uint64_t))(&off_1001D1180)[((3
                                                                                        * (qword_10020F198 ^ 0x95 ^ qword_10020F1A0)) ^ byte_100164890[byte_1001650F0[(3 * (qword_10020F198 ^ 0x95 ^ qword_10020F1A0))] ^ 0x9C])
                                                                     - 50])(24LL) != 0)) ^ 0x2CDu))
     - 12;
  __asm { BR              X8 }

uint64_t sub_10010DE68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 1102267496LL;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v31 = v28(4096LL);
  *(void *)a1 = v31;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8LL * ((182 * (v31 == 0)) ^ 0x55Du)))( v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28);
}

uint64_t sub_10010DED8()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (((((v0 == 0) ^ (v1 - v2)) & 1)
                                          * ((v3 + v1 - 717) ^ (v3 - 276))) ^ v1))
                            - 12LL))();
}

uint64_t sub_10010DF14()
{
  return v2;
}

int *sub_1001114D0(int *result)
{
  int v1 = 998368041;
  unsigned int v2 = result[2] ^ (2052531167
                  * (((result | 0x5A1B0962) - (_DWORD)result + (result & 0xA5E4F69D)) ^ 0x9F91BE4E));
  if (v2 - 1341909376 > 0x3B
    || ((1LL << ((*((_BYTE *)result + 8) ^ (-33
                                                           * (((result | 0x62)
                                                             - (_BYTE)result
                                                             + (result & 0x9D)) ^ 0x4E)))
               + 0x80)) & 0xF8C2F00FC610FC3LL) == 0)
  {
    unsigned int v4 = v2 - 1341912672;
    BOOL v5 = v4 > 0xD;
    int v6 = (1 << v4) & 0x20F3;
    if (v5 || v6 == 0) {
      int v1 = 998368040;
    }
  }

  void *result = v1;
  return result;
}

void sub_100111580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4) {
    BOOL v7 = a5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  int v10 = v7 || a6 == 0 || a7 == 0;
  __asm { BR              X8 }

uint64_t sub_10011162C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, _DWORD *a24, void *a25)
{
  *a4 = 0LL;
  *a24 = 0;
  *a25 = 0LL;
  *a7 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8LL * ((133 * (**(void **)(v26 + 200) != 0LL)) | 0x430u)))( **(void **)(v26 + 200),  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12);
}

uint64_t sub_100111688()
{
  *(void *)(v3 + _Block_object_dispose(&a9, 8) = 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((98 * (*(void *)(v3 + 24) == 0LL)) ^ (v0 - 745677406))) - 8LL))();
}

uint64_t sub_1001116C4()
{
  *(_DWORD *)(v3 + 36) = 0;
  *(void *)uint64_t v3 = 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1621 * (*(void *)(v3 + 48) != 0LL)) ^ (v1 + v0 - 1020))) - 4LL))();
}

uint64_t sub_1001116F8()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((868 * (*(void *)(v3 + 64) != 0LL)) ^ (v1 + v0 - 699))) - 4LL))();
}

uint64_t sub_100111724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v14 = v10 + v9;
  *(_DWORD *)(v13 + 76) = 0;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0LL;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(v12 + 8LL * (v14 - 1729)))(24LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * ((386 * (((v14 - 1) ^ (v15 == 0)) & 1)) ^ (v14 - 1219))) - 4LL))( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  a9);
}

uint64_t sub_100111828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 1208856636LL;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v19 = v17(4096LL);
  *(void *)a1 = v19;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8LL * (((v19 == 0) * ((79 * (((v15 - 1622) | 0x430) ^ 0x4BD)) ^ 0x401)) | (v15 - 1622) | 0x430)))( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  a9,  a10,  a11,  a12,  a13,  a14,  a15);
}

uint64_t sub_100111888()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

uint64_t sub_1001118CC()
{
  return v1;
}

void sub_10011561C()
{
  unint64_t v0 = (unint64_t)&v2[qword_10020F1A0 - qword_10020F190];
  qword_10020F190 = (142025987 * v0) ^ 0x9F5D901A2114D895LL;
  qword_10020F1A0 = 142025987 * (v0 ^ 0x9F5D901A2114D895LL);
  uint64_t v1 = (uint64_t)*(&off_1001CD2F0
                + ((285
                  * (((uint64_t (*)(uint64_t))*(&off_1001D1180
                                                       + ((3
  __asm { BR              X8 }

uint64_t sub_100115718(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 1543509817LL;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)(v3 - 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = v1;
  uint64_t v5 = v1(4096LL);
  *(void *)a1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((4 * (v5 != 0)) | (32 * (v5 != 0)) | 0x400u)) - 12LL))();
}

uint64_t sub_10011576C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v9 - 184) = v4;
  *(void *)(v9 - 152) = v5 + 0x5CD1B4246DA47A0FLL;
  *(_DWORD *)(v5 + _Block_object_dispose(&a9, 8) = v6 + 4096;
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8LL * ((10 * (v5 == 0)) ^ 0x4B6u));
  *(void *)(v9 - 176) = *(void *)(v7 + 208) - 4LL;
  return v10(a1, a2, a3, a4, 2279997039LL);
}

uint64_t sub_100115808()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + 1718780259;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 175270438;
  BOOL v5 = v3 < 0x6672815F;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < v0 + 1718779840) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((52 * !v7) ^ v0)) - 97 * (v0 ^ 0x19D) + 186LL))();
}

void sub_100115894(int a1@<W4>, int a2@<W8>)
{
  uint64_t v8 = *v3;
  unsigned int v9 = ((2 * a2) & 0xF357FFDE) + (a2 ^ 0x79ABFFEF) - 2041315880;
  *(_BYTE *)(*v3 + v9 + (v4 ^ 0x2FB)) = 0;
  *(_BYTE *)(v8 + v9 + 57_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010016D830LL,  "akd/DeviceListBaseProvider.swift",  32LL,  2LL,  24LL, 0) = 0;
  *(_BYTE *)(v8 + v9 + 571) = 0;
  *(_BYTE *)(v8 + v9 + 572) = 1;
  *v2 += 4;
  *(void *)(v7 - 16_Block_object_dispose(&a9, 8) = v5;
  __asm { BR              X8 }

uint64_t sub_100115BE0()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((((v1 == 0) ^ (v0 - 31)) & 1) * (v0 ^ 0x734)) ^ v0)))();
}

uint64_t sub_100115C28()
{
  int v3 = v0 ^ 0x6B1;
  unsigned int v4 = *(_DWORD *)(v1 + 12) - 660788086;
  unsigned int v5 = *(_DWORD *)(v1 + 8) + 2090669389;
  BOOL v6 = v4 < 0xD89D2C86;
  BOOL v7 = v4 > v5;
  if (v6 != v5 < 0xD89D2C86) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (int)((v7 * (((v3 + 1875697041) & 0x903327DD) - 1702)) ^ v3)) - 8LL))();
}

uint64_t sub_100115CB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8LL * (((((v21 == 0) ^ (v20 - 45)) & 1) * (((v20 - 1772) | 0x209) ^ 0x2A9)) ^ v20));
  *(void *)(v24 - 16_Block_object_dispose(&a9, 8) = v22;
  return v25(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_100115D00()
{
  int v3 = (v1 & 0x490DAA5F) - 27;
  unsigned int v4 = v0 - 710944396;
  BOOL v5 = v0 - 710944396 < (v3 + 832564853);
  unsigned int v6 = ((2 * (2 * v0 + 1207947662)) & 0xFDF6FE70) + ((2 * v0 + 1207947662) ^ 0x7EFB7F39);
  if (v5 != v6 - 1297845904 < ((v3 + 618) ^ 0x319FF437u)) {
    BOOL v7 = v6 - 1297845904 < ((v3 + 618) ^ 0x319FF437u);
  }
  else {
    BOOL v7 = v6 - 1297845904 > v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((123 * !v7) ^ v3)) - 4LL))();
}