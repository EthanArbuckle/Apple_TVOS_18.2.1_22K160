void sub_100004ECC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100004F08(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"storeBagAsset"]);
  v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"signature"]);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue([v6 assetContent]);
    (*(void (**)(uint64_t, void *, void *, id))(v8 + 16))(v8, v9, v7, v10);
  }
}

Class sub_100004FEC(uint64_t a1)
{
  Class result = objc_getClass("CKOperationConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100073D38();
  }
  qword_1000989A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_100005040()
{
  v2 = 0LL;
  if (!qword_1000989A8)
  {
    __int128 v3 = off_10008D7C0;
    uint64_t v4 = 0LL;
    qword_1000989A8 = _sl_dlopen(&v3, &v2);
  }

  uint64_t v0 = qword_1000989A8;
  if (!qword_1000989A8) {
    sub_100073DB0(&v2);
  }
  if (v2) {
    free(v2);
  }
  return v0;
}

Class sub_1000050E8(uint64_t a1)
{
  Class result = objc_getClass("CKContainer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100073E2C();
  }
  qword_1000989B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_10000513C(uint64_t a1)
{
  Class result = objc_getClass("CKRecordZoneID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100073EA4();
  }
  qword_1000989B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_100005190(uint64_t a1)
{
  Class result = objc_getClass("CKRecordID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100073F1C();
  }
  qword_1000989C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_1000051E4(uint64_t a1)
{
  Class result = objc_getClass("CKFetchRecordsOperation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100073F94();
  }
  qword_1000989D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_100005238(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for CocoaError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10003D118();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = v8;
    v17 = (uint8_t *)v16;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v26;
    v25 = a2;
    *(_DWORD *)v17 = 136446210;
    v24 = v17 + 4;
    uint64_t v18 = sub_10000C5E8( &qword_1000961B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v19 = Error.localizedDescription.getter(v4, v18);
    unint64_t v21 = v20;
    uint64_t v28 = sub_100009984(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v24, v17 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v25, v17, 0xCu);
    uint64_t v22 = v26;
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v27);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_100005488(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10003D118();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_errorRetain(a1);
  uint64_t v7 = swift_errorRetain(a1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    v17 = v10 + 4;
    swift_getErrorValue(a1, v20, v19);
    uint64_t v12 = Error.localizedDescription.getter(v19[1], v19[2]);
    unint64_t v14 = v13;
    uint64_t v18 = sub_100009984(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v17, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "unable to access transparency log (UNKNOWN): %{public}s",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100005670()
{
  return 1LL;
}

void sub_10000567C()
{
}

unint64_t sub_1000056A4()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000056DC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EC70);
  sub_100009FC4(v0, (uint64_t)qword_10009EC70);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x726170736E617274LL,  0xEC00000079636E65LL);
}

uint64_t sub_100005758@<X0>(uint64_t a1@<X8>)
{
  uint64_t v162 = a1;
  uint64_t v2 = sub_100009FDC(&qword_1000972A0);
  __chkstk_darwin(v2);
  v158 = (char *)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  v161 = (char *)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v159 = type metadata accessor for Date(0LL);
  uint64_t v157 = *(void *)(v159 - 8);
  uint64_t v5 = __chkstk_darwin(v159);
  v154 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  v166 = (char *)&v152 - v7;
  uint64_t v8 = sub_100009FDC(&qword_100096350);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v164 = (uint64_t)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  v167 = (char *)&v152 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v171 = (char *)&v152 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v152 - v15;
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  v163 = (char *)&v152 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v152 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  v175 = (char *)&v152 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v168 = (char *)&v152 - v30;
  __chkstk_darwin(v29);
  v32 = (char *)&v152 - v31;
  id v169 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v33 = [v169 defaultManager];
  uint64_t v34 = v1 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_rootLogsURL;
  swift_beginAccess(v34, &v188._reserved, 0LL, 0LL);
  v179 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v179(v32, v34, v17);
  URL._bridgeToObjectiveC()(v35);
  v37 = v36;
  v180 = (uint8_t *)v18;
  v176 = *(void (**)(char *, uint64_t))(v18 + 8);
  v176(v32, v17);
  type metadata accessor for URLResourceKey();
  uint64_t v160 = v38;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v186 = 0LL;
  id v40 = [v33 contentsOfDirectoryAtURL:v37 includingPropertiesForKeys:isa options:0 error:&v186];

  v41 = v186;
  if (!v40)
  {
    v61 = v41;
    _convertNSErrorToError(_:)(v41);

    return swift_willThrow();
  }

  uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v17);

  v188._clients = _swiftEmptyArrayStorage;
  unint64_t v43 = *(void *)(v42 + 16);
  uint64_t v170 = v17;
  v153 = v21;
  v177 = v26;
  v174.n128_u64[0] = v43;
  if (v43)
  {
    unint64_t v44 = 0LL;
    v172 = (void *)0x8000000100079F10LL;
    v45 = v180;
    v46 = v168;
    v173 = (char *)v42;
    while (v44 < *(void *)(v42 + 16))
    {
      unint64_t v47 = (v45[80] + 32LL) & ~(unint64_t)v45[80];
      uint64_t v48 = *((void *)v45 + 9);
      v179(v16, v42 + v47 + v48 * v44, v17);
      v178 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v45 + 7);
      v178(v16, 0LL, 1LL, v17);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v45 + 6))(v16, 1LL, v17) == 1)
      {
        unint64_t v44 = (unint64_t)v178;
        uint64_t v26 = v177;
        goto LABEL_18;
      }

      v49 = (uint64_t (*)(char *, char *, uint64_t))*((void *)v45 + 4);
      v50 = v16;
      uint64_t v51 = v49(v46, v16, v17);
      v52 = v46;
      uint64_t v53 = URL.lastPathComponent.getter(v51);
      uint64_t v55 = v54;
      char v56 = sub_100006848(0xD00000000000001ALL, v172, v53, v54);
      swift_bridgeObjectRelease(v55);
      if ((v56 & 1) != 0)
      {
        v49(v175, v52, v17);
        clients = v188._clients;
        if ((swift_isUniquelyReferenced_nonNull_native(v188._clients) & 1) == 0)
        {
          sub_10000BCE0(0, clients[2] + 1LL, 1);
          clients = v188._clients;
        }

        uint64_t v16 = v50;
        unint64_t v59 = clients[2];
        unint64_t v58 = clients[3];
        if (v59 >= v58 >> 1)
        {
          sub_10000BCE0(v58 > 1, v59 + 1, 1);
          clients = v188._clients;
        }

        clients[2] = v59 + 1;
        v60 = (char *)clients + v47 + v59 * v48;
        uint64_t v17 = v170;
        v49(v60, v175, v170);
        v188._clients = clients;
        v46 = v168;
      }

      else
      {
        v176(v52, v17);
        v46 = v52;
        uint64_t v16 = v50;
      }

      ++v44;
      v45 = v180;
      uint64_t v26 = v177;
      uint64_t v42 = (uint64_t)v173;
      if (v174.n128_u64[0] == v44) {
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_58;
  }

  v178 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v180 + 7);
LABEL_16:
  unint64_t v44 = (unint64_t)v178;
  v178(v16, 1LL, 1LL, v17);
LABEL_18:
  swift_bridgeObjectRelease(v42);
  sub_10000C234((uint64_t)v16, &qword_100096350);
  v186 = (char *)v188._clients;
  uint64_t v63 = v165;
  sub_1000069A0((unint64_t *)&v186);
  uint64_t v64 = v63;
  v65 = v186;
  v172 = (void *)sub_100006A24(1LL, (uint64_t)v186);
  v175 = v67;
  int64_t v69 = v68 >> 1;
  v178 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v44;
  v70 = v171;
  if (v66 != v68 >> 1)
  {
    uint64_t v77 = v66;
    __n128 v78 = swift_bridgeObjectRetain(v65);
    v78.n128_u64[0] = 136446210LL;
    __n128 v174 = v78;
    v173 = (char *)&type metadata for Any + 8;
    v71 = v180;
    while (v77 < v69)
    {
      v179(v70, (uint64_t)&v175[*((void *)v71 + 9) * v77], v17);
      ((void (*)(char *, void, uint64_t, uint64_t))v44)(v70, 0LL, 1LL, v17);
      uint64_t v80 = v69;
      (*((void (**)(char *, char *, uint64_t))v71 + 4))(v26, v70, v17);
      id v81 = [v169 defaultManager];
      URL._bridgeToObjectiveC()(v82);
      v84 = v83;
      v188._clients = 0LL;
      uint64_t v85 = v17;
      unsigned int v86 = [v81 removeItemAtURL:v83 error:&v188._clients];

      v87 = v188._clients;
      if (v86)
      {
        id v79 = v188._clients;
        v176(v26, v85);
        uint64_t v17 = v85;
        v71 = v180;
        v70 = v171;
        int64_t v69 = v80;
      }

      else
      {
        v88 = v188._clients;
        uint64_t v89 = _convertNSErrorToError(_:)(v87);

        swift_willThrow();
        if (qword_1000989E0 != -1) {
          swift_once(&qword_1000989E0, sub_1000056DC);
        }
        uint64_t v64 = 0LL;
        uint64_t v90 = type metadata accessor for Logger(0LL);
        sub_100009FC4(v90, (uint64_t)qword_10009EC70);
        swift_errorRetain(v89);
        uint64_t v91 = swift_errorRetain(v89);
        v92 = (os_log_s *)Logger.logObject.getter(v91);
        os_log_type_t v93 = static os_log_type_t.error.getter();
        int64_t v69 = v80;
        if (os_log_type_enabled(v92, v93))
        {
          uint64_t v94 = swift_slowAlloc(12LL, -1LL);
          v95 = (void *)swift_slowAlloc(32LL, -1LL);
          v188._clients = v95;
          *(_DWORD *)uint64_t v94 = v174.n128_u32[0];
          swift_getErrorValue(v89, v182, v181);
          uint64_t v96 = Error.localizedDescription.getter(v181[1], v181[2]);
          unint64_t v98 = v97;
          *(void *)(v94 + 4) = sub_100009984(v96, v97, (uint64_t *)&v188._clients);
          swift_bridgeObjectRelease(v98);
          swift_errorRelease(v89);
          swift_errorRelease(v89);
          _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "failed to erase old log: %{public}s",  (uint8_t *)v94,  0xCu);
          swift_arrayDestroy(v95, 1LL, v173);
          swift_slowDealloc(v95, -1LL, -1LL);
          swift_slowDealloc(v94, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease(v89);
          swift_errorRelease(v89);
        }

        swift_errorRelease(v89);
        uint64_t v26 = v177;
        uint64_t v17 = v170;
        v176(v177, v170);
        unint64_t v44 = (unint64_t)v178;
        v71 = v180;
        v70 = v171;
      }

      if (v69 == ++v77) {
        goto LABEL_20;
      }
    }

LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  swift_bridgeObjectRetain(v65);
  v71 = v180;
LABEL_20:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v44)(v70, 1LL, 1LL, v17);
LABEL_21:
  swift_unknownObjectRelease(v172);
  v72 = v186;
  uint64_t v73 = *((void *)v186 + 2);
  uint64_t v74 = (uint64_t)v167;
  v75 = v166;
  if (v73)
  {
    v179(v167, (uint64_t)&v186[((v71[80] + 32LL) & ~(unint64_t)v71[80]) + *((void *)v71 + 9) * (v73 - 1)], v17);
    uint64_t v76 = 0LL;
  }

  else
  {
    uint64_t v76 = 1LL;
  }

  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v74, v76, 1LL, v17);
  swift_bridgeObjectRelease(v72);
  uint64_t v99 = v164;
  sub_10000A5FC(v74, v164);
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v71 + 6))(v99, 1LL, v17) == 1)
  {
    v100 = &qword_100096350;
    uint64_t v101 = v99;
LABEL_38:
    sub_10000C234(v101, v100);
    return sub_10000A644(v74, v162);
  }

  v102 = v163;
  (*((void (**)(char *, uint64_t, uint64_t))v71 + 4))(v163, v99, v17);
  uint64_t v103 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v103, v187);
  *(_OWORD *)(inited + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLCreationDateKey;
  v105 = NSURLCreationDateKey;
  v106 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, v160);
  v107 = v161;
  URL.resourceValues(forKeys:)(v106);
  if (v64)
  {
    swift_bridgeObjectRelease(v106);
    v176(v102, v17);
    return sub_10000C234((uint64_t)v167, &qword_100096350);
  }

  uint64_t v108 = swift_bridgeObjectRelease(v106);
  v109 = v158;
  URLResourceValues.creationDate.getter(v108);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v107, v156);
  uint64_t v110 = v157;
  uint64_t v111 = v159;
  int v112 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48))(v109, 1LL, v159);
  uint64_t v74 = (uint64_t)v167;
  if (v112 == 1)
  {
    v176(v163, v17);
    v100 = &qword_1000972A0;
    uint64_t v101 = (uint64_t)v109;
    goto LABEL_38;
  }

  uint64_t v113 = (*(uint64_t (**)(char *, char *, uint64_t))(v110 + 32))(v75, v109, v111);
  v114 = v75;
  v115 = v154;
  static Date.now.getter(v113);
  uint64_t v116 = v110;
  double v117 = Date.distance(to:)(v115);
  uint64_t v118 = v111;
  v119 = *(uint8_t **)(v116 + 8);
  ((void (*)(char *, uint64_t))v119)(v115, v118);
  if (v117 <= 604800.0)
  {
    ((void (*)(char *, uint64_t))v119)(v114, v118);
    v176(v163, v17);
    return sub_10000A644(v74, v162);
  }

  v180 = v119;
  if (qword_1000989E0 != -1) {
LABEL_59:
  }
    swift_once(&qword_1000989E0, sub_1000056DC);
  uint64_t v120 = type metadata accessor for Logger(0LL);
  uint64_t v121 = sub_100009FC4(v120, (uint64_t)qword_10009EC70);
  v122 = v153;
  uint64_t v123 = ((uint64_t (*)(char *, char *, uint64_t))v179)(v153, v163, v17);
  v124 = (os_log_s *)Logger.logObject.getter(v123);
  os_log_type_t v125 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v124, v125))
  {
    v126 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v127 = (void *)swift_slowAlloc(32LL, -1LL);
    v179 = (void (*)(char *, uint64_t, uint64_t))v121;
    v128 = v127;
    v188._clients = v127;
    *(_DWORD *)v126 = 136446210;
    uint64_t v129 = URL.lastPathComponent.getter(v127);
    unint64_t v131 = v130;
    uint64_t v183 = sub_100009984(v129, v130, (uint64_t *)&v188._clients);
    unint64_t v44 = (unint64_t)v178;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v126 + 4, v126 + 12);
    swift_bridgeObjectRelease(v131);
    v176(v122, v170);
    _os_log_impl((void *)&_mh_execute_header, v124, v125, "aging out log file: %{public}s", v126, 0xCu);
    swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v128, -1LL, -1LL);
    swift_slowDealloc(v126, -1LL, -1LL);
  }

  else
  {
    v176(v122, v17);
  }

  v132 = v180;
  id v133 = [v169 defaultManager];
  v134 = v163;
  URL._bridgeToObjectiveC()(&v188);
  v136 = v135;
  v188._clients = 0LL;
  unsigned int v137 = [v133 removeItemAtURL:v135 error:&v188._clients];

  v138 = v188._clients;
  if (v137)
  {
    id v139 = v188._clients;
    ((void (*)(char *, uint64_t))v132)(v166, v159);
    v140 = v134;
  }

  else
  {
    v141 = v188._clients;
    uint64_t v142 = _convertNSErrorToError(_:)(v138);

    swift_willThrow();
    swift_errorRetain(v142);
    uint64_t v143 = swift_errorRetain(v142);
    v144 = (os_log_s *)Logger.logObject.getter(v143);
    os_log_type_t v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v144, v145))
    {
      v146 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v147 = (void *)swift_slowAlloc(32LL, -1LL);
      v188._clients = v147;
      *(_DWORD *)v146 = 136446210;
      v180 = v146 + 4;
      swift_getErrorValue(v142, v185, v184);
      uint64_t v148 = Error.localizedDescription.getter(v184[1], v184[2]);
      unint64_t v150 = v149;
      uint64_t v183 = sub_100009984(v148, v149, (uint64_t *)&v188._clients);
      unint64_t v44 = (unint64_t)v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v180, v146 + 12);
      swift_bridgeObjectRelease(v150);
      swift_errorRelease(v142);
      swift_errorRelease(v142);
      _os_log_impl((void *)&_mh_execute_header, v144, v145, "failed to erase old log: %{public}s", v146, 0xCu);
      swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v147, -1LL, -1LL);
      swift_slowDealloc(v146, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(v142);
      swift_errorRelease(v142);
    }

    swift_errorRelease(v142);
    ((void (*)(char *, uint64_t))v132)(v166, v159);
    v140 = v163;
  }

  uint64_t v151 = v170;
  v176(v140, v170);
  sub_10000C234((uint64_t)v167, &qword_100096350);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v162, 1LL, 1LL, v151);
}

uint64_t sub_100006848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      Swift::String_optional v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1LL;
      }

      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }

      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          uint64_t v12 = a2;
LABEL_14:
          swift_bridgeObjectRelease(v12);
          return 0LL;
        }
      }

      Swift::String_optional v9 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }

    while (v9.value._object);
  }

  swift_bridgeObjectRelease(a4);
  uint64_t v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (v11)
  {
    uint64_t v12 = v11;
    goto LABEL_14;
  }

  return 1LL;
}

Swift::Int sub_1000069A0(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v3 = sub_10000BEDC(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_10000A68C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100006A24(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for URL(0LL);
    return a2;
  }

  return result;
}

uint64_t sub_100006AA4(uint64_t a1)
{
  uint64_t v3 = v1;
  v2[2] = a1;
  uint64_t v5 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v2[3] = v5;
  swift_defaultActor_initialize(v5);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_writeInternalEvents) = 2;
  *(void *)(v5 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_fileDeletionSource) = 0LL;
  id v6 = [(id)objc_opt_self(NSFileHandle) fileHandleWithNullDevice];
  *(void *)(v5 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile) = v6;
  uint64_t v7 = v5 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_rootLogsURL;
  uint64_t v8 = type metadata accessor for URL(0LL);
  v2[4] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[5] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  return swift_task_switch(sub_100006B84, v5, 0LL);
}

uint64_t sub_100006B84()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  sub_100006C10();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

void sub_100006C10()
{
  uint64_t v1 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v102 - v6;
  uint64_t v8 = type metadata accessor for CocoaError(0LL);
  uint64_t v111 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  v106 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v108 = (char *)&v102 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v107 = (char *)&v102 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v110 = (uint64_t *)((char *)&v102 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  v109 = (char *)&v102 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v102 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v102 - v22;
  sub_1000076B8();
  if (v0)
  {
    uint64_t v115 = v0;
    swift_errorRetain(v0);
    uint64_t v24 = sub_100009FDC(&qword_100098870);
    if (swift_dynamicCast(v23, &v115, v24, v8, 0LL))
    {
      uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
      v103(v21, v23, v8);
      uint64_t v102 = sub_10000C5E8( &qword_1000961C8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
      uint64_t v25 = _BridgedStoredNSError.code.getter(v8);
      static CocoaError.fileWriteNoPermission.getter(v25);
      uint64_t v26 = sub_10000C5E8( &qword_1000961D0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      v104 = v23;
      uint64_t v105 = v8;
      uint64_t v27 = v26;
      dispatch thunk of RawRepresentable.rawValue.getter(&v113, v1, v26);
      dispatch thunk of RawRepresentable.rawValue.getter(&v112, v1, v27);
      uint64_t v28 = v112;
      uint64_t v29 = v113;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v2 + 8);
      v30(v5, v1);
      v30(v7, v1);
      if (v29 == v28)
      {
        uint64_t v31 = (uint64_t (*)(char *, char *, uint64_t))v103;
        uint64_t v32 = v105;
        swift_errorRelease(v0);
        if (qword_1000989E0 != -1) {
          swift_once(&qword_1000989E0, sub_1000056DC);
        }
        uint64_t v33 = type metadata accessor for Logger(0LL);
        sub_100009FC4(v33, (uint64_t)qword_10009EC70);
        uint64_t v34 = v109;
        uint64_t v35 = v32;
        uint64_t v36 = v31(v109, v21, v32);
        v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v40 = swift_slowAlloc(8LL, -1LL);
          uint64_t v110 = (void *)v40;
          *(_DWORD *)v39 = 138412290;
          uint64_t v41 = CocoaError._nsError.getter(v40);
          uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(v41);
          uint64_t v113 = v42;
          uint64_t v35 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v39 + 4, v39 + 12);
          unint64_t v44 = v110;
          uint64_t v43 = v111;
          *uint64_t v110 = v42;
          v45 = *(void (**)(char *, uint64_t))(v43 + 8);
          v45(v34, v35);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "transparency log - no write permission. %@", v39, 0xCu);
          uint64_t v46 = sub_100009FDC(&qword_1000961C0);
          swift_arrayDestroy(v44, 1LL, v46);
          swift_slowDealloc(v44, -1LL, -1LL);
          swift_slowDealloc(v39, -1LL, -1LL);
        }

        else
        {
          v45 = *(void (**)(char *, uint64_t))(v111 + 8);
          v45(v34, v35);
        }

        uint64_t v66 = v104;

        uint64_t v67 = sub_100005238((uint64_t)v21, "unable to access transparency log (PERM): %{public}s");
        uint64_t v68 = CocoaError._nsError.getter(v67);
        swift_willThrow(v68);
        v45(v21, v35);
        v45(v66, v35);
LABEL_31:
        swift_errorRelease(v115);
        return;
      }

      uint64_t v47 = v105;
      v109 = *(char **)(v111 + 8);
      ((void (*)(char *, uint64_t))v109)(v21, v105);
      uint64_t v48 = (uint64_t)v110;
      v103((char *)v110, v104, v47);
      uint64_t v49 = _BridgedStoredNSError.code.getter(v47);
      static CocoaError.fileWriteOutOfSpace.getter(v49);
      dispatch thunk of RawRepresentable.rawValue.getter(&v113, v1, v27);
      dispatch thunk of RawRepresentable.rawValue.getter(&v112, v1, v27);
      uint64_t v51 = v112;
      uint64_t v50 = v113;
      v30(v5, v1);
      v30(v7, v1);
      if (v50 == v51)
      {
        uint64_t v53 = v104;
        uint64_t v52 = v105;
        swift_errorRelease(v0);
        if (qword_1000989E0 != -1) {
          swift_once(&qword_1000989E0, sub_1000056DC);
        }
        uint64_t v54 = type metadata accessor for Logger(0LL);
        sub_100009FC4(v54, (uint64_t)qword_10009EC70);
        uint64_t v55 = v107;
        uint64_t v56 = ((uint64_t (*)(char *, uint64_t, uint64_t))v103)(v107, v48, v52);
        v57 = (os_log_s *)Logger.logObject.getter(v56);
        os_log_type_t v58 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v57, v58))
        {
          unint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v60 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)unint64_t v59 = 138412290;
          uint64_t v61 = CocoaError._nsError.getter(v60);
          uint64_t v62 = _swift_stdlib_bridgeErrorToNSError(v61);
          uint64_t v113 = v62;
          uint64_t v63 = (void (*)(char *, uint64_t))v109;
          uint64_t v48 = (uint64_t)v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v59 + 4, v59 + 12);
          uint64_t *v60 = v62;
          uint64_t v64 = v60;
          uint64_t v53 = v104;
          v63(v107, v52);
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "transparency log - no space. %@", v59, 0xCu);
          uint64_t v65 = sub_100009FDC(&qword_1000961C0);
          swift_arrayDestroy(v64, 1LL, v65);
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v59, -1LL, -1LL);
        }

        else
        {
          uint64_t v63 = (void (*)(char *, uint64_t))v109;
          ((void (*)(char *, uint64_t))v109)(v55, v52);
        }

        uint64_t v89 = sub_100005238(v48, "unable to write transparency log (OOS): %{public}s");
        uint64_t v90 = CocoaError._nsError.getter(v89);
        swift_willThrow(v90);
        v63((char *)v48, v52);
        v63(v53, v52);
        goto LABEL_31;
      }

      uint64_t v69 = v105;
      ((void (*)(uint64_t, uint64_t))v109)(v48, v105);
      v70 = v108;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v108, v104, v69);
      uint64_t v71 = _BridgedStoredNSError.code.getter(v69);
      static CocoaError.fileWriteUnknown.getter(v71);
      dispatch thunk of RawRepresentable.rawValue.getter(&v113, v1, v27);
      dispatch thunk of RawRepresentable.rawValue.getter(&v112, v1, v27);
      uint64_t v73 = v112;
      uint64_t v72 = v113;
      v30(v5, v1);
      v30(v7, v1);
      if (v72 == v73)
      {
        uint64_t v74 = v105;
        swift_errorRelease(v0);
        if (qword_1000989E0 != -1) {
          swift_once(&qword_1000989E0, sub_1000056DC);
        }
        uint64_t v75 = type metadata accessor for Logger(0LL);
        sub_100009FC4(v75, (uint64_t)qword_10009EC70);
        uint64_t v76 = v106;
        uint64_t v77 = (uint64_t)v108;
        uint64_t v78 = ((uint64_t (*)(char *, char *, uint64_t))v103)(v106, v108, v74);
        id v79 = (os_log_s *)Logger.logObject.getter(v78);
        os_log_type_t v80 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v80))
        {
          id v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v82 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)id v81 = 138412290;
          uint64_t v83 = ((uint64_t (*)(void))CocoaError._nsError.getter)();
          uint64_t v84 = _swift_stdlib_bridgeErrorToNSError(v83);
          uint64_t v113 = v84;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v81 + 4, v81 + 12);
          uint64_t v85 = v82;
          uint64_t *v82 = v84;
          unsigned int v86 = (void (*)(uint64_t, uint64_t))v109;
          ((void (*)(char *, uint64_t))v109)(v76, v74);
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "transparency log - unknown write error. %@", v81, 0xCu);
          uint64_t v87 = sub_100009FDC(&qword_1000961C0);
          swift_arrayDestroy(v85, 1LL, v87);
          swift_slowDealloc(v85, -1LL, -1LL);
          v88 = v81;
          uint64_t v77 = (uint64_t)v108;
          swift_slowDealloc(v88, -1LL, -1LL);
        }

        else
        {
          unsigned int v86 = (void (*)(uint64_t, uint64_t))v109;
          ((void (*)(char *, uint64_t))v109)(v76, v74);
        }

        uint64_t v100 = sub_100005238(v77, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s");
        uint64_t v101 = CocoaError._nsError.getter(v100);
        swift_willThrow(v101);
        v86(v77, v74);
        goto LABEL_31;
      }

      ((void (*)(char *, uint64_t))v109)(v70, v105);
    }

    swift_errorRelease(v115);
    if (qword_1000989E0 != -1) {
      swift_once(&qword_1000989E0, sub_1000056DC);
    }
    uint64_t v91 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v91, (uint64_t)qword_10009EC70);
    swift_errorRetain(v0);
    uint64_t v92 = swift_errorRetain(v0);
    os_log_type_t v93 = (os_log_s *)Logger.logObject.getter(v92);
    os_log_type_t v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v96 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v95 = 138412290;
      swift_errorRetain(v0);
      uint64_t v97 = _swift_stdlib_bridgeErrorToNSError(v0);
      uint64_t v115 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v95 + 4, v95 + 12);
      *uint64_t v96 = v97;
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "transparency log - unexpected error. %@", v95, 0xCu);
      uint64_t v98 = sub_100009FDC(&qword_1000961C0);
      swift_arrayDestroy(v96, 1LL, v98);
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_slowDealloc(v95, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
    }

    uint64_t v99 = sub_100005488(v0);
    swift_willThrow(v99);
  }

void sub_1000076B8()
{
  uint64_t v139 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  unsigned int v137 = (char *)&v126 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v126 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for OS_dispatch_source.FileSystemEvent(0LL);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  unint64_t v131 = (char *)&v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v142 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100009FDC(&qword_100096350);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v146 = *(void *)(v10 - 8);
  uint64_t v147 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v129 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  v140 = (char *)&v126 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v126 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v143 = (char *)&v126 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v126 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  v128 = (char *)&v126 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v126 - v26;
  __chkstk_darwin(v25);
  v144 = (char *)&v126 - v28;
  uint64_t v149 = v0;
  uint64_t v29 = (void **)(v0 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile);
  swift_beginAccess(v29, v159, 1LL, 0LL);
  v141 = v29;
  uint64_t v30 = *v29;
  uint64_t v31 = (void *)objc_opt_self(&OBJC_CLASS___NSFileHandle);
  id v32 = v30;
  id v33 = [v31 fileHandleWithNullDevice];
  uint64_t v145 = sub_10000A418(0LL, &qword_100096358, &OBJC_CLASS___NSFileHandle_ptr);
  LOBYTE(v29) = static NSObject.== infix(_:_:)(v32, v33);

  if ((v29 & 1) == 0)
  {
    if (qword_1000989E0 != -1) {
      swift_once(&qword_1000989E0, sub_1000056DC);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_100009FC4(v34, (uint64_t)qword_10009EC70);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "witnessed log vanish - refeshing", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }
  }

  uint64_t v39 = v149;
  uint64_t v40 = (uint64_t *)(v149 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_fileDeletionSource);
  swift_beginAccess(v149 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_fileDeletionSource, v158, 1LL, 0LL);
  uint64_t v41 = *v40;
  if (*v40)
  {
    swift_getObjectType(*v40);
    swift_unknownObjectRetain(v41);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v41);
    uint64_t v42 = *v40;
    *uint64_t v40 = 0LL;
    swift_unknownObjectRelease(v42);
  }

  unint64_t v130 = v40;
  uint64_t v43 = v148;
  sub_100005758((uint64_t)v9);
  if (!v43)
  {
    v127 = v22;
    uint64_t v148 = 0LL;
    uint64_t v45 = v146;
    uint64_t v44 = v147;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v9, 1LL, v147) == 1)
    {
      sub_10000C234((uint64_t)v9, &qword_100096350);
      id v46 = [objc_allocWithZone(NSDateFormatter) init];
      NSString v47 = String._bridgeToObjectiveC()();
      [v46 setDateFormat:v47];

      static Date.now.getter(v48);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v142 + 8))(v6, v4);
      id v50 = [v46 stringFromDate:isa];

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v52 = v39;
      uint64_t v54 = v53;

      uint64_t v55 = v52 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_rootLogsURL;
      swift_beginAccess(v55, &v156, 0LL, 0LL);
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
      v56(v17, v55, v44);
      aBlock = 0LL;
      unint64_t v151 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(v151);
      aBlock = (void **)0xD00000000000001ALL;
      unint64_t v151 = 0x8000000100079F10LL;
      v57._uint64_t countAndFlagsBits = v51;
      v57._object = v54;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(v54);
      v58._uint64_t countAndFlagsBits = 1954051118LL;
      v58._object = (void *)0xE400000000000000LL;
      String.append(_:)(v58);
      unint64_t v59 = v151;
      v60 = v143;
      URL.appendingPathComponent(_:)(aBlock, v151);
      swift_bridgeObjectRelease(v59);
      uint64_t v61 = *(void (**)(char *, uint64_t))(v45 + 8);
      v61(v17, v44);
      uint64_t v62 = v148;
      Data.write(to:options:)(v60, 0LL, 0LL, 0xC000000000000000LL);
      if (v62)
      {
        v61(v60, v44);

        return;
      }

      uint64_t v68 = v127;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v127, v60, v44);
      uint64_t v69 = (uint64_t)v140;
      v56(v140, (uint64_t)v68, v44);
      id v70 = sub_10000842C(v69);
      uint64_t v148 = 0LL;
      uint64_t v71 = v141;
      uint64_t v75 = *v141;
      void *v141 = v70;

      if (qword_1000989E0 != -1) {
        swift_once(&qword_1000989E0, sub_1000056DC);
      }
      uint64_t v76 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v76, (uint64_t)qword_10009EC70);
      uint64_t v77 = v129;
      uint64_t v78 = ((uint64_t (*)(char *, char *, uint64_t))v56)(v129, v68, v44);
      id v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v79, v80))
      {
        id v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v82 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v82;
        *(_DWORD *)id v81 = 136446210;
        uint64_t v83 = URL.path.getter();
        unint64_t v85 = v84;
        uint64_t v160 = sub_100009984(v83, v84, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161, v81 + 4, v81 + 12);
        swift_bridgeObjectRelease(v85);
        uint64_t v86 = v147;
        v61(v77, v147);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "created new log file at %{public}s", v81, 0xCu);
        swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        uint64_t v87 = v81;
        uint64_t v71 = v141;
        swift_slowDealloc(v87, -1LL, -1LL);

        v88 = v127;
        uint64_t v89 = v86;
      }

      else
      {

        v61(v77, v44);
        v88 = v68;
        uint64_t v89 = v44;
      }

      v61(v88, v89);
      uint64_t v105 = v133;
      uint64_t v106 = v132;
      uint64_t v96 = v131;
    }

    else
    {
      uint64_t v63 = v144;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v144, v9, v44);
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      v64(v27, v63, v44);
      uint64_t v65 = v148;
      id v66 = sub_10000842C((uint64_t)v27);
      uint64_t v67 = v45;
      if (v65)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v63, v44);
        return;
      }

      uint64_t v71 = v141;
      uint64_t v72 = *v141;
      void *v141 = v66;

      id v73 = *v71;
      NSFileHandle.seekToEnd()();
      uint64_t v148 = v74;
      if (v74)
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v63, v44);

        return;
      }

      if (qword_1000989E0 != -1) {
        swift_once(&qword_1000989E0, sub_1000056DC);
      }
      uint64_t v90 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v90, (uint64_t)qword_10009EC70);
      uint64_t v91 = v128;
      uint64_t v92 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v128, v63, v44);
      os_log_type_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.info.getter();
      BOOL v95 = os_log_type_enabled(v93, v94);
      uint64_t v96 = v131;
      if (v95)
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v98 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v98;
        *(_DWORD *)uint64_t v97 = 136446210;
        uint64_t v99 = URL.path.getter();
        unint64_t v101 = v100;
        uint64_t v156 = sub_100009984(v99, v100, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157, v97 + 4, v97 + 12);
        swift_bridgeObjectRelease(v101);
        uint64_t v102 = v147;
        uint64_t v103 = *(void (**)(char *, uint64_t))(v146 + 8);
        v103(v91, v147);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "opened log file at %{public}s", v97, 0xCu);
        swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1LL, -1LL);
        v104 = v97;
        uint64_t v71 = v141;
        swift_slowDealloc(v104, -1LL, -1LL);

        v103(v144, v102);
      }

      else
      {

        v107 = *(void (**)(char *, uint64_t))(v67 + 8);
        v107(v91, v44);
        v107(v63, v44);
      }

      uint64_t v105 = v133;
      uint64_t v106 = v132;
    }

    sub_10000A418(0LL, &qword_100096360, &OBJC_CLASS___OS_dispatch_source_ptr);
    id v108 = [*v71 fileDescriptor];
    uint64_t v109 = sub_100009FDC(&qword_100096368);
    uint64_t v110 = (void **)swift_allocObject( v109,  ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))
                    + 2LL * *(void *)(v106 + 72),
                      *(unsigned __int8 *)(v106 + 80) | 7LL);
    *((_OWORD *)v110 + 1) = xmmword_100075D20;
    uint64_t v111 = static OS_dispatch_source.FileSystemEvent.rename.getter();
    static OS_dispatch_source.FileSystemEvent.delete.getter(v111);
    aBlock = v110;
    uint64_t v112 = sub_10000C5E8( &qword_100096370,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.FileSystemEvent,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.FileSystemEvent);
    uint64_t v113 = sub_100009FDC(&qword_100096378);
    uint64_t v114 = sub_10000A494(&qword_100096380, &qword_100096378);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v113, v114, v105, v112);
    uint64_t v115 = static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)(v108, v96, 0LL);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v96, v105);
    uint64_t v116 = v130;
    uint64_t v117 = *v130;
    *unint64_t v130 = v115;
    swift_unknownObjectRelease(v117);
    uint64_t v118 = *v116;
    if (*v116)
    {
      uint64_t ObjectType = swift_getObjectType(*v116);
      uint64_t v120 = swift_allocObject(&unk_10008D918, 24LL, 7LL);
      swift_weakInit(v120 + 16, v149);
      v154 = sub_10000A474;
      uint64_t v155 = v120;
      aBlock = _NSConcreteStackBlock;
      unint64_t v151 = 1107296256LL;
      uint64_t v152 = sub_1000087B4;
      v153 = &unk_10008D930;
      uint64_t v121 = _Block_copy(&aBlock);
      swift_retain(v120);
      uint64_t v122 = swift_unknownObjectRetain(v118);
      uint64_t v123 = v134;
      static DispatchQoS.unspecified.getter(v122);
      v124 = v137;
      sub_1000087E0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v123, v124, v121, ObjectType);
      _Block_release(v121);
      swift_unknownObjectRelease(v118);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v124, v139);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v123, v136);
      swift_release(v155);
      swift_release(v120);
      uint64_t v125 = *v116;
      if (*v116)
      {
        swift_getObjectType(*v116);
        swift_unknownObjectRetain(v125);
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease(v125);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

id sub_10000842C(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0LL;
  id v6 = [(id)swift_getObjCClassFromMetadata(v2) fileHandleForWritingToURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  return v6;
}

uint64_t sub_100008540(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v11, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v4, 1LL, 1LL, v7);
    uint64_t v8 = (void *)swift_allocObject(&unk_10008D968, 40LL, 7LL);
    v8[2] = 0LL;
    v8[3] = 0LL;
    v8[4] = v6;
    uint64_t v9 = sub_100008680((uint64_t)v4, (uint64_t)&unk_1000963B0, (uint64_t)v8);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_10000861C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_100008634, a4, 0LL);
}

uint64_t sub_100008634()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100008680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10000C234(a1, &qword_1000963A0);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      uint64_t v15 = 0LL;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9) {
      goto LABEL_6;
    }
  }

  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  uint64_t v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12)) {
    goto LABEL_6;
  }
  v18[0] = 0LL;
  v18[1] = 0LL;
  uint64_t v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1000087B4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000087E0()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000C5E8( &qword_100096388,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_100009FDC(&qword_100096390);
  uint64_t v3 = sub_10000A494(&qword_100096398, &qword_100096390);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10000888C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  v49._uint64_t countAndFlagsBits = a1;
  v49._object = a2;
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = 0LL;
  unint64_t v52 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  uint64_t v12 = swift_bridgeObjectRelease(v52);
  uint64_t v51 = 40LL;
  unint64_t v52 = 0xE100000000000000LL;
  uint64_t v13 = static Date.now.getter(v12);
  uint64_t v14 = Date.description.getter(v13);
  unsigned __int8 v16 = v15;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._uint64_t countAndFlagsBits = 5972009LL;
  v18._object = (void *)0xE300000000000000LL;
  String.append(_:)(v18);
  String.append(_:)(v49);
  v19._object = (void *)0x8000000100079E20LL;
  v19._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v19);
  uint64_t v20 = v51;
  unint64_t v21 = v52;
  ((void (*)(void))static String.Encoding.utf8.getter)();
  uint64_t v22 = String.data(using:allowLossyConversion:)(v7, 0LL, v20, v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  if (v24 >> 60 == 15)
  {
    unint64_t v26 = sub_10000A01C();
    uint64_t v27 = swift_allocError(&type metadata for TransparencyLog.WriteError, v26, 0LL, 0LL);
    return swift_willThrow(v27);
  }

  else
  {
    uint64_t v53 = (void *)v22;
    uint64_t v54 = (void *)v24;
    uint64_t v29 = Data.append(_:)(v47, v48);
    static String.Encoding.utf8.getter(v29);
    uint64_t v30 = String.data(using:allowLossyConversion:)(v7, 0LL, 10LL, 0xE100000000000000LL);
    unint64_t v32 = v31;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v7, v4);
    if (v32 >> 60 == 15)
    {
      __break(1u);
    }

    else
    {
      Data.append(_:)(v30, v32);
      sub_10000A060(v30, v32);
      id v33 = (void **)(v46[0] + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile);
      swift_beginAccess(v46[0] + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile, &v51, 0LL, 0LL);
      uint64_t v34 = *v33;
      uint64_t v36 = (uint64_t)v53;
      unint64_t v35 = (unint64_t)v54;
      v50[0] = v53;
      v50[1] = v54;
      id v37 = v34;
      sub_10000A0B8(v36, v35);
      unint64_t v38 = sub_10000A0FC();
      uint64_t v39 = v46[1];
      NSFileHandle.write<A>(contentsOf:)(v50, &type metadata for Data, v38);
      if (v39)
      {

        sub_10000A074(v36, v35);
      }

      else
      {
        sub_10000A074(v36, v35);

        uint64_t v40 = *v33;
        v50[0] = 0LL;
        unsigned __int8 v41 = [v40 synchronizeAndReturnError:v50];
        id v42 = v50[0];
        if ((v41 & 1) != 0)
        {
          id v43 = v50[0];
        }

        else
        {
          id v44 = v50[0];
          _convertNSErrorToError(_:)(v42);

          swift_willThrow(v45);
        }
      }

      return sub_10000A074(v36, v35);
    }
  }

  return result;
}

void sub_100008BD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  v72._uint64_t countAndFlagsBits = a1;
  v72._object = a2;
  uint64_t v70 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  uint64_t v7 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v69 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  id v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v16 = sub_10003D184();
  swift_beginAccess(v16, v79, 0LL, 0LL);
  if (*v16 == 1 && *sub_10003D338() == 1)
  {
    uint64_t v67 = v5;
    uint64_t v68 = v6;
    uint64_t v75 = 0LL;
    unint64_t v76 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    uint64_t v17 = swift_bridgeObjectRelease(v76);
    uint64_t v75 = 40LL;
    unint64_t v76 = 0xE100000000000000LL;
    uint64_t v18 = static Date.now.getter(v17);
    uint64_t v19 = Date.description.getter(v18);
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v22._uint64_t countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23._uint64_t countAndFlagsBits = 5972009LL;
    v23._object = (void *)0xE300000000000000LL;
    String.append(_:)(v23);
    String.append(_:)(v72);
    v24._object = (void *)0x8000000100079E40LL;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v24);
    uint64_t v25 = v75;
    unint64_t v26 = v76;
    static String.Encoding.utf8.getter(v27);
    uint64_t v28 = (void *)String.data(using:allowLossyConversion:)(v11, 0LL, v25, v26);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease(v26);
    unint64_t v31 = *(void (**)(char *, uint64_t))(v9 + 8);
    v31(v11, v73);
    if (v30 >> 60 == 15)
    {
      unint64_t v32 = sub_10000A01C();
      uint64_t v33 = swift_allocError(&type metadata for TransparencyLog.WriteError, v32, 0LL, 0LL);
      swift_willThrow(v33);
    }

    else
    {
      v72._object = v28;
      uint64_t v77 = v28;
      uint64_t v78 = (void *)v30;
      uint64_t v34 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      uint64_t v35 = JSONEncoder.init()();
      uint64_t v36 = sub_100009FDC(&qword_1000961E8);
      uint64_t v37 = swift_allocObject( v36,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + *(void *)(v7 + 72),
              *(unsigned __int8 *)(v7 + 80) | 7LL);
      *(_OWORD *)(v37 + 16) = xmmword_100075D10;
      static JSONEncoder.OutputFormatting.prettyPrinted.getter();
      uint64_t v75 = v37;
      uint64_t v38 = sub_10000C5E8( &qword_1000961F0,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
      uint64_t v39 = sub_100009FDC(&qword_1000961F8);
      uint64_t v40 = sub_10000A494((unint64_t *)&qword_100096200, &qword_1000961F8);
      unsigned __int8 v41 = v69;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v39, v40, v70, v38);
      dispatch thunk of JSONEncoder.outputFormatting.setter(v41);
      uint64_t v42 = v71;
      uint64_t v75 = v71;
      unint64_t v43 = sub_10000A184();
      swift_bridgeObjectRetain(v42);
      unint64_t v44 = v43;
      uint64_t v45 = v68;
      uint64_t v46 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v75, &type metadata for TransparencyLog.JustEvents, v44);
      if (v45)
      {
        swift_bridgeObjectRelease(v42);
        swift_release(v35);
        sub_10000A060((uint64_t)v72._object, v30);
      }

      else
      {
        uint64_t v48 = v46;
        unint64_t v49 = v47;
        swift_bridgeObjectRelease(v42);
        uint64_t v50 = Data.append(_:)(v48, v49);
        static String.Encoding.utf8.getter(v50);
        uint64_t v51 = String.data(using:allowLossyConversion:)(v11, 0LL, 10LL, 0xE100000000000000LL);
        unint64_t v53 = v52;
        v31(v11, v73);
        if (v53 >> 60 == 15)
        {
          __break(1u);
        }

        else
        {
          Data.append(_:)(v51, v53);
          sub_10000A060(v51, v53);
          uint64_t v54 = (void **)(v67 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile);
          swift_beginAccess(v67 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_activeFile, &v75, 0LL, 0LL);
          uint64_t v55 = *v54;
          uint64_t v57 = (uint64_t)v77;
          unint64_t v56 = (unint64_t)v78;
          v74[0] = v77;
          v74[1] = v78;
          id v58 = v55;
          sub_10000A0B8(v57, v56);
          unint64_t v59 = sub_10000A0FC();
          NSFileHandle.write<A>(contentsOf:)(v74, &type metadata for Data, v59);
          sub_10000A074(v57, v56);

          v60 = *v54;
          v74[0] = 0LL;
          unsigned int v61 = [v60 synchronizeAndReturnError:v74];
          id v62 = v74[0];
          if (v61)
          {
            id v63 = v74[0];
            sub_10000A074(v57, v56);
            sub_10000A074(v48, v49);
            swift_release(v35);
          }

          else
          {
            id v64 = v74[0];
            _convertNSErrorToError(_:)(v62);

            swift_willThrow(v65);
            sub_10000A074(v48, v49);
            swift_release(v35);
            sub_10000A074(v57, v56);
          }
        }
      }
    }
  }

uint64_t sub_100009128()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_rootLogsURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_unknownObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService15TransparencyLog_fileDeletionSource));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t DiskCache.unownedExecutor.getter()
{
  return v0;
}

Swift::Int sub_1000091A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000091E0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100009220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10000C558(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10000924C()
{
  return 0LL;
}

void sub_100009258(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100009264(uint64_t a1)
{
  unint64_t v2 = sub_10000A350();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000928C(uint64_t a1)
{
  unint64_t v2 = sub_10000A350();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000092B4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100096330);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000A32C(a1, v8);
  unint64_t v10 = sub_10000A350();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TransparencyLog.JustEvents.CodingKeys,  &type metadata for TransparencyLog.JustEvents.CodingKeys,  v10,  v8,  v9);
  uint64_t v13 = a2;
  sub_100009FDC((uint64_t *)&unk_100097050);
  sub_10000A394();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000093B8(void *a1)
{
  return sub_1000092B4(a1, *v1);
}

uint64_t sub_1000093D0(uint64_t a1, uint64_t a2)
{
  return sub_100009518(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000093DC(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100009450(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000094CC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_10000950C(uint64_t a1, uint64_t a2)
{
  return sub_100009518(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100009518(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100009554(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100009594(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100009604(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)(v2) && v5 == v6)
  {
    char v9 = 1;
    uint64_t v8 = v5;
  }

  else
  {
    uint64_t v8 = v6;
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

uint64_t sub_10000968C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000096D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000096F8(uint64_t a1)
{
  uint64_t v2 = sub_10000C5E8( &qword_100096408,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1000763E8);
  uint64_t v3 = sub_10000C5E8( (unint64_t *)&unk_100096410,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1000763A8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000977C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100009FDC(&qword_1000963C8);
  uint64_t v11 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20, v22);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10000BEF0(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100009984(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100009A54(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000C2D4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000C2D4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10000C2B4(v12);
  return v7;
}

uint64_t sub_100009A54(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_100009C0C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease(v6);
  v0[63] = v4;
  uint64_t v19 = (void *)swift_task_alloc(dword_100096C04);
  v0[64] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10001DA88;
  return sub_100020E48((uint64_t)v4);
}

    Swift::String v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1LL << v15;
    *(_BYTE *)(v23[6] + v15) = v7;
    *(void *)(v23[7] + 8 * v15) = v8;
    Swift::String v24 = v23[2];
    uint64_t v25 = __OFADD__(v24, 1LL);
    unint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v23[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = (void *)(a1 + 56); ; i += 2)
    {
      uint64_t v8 = *i;
      unint64_t v49 = *((_BYTE *)i - 8);
      unint64_t v29 = v49;
      unint64_t v30 = (void *)*a3;
      unint64_t v31 = sub_100046ADC(v49);
      uint64_t v33 = v30[2];
      uint64_t v34 = (v32 & 1) == 0;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      uint64_t v36 = v31;
      uint64_t v37 = v32;
      uint64_t v38 = v30[3];
      swift_bridgeObjectRetain(v8);
      if (v38 < v35)
      {
        sub_100046ED4(v35, 1LL);
        uint64_t v39 = sub_100046ADC(v49);
        if ((v37 & 1) != (v40 & 1)) {
          goto LABEL_26;
        }
        uint64_t v36 = v39;
      }

      if ((v37 & 1) != 0) {
        goto LABEL_10;
      }
      unsigned __int8 v41 = (void *)*a3;
      *(void *)(*a3 + 8 * (v36 >> 6) + 64) |= 1LL << v36;
      *(_BYTE *)(v41[6] + v36) = v29;
      *(void *)(v41[7] + 8 * v36) = v8;
      uint64_t v42 = v41[2];
      uint64_t v25 = __OFADD__(v42, 1LL);
      unint64_t v43 = v42 + 1;
      if (v25) {
        goto LABEL_25;
      }
      v41[2] = v43;
      if (!--v27) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

  swift_unknownObjectRelease(*(void *)(v0 + 1304));
  return swift_errorRelease(v19);
}

  __break(1u);
}

  __break(1u);
  return result;
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    unint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *unint64_t v20 = v22 & v21;
  Swift::String v23 = *(void *)(a2 + 16);
  Swift::String v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  unint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (void *)swift_arrayInitWithCopy(&v3[2 * v7 + 4]);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v8 = v3[2];
  uint64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }

    uint64_t v12 = *(void *)(v0 + 392);
    int v14 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 320);
    size_t v16 = *(void *)(v0 + 328);
    uint64_t v18 = *(void *)(v0 + 312);
    uint64_t v19 = *(void *)(v0 + 288);
    uint64_t v125 = *(void *)(v0 + 264);
    unint64_t v20 = *(void *)(v0 + 232);
    swift_task_dealloc(*(void *)(v0 + 400));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v125);
    *(void *)unint64_t v20 = v131;
    *(_DWORD *)(v20 + 8) = v132;
    *(void *)(v20 + 16) = v130;
    *(void *)(v20 + 24) = v128;
    *(void *)(v20 + 32) = v127;
    unint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }

  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v22 = *v21;
    Swift::String v23 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    Swift::String v23 = *v21;
    unint64_t v22 = (-1LL << result) - 1;
  }

  *unint64_t v21 = v23 & v22;
  Swift::String v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  unint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100009C0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100009CA0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100009E78(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100009E78(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100009CA0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100009E14(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100009E14(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100009FDC(&qword_1000963E0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100009E78(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_1000963E0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

              uint64_t v42 = v44;
              goto LABEL_27;
            }
          }
        }
      }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  swift_bridgeObjectRelease(*(void *)(v0 + 512));
  unint64_t v53 = (void *)objc_opt_self(&OBJC_CLASS___C2ReportMetrics);
  uint64_t v54 = v146;
  uint64_t v55 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v56 = [v53 gzipDecode:v55];

  if (!v56)
  {
    uint64_t v83 = *(void *)(v0 + 440);
    v82 = *(void **)(v0 + 448);
    _StringGuts.grow(_:)(55LL);
    v84._object = (void *)0x800000010007C680LL;
    v84._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v84);
    v85._uint64_t countAndFlagsBits = v83;
    v85._object = v82;
    String.append(_:)(v85);
    v86._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v86._object = (void *)0x800000010007C710LL;
    String.append(_:)(v86);
    uint64_t v87 = sub_100069FB4();
    unint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v87, 0LL, 0LL);
    char *v88 = 0LL;
    v88[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    sub_10000A060(v147, v145);
    sub_10000A060(v146, v3);
    sub_10000A060(v146, v3);
    Swift::String v24 = v147;
    uint64_t v25 = v145;
    goto LABEL_6;
  }

  uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
  unint64_t v59 = v58;

  *(void *)(v0 + 600) = v57;
  *(void *)(v0 + 608) = v59;
  v60 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_10000A0B8(v57, v59);
  unsigned int v61 = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 416) = 0LL;
  id v62 = [v60 JSONObjectWithData:v61 options:0 error:v0 + 416];

  id v63 = *(void **)(v0 + 416);
  if (!v62)
  {
    uint64_t v89 = v63;
    uint64_t v90 = _convertNSErrorToError(_:)(v63);

    swift_willThrow(v91);
    swift_errorRelease(v90);
    goto LABEL_38;
  }

  id v64 = v63;
  _bridgeAnyObjectToAny(_:)((void *)(v0 + 248), v62);
  swift_unknownObjectRelease(v62);
  uint64_t v65 = sub_100069FF8();
  uint64_t v54 = v146;
  if ((swift_dynamicCast(v0 + 408, v0 + 248, (char *)&type metadata for Any + 8, v65, 6LL) & 1) == 0)
  {
LABEL_38:
    os_log_type_t v93 = *(void *)(v0 + 440);
    uint64_t v92 = *(void **)(v0 + 448);
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v94._uint64_t countAndFlagsBits = v93;
    v94._object = v92;
    String.append(_:)(v94);
    v95._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    v95._object = (void *)0x800000010007C730LL;
    String.append(_:)(v95);
    uint64_t v96 = sub_100069FB4();
    unint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v96, 0LL, 0LL);
    *uint64_t v97 = 0xD000000000000019LL;
    v97[1] = 0x800000010007C680LL;
    swift_willThrow(v22);
    sub_10000A060(v147, v145);
    sub_10000A060(v54, v3);
    sub_10000A060(v54, v3);
    sub_10000A060(v147, v145);
LABEL_39:
    sub_10000A074(v57, v59);
    sub_10000A074(v57, v59);
    goto LABEL_7;
  }

  uint64_t v66 = *(void **)(v0 + 408);
  *(void *)(v0 + 616) = v66;
  uint64_t v67 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  *(void *)(v0 + 432) = 0LL;
  uint64_t v68 = v66;
  uint64_t v69 = [v67 dataWithPropertyList:v68 format:100 options:0 error:v0 + 432];
  uint64_t v70 = *(id *)(v0 + 432);
  if (!v69)
  {
    uint64_t v105 = v70;
    v107 = *(void *)(v0 + 440);
    uint64_t v106 = *(void **)(v0 + 448);
    id v108 = _convertNSErrorToError(_:)(v70);

    swift_willThrow(v109);
    swift_errorRelease(v108);
    _StringGuts.grow(_:)(57LL);
    v110._object = (void *)0x800000010007C680LL;
    v110._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v110);
    v111._uint64_t countAndFlagsBits = v107;
    v111._object = v106;
    String.append(_:)(v111);
    v112._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v112._object = (void *)0x800000010007C750LL;
    String.append(_:)(v112);
    uint64_t v113 = sub_100069FB4();
    unint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v113, 0LL, 0LL);
    char *v114 = 0LL;
    v114[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    sub_10000A060(v147, v145);
    sub_10000A060(v146, v3);
    sub_10000A060(v146, v3);
    sub_10000A060(v147, v145);

    goto LABEL_39;
  }

  uint64_t v138 = v67;
  uint64_t v139 = v68;
  uint64_t v71 = *(void *)(v0 + 488);
  v140 = *(void *)(v0 + 480);
  uint64_t v142 = *(void *)(v0 + 472);
  v144 = (id *)(v0 + 424);
  Swift::String v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
  uint64_t v74 = v73;

  *(void *)(v0 + 624) = v72;
  *(void *)(v0 + 632) = v74;
  sub_10000A0B8(v72, v74);
  uint64_t v75 = Data.base64EncodedString(options:)(0LL);
  *(void *)(v0 + 336) = &type metadata for String;
  *(Swift::String *)(v0 + 312) = v75;
  sub_100030C0C((_OWORD *)(v0 + 312), (_OWORD *)(v0 + 344));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_100050668((_OWORD *)(v0 + 344), 6775138LL, 0xE300000000000000LL, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 400) = &_swiftEmptyDictionarySingleton;
  uint64_t v77 = swift_bridgeObjectRelease(0x8000000000000000LL);
  static String.Encoding.utf8.getter(v77);
  uint64_t v78 = String.data(using:allowLossyConversion:)(v71, 0LL, 0x727574616E676973LL, 0xE900000000000065LL);
  os_log_type_t v80 = v79;
  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v71, v142);
  if (v80 >> 60 == 15)
  {
    sub_100069880(0x727574616E676973LL, 0xE900000000000065LL, (_OWORD *)(v0 + 216));
    sub_1000509E4(v0 + 216);
    id v81 = *(void *)(v0 + 400);
  }

  else
  {
    uint64_t v115 = Data.base64EncodedString(options:)(0LL);
    sub_10000A060(v78, v80);
    *(void *)(v0 + 304) = &type metadata for String;
    *(Swift::String *)(v0 + 280) = v115;
    sub_100030C0C((_OWORD *)(v0 + 280), (_OWORD *)(v0 + 120));
    id v81 = *(void *)(v0 + 400);
    uint64_t v116 = swift_isUniquelyReferenced_nonNull_native(v81);
    sub_100050668((_OWORD *)(v0 + 120), 0x727574616E676973LL, 0xE900000000000065LL, v116);
    *(void *)(v0 + 400) = v81;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v117 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v81);
  char *v144 = 0LL;
  uint64_t v118 = [v138 dataWithPropertyList:v117 format:100 options:0 error:v144];

  v119 = *v144;
  if (v118)
  {
    uint64_t v120 = *(void *)(v0 + 520);
    uint64_t v121 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v118);
    uint64_t v123 = v122;

    *(void *)(v0 + 640) = v121;
    *(void *)(v0 + 648) = v123;
    sub_10000A0B8(v121, v123);
    v124 = sub_100024FE8(v121, v123);
    unint64_t v22 = v120;
    *(void *)(v0 + 656) = v124;
    *(void *)(v0 + 664) = v125;
    *(void *)(v0 + 672) = v126;
    *(void *)(v0 + 680) = v127;
    if (!v120)
    {
      sub_1000251E4(*(void *)(v0 + 456), v124, v125);
      unint64_t v26 = *(int **)(**(void **)(v0 + 528) + 152LL);
      uint64_t v27 = *v26;
      uint64_t v28 = (void *)swift_task_alloc(v26[1]);
      *(void *)(v0 + 688) = v28;
      unint64_t v29 = sub_100069244;
      goto LABEL_8;
    }

    sub_10000A060(v147, v145);
    sub_10000A060(v146, v3);
    sub_10000A060(v146, v3);
    sub_10000A060(v147, v145);
    sub_10000A074(v57, v59);
    sub_10000A074(v57, v59);

    sub_10000A074(v72, v74);
    sub_10000A074(v72, v74);
    sub_10000A074(v121, v123);
    sub_10000A074(v121, v123);
  }

  else
  {
    v128 = v119;
    unint64_t v130 = *(void *)(v0 + 440);
    uint64_t v129 = *(void **)(v0 + 448);
    unint64_t v131 = _convertNSErrorToError(_:)(v119);

    swift_willThrow(v132);
    swift_errorRelease(v131);
    _StringGuts.grow(_:)(57LL);
    v133._object = (void *)0x800000010007C680LL;
    v133._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v133);
    v134._uint64_t countAndFlagsBits = v130;
    v134._object = v129;
    String.append(_:)(v134);
    v135._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v135._object = (void *)0x800000010007C770LL;
    String.append(_:)(v135);
    uint64_t v136 = sub_100069FB4();
    unint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v136, 0LL, 0LL);
    *unsigned int v137 = 0LL;
    v137[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    sub_10000A060(v147, v145);
    sub_10000A060(v146, v3);
    sub_10000A060(v146, v3);
    sub_10000A060(v147, v145);
    sub_10000A074(v57, v59);
    sub_10000A074(v57, v59);

    sub_10000A074(v72, v74);
    sub_10000A074(v72, v74);
  }

  __break(1u);
}

uint64_t sub_100009FC4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100009FDC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000A01C()
{
  unint64_t result = qword_1000961D8;
  if (!qword_1000961D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100075E20, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_1000961D8);
  }

  return result;
}

uint64_t sub_10000A060(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000A074(result, a2);
  }
  return result;
}

uint64_t sub_10000A074(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000A0B8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10000A0FC()
{
  unint64_t result = qword_1000961E0;
  if (!qword_1000961E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000961E0);
  }

  return result;
}

uint64_t sub_10000A140(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000A184()
{
  unint64_t result = qword_1000989E8[0];
  if (!qword_1000989E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100075F20, &type metadata for TransparencyLog.JustEvents);
    atomic_store(result, qword_1000989E8);
  }

  return result;
}

unint64_t sub_10000A1CC()
{
  unint64_t result = qword_100096208;
  if (!qword_100096208)
  {
    unint64_t result = swift_getWitnessTable(&unk_100075D48, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_100096208);
  }

  return result;
}

uint64_t sub_10000A214()
{
  return type metadata accessor for TransparencyLog(0LL);
}

uint64_t type metadata accessor for TransparencyLog(uint64_t a1)
{
  uint64_t result = qword_100098CF0;
  if (!qword_100098CF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TransparencyLog);
  }
  return result;
}

uint64_t sub_10000A258(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_100075ED0;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100075EE8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t variable initialization expression of Daemon.mode()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for TransparencyLog.WriteError()
{
  return &type metadata for TransparencyLog.WriteError;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents()
{
  return &type metadata for TransparencyLog.JustEvents;
}

void *sub_10000A32C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_10000A350()
{
  unint64_t result = qword_100098D80[0];
  if (!qword_100098D80[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10007610C, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, qword_100098D80);
  }

  return result;
}

unint64_t sub_10000A394()
{
  unint64_t result = qword_100096340;
  if (!qword_100096340)
  {
    uint64_t v1 = sub_10000A140((uint64_t *)&unk_100097050);
    sub_10000C5E8( (unint64_t *)&qword_100096348,  type metadata accessor for ServiceEventValue,  (uint64_t)&unk_100077388);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100096340);
  }

  return result;
}

uint64_t sub_10000A418(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10000A450()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000A474()
{
  return sub_100008540(v0);
}

uint64_t sub_10000A47C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000A48C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000A494(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000A140(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000A4D4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10000A500()
{
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = (void *)swift_task_alloc(dword_1000963AC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10000A560;
  v3[2] = v2;
  return swift_task_switch(sub_100008634, v2, 0LL);
}

uint64_t sub_10000A560()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void type metadata accessor for URLResourceKey()
{
  if (!qword_1000963E8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10008D990);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000963E8);
    }
  }

uint64_t sub_10000A5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100096350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100096350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

Swift::Int sub_10000A68C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v173 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v160 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v167 = (char *)&v152 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  id v169 = (char *)&v152 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v168 = (char *)&v152 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v156 = (char *)&v152 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v163 = (char *)&v152 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v158 = (char *)&v152 - v18;
  __chkstk_darwin(v17);
  uint64_t v157 = (char *)&v152 - v19;
  v172 = a1;
  Swift::Int v20 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v20);
  if (result >= v20)
  {
    if (v20 < 0) {
      goto LABEL_150;
    }
    if (v20) {
      return sub_10000B224(0LL, v20, 1LL, v172);
    }
    return result;
  }

  if (v20 >= 0) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v20 + 1;
  }
  if (v20 < -1) {
    goto LABEL_158;
  }
  Swift::Int v153 = result;
  if (v20 < 2)
  {
    uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    unint64_t v26 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v173 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
    uint64_t v152 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v29 >= 2)
      {
        uint64_t v144 = *v172;
        do
        {
          unint64_t v145 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_145;
          }
          if (!v144) {
            goto LABEL_157;
          }
          uint64_t v146 = *(void *)&v27[16 * v145 + 32];
          uint64_t v147 = *(void *)&v27[16 * v29 + 24];
          uint64_t v148 = v26;
          sub_10000B4EC( v144 + *(void *)(v173 + 72) * v146,  v144 + *(void *)(v173 + 72) * *(void *)&v27[16 * v29 + 16],  v144 + *(void *)(v173 + 72) * v147,  (unint64_t)v26);
          if (v2) {
            break;
          }
          if (v147 < v146) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
            uint64_t v27 = sub_10000BCCC((uint64_t)v27);
          }
          if (v145 >= *((void *)v27 + 2)) {
            goto LABEL_147;
          }
          uint64_t v149 = &v27[16 * v145 + 32];
          *(void *)uint64_t v149 = v146;
          *((void *)v149 + 1) = v147;
          unint64_t v150 = *((void *)v27 + 2);
          if (v29 > v150) {
            goto LABEL_148;
          }
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v150 - v29));
          *((void *)v27 + 2) = v150 - 1;
          unint64_t v29 = v150 - 1;
          unint64_t v26 = v148;
        }

        while (v150 > 2);
      }

LABEL_127:
      swift_bridgeObjectRelease(v27);
      unint64_t v151 = v152;
      v152[2] = 0LL;
      return swift_bridgeObjectRelease(v151);
    }
  }

  else
  {
    uint64_t v23 = v22 >> 1;
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22 >> 1, v4);
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v23;
    uint64_t v25 = *(unsigned __int8 *)(v173 + 80);
    uint64_t v152 = (void *)v24;
    unint64_t v26 = (char *)(v24 + ((v25 + 32) & ~v25));
  }

  uint64_t v28 = 0LL;
  uint64_t v27 = (char *)_swiftEmptyArrayStorage;
  uint64_t v162 = v26;
  uint64_t v166 = v4;
  while (1)
  {
    uint64_t v30 = v28;
    uint64_t v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      uint64_t v42 = v28 + 1;
      goto LABEL_67;
    }

    Swift::Int v170 = v20;
    uint64_t v32 = *v172;
    uint64_t v33 = *(void *)(v173 + 72);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 16);
    v34(v157, *v172 + v33 * v31, v4);
    uint64_t v161 = v30;
    uint64_t v159 = v32;
    uint64_t v171 = v33;
    uint64_t v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v158, v32 + v33 * v30, v4);
    uint64_t v36 = URL.lastPathComponent.getter(v35);
    uint64_t v38 = v37;
    uint64_t v39 = URL.lastPathComponent.getter(v36);
    uint64_t v41 = v40;
    if (v36 == v39 && v38 == v40)
    {
      LODWORD(v165) = 0;
      uint64_t v41 = v38;
    }

    else
    {
      LODWORD(v165) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38);
    }

    unint64_t v43 = v156;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v41);
    unint64_t v44 = *(void (**)(char *, uint64_t))(v173 + 8);
    uint64_t v45 = v166;
    v44(v158, v166);
    v44(v157, v45);
    uint64_t v42 = v161 + 2;
    if (v161 + 2 < v170)
    {
      v154 = v27;
      uint64_t v155 = v2;
      uint64_t v164 = v171 * v31;
      uint64_t v46 = v159;
      uint64_t v47 = v171 * v42;
      while (1)
      {
        uint64_t v48 = v166;
        v34(v163, v46 + v47, v166);
        uint64_t v49 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v43, v46 + v164, v48);
        uint64_t v50 = URL.lastPathComponent.getter(v49);
        uint64_t v52 = v51;
        uint64_t v53 = URL.lastPathComponent.getter(v50);
        uint64_t v55 = v54;
        if (v50 == v53 && v52 == v54)
        {
          int v56 = 0;
          uint64_t v55 = v52;
        }

        else
        {
          int v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52);
        }

        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v55);
        uint64_t v57 = v166;
        v44(v43, v166);
        v44(v163, v57);
        ++v42;
        v46 += v171;
        if (v170 == v42)
        {
          Swift::Int v58 = v170;
          uint64_t v42 = v170;
          uint64_t v27 = v154;
          uint64_t v2 = v155;
          goto LABEL_32;
        }
      }

      uint64_t v27 = v154;
      uint64_t v2 = v155;
    }

    Swift::Int v58 = v170;
LABEL_32:
    uint64_t v30 = v161;
    uint64_t v59 = v159;
    if ((v165 & 1) == 0) {
      break;
    }
    if (v42 < v161) {
      goto LABEL_151;
    }
    if (v161 >= v42) {
      break;
    }
    v154 = v27;
    uint64_t v155 = v2;
    uint64_t v60 = 0LL;
    uint64_t v61 = v171 * (v42 - 1);
    uint64_t v62 = v42 * v171;
    uint64_t v63 = v161;
    uint64_t v64 = v161 * v171;
    do
    {
      if (v63 != v42 + v60 - 1)
      {
        if (!v59) {
          goto LABEL_156;
        }
        uint64_t v68 = v42;
        unint64_t v69 = v59 + v64;
        uint64_t v70 = v59 + v61;
        uint64_t v165 = *(void *)(v173 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v165)(v160, v59 + v64, v166);
        if (v64 < v61 || v69 >= v59 + v62)
        {
          uint64_t v65 = v59 + v64;
          uint64_t v66 = v59 + v61;
          uint64_t v67 = v166;
          swift_arrayInitWithTakeFrontToBack(v65, v66, 1LL, v166);
        }

        else
        {
          uint64_t v67 = v166;
          if (v64 != v61) {
            swift_arrayInitWithTakeBackToFront(v69, v70);
          }
        }

        ((void (*)(uint64_t, char *, uint64_t))v165)(v70, v160, v67);
        uint64_t v42 = v68;
        uint64_t v59 = v159;
      }

      ++v63;
      --v60;
      v61 -= v171;
      v62 -= v171;
      v64 += v171;
    }

    while (v63 < v42 + v60);
    uint64_t v27 = v154;
    uint64_t v2 = v155;
    uint64_t v71 = v166;
    uint64_t v30 = v161;
    Swift::Int v58 = v170;
    if (v42 < v170) {
      goto LABEL_48;
    }
LABEL_67:
    if (v42 < v30) {
      goto LABEL_144;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
      uint64_t v27 = sub_10000BAC8(0LL, *((void *)v27 + 2) + 1LL, 1, v27);
    }
    unint64_t v93 = *((void *)v27 + 2);
    unint64_t v92 = *((void *)v27 + 3);
    unint64_t v29 = v93 + 1;
    unint64_t v26 = v162;
    uint64_t v171 = v42;
    if (v93 >= v92 >> 1)
    {
      uint64_t v143 = sub_10000BAC8((char *)(v92 > 1), v93 + 1, 1, v27);
      unint64_t v26 = v162;
      uint64_t v27 = v143;
    }

    *((void *)v27 + 2) = v29;
    os_log_type_t v94 = v27 + 32;
    BOOL v95 = &v27[16 * v93 + 32];
    uint64_t v96 = v171;
    *(void *)BOOL v95 = v30;
    *((void *)v95 + 1) = v96;
    if (v93)
    {
      while (1)
      {
        unint64_t v97 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v102 = &v94[16 * v29];
          uint64_t v103 = *((void *)v102 - 8);
          uint64_t v104 = *((void *)v102 - 7);
          BOOL v108 = __OFSUB__(v104, v103);
          uint64_t v105 = v104 - v103;
          if (v108) {
            goto LABEL_133;
          }
          uint64_t v107 = *((void *)v102 - 6);
          uint64_t v106 = *((void *)v102 - 5);
          BOOL v108 = __OFSUB__(v106, v107);
          uint64_t v100 = v106 - v107;
          char v101 = v108;
          if (v108) {
            goto LABEL_134;
          }
          unint64_t v109 = v29 - 2;
          uint64_t v110 = &v94[16 * v29 - 32];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          BOOL v108 = __OFSUB__(v111, v112);
          uint64_t v113 = v111 - v112;
          if (v108) {
            goto LABEL_136;
          }
          BOOL v108 = __OFADD__(v100, v113);
          uint64_t v114 = v100 + v113;
          if (v108) {
            goto LABEL_139;
          }
          if (v114 >= v105)
          {
            uint64_t v132 = &v94[16 * v97];
            uint64_t v134 = *(void *)v132;
            uint64_t v133 = *((void *)v132 + 1);
            BOOL v108 = __OFSUB__(v133, v134);
            uint64_t v135 = v133 - v134;
            if (v108) {
              goto LABEL_143;
            }
            BOOL v125 = v100 < v135;
            goto LABEL_104;
          }
        }

        else
        {
          if (v29 != 3)
          {
            uint64_t v126 = *((void *)v27 + 4);
            uint64_t v127 = *((void *)v27 + 5);
            BOOL v108 = __OFSUB__(v127, v126);
            uint64_t v119 = v127 - v126;
            char v120 = v108;
            goto LABEL_98;
          }

          uint64_t v99 = *((void *)v27 + 4);
          uint64_t v98 = *((void *)v27 + 5);
          BOOL v108 = __OFSUB__(v98, v99);
          uint64_t v100 = v98 - v99;
          char v101 = v108;
        }

        if ((v101 & 1) != 0) {
          goto LABEL_135;
        }
        unint64_t v109 = v29 - 2;
        uint64_t v115 = &v94[16 * v29 - 32];
        uint64_t v117 = *(void *)v115;
        uint64_t v116 = *((void *)v115 + 1);
        BOOL v118 = __OFSUB__(v116, v117);
        uint64_t v119 = v116 - v117;
        char v120 = v118;
        if (v118) {
          goto LABEL_138;
        }
        uint64_t v121 = &v94[16 * v97];
        uint64_t v123 = *(void *)v121;
        uint64_t v122 = *((void *)v121 + 1);
        BOOL v108 = __OFSUB__(v122, v123);
        uint64_t v124 = v122 - v123;
        if (v108) {
          goto LABEL_141;
        }
        if (__OFADD__(v119, v124)) {
          goto LABEL_142;
        }
        if (v119 + v124 >= v100)
        {
          BOOL v125 = v100 < v124;
LABEL_104:
          if (v125) {
            unint64_t v97 = v109;
          }
          goto LABEL_106;
        }

LABEL_98:
        if ((v120 & 1) != 0) {
          goto LABEL_137;
        }
        v128 = &v94[16 * v97];
        uint64_t v130 = *(void *)v128;
        uint64_t v129 = *((void *)v128 + 1);
        BOOL v108 = __OFSUB__(v129, v130);
        uint64_t v131 = v129 - v130;
        if (v108) {
          goto LABEL_140;
        }
        if (v131 < v119) {
          goto LABEL_14;
        }
LABEL_106:
        unint64_t v136 = v97 - 1;
        if (v97 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }

        if (!*v172) {
          goto LABEL_155;
        }
        unsigned int v137 = v27;
        uint64_t v138 = &v94[16 * v136];
        uint64_t v139 = *(void *)v138;
        v140 = &v94[16 * v97];
        uint64_t v141 = *((void *)v140 + 1);
        sub_10000B4EC( *v172 + *(void *)(v173 + 72) * *(void *)v138,  *v172 + *(void *)(v173 + 72) * *(void *)v140,  *v172 + *(void *)(v173 + 72) * v141,  (unint64_t)v26);
        if (v2)
        {
          uint64_t v27 = v137;
          goto LABEL_127;
        }

        if (v141 < v139) {
          goto LABEL_130;
        }
        if (v97 > *((void *)v137 + 2)) {
          goto LABEL_131;
        }
        *(void *)uint64_t v138 = v139;
        *(void *)&v94[16 * v136 + 8] = v141;
        unint64_t v142 = *((void *)v137 + 2);
        if (v97 >= v142) {
          goto LABEL_132;
        }
        uint64_t v27 = v137;
        unint64_t v29 = v142 - 1;
        memmove(&v94[16 * v97], v140 + 16, 16 * (v142 - 1 - v97));
        *((void *)v137 + 2) = v142 - 1;
        unint64_t v26 = v162;
        if (v142 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v29 = 1LL;
LABEL_14:
    Swift::Int v20 = v172[1];
    uint64_t v28 = v171;
    uint64_t v4 = v166;
    if (v171 >= v20) {
      goto LABEL_116;
    }
  }

  uint64_t v71 = v166;
  if (v42 >= v58) {
    goto LABEL_67;
  }
LABEL_48:
  if (__OFSUB__(v42, v30)) {
    goto LABEL_149;
  }
  if (v42 - v30 >= v153) {
    goto LABEL_67;
  }
  if (__OFADD__(v30, v153)) {
    goto LABEL_152;
  }
  if (v30 + v153 >= v58) {
    uint64_t v72 = v58;
  }
  else {
    uint64_t v72 = v30 + v153;
  }
  if (v72 >= v30)
  {
    if (v42 != v72)
    {
      uint64_t v161 = v30;
      v154 = v27;
      uint64_t v155 = v2;
      uint64_t v73 = *(void *)(v173 + 72);
      uint64_t v164 = *(void *)(v173 + 16);
      uint64_t v165 = v73;
      Swift::Int v170 = v42 * v73;
      uint64_t v171 = v73 * (v42 - 1);
      uint64_t v159 = v72;
      do
      {
        uint64_t v75 = 0LL;
        uint64_t v76 = v161;
        while (1)
        {
          uint64_t v77 = *v172;
          uint64_t v78 = (uint64_t (*)(char *, uint64_t, uint64_t))v164;
          ((void (*)(char *, Swift::Int, uint64_t))v164)(v168, v170 + v75 + *v172, v71);
          uint64_t v79 = v78(v169, v171 + v75 + v77, v71);
          uint64_t v80 = URL.lastPathComponent.getter(v79);
          uint64_t v82 = v81;
          uint64_t v83 = URL.lastPathComponent.getter(v80);
          uint64_t v85 = v84;
          if (v80 == v83 && v82 == v84) {
            break;
          }
          char v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82);
          swift_bridgeObjectRelease(v82);
          swift_bridgeObjectRelease(v85);
          uint64_t v87 = *(void (**)(char *, uint64_t))(v173 + 8);
          uint64_t v71 = v166;
          v87(v169, v166);
          v87(v168, v71);
          if ((v86 & 1) == 0) {
            goto LABEL_58;
          }
          uint64_t v88 = *v172;
          if (!*v172) {
            goto LABEL_154;
          }
          uint64_t v89 = v88 + v170 + v75;
          uint64_t v90 = (char *)(v88 + v171 + v75);
          uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 32);
          v91(v167, v89, v71);
          swift_arrayInitWithTakeFrontToBack(v89, v90, 1LL, v71);
          v91(v90, (uint64_t)v167, v71);
          v75 -= v165;
          if (v42 == ++v76) {
            goto LABEL_58;
          }
        }

        swift_bridgeObjectRelease_n(v82, 2LL);
        uint64_t v74 = *(void (**)(char *, uint64_t))(v173 + 8);
        uint64_t v71 = v166;
        v74(v169, v166);
        v74(v168, v71);
LABEL_58:
        ++v42;
        v171 += v165;
        v170 += v165;
      }

      while (v42 != v159);
      uint64_t v42 = v159;
      uint64_t v27 = v154;
      uint64_t v2 = v155;
      uint64_t v30 = v161;
    }

    goto LABEL_67;
  }

LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10000B224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v41 = a4;
  uint64_t v35 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void **)(v6 - 8);
  uint64_t v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v44 = (char *)&v33 - v10;
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v43 = (char *)&v33 - v12;
  uint64_t v39 = a3;
  uint64_t v34 = a2;
  if (a3 != a2)
  {
    uint64_t v13 = v42[9];
    uint64_t v36 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[2];
    uint64_t v37 = v13;
    uint64_t v14 = v13 * (v39 - 1);
    uint64_t v45 = v13 * v39;
LABEL_6:
    uint64_t v16 = 0LL;
    uint64_t v17 = v35;
    uint64_t v38 = v14;
    while (1)
    {
      uint64_t v18 = *v41;
      uint64_t v19 = v36;
      v36(v43, v45 + v16 + *v41, v6);
      uint64_t v20 = v19(v44, v14 + v16 + v18, v6);
      uint64_t v21 = URL.lastPathComponent.getter(v20);
      uint64_t v23 = v22;
      uint64_t v25 = URL.lastPathComponent.getter(v21);
      uint64_t v26 = v24;
      if (v21 == v25 && v23 == v24)
      {
        swift_bridgeObjectRelease_n(v23, 2LL);
        uint64_t v15 = (void (*)(char *, uint64_t))v42[1];
        v15(v44, v6);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v43, v6);
        uint64_t v14 = v38;
LABEL_5:
        v14 += v37;
        v45 += v37;
        if (++v39 == v34) {
          return result;
        }
        goto LABEL_6;
      }

      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      uint64_t v28 = (void (*)(char *, uint64_t))v42[1];
      v28(v44, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v43, v6);
      uint64_t v14 = v38;
      if ((v27 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v41;
      if (!*v41) {
        break;
      }
      uint64_t v30 = v29 + v45 + v16;
      uint64_t v31 = v29 + v38 + v16;
      uint64_t v32 = (void (*)(char *, uint64_t, uint64_t))v42[4];
      v32(v40, v30, v6);
      swift_arrayInitWithTakeFrontToBack(v30, v31, 1LL, v6);
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v40, v6);
      v16 -= v37;
      if (v39 == ++v17) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10000B4EC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v61 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v61 - v16;
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v66 = v18;
  uint64_t v67 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  if (a2 - a1 == 0x8000000000000000LL && v67 == -1) {
    goto LABEL_69;
  }
  int64_t v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v67 == -1) {
    goto LABEL_70;
  }
  uint64_t v21 = (uint64_t)(a2 - a1) / v67;
  unint64_t v70 = a1;
  unint64_t v69 = a4;
  uint64_t v22 = v20 / v67;
  if (v21 >= v20 / v67)
  {
    if ((v22 & 0x8000000000000000LL) == 0)
    {
      uint64_t v24 = v22 * v67;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v22, v8);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v40 = a4 + v24;
      unint64_t v68 = a4 + v24;
      unint64_t v70 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v67;
        uint64_t v67 = *(void *)(v66 + 16);
        unint64_t v62 = a4;
        unint64_t v63 = a1;
        do
        {
          unint64_t v43 = a3;
          unint64_t v44 = (uint64_t (*)(char *, unint64_t, uint64_t))v67;
          ((void (*)(char *, unint64_t, uint64_t))v67)(v64, v40 + v42, v8);
          unint64_t v45 = a2 + v42;
          uint64_t v46 = v44(v65, a2 + v42, v8);
          uint64_t v47 = URL.lastPathComponent.getter(v46);
          uint64_t v49 = v48;
          uint64_t v50 = URL.lastPathComponent.getter(v47);
          uint64_t v52 = v51;
          if (v47 == v50 && v49 == v51)
          {
            char v53 = 0;
            uint64_t v52 = v49;
          }

          else
          {
            char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49);
          }

          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v52);
          a3 += v42;
          uint64_t v54 = *(void (**)(char *, uint64_t))(v66 + 8);
          v54(v65, v8);
          v54(v64, v8);
          if ((v53 & 1) != 0)
          {
            if (v43 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, a2 + v42, 1LL, v8);
              unint64_t v56 = v62;
              unint64_t v57 = v63;
            }

            else
            {
              BOOL v55 = v43 == a2;
              unint64_t v56 = v62;
              unint64_t v57 = v63;
              if (!v55) {
                swift_arrayInitWithTakeBackToFront(a3, a2 + v42);
              }
            }

            v70 += v42;
          }

          else
          {
            unint64_t v58 = v68;
            unint64_t v59 = v68 + v42;
            v68 += v42;
            if (v43 < v58 || a3 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, v59, 1LL, v8);
              unint64_t v45 = a2;
              unint64_t v56 = v62;
              unint64_t v57 = v63;
            }

            else
            {
              unint64_t v57 = v63;
              if (v43 != v58) {
                swift_arrayInitWithTakeBackToFront(v43 + v42, v59);
              }
              unint64_t v45 = a2;
              unint64_t v56 = v62;
            }
          }

          unint64_t v40 = v68;
          if (v68 <= v56) {
            break;
          }
          a2 = v45;
        }

        while (v45 > v57);
      }

LABEL_67:
      sub_10000BBC0(&v70, &v69, (uint64_t *)&v68);
      return 1LL;
    }
  }

  else if ((v21 & 0x8000000000000000LL) == 0)
  {
    uint64_t v23 = v21 * v67;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v21, v8);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    uint64_t v65 = (char *)(a4 + v23);
    unint64_t v68 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        uint64_t v27 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v15, a4, v8);
        uint64_t v28 = URL.lastPathComponent.getter(v27);
        uint64_t v30 = v29;
        uint64_t v31 = URL.lastPathComponent.getter(v28);
        uint64_t v33 = v32;
        if (v28 == v31 && v30 == v32) {
          break;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v33);
        uint64_t v36 = *(void (**)(char *, uint64_t))(v66 + 8);
        v36(v15, v8);
        v36(v17, v8);
        if ((v35 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v37 = v70;
        unint64_t v38 = a2 + v67;
        if (v70 < a2 || v70 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack(v70, a2, 1LL, v8);
        }

        else if (v70 == a2)
        {
          unint64_t v37 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v70, a2);
        }

LABEL_37:
        unint64_t v70 = v37 + v67;
        a4 = v69;
        if (v69 < (unint64_t)v65)
        {
          a2 = v38;
          if (v38 < a3) {
            continue;
          }
        }

        goto LABEL_67;
      }

      swift_bridgeObjectRelease_n(v30, 2LL);
      uint64_t v34 = *(void (**)(char *, uint64_t))(v66 + 8);
      v34(v15, v8);
      v34(v17, v8);
LABEL_31:
      unint64_t v37 = v70;
      unint64_t v39 = v69 + v67;
      if (v70 < v69 || v70 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack(v70, v69, 1LL, v8);
      }

      else if (v70 != v69)
      {
        swift_arrayInitWithTakeBackToFront(v70, v69);
      }

      unint64_t v69 = v39;
      unint64_t v38 = a2;
      goto LABEL_37;
    }

    goto LABEL_67;
  }

LABEL_71:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

char *sub_10000BAC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_1000963D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10000BBC0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v3 < v4 || v3 >= v4 + v10 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  }
  return result;
}

char *sub_10000BCCC(uint64_t a1)
{
  return sub_10000BAC8(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10000BCE0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000BCFC(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_10000BCFC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100009FDC(&qword_1000963C8);
  uint64_t v11 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v15 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21, v22);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_release(v9);
  unint64_t v3 = v39;
  if ((v43 & 1) != 0)
  {
    unint64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
    if (v38 >= 64) {
      bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      uint64_t *v41 = -1LL << v38;
    }
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  swift_release(v9);
  unint64_t v3 = v39;
  if ((v43 & 1) != 0)
  {
    unint64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
    if (v38 >= 64) {
      bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      uint64_t *v41 = -1LL << v38;
    }
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10000BEDC(unint64_t a1)
{
  return sub_10000977C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10000BEF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10000C008(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100009FDC(&qword_1000963D0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v36 = v1;
    uint64_t v37 = a1 + 32;
    while (1)
    {
      unint64_t v6 = *(void **)(v37 + 8 * v4);
      uint64_t v7 = *(void *)(v3 + 40);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v10 = v9;
      Hasher.init(_seed:)(v38, v7);
      id v11 = v6;
      String.hash(into:)(v38, v8, v10);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease(v10);
      uint64_t v14 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v15 = v12 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v21 == v22)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_4:

          goto LABEL_5;
        }

        uint64_t v24 = v22;
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21);
        swift_bridgeObjectRelease(v21);
        uint64_t result = (void *)swift_bridgeObjectRelease(v24);
        if ((v25 & 1) != 0) {
          goto LABEL_4;
        }
        uint64_t v26 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v26;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
          uint64_t v21 = v28;
          if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v21 == v29) {
            goto LABEL_3;
          }
          uint64_t v31 = v29;
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v21);
          swift_bridgeObjectRelease(v21);
          uint64_t result = (void *)swift_bridgeObjectRelease(v31);
          if ((v32 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      *(void *)(v5 + 8 * vswift_weakDestroy(v0 + 16) = v18 | v17;
      *(void *)(*(void *)(v3 + 48) + 8 * v15) = v11;
      uint64_t v33 = *(void *)(v3 + 16);
      BOOL v34 = __OFADD__(v33, 1LL);
      uint64_t v35 = v33 + 1;
      if (v34)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + swift_weakDestroy(v0 + 16) = v35;
LABEL_5:
      if (++v4 == v36) {
        return (void *)v3;
      }
    }
  }

  return &_swiftEmptySetSingleton;
}

uint64_t sub_10000C234(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100009FDC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t *sub_10000C274(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10000C2B4(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000C2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for SubmitEventsActivity.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s21CloudTelemetryService15TransparencyLogC10WriteErrorOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10000C3A0 + 4 * byte_100075D30[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10000C3C0 + 4 * byte_100075D35[v4]))();
  }
}

_BYTE *sub_10000C3A0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10000C3C0(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10000C3C8(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10000C3D0(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10000C3D8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10000C3E0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents.CodingKeys()
{
  return &type metadata for TransparencyLog.JustEvents.CodingKeys;
}

unint64_t sub_10000C400()
{
  unint64_t result = qword_100098E90[0];
  if (!qword_100098E90[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076010, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, qword_100098E90);
  }

  return result;
}

uint64_t sub_10000C444()
{
  return sub_10000C5E8( &qword_1000963F0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100076050);
}

uint64_t sub_10000C470()
{
  return sub_10000C5E8( &qword_1000963F8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100076370);
}

uint64_t sub_10000C49C()
{
  return sub_10000C5E8( &qword_100096400,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100076090);
}

unint64_t sub_10000C4CC()
{
  unint64_t result = qword_100099120;
  if (!qword_100099120)
  {
    unint64_t result = swift_getWitnessTable(&unk_100075F80, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100099120);
  }

  return result;
}

unint64_t sub_10000C514()
{
  unint64_t result = qword_100099128[0];
  if (!qword_100099128[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100075FA8, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, qword_100099128);
  }

  return result;
}

uint64_t sub_10000C558(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E657665LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665LL, 0xE600000000000000LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_10000C5D4()
{
  return 0x73746E657665LL;
}

uint64_t sub_10000C5E8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000C62C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for CachedSession(uint64_t a1)
{
  uint64_t result = qword_100099230;
  if (!qword_100099230) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CachedSession);
  }
  return result;
}

uint64_t sub_10000C6A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  __int128 v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + swift_weakDestroy(v0 + 16) = v8;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a5 + 48) = *(void *)(a1 + 48);
  *(void *)(a5 + 56) = a2;
  *(void *)(a5 + 64) = a3;
  *(double *)(a5 + 72) = a6;
  uint64_t v9 = type metadata accessor for CachedSession(0LL);
  uint64_t v10 = a5 + *(int *)(v9 + 28);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v10, a4, v11);
  uint64_t v13 = a5 + *(int *)(v9 + 32);
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return result;
}

uint64_t sub_10000C734@<X0>(uint64_t a1@<X8>)
{
  return sub_10000C62C(v1, a1);
}

uint64_t sub_10000C740()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

double sub_10000C76C()
{
  return *(double *)(v0 + 72);
}

uint64_t sub_10000C774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

unint64_t sub_10000C7B4(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 32)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 32) + 4) << 32);
}

uint64_t sub_10000C7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  v16[2] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for SHA256Digest(0LL);
  v16[4] = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v16[3] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    v16[1] = v5;
    static String.Encoding.utf8.getter(v9);
    String.data(using:allowLossyConversion:)(v11, 0LL, a1, a2);
    unint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v13 >> 60 != 15)
    {
      unint64_t v14 = sub_10000CBD0();
      dispatch thunk of HashFunction.init()(v4, v14);
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x10000CBACLL);
  }

  return arc4random_uniform(0x2710u);
}

unint64_t sub_10000CBD0()
{
  unint64_t result = qword_1000964E0;
  if (!qword_1000964E0)
  {
    uint64_t v1 = type metadata accessor for SHA256(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SHA256, v1);
    atomic_store(result, (unint64_t *)&qword_1000964E0);
  }

  return result;
}

int8x16_t *sub_10000CC18@<X0>(int8x16_t *result@<X0>, uint64_t a2@<X1>, int8x8_t *a3@<X8>)
{
  if (!result
    || (a2 - (uint64_t)result >= 0 ? (uint64_t v3 = a2 - (void)result) : (uint64_t v3 = a2 - (void)result + 7),
        (unint64_t)(a2 - (void)result + 7) < 0xF))
  {
    *a3 = 0LL;
    return result;
  }

  unint64_t v4 = ((v3 >> 3) - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v4 >= 3)
  {
    unint64_t v7 = v4 + 1;
    uint64_t v8 = (v4 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v6 = &result->i64[v8];
    uint64_t v9 = result + 1;
    int8x16_t v10 = 0uLL;
    uint64_t v11 = v8;
    int8x16_t v12 = 0uLL;
    do
    {
      int8x16_t v10 = veorq_s8(v9[-1], v10);
      int8x16_t v12 = veorq_s8(*v9, v12);
      v9 += 2;
      v11 -= 4LL;
    }

    while (v11);
    int8x16_t v13 = veorq_s8(v12, v10);
    int8x8_t v5 = veor_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    if (v7 == v8) {
      goto LABEL_14;
    }
  }

  else
  {
    int8x8_t v5 = 0LL;
    uint64_t v6 = (uint64_t *)result;
  }

  unint64_t v14 = (uint64_t *)((char *)result->i64 + (v3 & 0xFFFFFFFFFFFFFFF8LL));
  do
  {
    uint64_t v15 = *v6++;
    *(void *)&v5 ^= v15;
  }

  while (v6 != v14);
LABEL_14:
  *a3 = v5;
  return result;
}

uint64_t sub_10000CCC8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10000CCE4()
{
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  swift_defaultActor_initialize();
  return v1;
}

uint64_t sub_10000CD18(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  unint64_t v13 = sub_10000CBD0();
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10000CDC4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000A0B8(result, a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SessionUser(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SessionUser(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SessionUser(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10000CE38(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000CE54(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }

  else
  {
    *(_BYTE *)(result + 4) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for SessionUser()
{
  return &type metadata for SessionUser;
}

void *sub_10000CE84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a2[8];
    uint64_t v12 = a2[9];
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v22 = a1 + v13;
    uint64_t v14 = (uint64_t)a2 + v13;
    *(void *)(a1 + 56) = v10;
    uint64_t v15 = type metadata accessor for Date(0LL);
    unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v16(v22, v14, v15);
    uint64_t v17 = *(int *)(a3 + 32);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    void v18[4] = *(_BYTE *)(v19 + 4);
  }

  return v4;
}

uint64_t sub_10000CFA0(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_10000D000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + 56) = v8;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  return a1;
}

uint64_t sub_10000D0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  char v21 = *(_BYTE *)(v20 + 4);
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v21;
  return a1;
}

uint64_t sub_10000D208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  return a1;
}

uint64_t sub_10000D2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_10000D388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000D394);
}

uint64_t sub_10000D394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_10000D410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000D41C);
}

uint64_t sub_10000D41C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10000D490(uint64_t a1)
{
  v4[0] = "8";
  v4[1] = &unk_1000761E8;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_100076200;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for Session()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService7Session);
}

uint64_t sub_10000D544()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ECA8);
  sub_100009FC4(v0, (uint64_t)qword_10009ECA8);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x72756769666E6F63LL,  0xED00006E6F697461LL);
}

void sub_10000D5C4(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

unint64_t sub_10000D614()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
  return 0xD00000000000001FLL;
}

void sub_10000D71C()
{
}

uint64_t type metadata accessor for StorebagCloudKitSigningConfiguration(uint64_t a1)
{
  uint64_t result = qword_100099350;
  if (!qword_100099350) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StorebagCloudKitSigningConfiguration);
  }
  return result;
}

uint64_t sub_10000D764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  type metadata accessor for Throttle(0LL);
  sub_10004F4A0(a1, (uint64_t)v11);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  }
  uint64_t v13 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v13(a2, v11, v5);
  sub_10003E288(a1, (void *)0x72756769666E6F63LL, 0xEF2F736E6F697461LL, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  uint64_t v14 = type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a2 + *(int *)(v14 + 20), v9, v5);
}

uint64_t sub_10000D8CC()
{
  uint64_t v120 = type metadata accessor for Date(0LL);
  uint64_t v121 = *(void *)(v120 - 8);
  uint64_t v0 = __chkstk_darwin(v120);
  BOOL v118 = (char *)&v112 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v119 = (char *)&v112 - v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v112 - v4;
  uint64_t v6 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100009FDC(&qword_1000972A0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v112 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v112 - v17;
  uint64_t v19 = type metadata accessor for URL(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v122 = v19;
  uint64_t v123 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x800000010007A540LL, 0LL);
  uint64_t v23 = v22;
  Swift::Bool v24 = URL.checkResourceIsReachable()();
  if (v25)
  {
    swift_errorRelease(v25);
LABEL_5:
    if (qword_100099240 != -1) {
      swift_once(&qword_100099240, sub_10000D544);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_100009FC4(v32, (uint64_t)qword_10009ECA8);
    BOOL v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "configuration does not exist", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v37 = v122;
    unint64_t v38 = *(void (**)(char *, uint64_t))(v123 + 8);
    unint64_t v39 = v23;
    goto LABEL_10;
  }

  uint64_t v113 = v16;
  uint64_t v114 = v7;
  uint64_t v115 = v13;
  uint64_t v117 = v5;
  uint64_t v116 = v18;
  if (!v24) {
    goto LABEL_5;
  }
  uint64_t v26 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v26, v131);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  uint64_t v28 = NSURLContentModificationDateKey;
  uint64_t v29 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v30);
  uint64_t v31 = v23;
  URL.resourceValues(forKeys:)(v29);
  uint64_t v42 = swift_bridgeObjectRelease(v29);
  unint64_t v43 = v113;
  URLResourceValues.contentModificationDate.getter(v42);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v9, v6);
  uint64_t v44 = v121;
  uint64_t v45 = v120;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48))(v43, 1LL, v120);
  if ((_DWORD)result != 1)
  {
    uint64_t v46 = (uint64_t)v116;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v116, v43, v45);
    uint64_t v48 = v122;
    uint64_t v47 = v123;
    uint64_t v49 = (uint64_t)v115;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v46, 0LL, 1LL, v45);
    sub_1000116B8(v46, v49);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v49, 1LL, v45) == 1)
    {
      sub_10000C234(v49, &qword_1000972A0);
      if (qword_100099240 != -1) {
        swift_once(&qword_100099240, sub_10000D544);
      }
      uint64_t v50 = type metadata accessor for Logger(0LL);
      uint64_t v51 = sub_100009FC4(v50, (uint64_t)qword_10009ECA8);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "unable to determine configuration creation date", v54, 2u);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

LABEL_31:
      sub_10000C234(v46, &qword_1000972A0);
      unint64_t v38 = *(void (**)(char *, uint64_t))(v47 + 8);
LABEL_32:
      unint64_t v39 = v31;
      uint64_t v37 = v48;
LABEL_10:
      v38(v39, v37);
      return 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v117, v49, v45);
    uint64_t v40 = Data.init(contentsOf:options:)(v23, 0LL);
    unint64_t v56 = v55;
    unint64_t v57 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    sub_10000A0B8(v40, v56);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    *(void *)&__int128 v129 = 0LL;
    id v59 = [v57 propertyListWithData:isa options:0 format:0 error:&v129];

    uint64_t v60 = v129;
    if (v59)
    {
      id v61 = (id)v129;
      _bridgeAnyObjectToAny(_:)(&v129, v59);
      swift_unknownObjectRelease(v59);
      uint64_t v62 = sub_100009FDC(&qword_100096630);
      if ((swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, v62, 6LL) & 1) != 0)
      {
        double v63 = v127;
        if (*(void *)(*(void *)&v127 + 16LL))
        {
          unint64_t v64 = sub_100010540(0xD000000000000016LL, 0x800000010007A560LL);
          uint64_t v65 = v117;
          uint64_t v66 = v119;
          uint64_t v67 = v118;
          if ((v68 & 1) != 0)
          {
            sub_10000C2D4(*(void *)(*(void *)&v63 + 56LL) + 32 * v64, (uint64_t)&v129);
          }

          else
          {
            __int128 v129 = 0u;
            __int128 v130 = 0u;
          }
        }

        else
        {
          __int128 v129 = 0u;
          __int128 v130 = 0u;
          uint64_t v65 = v117;
          uint64_t v66 = v119;
          uint64_t v67 = v118;
        }

        swift_bridgeObjectRelease(*(void *)&v63);
        if (*((void *)&v130 + 1))
        {
          uint64_t v77 = swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
          if ((v77 & 1) != 0)
          {
            double v78 = v127;
            char v128 = 0;
            if (v127 <= 31536000.0 && v127 >= 3600.0) {
              goto LABEL_44;
            }
            double v127 = 86400.0;
            char v128 = 0;
LABEL_43:
            double v78 = 86400.0;
LABEL_44:
            uint64_t v80 = Date.advanced(by:)(v77, v78);
            static Date.now.getter(v80);
            char v81 = static Date.< infix(_:_:)(v66, v67);
            uint64_t v82 = *(void (**)(char *, uint64_t))(v121 + 8);
            uint64_t v83 = v67;
            uint64_t v84 = v120;
            v82(v83, v120);
            if ((v81 & 1) == 0)
            {
              sub_10000A074(v40, v56);
              v82(v66, v84);
              v82(v65, v84);
              sub_10000C234(v46, &qword_1000972A0);
              (*(void (**)(char *, uint64_t))(v123 + 8))(v31, v48);
              return v40;
            }

            if (qword_100099240 != -1) {
              swift_once(&qword_100099240, sub_10000D544);
            }
            uint64_t v85 = type metadata accessor for Logger(0LL);
            uint64_t v86 = sub_100009FC4(v85, (uint64_t)qword_10009ECA8);
            uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
            os_log_type_t v88 = static os_log_type_t.default.getter(v87);
            if (os_log_type_enabled(v87, v88))
            {
              uint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v89 = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "removing expired config", v89, 2u);
              swift_slowDealloc(v89, -1LL, -1LL);
            }

            id v90 = [(id)objc_opt_self(NSFileManager) defaultManager];
            URL._bridgeToObjectiveC()(v91);
            unint64_t v93 = v92;
            *(void *)&__int128 v129 = 0LL;
            unsigned int v94 = [v90 removeItemAtURL:v92 error:&v129];

            uint64_t v95 = v129;
            if (v94)
            {
              id v96 = (id)v129;
              sub_10000A074(v40, v56);
              sub_10000A074(v40, v56);
              uint64_t v97 = v120;
              v82(v119, v120);
              v82(v117, v97);
              uint64_t v98 = v46;
            }

            else
            {
              id v99 = (id)v129;
              uint64_t v100 = _convertNSErrorToError(_:)(v95);

              swift_willThrow(v101);
              swift_errorRetain(v100);
              uint64_t v102 = swift_errorRetain(v100);
              uint64_t v103 = (os_log_s *)Logger.logObject.getter(v102);
              int v104 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v103, (os_log_type_t)v104))
              {
                uint64_t v105 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v121 = swift_slowAlloc(32LL, -1LL);
                *(void *)&__int128 v129 = v121;
                *(_DWORD *)uint64_t v105 = 136446210;
                BOOL v118 = (char *)(v105 + 4);
                swift_getErrorValue(v100, v126, v125);
                uint64_t v106 = Error.localizedDescription.getter(v125[1], v125[2]);
                unint64_t v108 = v107;
                uint64_t v124 = sub_100009984(v106, v107, (uint64_t *)&v129);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v118, v105 + 12);
                swift_bridgeObjectRelease(v108);
                swift_errorRelease(v100);
                swift_errorRelease(v100);
                _os_log_impl( (void *)&_mh_execute_header,  v103,  (os_log_type_t)v104,  "failed to remove expired configuration: %{public}s",  v105,  0xCu);
                uint64_t v109 = v121;
                swift_arrayDestroy(v121, 1LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v109, -1LL, -1LL);
                swift_slowDealloc(v105, -1LL, -1LL);
                sub_10000A074(v40, v56);

                swift_errorRelease(v100);
                sub_10000A074(v40, v56);
                uint64_t v110 = v120;
                v82(v119, v120);
                v82(v117, v110);
                sub_10000C234((uint64_t)v116, &qword_1000972A0);
                (*(void (**)(char *, uint64_t))(v123 + 8))(v31, v122);
                return 0LL;
              }

              sub_10000A074(v40, v56);

              swift_errorRelease(v100);
              swift_errorRelease(v100);
              swift_errorRelease(v100);
              sub_10000A074(v40, v56);
              uint64_t v111 = v120;
              v82(v119, v120);
              v82(v117, v111);
              uint64_t v98 = (uint64_t)v116;
            }

            sub_10000C234(v98, &qword_1000972A0);
            unint64_t v38 = *(void (**)(char *, uint64_t))(v123 + 8);
            goto LABEL_32;
          }

          double v127 = 0.0;
          char v79 = v77 ^ 1;
        }

        else
        {
          uint64_t v77 = sub_10000C234((uint64_t)&v129, &qword_100096638);
          double v127 = 0.0;
          char v79 = 1;
        }

        char v128 = v79;
        goto LABEL_43;
      }
    }

    else
    {
      id v69 = (id)v129;
      uint64_t v70 = _convertNSErrorToError(_:)(v60);

      swift_willThrow(v71);
      swift_errorRelease(v70);
    }

    if (qword_100099240 != -1) {
      swift_once(&qword_100099240, sub_10000D544);
    }
    uint64_t v72 = type metadata accessor for Logger(0LL);
    uint64_t v73 = sub_100009FC4(v72, (uint64_t)qword_10009ECA8);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "failed to parse configuration", v76, 2u);
      swift_slowDealloc(v76, -1LL, -1LL);
    }

    sub_10000A074(v40, v56);

    sub_10000A074(v40, v56);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v117, v45);
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000E670()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for URLRequest(0LL);
  v1[17] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[18] = v3;
  v1[19] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100009FDC(&qword_100096350);
  v1[20] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  v1[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[22] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[23] = swift_task_alloc(v7);
  v1[24] = swift_task_alloc(v7);
  v1[25] = swift_task_alloc(v7);
  return swift_task_switch(sub_10000E764, 0LL);
}

uint64_t sub_10000E764()
{
  uint64_t v1 = sub_10000D8CC();
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    type metadata accessor for Throttle(0LL);
    URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x800000010007A4A0LL);
    uint64_t v4 = sub_10004F428(v3);
    *(void *)(v0 + 208) = v4;
    uint64_t v5 = *(int **)(*(void *)v4 + 160LL);
    uint64_t v6 = *v5;
    unint64_t v7 = (void *)swift_task_alloc(v5[1]);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v7;
    void *v7 = v0;
    v7[1] = sub_10000E8D0;
    return ((uint64_t (*)(void))((char *)v5 + v6))();
  }

  else
  {
    uint64_t v9 = v1;
    unint64_t v10 = v2;
    uint64_t v11 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v9, v10);
  }

uint64_t sub_10000E8D0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  *(_BYTE *)(*(void *)v1 + 32Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000E958, 0LL);
}

void sub_10000E958()
{
  if ((*(_BYTE *)(v0 + 320) & 1) != 0)
  {
    if (qword_100099240 != -1) {
      swift_once(&qword_100099240, sub_10000D544);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_100009FC4(v1, (uint64_t)qword_10009ECA8);
    *(void *)(v0 + 224) = v2;
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "fetching configuration from server", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 160);

    URL.init(string:)(0xD000000000000070LL, 0x800000010007A4C0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6) == 1)
    {
      __break(1u);
    }

    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 176) + 32LL))( *(void *)(v0 + 192),  *(void *)(v0 + 160),  *(void *)(v0 + 168));
      uint64_t v9 = RequestOptions.globalRequestOptions.unsafeMutableAddressor();
      swift_beginAccess(v9, v0 + 48, 0LL, 0LL);
      uint64_t v10 = *v9;
      uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
      swift_retain(v10);
      id v12 = [v11 mainBundle];
      id v13 = [v12 bundleIdentifier];

      if (v13)
      {
        uint64_t v15 = *(void *)(v0 + 192);
        uint64_t v14 = *(void *)(v0 + 200);
        uint64_t v16 = *(void *)(v0 + 168);
        uint64_t v17 = *(void *)(v0 + 176);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

        __int16 v18 = sub_10005855C(1, 1);
        uint64_t v20 = v19;
        id v21 = sub_10004F268(v18 & 0x101);
        *(void *)(v0 + 232) = v21;
        swift_bridgeObjectRelease(v20);
        swift_release(v10);
        [v21 setTlsPinning:1];
        *(void *)(v0 + 240) = [objc_allocWithZone(C2RequestManager) init];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v14, v15, v16);
        URLRequest.init(url:cachePolicy:timeoutInterval:)(v14, 0LL, 60.0);
        uint64_t v22 = (void *)swift_task_alloc(async function pointer to C2RequestManager.data(for:options:)[1]);
        *(void *)(v0 + 248) = v22;
        *uint64_t v22 = v0;
        v22[1] = sub_10000ED8C;
        C2RequestManager.data(for:options:)(*(void *)(v0 + 152), v21);
        return;
      }
    }

    __break(1u);
  }

  else
  {
    if (qword_100099240 != -1) {
      swift_once(&qword_100099240, sub_10000D544);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_100009FC4(v23, (uint64_t)qword_10009ECA8);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "configuration fetch throttled", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    unint64_t v28 = sub_1000104FC();
    uint64_t v29 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v28, 0LL, 0LL);
    *(void *)uint64_t v30 = 0LL;
    *(void *)(v30 + 8) = 0LL;
    *(_BYTE *)(v30 + swift_weakDestroy(v0 + 16) = 3;
    uint64_t v32 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 208);
    uint64_t v34 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 152);
    uint64_t v35 = *(void *)(v0 + 160);
    swift_willThrow(v29);
    swift_release(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
  }

uint64_t sub_10000ED8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 248LL);
  v5[32] = a1;
  v5[33] = a2;
  v5[34] = a3;
  v5[35] = v3;
  swift_task_dealloc(v6);
  uint64_t v7 = (void *)v5[30];
  (*(void (**)(void, void))(v5[18] + 8LL))(v5[19], v5[17]);

  if (v3) {
    uint64_t v8 = sub_10000F674;
  }
  else {
    uint64_t v8 = sub_10000EE60;
  }
  return swift_task_switch(v8, 0LL);
}

uint64_t sub_10000EE60()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
  uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = *(id *)(v0 + 272);
    if ((uint64_t)[v4 statusCode] < 200 || (uint64_t)objc_msgSend(v4, "statusCode") >= 300)
    {
      unint64_t v23 = *(void *)(v0 + 264);
      uint64_t v24 = *(void **)(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 256);
      os_log_type_t v26 = *(void **)(v0 + 232);
      uint64_t v27 = *(void *)(v0 + 176);
      id v28 = [v4 statusCode];
      unint64_t v29 = sub_1000104FC();
      uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v29, 0LL, 0LL);
      *(void *)uint64_t v30 = v28;
      *(void *)(v30 + 8) = 0LL;
      *(_BYTE *)(v30 + swift_weakDestroy(v0 + 16) = 2;
      swift_willThrow(v16);

      sub_10000A074(v25, v23);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      goto LABEL_13;
    }
  }

  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 104) = 0LL;
  id v8 = [v6 propertyListWithData:isa options:0 format:0 error:v0 + 104];

  uint64_t v9 = *(void **)(v0 + 104);
  if (!v8)
  {
    unint64_t v31 = *(void *)(v0 + 264);
    uint64_t v32 = *(void **)(v0 + 272);
    uint64_t v33 = *(void *)(v0 + 256);
    uint64_t v34 = *(void **)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 176);
    id v36 = v9;
    uint64_t v16 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v37);
    uint64_t v38 = v33;
LABEL_12:
    sub_10000A074(v38, v31);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    goto LABEL_13;
  }

  id v10 = v9;
  _bridgeAnyObjectToAny(_:)((void *)(v0 + 16), v8);
  swift_unknownObjectRelease(v8);
  uint64_t v11 = sub_100009FDC(&qword_100096630);
  if (!swift_dynamicCast(v0 + 120, v0 + 16, (char *)&type metadata for Any + 8, v11, 6LL))
  {
    unint64_t v31 = *(void *)(v0 + 264);
    uint64_t v32 = *(void **)(v0 + 272);
    uint64_t v39 = *(void *)(v0 + 256);
    uint64_t v34 = *(void **)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 176);
    unint64_t v40 = sub_1000104FC();
    uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v40, 0LL, 0LL);
    *(void *)uint64_t v41 = 0xD000000000000028LL;
    *(void *)(v41 + 8) = 0x800000010007A360LL;
    *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 0;
    swift_willThrow(v16);
    uint64_t v38 = v39;
    goto LABEL_12;
  }

  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x800000010007A540LL, 0LL);
  Data.write(to:options:)(v15, 0LL, v14, v13);
  if (!v12)
  {
    uint64_t v55 = *(void *)(v0 + 208);
    uint64_t v56 = *(void *)(v0 + 184);
    uint64_t v57 = *(void *)(v0 + 168);
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 176) + 8LL);
    *(void *)(v0 + 288) = v58;
    v58(v56, v57);
    uint64_t v50 = *(int **)(*(void *)v55 + 152LL);
    uint64_t v51 = *v50;
    uint64_t v52 = (void *)swift_task_alloc(v50[1]);
    *(void *)(v0 + 296) = v52;
    os_log_type_t v53 = sub_10000F368;
    goto LABEL_17;
  }

  uint64_t v16 = v12;
  uint64_t v17 = *(void **)(v0 + 272);
  __int16 v18 = *(void **)(v0 + 232);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 184);
  uint64_t v21 = *(void *)(v0 + 168);
  sub_10000A074(*(void *)(v0 + 256), *(void *)(v0 + 264));

  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v22(v19, v21);
LABEL_13:
  *(void *)(v0 + 304) = v16;
  v22(*(void *)(v0 + 192), *(void *)(v0 + 168));
  swift_errorRetain(v16);
  uint64_t v42 = swift_errorRetain(v16);
  unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    swift_getErrorValue(v16, v0 + 112, v0 + 72);
    uint64_t v47 = Error.localizedDescription.getter(*(void *)(v0 + 80), *(void *)(v0 + 88));
    unint64_t v49 = v48;
    *(void *)(v0 + 96) = sub_100009984(v47, v48, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v49);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "failed to fetch configuration from server with error (%s)",  v45,  0xCu);
    swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v50 = *(int **)(**(void **)(v0 + 208) + 168LL);
  uint64_t v51 = *v50;
  uint64_t v52 = (void *)swift_task_alloc(v50[1]);
  *(void *)(v0 + 312) = v52;
  os_log_type_t v53 = sub_10000F538;
LABEL_17:
  void *v52 = v0;
  v52[1] = v53;
  return ((uint64_t (*)(void))((char *)v50 + v51))();
}

uint64_t sub_10000F368()
{
  return swift_task_switch(sub_10000F3E8, 0LL);
}

uint64_t sub_10000F3E8()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "successfully fetched configuration from server", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  id v5 = *(void **)(v0 + 272);
  uint64_t v6 = *(void **)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 168);

  swift_release(v7);
  v4(v8, v9);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v11);
}

uint64_t sub_10000F538()
{
  return swift_task_switch(sub_10000F5B8, 0LL);
}

uint64_t sub_10000F5B8()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  swift_willThrow();
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F674()
{
  uint64_t v1 = *(void *)(v0 + 176);

  uint64_t v2 = *(void (**)(void, void))(v1 + 8);
  uint64_t v3 = *(void *)(v0 + 280);
  *(void *)(v0 + 304) = v3;
  v2(*(void *)(v0 + 192), *(void *)(v0 + 168));
  swift_errorRetain(v3);
  uint64_t v4 = swift_errorRetain(v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue(v3, v0 + 112, v0 + 72);
    uint64_t v9 = Error.localizedDescription.getter(*(void *)(v0 + 80), *(void *)(v0 + 88));
    unint64_t v11 = v10;
    *(void *)(v0 + 96) = sub_100009984(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "failed to fetch configuration from server with error (%s)",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  uint64_t v12 = *(int **)(**(void **)(v0 + 208) + 168LL);
  uint64_t v13 = *v12;
  uint64_t v14 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v0 + 312) = v14;
  void *v14 = v0;
  v14[1] = sub_10000F538;
  return ((uint64_t (*)(void))((char *)v12 + v13))();
}

unint64_t sub_10000F884(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_1000966E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  os_log_type_t v6 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_1000105A4((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v12) = v8;
    *(void *)(v4[7] + v12) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000F98C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100096624);
  *(void *)(v0 + 288) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000F9FC;
  return sub_10000E670();
}

uint64_t sub_10000F9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*v3 + 288);
  uint64_t v5 = *v3;
  *(void *)(v5 + 296) = a1;
  *(void *)(v5 + 304) = a2;
  swift_task_dealloc(v4);
  if (v2) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else {
    return swift_task_switch(sub_10000FAB4, 0LL);
  }
}

uint64_t sub_10000FAB4()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 232) = 0LL;
  id v3 = [v1 propertyListWithData:isa options:0 format:0 error:v0 + 232];

  uint64_t v4 = *(void **)(v0 + 232);
  if (!v3)
  {
    id v10 = v4;
    uint64_t v11 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v12);
    swift_errorRelease(v11);
    goto LABEL_7;
  }

  id v5 = v4;
  _bridgeAnyObjectToAny(_:)((void *)(v0 + 48), v3);
  swift_unknownObjectRelease(v3);
  uint64_t v6 = sub_100009FDC(&qword_100096630);
  if ((swift_dynamicCast(v0 + 264, v0 + 48, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
  {
LABEL_7:
    uint64_t v14 = *(void *)(v0 + 296);
    unint64_t v13 = *(void *)(v0 + 304);
    unint64_t v15 = sub_1000104FC();
    uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v15, 0LL, 0LL);
    *(void *)uint64_t v17 = 0xD000000000000028LL;
    *(void *)(v17 + 8) = 0x800000010007A360LL;
LABEL_72:
    *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 0;
    swift_willThrow(v16);
    sub_10000A074(v14, v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v7 = *(void *)(v0 + 264);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100010540(0x67616265726F7453LL, 0xE800000000000000LL), (v9 & 1) != 0))
  {
    sub_10000C2D4(*(void *)(v7 + 56) + 32 * v8, v0 + 112);
  }

  else
  {
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
  }

  swift_bridgeObjectRelease(v7);
  if (!*(void *)(v0 + 136))
  {
    sub_10000C234(v0 + 112, &qword_100096638);
    goto LABEL_15;
  }

  if ((swift_dynamicCast(v0 + 256, v0 + 112, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
  {
LABEL_15:
    uint64_t v14 = *(void *)(v0 + 296);
    unint64_t v13 = *(void *)(v0 + 304);
    unint64_t v21 = sub_1000104FC();
    uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v21, 0LL, 0LL);
    uint64_t v22 = "failed to parse configuration, missing or unexpected type for Storebag key";
    unint64_t v23 = 0xD00000000000004ALL;
LABEL_71:
    *(void *)uint64_t v17 = v23;
    *(void *)(v17 + 8) = (unint64_t)(v22 - 32) | 0x8000000000000000LL;
    goto LABEL_72;
  }

  uint64_t v18 = *(void *)(v0 + 256);
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_100010540(0x676E696E676953LL, 0xE700000000000000LL), (v20 & 1) != 0))
  {
    sub_10000C2D4(*(void *)(v18 + 56) + 32 * v19, v0 + 176);
  }

  else
  {
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }

  swift_bridgeObjectRelease(v18);
  if (!*(void *)(v0 + 200))
  {
    sub_10000C234(v0 + 176, &qword_100096638);
    goto LABEL_23;
  }

  if ((swift_dynamicCast(v0 + 248, v0 + 176, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
  {
LABEL_23:
    uint64_t v14 = *(void *)(v0 + 296);
    unint64_t v13 = *(void *)(v0 + 304);
    unint64_t v27 = sub_1000104FC();
    uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v27, 0LL, 0LL);
    uint64_t v22 = "failed to parse configuration, missing or unexpected type for Signing key";
    unint64_t v23 = 0xD000000000000049LL;
    goto LABEL_71;
  }

  uint64_t v24 = *(void *)(v0 + 248);
  if (*(void *)(v24 + 16) && (unint64_t v25 = sub_100010540(0x6D6E6F7269766E45LL, 0xEB00000000746E65LL), (v26 & 1) != 0))
  {
    sub_10000C2D4(*(void *)(v24 + 56) + 32 * v25, v0 + 16);
  }

  else
  {
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }

  swift_bridgeObjectRelease(v24);
  if (!*(void *)(v0 + 40))
  {
    sub_10000C234(v0 + 16, &qword_100096638);
    goto LABEL_70;
  }

  if ((swift_dynamicCast(v0 + 240, v0 + 16, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
  {
LABEL_70:
    uint64_t v14 = *(void *)(v0 + 296);
    unint64_t v13 = *(void *)(v0 + 304);
    unint64_t v53 = sub_1000104FC();
    uint64_t v16 = swift_allocError(&type metadata for StorebagCloudKitSigningConfiguration.Error, v53, 0LL, 0LL);
    uint64_t v22 = "failed to parse configuration, missing or unexpected type for Environment key";
    unint64_t v23 = 0xD00000000000004DLL;
    goto LABEL_71;
  }

  uint64_t v28 = *(void *)(v0 + 240);
  if (*(void *)(v28 + 16))
  {
    unint64_t v29 = sub_100010540(0x64756F6C4369LL, 0xE600000000000000LL);
    if ((v30 & 1) != 0)
    {
      sub_10000C2D4(*(void *)(v28 + 56) + 32 * v29, v0 + 144);
      if ((swift_dynamicCast(v0 + 280, v0 + 144, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
      {
        uint64_t v31 = *(void *)(v0 + 280);
        unint64_t v32 = sub_100010B38(v31);
        swift_bridgeObjectRelease(v31);
        sub_10001021C(v32);
      }
    }
  }

  uint64_t v33 = sub_10003D184();
  swift_beginAccess(v33, v0 + 208, 0LL, 0LL);
  if (*v33 == 1)
  {
    uint64_t v34 = (_OWORD *)(v0 + 80);
    uint64_t v56 = v28 + 64;
    uint64_t v55 = (uint64_t *)(v0 + 272);
    uint64_t v35 = -1LL;
    uint64_t v36 = -1LL << *(_BYTE *)(v28 + 32);
    if (-v36 < 64) {
      uint64_t v35 = ~(-1LL << -(char)v36);
    }
    unint64_t v37 = v35 & *(void *)(v28 + 64);
    int64_t v38 = (unint64_t)(63 - v36) >> 6;
    swift_bridgeObjectRetain(v28);
    int64_t v39 = 0LL;
    while (1)
    {
      do
      {
        if (v37)
        {
          unint64_t v40 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          unint64_t v41 = v40 | (v39 << 6);
        }

        else
        {
          int64_t v42 = v39 + 1;
          if (__OFADD__(v39, 1LL))
          {
            __break(1u);
            goto LABEL_76;
          }

          if (v42 >= v38) {
            goto LABEL_73;
          }
          unint64_t v43 = *(void *)(v56 + 8 * v42);
          ++v39;
          if (!v43)
          {
            int64_t v39 = v42 + 1;
            if (v42 + 1 >= v38) {
              goto LABEL_73;
            }
            unint64_t v43 = *(void *)(v56 + 8 * v39);
            if (!v43)
            {
              int64_t v39 = v42 + 2;
              if (v42 + 2 >= v38) {
                goto LABEL_73;
              }
              unint64_t v43 = *(void *)(v56 + 8 * v39);
              if (!v43)
              {
                int64_t v39 = v42 + 3;
                if (v42 + 3 >= v38) {
                  goto LABEL_73;
                }
                unint64_t v43 = *(void *)(v56 + 8 * v39);
                if (!v43)
                {
                  int64_t v39 = v42 + 4;
                  if (v42 + 4 >= v38) {
                    goto LABEL_73;
                  }
                  unint64_t v43 = *(void *)(v56 + 8 * v39);
                  if (!v43)
                  {
                    int64_t v44 = v42 + 5;
                    if (v44 >= v38)
                    {
LABEL_73:
                      swift_release(v28);
                      goto LABEL_74;
                    }

                    unint64_t v43 = *(void *)(v56 + 8 * v44);
                    if (!v43)
                    {
                      while (1)
                      {
                        int64_t v39 = v44 + 1;
                        if (__OFADD__(v44, 1LL)) {
                          break;
                        }
                        if (v39 >= v38) {
                          goto LABEL_73;
                        }
                        unint64_t v43 = *(void *)(v56 + 8 * v39);
                        ++v44;
                        if (v43) {
                          goto LABEL_56;
                        }
                      }

LABEL_76:
                      __break(1u);
                    }

                    int64_t v39 = v44;
                  }
                }
              }
            }
          }

  swift_release(v89);
  swift_bridgeObjectRelease(v89);
  double v127 = v0[26];
  char v128 = v0[27];
  __int128 v130 = v0[24];
  __int128 v129 = v0[25];
  uint64_t v131 = v0[23];
  uint64_t v132 = v0[20];

  swift_task_dealloc(v128);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  return ((uint64_t (*)(void))v0[1])();
}

  char v81 = *(void *)(v0 + 120);
  uint64_t v82 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

LABEL_56:
          unint64_t v37 = (v43 - 1) & v43;
          unint64_t v41 = __clz(__rbit64(v43)) + (v39 << 6);
        }

        uint64_t v45 = (uint64_t *)(*(void *)(v28 + 48) + 16 * v41);
        uint64_t v46 = *v45;
        uint64_t v47 = v45[1];
        BOOL v48 = *v45 == 0x64756F6C4369LL && v47 == 0xE600000000000000LL;
      }

      while (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(v46, v47) & 1) != 0);
      if (!*(void *)(v28 + 16)) {
        break;
      }
      swift_bridgeObjectRetain(v47);
      unint64_t v49 = sub_100010540(v46, v47);
      if ((v50 & 1) != 0)
      {
        sub_10000C2D4(*(void *)(v28 + 56) + 32 * v49, v0 + 80);
      }

      else
      {
        *uint64_t v34 = 0u;
        *(_OWORD *)(v0 + 96) = 0u;
      }

      swift_bridgeObjectRelease(v47);
      if (*(void *)(v0 + 104))
      {
        if ((swift_dynamicCast(v55, v0 + 80, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
        {
          uint64_t v51 = *v55;
          unint64_t v52 = sub_100010B38(*v55);
          swift_bridgeObjectRelease(v51);
          sub_10001021C(v52);
        }
      }

      else
      {
LABEL_36:
        sub_10000C234(v0 + 80, &qword_100096638);
      }
    }

    *uint64_t v34 = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    goto LABEL_36;
  }

LABEL_74:
  sub_10000A074(*(void *)(v0 + 296), *(void *)(v0 + 304));
  swift_bridgeObjectRelease(v28);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10001021C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_10001084C(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000103D4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100076438, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100010410(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100076438, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100010458(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100076438, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1000104B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100076438, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

unint64_t sub_1000104FC()
{
  unint64_t result = qword_100096628;
  if (!qword_100096628)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007627C, &type metadata for StorebagCloudKitSigningConfiguration.Error);
    atomic_store(result, (unint64_t *)&qword_100096628);
  }

  return result;
}

unint64_t sub_100010540(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10001062C(a1, a2, v5);
}

unint64_t sub_1000105A4(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_10000C5E8( &qword_1000966E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100076438);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_10001070C(a1, v6);
}

unint64_t sub_10001062C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10001070C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    id v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_10000C5E8( &qword_1000966E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100076438);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_10001084C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100011614();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100009FDC(&qword_1000966C0);
          char v13 = sub_100010A44(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SecKey(0LL);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    id v15 = (v24 - 1) & v24;
    uint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    char v26 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(void *)(v42 + 72);
    char v30 = *(void *)(v9 + 56) + v29 * v22;
    if ((v43 & 1) != 0)
    {
      sub_100015684(v30, (uint64_t)v8);
    }

    else
    {
      sub_100030114(v30, (uint64_t)v8, type metadata accessor for ServiceEventValue);
      swift_bridgeObjectRetain(v27);
    }

    Hasher.init(_seed:)(v44, *(void *)(v11 + 40));
    String.hash(into:)(v44, v28, v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    char v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *char v20 = v28;
    v20[1] = v27;
    uint64_t result = sub_100015684((uint64_t)v8, *(void *)(v11 + 56) + v29 * v19);
    ++*(void *)(v11 + 16);
  }

  unint64_t v25 = v23 + 2;
  if (v25 < v40)
  {
    uint64_t v24 = v41[v25];
    if (!v24)
    {
      while (1)
      {
        uint64_t v18 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_43;
        }
        if (v18 >= v40) {
          goto LABEL_36;
        }
        uint64_t v24 = v41[v18];
        ++v25;
        if (v24) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v18 = v25;
    goto LABEL_23;
  }

    id v15 = (v24 - 1) & v24;
    uint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    char v26 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(void *)(v42 + 72);
    char v30 = *(void *)(v9 + 56) + v29 * v22;
    if ((v43 & 1) != 0)
    {
      sub_10003C218(v30, (uint64_t)v8);
    }

    else
    {
      sub_100030114(v30, (uint64_t)v8, type metadata accessor for CachedStorebag);
      swift_bridgeObjectRetain(v27);
    }

    Hasher.init(_seed:)(v44, *(void *)(v11 + 40));
    String.hash(into:)(v44, v28, v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    char v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *char v20 = v28;
    v20[1] = v27;
    uint64_t result = sub_10003C218((uint64_t)v8, *(void *)(v11 + 56) + v29 * v19);
    ++*(void *)(v11 + 16);
  }

  unint64_t v25 = v23 + 2;
  if (v25 < v40)
  {
    uint64_t v24 = v41[v25];
    if (!v24)
    {
      while (1)
      {
        uint64_t v18 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_43;
        }
        if (v18 >= v40) {
          goto LABEL_36;
        }
        uint64_t v24 = v41[v18];
        ++v25;
        if (v24) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v18 = v25;
    goto LABEL_23;
  }

    id v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    unint64_t v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    unint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    char v30 = *(void *)(v43 + 72);
    uint64_t v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_100028820(v31, (uint64_t)v8);
    }

    else
    {
      sub_100028864(v31, (uint64_t)v8);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v45, *(void *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    uint64_t result = Hasher._finalize()();
    unint64_t v32 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        int64_t v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    char v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *char v20 = v29;
    v20[1] = v28;
    uint64_t result = sub_100028820((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  uint64_t v3 = v40;
  uint64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v39 = 1LL << *(_BYTE *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v9);
  *uint64_t v3 = v11;
  return result;
}

LABEL_26:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      char v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            char v26 = 0LL;
          }
          v27 |= v29;
          char v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *id v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    char v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          char v26 = 0LL;
        }
        v27 |= v29;
        char v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *id v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  char v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    char v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    char v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

        uint64_t v9 = (v17 - 1) & v17;
        id v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }

      unint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
      char v20 = *(void *)(v6 + 40);
      unint64_t v21 = type metadata accessor for Client();
      uint64_t v22 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      unint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        char v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v10 + 8 * v25);
        }

        while (v29 == -1);
        char v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v9 = (v17 - 1) & v17;
    id v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    unint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    char v20 = *(void *)(v6 + 40);
    unint64_t v21 = type metadata accessor for Client();
    uint64_t v22 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
    swift_retain(v19);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    unint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      char v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v10 + 8 * v25);
      }

      while (v29 == -1);
      char v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  uint64_t v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    id v12 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    id v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_36;
    }
    uint64_t v17 = *(void *)(v31 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for StorebagEnvironment);
  __break(1u);
LABEL_27:
  uint64_t v46 = 0LL;
  uint64_t v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v44._object = (void *)0x800000010007BC90LL;
  v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)( &v49,  &v46,  &type metadata for StorebagEnvironment,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v45._uint64_t countAndFlagsBits = 39LL;
  v45._object = (void *)0xE100000000000000LL;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v46,  v47,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

      unint64_t v37 = sub_100009FDC(&qword_100098898);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v11, 1LL, 1LL, v37);
      uint64_t v24 = 0LL;
    }

    uint64_t v35 = *(void *)(v41 + 8 * v36);
    if (v35)
    {
LABEL_15:
      uint64_t v34 = v36;
LABEL_12:
      uint64_t v24 = (v35 - 1) & v35;
      char v30 = __clz(__rbit64(v35)) + (v34 << 6);
      char v20 = v34;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v34 >= v42)
    {
      char v20 = v40;
      goto LABEL_26;
    }

    uint64_t v35 = *(void *)(v41 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_12;
    }
  }

void (*sub_100010A44( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100010AC4(v6, a2, a3);
  return sub_100010A98;
}

void sub_100010A98(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_100010AC4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100010B30;
  }

  __break(1u);
  return result;
}

void sub_100010B30(id *a1)
{
}

unint64_t sub_100010B38(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0LL;
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  __int128 v46 = xmmword_100075D20;
  v47[0] = 0x654B63696C627550LL;
  v47[1] = 0xEF34366573614279LL;
  v47[2] = 0xD000000000000012LL;
  v47[3] = 0x800000010007A480LL;
  id v4 = (char *)&type metadata for Any + 8;
  do
  {
    char v5 = v2;
    if (!*(void *)(a1 + 16))
    {
      __int128 v44 = 0u;
      __int128 v45 = 0u;
LABEL_3:
      sub_10000C234((uint64_t)&v44, &qword_100096638);
      goto LABEL_4;
    }

    unint64_t v6 = &v47[2 * v3];
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    swift_bridgeObjectRetain(v8);
    unint64_t v9 = sub_100010540(v7, v8);
    if ((v10 & 1) != 0)
    {
      sub_10000C2D4(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v44);
    }

    else
    {
      __int128 v44 = 0u;
      __int128 v45 = 0u;
    }

    swift_bridgeObjectRelease(v8);
    if (!*((void *)&v45 + 1)) {
      goto LABEL_3;
    }
    if ((swift_dynamicCast(&v42, &v44, v4, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v11 = v43;
      uint64_t v12 = Data.init(base64Encoded:options:)(v42, v43, 0LL);
      if (v13 >> 60 == 15)
      {
        if (qword_100099240 != -1) {
          swift_once(&qword_100099240, sub_10000D544);
        }
        uint64_t v14 = type metadata accessor for Logger(0LL);
        uint64_t v15 = sub_100009FC4(v14, (uint64_t)qword_10009ECA8);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "failed to parse configuration, failed to read public key data",  v18,  2u);
          swift_slowDealloc(v18, -1LL, -1LL);
        }

        swift_bridgeObjectRelease(v11);
      }

      else
      {
        uint64_t v19 = v12;
        unint64_t v20 = v13;
        uint64_t v21 = sub_100009FDC(&qword_1000966D0);
        uint64_t inited = swift_initStackObject(v21, v41);
        *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
        *(void *)(inited + 32) = kSecAttrKeyType;
        *(void *)(inited + 40) = kSecAttrKeyTypeRSA;
        *(void *)(inited + 48) = kSecAttrKeyClass;
        *(void *)(inited + 56) = kSecAttrKeyClassPublic;
        unint64_t v23 = (id)kSecAttrKeyType;
        uint64_t v24 = (id)kSecAttrKeyTypeRSA;
        unint64_t v25 = (id)kSecAttrKeyClass;
        char v26 = (id)kSecAttrKeyClassPublic;
        sub_10000CDC4(v19, v20);
        unint64_t v27 = sub_10000F884(inited);
        Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
        type metadata accessor for CFString(0LL);
        sub_10000C5E8( &qword_1000966D8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100076464);
        unint64_t v29 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v27);
        SecKeyRef v30 = SecKeyCreateWithData(isa, v29, 0LL);

        if (v30)
        {
          sub_10000A060(v19, v20);
          sub_10000A060(v19, v20);
          swift_bridgeObjectRelease(v11);
          uint64_t v31 = v30;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v33 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v32 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v33 >= v32 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1LL);
          }
          uint64_t v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
          specialized Array._endMutation()(v34);

          id v4 = (char *)&type metadata for Any + 8;
        }

        else
        {
          if (qword_100099240 != -1) {
            swift_once(&qword_100099240, sub_10000D544);
          }
          uint64_t v35 = type metadata accessor for Logger(0LL);
          uint64_t v36 = sub_100009FC4(v35, (uint64_t)qword_10009ECA8);
          unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
          os_log_type_t v38 = static os_log_type_t.error.getter();
          id v4 = (char *)&type metadata for Any + 8;
          if (os_log_type_enabled(v37, v38))
          {
            int64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)int64_t v39 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "failed to parse configuration, failed to decode public key",  v39,  2u);
            swift_slowDealloc(v39, -1LL, -1LL);
            sub_10000A060(v19, v20);

            sub_10000A060(v19, v20);
            swift_bridgeObjectRelease(v11);
          }

          else
          {
            sub_10000A060(v19, v20);
            sub_10000A060(v19, v20);
            swift_bridgeObjectRelease(v11);
          }
        }
      }
    }

LABEL_4:
    char v2 = 1;
    uint64_t v3 = 1LL;
  }

  while ((v5 & 1) == 0);
  swift_arrayDestroy(v47, v46, &type metadata for String);
  return v48;
}

uint64_t *sub_10001103C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }

  return a1;
}

uint64_t sub_1000110D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_100011140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000111B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100011220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100011290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100011300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001130C);
}

uint64_t sub_10001130C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100011348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100011354);
}

uint64_t sub_100011354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_100011394(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100011400(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for StorebagCloudKitSigningConfiguration.Error(uint64_t a1)
{
  return sub_100011428(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100011428(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s21CloudTelemetryService36StorebagCloudKitSigningConfigurationV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100011400(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StorebagCloudKitSigningConfiguration.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100011400(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_100011428(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for StorebagCloudKitSigningConfiguration.Error(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for StorebagCloudKitSigningConfiguration.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100011428(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagCloudKitSigningConfiguration.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagCloudKitSigningConfiguration.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000115C0(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000115D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagCloudKitSigningConfiguration.Error()
{
  return &type metadata for StorebagCloudKitSigningConfiguration.Error;
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

unint64_t sub_100011614()
{
  unint64_t result = qword_1000966C8;
  if (!qword_1000966C8)
  {
    uint64_t v1 = sub_10000A140(&qword_1000966C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000966C8);
  }

  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void sub_100011674(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1000116B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_1000972A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011700()
{
  return sub_10000C5E8( &qword_1000966D8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100076464);
}

uint64_t sub_10001172C()
{
  return sub_10000C5E8( &qword_100096700,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100076338);
}

void *sub_100011758()
{
  return &unk_1000764F0;
}

void *sub_100011764()
{
  return &unk_1000764F8;
}

uint64_t sub_100011770()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ECC0);
  sub_100009FC4(v0, (uint64_t)qword_10009ECC0);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x2D646E656B636162LL,  0xEC00000070747468LL);
}

uint64_t sub_1000117EC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v15 = sub_10001501C(a1, a2, a3, a4, a5, a6, a7);
  swift_release(a1);
  swift_release(a3);

  return v15;
}

uint64_t sub_100011888(char a1)
{
  return *(void *)&aPosttimeclient[8 * a1];
}

BOOL sub_1000118A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000118BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100011900()
{
}

Swift::Int sub_100011928(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100011968()
{
  return sub_100011888(*v0);
}

uint64_t sub_100011970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015200(a1, a2);
  *a3 = result;
  return result;
}

void sub_100011994(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000119A0(uint64_t a1)
{
  unint64_t v2 = sub_100015A24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000119C8(uint64_t a1)
{
  unint64_t v2 = sub_100015A24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000119F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v18 = a3;
  uint64_t v10 = sub_100009FDC(&qword_100096830);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10000A32C(a1, v14);
  unint64_t v16 = sub_100015A24();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BackendHTTP.POSTData.CodingKeys,  &type metadata for BackendHTTP.POSTData.CodingKeys,  v16,  v14,  v15);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v22, v10, a5);
  if (!v5)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2, v18, &v21, v10);
    uint64_t v20 = a4;
    char v19 = 2;
    sub_100009FDC(&qword_100096838);
    sub_100015A68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100011B6C(void *a1)
{
  return sub_1000119F0(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)v1);
}

uint64_t sub_100011B8C(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[39] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[40] = v4;
  v2[41] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ServiceEventValue(0LL);
  v2[42] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[43] = v6;
  v2[44] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_100009FDC(&qword_100096710) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[45] = swift_task_alloc(v7);
  v2[46] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for URL(0LL);
  v2[47] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[48] = v9;
  v2[49] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URLRequest(0LL);
  v2[50] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[51] = v11;
  v2[52] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  v2[53] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[54] = v13;
  v2[55] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  v2[56] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[57] = v15;
  v2[58] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100011D1C, v1, 0LL);
}

uint64_t sub_100011D1C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  swift_retain(v2);
  uint64_t v3 = sub_10001533C(v1, v2);
  swift_release(*(void *)(v0 + 304));
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = v3 + 5;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = *(v5 - 1);
      __int128 v62 = *(_OWORD *)v5;
      swift_bridgeObjectRetain(*v5);
      swift_bridgeObjectRetain(*((void *)&v62 + 1));
      double v63 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_1000148C0(0, v6[2] + 1LL, 1);
        uint64_t v6 = v63;
      }

      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000148C0(v8 > 1, v9 + 1, 1);
        uint64_t v6 = v63;
      }

      uint64_t v6[2] = v9 + 1;
      uint64_t v10 = &v6[3 * v9];
      v10[4] = v7;
      *(_OWORD *)(v10 + 5) = v62;
      v5 += 3;
      --v4;
    }

    while (v4);
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v3);
  if (!v6[2])
  {
    swift_release(v6);
    uint64_t v24 = *(void *)(v0 + 440);
    uint64_t v25 = *(void *)(v0 + 416);
    uint64_t v26 = *(void *)(v0 + 392);
    uint64_t v28 = *(void *)(v0 + 360);
    uint64_t v27 = *(void *)(v0 + 368);
    uint64_t v29 = *(void *)(v0 + 352);
    uint64_t v30 = *(void *)(v0 + 328);
    swift_task_dealloc(*(void *)(v0 + 464));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    __asm { BR              X0 }
  }

  if (qword_100099660 != -1) {
    swift_once(&qword_100099660, sub_100011770);
  }
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 472) = sub_100009FC4(v12, (uint64_t)qword_10009ECC0);
  ((void (*)(uint64_t, uint64_t))swift_retain_n)(v11, 2LL);
  uint64_t v13 = swift_retain(v6);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v60 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 304);
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    double v63 = (void *)v18;
    *(_DWORD *)uint64_t v17 = 134349314;
    *(void *)(v0 + 280) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v17 + 4, v17 + 12);
    swift_release(v6);
    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v19 = sub_10000C5E8( &qword_100096720,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v60, v19);
    unint64_t v22 = v21;
    *(void *)(v0 + 288) = sub_100009984(v20, v21, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v17 + 14, v17 + 22);
    swift_release_n(v16, 2LL);
    swift_bridgeObjectRelease(v22);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "submitting %{public}ld events to %{public}s",  (uint8_t *)v17,  0x16u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    uint64_t v31 = *(void *)(v0 + 304);

    swift_release_n(v31, 2LL);
    uint64_t v23 = swift_release(v6);
  }

  uint64_t v33 = *(void *)(v0 + 456);
  uint64_t v32 = *(void *)(v0 + 464);
  uint64_t v35 = *(void *)(v0 + 440);
  uint64_t v34 = *(void *)(v0 + 448);
  uint64_t v37 = *(void *)(v0 + 424);
  uint64_t v36 = *(void *)(v0 + 432);
  uint64_t v38 = *(void *)(v0 + 304);
  static Date.now.getter(v23);
  getTimeIntervalSince1970(Date:)();
  uint64_t v40 = v39;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  uint64_t v41 = *(void *)(v38 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_clientID);
  uint64_t v42 = *(void *)(v38 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_clientID + 8);
  uint64_t v61 = v41;
  swift_bridgeObjectRetain(v42);
  uint64_t v43 = sub_100014098((uint64_t)v6);
  swift_release(v6);
  uint64_t v44 = ((uint64_t (*)(void))type metadata accessor for JSONEncoder)(0LL);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  *(void *)(v0 + 480) = ((uint64_t (*)(void))JSONEncoder.init())();
  uint64_t v45 = sub_100009FDC(&qword_1000961E8);
  uint64_t v46 = swift_allocObject( v45,  ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
        + *(void *)(v36 + 72),
          *(unsigned __int8 *)(v36 + 80) | 7LL);
  *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  ((void (*)(void))static JSONEncoder.OutputFormatting.prettyPrinted.getter)();
  *(void *)(v0 + 264) = v46;
  uint64_t v47 = sub_10000C5E8( &qword_1000961F0,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  uint64_t v48 = sub_100009FDC(&qword_1000961F8);
  unint64_t v49 = sub_100015568();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 264, v48, v49, v37, v47);
  ((void (*)(uint64_t))dispatch thunk of JSONEncoder.outputFormatting.setter)(v35);
  *(double *)(v0 + 104) = (double)v40;
  *(void *)(v0 + 112) = v61;
  *(void *)(v0 + 120) = v42;
  *(void *)(v0 + 128) = v43;
  unint64_t v50 = sub_1000155B4();
  uint64_t v51 = ((uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))dispatch thunk of JSONEncoder.encode<A>(_:))( v0 + 104,  &type metadata for BackendHTTP.POSTData,  v50);
  *(void *)(v0 + 488) = 0LL;
  *(void *)(v0 + 496) = v51;
  *(void *)(v0 + 504) = v52;
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v42);
  unint64_t v53 = sub_10003D184();
  swift_beginAccess(v53, v0 + 168, 0LL, 0LL);
  if (*v53 == 1 && *sub_10003D338() == 1
    || (uint64_t v54 = *(void *)(v0 + 304),
        (*(_BYTE *)(v54 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_skipLogging) & 1) != 0))
  {
    uint64_t v55 = *(void *)(v0 + 504);
    uint64_t v56 = *(void *)(v0 + 392);
    (*(void (**)(uint64_t))(*(void *)(v0 + 384) + 16LL))(v56);
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v56, 0LL, 60.0);
    __asm { BR              X10 }
  }

  uint64_t v57 = *(void *)(v54 + 120);
  *(void *)(v0 + 512) = v57;
  unint64_t v58 = (void *)(v54 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_name);
  *(void *)(v0 + 520) = *v58;
  *(void *)(v0 + 528) = v58[1];
  return swift_task_switch(sub_100012FB0, v57, 0LL);
}

uint64_t sub_100012FB0()
{
  uint64_t v1 = *(void *)(v0 + 488);
  sub_10000888C(*(void *)(v0 + 520), *(void **)(v0 + 528), *(void *)(v0 + 496), *(void *)(v0 + 504));
  *(void *)(v0 + 536) = v1;
  if (v1) {
    uint64_t v2 = sub_100013E94;
  }
  else {
    uint64_t v2 = sub_100013058;
  }
  return swift_task_switch(v2, *(void *)(v0 + 304), 0LL);
}

void sub_100013058()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[49];
  (*(void (**)(uint64_t))(v0[48] + 16LL))(v2);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v2, 0LL, 60.0);
  __asm { BR              X10 }

void sub_100013128()
{
  uint64_t v3 = *(void *)(v1 + 504);
  *(void *)(v1 + 592) = *(void *)(v1 + 496);
  *(_WORD *)(v1 + 600) = v3;
  *(_BYTE *)(v1 + 602) = BYTE2(v3);
  *(_BYTE *)(v1 + 603) = BYTE3(v3);
  *(_BYTE *)(v1 + 604) = BYTE4(v3);
  *(_BYTE *)(v1 + 605) = BYTE5(v3);
  sub_1000143D0((Bytef *)(v1 + 592), v1 + 592 + BYTE6(v3), (_OWORD *)(v2 - 96));
  uint64_t v8 = v0;
  uint64_t v9 = *(void *)(v1 + 496);
  unint64_t v10 = *(void *)(v1 + 504);
  sub_10000A074(v9, v10);
  sub_10000A074(v9, v10);
  if (v0)
  {
    swift_errorRetain(v0);
    uint64_t v11 = swift_errorRetain(v0);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v2 - 96) = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      ((void (*)(uint64_t))swift_getErrorValue)(v8);
      uint64_t v16 = Error.localizedDescription.getter(*(void *)(v1 + 200), *(void *)(v1 + 208));
      unint64_t v18 = v17;
      *(void *)(v1 + 256) = sub_100009984(v16, v17, (uint64_t *)(v2 - 96));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v2 - 112), v1 + 264, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "failed to compress payload: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      swift_errorRelease(v8);
    }

    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
    }

    uint64_t v4 = 0LL;
    uint64_t v6 = *(void *)(v1 + 496);
    unint64_t v7 = *(void *)(v1 + 504);
    unint64_t v5 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v4 = *(void *)(v2 - 96);
    unint64_t v5 = *(void *)(v2 - 88);
    if (v5 >> 60 == 15) {
      uint64_t v6 = *(void *)(v1 + 496);
    }
    else {
      uint64_t v6 = *(void *)(v2 - 96);
    }
    if (v5 >> 60 == 15) {
      unint64_t v7 = *(void *)(v1 + 504);
    }
    else {
      unint64_t v7 = *(void *)(v2 - 88);
    }
  }

  *(void *)(v1 + 552) = v5;
  *(void *)(v1 + 544) = v4;
  sub_10000A0B8(v6, v7);
  ((void (*)(uint64_t, unint64_t))URLRequest.httpBody.setter)(v6, v7);
  ((void (*)(uint64_t, unint64_t))URLRequest.httpMethod.setter)(1414745936LL, 0xE400000000000000LL);
  if (v5 >> 60 != 15)
  {
    v19._object = (void *)0x800000010007A5D0LL;
    v20.value._uint64_t countAndFlagsBits = 1885960807LL;
    v20.value._object = (void *)0xE400000000000000LL;
    v19._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    URLRequest.setValue(_:forHTTPHeaderField:)(v20, v19);
  }

  v21.value._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v21.value._object = (void *)0x800000010007A590LL;
  v22._uint64_t countAndFlagsBits = 0x747065636341LL;
  v22._object = (void *)0xE600000000000000LL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v21, v22);
  v23.value._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v23.value._object = (void *)0x800000010007A590LL;
  v24._uint64_t countAndFlagsBits = 0x2D746E65746E6F43LL;
  v24._object = (void *)0xEC00000065707954LL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v23, v24);
  ((void (*)(uint64_t))URLRequest.httpBody.getter)(v25);
  if (v26 >> 60 != 15) {
    __asm { BR              X10 }
  }

  sub_10000A060(v4, v5);
  __break(1u);
  JUMPOUT(0x100013C58LL);
}

uint64_t sub_100013C88(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 576);
  *(void *)(*v4 + 584) = v3;
  swift_task_dealloc(v9);
  unint64_t v10 = *(void **)(v8 + 568);
  uint64_t v11 = *(void *)(v8 + 304);
  if (v3)
  {

    uint64_t v12 = sub_100013F78;
  }

  else
  {
    sub_10000A074(a1, a2);

    uint64_t v12 = sub_100013D74;
  }

  return swift_task_switch(v12, v11, 0LL);
}

uint64_t sub_100013D74()
{
  unint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 496);
  unint64_t v3 = *(void *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 400);

  swift_release(v5);
  sub_10000A074(v4, v3);
  sub_10000A060(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013E94()
{
  uint64_t v1 = *(void *)(v0 + 480);
  sub_10000A074(*(void *)(v0 + 496), *(void *)(v0 + 504));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013F78()
{
  unint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 496);
  unint64_t v3 = *(void *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 400);

  swift_release(v5);
  sub_10000A074(v4, v3);
  sub_10000A060(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100014098(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000148A4(0, v1, 0);
    unint64_t v3 = (void *)(a1 + 48);
    do
    {
      uint64_t v4 = *v3;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v6 >= v5 >> 1) {
        sub_1000148A4(v5 > 1, v6 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v6 + 1;
      _swiftEmptyArrayStorage[v6 + 4] = v4;
      v3 += 3;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100014164()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_name);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_name + 8);
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._uint64_t countAndFlagsBits = 539828258LL;
  v4._object = (void *)0xE400000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = sub_10000C5E8( &qword_100096720,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 8744LL;
}

uint64_t sub_100014248()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_url;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_clientID + 8));
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_extraHeaders + 16);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_extraHeaders + 32);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_extraHeaders + 56);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_extraHeaders + 80));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_filters));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_name + 8));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001432C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100014344(uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 176LL);
  Swift::String v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A560;
  return v7(a1);
}

uint64_t sub_1000143A8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))();
}

uint64_t sub_1000143D0@<X0>(Bytef *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uLong v5 = a2 - (void)a1;
  memset(&strm.total_out, 0, 32);
  if (a1) {
    unint64_t v6 = a2 - (void)a1;
  }
  else {
    unint64_t v6 = 0LL;
  }
  memset(&strm.zfree, 0, 20);
  strm.adler = 0LL;
  strm.reserved = 0LL;
  if ((v6 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_23:
    __break(1u);
    JUMPOUT(0x100014788LL);
  }

  if (HIDWORD(v6))
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_23;
  }

  strm.avail_in = v6;
  if (!a1) {
    __break(1u);
  }
  strm.next_in = a1;
  int v7 = deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112);
  if (v7)
  {
    int v8 = v7;
    unint64_t v9 = sub_100015ACC();
    uint64_t v10 = swift_allocError(&_s9ZLibErrorON, v9, 0LL, 0LL);
    int *v11 = v8;
    return swift_willThrow(v10);
  }

  uLong v13 = deflateBound(&strm, v5);
  if ((v13 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v22 = sub_100015B10(v13);
  unint64_t v23 = v14;
  sub_100014CA4((uint64_t)&v22);
  if (v15 == 1)
  {
    if ((strm.total_out & 0x8000000000000000LL) == 0)
    {
      Data._Representation.count.setter();
      __asm { BR              X11 }
    }

    goto LABEL_18;
  }

  int v3 = v15;
  if (qword_100099660 != -1) {
LABEL_19:
  }
    swift_once(&qword_100099660, sub_100011770);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100009FC4(v16, (uint64_t)qword_10009ECC0);
  unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    Swift::String_optional v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)Swift::String_optional v20 = 67240192;
    int v21 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "zlib returned unexpected status %{public}d", v20, 8u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  *a3 = xmmword_1000764C0;
  sub_10000A074(v22, v23);
  return deflateEnd(&strm);
}

uint64_t sub_1000147A8@<X0>(z_streamp strm@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _DWORD *a4@<X8>)
{
  if (a2) {
    uLong v5 = a3 - a2;
  }
  else {
    uLong v5 = 0LL;
  }
  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_13;
  }
  uLong total_out = strm->total_out;
  BOOL v7 = v5 >= total_out;
  uLong v8 = v5 - total_out;
  if (v7)
  {
    if (HIDWORD(v8))
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      goto LABEL_15;
    }

    strm->avail_out = v8;
    if (!a2) {
      goto LABEL_12;
    }
    if ((total_out & 0x8000000000000000LL) == 0)
    {
      strm->next_out = (Bytef *)(a2 + total_out);
      uint64_t result = deflate(strm, 4);
      *a4 = result;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1000148A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000148DC(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1000148C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100014A64(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1000148DC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_100096850);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100009FDC((uint64_t *)&unk_100097050);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v53);
        sub_100035E78(v76, 0LL, v79, v78, v77);
        goto LABEL_33;
      }

      uint64_t v54 = v48;
      double v63 = v52;
    }

    swift_bridgeObjectRelease(v63);
    uint64_t v55 = &type metadata for EventInsertStringKeyFilter;
    uint64_t v56 = &off_100090210;
    goto LABEL_32;
  }

  uint64_t v66 = result;
  swift_bridgeObjectRelease(a1);
  return v66;
}

uint64_t sub_100014A64(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_100096858);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100014BE8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = (Bytef *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = &v11[v15];
  if (v11) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_1000143D0(v11, v17, a5);
  return sub_10000A074(a3, a4);
}

void sub_100014CA4(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_100014D00@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v27 = v23;
  LOWORD(v28) = a1;
  BYTE2(v28) = BYTE2(a1);
  HIBYTE(v28) = BYTE3(a1);
  unsigned __int8 v29 = BYTE4(a1);
  unsigned __int8 v30 = BYTE5(a1);
  unsigned __int8 v31 = BYTE6(a1);
  uint64_t result = sub_1000147A8(v22, (uint64_t)&v27, (uint64_t)&v27 + BYTE6(a1), &v26);
  if (!v20) {
    uint64_t result = v26;
  }
  unint64_t v25 = v28 | ((unint64_t)v29 << 32) | ((unint64_t)v30 << 40) | ((unint64_t)v31 << 48);
  *int v21 = v27;
  v21[1] = v25;
  return result;
}

uint64_t sub_100014F7C(uint64_t a1, uint64_t a2, uint64_t a3, z_stream *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v9 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v10 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t result = sub_1000147A8(a4, v9 + v10, v9 + v10 + v14, &v15);
  if (!v4) {
    return v15;
  }
  return result;
}

uint64_t sub_10001501C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v8 = v7;
  swift_defaultActor_initialize(v8);
  uint64_t v16 = (void *)(v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_clientID);
  *uint64_t v16 = a5;
  v16[1] = a6;
  *(void *)(v8 + 112) = a3;
  *(void *)(v8 + 1memset(&strm.total_in, 0, 20) = a1;
  uint64_t v17 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  unint64_t v18 = (char *)a4 + v17[6];
  uint64_t v19 = v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_url;
  uint64_t v20 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, v18, v20);
  *(void *)(v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_options) = a7;
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[4];
  sub_10000A32C(a2, v21);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 16);
  swift_retain(a1);
  swift_retain(a3);
  id v24 = a7;
  uint64_t v25 = v23(v21, v22);
  uint64_t v27 = v26;
  uint64_t v28 = a2[3];
  uint64_t v29 = a2[4];
  sub_10000A32C(a2, v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v38, v28, v29);
  sub_10003623C(v25, v27, v38, *((_BYTE *)a4 + v17[8]), (uint64_t)v39);
  uint64_t v30 = v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_extraHeaders;
  __int128 v31 = v39[3];
  *(_OWORD *)(v30 + 32) = v39[2];
  *(_OWORD *)(v30 + 48) = v31;
  *(_OWORD *)(v30 + 64) = v39[4];
  *(void *)(v30 + 80) = v40;
  __int128 v32 = v39[1];
  *(_OWORD *)uint64_t v30 = v39[0];
  *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = v32;
  uint64_t v33 = *(void *)((char *)a4 + v17[7]);
  *(void *)(v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_filters) = v33;
  uint64_t v34 = a4[1];
  uint64_t v35 = (void *)(v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_name);
  void *v35 = *a4;
  v35[1] = v34;
  LOBYTE(v23) = *((_BYTE *)a4 + v17[9]);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  sub_100015BF0((uint64_t)a4, type metadata accessor for SessionConfiguration.BackendHTTP);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_skipLogging) = (_BYTE)v23;
  sub_10000C2B4(a2);
  return v8;
}

uint64_t sub_100015200(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x656D695474736F70LL && a2 == 0xE800000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656D695474736F70LL, 0xE800000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x6449746E65696C63LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63LL, 0xE800000000000000LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x73746E657665LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665LL, 0xE600000000000000LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *sub_10001533C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uLong v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_1000148C0(0, v4, 0);
    uint64_t v8 = 0LL;
    uLong v5 = _swiftEmptyArrayStorage;
    uint64_t v9 = a1 + 32;
    uint64_t v10 = *(void *)(a2 + OBJC_IVAR____TtC21CloudTelemetryService11BackendHTTP_filters);
    uint64_t v25 = v10;
    uint64_t v26 = v10 + 32;
    uint64_t v23 = a1 + 32;
    int64_t v24 = v4;
    while (1)
    {
      BOOL v11 = (uint64_t *)(v9 + 24 * v8);
      uint64_t v12 = *v11;
      __int128 v27 = *(_OWORD *)(v11 + 1);
      uint64_t v32 = *v11;
      __int128 v33 = v27;
      uint64_t v13 = *(void *)(v10 + 16);
      swift_bridgeObjectRetain(*((void *)&v27 + 1));
      uint64_t v14 = v27;
      swift_bridgeObjectRetain(v27);
      if (v13) {
        break;
      }
      __int128 v18 = v27;
LABEL_9:
      uint64_t v34 = v5;
      unint64_t v20 = v5[2];
      unint64_t v19 = v5[3];
      if (v20 >= v19 >> 1)
      {
        __int128 v28 = v18;
        sub_1000148C0(v19 > 1, v20 + 1, 1);
        __int128 v18 = v28;
        uLong v5 = v34;
      }

      ++v8;
      v5[2] = v20 + 1;
      uint64_t v21 = &v5[3 * v20];
      v21[4] = v12;
      *(_OWORD *)(v21 + 5) = v18;
      if (v8 == v4) {
        return v5;
      }
    }

    *(void *)&__int128 v27 = v5;
    swift_bridgeObjectRetain(*((void *)&v27 + 1));
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v10);
    uint64_t v15 = v26;
    while (1)
    {
      sub_100015BAC(v15, (uint64_t)v29);
      uint64_t v17 = v30;
      uint64_t v16 = v31;
      sub_10000A32C(v29, v30);
      uLong v5 = v3;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v32, v17, v16);
      if (v3) {
        break;
      }
      sub_10000C2B4(v29);
      v15 += 40LL;
      if (!--v13)
      {
        swift_bridgeObjectRelease(*((void *)&v27 + 1));
        swift_bridgeObjectRelease(v14);
        uint64_t v10 = v25;
        swift_bridgeObjectRelease(v25);
        uint64_t v12 = v32;
        __int128 v18 = v33;
        uLong v5 = (void *)v27;
        uint64_t v9 = v23;
        int64_t v4 = v24;
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(*((void *)&v33 + 1));
    sub_10000C2B4(v29);
    swift_release(v27);
    swift_bridgeObjectRelease(*((void *)&v27 + 1));
    swift_bridgeObjectRelease(v14);
  }

  return v5;
}

unint64_t sub_100015568()
{
  unint64_t result = qword_100096200;
  if (!qword_100096200)
  {
    uint64_t v1 = sub_10000A140(&qword_1000961F8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100096200);
  }

  return result;
}

unint64_t sub_1000155B4()
{
  unint64_t result = qword_100099668[0];
  if (!qword_100099668[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10007663C, &type metadata for BackendHTTP.POSTData);
    atomic_store(result, qword_100099668);
  }

  return result;
}

uint64_t sub_1000155F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001563C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100096710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000156C8()
{
  return type metadata accessor for BackendHTTP(0LL);
}

uint64_t type metadata accessor for BackendHTTP(uint64_t a1)
{
  uint64_t result = qword_1000997F0;
  if (!qword_1000997F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BackendHTTP);
  }
  return result;
}

uint64_t sub_10001570C(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[5] = &unk_1000765E0;
    v4[6] = &unk_1000765F8;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = &unk_1000765E0;
    void v4[9] = &unk_100076610;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

_DWORD *_s9ZLibErrorOwCP(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s9ZLibErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s9ZLibErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *_s9ZLibErrorOMa()
{
  return &_s9ZLibErrorON;
}

uint64_t initializeBufferWithCopyOfBuffer for ClientIdentity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for BackendHTTP.POSTData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for BackendHTTP.POSTData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for BackendHTTP.POSTData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for BackendHTTP.POSTData(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for BackendHTTP.POSTData(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v4 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData()
{
  return &type metadata for BackendHTTP.POSTData;
}

unint64_t sub_100015A24()
{
  unint64_t result = qword_100099880[0];
  if (!qword_100099880[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076728, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, qword_100099880);
  }

  return result;
}

unint64_t sub_100015A68()
{
  unint64_t result = qword_100096840;
  if (!qword_100096840)
  {
    uint64_t v1 = sub_10000A140(&qword_100096838);
    sub_10000A394();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100096840);
  }

  return result;
}

unint64_t sub_100015ACC()
{
  unint64_t result = qword_100096848;
  if (!qword_100096848)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076560, &_s9ZLibErrorON);
    atomic_store(result, (unint64_t *)&qword_100096848);
  }

  return result;
}

uint64_t sub_100015B10(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        unint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_100015BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100015BF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

_BYTE *initializeBufferWithCopyOfBuffer for StorebagBool(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100015D14 + 4 * byte_1000764E5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100015D48 + 4 * byte_1000764E0[v4]))();
}

uint64_t sub_100015D48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100015D58LL);
  }
  return result;
}

uint64_t sub_100015D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100015D6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100015D70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015D78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015D84(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100015D8C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData.CodingKeys()
{
  return &type metadata for BackendHTTP.POSTData.CodingKeys;
}

unint64_t sub_100015DA8()
{
  unint64_t result = qword_100099990[0];
  if (!qword_100099990[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076700, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, qword_100099990);
  }

  return result;
}

unint64_t sub_100015DF0()
{
  unint64_t result = qword_100099AA0;
  if (!qword_100099AA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076670, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100099AA0);
  }

  return result;
}

unint64_t sub_100015E38()
{
  unint64_t result = qword_100099AA8[0];
  if (!qword_100099AA8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076698, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, qword_100099AA8);
  }

  return result;
}

uint64_t sub_100015E7C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_100099B38);
  sub_100009FC4(v0, (uint64_t)qword_100099B38);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0xD000000000000013LL,  0x800000010007A7E0LL);
}

uint64_t sub_100015EFC()
{
  return swift_weakLoadStrong(v0 + 120);
}

uint64_t sub_100015F3C(uint64_t a1)
{
  uint64_t v3 = v1 + 120;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_weakAssign(v3, a1);
  return swift_release(a1);
}

void (*sub_100015F8C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 120, v3, 33LL, 0LL);
  v3[3] = swift_weakLoadStrong(v1 + 120);
  return sub_100015FF4;
}

void sub_100015FF4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_weakAssign(*(void *)(*(void *)a1 + 32LL) + 120LL, v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }

  free(v3);
}

unint64_t sub_100016060(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_100096A08);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unsigned int v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100010540(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100016170(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_100096A20);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unsigned int v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100010540(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100016288()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 128));
}

uint64_t sub_1000162BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100016300(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10001633C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 136));
}

uint64_t sub_100016370(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000163B4(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000163F0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 144));
}

uint64_t sub_100016424(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100016468(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000164A8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_10009686C);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_100016520;
  return sub_100016574(a1, a2, a3);
}

uint64_t sub_100016520(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100016574(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  *(void *)(v4 + 96) = a3;
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 88) = a2;
  *(_BYTE *)(v4 + 160) = a1;
  *(void *)(v4 + 112) = *v5;
  uint64_t v7 = type metadata accessor for URL(0LL);
  *(void *)(v4 + 1memset(&strm.total_in, 0, 20) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 128) = v8;
  uint64_t v9 = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 136) = v9;
  swift_defaultActor_initialize(v5);
  swift_weakInit(v5 + 15, 0LL);
  v5[16] = sub_100016060((uint64_t)_swiftEmptyArrayStorage);
  v5[17] = &_swiftEmptySetSingleton;
  v5[18] = sub_100016170((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for StorebagCoordinator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, a3, v7);
  uint64_t v10 = (void *)swift_task_alloc(dword_100097FC4);
  *(void *)(v4 + 144) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10001667C;
  return sub_100057BEC(v9);
}

uint64_t sub_10001667C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v8 = v4[16];
    uint64_t v7 = v4[17];
    uint64_t v9 = v4[15];
    uint64_t v11 = v4[12];
    uint64_t v10 = (void *)v4[13];
    uint64_t v12 = v4[11];
    swift_weakDestroy(v10 + 15);
    swift_bridgeObjectRelease(v10[16]);
    swift_bridgeObjectRelease(v10[17]);
    swift_bridgeObjectRelease(v10[18]);
    uint64_t v13 = type metadata accessor for SessionCoordinator();
    swift_defaultActor_destroy(v10);
    swift_release(v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v9);
    swift_deallocPartialClassInstance(v10, v13, 152LL, 15LL);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    uint64_t v15 = v4[13];
    *(void *)(v15 + 112) = a1;
    return swift_task_switch(sub_100016784, v15, 0LL);
  }

uint64_t sub_100016784()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 104) + 120LL;
  swift_beginAccess(v3, v0 + 64, 1LL, 0LL);
  swift_weakAssign(v3, v1);
  if ((v2 & 1) != 0)
  {
    swift_release(*(void *)(v0 + 88));
    uint64_t v4 = *(void *)(v0 + 136);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 120));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
  }

  else
  {
    uint64_t v6 = *(int **)(**(void **)(v0 + 104) + 264LL);
    uint64_t v8 = (uint64_t (*)(void))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 152) = v7;
    void *v7 = v0;
    v7[1] = sub_100016864;
    return v8();
  }

uint64_t sub_100016864()
{
  uint64_t v1 = *(void *)(*v0 + 152);
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *v0;
  __int128 v12 = *(_OWORD *)(v3 + 104);
  swift_task_dealloc(v1);
  id v4 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v5 = MCEffectiveSettingsChangedNotification;
  uint64_t v6 = swift_allocObject(&unk_10008E0C0, 32LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v3 + 48) = sub_100016BA0;
  *(void *)(v3 + 56) = v6;
  *(void *)(v3 + 24) = 1107296256LL;
  *(void *)(v3 + 32) = sub_100016D48;
  *(void *)(v3 + 40) = &unk_10008E0D8;
  uint64_t v7 = _Block_copy((const void *)(v3 + 16));
  uint64_t v8 = *(void *)(v3 + 56);
  swift_retain(v12);
  swift_release(v8);
  id v9 = [v4 addObserverForName:v5 object:0 queue:0 usingBlock:v7];
  _Block_release(v7);
  swift_release(v2);
  swift_unknownObjectRelease(v9);

  uint64_t v10 = *(void *)(v3 + 136);
  (*(void (**)(void, void))(*(void *)(v3 + 128) + 8LL))(*(void *)(v3 + 96), *(void *)(v3 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v3 + 8))(*(void *)(v3 + 104));
}

uint64_t type metadata accessor for SessionCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService18SessionCoordinator);
}

uint64_t sub_100016A04(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v2);
  id v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_100009FC4(v5, (uint64_t)qword_100099B38);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "received notification for MC effective settings change", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v4, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_10008E208, 40LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = a1;
  swift_retain(a1);
  uint64_t v12 = sub_100016C04((uint64_t)v4, (uint64_t)&unk_100096A18, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100016B7C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100016BA0()
{
  return sub_100016A04(*(void *)(v0 + 16));
}

uint64_t sub_100016BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(int **)(*(void *)a4 + 264LL);
  os_log_type_t v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v4;
  v6[1] = sub_10001B608;
  return v8();
}

uint64_t sub_100016C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10001A868(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_10008E1E0, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100096A00, v16);
}

uint64_t sub_100016D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100016DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016DFC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100016E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[42] = a4;
  v5[43] = v4;
  v5[40] = a2;
  v5[41] = a3;
  v5[39] = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  v5[44] = v6;
  v5[45] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100016E60, v4, 0LL);
}

uint64_t sub_100016E60()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(*(void *)(v0 + 344) + 112LL);
  *(void *)(v0 + 368) = v3;
  __int128 v9 = *(_OWORD *)(v0 + 328);
  *(_OWORD *)(v0 + 2swift_weakDestroy(v0 + 16) = v9;
  uint64_t v4 = sub_100017380((void *)(v0 + 192));
  uint64_t v5 = *(void (**)(void *, uint64_t, void))(v1 + 16);
  *(void *)(v0 + 376) = v5;
  v5(v4, v2, v9);
  uint64_t v6 = *(int **)(*(void *)v3 + 128LL);
  *(void *)&__int128 v9 = (char *)v6 + *v6;
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v0 + 384) = v7;
  void *v7 = v0;
  v7[1] = sub_100016F10;
  return ((uint64_t (*)(uint64_t))v9)(v0 + 192);
}

uint64_t sub_100016F10(char a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 384LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 344LL);
  *(_BYTE *)(*(void *)v1 + 424LL) = a1;
  swift_task_dealloc(v3);
  sub_10000C2B4(v2);
  return swift_task_switch(sub_100016F7C, v4, 0LL);
}

uint64_t sub_100016F7C()
{
  if (static Mode.__derived_enum_equals(_:_:)(*(_BYTE *)(v0 + 424), 3)
    || static Mode.__derived_enum_equals(_:_:)(*(_BYTE *)(v0 + 424), 2))
  {
    uint64_t v1 = v0 + 272;
    uint64_t v3 = *(void *)(v0 + 368);
    uint64_t v2 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 376);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 320);
    *(void *)(v0 + 296) = v5;
    *(void *)(v0 + 304) = v4;
    uint64_t v7 = sub_100017380((void *)(v0 + 272));
    v2(v7, v6, v5);
    uint64_t v8 = *(int **)(*(void *)v3 + 136LL);
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
    __int128 v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 392) = v9;
    void *v9 = v0;
    v9[1] = sub_100017190;
    uint64_t v10 = v0 + 152;
    return v31(v10, v1);
  }

  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v14 = (void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  BOOL v17 = static Mode.__derived_enum_equals(_:_:)(*(_BYTE *)(v0 + 424), 1);
  v12(v13, v16, v15);
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 360);
  if (v17)
  {
    uint64_t v20 = *(void *)(v0 + 328);
    (*(void (**)(uint64_t))(*(void *)(v0 + 336) + 8LL))(v20);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    sub_1000173BC((void *)(v0 + 16));
    if ((*(_BYTE *)(v0 + 49) & 1) != 0)
    {
      uint64_t v1 = v0 + 232;
      uint64_t v22 = *(void *)(v0 + 368);
      uint64_t v21 = *(void (**)(void *, uint64_t, void))(v0 + 376);
      uint64_t v23 = *(void *)(v0 + 320);
      __int128 v32 = *(_OWORD *)v14;
      *(_OWORD *)(v0 + 256) = *(_OWORD *)v14;
      int64_t v24 = sub_100017380((void *)(v0 + 232));
      v21(v24, v23, v32);
      uint64_t v25 = *(int **)(*(void *)v22 + 136LL);
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)v25 + *v25);
      uint64_t v26 = (void *)swift_task_alloc(v25[1]);
      *(void *)(v0 + 408) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_10001724C;
      uint64_t v10 = v0 + 72;
      return v31(v10, v1);
    }
  }

  else
  {
    (*(void (**)(void, void))(v19 + 8))(*(void *)(v0 + 360), *v14);
  }

  sub_100066374(v0 + 112);
  uint64_t v27 = *(void *)(v0 + 312);
  uint64_t v28 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 144);
  char v30 = *(_BYTE *)(v0 + 128);
  __int128 v33 = *(_OWORD *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 360));
  *(_OWORD *)uint64_t v27 = v33;
  *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = v30;
  *(void *)(v27 + 24) = v28;
  *(void *)(v27 + 32) = v29;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017190()
{
  uint64_t v2 = *(void *)(*v1 + 392);
  uint64_t v3 = *v1;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100017308, *(void *)(v3 + 344), 0LL);
  }
  sub_10000C2B4((void *)(v3 + 272));
  uint64_t v5 = *(void *)(v3 + 312);
  uint64_t v6 = *(void *)(v3 + 176);
  uint64_t v7 = *(void *)(v3 + 184);
  char v8 = *(_BYTE *)(v3 + 168);
  __int128 v9 = *(_OWORD *)(v3 + 152);
  swift_task_dealloc(*(void *)(v3 + 360));
  *(_OWORD *)uint64_t v5 = v9;
  *(_BYTE *)(v5 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v5 + 24) = v6;
  *(void *)(v5 + 32) = v7;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10001724C()
{
  uint64_t v2 = *(void *)(*v1 + 408);
  uint64_t v3 = *v1;
  *(void *)(v3 + 4swift_weakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100017344, *(void *)(v3 + 344), 0LL);
  }
  sub_10000C2B4((void *)(v3 + 232));
  uint64_t v5 = *(void *)(v3 + 312);
  uint64_t v6 = *(void *)(v3 + 96);
  uint64_t v7 = *(void *)(v3 + 104);
  char v8 = *(_BYTE *)(v3 + 88);
  __int128 v9 = *(_OWORD *)(v3 + 72);
  swift_task_dealloc(*(void *)(v3 + 360));
  *(_OWORD *)uint64_t v5 = v9;
  *(_BYTE *)(v5 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v5 + 24) = v6;
  *(void *)(v5 + 32) = v7;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100017308()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017344()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100017380(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

void *sub_1000173BC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_100017404(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(uint64_t (**)(uint64_t *, __n128))(*(void *)v2 + 168LL);
  __n128 v7 = swift_bridgeObjectRetain(a2);
  char v8 = (void (*)(uint64_t *, void))v6(v43, v7);
  uint64_t v10 = v9;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  uint64_t v42 = *v10;
  uint64_t v12 = v42;
  *uint64_t v10 = 0x8000000000000000LL;
  unint64_t v14 = sub_100010540(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_20;
  }

  char v18 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100019DF8();
    }
  }

  else
  {
    sub_100019AF0(v17, isUniquelyReferenced_nonNull_native);
    unint64_t v19 = sub_100010540(a1, a2);
    if ((v18 & 1) != (v20 & 1))
    {
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return;
    }

    unint64_t v14 = v19;
  }

  uint64_t v21 = *v10;
  *uint64_t v10 = v42;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = (void *)*v10;
  if ((v18 & 1) != 0) {
    goto LABEL_10;
  }
  v22[(v14 >> 6) + 8] |= 1LL << v14;
  uint64_t v23 = (uint64_t *)(v22[6] + 16 * v14);
  *uint64_t v23 = a1;
  v23[1] = a2;
  *(void *)(v22[7] + 8 * v14) = 0LL;
  uint64_t v24 = v22[2];
  BOOL v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_23;
  }

  v22[2] = v26;
  swift_bridgeObjectRetain(a2);
LABEL_10:
  uint64_t v27 = v22[7];
  uint64_t v28 = *(void *)(v27 + 8 * v14);
  BOOL v25 = __OFADD__(v28, 1LL);
  uint64_t v29 = v28 + 1;
  if (!v25)
  {
    *(void *)(v27 + 8 * v14) = v29;
    swift_bridgeObjectRelease(a2);
    v8(v43, 0LL);
    if (qword_100099B30 == -1) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }

LABEL_20:
  __break(1u);
LABEL_21:
  swift_once(&qword_100099B30, sub_100015E7C);
LABEL_12:
  uint64_t v30 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v30, (uint64_t)qword_100099B38);
  swift_bridgeObjectRetain_n(a2, 4LL);
  uint64_t v31 = swift_retain_n(v3, 2LL);
  __int128 v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v43[0] = v35;
    *(_DWORD *)uint64_t v34 = 136446466;
    swift_bridgeObjectRetain(a2);
    uint64_t v42 = sub_100009984(a1, a2, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v34 + 12) = 2048;
    uint64_t v36 = *(uint64_t (**)(__n128))(*(void *)v3 + 152LL);
    __n128 v37 = swift_bridgeObjectRetain(a2);
    uint64_t v38 = v36(v37);
    if (*(void *)(v38 + 16) && (unint64_t v39 = sub_100010540(a1, a2), (v40 & 1) != 0)) {
      uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
    }
    else {
      uint64_t v41 = 0LL;
    }
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_release(v3);
    uint64_t v42 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease(a2);
    swift_release(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "registered use for session config for %{public}s, now %lld uses",  (uint8_t *)v34,  0x16u);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 4LL);
    swift_release_n(v3, 2LL);
  }

  swift_unknownObjectRelease(*(void *)(v0 + 1304));
  return swift_errorRelease(v21);
}

void sub_1000177A8(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(uint64_t (**)(__n128))(v8 + 152);
  __n128 v13 = swift_bridgeObjectRetain(a2);
  uint64_t v14 = v12(v13);
  if (*(void *)(v14 + 16))
  {
    unint64_t v15 = sub_100010540(a1, a2);
    if ((v16 & 1) != 0)
    {
      uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(a2);
      uint64_t v18 = v17 - 1;
      if (__OFSUB__(v17, 1LL))
      {
        __break(1u);
      }

      else if (qword_100099B30 == -1)
      {
        goto LABEL_5;
      }

      swift_once(&qword_100099B30, sub_100015E7C);
LABEL_5:
      uint64_t v68 = v8;
      uint64_t v19 = type metadata accessor for Logger(0LL);
      uint64_t v20 = sub_100009FC4(v19, (uint64_t)qword_100099B38);
      uint64_t v21 = swift_bridgeObjectRetain_n(a2, 2LL);
      v67[1] = v20;
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      LODWORD(v69) = a3;
      if (v24)
      {
        uint64_t v25 = swift_slowAlloc(22LL, -1LL);
        v67[0] = v11;
        uint64_t v26 = a1;
        uint64_t v27 = v25;
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        v72[0] = v28;
        *(_DWORD *)uint64_t v27 = 136446466;
        swift_bridgeObjectRetain(a2);
        uint64_t v29 = v26;
        uint64_t v70 = sub_100009984(v26, a2, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v27 + 12) = 2050;
        uint64_t v70 = v17 - 1;
        uint64_t v11 = (char *)v67[0];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v27 + 14, v27 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "session config finished for %{public}s with %{public}lld uses remaining",  (uint8_t *)v27,  0x16u);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        uint64_t v29 = a1;
        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      uint64_t v35 = *(uint64_t (**)(uint64_t *, __n128))(*v4 + 168LL);
      if (v18 > 0)
      {
        __n128 v36 = swift_bridgeObjectRetain(a2);
        __n128 v37 = (void (*)(uint64_t *, void))v35(v72, v36);
        unint64_t v39 = v38;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
        uint64_t v70 = *v39;
        uint64_t *v39 = 0x8000000000000000LL;
        sub_10001A5B0(v18, v29, a2, isUniquelyReferenced_nonNull_native);
        uint64_t v41 = *v39;
        uint64_t *v39 = v70;
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(a2);
        v37(v72, 0LL);
        return;
      }

      uint64_t v42 = (uint64_t (*)(uint64_t *, void))((uint64_t (*)(uint64_t *))v35)(v72);
      uint64_t v43 = v29;
      sub_100019FA4(v29, a2);
      uint64_t v44 = v42(v72, 0LL);
      if ((v69 & 1) != 0)
      {
        uint64_t v45 = (*(uint64_t (**)(uint64_t))(*v4 + 176LL))(v44);
        char v46 = sub_100017FF8(v29, a2, v45);
        swift_bridgeObjectRelease(v45);
        uint64_t v47 = swift_bridgeObjectRetain_n(a2, 2LL);
        uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        BOOL v50 = os_log_type_enabled(v48, v49);
        if ((v46 & 1) != 0)
        {
          if (v50)
          {
            uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v52 = swift_slowAlloc(32LL, -1LL);
            v72[0] = v52;
            *(_DWORD *)uint64_t v51 = 136446210;
            swift_bridgeObjectRetain(a2);
            uint64_t v70 = sub_100009984(v43, a2, v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v51 + 4, v51 + 12);
            swift_bridgeObjectRelease_n(a2, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "not evicting %{public}s: already running", v51, 0xCu);
            swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v52, -1LL, -1LL);
            swift_slowDealloc(v51, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(a2, 2LL);
          }

          return;
        }

        if (v50)
        {
          unint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v59 = swift_slowAlloc(32LL, -1LL);
          v72[0] = v59;
          *(_DWORD *)unint64_t v58 = 136446210;
          swift_bridgeObjectRetain(a2);
          uint64_t v70 = sub_100009984(v43, a2, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v58 + 4, v58 + 12);
          swift_bridgeObjectRelease_n(a2, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "starting eviction timer for %{public}s", v58, 0xCu);
          swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1LL, -1LL);
          swift_slowDealloc(v58, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(a2, 2LL);
        }

        uint64_t v60 = *(uint64_t (**)(uint64_t *, __n128))(*v4 + 192LL);
        __n128 v61 = swift_bridgeObjectRetain(a2);
        __int128 v62 = (void (*)(uint64_t *, void))v60(v72, v61);
        sub_10001A168(&v70, v43, a2);
        swift_bridgeObjectRelease(v71);
        v62(v72, 0LL);
        uint64_t v63 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v11, 1LL, 1LL, v63);
        unint64_t v64 = sub_10001A080();
        uint64_t v65 = (void *)swift_allocObject(&unk_10008E138, 64LL, 7LL);
        v65[2] = v4;
        v65[3] = v64;
        v65[4] = v4;
        v65[5] = v43;
        uint64_t v66 = v68;
        v65[6] = a2;
        v65[7] = v66;
        swift_retain_n(v4, 2LL);
        swift_bridgeObjectRetain(a2);
        uint64_t v57 = sub_100008680((uint64_t)v11, (uint64_t)&unk_100096898, (uint64_t)v65);
      }

      else
      {
        uint64_t v53 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v11, 1LL, 1LL, v53);
        unint64_t v54 = sub_10001A080();
        uint64_t v55 = (void *)swift_allocObject(&unk_10008E110, 64LL, 7LL);
        v55[2] = v4;
        v55[3] = v54;
        v55[4] = v29;
        v55[5] = a2;
        uint64_t v56 = v68;
        v55[6] = v4;
        v55[7] = v56;
        swift_retain_n(v4, 2LL);
        swift_bridgeObjectRetain(a2);
        uint64_t v57 = sub_100016C04((uint64_t)v11, (uint64_t)&unk_100096888, (uint64_t)v55);
      }

      swift_release(v57);
      return;
    }
  }

  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(a2);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v30, (uint64_t)qword_100099B38);
  uint64_t v31 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v69 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, v32))
  {
    os_log_type_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    v72[0] = v34;
    *(_DWORD *)os_log_type_t v33 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v70 = sub_100009984(a1, a2, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v69,  v32,  "session config finished with no use count for %{public}s",  v33,  0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }
}

uint64_t sub_100017FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_10001812C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v6[15] = v7;
  void *v7 = v6;
  v7[1] = sub_100018188;
  return static Task<>.sleep(nanoseconds:)(10000000000LL);
}

uint64_t sub_100018188()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_1000186C4;
  }
  else {
    uint64_t v4 = sub_1000181F0;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1000181F0()
{
  uint64_t v1 = v0 + 88;
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v3, (uint64_t)qword_100099B38);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = *(void *)(v0 + 112);
  if (v7)
  {
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain(v8);
    uint64_t v12 = v9;
    uint64_t v1 = v0 + 88;
    *(void *)(v0 + 88) = sub_100009984(v12, v8, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "eviction timer fired: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 112), 2LL);
  }

  BOOL v13 = *(uint64_t (**)(__n128))(**(void **)(v0 + 96) + 152LL);
  __n128 v14 = swift_bridgeObjectRetain(*(void *)(v0 + 112));
  uint64_t v15 = v13(v14);
  if (*(void *)(v15 + 16) && (unint64_t v16 = sub_100010540(*(void *)(v0 + 104), *(void *)(v0 + 112)), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    if (v19)
    {
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v20 = *(void *)(v0 + 112);
      uint64_t v22 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(**(void **)(v0 + 96) + 192LL))(v0 + 48);
      sub_10001B178(v21, v20);
      swift_bridgeObjectRelease(v23);
      v22(v0 + 48, 0LL);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v25 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v25);
  }

  uint64_t v26 = swift_bridgeObjectRetain_n(*(void *)(v0 + 112), 2LL);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  unint64_t v30 = *(void *)(v0 + 112);
  if (v29)
  {
    uint64_t v31 = *(void *)(v0 + 104);
    os_log_type_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = v1;
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v34;
    *(_DWORD *)os_log_type_t v32 = 136446210;
    swift_bridgeObjectRetain(v30);
    *(void *)(v0 + 80) = sub_100009984(v31, v30, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v33, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease_n(v30, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "requesting eviction for %{public}s", v32, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 112), 2LL);
  }

  uint64_t v35 = *(int **)(**(void **)(*(void *)(v0 + 96) + 112LL) + 144LL);
  __n128 v37 = (int *)((char *)v35 + *v35);
  __n128 v36 = (void *)swift_task_alloc(v35[1]);
  *(void *)(v0 + 136) = v36;
  void *v36 = v0;
  v36[1] = sub_1000185EC;
  return ((uint64_t (*)(void, void))v37)(*(void *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_1000185EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  return swift_task_switch(sub_100018644, v1, 0LL);
}

uint64_t sub_100018644()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(**(void **)(v0 + 96) + 192LL))(v0 + 48);
  sub_10001B178(v2, v1);
  swift_bridgeObjectRelease(v4);
  v3(v0 + 48, 0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000186C4()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(**(void **)(v0 + 96) + 192LL))(v0 + 16);
  sub_10001B178(v2, v1);
  swift_bridgeObjectRelease(v4);
  v3(v0 + 16, 0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch(sub_100018760, a6, 0LL);
}

uint64_t sub_100018760()
{
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[4];
  if (v6)
  {
    uint64_t v8 = v0[3];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_bridgeObjectRetain(v7);
    v0[2] = sub_100009984(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "requesting immediate eviction for %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[4], 2LL);
  }

  uint64_t v11 = *(int **)(**(void **)(v0[5] + 112LL) + 144LL);
  __n128 v14 = (int *)((char *)v11 + *v11);
  uint64_t v12 = (void *)swift_task_alloc(v11[1]);
  v0[6] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100018958;
  return ((uint64_t (*)(void, void))v14)(v0[3], v0[4]);
}

uint64_t sub_100018958()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000189A0()
{
  *(void *)(v1 + 56) = v0;
  return swift_task_switch(sub_1000189B8, v0, 0LL);
}

uint64_t sub_1000189B8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 56) + 128LL))();
  *(void *)(v0 + 64) = v1;
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_100096C54);
    *(void *)(v0 + 72) = v2;
    void *v2 = v0;
    v2[1] = sub_100018AE8;
    return sub_100021D34();
  }

  else
  {
    if (qword_100099B30 != -1) {
      swift_once(&qword_100099B30, sub_100015E7C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100009FC4(v4, (uint64_t)qword_100099B38);
    BOOL v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to check last DNU setting : diskCache nil", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100018AE8(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  *(_BYTE *)(v3 + 160) = a1;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10001904C;
  }
  else {
    uint64_t v5 = sub_100018B58;
  }
  return swift_task_switch(v5, *(void *)(v3 + 56), 0LL);
}

uint64_t sub_100018B58()
{
  int v1 = *(unsigned __int8 *)(v0 + 160);
  if (v1 == 2)
  {
    if (qword_100099B30 != -1) {
      swift_once(&qword_100099B30, sub_100015E7C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_100009FC4(v2, (uint64_t)qword_100099B38);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      BOOL v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "resetting clientIDs due to missing lastDNU setting", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    os_log_type_t v7 = (void *)swift_task_alloc(dword_100096C4C);
    *(void *)(v0 + 1memset(&strm.total_in, 0, 20) = v7;
    uint64_t v8 = sub_100018EF8;
LABEL_13:
    void *v7 = v0;
    v7[1] = v8;
    return sub_100021BA4();
  }

  int v9 = v1 & 1;
  if (v9 != (sub_10003D63C() & 1))
  {
    if (qword_100099B30 != -1) {
      swift_once(&qword_100099B30, sub_100015E7C);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_100009FC4(v10, (uint64_t)qword_100099B38);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v14 = 67240448;
      *(_DWORD *)(v0 + 152) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 156, v14 + 4, v14 + 8);
      *(_WORD *)(v14 + 8) = 1026;
      *(_DWORD *)(v0 + 156) = sub_10003D63C() & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 156, v0 + 160, v14 + 10, v14 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "DNU status changed (%{BOOL,public}d -> %{BOOL,public}d), resetting clientIDs",  (uint8_t *)v14,  0xEu);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    os_log_type_t v7 = (void *)swift_task_alloc(dword_100096C4C);
    *(void *)(v0 + 88) = v7;
    uint64_t v8 = sub_100018DD4;
    goto LABEL_13;
  }

  swift_release(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018DD4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10001923C;
  }
  else {
    uint64_t v4 = sub_100018E38;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56), 0LL);
}

uint64_t sub_100018E38()
{
  char v1 = sub_10003D63C();
  uint64_t v2 = (void *)swift_task_alloc(dword_100096C5C);
  *(void *)(v0 + 104) = v2;
  void *v2 = v0;
  v2[1] = sub_100018E94;
  return sub_100021F14(v1 & 1);
}

uint64_t sub_100018E94()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10001942C;
  }
  else {
    uint64_t v4 = sub_10001B60C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56), 0LL);
}

uint64_t sub_100018EF8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10001961C;
  }
  else {
    uint64_t v4 = sub_100018F5C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56), 0LL);
}

uint64_t sub_100018F5C()
{
  char v1 = sub_10003D63C();
  uint64_t v2 = (void *)swift_task_alloc(dword_100096C5C);
  *(void *)(v0 + 136) = v2;
  void *v2 = v0;
  v2[1] = sub_100018FB8;
  return sub_100021F14(v1 & 1);
}

uint64_t sub_100018FB8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10001980C;
  }
  else {
    uint64_t v4 = sub_10001901C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56), 0LL);
}

uint64_t sub_10001901C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001904C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v7;
    *(_DWORD *)BOOL v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to check last DNU setting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001923C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v7;
    *(_DWORD *)BOOL v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to check last DNU setting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001942C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v7;
    *(_DWORD *)BOOL v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to check last DNU setting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001961C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v7;
    *(_DWORD *)BOOL v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to check last DNU setting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001980C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (qword_100099B30 != -1) {
    swift_once(&qword_100099B30, sub_100015E7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_100099B38);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v7;
    *(_DWORD *)BOOL v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to check last DNU setting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000199FC()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100019A40(uint64_t a1, int *a2)
{
  BOOL v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100019AA4;
  return v6(a1);
}

uint64_t sub_100019AA4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

Swift::Int sub_100019AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100096A08);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

LABEL_33:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      uint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v27 = *(void *)(v5 + 56);
      BOOL v28 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(v28 + 1);
      Swift::Int result = Hasher._finalize()();
      int64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0LL;
          }
          v23 |= v25;
          char v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v8 + 48) + v17) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  Swift::Int result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        unint64_t v11 = (v24 - 1) & v24;
        int64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }

      unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      uint64_t v33 = *(void *)(v5 + 56) + 48 * v22;
      uint64_t v34 = *(void *)v33;
      uint64_t v35 = *(void *)(v33 + 8);
      int64_t v36 = *(_BYTE *)(v33 + 16);
      uint64_t v43 = *(void *)(v33 + 24);
      uint64_t v44 = *(_OWORD *)(v33 + 32);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(*((void *)&v44 + 1));
      }

      Hasher.init(_seed:)(v45, *(void *)(v8 + 40));
      String.hash(into:)(v45, v32, v31);
      Swift::Int result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }

        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
      *uint64_t v19 = v32;
      v19[1] = v31;
      unint64_t v20 = *(void *)(v8 + 56) + 48 * v18;
      *(void *)unint64_t v20 = v34;
      *(void *)(v20 + 8) = v35;
      *(_BYTE *)(v20 + swift_weakDestroy(v0 + 16) = v36;
      *(void *)(v20 + 24) = v43;
      *(_OWORD *)(v20 + 32) = v44;
      ++*(void *)(v8 + 16);
    }
  }

  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

void sub_100019DF8()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100096A08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + vmemset(&strm.total_in, 0, 20) = v21;
    swift_bridgeObjectRetain(v18);
  }

  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

  uint64_t v0 = *(void *)(v1 + 152);
  BOOL v28 = *(void *)(v1 + 160);
  swift_release(v5);
  swift_bridgeObjectRelease(*(void *)(v1 + 64));
  if (v28 + 1 != v0)
  {
    uint64_t v29 = *(void *)(v1 + 160) + 1LL;
    *(void *)(v1 + 160) = v29;
    unint64_t v30 = *(void *)(v1 + 136);
    if (v29 >= *(void *)(v30 + 16)) {
      goto LABEL_76;
    }
    uint64_t v31 = v30 + 24 * v29;
    uint64_t v32 = *(void *)(v31 + 40);
    uint64_t v33 = *(void *)(v31 + 48);
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = sub_10002AC3C();
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    uint64_t *v82 = Dictionary.init(minimumCapacity:)(v34, &type metadata for String, v35, &protocol witness table for String);
    uint64_t v0 = *(void *)(v33 + 64);
    uint64_t v83 = v33 + 64;
    uint64_t v85 = v33;
    uint64_t v2 = -1LL << *(_BYTE *)(v33 + 32);
    Swift::Int result = swift_bridgeObjectRelease(v32);
    uint64_t v86 = 0LL;
    else {
      uint64_t v37 = -1LL;
    }
    int64_t v9 = v37 & v0;
    uint64_t v84 = (63 - v2) >> 6;
    while (!v9)
    {
      uint64_t v48 = v86 + 1;
      if (__OFADD__(v86, 1LL)) {
        goto LABEL_74;
      }
      if (v48 < v84)
      {
        os_log_type_t v49 = *(void *)(v83 + 8 * v48);
        if (v49) {
          goto LABEL_39;
        }
        BOOL v50 = v86 + 2;
        ++v86;
        if (v48 + 1 < v84)
        {
          os_log_type_t v49 = *(void *)(v83 + 8 * v50);
          if (v49) {
            goto LABEL_42;
          }
          uint64_t v86 = v48 + 1;
          if (v48 + 2 < v84)
          {
            os_log_type_t v49 = *(void *)(v83 + 8 * (v48 + 2));
            if (v49)
            {
              v48 += 2LL;
              goto LABEL_39;
            }

            BOOL v50 = v48 + 3;
            uint64_t v86 = v48 + 2;
            if (v48 + 3 < v84)
            {
              os_log_type_t v49 = *(void *)(v83 + 8 * v50);
              if (!v49)
              {
                while (1)
                {
                  uint64_t v48 = v50 + 1;
                  if (__OFADD__(v50, 1LL)) {
                    break;
                  }
                  if (v48 >= v84)
                  {
                    uint64_t v86 = v84 - 1;
                    goto LABEL_53;
                  }

                  os_log_type_t v49 = *(void *)(v83 + 8 * v48);
                  ++v50;
                  if (v49) {
                    goto LABEL_39;
                  }
                }

                __break(1u);
                return result;
              }

  __break(1u);
  return result;
}

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    Swift::Int result = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    int64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100030114(*(void *)(v5 + 56) + v22, (uint64_t)v4, type metadata accessor for ServiceEventValue);
    int64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *int64_t v23 = v21;
    v23[1] = v20;
    sub_100015684((uint64_t)v4, *(void *)(v7 + 56) + v22);
    swift_bridgeObjectRetain(v20);
  }

  char v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  int64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    int64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    int64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100030114(*(void *)(v5 + 56) + v22, (uint64_t)v4, type metadata accessor for CachedStorebag);
    int64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *int64_t v23 = v21;
    v23[1] = v20;
    sub_10003C218((uint64_t)v4, *(void *)(v7 + 56) + v22);
    swift_bridgeObjectRetain(v20);
  }

  char v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  int64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    int64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    ++v61;
    uint64_t v33 = v325;
    uint64_t v37 = v334;
    unint64_t v39 = v338;
    if (v61 == v60)
    {
      v242 = v331;
      v243 = v317;
      v244 = v335;
      sub_10001C2FC(v331, v317, v335, 1);
      sub_10001C2FC(v242, v243, v244, 1);
      uint64_t v5 = v322;
      char v38 = v304;
      goto LABEL_6;
    }
  }

    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * vswift_weakDestroy(v0 + 15) = v16;
    swift_bridgeObjectRetain(v16);
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    int64_t v22 = *(void *)v21;
    int64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = *(_BYTE *)(v21 + 16);
    int64_t v25 = *(void *)(v21 + 24);
    char v26 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v31 = *(_OWORD *)(v21 + 32);
    *char v26 = v19;
    v26[1] = v18;
    unint64_t v27 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v27 = v22;
    *(void *)(v27 + 8) = v23;
    *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = v24;
    *(void *)(v27 + 24) = v25;
    *(_OWORD *)(v27 + 32) = v31;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(*((void *)&v31 + 1));
  }

  unint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

          uint64_t v34 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
        }
      }

      int64_t v25 = v23 + 3;
      if (v25 < v59)
      {
        unint64_t v24 = *(void *)(v58 + 8 * v25);
        if (v24)
        {
          int64_t v22 = v25;
          goto LABEL_21;
        }

        while (1)
        {
          int64_t v22 = v25 + 1;
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_38;
          }
          if (v22 >= v59) {
            break;
          }
          unint64_t v24 = *(void *)(v58 + 8 * v22);
          ++v25;
          if (v24) {
            goto LABEL_21;
          }
        }
      }
    }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10000C2D4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100030C0C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    Swift::Int result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    int64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100028864(*(void *)(v5 + 56) + v22, (uint64_t)v4);
    int64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *int64_t v23 = v21;
    v23[1] = v20;
    sub_100028820((uint64_t)v4, *(void *)(v7 + 56) + v22);
    swift_bridgeObjectRetain(v20);
  }

  char v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  int64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    int64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

LABEL_28:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  uint64_t v20 = 2;
  Swift::Int result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v20,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100019FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100010540(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100019DF8();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10001A3DC(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_10001A080()
{
  unint64_t result = qword_100096880;
  if (!qword_100096880)
  {
    uint64_t v1 = type metadata accessor for SessionCoordinator();
    unint64_t result = swift_getWitnessTable(&unk_1000767C0, v1);
    atomic_store(result, (unint64_t *)&qword_100096880);
  }

  return result;
}

uint64_t sub_10001A0C4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10001A0F8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_10009687C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A560;
  v5[4] = v3;
  v5[5] = v4;
  v5[3] = v2;
  return swift_task_switch(sub_100018760, v4, 0LL);
}

uint64_t sub_10001A168(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10001AB84(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10001A314()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10001A348()
{
  __int128 v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_100096894);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10000A560;
  *(void *)(v3 + 112) = v2;
  *(_OWORD *)(v3 + 96) = v6;
  uint64_t v4 = (uint64_t *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(void *)(v3 + 1memset(&strm.total_in, 0, 20) = v4;
  *uint64_t v4 = v3;
  v4[1] = (uint64_t)sub_100018188;
  return static Task<>.sleep(nanoseconds:)(10000000000LL);
}

unint64_t sub_10001A3DC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_10001A5B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100019DF8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return;
    }

LABEL_11:
    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v21 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v21 = a2;
    v21[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100019AF0(v15, a4 & 1);
  unint64_t v19 = sub_100010540(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = v19;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    swift_bridgeObjectRelease(v2);
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = type metadata accessor for Client();
  uint64_t v10 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
  swift_bridgeObjectRetain(v2);
  char v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  unint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  BOOL v14 = ~v12;
  uint64_t v15 = sub_10000C5E8( &qword_100096F38,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
  while (1)
  {
    char v20 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v9, v15) & 1) != 0) {
      break;
    }
    uint64_t v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease(v2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  char v20 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100027AA4();
    uint64_t v18 = v20;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1000282CC(v13);
  unint64_t v19 = *v1;
  *uint64_t v1 = v20;
  swift_bridgeObjectRelease(v19);
  return v7;
}

  if (v1 < 0) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  unint64_t result = swift_bridgeObjectRelease(v1);
  if (!v5) {
    return (uint64_t)v4;
  }
LABEL_15:
  unint64_t v8 = 0LL;
  uint64_t v9 = (char *)(v4 + 7);
  BOOL v23 = v5;
  while ((v24 & 0xC000000000000001LL) != 0)
  {
    unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    uint64_t v10 = __OFADD__(v8++, 1LL);
    if (v10) {
      goto LABEL_32;
    }
LABEL_24:
    uint64_t v25 = result;
    unint64_t v27 = result;
    char v11 = v4[5];
    unint64_t v12 = type metadata accessor for Client();
    uint64_t v13 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    BOOL v14 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v15 = result & ~v14;
    char v16 = v15 >> 6;
    uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
    uint64_t v18 = 1LL << v15;
    if (((1LL << v15) & v17) != 0)
    {
      unint64_t v19 = ~v14;
      char v20 = sub_10000C5E8( &qword_100096F38,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
      do
      {
        char v26 = *(void *)(v4[6] + 8 * v15);
        unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          unint64_t result = swift_release(v25);
          uint64_t v5 = v23;
          goto LABEL_17;
        }

        uint64_t v15 = (v15 + 1) & v19;
        char v16 = v15 >> 6;
        uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
        uint64_t v18 = 1LL << v15;
      }

      while ((v17 & (1LL << v15)) != 0);
      uint64_t v5 = v23;
    }

    *(void *)&v9[8 * v16] = v18 | v17;
    *(void *)(v4[6] + 8 * vswift_weakDestroy(v0 + 15) = v25;
    uint64_t v21 = v4[2];
    uint64_t v10 = __OFADD__(v21, 1LL);
    uint64_t v22 = v21 + 1;
    if (v10) {
      goto LABEL_33;
    }
    void v4[2] = v22;
LABEL_17:
    if (v8 == v5) {
      return (uint64_t)v4;
    }
  }

  if (v8 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_34;
  }
  unint64_t result = swift_retain(*(void *)(v24 + 32 + 8 * v8));
  uint64_t v10 = __OFADD__(v8++, 1LL);
  if (!v10) {
    goto LABEL_24;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    BOOL v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10002A55C(v15, a4 & 1);
  char v20 = sub_100010540(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    ++v8;
    v6 += 2LL;
  }

  return v7;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    BOOL v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100069970(v15, a4 & 1);
  char v20 = sub_100010540(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ServiceTransportConfiguration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *assignWithCopy for SessionHierarchyItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for ServiceTransportConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceTransportConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceTransportConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SessionHierarchyItem()
{
  return &type metadata for SessionHierarchyItem;
}

uint64_t sub_10001A868(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_1000963A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Int sub_10001A8A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100009FDC(&qword_1000969F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

void sub_10001AB84(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10001A8A8(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_10001AD1C();
      goto LABEL_22;
    }

    sub_10001AECC(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    unint64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

LABEL_22:
  uint64_t v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  void *v25 = a1;
  v25[1] = a2;
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v28;
  }
}

    uint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10001A168(v17, v12, v13);
    Swift::Int result = swift_bridgeObjectRelease(v17[1]);
  }

  uint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    uint64_t v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    unint64_t v25 = (v31 - 1) & v31;
    uint64_t v82 = v32;
    BOOL v29 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_23:
    uint64_t v34 = (uint64_t *)(*(void *)(v78 + 48) + 16 * v29);
    int64_t v36 = *v34;
    uint64_t v35 = v34[1];
    if (v21[2])
    {
      swift_bridgeObjectRetain_n(v35, 2LL);
      uint64_t v37 = v36;
      char v38 = sub_100010540(v36, v35);
      if ((v39 & 1) != 0)
      {
        BOOL v27 = v81;
        sub_1000155F8(v21[7] + v10[9] * v38, (uint64_t)v81);
        char v40 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v10[7];
        v40(v27, 0LL, 1LL, v9);
      }

      else
      {
        char v40 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v10[7];
        BOOL v27 = v81;
        v40(v81, 1LL, 1LL, v9);
      }

      swift_bridgeObjectRelease(v35);
      BOOL v19 = v79;
    }

    else
    {
      uint64_t v37 = *v34;
      char v40 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v10[7];
      v40(v27, 1LL, 1LL, v9);
      uint64_t v41 = swift_bridgeObjectRetain(v35);
    }

    uint64_t v42 = (unsigned int (*)(uint64_t *, uint64_t, uint64_t, __n128))v10[6];
    if (v42(v27, 1LL, v9, v41) == 1)
    {
      sub_10000C234((uint64_t)v27, &qword_100096AA8);
      if (!v21[2]) {
        goto LABEL_5;
      }
    }

    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v9);
      if (!(_DWORD)EnumCaseMultiPayload)
      {
        v63[1] = v9;
        uint64_t v53 = *v27;
        unint64_t v54 = v27[1];
        uint64_t v55 = v64;
        static String.Encoding.utf8.getter(EnumCaseMultiPayload);
        String.data(using:allowLossyConversion:)(v55, 0LL, v53, v54);
        uint64_t v57 = v56;
        swift_bridgeObjectRelease(v54);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v55, v66);
        if (v57 >> 60 == 15) {
          unint64_t v58 = 0xC000000000000000LL;
        }
        else {
          unint64_t v58 = v57;
        }
        uint64_t v59 = sub_10000C5E8( (unint64_t *)&qword_1000964E0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
        dispatch thunk of HashFunction.init()();
        os_log_type_t v75 = v59;
        __asm { BR              X9 }
      }

      sub_10002ACF0((uint64_t)v27);
      if (!v21[2])
      {
LABEL_5:
        v40((uint64_t *)v19, 1LL, 1LL, v9);
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRetain(v35);
    uint64_t v44 = sub_100010540(v37, v35);
    if ((v45 & 1) != 0)
    {
      BOOL v19 = v79;
      sub_1000155F8(v21[7] + v80[9] * v44, (uint64_t)v79);
      char v46 = 0LL;
    }

    else
    {
      char v46 = 1LL;
      BOOL v19 = v79;
    }

    v40((uint64_t *)v19, v46, 1LL, v9);
    swift_bridgeObjectRelease(v35);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v42)(v19, 1LL, v9) != 1)
    {
      sub_10000C234((uint64_t)v19, &qword_100096AA8);
      swift_bridgeObjectRetain(v21);
      uint64_t v47 = sub_100010540(v37, v35);
      os_log_type_t v49 = v48;
      swift_bridgeObjectRelease(v21);
      if ((v49 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
        uint64_t v83 = v21;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_10002ECC0();
          uint64_t v21 = v83;
        }

        swift_bridgeObjectRelease(*(void *)(v21[6] + 16 * v47 + 8));
        uint64_t v51 = v67;
        sub_100015684(v21[7] + v80[9] * v47, v67);
        sub_10002F24C(v47, (uint64_t)v21);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v52 = 0LL;
      }

      else
      {
        uint64_t v52 = 1LL;
        uint64_t v51 = v67;
      }

      v40((uint64_t *)v51, v52, 1LL, v9);
      sub_10000C234(v51, &qword_100096AA8);
      swift_bridgeObjectRelease(v35);
      BOOL v19 = v79;
      unint64_t v10 = v80;
      uint64_t v26 = v82;
      goto LABEL_4;
    }

void sub_10001AD1C()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_1000969F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    Swift::Int result = (void *)swift_retain(v17);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  BOOL v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

Swift::Int sub_10001AECC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100009FDC(&qword_1000969F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10001B178(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001AD1C();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_10001B304(v8);
  uint64_t v16 = *v2;
  void *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t sub_10001B304(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_10001B4C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001B4EC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100098224);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10001B608;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100098220 + dword_100098220))(a1, v4);
}

uint64_t sub_10001B55C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10001B588()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100096A14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001B608;
  uint64_t v4 = *(int **)(*(void *)v2 + 264LL);
  uint64_t v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v3[2] = v5;
  void *v5 = v3;
  v5[1] = sub_10001B608;
  return v7();
}

uint64_t sub_10001B618()
{
  return 0x79745F746E657665LL;
}

uint64_t sub_10001B638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x79745F746E657665LL && a2 == 0xEB00000000736570LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEB00000000736570LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79745F746E657665LL, 0xEB00000000736570LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10001B6E4(uint64_t a1)
{
  unint64_t v2 = sub_10001C578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B70C(uint64_t a1)
{
  unint64_t v2 = sub_10001C578();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001B734@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001B8E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10001B760()
{
  return 0x675F747069726373LL;
}

uint64_t sub_10001B784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x675F747069726373LL && a2 == 0xED00007370756F72LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xED00007370756F72LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x675F747069726373LL, 0xED00007370756F72LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10001B83C(uint64_t a1)
{
  unint64_t v2 = sub_10001C534();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B864(uint64_t a1)
{
  unint64_t v2 = sub_10001C534();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10001B88C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10001BB18(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10001B8B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10001BC5C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }

  return result;
}

uint64_t sub_10001B8E4(void *a1)
{
  uint64_t v3 = sub_100009FDC(&qword_100096A88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000A32C(a1, v7);
  unint64_t v9 = sub_10001C578();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionBackendHTTP.CodingKeys,  &type metadata for StorebagSectionBackendHTTP.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_10000C2B4(a1);
    return v8;
  }

  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10000A32C(a1, v10);
  uint64_t v12 = dispatch thunk of Decoder.codingPath.getter(v10, v11);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    sub_100015BAC(v12 + 40 * v14 - 8, (uint64_t)&v22);
  }

  else
  {
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
  }

  uint64_t result = swift_bridgeObjectRelease(v13);
  uint64_t v16 = *((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v17 = v24;
    sub_10000A32C(&v22, *((uint64_t *)&v23 + 1));
    uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter(v16, v17);
    uint64_t v19 = v18;
    swift_bridgeObjectRetain(v18);
    sub_10000C2B4(&v22);
    uint64_t v20 = sub_100009FDC(&qword_100096A90);
    sub_10001C600(&qword_100096A98, &qword_100096A90, (void (*)(void))sub_10001C664);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v21 = v22;
    swift_bridgeObjectRetain(v22);
    sub_10000C2B4(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    return v8;
  }

  __break(1u);
  return result;
}

void *sub_10001BB18(void *a1)
{
  uint64_t v3 = sub_100009FDC(&qword_100096A68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_10000A32C(a1, v7);
  unint64_t v10 = sub_10001C534();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionBackendScriptGroup.CodingKeys,  &type metadata for StorebagSectionBackendScriptGroup.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_10000C2B4(a1);
  }

  else
  {
    uint64_t v11 = sub_100009FDC(&qword_100096A70);
    sub_10001C600(&qword_100096A78, &qword_100096A70, (void (*)(void))sub_10001C5BC);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14;
    sub_10000C2B4(a1);
  }

  return v9;
}

uint64_t sub_10001BC5C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10000A32C(a1, v3);
  uint64_t v5 = dispatch thunk of Decoder.codingPath.getter(v3, v4);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    sub_100015BAC(v5 + 40 * v7 - 8, (uint64_t)&v18);
    uint64_t result = swift_bridgeObjectRelease(v6);
    uint64_t v9 = *((void *)&v19 + 1);
    if (*((void *)&v19 + 1))
    {
      uint64_t v10 = v20;
      sub_10000A32C(&v18, *((uint64_t *)&v19 + 1));
      uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter(v9, v10);
      uint64_t v13 = v12;
      sub_10000C2B4(&v18);
      if (v11 == 0x6F736A5F70747468LL && v13 == (void *)0xE90000000000006ELL)
      {
        unint64_t v14 = 0xE90000000000006ELL;
      }

      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F736A5F70747468LL, 0xE90000000000006ELL) & 1) == 0)
        {
          if (v11 == 0x6C61636F6CLL && v13 == (void *)0xE500000000000000LL)
          {
            swift_bridgeObjectRelease(0xE500000000000000LL);
          }

          else
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636F6CLL, 0xE500000000000000LL);
            swift_bridgeObjectRelease(v13);
            if ((v16 & 1) == 0)
            {
              uint64_t v13 = 0LL;
LABEL_16:
              sub_10000C2B4(a1);
              return (uint64_t)v13;
            }
          }

          sub_100015BAC((uint64_t)a1, (uint64_t)&v18);
          uint64_t v17 = sub_10001BB18(&v18);
          if (!v1) {
            uint64_t v13 = v17;
          }
          goto LABEL_16;
        }

        unint64_t v14 = (unint64_t)v13;
      }

      swift_bridgeObjectRelease(v14);
      sub_100015BAC((uint64_t)a1, (uint64_t)&v18);
      uint64_t v15 = sub_10001B8E4(&v18);
      if (!v1) {
        uint64_t v13 = (void *)v15;
      }
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  __break(1u);
  return result;
}

unint64_t sub_10001BE98()
{
  unint64_t result = qword_100096A28;
  if (!qword_100096A28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007685C, &type metadata for StorebagSectionBackendHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A28);
  }

  return result;
}

unint64_t sub_10001BEE0()
{
  unint64_t result = qword_100096A30;
  if (!qword_100096A30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007693C, &type metadata for StorebagSectionBackendHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A30);
  }

  return result;
}

unint64_t sub_10001BF28()
{
  unint64_t result = qword_100096A38;
  if (!qword_100096A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076914, &type metadata for StorebagSectionBackendHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A38);
  }

  return result;
}

unint64_t sub_10001BF70()
{
  unint64_t result = qword_100096A40;
  if (!qword_100096A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007698C, &type metadata for StorebagSectionBackendScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A40);
  }

  return result;
}

unint64_t sub_10001BFB8()
{
  unint64_t result = qword_100096A48;
  if (!qword_100096A48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076A6C, &type metadata for StorebagSectionBackendScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A48);
  }

  return result;
}

unint64_t sub_10001C000()
{
  unint64_t result = qword_100096A50;
  if (!qword_100096A50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076A44, &type metadata for StorebagSectionBackendScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A50);
  }

  return result;
}

uint64_t destroy for StorebagSectionBackendHTTP(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s21CloudTelemetryService26StorebagSectionBackendHTTPVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for StorebagSectionBackendHTTP(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for StorebagSectionBackendHTTP(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionBackendHTTP(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionBackendHTTP(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionBackendHTTP()
{
  return &type metadata for StorebagSectionBackendHTTP;
}

ValueMetadata *type metadata accessor for StorebagSectionBackendHTTP.CodingKeys()
{
  return &type metadata for StorebagSectionBackendHTTP.CodingKeys;
}

ValueMetadata *type metadata accessor for StorebagSectionBackendScriptGroup()
{
  return &type metadata for StorebagSectionBackendScriptGroup;
}

uint64_t _s21CloudTelemetryService26StorebagSectionBackendHTTPV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10001C250 + 4 * asc_100076850[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10001C270 + 4 * byte_100076855[v4]))();
  }
}

_BYTE *sub_10001C250(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10001C270(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001C278(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001C280(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001C288(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001C290(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionBackendScriptGroup.CodingKeys()
{
  return &type metadata for StorebagSectionBackendScriptGroup.CodingKeys;
}

uint64_t sub_10001C2AC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRetain(a2);
    unint64_t result = a3;
  }

  return swift_bridgeObjectRetain(result);
}

uint64_t destroy for StorebagSectionBackend(uint64_t a1)
{
  return sub_10001C2FC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_10001C2FC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRelease(a2);
    unint64_t result = a3;
  }

  return swift_bridgeObjectRelease(result);
}

uint64_t initializeWithCopy for StorebagSectionBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10001C2AC(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for StorebagSectionBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10001C2AC(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10001C2FC(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for StorebagSectionBackend(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StorebagSectionBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10001C2FC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionBackend(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionBackend( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10001C4F0(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10001C508(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionBackend()
{
  return &type metadata for StorebagSectionBackend;
}

unint64_t sub_10001C534()
{
  unint64_t result = qword_100096A58;
  if (!qword_100096A58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000769F4, &type metadata for StorebagSectionBackendScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A58);
  }

  return result;
}

unint64_t sub_10001C578()
{
  unint64_t result = qword_100096A60;
  if (!qword_100096A60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000768C4, &type metadata for StorebagSectionBackendHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100096A60);
  }

  return result;
}

unint64_t sub_10001C5BC()
{
  unint64_t result = qword_100096A80;
  if (!qword_100096A80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078AF8, &type metadata for StorebagSectionClientScriptGroup);
    atomic_store(result, (unint64_t *)&qword_100096A80);
  }

  return result;
}

uint64_t sub_10001C600(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000A140(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10001C664()
{
  unint64_t result = qword_100096AA0;
  if (!qword_100096AA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078968, &type metadata for StorebagSectionClientHTTP);
    atomic_store(result, (unint64_t *)&qword_100096AA0);
  }

  return result;
}

uint64_t sub_10001C6A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ED10);
  sub_100009FC4(v0, (uint64_t)qword_10009ED10);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x74696D627573LL,  0xE600000000000000LL);
}

void *sub_10001C718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject(v3, 136LL, 15LL);
  swift_defaultActor_initialize();
  v7[14] = a1;
  v7[15] = a2;
  v7[16] = a3;
  return v7;
}

uint64_t sub_10001C768()
{
  v1[29] = v0;
  uint64_t v2 = sub_100009FDC(&qword_1000963A0);
  v1[30] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for CachedSession(0LL);
  v1[31] = v3;
  v1[32] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  v1[33] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[34] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[35] = swift_task_alloc(v6);
  v1[36] = swift_task_alloc(v6);
  return swift_task_switch(sub_10001C820, v0, 0LL);
}

uint64_t sub_10001C820()
{
  if (qword_10009A250 != -1) {
    swift_once(&qword_10009A250, sub_10001C6A8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100009FC4(v1, (uint64_t)qword_10009ED10);
  *(void *)(v0 + 296) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting submission activity", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 232);

  uint64_t v8 = *(void *)(v6 + 112);
  *(void *)(v0 + 304) = v8;
  if (!v8
    || (v9 = *(void *)(v0 + 232), uint64_t v10 = *(void *)(v9 + 120), (*(void *)(v0 + 312) = v10) == 0LL)
    || (uint64_t v11 = *(void *)(v9 + 128), (*(void *)(v0 + 320) = v11) == 0LL))
  {
    unint64_t v14 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "submission activity skipped due to bad initialization",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    goto LABEL_13;
  }

  swift_retain(v8);
  swift_retain(v10);
  uint64_t v12 = swift_retain(v11);
  uint64_t v13 = static Task<>.isCancelled.getter(v12);
  if ((v13 & 1) != 0)
  {
    swift_release(v11);
    swift_release(v10);
    swift_release(v8);
LABEL_13:
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v19 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  static Date.now.getter(v13);
  uint64_t v21 = (void *)swift_task_alloc(dword_100096C0C);
  *(void *)(v0 + 328) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_10001CA44;
  return sub_100020F30(50LL);
}

uint64_t sub_10001CA44(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 328LL);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10001DF18;
  }
  else {
    uint64_t v5 = sub_10001CAB0;
  }
  return swift_task_switch(v5, v3[29], 0LL);
}

void sub_10001CAB0()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 352) = v2;
  if (v2)
  {
    *(void *)(v0 + 360) = *(void *)(**(void **)(v0 + 312) + 248LL);
    *(void *)(v0 + 368) = 0LL;
    if (v1[2])
    {
      uint64_t v3 = v1[4];
      *(void *)(v0 + 376) = v3;
      unint64_t v4 = v1[5];
      *(void *)(v0 + 384) = v4;
      uint64_t v5 = swift_bridgeObjectRetain_n(v4, 3LL);
      uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v9 = swift_slowAlloc(32LL, -1LL);
        uint64_t v16 = v9;
        *(_DWORD *)uint64_t v8 = 136446210;
        swift_bridgeObjectRetain(v4);
        *(void *)(v0 + 224) = sub_100009984(v3, v4, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v8 + 4, v8 + 12);
        swift_bridgeObjectRelease_n(v4, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "sending events for client type: %{public}s", v8, 0xCu);
        swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1LL, -1LL);
        swift_slowDealloc(v8, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v4, 2LL);
      }

      swift_task_switch(sub_10001CCEC, *(void *)(v0 + 312), 0LL);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 304);
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 264));
    swift_release(v10);
    swift_release(v11);
    swift_release(v12);
    swift_bridgeObjectRelease(v1);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    (*(void (**)(void))(v0 + 8))();
  }

uint64_t sub_10001CCEC()
{
  uint64_t v1 = *(void *)(v0 + 232);
  (*(void (**)(void, void))(v0 + 360))(*(void *)(v0 + 376), *(void *)(v0 + 384));
  return swift_task_switch(sub_10001CD34, v1, 0LL);
}

uint64_t sub_10001CD34()
{
  uint64_t v1 = dword_100096C1C;
  swift_bridgeObjectRetain(v0[48]);
  uint64_t v2 = (uint64_t **)swift_task_alloc(v1);
  v0[49] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_10001CD98;
  return sub_10002117C(v0[47], v0[48], 50LL);
}

uint64_t sub_10001CD98(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 392LL));
  if (v1)
  {
    v4[68] = v1;
    uint64_t v5 = v4[42];
    uint64_t v6 = v4[29];
    swift_bridgeObjectRelease(v4[48]);
    swift_bridgeObjectRelease(v5);
    os_log_type_t v7 = sub_10001E110;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = v4[29];
    v4[50] = a1;
    os_log_type_t v7 = sub_10001CE28;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10001CE28()
{
  uint64_t result = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(v0 + 408) = v2;
  if (v2)
  {
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = 0LL;
    if (*(void *)(result + 16))
    {
      __int128 v3 = *(_OWORD *)(result + 32);
      __int128 v4 = *(_OWORD *)(result + 48);
      __int128 v5 = *(_OWORD *)(result + 64);
      *(void *)(v0 + 64) = *(void *)(result + 80);
      *(_OWORD *)(v0 + 32) = v4;
      *(_OWORD *)(v0 + 48) = v5;
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v3;
      sub_10001F5F0((void *)(v0 + 16));
      uint64_t v6 = *(void *)sub_100011764();
      uint64_t v7 = *(void *)sub_100011758();
      uint64_t v8 = (void *)swift_task_alloc(dword_100096BF4);
      *(void *)(v0 + 424) = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_10001CF2C;
      return sub_100020B30(v0 + 16, v6, v7);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v9);
    *(_BYTE *)(v0 + 552) = variable initialization expression of Daemon.mode() & 1;
    *(void *)(v0 + 536) = *(void *)(*(void *)v10 + 256LL);
    return swift_task_switch(sub_10001DC18, *(void *)(v0 + 312), 0LL);
  }

  return result;
}

uint64_t sub_10001CF2C(uint64_t a1)
{
  __int128 v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 424LL);
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    __int128 v5 = v3 + 2;
    uint64_t v6 = v3[50];
    uint64_t v7 = v3[48];
    uint64_t v8 = v3[42];
    uint64_t v9 = v3[29];
    sub_1000173BC(v5);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    uint64_t v10 = sub_10001E3BC;
    uint64_t v11 = v9;
  }

  else
  {
    uint64_t v11 = v3[29];
    uint64_t v10 = sub_10001CFD4;
  }

  return swift_task_switch(v10, v11, 0LL);
}

uint64_t sub_10001CFD4()
{
  uint64_t v1 = *(double **)(v0 + 432);
  if (*((void *)v1 + 2))
  {
    uint64_t v2 = *(void *)(v0 + 320);
    uint64_t v3 = *(void *)(v0 + 280);
    uint64_t v4 = *(void *)(v0 + 256);
    double v5 = v1[4];
    uint64_t v7 = *((void *)v1 + 6);
    uint64_t v6 = *((void *)v1 + 7);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 272) + 16LL))( v3,  *(void *)(v0 + 288),  *(void *)(v0 + 264));
    sub_10001F5F0((void *)(v0 + 16));
    swift_bridgeObjectRetain(v6);
    sub_10000C6A4(v0 + 16, v7, v6, v3, v4, v5);
    uint64_t v8 = *(int **)(*(void *)v2 + 120LL);
    uint64_t v21 = (int *)((char *)v8 + *v8);
    uint64_t v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 448) = v9;
    void *v9 = v0;
    v9[1] = sub_10001D1C8;
    return ((uint64_t (*)(void, void, _UNKNOWN **))v21)( *(void *)(v0 + 256),  *(void *)(v0 + 248),  &off_10008DB90);
  }

  else
  {
    sub_1000173BC((void *)(v0 + 16));
    uint64_t result = swift_bridgeObjectRelease(v1);
    unint64_t v11 = *(void *)(v0 + 416) + 1LL;
    if (v11 == *(void *)(v0 + 408))
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 400));
      uint64_t v12 = (void *)swift_task_alloc(dword_100096C1C);
      *(void *)(v0 + 528) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_10001DB88;
      return sub_10002117C(*(void *)(v0 + 376), *(void *)(v0 + 384), 50LL);
    }

    else
    {
      *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v11;
      uint64_t v13 = *(void *)(v0 + 400);
      if (v11 >= *(void *)(v13 + 16))
      {
        __break(1u);
      }

      else
      {
        uint64_t v14 = v13 + 56 * v11;
        __int128 v15 = *(_OWORD *)(v14 + 32);
        __int128 v16 = *(_OWORD *)(v14 + 48);
        __int128 v17 = *(_OWORD *)(v14 + 64);
        *(void *)(v0 + 64) = *(void *)(v14 + 80);
        *(_OWORD *)(v0 + 32) = v16;
        *(_OWORD *)(v0 + 48) = v17;
        *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v15;
        sub_10001F5F0((void *)(v0 + 16));
        uint64_t v18 = *(void *)sub_100011764();
        uint64_t v19 = *(void *)sub_100011758();
        uint64_t v20 = (void *)swift_task_alloc(dword_100096BF4);
        *(void *)(v0 + 424) = v20;
        *uint64_t v20 = v0;
        v20[1] = sub_10001CF2C;
        return sub_100020B30(v0 + 16, v18, v19);
      }
    }
  }

  return result;
}

uint64_t sub_10001D1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 448LL);
  v4[57] = a1;
  v4[58] = a2;
  v4[59] = v2;
  swift_task_dealloc(v5);
  if (v2) {
    uint64_t v6 = sub_10001E668;
  }
  else {
    uint64_t v6 = sub_10001D238;
  }
  return swift_task_switch(v6, v4[29], 0LL);
}

uint64_t sub_10001D238()
{
  uint64_t v1 = v0 + 26;
  uint64_t v2 = v0[57];
  if (v2)
  {
    uint64_t v3 = v0[58];
    int64_t v4 = *(void *)(v0[54] + 16LL);
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (v4)
    {
      uint64_t v58 = v0[58];
      uint64_t v59 = v0[57];
      *uint64_t v1 = _swiftEmptyArrayStorage;
      sub_10001F26C(0, v4, 0);
      uint64_t v6 = 0LL;
      uint64_t v5 = (void *)*v1;
      do
      {
        uint64_t v7 = v0[54] + v6;
        uint64_t v8 = *(void *)(v7 + 40);
        uint64_t v9 = *(void *)(v7 + 48);
        __int128 v61 = *(_OWORD *)(v7 + 56);
        v0[26] = v5;
        unint64_t v10 = v5[2];
        unint64_t v11 = v5[3];
        int64_t v12 = v10 + 1;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(*((void *)&v61 + 1));
        if (v10 >= v11 >> 1)
        {
          sub_10001F26C(v11 > 1, v10 + 1, 1);
          uint64_t v5 = (void *)v0[26];
        }

        v5[2] = v12;
        uint64_t v13 = &v5[4 * v10];
        v13[4] = v8;
        v13[5] = v9;
        *((_OWORD *)v13 + 3) = v61;
        v6 += 40LL;
        --v4;
      }

      while (v4);
    }

    else
    {
      int64_t v12 = _swiftEmptyArrayStorage[2];
      if (!v12)
      {
        unint64_t v28 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_17:
        v0[60] = v28;
        uint64_t ObjectType = swift_getObjectType(v2);
        int64_t v36 = *(int **)(v3 + 8);
        unint64_t v64 = (int *)((char *)v36 + *v36);
        uint64_t v37 = (void *)swift_task_alloc(v36[1]);
        v0[61] = v37;
        void *v37 = v0;
        v37[1] = sub_10001D830;
        return ((uint64_t (*)(void *, uint64_t, uint64_t))v64)(v28, ObjectType, v3);
      }

      uint64_t v58 = v0[58];
      uint64_t v59 = v0[57];
    }

    char v27 = v0 + 27;
    v0[27] = _swiftEmptyArrayStorage;
    sub_1000148C0(0, v12, 0);
    unint64_t v28 = (void *)v0[27];
    BOOL v29 = v5 + 6;
    do
    {
      uint64_t v30 = *((void *)v29 - 1);
      __int128 v63 = *v29;
      __int128 v31 = *v29;
      *char v27 = v28;
      unint64_t v32 = v28[2];
      unint64_t v33 = v28[3];
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(*((void *)&v63 + 1));
      if (v32 >= v33 >> 1)
      {
        sub_1000148C0(v33 > 1, v32 + 1, 1);
        unint64_t v28 = (void *)*v27;
      }

      v28[2] = v32 + 1;
      uint64_t v34 = &v28[3 * v32];
      v34[4] = v30;
      *(_OWORD *)(v34 + 5) = v63;
      v29 += 2;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(v5);
    uint64_t v2 = v59;
    uint64_t v0 = v60;
    uint64_t v3 = v58;
    goto LABEL_17;
  }

  unint64_t v14 = sub_10001F638();
  uint64_t v15 = swift_allocError(&type metadata for SubmitEventsActivity.Error, v14, 0LL, 0LL);
  swift_willThrow(v15);
  uint64_t v16 = v0[48];
  sub_100015BF0(v0[32], type metadata accessor for CachedSession);
  swift_bridgeObjectRetain(v16);
  swift_errorRetain(v15);
  swift_bridgeObjectRetain(v16);
  uint64_t v17 = swift_errorRetain(v15);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.error.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  unint64_t v21 = v0[48];
  if (v20)
  {
    uint64_t v22 = v0[47];
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = swift_slowAlloc(64LL, -1LL);
    v66[0] = v62;
    *(_DWORD *)uint64_t v23 = 136446466;
    swift_bridgeObjectRetain(v21);
    v0[22] = sub_100009984(v22, v21, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v21, 3LL);
    *(_WORD *)(v23 + 12) = 2082;
    swift_getErrorValue(v15, v0 + 23, v0 + 15);
    uint64_t v24 = Error.localizedDescription.getter(v0[16], v0[17]);
    unint64_t v26 = v25;
    v0[25] = sub_100009984(v24, v25, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "failed to send sendOneMessage events for clientType %{public}s: %{public}s",  (uint8_t *)v23,  0x16u);
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    swift_errorRelease(v15);
  }

  else
  {
    swift_errorRelease(v15);
    swift_bridgeObjectRelease_n(v21, 2LL);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  uint64_t v39 = v0[54];
  int64_t v40 = *(void *)(v39 + 16);
  if (v40)
  {
    uint64_t v41 = v0 + 18;
    v0[18] = _swiftEmptyArrayStorage;
    sub_10001F26C(0, v40, 0);
    uint64_t v42 = 0LL;
    uint64_t v43 = (void *)v0[18];
    do
    {
      uint64_t v44 = v0[54] + v42;
      uint64_t v45 = *(void *)(v44 + 40);
      uint64_t v46 = *(void *)(v44 + 48);
      __int128 v65 = *(_OWORD *)(v44 + 56);
      v0[18] = v43;
      unint64_t v48 = v43[2];
      unint64_t v47 = v43[3];
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(*((void *)&v65 + 1));
      if (v48 >= v47 >> 1)
      {
        sub_10001F26C(v47 > 1, v48 + 1, 1);
        uint64_t v43 = (void *)*v41;
      }

      v43[2] = v48 + 1;
      os_log_type_t v49 = &v43[4 * v48];
      v49[4] = v45;
      v49[5] = v46;
      *((_OWORD *)v49 + 3) = v65;
      v42 += 40LL;
      --v40;
      uint64_t v0 = v60;
    }

    while (v40);
    swift_bridgeObjectRelease(v60[54]);
    int64_t v50 = v43[2];
    if (v50) {
      goto LABEL_25;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v39);
    uint64_t v43 = _swiftEmptyArrayStorage;
    int64_t v50 = _swiftEmptyArrayStorage[2];
    if (v50)
    {
LABEL_25:
      uint64_t v51 = v0 + 19;
      v0[19] = _swiftEmptyArrayStorage;
      sub_10001F250(0, v50, 0);
      uint64_t v52 = (void *)v0[19];
      uint64_t v53 = 4LL;
      do
      {
        uint64_t v54 = v43[v53];
        *uint64_t v51 = v52;
        unint64_t v56 = v52[2];
        unint64_t v55 = v52[3];
        if (v56 >= v55 >> 1)
        {
          sub_10001F250(v55 > 1, v56 + 1, 1);
          uint64_t v52 = (void *)*v51;
        }

        v52[2] = v56 + 1;
        v52[v56 + 4] = v54;
        v53 += 4LL;
        --v50;
      }

      while (v50);
      swift_bridgeObjectRelease(v43);
      goto LABEL_32;
    }
  }

  swift_bridgeObjectRelease(v43);
  uint64_t v52 = _swiftEmptyArrayStorage;
LABEL_32:
  v0[63] = v52;
  uint64_t v57 = (void *)swift_task_alloc(dword_100096C04);
  v0[64] = v57;
  void *v57 = v0;
  v57[1] = sub_10001DA88;
  return sub_100020E48((uint64_t)v52);
}

uint64_t sub_10001D830()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 488);
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 480);
  uint64_t v5 = *(void *)(v2 + 232);
  swift_bridgeObjectRelease(v4);
  if (v0) {
    uint64_t v6 = sub_10001EA10;
  }
  else {
    uint64_t v6 = sub_10001D8A0;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10001D8A0()
{
  uint64_t v1 = v0[32];
  swift_unknownObjectRelease(v0[57]);
  sub_100015BF0(v1, type metadata accessor for CachedSession);
  uint64_t v2 = v0[54];
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v3)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v6 = _swiftEmptyArrayStorage;
    int64_t v13 = _swiftEmptyArrayStorage[2];
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  v0[18] = _swiftEmptyArrayStorage;
  sub_10001F26C(0, v3, 0);
  uint64_t v5 = 0LL;
  uint64_t v6 = (void *)v0[18];
  do
  {
    uint64_t v7 = v0[54] + v5;
    uint64_t v8 = *(void *)(v7 + 40);
    uint64_t v9 = *(void *)(v7 + 48);
    __int128 v21 = *(_OWORD *)(v7 + 56);
    v0[18] = v6;
    unint64_t v11 = v6[2];
    unint64_t v10 = v6[3];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(*((void *)&v21 + 1));
    if (v11 >= v10 >> 1)
    {
      sub_10001F26C(v10 > 1, v11 + 1, 1);
      uint64_t v6 = (void *)v0[18];
    }

    uint64_t v6[2] = v11 + 1;
    int64_t v12 = &v6[4 * v11];
    v12[4] = v8;
    v12[5] = v9;
    *((_OWORD *)v12 + 3) = v21;
    v5 += 40LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease(v0[54]);
  uint64_t v4 = _swiftEmptyArrayStorage;
  int64_t v13 = v6[2];
  if (v13)
  {
LABEL_9:
    unint64_t v14 = v0 + 19;
    v0[19] = _swiftEmptyArrayStorage;
    sub_10001F250(0, v13, 0);
    uint64_t v4 = (void *)v0[19];
    uint64_t v15 = 4LL;
    do
    {
      uint64_t v16 = v6[v15];
      void *v14 = v4;
      unint64_t v18 = v4[2];
      unint64_t v17 = v4[3];
      if (v18 >= v17 >> 1)
      {
        sub_10001F250(v17 > 1, v18 + 1, 1);
        uint64_t v4 = (void *)*v14;
      }

      void v4[2] = v18 + 1;
      v4[v18 + 4] = v16;
      v15 += 4LL;
      --v13;
    }

    while (v13);
  }

uint64_t sub_10001DA88()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 512LL);
  *(void *)(*(void *)v1 + 52swift_beginAccess(v1 + 144, v5, 1LL, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2 + 2;
    uint64_t v5 = v2[63];
    uint64_t v6 = v2[29];
    swift_bridgeObjectRelease(v5);
    sub_1000173BC(v4);
    uint64_t v7 = sub_10001EDC0;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v2[29];
    swift_bridgeObjectRelease(v2[63]);
    uint64_t v7 = sub_10001DB14;
    uint64_t v8 = v9;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10001DB14()
{
  uint64_t v1 = *(void *)sub_100011764();
  uint64_t v2 = *(void *)sub_100011758();
  uint64_t v3 = (void *)swift_task_alloc(dword_100096BF4);
  *(void *)(v0 + 424) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10001CF2C;
  return sub_100020B30(v0 + 16, v1, v2);
}

uint64_t sub_10001DB88(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 528LL));
  if (v1)
  {
    v4[68] = v1;
    uint64_t v5 = v4[42];
    uint64_t v6 = v4[29];
    swift_bridgeObjectRelease(v4[48]);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_10001E110;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = v4[29];
    v4[50] = a1;
    uint64_t v7 = sub_10001CE28;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10001DC18()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 232);
  (*(void (**)(void, uint64_t, void))(v0 + 536))( *(void *)(v0 + 376),  v1,  *(unsigned __int8 *)(v0 + 552));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10001DC78, v2, 0LL);
}

void sub_10001DC78()
{
  unint64_t v1 = *(void *)(v0 + 368) + 1LL;
  if (v1 == *(void *)(v0 + 352))
  {
    uint64_t v2 = *(void *)(v0 + 288);
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 272);
    swift_bridgeObjectRelease(*(void *)(v0 + 336));
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    uint64_t v6 = static Task<>.isCancelled.getter(v5);
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = *(void *)(v0 + 312);
      uint64_t v8 = *(void *)(v0 + 304);
      swift_release(*(void *)(v0 + 320));
      swift_release(v7);
      swift_release(v8);
      uint64_t v9 = *(void *)(v0 + 280);
      uint64_t v10 = *(void *)(v0 + 256);
      uint64_t v11 = *(void *)(v0 + 240);
      swift_task_dealloc(*(void *)(v0 + 288));
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      (*(void (**)(void))(v0 + 8))();
    }

    else
    {
      static Date.now.getter(v6);
      __int128 v21 = (void *)swift_task_alloc(dword_100096C0C);
      *(void *)(v0 + 328) = v21;
      *__int128 v21 = v0;
      v21[1] = sub_10001CA44;
      sub_100020F30(50LL);
    }
  }

  else
  {
    *(void *)(v0 + 368) = v1;
    uint64_t v12 = *(void *)(v0 + 336);
    if (v1 >= *(void *)(v12 + 16))
    {
      __break(1u);
    }

    else
    {
      uint64_t v13 = v12 + 16 * v1;
      uint64_t v14 = *(void *)(v13 + 32);
      *(void *)(v0 + 376) = v14;
      unint64_t v15 = *(void *)(v13 + 40);
      *(void *)(v0 + 384) = v15;
      uint64_t v16 = swift_bridgeObjectRetain_n(v15, 3LL);
      unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        uint64_t v22 = v20;
        *(_DWORD *)os_log_type_t v19 = 136446210;
        swift_bridgeObjectRetain(v15);
        *(void *)(v0 + 224) = sub_100009984(v14, v15, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease_n(v15, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "sending events for client type: %{public}s", v19, 0xCu);
        swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v15, 2LL);
      }

      swift_task_switch(sub_10001CCEC, *(void *)(v0 + 312), 0LL);
    }
  }

uint64_t sub_10001DF18()
{
  uint64_t v1 = *(void *)(v0 + 344);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 264));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue(v1, v0 + 168, v0 + 96);
    uint64_t v7 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    unint64_t v9 = v8;
    *(void *)(v0 + 192) = sub_100009984(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "error running sendOneMessage submission: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 304);
  swift_release(*(void *)(v0 + 320));
  swift_release(v10);
  swift_release(v11);
  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E110()
{
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 264));
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = v3;
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue(v1, v0 + 168, v0 + 96);
    uint64_t v9 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    unint64_t v11 = v10;
    *(void *)(v0 + 192) = sub_100009984(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "error running sendOneMessage submission: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v12 = v8;
    uint64_t v3 = v24;
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 304);
  if (v2)
  {
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    os_log_type_t v18 = (void *)swift_allocObject(&unk_10008E538, 56LL, 7LL);
    v18[2] = 0LL;
    v18[3] = 0LL;
    void v18[4] = v14;
    v18[5] = v3;
    v18[6] = v2;
    swift_retain(v14);
    swift_bridgeObjectRetain(v2);
    uint64_t v19 = sub_100016C04(v16, (uint64_t)&unk_100096AC0, (uint64_t)v18);
    swift_release(v19);
    swift_release(v15);
    swift_release(v14);
    swift_release(v13);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    swift_release(*(void *)(v0 + 320));
    swift_release(v14);
    swift_release(v15);
  }

  uint64_t v20 = *(void *)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E3BC()
{
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 264));
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = v3;
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue(v1, v0 + 168, v0 + 96);
    uint64_t v9 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    unint64_t v11 = v10;
    *(void *)(v0 + 192) = sub_100009984(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "error running sendOneMessage submission: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v12 = v8;
    uint64_t v3 = v24;
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 304);
  if (v2)
  {
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    os_log_type_t v18 = (void *)swift_allocObject(&unk_10008E538, 56LL, 7LL);
    v18[2] = 0LL;
    v18[3] = 0LL;
    void v18[4] = v14;
    v18[5] = v3;
    v18[6] = v2;
    swift_retain(v14);
    swift_bridgeObjectRetain(v2);
    uint64_t v19 = sub_100016C04(v16, (uint64_t)&unk_100096AC0, (uint64_t)v18);
    swift_release(v19);
    swift_release(v15);
    swift_release(v14);
    swift_release(v13);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    swift_release(*(void *)(v0 + 320));
    swift_release(v14);
    swift_release(v15);
  }

  uint64_t v20 = *(void *)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E668()
{
  uint64_t v1 = v0[59];
  uint64_t v2 = v0[48];
  sub_100015BF0(v0[32], type metadata accessor for CachedSession);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = v0[47];
    unint64_t v6 = v0[48];
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v34 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_bridgeObjectRetain(v6);
    v0[22] = sub_100009984(v7, v6, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v8 + 12) = 2082;
    swift_getErrorValue(v1, v0 + 23, v0 + 15);
    uint64_t v10 = Error.localizedDescription.getter(v0[16], v0[17]);
    unint64_t v12 = v11;
    v0[25] = sub_100009984(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "failed to send sendOneMessage events for clientType %{public}s: %{public}s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v13 = v0[48];
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = v0[54];
  int64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
    swift_bridgeObjectRelease(v14);
    os_log_type_t v18 = _swiftEmptyArrayStorage;
    int64_t v25 = _swiftEmptyArrayStorage[2];
    if (!v25) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }

  v0[18] = _swiftEmptyArrayStorage;
  sub_10001F26C(0, v15, 0);
  uint64_t v17 = 0LL;
  os_log_type_t v18 = (void *)v0[18];
  do
  {
    uint64_t v19 = v0[54] + v17;
    uint64_t v20 = *(void *)(v19 + 40);
    uint64_t v21 = *(void *)(v19 + 48);
    __int128 v33 = *(_OWORD *)(v19 + 56);
    v0[18] = v18;
    unint64_t v23 = v18[2];
    unint64_t v22 = v18[3];
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(*((void *)&v33 + 1));
    if (v23 >= v22 >> 1)
    {
      sub_10001F26C(v22 > 1, v23 + 1, 1);
      os_log_type_t v18 = (void *)v0[18];
    }

    v18[2] = v23 + 1;
    uint64_t v24 = &v18[4 * v23];
    v24[4] = v20;
    v24[5] = v21;
    *((_OWORD *)v24 + 3) = v33;
    v17 += 40LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease(v0[54]);
  uint64_t v16 = _swiftEmptyArrayStorage;
  int64_t v25 = v18[2];
  if (v25)
  {
LABEL_12:
    unint64_t v26 = v0 + 19;
    v0[19] = _swiftEmptyArrayStorage;
    sub_10001F250(0, v25, 0);
    uint64_t v16 = (void *)v0[19];
    uint64_t v27 = 4LL;
    do
    {
      uint64_t v28 = v18[v27];
      *unint64_t v26 = v16;
      unint64_t v30 = v16[2];
      unint64_t v29 = v16[3];
      if (v30 >= v29 >> 1)
      {
        sub_10001F250(v29 > 1, v30 + 1, 1);
        uint64_t v16 = (void *)*v26;
      }

      v16[2] = v30 + 1;
      v16[v30 + 4] = v28;
      v27 += 4LL;
      --v25;
    }

    while (v25);
  }

LABEL_16:
  swift_bridgeObjectRelease(v18);
  v0[63] = v16;
  __int128 v31 = (void *)swift_task_alloc(dword_100096C04);
  v0[64] = v31;
  *__int128 v31 = v0;
  v31[1] = sub_10001DA88;
  return sub_100020E48((uint64_t)v16);
}

  swift_bridgeObjectRelease(v18);
  v0[63] = v16;
  __int128 v31 = (void *)swift_task_alloc(dword_100096C04);
  v0[64] = v31;
  *__int128 v31 = v0;
  v31[1] = sub_10001DA88;
  return sub_100020E48((uint64_t)v16);
}

uint64_t sub_10001EA10()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = v0[48];
  sub_100015BF0(v0[32], type metadata accessor for CachedSession);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = v0[47];
    unint64_t v6 = v0[48];
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v34 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_bridgeObjectRetain(v6);
    v0[22] = sub_100009984(v7, v6, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v8 + 12) = 2082;
    swift_getErrorValue(v1, v0 + 23, v0 + 15);
    uint64_t v10 = Error.localizedDescription.getter(v0[16], v0[17]);
    unint64_t v12 = v11;
    v0[25] = sub_100009984(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "failed to send sendOneMessage events for clientType %{public}s: %{public}s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v13 = v0[48];
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = v0[54];
  int64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
    swift_bridgeObjectRelease(v14);
    os_log_type_t v18 = _swiftEmptyArrayStorage;
    int64_t v25 = _swiftEmptyArrayStorage[2];
    if (!v25) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }

  v0[18] = _swiftEmptyArrayStorage;
  sub_10001F26C(0, v15, 0);
  uint64_t v17 = 0LL;
  os_log_type_t v18 = (void *)v0[18];
  do
  {
    uint64_t v19 = v0[54] + v17;
    uint64_t v20 = *(void *)(v19 + 40);
    uint64_t v21 = *(void *)(v19 + 48);
    __int128 v33 = *(_OWORD *)(v19 + 56);
    v0[18] = v18;
    unint64_t v23 = v18[2];
    unint64_t v22 = v18[3];
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(*((void *)&v33 + 1));
    if (v23 >= v22 >> 1)
    {
      sub_10001F26C(v22 > 1, v23 + 1, 1);
      os_log_type_t v18 = (void *)v0[18];
    }

    v18[2] = v23 + 1;
    uint64_t v24 = &v18[4 * v23];
    v24[4] = v20;
    v24[5] = v21;
    *((_OWORD *)v24 + 3) = v33;
    v17 += 40LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease(v0[54]);
  uint64_t v16 = _swiftEmptyArrayStorage;
  int64_t v25 = v18[2];
  if (v25)
  {
LABEL_12:
    unint64_t v26 = v0 + 19;
    v0[19] = _swiftEmptyArrayStorage;
    sub_10001F250(0, v25, 0);
    uint64_t v16 = (void *)v0[19];
    uint64_t v27 = 4LL;
    do
    {
      uint64_t v28 = v18[v27];
      *unint64_t v26 = v16;
      unint64_t v30 = v16[2];
      unint64_t v29 = v16[3];
      if (v30 >= v29 >> 1)
      {
        sub_10001F250(v29 > 1, v30 + 1, 1);
        uint64_t v16 = (void *)*v26;
      }

      v16[2] = v30 + 1;
      v16[v30 + 4] = v28;
      v27 += 4LL;
      --v25;
    }

    while (v25);
  }

void sub_10001EDC0()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 384);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 520);
    uint64_t v8 = *(void *)(v0 + 376);
    unint64_t v7 = *(void *)(v0 + 384);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain(v7);
    *(void *)(v9 + 4) = sub_100009984(v8, v7, &v26);
    swift_bridgeObjectRelease_n(v7, 3LL);
    *(_WORD *)(v9 + 12) = 2082;
    swift_getErrorValue(v6, v0 + 160, v0 + 72);
    uint64_t v11 = Error.localizedDescription.getter(*(void *)(v0 + 80), *(void *)(v0 + 88));
    unint64_t v13 = v12;
    *(void *)(v9 + 14) = sub_100009984(v11, v12, &v26);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "failed to remove sendOneMessage events for clientType %{public}s: %{public}s",  (uint8_t *)v9,  0x16u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v6);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 520);
    uint64_t v15 = *(void *)(v0 + 384);
    swift_errorRelease(v14);
    swift_bridgeObjectRelease_n(v15, 2LL);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  unint64_t v16 = *(void *)(v0 + 416) + 1LL;
  if (v16 == *(void *)(v0 + 408))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 400));
    uint64_t v17 = (void *)swift_task_alloc(dword_100096C1C);
    *(void *)(v0 + 528) = v17;
    void *v17 = v0;
    v17[1] = sub_10001DB88;
    sub_10002117C(*(void *)(v0 + 376), *(void *)(v0 + 384), 50LL);
  }

  else
  {
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v16;
    uint64_t v18 = *(void *)(v0 + 400);
    if (v16 >= *(void *)(v18 + 16))
    {
      __break(1u);
    }

    else
    {
      uint64_t v19 = v18 + 56 * v16;
      __int128 v20 = *(_OWORD *)(v19 + 32);
      __int128 v21 = *(_OWORD *)(v19 + 48);
      __int128 v22 = *(_OWORD *)(v19 + 64);
      *(void *)(v0 + 64) = *(void *)(v19 + 80);
      *(_OWORD *)(v0 + 32) = v21;
      *(_OWORD *)(v0 + 48) = v22;
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v20;
      sub_10001F5F0((void *)(v0 + 16));
      uint64_t v23 = *(void *)sub_100011764();
      uint64_t v24 = *(void *)sub_100011758();
      int64_t v25 = (void *)swift_task_alloc(dword_100096BF4);
      *(void *)(v0 + 424) = v25;
      void *v25 = v0;
      v25[1] = sub_10001CF2C;
      sub_100020B30(v0 + 16, v23, v24);
    }
  }

unint64_t sub_10001F094()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10001F0B0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10001F0E4()
{
  uint64_t v2 = *(int **)(*(void *)v0 + 120LL);
  os_log_type_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000A560;
  return v5();
}

double sub_10001F13C()
{
  uint64_t v0 = SubmitEventsActivityConfig.activityFlags.unsafeMutableAddressor();
  swift_beginAccess(v0, v2, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(*v0).n128_u64[0];
  return result;
}

uint64_t sub_10001F17C()
{
  uint64_t v0 = SubmitEventsActivityConfig.identifier.unsafeMutableAddressor();
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRetain(*((void *)v0 + 1));
  return v1;
}

uint64_t sub_10001F1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  uint64_t v6[2] = a4;
  return swift_task_switch(sub_10001F1C8, 0LL, 0LL);
}

uint64_t sub_10001F1C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(_BYTE *)(v0 + 48) = variable initialization expression of Daemon.mode() & 1;
  *(void *)(v0 + 40) = *(void *)(*(void *)v1 + 256LL);
  return swift_task_switch(sub_10001F218, v1, 0LL);
}

uint64_t sub_10001F218()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F250(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10001F288(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10001F26C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10001F3E4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10001F288(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_100096BA8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10001F3E4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_100096BB0);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10001F54C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001F580()
{
  __int128 v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_100096ABC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001B608;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_10001F1C8, 0LL, 0LL);
}

void *sub_10001F5F0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_10001F638()
{
  unint64_t result = qword_100096AC8;
  if (!qword_100096AC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076C2C, &type metadata for SubmitEventsActivity.Error);
    atomic_store(result, (unint64_t *)&qword_100096AC8);
  }

  return result;
}

unint64_t sub_10001F680()
{
  unint64_t result = qword_100096AD0;
  if (!qword_100096AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076B7C, &type metadata for SubmitEventsActivity.Error);
    atomic_store(result, (unint64_t *)&qword_100096AD0);
  }

  return result;
}

unint64_t sub_10001F6C8(uint64_t a1)
{
  unint64_t result = sub_10001F6EC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001F6EC()
{
  unint64_t result = qword_100096AE0;
  if (!qword_100096AE0)
  {
    uint64_t v1 = type metadata accessor for SubmitEventsActivity();
    unint64_t result = swift_getWitnessTable(&unk_100076C6C, v1);
    atomic_store(result, (unint64_t *)&qword_100096AE0);
  }

  return result;
}

uint64_t type metadata accessor for SubmitEventsActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService20SubmitEventsActivity);
}

uint64_t storeEnumTagSinglePayload for SubmitEventsActivity.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10001F790 + 4 * asc_100076B70[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10001F7B0 + 4 * byte_100076B75[v4]))();
  }
}

_BYTE *sub_10001F790(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10001F7B0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001F7B8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001F7C0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001F7C8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001F7D0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SubmitEventsActivity.Error()
{
  return &type metadata for SubmitEventsActivity.Error;
}

uint64_t sub_10001F7EC()
{
  uint64_t v0 = NSHomeDirectory();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  URL.init(fileURLWithPath:isDirectory:)(v1, v3, 1LL);
  return swift_bridgeObjectRelease(v3);
}

BOOL sub_10001F848(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001F860()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009A568);
  sub_100009FC4(v0, (uint64_t)qword_10009A568);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x686361636B736964LL,  0xE900000000000065LL);
}

uint64_t DiskCache.__allocating_init(rootCacheURL:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_100096BC4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100016520;
  return DiskCache.init(rootCacheURL:)(a1);
}

uint64_t DiskCache.init(rootCacheURL:)(uint64_t a1)
{
  uint64_t v3 = v1;
  __int128 v5 = v2;
  v2[20] = a1;
  v2[21] = v1;
  unint64_t v6 = v2 + 20;
  uint64_t v59 = *v1;
  uint64_t v7 = type metadata accessor for SQLiteDB.Location(0LL);
  uint64_t v8 = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6[2] = v8;
  uint64_t v9 = sub_100009FDC(&qword_100096BC8);
  uint64_t v58 = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v6[3] = v58;
  uint64_t v10 = type metadata accessor for URL(0LL);
  v6[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v13 = swift_task_alloc(v12);
  v6[5] = v13;
  uint64_t v57 = swift_task_alloc(v12);
  v6[6] = v57;
  swift_defaultActor_initialize(v3);
  sub_10003E288(a1, (void *)0x636163746E657665LL, 0xEB000000002F6568LL, v13);
  unint64_t v56 = v3;
  URL.appendingPathComponent(_:isDirectory:)(0x62642E6568636163LL, 0xE800000000000000LL, 0LL);
  uint64_t v54 = v11;
  uint64_t v55 = v10;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v5[27] = v14;
  uint64_t v53 = v14;
  v14(v13, v10);
  uint64_t v15 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v15, v5 + 2);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLFileSizeKey;
  uint64_t v17 = NSURLFileSizeKey;
  uint64_t v18 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v19);
  URL.resourceValues(forKeys:)(v18);
  __int128 v20 = v5;
  swift_bridgeObjectRelease(v18);
  uint64_t v21 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v58, 0LL, 1LL, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v58, 1LL, v21) == 1)
  {
    sub_1000225C0(v58);
    uint64_t v23 = v8;
LABEL_3:
    type metadata accessor for SQLiteDB();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v23, v57, v55);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v23, 0LL, 1LL, v55);
    v56[14] = sub_100055C00(v23);
    uint64_t v27 = (void *)swift_task_alloc(dword_100096BD4);
    v20[28] = v27;
    *uint64_t v27 = v20;
    v27[1] = sub_100020008;
    v27[3] = v56;
    return swift_task_switch(sub_1000202D4, v56, 0LL);
  }

  uint64_t v52 = URLResourceValues.fileSize.getter();
  char v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v58, v21);
  uint64_t v23 = v8;
  if ((v30 & 1) != 0) {
    goto LABEL_3;
  }
  __int128 v31 = v6;
  unint64_t v32 = sub_10003D184();
  swift_beginAccess(v32, v6 - 13, 0LL, 0LL);
  uint64_t v33 = (*v32 & 1) != 0 ? 0x140000000LL : 3221225472LL;
  if (v52 <= v33) {
    goto LABEL_3;
  }
  uint64_t v34 = v6 - 3;
  uint64_t v35 = v6 - 1;
  if ((*sub_10003D5FC() & 1) != 0)
  {
    if (qword_10009A560 != -1) {
      swift_once(&qword_10009A560, sub_10001F860);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_100009FC4(v36, (uint64_t)qword_10009A568);
    char v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v40 = 134349312;
      *uint64_t v34 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 - 3, v31 - 2, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2050;
      swift_beginAccess(v32, v31 - 10, 0LL, 0LL);
      uint64_t v41 = 3221225472LL;
      if (*v32) {
        uint64_t v41 = 0x140000000LL;
      }
      uint64_t *v35 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 - 1, v31, v40 + 14, v40 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "cache size %{public}ld exceeded maximum %{public}ld - cache delete overridden",  (uint8_t *)v40,  0x16u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    goto LABEL_3;
  }

  if (qword_10009A560 != -1) {
    swift_once(&qword_10009A560, sub_10001F860);
  }
  uint64_t v42 = v20;
  uint64_t v43 = type metadata accessor for Logger(0LL);
  uint64_t v44 = sub_100009FC4(v43, (uint64_t)qword_10009A568);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v47 = 134349312;
    *(v31 - 2) = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 - 2, v31 - 1, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2050;
    swift_beginAccess(v32, v31 - 7, 0LL, 0LL);
    uint64_t v48 = 3221225472LL;
    if (*v32) {
      uint64_t v48 = 0x140000000LL;
    }
    *(v31 - 4) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 - 4, v31 - 3, v47 + 14, v47 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "cache size %{public}ld exceeded maximum %{public}ld - deleting cache",  (uint8_t *)v47,  0x16u);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  unint64_t v49 = sub_100022600();
  uint64_t v50 = swift_allocError(&type metadata for DiskCacheError, v49, 0LL, 0LL);
  *uint64_t v51 = 1;
  swift_willThrow(v50);
  v53(v57, v55);
  swift_defaultActor_destroy(v3);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(a1, v55);
  swift_deallocPartialClassInstance(v3, v59, 120LL, 15LL);
  uint64_t v24 = v20[25];
  uint64_t v26 = v20[22];
  uint64_t v25 = v20[23];
  swift_task_dealloc(v42[26]);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return ((uint64_t (*)(void))v42[1])();
}

uint64_t sub_100020008(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 224);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    a1 = 0LL;
LABEL_4:
    uint64_t v7 = (void *)swift_task_alloc(dword_100096BDC);
    v4[29] = v7;
    void *v7 = v6;
    v7[1] = sub_100020124;
    uint64_t v8 = v4[21];
    v7[3] = a1;
    v7[4] = v8;
    return swift_task_switch(sub_100020430, v8, 0LL);
  }

  if (a1 <= 8) {
    goto LABEL_4;
  }
  uint64_t v10 = v4[26];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v4[27];
  uint64_t v13 = v4[24];
  uint64_t v12 = v4[25];
  uint64_t v15 = v4[22];
  uint64_t v14 = v4[23];
  v11(v4[20], v13);
  v11(v10, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v6 + 8))(v4[21]);
}

uint64_t sub_100020124()
{
  uint64_t v2 = *(void *)(*v1 + 232);
  uint64_t v3 = *v1;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + 168) + 112LL);
    *(void *)(v3 + 248) = v4;
    swift_retain(v4);
    return swift_task_switch(sub_100020214, v4, 0LL);
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 208);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 216);
    uint64_t v9 = *(void *)(v3 + 192);
    uint64_t v8 = *(void *)(v3 + 200);
    uint64_t v11 = *(void *)(v3 + 176);
    uint64_t v10 = *(void *)(v3 + 184);
    v7(*(void *)(v3 + 160), v9);
    v7(v6, v9);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v3 + 8))(*(void *)(v3 + 168));
  }

uint64_t sub_100020214()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  sub_10005602C();
  uint64_t v7 = swift_release(v1);
  swift_willThrow(v7);
  swift_release(v5);
  v3(v2, v4);
  v3(v6, v4);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DiskCache.schemaVersion.getter()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000202D4, v0, 0LL);
}

uint64_t sub_1000202D4()
{
  uint64_t v1 = *(void *)(v0[3] + 112LL);
  v0[4] = v1;
  uint64_t v2 = swift_task_alloc(32LL);
  v0[5] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0x6E6F6973726576LL;
  *(void *)(v2 + 24) = 0xE700000000000000LL;
  return swift_task_switch(sub_100020338, v1, 0LL);
}

uint64_t sub_100020338()
{
  *(void *)(v0 + 48) = 0LL;
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1000203D8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *DiskCache.currentVersion.unsafeMutableAddressor()
{
  return &static DiskCache.currentVersion;
}

uint64_t sub_100020418(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(sub_100020430, v1, 0LL);
}

uint64_t sub_100020430()
{
  if (*(void *)(v0 + 24))
  {
    if (qword_10009A560 != -1) {
      swift_once(&qword_10009A560, sub_10001F860);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_100009FC4(v1, (uint64_t)qword_10009A568);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "unsupported prior database version - deleting disk cache",  v5,  2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    unint64_t v6 = sub_100022600();
    uint64_t v7 = swift_allocError(&type metadata for DiskCacheError, v6, 0LL, 0LL);
    *uint64_t v8 = 1;
    swift_willThrow(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v10 = *(void *)(*(void *)(v0 + 32) + 112LL);
    *(void *)(v0 + 40) = v10;
    return swift_task_switch(sub_100020570, v10, 0LL);
  }

uint64_t sub_100020570()
{
  *(void *)(v0 + 48) = 0LL;
  return swift_task_switch(sub_1000205F4, *(void *)(v0 + 32), 0LL);
}

uint64_t sub_1000205F4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 56) = v2;
  v2[2] = 0x6E6F6973726576LL;
  v2[3] = 0xE700000000000000LL;
  v2[4] = 9LL;
  return swift_task_switch(sub_100020658, v1, 0LL);
}

uint64_t sub_100020658()
{
  uint64_t v1 = v0[6];
  sub_100055E70(0xD000000000000060LL, 0x800000010007B270LL, (void (*)(void))sub_100023D2C);
  v0[8] = v1;
  if (v1)
  {
    uint64_t v2 = v0[4];
    uint64_t v3 = sub_1000206F0;
  }

  else
  {
    uint64_t v4 = v0[4];
    swift_task_dealloc(v0[7]);
    uint64_t v3 = sub_100020724;
    uint64_t v2 = v4;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_1000206F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020724()
{
  if (qword_10009A560 != -1) {
    swift_once(&qword_10009A560, sub_10001F860);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100009FC4(v1, (uint64_t)qword_10009A568);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = 9LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "initialized disk cache with version %lld", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_100009FDC(&qword_100096D18);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = &off_100091088;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a3;
  *(void *)(v10 + 96) = &type metadata for Int64;
  *(void *)(v10 + 104) = &off_100091048;
  *(void *)(v10 + 72) = a4;
  uint64_t v11 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 192LL);
  __n128 v12 = swift_bridgeObjectRetain(a3);
  v11(v10, v12);
  uint64_t result = swift_bridgeObjectRelease(v10);
  if (!v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t sub_100020910()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002091C(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = v6;
  *(void *)(v7 + 32) = a2;
  *(double *)(v7 + 24) = a3;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100020940, v6);
}

void sub_100020940(uint64_t a1)
{
  double v2 = Date.timeIntervalSince1970.getter(a1);
  if ((~*(void *)&v2 & 0x7FF0000000000000LL) == 0)
  {
    uint64_t v3 = 0LL;
LABEL_6:
    uint64_t v4 = sub_10002266C(v1[5]);
    v1[7] = 0LL;
    v1[8] = v5;
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = v1[3];
    uint64_t v9 = v1[2];
    uint64_t v10 = *(void *)(v1[6] + 112LL);
    void v1[9] = v10;
    uint64_t v11 = (void *)swift_task_alloc(64LL);
    v1[10] = v11;
    v11[2] = v9;
    v11[3] = v8;
    v11[4] = v3;
    v11[5] = v6;
    v11[6] = v7;
    swift_task_switch(sub_100020A4C, v10);
    return;
  }

  if (v2 <= -9.22337204e18)
  {
    __break(1u);
  }

  else if (v2 < 9.22337204e18)
  {
    uint64_t v3 = (uint64_t)v2;
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_100020A4C()
{
  uint64_t v1 = v0[7];
  sub_100055E70(0xD0000000000000C4LL, 0x800000010007ADE0LL, (void (*)(void))sub_1000229E4);
  v0[11] = v1;
  if (v1)
  {
    uint64_t v2 = v0[6];
    uint64_t v3 = sub_100020AF0;
  }

  else
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[6];
    swift_bridgeObjectRelease(v0[8]);
    swift_task_dealloc(v4);
    uint64_t v3 = sub_100020910;
    uint64_t v2 = v5;
  }

  return swift_task_switch(v3, v2);
}

uint64_t sub_100020AF0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_100020B4C, v3, 0LL);
}

uint64_t sub_100020B4C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void *)(v1 + 112);
  v0[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc(48LL);
  v0[8] = v6;
  uint64_t v6[2] = v4;
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v1;
  return swift_task_switch(sub_100020BB4, v5, 0LL);
}

uint64_t sub_100020BB4()
{
  v0[9] = 0LL;
  uint64_t v1 = v0[6];
  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100020C5C, v1, 0LL);
}

uint64_t sub_100020C5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100020C68()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020C9C@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v11 = sub_100009FDC(&qword_100096D18);
  uint64_t v12 = swift_allocObject(v11, 312LL, 7LL);
  __int128 v14 = a2[1];
  __int128 v21 = *a2;
  __int128 v13 = v21;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100076D00;
  *(_OWORD *)(v12 + 32) = v13;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = &off_100091088;
  __int128 v20 = v14;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = &off_100091088;
  *(_OWORD *)(v12 + 72) = v14;
  *(_OWORD *)uint64_t v19 = a2[2];
  *(void *)&v19[16] = *((void *)a2 + 6);
  char v15 = v19[0];
  *(void *)(v12 + 136) = &type metadata for Bool;
  *(void *)(v12 + 144) = &off_100091008;
  *(_BYTE *)(v12 + 112) = v15;
  char v16 = v19[1];
  *(void *)(v12 + 176) = &type metadata for Bool;
  *(void *)(v12 + 184) = &off_100091008;
  *(_BYTE *)(v12 + 152) = v16;
  *(void *)(v12 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(v12 + 224) = &off_100091088;
  *(_OWORD *)(v12 + 192) = *(_OWORD *)&v19[8];
  *(void *)(v12 + 256) = &type metadata for Int64;
  *(void *)(v12 + 264) = &off_100091048;
  *(void *)(v12 + 232) = a3;
  *(void *)(v12 + 296) = &type metadata for Int64;
  *(void *)(v12 + 304) = &off_100091048;
  *(void *)(v12 + 272) = a4;
  uint64_t v17 = *(void (**)(uint64_t))(*(void *)a1 + 192LL);
  sub_1000232C4((uint64_t)&v21);
  sub_1000232C4((uint64_t)&v20);
  sub_100023B30((uint64_t)v19);
  v17(v12);
  uint64_t result = swift_bridgeObjectRelease(v12);
  if (!v5)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    __chkstk_darwin(result);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 144LL))(sub_100023B58);
    uint64_t result = (uint64_t)v22;
    *a5 = v22;
  }

  return result;
}

uint64_t sub_100020E48(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_100020E60, v1, 0LL);
}

uint64_t sub_100020E60()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v0[3] + 112LL);
  v0[4] = v2;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  return swift_task_switch(sub_100020EB0, v2, 0LL);
}

uint64_t sub_100020EB0()
{
  v0[6] = 0LL;
  uint64_t v1 = v0[3];
  swift_task_dealloc(v0[5]);
  return swift_task_switch(sub_100023D28, v1, 0LL);
}

uint64_t sub_100020F30(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(sub_100020F48, v1, 0LL);
}

uint64_t sub_100020F48()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v0[4] + 112LL);
  v0[5] = v2;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[6] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  return swift_task_switch(sub_100020F98, v2, 0LL);
}

uint64_t sub_100020F98()
{
  v0[7] = 0LL;
  uint64_t v1 = v0[4];
  swift_task_dealloc(v0[6]);
  return swift_task_switch(sub_100020C5C, v1, 0LL);
}

uint64_t sub_100021040()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100021074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_100009FDC(&qword_100096D18);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &off_100091028;
  *(void *)(v8 + 32) = a2;
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = (void *)swift_bridgeObjectRelease(v8);
  if (!v3)
  {
    __chkstk_darwin(result);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 144LL))(sub_100023960);
    uint64_t result = _swiftEmptyArrayStorage;
    *a3 = _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_10002117C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_100021198, v3, 0LL);
}

uint64_t sub_100021198()
{
  uint64_t v1 = *(void *)(v0 + 40);
  __int128 v5 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = *(void *)(*(void *)(v0 + 48) + 112LL);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = swift_task_alloc(48LL);
  *(void *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v3 + 32) = v1;
  return swift_task_switch(sub_100021200, v2, 0LL);
}

uint64_t sub_100021200()
{
  v0[9] = 0LL;
  uint64_t v1 = v0[6];
  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100020C5C, v1, 0LL);
}

void *sub_1000212A8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v11 = sub_100009FDC(&qword_100096D18);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = &off_100091088;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 96) = &type metadata for Int;
  *(void *)(v12 + 104) = &off_100091028;
  *(void *)(v12 + 72) = a4;
  __int128 v13 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 192LL);
  __n128 v14 = swift_bridgeObjectRetain(a3);
  v13(v12, v14);
  uint64_t result = (void *)swift_bridgeObjectRelease(v12);
  if (!v5)
  {
    __chkstk_darwin(result);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 144LL))(sub_100023458);
    uint64_t result = _swiftEmptyArrayStorage;
    *a5 = _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_1000213E8(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(sub_100021400, v1);
}

uint64_t sub_100021400()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v0[4] + 112LL);
  v0[5] = v2;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[6] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  return swift_task_switch(sub_100021450, v2);
}

uint64_t sub_100021450()
{
  uint64_t v1 = v0[6];
  v0[7] = 0LL;
  uint64_t v2 = v0[4];
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000214D4, v2);
}

uint64_t sub_1000214D4()
{
  if (*(void *)(v0 + 16) != 50LL) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc(32LL);
  *(void *)(v0 + 64) = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  return swift_task_switch(sub_100021548, v1);
}

uint64_t sub_100021548()
{
  uint64_t v1 = v0[7];
  sub_100055ED4((void (*)(uint64_t))sub_100022CE8);
  uint64_t v2 = v0[8];
  if (v1)
  {
    v0[9] = v2;
    v0[10] = v1;
    uint64_t v3 = v0[4];
    uint64_t v4 = sub_1000215CC;
  }

  else
  {
    v0[7] = 0LL;
    uint64_t v5 = v0[4];
    swift_task_dealloc(v2);
    uint64_t v4 = sub_1000214D4;
    uint64_t v3 = v5;
  }

  return swift_task_switch(v4, v3);
}

uint64_t sub_1000215CC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), a2, v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_10008E750, v11 + v9, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  (*(void (**)(unint64_t, unint64_t, void (*)(uint64_t), uint64_t, char *))(*(void *)a1 + 128LL))( 0xD00000000000004BLL,  0x800000010007B340LL,  sub_10002334C,  v12,  &type metadata for ()[8]);
  uint64_t result = swift_release(v12);
  if (!v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(result);
    *a3 = result;
  }

  return result;
}

uint64_t sub_100021734(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_100021750, v2);
}

uint64_t sub_100021750()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v0[4] + 112LL);
  v0[5] = v2;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[6] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  return swift_task_switch(sub_1000217A0, v2);
}

uint64_t sub_1000217A0()
{
  *(void *)(v0 + 56) = 0LL;
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021850@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v13;
  if (v13)
  {
    uint64_t v5 = v12;
    sub_100055688(&v12, 1LL, a1, &type metadata for Int64, &off_100091038);
    uint64_t v6 = v12;
    uint64_t v7 = sub_100009FDC(&qword_100096D20);
    *a2 = v5;
    a2[1] = v4;
    Date.init(timeIntervalSince1970:)((double)v6);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( a2,  0LL,  1LL,  v7);
  }

  else
  {
    unint64_t v9 = sub_100022600();
    uint64_t v10 = swift_allocError(&type metadata for DiskCacheError, v9, 0LL, 0LL);
    _BYTE *v11 = 0;
    return swift_willThrow(v10);
  }

uint64_t sub_100021958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_100021978, v4);
}

uint64_t sub_100021978()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[6];
  if (v1)
  {
    uint64_t v3 = v0[5];
    uint64_t v5 = v0[2];
    uint64_t v4 = v0[3];
    uint64_t v6 = *(void *)(v2 + 112);
    v0[7] = v6;
    uint64_t v7 = (void *)swift_task_alloc(48LL);
    v0[8] = v7;
    v7[2] = v3;
    v7[3] = v5;
    v7[4] = v4;
    v7[5] = v1;
    uint64_t v8 = sub_100021A14;
  }

  else
  {
    uint64_t v9 = v0[2];
    uint64_t v6 = *(void *)(v2 + 112);
    v0[10] = v6;
    uint64_t v10 = swift_task_alloc(32LL);
    v0[11] = v10;
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = v9;
    uint64_t v8 = sub_100021AAC;
  }

  return swift_task_switch(v8, v6);
}

uint64_t sub_100021A14()
{
  v0[9] = 0LL;
  uint64_t v1 = v0[6];
  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100020910, v1);
}

uint64_t sub_100021AAC()
{
  v0[12] = 0LL;
  uint64_t v1 = v0[6];
  swift_task_dealloc(v0[11]);
  return swift_task_switch(sub_100023D28, v1);
}

uint64_t sub_100021B44()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021B74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021BA4()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_100021BBC, v0, 0LL);
}

uint64_t sub_100021BBC()
{
  uint64_t v1 = *(void *)(v0[3] + 112LL);
  v0[4] = v1;
  v0[5] = 0LL;
  return swift_task_switch(sub_100021BD8, v1, 0LL);
}

uint64_t sub_100021BD8()
{
  uint64_t v1 = v0[5];
  sub_100055ED4((void (*)(uint64_t))sub_100021C8C);
  v0[6] = v1;
  if (v1) {
    uint64_t v2 = sub_100021C80;
  }
  else {
    uint64_t v2 = sub_100021C48;
  }
  return swift_task_switch(v2, v0[3], 0LL);
}

uint64_t sub_100021C48()
{
  if (*(void *)(v0 + 16) != 50LL) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(void *)(v0 + 40) = *(void *)(v0 + 48);
  return swift_task_switch(sub_100021BD8, *(void *)(v0 + 32), 0LL);
}

uint64_t sub_100021C80()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021C8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t (*)(uint64_t), void, char *))(*(void *)a1 + 128LL))( 0xD00000000000001DLL,  0x800000010007B320LL,  sub_100021D0C,  0LL,  &type metadata for ()[8]);
  if (!v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(result);
    *a2 = result;
  }

  return result;
}

uint64_t sub_100021D0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176LL))();
}

uint64_t sub_100021D34()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_100021D4C, v0, 0LL);
}

uint64_t sub_100021D4C()
{
  uint64_t v1 = *(void *)(v0[3] + 112LL);
  v0[4] = v1;
  uint64_t v2 = swift_task_alloc(32LL);
  v0[5] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0x554E447473616CLL;
  *(void *)(v2 + 24) = 0xE700000000000000LL;
  return swift_task_switch(sub_100021DB0, v1, 0LL);
}

uint64_t sub_100021DB0()
{
  *(void *)(v0 + 48) = 0LL;
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(void *)(v0 + 16) != 0LL);
}

uint64_t sub_100021E58()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 40));
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_100009FDC(&qword_100098870);
  if (swift_dynamicCast(v0 + 56, v0 + 16, v2, &type metadata for DBError, 0LL) && !*(_BYTE *)(v0 + 56))
  {
    swift_errorRelease(*(void *)(v0 + 48));
    swift_errorRelease(*(void *)(v0 + 16));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100021F14(char a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return swift_task_switch(sub_100021F30, v1, 0LL);
}

uint64_t sub_100021F30()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v2 = *(void *)(*(void *)(v0 + 16) + 112LL);
  *(void *)(v0 + 24) = v2;
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 32) = v3;
  v3[2] = 0x554E447473616CLL;
  v3[3] = 0xE700000000000000LL;
  v3[4] = v1;
  return swift_task_switch(sub_100021F9C, v2, 0LL);
}

uint64_t sub_100021F9C()
{
  v0[5] = 0LL;
  uint64_t v1 = v0[2];
  swift_task_dealloc(v0[4]);
  return swift_task_switch(sub_100023D28, v1, 0LL);
}

uint64_t sub_100022034()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022068()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_100022080, v0);
}

uint64_t sub_100022080()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112LL);
  *(void *)(v0 + 24) = v1;
  return swift_task_switch(sub_10002209C, v1);
}

uint64_t sub_10002209C()
{
  *(void *)(v0 + 32) = 0LL;
  return swift_task_switch(sub_100020910, *(void *)(v0 + 16));
}

uint64_t sub_100022120()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DiskCache.deinit()
{
  return v0;
}

uint64_t DiskCache.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t static DiskCache.currentVersion.getter()
{
  return 9LL;
}

void *sub_10002217C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_100096D30);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100023670(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10002229C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_100098620);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      __n128 v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      __n128 v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10002377C(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000223A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_100096D28);
      uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4]) {
          memmove(v13, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10002386C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000224D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v13 = sub_100009FDC(&qword_100096D18);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = &off_100091088;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  char v15 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 192LL);
  __n128 v16 = swift_bridgeObjectRetain(a3);
  v15(v14, v16);
  uint64_t result = (void *)swift_bridgeObjectRelease(v14);
  if (!v6)
  {
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160LL))(&v18, a4, a5);
    *a6 = v18;
  }

  return result;
}

uint64_t sub_1000225C0(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100096BC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100022600()
{
  unint64_t result = qword_100096BE0;
  if (!qword_100096BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076DB0, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_100096BE0);
  }

  return result;
}

void *sub_100022644@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000224D0( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  (uint64_t)&type metadata for Int64,  (uint64_t)&off_100091038,  a2);
}

uint64_t sub_10002266C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = JSONEncoder.init()();
  uint64_t v11 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = sub_100009FDC((uint64_t *)&unk_100097050);
  unint64_t v7 = sub_10000A394();
  dispatch thunk of JSONEncoder.encode<A>(_:)(&v11, v6, v7);
  if (!v1)
  {
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(a1);
    __asm { BR              X9 }
  }

  swift_release(v5);
  swift_bridgeObjectRelease(a1);
  return a1;
}

uint64_t sub_1000229E4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (__int128 *)v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v9 = v3[6];
  uint64_t v10 = sub_100009FDC(&qword_100096D18);
  uint64_t v11 = swift_allocObject(v10, 352LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100076CF0;
  __int128 v19 = *v5;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = &off_100091088;
  *(_OWORD *)(v11 + 32) = *v5;
  __int128 v18 = v5[1];
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = &off_100091088;
  *(_OWORD *)(v11 + 72) = v5[1];
  *(_OWORD *)uint64_t v17 = v5[2];
  *(void *)&v17[16] = *((void *)v5 + 6);
  char v12 = v17[0];
  *(void *)(v11 + 136) = &type metadata for Bool;
  *(void *)(v11 + 144) = &off_100091008;
  *(_BYTE *)(v11 + 112) = v12;
  char v13 = v17[1];
  *(void *)(v11 + 176) = &type metadata for Bool;
  *(void *)(v11 + 184) = &off_100091008;
  *(_BYTE *)(v11 + 152) = v13;
  *(void *)(v11 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(v11 + 224) = &off_100091088;
  *(_OWORD *)(v11 + 192) = *(_OWORD *)&v17[8];
  *(void *)(v11 + 256) = &type metadata for Double;
  *(void *)(v11 + 264) = &off_100091068;
  *(void *)(v11 + 232) = v6;
  *(void *)(v11 + 296) = &type metadata for Int64;
  *(void *)(v11 + 304) = &off_100091048;
  *(void *)(v11 + 272) = v8;
  *(void *)(v11 + 336) = &type metadata for String;
  *(void *)(v11 + 344) = &off_100091088;
  *(void *)(v11 + 312) = v7;
  *(void *)(v11 + 3memset(&strm.total_in, 0, 20) = v9;
  uint64_t v14 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 192LL);
  sub_1000232C4((uint64_t)&v19);
  sub_1000232C4((uint64_t)&v18);
  sub_100023B30((uint64_t)v17);
  __n128 v15 = swift_bridgeObjectRetain(v9);
  v14(v11, v15);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t sub_100022B78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100020C9C(a1, *(__int128 **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100022B94(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 144LL))();
  }
  uint64_t v11 = *(void (**)(unint64_t, unint64_t, uint64_t (*)(uint64_t), uint64_t, char *))(*(void *)a1 + 128LL);
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = 0LL;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7 + 32);
    uint64_t v9 = swift_allocObject(&unk_10008E778, 24LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
    v11(0xD000000000000038LL, 0x800000010007B390LL, sub_100023A88, v9, &type metadata for ()[8]);
    if (v2) {
      break;
    }
    swift_release(v9);
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease(v5);
      return (*(uint64_t (**)(void))(*(void *)a1 + 144LL))();
    }
  }

  swift_bridgeObjectRelease(v5);
  return swift_release(v9);
}

void *sub_100022CB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100021074(a1, *(void *)(v2 + 16), a2);
}

void *sub_100022CCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000212A8(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100022CE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100021600(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100022D00(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(__int128 **)(v3 + 16);
  uint64_t v6 = sub_100009FDC(&qword_100096D18);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
  __int128 v13 = *v5;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = &off_100091088;
  *(_OWORD *)(v7 + 32) = *v5;
  __int128 v12 = v5[1];
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = &off_100091088;
  *(_OWORD *)(v7 + 72) = v5[1];
  uint64_t v8 = *(void (**)(uint64_t))(*(void *)a1 + 192LL);
  sub_1000232C4((uint64_t)&v13);
  sub_1000232C4((uint64_t)&v12);
  v8(v7);
  if (v2) {
    return swift_bridgeObjectRelease(v7);
  }
  swift_bridgeObjectRelease(v7);
  uint64_t v10 = *(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), void, uint64_t))(*(void *)a1 + 152LL);
  uint64_t v11 = sub_100009FDC(&qword_100096C38);
  return v10(sub_100021850, 0LL, v11);
}

uint64_t sub_100022EA4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(__int128 **)(v3 + 16);
  uint64_t v6 = sub_100009FDC(&qword_100096D18);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
  __int128 v11 = *v5;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = &off_100091088;
  *(_OWORD *)(v7 + 32) = *v5;
  __int128 v10 = v5[1];
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = &off_100091088;
  *(_OWORD *)(v7 + 72) = v5[1];
  uint64_t v8 = *(void (**)(uint64_t))(*(void *)a1 + 192LL);
  sub_1000232C4((uint64_t)&v11);
  sub_1000232C4((uint64_t)&v10);
  v8(v7);
  uint64_t result = swift_bridgeObjectRelease(v7);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t sub_100022F88(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (__int128 *)v3[3];
  uint64_t v7 = v3[4];
  uint64_t v6 = v3[5];
  getTimeIntervalSince1970(Date:)();
  uint64_t v9 = v8;
  uint64_t v10 = sub_100009FDC(&qword_100096D18);
  uint64_t v11 = swift_allocObject(v10, 192LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100076D10;
  __int128 v16 = *v5;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = &off_100091088;
  *(_OWORD *)(v11 + 32) = *v5;
  __int128 v15 = v5[1];
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = &off_100091088;
  *(_OWORD *)(v11 + 72) = v5[1];
  *(void *)(v11 + 136) = &type metadata for String;
  *(void *)(v11 + 144) = &off_100091088;
  *(void *)(v11 + 112) = v7;
  *(void *)(v11 + 1memset(&strm.total_in, 0, 20) = v6;
  *(void *)(v11 + 176) = &type metadata for Int64;
  *(void *)(v11 + 184) = &off_100091048;
  *(void *)(v11 + 152) = v9;
  __int128 v12 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 192LL);
  sub_1000232C4((uint64_t)&v16);
  sub_1000232C4((uint64_t)&v15);
  __n128 v13 = swift_bridgeObjectRetain(v6);
  v12(v11, v13);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

void *sub_1000230B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000224D0( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  (uint64_t)&type metadata for Int,  (uint64_t)&off_100091018,  a2);
}

uint64_t sub_1000230D8(uint64_t a1)
{
  return sub_100020838(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1000230F8()
{
  unint64_t result = qword_100096C68;
  if (!qword_100096C68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076D48, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_100096C68);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DiskCacheError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for DiskCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100023218 + 4 * byte_100076D35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002324C + 4 * byte_100076D30[v4]))();
}

uint64_t sub_10002324C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002325CLL);
  }
  return result;
}

uint64_t sub_100023268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100023270LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100023274(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002327C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100023288(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DiskCacheError()
{
  return &type metadata for DiskCacheError;
}

uint64_t type metadata accessor for DiskCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService9DiskCache);
}

uint64_t sub_1000232C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000232EC()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002334C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  double v4 = Date.timeIntervalSince1970.getter(v3);
  uint64_t v5 = 0LL;
  if ((~*(void *)&v4 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_5;
  }
  if (v4 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v5 = (uint64_t)v4;
LABEL_5:
  uint64_t v6 = sub_100009FDC(&qword_100096D18);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(v7 + 56) = &type metadata for Int64;
  *(void *)(v7 + 64) = &off_100091048;
  *(void *)(v7 + 32) = v5;
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t v8 = swift_bridgeObjectRelease(v7);
  if (!v1) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176LL))(v8);
  }
}

uint64_t sub_100023458(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  sub_100055688(&v29, 0LL, a1, &type metadata for String, &off_100091078);
  uint64_t v6 = v30;
  if (!v30) {
    goto LABEL_9;
  }
  uint64_t v7 = v29;
  sub_100055688(&v29, 3LL, a1, &type metadata for String, &off_100091078);
  if (!v30)
  {
    swift_bridgeObjectRelease(v6);
LABEL_9:
    unint64_t v25 = sub_100022600();
    uint64_t v26 = swift_allocError(&type metadata for DiskCacheError, v25, 0LL, 0LL);
    *uint64_t v27 = 0;
    return swift_willThrow(v26);
  }

  uint64_t v28 = v7;
  uint64_t v33 = v3;
  sub_100055688(&v29, 1LL, a1, &type metadata for Bool, &off_100090FF8);
  char v8 = v29;
  sub_100055688(&v29, 2LL, a1, &type metadata for Bool, &off_100090FF8);
  __int16 v9 = sub_10005855C(v8, v29);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  __int16 v14 = v9 & 0x101;
  swift_bridgeObjectRetain(v5);
  __int16 v15 = v14;
  __int128 v16 = v33;
  sub_10005857C(v4, v5, v28, v6, v15, v11, v13, (uint64_t)v31);
  uint64_t v17 = (void *)*v16;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v16);
  *__int128 v16 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000223A8(0LL, v17[2] + 1LL, 1, v17);
    uint64_t v17 = (void *)result;
    *__int128 v16 = result;
  }

  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t result = (uint64_t)sub_1000223A8((void *)(v19 > 1), v20 + 1, 1, v17);
    uint64_t v17 = (void *)result;
    *__int128 v16 = result;
  }

  v17[2] = v20 + 1;
  __int128 v21 = &v17[7 * v20];
  __int128 v22 = v31[0];
  __int128 v23 = v31[1];
  __int128 v24 = v31[2];
  v21[10] = v32;
  *((_OWORD *)v21 + 3) = v23;
  *((_OWORD *)v21 + 4) = v24;
  *((_OWORD *)v21 + 2) = v22;
  return result;
}

uint64_t sub_100023670(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100009FDC(&qword_100096D38);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002377C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002386C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 56 * a1 + 32;
  unint64_t v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100023960(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  sub_100055688(&v13, 0LL, a1, &type metadata for String, &off_100091078);
  uint64_t v3 = v14;
  if (v14)
  {
    uint64_t v4 = v13;
    unint64_t v5 = (void *)*v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t *v2 = (uint64_t)v5;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10002229C(0LL, v5[2] + 1LL, 1, v5);
      unint64_t v5 = (void *)result;
      uint64_t *v2 = result;
    }

    unint64_t v8 = v5[2];
    unint64_t v7 = v5[3];
    if (v8 >= v7 >> 1)
    {
      uint64_t result = (uint64_t)sub_10002229C((void *)(v7 > 1), v8 + 1, 1, v5);
      unint64_t v5 = (void *)result;
      uint64_t *v2 = result;
    }

    v5[2] = v8 + 1;
    __int16 v9 = &v5[2 * v8];
    v9[4] = v4;
    v9[5] = v3;
  }

  else
  {
    unint64_t v10 = sub_100022600();
    uint64_t v11 = swift_allocError(&type metadata for DiskCacheError, v10, 0LL, 0LL);
    *uint64_t v12 = 0;
    return swift_willThrow(v11);
  }

  return result;
}

uint64_t sub_100023A78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100023A88(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = sub_100009FDC(&qword_100096D18);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(v7 + 56) = &type metadata for Int64;
  *(void *)(v7 + 64) = &off_100091048;
  *(void *)(v7 + 32) = v5;
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease(v7);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t sub_100023B30(uint64_t a1)
{
  return a1;
}

uint64_t sub_100023B58(uint64_t a1)
{
  uint64_t v4 = *(uint64_t **)(v1 + 16);
  sub_100055688(&v27, 2LL, a1, &type metadata for String, &off_100091078);
  uint64_t v5 = v28;
  if (v28)
  {
    uint64_t v6 = v27;
    sub_100055688(&v27, 0LL, a1, &type metadata for Double, &off_100091058);
    uint64_t v7 = v27;
    sub_100055688(&v27, 1LL, a1, &type metadata for Int64, &off_100091038);
    uint64_t result = sub_10002C28C(v27, 0x4D656E4F646E6553LL, 0xEE00656761737365LL, v6, v5);
    if (!v2)
    {
      uint64_t v12 = result;
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      uint64_t v15 = v11;
      __int128 v16 = (void *)*v4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v4);
      *uint64_t v4 = (uint64_t)v16;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10002217C(0LL, v16[2] + 1LL, 1, v16);
        __int128 v16 = (void *)result;
        *uint64_t v4 = result;
      }

      unint64_t v17 = v16[2];
      unint64_t v18 = v16[3];
      unint64_t v19 = v17 + 1;
      if (v17 >= v18 >> 1)
      {
        unint64_t v26 = v17 + 1;
        __int128 v24 = v16;
        unint64_t v25 = v16[2];
        uint64_t result = (uint64_t)sub_10002217C((void *)(v18 > 1), v17 + 1, 1, v24);
        unint64_t v17 = v25;
        unint64_t v19 = v26;
        __int128 v16 = (void *)result;
        *uint64_t v4 = result;
      }

      v16[2] = v19;
      unint64_t v20 = &v16[5 * v17];
      v20[4] = v7;
      v20[5] = v12;
      v20[6] = v13;
      v20[7] = v14;
      _BYTE v20[8] = v15;
    }
  }

  else
  {
    unint64_t v21 = sub_100022600();
    uint64_t v22 = swift_allocError(&type metadata for DiskCacheError, v21, 0LL, 0LL);
    *__int128 v23 = 0;
    return swift_willThrow(v22);
  }

  return result;
}

uint64_t sub_100023D2C(uint64_t a1)
{
  return sub_1000230D8(a1);
}

uint64_t sub_100023D40(uint64_t a1)
{
  return sub_100021D0C(a1);
}

uint64_t sub_100023D54()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ED28);
  sub_100009FC4(v0, (uint64_t)qword_10009ED28);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x736E692D74736F70LL,  0xEC0000006C6C6174LL);
}

void sub_100023DD0()
{
  qword_10009ED40 = (uint64_t)&_swiftEmptyArrayStorage;
}

void sub_100023DE4()
{
  qword_10009ED48 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_100023DF8()
{
  qword_10009ED50 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_100023E0C()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100096D48 + dword_100096D48);
  uint64_t v1 = (void *)swift_task_alloc(unk_100096D4C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001B608;
  return v3();
}

uint64_t sub_100023E64()
{
  uint64_t v2 = *(int **)(*(void *)v0 + 88LL);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000A560;
  return v5();
}

double sub_100023EBC()
{
  uint64_t v0 = PostInstallActivityConfig.activityFlags.unsafeMutableAddressor();
  swift_beginAccess(v0, v2, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(*v0).n128_u64[0];
  return result;
}

uint64_t sub_100023EFC()
{
  uint64_t v0 = PostInstallActivityConfig.identifier.unsafeMutableAddressor();
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRetain(*((void *)v0 + 1));
  return v1;
}

uint64_t sub_100023F2C()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint(0LL);
  v0[18] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[19] = v2;
  v0[20] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  v0[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[22] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[23] = swift_task_alloc(v5);
  v0[24] = swift_task_alloc(v5);
  v0[25] = swift_task_alloc(v5);
  v0[26] = swift_task_alloc(v5);
  v0[27] = swift_task_alloc(v5);
  return swift_task_switch(sub_100024010, 0LL, 0LL);
}

uint64_t sub_100024010()
{
  unint64_t v1 = (unint64_t)(v0 + 5);
  uint64_t v2 = (uint64_t)(v0 + 8);
  id v141 = [(id)objc_opt_self(NSFileManager) defaultManager];
  if (qword_10009A788 != -1) {
LABEL_78:
  }
    swift_once(&qword_10009A788, sub_100023DD0);
  uint64_t v144 = v0 + 2;
  uint64_t v3 = *(void *)(qword_10009ED40 + 16);
  uint64_t v4 = &loc_100075000;
  unint64_t v150 = v0;
  if (v3)
  {
    unint64_t v135 = v1;
    uint64_t v136 = v2;
    uint64_t v138 = v0 + 11;
    Swift::Int v153 = v0 + 14;
    v140 = v0 + 16;
    unsigned int v137 = v0 + 17;
    uint64_t v151 = v0[22];
    uint64_t v148 = v0[19];
    unsigned int v146 = enum case for URL.DirectoryHint.isDirectory(_:);
    swift_bridgeObjectRetain(qword_10009ED40);
    uint64_t v134 = v5;
    uint64_t v6 = (void *)(v5 + 40);
    while (1)
    {
      uint64_t v15 = v0[26];
      uint64_t v17 = v0[20];
      uint64_t v16 = v0[21];
      uint64_t v18 = v0[18];
      uint64_t v20 = *(v6 - 1);
      uint64_t v19 = *v6;
      uint64_t v155 = v6;
      swift_bridgeObjectRetain(*v6);
      sub_10001F7EC();
      v0[14] = v20;
      v0[15] = v19;
      (*(void (**)(uint64_t, void, uint64_t))(v148 + 104))(v17, v146, v18);
      unint64_t v21 = sub_100024EC0();
      URL.appending<A>(path:directoryHint:)(v153, v17, &type metadata for String, v21);
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v17, v18);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
      v22(v15, v16);
      swift_bridgeObjectRelease(v19);
      Swift::Bool v23 = URL.checkResourceIsReachable()();
      if (v24)
      {
        swift_errorRelease(v24);
      }

      else if (v23)
      {
        uint64_t v0 = v150;
        if (qword_10009A780 != -1) {
          swift_once(&qword_10009A780, sub_100023D54);
        }
        uint64_t v25 = v150[27];
        uint64_t v26 = v150[25];
        uint64_t v27 = v150[21];
        uint64_t v28 = type metadata accessor for Logger(0LL);
        sub_100009FC4(v28, (uint64_t)qword_10009ED28);
        uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 16);
        uint64_t v30 = v29(v26, v25, v27);
        __int128 v31 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v32 = static os_log_type_t.default.getter();
        BOOL v33 = os_log_type_enabled(v31, v32);
        uint64_t v34 = v150[25];
        uint64_t v35 = v150[21];
        if (v33)
        {
          uint64_t v36 = swift_slowAlloc(12LL, -1LL);
          uint64_t v37 = v3;
          uint64_t v38 = swift_slowAlloc(32LL, -1LL);
          v157[0] = v38;
          *(_DWORD *)uint64_t v36 = 136446210;
          uint64_t v39 = URL.path.getter();
          uint64_t v40 = v22;
          unint64_t v42 = v41;
          *(void *)(v36 + 4) = sub_100009984(v39, v41, v157);
          unint64_t v43 = v42;
          uint64_t v22 = v40;
          swift_bridgeObjectRelease(v43);
          v40(v34, v35);
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "removing %{public}s", (uint8_t *)v36, 0xCu);
          swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v44 = v38;
          uint64_t v3 = v37;
          swift_slowDealloc(v44, -1LL, -1LL);
          uint64_t v0 = v150;
          swift_slowDealloc(v36, -1LL, -1LL);
        }

        else
        {
          v22(v150[25], v150[21]);
        }

        URL._bridgeToObjectiveC()(v58);
        uint64_t v60 = v59;
        v0[16] = 0LL;
        unsigned int v61 = [v141 removeItemAtURL:v59 error:v140];

        uint64_t v62 = (void *)v0[16];
        uint64_t v63 = v0[27];
        if (!v61)
        {
          uint64_t v139 = v3;
          uint64_t v66 = v0[23];
          uint64_t v67 = v0[21];
          id v68 = v62;
          uint64_t v69 = _convertNSErrorToError(_:)(v62);

          swift_willThrow(v70);
          v29(v66, v63, v67);
          swift_errorRetain(v69);
          uint64_t v71 = swift_errorRetain(v69);
          uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
          os_log_type_t v73 = static os_log_type_t.error.getter();
          BOOL v74 = os_log_type_enabled(v72, v73);
          uint64_t v75 = v0[27];
          uint64_t v76 = v0[23];
          uint64_t v77 = v0[21];
          if (v74)
          {
            uint64_t v78 = swift_slowAlloc(22LL, -1LL);
            uint64_t v79 = swift_slowAlloc(64LL, -1LL);
            v157[0] = v79;
            *(_DWORD *)uint64_t v78 = 136446466;
            uint64_t v80 = URL.path.getter();
            uint64_t v142 = v75;
            char v81 = v22;
            unint64_t v83 = v82;
            *(void *)(v78 + 4) = sub_100009984(v80, v82, v157);
            swift_bridgeObjectRelease(v83);
            v81(v76, v77);
            *(_WORD *)(v78 + 12) = 2082;
            swift_getErrorValue(v69, v137, v138);
            uint64_t v84 = Error.localizedDescription.getter(v0[12], v0[13]);
            unint64_t v86 = v85;
            *(void *)(v78 + 14) = sub_100009984(v84, v85, v157);
            swift_bridgeObjectRelease(v86);
            swift_errorRelease(v69);
            swift_errorRelease(v69);
            _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "failed removing %{public}s: %{public}s",  (uint8_t *)v78,  0x16u);
            swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v79, -1LL, -1LL);
            swift_slowDealloc(v78, -1LL, -1LL);

            swift_errorRelease(v69);
            v81(v142, v77);
          }

          else
          {

            swift_errorRelease(v69);
            swift_errorRelease(v69);
            v22(v76, v77);
            swift_errorRelease(v69);
            v22(v75, v77);
          }

          uint64_t v3 = v139;
          goto LABEL_5;
        }

        uint64_t v64 = v0[21];
        id v65 = v62;
        uint64_t v56 = v63;
        uint64_t v57 = v64;
        goto LABEL_17;
      }

      uint64_t v0 = v150;
      if (qword_10009A780 != -1) {
        swift_once(&qword_10009A780, sub_100023D54);
      }
      uint64_t v45 = v150[27];
      uint64_t v46 = v150[24];
      uint64_t v47 = v150[21];
      uint64_t v48 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v48, (uint64_t)qword_10009ED28);
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))(v46, v45, v47);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = v150[27];
      uint64_t v54 = v150[24];
      uint64_t v55 = v150[21];
      if (!v52)
      {

        v22(v54, v55);
        uint64_t v56 = v53;
        uint64_t v57 = v55;
LABEL_17:
        v22(v56, v57);
        goto LABEL_5;
      }

      uint64_t v7 = swift_slowAlloc(12LL, -1LL);
      unint64_t v8 = v22;
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      v157[0] = v9;
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v10 = URL.path.getter();
      uint64_t v11 = v3;
      unint64_t v13 = v12;
      *(void *)(v7 + 4) = sub_100009984(v10, v12, v157);
      unint64_t v14 = v13;
      uint64_t v3 = v11;
      swift_bridgeObjectRelease(v14);
      v8(v54, v55);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "skipping %{public}s", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      uint64_t v0 = v150;
      swift_slowDealloc(v7, -1LL, -1LL);

      v8(v53, v55);
LABEL_5:
      uint64_t v6 = v155 + 2;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v134);
        unint64_t v1 = v135;
        uint64_t v2 = v136;
        uint64_t v4 = (void *)&loc_100075000;
        break;
      }
    }
  }

  uint64_t v87 = sub_10003D238();
  swift_beginAccess(v87, v1, 0LL, 0LL);
  id v88 = [(id)*v87 dictionaryRepresentation];
  uint64_t v89 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v145 = v89 + 64;
  uint64_t v90 = -1LL << *(_BYTE *)(v89 + 32);
  if (-v90 < 64) {
    uint64_t v91 = ~(-1LL << -(char)v90);
  }
  else {
    uint64_t v91 = -1LL;
  }
  unint64_t v1 = v91 & *(void *)(v89 + 64);
  swift_bridgeObjectRetain(v89);
  swift_beginAccess(v87, v2, 0LL, 0LL);
  int64_t v92 = 0LL;
  int64_t v149 = (unint64_t)(63 - v90) >> 6;
  int v156 = v4[415];
  uint64_t v143 = v89;
  while (1)
  {
    if (v1)
    {
      uint64_t v152 = (v1 - 1) & v1;
      int64_t v154 = v92;
      unint64_t v93 = __clz(__rbit64(v1)) | (v92 << 6);
      goto LABEL_49;
    }

    BOOL v94 = __OFADD__(v92, 1LL);
    int64_t v95 = v92 + 1;
    if (v94)
    {
      __break(1u);
      goto LABEL_78;
    }

    if (v95 >= v149) {
      goto LABEL_76;
    }
    unint64_t v96 = *(void *)(v145 + 8 * v95);
    if (!v96) {
      break;
    }
LABEL_48:
    uint64_t v152 = (v96 - 1) & v96;
    int64_t v154 = v95;
    unint64_t v93 = __clz(__rbit64(v96)) + (v95 << 6);
LABEL_49:
    uint64_t v98 = (uint64_t *)(*(void *)(v89 + 48) + 16 * v93);
    uint64_t v100 = *v98;
    unint64_t v99 = v98[1];
    uint64_t v101 = qword_10009A780;
    swift_bridgeObjectRetain(v99);
    if (v101 != -1) {
      swift_once(&qword_10009A780, sub_100023D54);
    }
    uint64_t v102 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v102, (uint64_t)qword_10009ED28);
    uint64_t v103 = swift_bridgeObjectRetain_n(v99, 2LL);
    int v104 = (os_log_s *)Logger.logObject.getter(v103);
    os_log_type_t v105 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = swift_slowAlloc(12LL, -1LL);
      uint64_t v107 = swift_slowAlloc(32LL, -1LL);
      v157[0] = v107;
      *(_DWORD *)uint64_t v106 = v156;
      swift_bridgeObjectRetain(v99);
      *(void *)(v106 + 4) = sub_100009984(v100, v99, v157);
      swift_bridgeObjectRelease_n(v99, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "default set: %{public}s", (uint8_t *)v106, 0xCu);
      swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1LL, -1LL);
      swift_slowDealloc(v106, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v99, 2LL);
    }

    if (qword_10009A790 != -1) {
      swift_once(&qword_10009A790, sub_100023DE4);
    }
    if ((sub_100017FF8(v100, v99, qword_10009ED48) & 1) != 0)
    {
      uint64_t v108 = swift_bridgeObjectRetain_n(v99, 2LL);
      uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
      os_log_type_t v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = swift_slowAlloc(12LL, -1LL);
        uint64_t v112 = swift_slowAlloc(32LL, -1LL);
        v157[0] = v112;
        *(_DWORD *)uint64_t v111 = v156;
        swift_bridgeObjectRetain(v99);
        *(void *)(v111 + 4) = sub_100009984(v100, v99, v157);
        swift_bridgeObjectRelease_n(v99, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "removing default %{public}s", (uint8_t *)v111, 0xCu);
        swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v111, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v99, 2LL);
      }

      id v126 = (id)*v87;
      uint64_t v2 = (uint64_t)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v99);
      [v126 removeObjectForKey:v2];
    }

    else
    {
      if (qword_10009A798 != -1) {
        swift_once(&qword_10009A798, sub_100023DF8);
      }
      uint64_t v2 = qword_10009ED50;
      uint64_t v113 = *(void *)(qword_10009ED50 + 16);
      if (v113)
      {
        swift_bridgeObjectRetain(qword_10009ED50);
        swift_beginAccess(v87, v144, 0LL, 0LL);
        uint64_t v147 = v2;
        uint64_t v114 = (void *)(v2 + 40);
        do
        {
          uint64_t v116 = *(v114 - 1);
          uint64_t v117 = (void *)*v114;
          swift_bridgeObjectRetain(*v114);
          v118._uint64_t countAndFlagsBits = v116;
          v118._object = v117;
          uint64_t v2 = String.hasPrefix(_:)(v118);
          swift_bridgeObjectRelease(v117);
          if ((v2 & 1) != 0)
          {
            uint64_t v119 = swift_bridgeObjectRetain_n(v99, 2LL);
            uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
            os_log_type_t v121 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v120, v121))
            {
              uint64_t v122 = swift_slowAlloc(12LL, -1LL);
              uint64_t v123 = v87;
              uint64_t v124 = swift_slowAlloc(32LL, -1LL);
              v157[0] = v124;
              *(_DWORD *)uint64_t v122 = v156;
              swift_bridgeObjectRetain(v99);
              *(void *)(v122 + 4) = sub_100009984(v100, v99, v157);
              swift_bridgeObjectRelease_n(v99, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v120,  v121,  "removing default %{public}s",  (uint8_t *)v122,  0xCu);
              swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v125 = v124;
              uint64_t v87 = v123;
              swift_slowDealloc(v125, -1LL, -1LL);
              swift_slowDealloc(v122, -1LL, -1LL);
            }

            else
            {
              swift_bridgeObjectRelease_n(v99, 2LL);
            }

            uint64_t v2 = (uint64_t)(id)*v87;
            NSString v115 = String._bridgeToObjectiveC()();
            [(id)v2 removeObjectForKey:v115];
          }

          v114 += 2;
          --v113;
        }

        while (v113);
        swift_bridgeObjectRelease(v147);
        swift_bridgeObjectRelease(v99);
        uint64_t v0 = v150;
        uint64_t v89 = v143;
      }

      else
      {
        swift_bridgeObjectRelease(v99);
      }
    }

    unint64_t v1 = v152;
    int64_t v92 = v154;
  }

  int64_t v97 = v95 + 1;
  if (v95 + 1 >= v149) {
    goto LABEL_76;
  }
  unint64_t v96 = *(void *)(v145 + 8 * v97);
  if (v96) {
    goto LABEL_47;
  }
  int64_t v97 = v95 + 2;
  if (v95 + 2 >= v149) {
    goto LABEL_76;
  }
  unint64_t v96 = *(void *)(v145 + 8 * v97);
  if (v96) {
    goto LABEL_47;
  }
  int64_t v97 = v95 + 3;
  if (v95 + 3 >= v149) {
    goto LABEL_76;
  }
  unint64_t v96 = *(void *)(v145 + 8 * v97);
  if (v96) {
    goto LABEL_47;
  }
  int64_t v97 = v95 + 4;
  if (v95 + 4 >= v149) {
    goto LABEL_76;
  }
  unint64_t v96 = *(void *)(v145 + 8 * v97);
  if (v96) {
    goto LABEL_47;
  }
  int64_t v97 = v95 + 5;
  if (v95 + 5 >= v149) {
    goto LABEL_76;
  }
  unint64_t v96 = *(void *)(v145 + 8 * v97);
  if (v96)
  {
LABEL_47:
    int64_t v95 = v97;
    goto LABEL_48;
  }

  while (1)
  {
    int64_t v95 = v97 + 1;
    if (__OFADD__(v97, 1LL)) {
      __break(1u);
    }
    if (v95 >= v149) {
      break;
    }
    unint64_t v96 = *(void *)(v145 + 8 * v95);
    ++v97;
    if (v96) {
      goto LABEL_48;
    }
  }

unint64_t sub_100024E38(uint64_t a1)
{
  unint64_t result = sub_100024E5C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100024E5C()
{
  unint64_t result = qword_100096D58;
  if (!qword_100096D58)
  {
    uint64_t v1 = type metadata accessor for PostInstallActivity();
    unint64_t result = swift_getWitnessTable(&unk_100076E50, v1);
    atomic_store(result, (unint64_t *)&qword_100096D58);
  }

  return result;
}

uint64_t type metadata accessor for PostInstallActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService19PostInstallActivity);
}

unint64_t sub_100024EC0()
{
  unint64_t result = qword_100096E08;
  if (!qword_100096E08)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100096E08);
  }

  return result;
}

uint64_t sub_100024F04()
{
  if (*v0) {
    return 0x727574616E676973LL;
  }
  else {
    return 6775138LL;
  }
}

uint64_t sub_100024F3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100025590(a1, a2);
  *a3 = result;
  return result;
}

void sub_100024F60(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100024F6C(uint64_t a1)
{
  unint64_t v2 = sub_100025828();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100024F94(uint64_t a1)
{
  unint64_t v2 = sub_100025828();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100024FBC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10002567C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_100024FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = PropertyListDecoder.init()();
  uint64_t v24 = 100LL;
  unint64_t v7 = sub_10002515C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)( &v20,  &type metadata for RawStorebag._EncodedRawStorebag,  a1,  a2,  &v24,  &type metadata for RawStorebag._EncodedRawStorebag,  v7);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = v23;
  a2 = Data.init(base64Encoded:options:)(v20, v21, 1LL);
  unint64_t v12 = v11;
  uint64_t v13 = Data.init(base64Encoded:options:)(v9, v10, 1LL);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  if (v12 >> 60 == 15 || v15 >> 60 == 15)
  {
    unint64_t v16 = sub_1000251A0();
    uint64_t v17 = swift_allocError(&type metadata for Storebag.Error, v16, 0LL, 0LL);
    *uint64_t v18 = 0;
    swift_willThrow(v17);
    swift_release(v6);
    sub_10000A060(v13, v15);
    sub_10000A060(a2, v12);
  }

  else
  {
LABEL_2:
    swift_release(v6);
  }

  return a2;
}

unint64_t sub_10002515C()
{
  unint64_t result = qword_10009A8A0[0];
  if (!qword_10009A8A0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076F04, &type metadata for RawStorebag._EncodedRawStorebag);
    atomic_store(result, qword_10009A8A0);
  }

  return result;
}

unint64_t sub_1000251A0()
{
  unint64_t result = qword_100096E10;
  if (!qword_100096E10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007817C, &type metadata for Storebag.Error);
    atomic_store(result, (unint64_t *)&qword_100096E10);
  }

  return result;
}

uint64_t sub_1000251E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Data.write(to:options:)(a1, 0LL, a2, a3);
}

uint64_t destroy for RawStorebag(uint64_t a1)
{
  return sub_10000A074(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *initializeWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000A0B8(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_10000A0B8(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000A0B8(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000A074(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_10000A0B8(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10000A074(v10, v11);
  return a1;
}

uint64_t *assignWithTake for RawStorebag(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000A074(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000A074(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RawStorebag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RawStorebag()
{
  return &type metadata for RawStorebag;
}

uint64_t destroy for RawStorebag._EncodedRawStorebag(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag()
{
  return &type metadata for RawStorebag._EncodedRawStorebag;
}

uint64_t sub_100025590(uint64_t a1, unint64_t a2)
{
  if (a1 == 6775138 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775138LL, 0xE300000000000000LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x727574616E676973LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973LL, 0xE900000000000065LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10002567C(void *a1)
{
  uint64_t v3 = sub_100009FDC(&qword_100096E18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000A32C(a1, v7);
  unint64_t v9 = sub_100025828();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys,  &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_10000C2B4(a1);
  }

  else
  {
    char v17 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    uint64_t v12 = v11;
    char v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_10000C2B4(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

unint64_t sub_100025828()
{
  unint64_t result = qword_10009A930[0];
  if (!qword_10009A930[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076FF0, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, qword_10009A930);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000258B8 + 4 * byte_100076EC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000258EC + 4 * asc_100076EC0[v4]))();
}

uint64_t sub_1000258EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000258F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000258FCLL);
  }
  return result;
}

uint64_t sub_100025908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100025910LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100025914(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002591C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag.CodingKeys()
{
  return &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys;
}

unint64_t sub_10002593C()
{
  unint64_t result = qword_10009AA40[0];
  if (!qword_10009AA40[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076FC8, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, qword_10009AA40);
  }

  return result;
}

unint64_t sub_100025984()
{
  unint64_t result = qword_10009AB50;
  if (!qword_10009AB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076F38, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10009AB50);
  }

  return result;
}

unint64_t sub_1000259CC()
{
  unint64_t result = qword_10009AB58[0];
  if (!qword_10009AB58[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100076F60, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, qword_10009AB58);
  }

  return result;
}

unint64_t sub_100025A14()
{
  return 0xD000000000000032LL;
}

uint64_t sub_100025A30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100025A5C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }

  return result;
}

uint64_t sub_100025A5C(void *a1)
{
  unint64_t v3 = sub_100025E38();
  uint64_t v4 = Array<A>.init(from:)(v8, &type metadata for StorebagSectionFilter, v3);
  if (v1)
  {
    swift_errorRelease(v1);
    sub_100015BAC((uint64_t)a1, (uint64_t)v8);
    unint64_t v5 = sub_100025E7C();
    uint64_t v6 = Array<A>.init(from:)(v8, &type metadata for StorebagSectionScript, v5);
  }

  else
  {
    uint64_t v6 = v4;
  }

  sub_10000C2B4(a1);
  return v6;
}

unint64_t sub_100025B9C()
{
  unint64_t result = qword_100096E20;
  if (!qword_100096E20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007704C, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_100096E20);
  }

  return result;
}

unint64_t sub_100025BE4()
{
  unint64_t result = qword_100096E28;
  if (!qword_100096E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000770FC, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_100096E28);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StorebagSharedValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for StorebagSectionPerCountrySampling(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t initializeWithTake for StorebagSharedValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  char v3 = *((_BYTE *)a2 + 8);
  uint64_t v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSharedValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100025D7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100025D84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue()
{
  return &type metadata for StorebagSharedValue;
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100025DDC + 4 * byte_100077040[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100025DFC + 4 * byte_100077045[v4]))();
  }
}

_BYTE *sub_100025DDC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100025DFC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100025E04(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100025E0C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100025E14(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100025E1C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue.Error()
{
  return &type metadata for StorebagSharedValue.Error;
}

unint64_t sub_100025E38()
{
  unint64_t result = qword_100096E30;
  if (!qword_100096E30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077A64, &type metadata for StorebagSectionFilter);
    atomic_store(result, (unint64_t *)&qword_100096E30);
  }

  return result;
}

unint64_t sub_100025E7C()
{
  unint64_t result = qword_100096E38;
  if (!qword_100096E38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077684, &type metadata for StorebagSectionScript);
    atomic_store(result, (unint64_t *)&qword_100096E38);
  }

  return result;
}

uint64_t variable initialization expression of Listener.connectionQueue()
{
  uint64_t v20 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v0 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000260E0();
  static DispatchQoS.background.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_10000C5E8( &qword_100096E40,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100009FDC((uint64_t *)&unk_100098100);
  unint64_t v14 = sub_10002611C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v19);
  uint64_t v15 = v20;
  (*(void (**)(char *, void, uint64_t))(v0 + 104))( v2,  enum case for DispatchQoS.QoSClass.background(_:),  v20);
  uint64_t v16 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v15);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000026LL,  0x800000010007B450LL,  v11,  v8,  v5,  v16);
}

unint64_t sub_1000260E0()
{
  unint64_t result = qword_1000980F0;
  if (!qword_1000980F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000980F0);
  }

  return result;
}

unint64_t sub_10002611C()
{
  unint64_t result = qword_100096E48;
  if (!qword_100096E48)
  {
    uint64_t v1 = sub_10000A140((uint64_t *)&unk_100098100);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100096E48);
  }

  return result;
}

uint64_t variable initialization expression of Listener.clients()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    uint64_t v0 = (void *)sub_1000284A0((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v0 = &_swiftEmptySetSingleton;
  }

  uint64_t v1 = sub_100009FDC(&qword_100096E50);
  uint64_t result = swift_allocObject(v1, 28LL, 7LL);
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + swift_weakDestroy(v0 + 16) = v0;
  return result;
}

uint64_t sub_1000261DC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009AE68);
  sub_100009FC4(v0, (uint64_t)qword_10009AE68);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x72656E657473696CLL,  0xE800000000000000LL);
}

uint64_t variable initialization expression of Listener.conn()
{
  return 0LL;
}

uint64_t Listener.__allocating_init(mode:clientBundleID:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_100096E64);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_100016520;
  return Listener.init(mode:clientBundleID:)(a1, a2, a3);
}

uint64_t Listener.init(mode:clientBundleID:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 168) = a3;
  *(void *)(v4 + 176) = v3;
  *(void *)(v4 + 160) = a2;
  *(_BYTE *)(v4 + 73) = a1;
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  *(void *)(v4 + 184) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 192) = v6;
  *(void *)(v4 + 200) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  *(void *)(v4 + 208) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 2swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v4 + 224) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  *(void *)(v4 + 232) = v9;
  *(void *)(v4 + 240) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  *(void *)(v4 + 248) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000263A4, 0LL);
}

uint64_t sub_1000263A4()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v21 = *(void *)(v0 + 176);
  unint64_t v6 = sub_1000260E0();
  static DispatchQoS.background.getter(v6);
  *(void *)(v0 + 152) = _swiftEmptyArrayStorage;
  uint64_t v7 = sub_10000C5E8( &qword_100096E40,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v8 = sub_100009FDC((uint64_t *)&unk_100098100);
  unint64_t v9 = sub_10002611C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 152, v8, v9, v2, v7);
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v18,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v19);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v3,  enum case for DispatchQoS.QoSClass.background(_:),  v5);
  uint64_t v10 = static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000026LL,  0x800000010007B450LL,  v20,  v1,  v18,  v10);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    uint64_t v11 = (void *)sub_1000284A0((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v11 = &_swiftEmptySetSingleton;
  }

  uint64_t v12 = *(void *)(v0 + 176);
  uint64_t v13 = sub_100009FDC(&qword_100096E50);
  uint64_t v14 = swift_allocObject(v13, 28LL, 7LL);
  *(_DWORD *)(v14 + 24) = 0;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v12 + 24) = v14;
  *(void *)(v12 + 96) = 0LL;
  uint64_t v15 = (void *)swift_task_alloc(dword_1000975AC);
  *(void *)(v0 + 256) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000265B4;
  return Daemon.init(mode:clientBundleID:)(v0 + 16, *(_BYTE *)(v0 + 73), *(void *)(v0 + 160), *(void *)(v0 + 168));
}

uint64_t sub_1000265B4()
{
  return swift_task_switch(sub_100026608, 0LL, 0LL);
}

uint64_t sub_100026608()
{
  uint64_t v1 = *(_OWORD **)(v0 + 176);
  int v2 = *(unsigned __int8 *)(v0 + 73);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  __int128 v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)((char *)v1 + 73) = *(_OWORD *)(v0 + 57);
  v1[3] = v4;
  v1[4] = v5;
  v1[2] = v3;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v6 = v0 + 104;
      uint64_t v7 = *(void *)(v0 + 176);
      uint64_t v8 = *(void **)(v7 + 16);
      uint64_t v9 = type metadata accessor for XPCConnection();
      swift_allocObject(v9, 48LL, 7LL);
      swift_retain(v7);
      XPCConnection.init(serviceName:targetQ:listen:delegate:)( 0xD000000000000023LL,  0x800000010007B4A0LL,  v8,  1,  v7,  (uint64_t)&protocol witness table for Listener);
    }

    else
    {
      uint64_t v6 = v0 + 80;
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v16 = *(void **)(v15 + 16);
      uint64_t v17 = type metadata accessor for XPCConnection();
      swift_allocObject(v17, 48LL, 7LL);
      swift_retain(v15);
      uint64_t v10 = XPCConnection.init(machService:targetQ:listen:delegate:)( 0xD000000000000019LL,  0x800000010007B480LL,  v16,  1,  v15,  (_xpc_connection_s *)&protocol witness table for Listener);
    }
  }

  else
  {
    uint64_t v6 = v0 + 128;
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v12 = *(void **)(v11 + 16);
    uint64_t v13 = type metadata accessor for XPCConnection();
    swift_allocObject(v13, 48LL, 7LL);
    uint64_t v14 = v12;
    swift_retain(v11);
    uint64_t v10 = (uint64_t)XPCConnection.init(targetQ:delegate:)(v14, v11, (uint64_t)&protocol witness table for Listener);
  }

  uint64_t v18 = v10;
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 224);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 176);
  swift_beginAccess(v23 + 96, v6, 1LL, 0LL);
  uint64_t v24 = *(void *)(v23 + 96);
  *(void *)(v23 + 96) = v18;
  swift_release(v24);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 176));
}

void Listener.connection(targetQ:delegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 96);
  if (v7)
  {
    uint64_t v8 = type metadata accessor for XPCConnection();
    swift_allocObject(v8, 48LL, 7LL);
    swift_unknownObjectRetain(a2);
    swift_retain(v7);
    XPCConnection.init(listener:targetQ:delegate:)(v7, a1, a2, a3);
  }

  else
  {
    __break(1u);
  }

uint64_t Listener.handle(message:)(uint64_t a1)
{
  uint64_t v3 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v3);
  __int128 v5 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for XPCObject(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v38[-v11];
  uint64_t v13 = sub_100009FDC((uint64_t *)&unk_100097140);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = &v38[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v18 = &v38[-v17];
  uint64_t v19 = swift_unknownObjectRetain(a1);
  uint64_t v20 = (_xpc_connection_s *)XPCIncomingConnection.init(conn:)(v19);
  XPCIncomingConnection.entitlementValue(forKey:)( 0xD000000000000020LL,  0x800000010007B4D0LL,  (uint64_t)v20,  (uint64_t)v18);
  sub_1000287D8((uint64_t)v18, (uint64_t)v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v6) == 1)
  {
    sub_10000C234((uint64_t)v16, (uint64_t *)&unk_100097140);
LABEL_14:
    pid_t pid = xpc_connection_get_pid(v20);
    if (qword_10009AE60 != -1) {
      swift_once(&qword_10009AE60, sub_1000261DC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_100009FC4(v29, (uint64_t)qword_10009AE68);
    __int128 v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)BOOL v33 = 67240192;
      pid_t v40 = pid;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v33 + 4, v33 + 8);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "connection attempted by unentitled process %{public}d",  v33,  8u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    xpc_connection_cancel(v20);
    swift_unknownObjectRelease(v20);
    return sub_10000C234((uint64_t)v18, (uint64_t *)&unk_100097140);
  }

  sub_100028820((uint64_t)v16, (uint64_t)v12);
  sub_100028864((uint64_t)v12, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v6) != 2)
  {
    sub_1000288A8((uint64_t)v12);
    uint64_t v27 = (uint64_t)v10;
LABEL_13:
    sub_1000288A8(v27);
    goto LABEL_14;
  }

  if ((*v10 & 1) == 0)
  {
    uint64_t v27 = (uint64_t)v12;
    goto LABEL_13;
  }

  swift_beginAccess(v1 + 32, &v40, 0LL, 0LL);
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    pid_t v21 = xpc_connection_get_pid(v20);
    if (qword_10009AE60 != -1) {
      swift_once(&qword_10009AE60, sub_1000261DC);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_100009FC4(v22, (uint64_t)qword_10009AE68);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v26 = 67240192;
      pid_t v39 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v26 + 4, v26 + 8);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "rejecting connection from %{public}d while reporting is disabled",  v26,  8u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    xpc_connection_cancel(v20);
  }

  else
  {
    uint64_t v35 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v5, 1LL, 1LL, v35);
    uint64_t v36 = (void *)swift_allocObject(&unk_10008EC40, 48LL, 7LL);
    v36[2] = 0LL;
    v36[3] = 0LL;
    v36[4] = v1;
    v36[5] = v20;
    swift_retain(v1);
    swift_unknownObjectRetain(v20);
    uint64_t v37 = sub_100016C04((uint64_t)v5, (uint64_t)&unk_100096E70, (uint64_t)v36);
    swift_release(v37);
  }

  swift_unknownObjectRelease(v20);
  sub_1000288A8((uint64_t)v12);
  return sub_10000C234((uint64_t)v18, (uint64_t *)&unk_100097140);
}

uint64_t sub_100026CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return swift_task_switch(sub_100026D10, 0LL, 0LL);
}

void sub_100026D10()
{
  uint64_t v1 = v0[5];
  swift_beginAccess(v1 + 32, v0 + 2, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 56);
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v3 = (void *)v0[5];
  uint64_t v4 = v3[8];
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v5 = v3[9];
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = v3[10];
  if (v6)
  {
    uint64_t v7 = v0[6];
    type metadata accessor for Client();
    uint64_t v8 = dword_1000980E4;
    swift_retain(v2);
    swift_retain(v4);
    swift_retain(v5);
    swift_retain(v6);
    swift_retain(v3);
    swift_unknownObjectRetain(v7);
    uint64_t v9 = (uint64_t **)swift_task_alloc(v8);
    v0[7] = (uint64_t)v9;
    void *v9 = v0;
    v9[1] = (uint64_t *)sub_100026E18;
    sub_1000586F8(v2, v4, v5, v6, v0[5], v0[6]);
    return;
  }

LABEL_9:
  __break(1u);
}

uint64_t sub_100026E18(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100026E74, 0LL, 0LL);
}

uint64_t sub_100026E74()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 40) + 24LL);
  swift_retain(v1);
  os_unfair_lock_lock(v1 + 6);
  sub_1000289EC();
  uint64_t v2 = *(void *)(v0 + 64);
  os_unfair_lock_unlock(v1 + 6);
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100026EEC(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 6);
  uint64_t v4 = sub_100027F30(a1);
  swift_release(v4);
  os_unfair_lock_unlock(v3 + 6);
  return swift_release(v3);
}

uint64_t Listener.deinit()
{
  swift_release(*(void *)(v0 + 24));
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(*(void *)(v0 + 96));
  return v0;
}

uint64_t Listener.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(*(void *)(v0 + 96));
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_100027038(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain(a2);
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v30 = v9;
      uint64_t v10 = type metadata accessor for Client();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v24 = sub_100027300(v7, result + 1);
    uint64_t v31 = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v28 = v25 + 1;
      swift_retain(a2);
      sub_100027520(v28);
      uint64_t v26 = v31;
    }

    else
    {
      uint64_t v26 = v24;
      swift_retain(a2);
    }

    sub_100027830(a2, v26);
    uint64_t v29 = *v3;
    *uint64_t v3 = v26;
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
    return 1LL;
  }

  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = type metadata accessor for Client();
  uint64_t v14 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
  swift_bridgeObjectRetain(v6);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v21 = v32;
    uint64_t v31 = *v2;
    uint64_t *v2 = 0x8000000000000000LL;
    uint64_t v22 = swift_retain(v21);
    sub_1000278FC(v22, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = *v2;
    uint64_t *v2 = v31;
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1LL;
  }

  uint64_t v18 = ~v16;
  uint64_t v19 = sub_10000C5E8( &qword_100096F38,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
  while (1)
  {
    uint64_t v31 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v32, v13, v19) & 1) != 0) {
      break;
    }
    unint64_t v17 = (v17 + 1) & v18;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  uint64_t v27 = *(void *)(*(void *)(*v2 + 48) + 8 * v17);
  *a1 = v27;
  swift_retain(v27);
  return 0LL;
}

uint64_t sub_100027300(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100009FDC(&qword_100096F40);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v25 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for Client();
      do
      {
        uint64_t v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v25;
        unint64_t v18 = *(void *)(v25 + 16);
        if (*(void *)(v25 + 24) <= v18)
        {
          sub_100027520(v18 + 1);
          uint64_t v4 = v25;
        }

        uint64_t v9 = v24;
        uint64_t v23 = v24;
        uint64_t v10 = *(void *)(v4 + 40);
        uint64_t v11 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        uint64_t v13 = v4 + 56;
        uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v15 = result & ~v14;
        unint64_t v16 = v15 >> 6;
        if (((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v19 = 0;
          unint64_t v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v21 = v16 == v20;
            if (v16 == v20) {
              unint64_t v16 = 0LL;
            }
            v19 |= v21;
            uint64_t v22 = *(void *)(v13 + 8 * v16);
          }

          while (v22 == -1);
          unint64_t v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }

        *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
        *(void *)(*(void *)(v4 + 48) + 8 * v17) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()();
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  return v4;
}

uint64_t sub_100027520(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100009FDC(&qword_100096F40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v31 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain(v3);
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }

      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_36;
          }
          unint64_t v17 = v32[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v31) {
              goto LABEL_36;
            }
            unint64_t v17 = v32[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v32 = -1LL << v30;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v32[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v18;
            }
          }
        }

unint64_t sub_100027830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Client();
  uint64_t v6 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1000278FC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v6 = result;
  uint64_t v21 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100027520(v9);
  }

  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_100027AA4();
      goto LABEL_12;
    }

    sub_100027C4C(v9);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for Client();
  uint64_t v12 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v13 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = ~v13;
    uint64_t v15 = sub_10000C5E8( &qword_100096F38,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
    do
    {
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v6;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

    uint64_t v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v16 >> 6) + 64) |= 1LL << v16;
    unint64_t v24 = (uint64_t *)(v23[6] + 16 * v16);
    os_log_s *v24 = v12;
    v24[1] = v11;
    unint64_t v25 = v23[7] + 48 * v16;
    *(void *)unint64_t v25 = v37;
    *(void *)(v25 + 8) = v38;
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v25 + 24) = v8;
    *(_OWORD *)(v25 + 32) = v41;
    char v26 = v23[2];
    unint64_t v27 = __OFADD__(v26, 1LL);
    BOOL v28 = v26 + 1;
    if (v27) {
      goto LABEL_22;
    }
    ++v6;
    v23[2] = v28;
    v5 += 64LL;
    a2 = 1;
    uint64_t v3 = v35;
    if (v36 == v6) {
      return swift_bridgeObjectRelease_n(v3, 2LL);
    }
  }

  sub_1000471A0(v19, a2 & 1);
  uint64_t v21 = sub_100010540(v12, v11);
  if ((v20 & 1) != (v22 & 1)) {
    goto LABEL_23;
  }
  uint64_t v16 = v21;
  if ((v20 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v29);
  uint64_t v45 = v29;
  swift_errorRetain(v29);
  uint64_t v30 = sub_100009FDC(&qword_100098870);
  if ((swift_dynamicCast(v30, &v45, v30, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(v35, 2LL);
    return swift_errorRelease(v45);
  }

void *sub_100027AA4()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100096F40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_100027C4C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100009FDC(&qword_100096F40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v30 = v2;
  uint64_t v31 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v32) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_100027F30(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain(a1);
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_10002811C(v4, a1);
      swift_bridgeObjectRelease(v2);
      return v7;
    }

uint64_t sub_10002811C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v5 = __CocoaSet.count.getter(a1);
  uint64_t v6 = swift_unknownObjectRetain(a1);
  uint64_t v7 = sub_100027300(v6, v5);
  uint64_t v18 = v7;
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = type metadata accessor for Client();
  uint64_t v10 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
  swift_retain(v7);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = sub_10000C5E8( &qword_100096F38,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)(v7 + 48) + 8 * v13);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v17, &v19, v9, v15) & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
      {
        swift_release(v7);
        __break(1u);
        break;
      }
    }

    swift_release(v7);
    uint64_t v7 = *(void *)(*(void *)(v7 + 48) + 8 * v13);
    uint64_t v17 = v7;
    sub_1000282CC(v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v17, v9, v15) & 1) != 0)
    {
      *uint64_t v3 = v18;
      return v7;
    }

    __break(1u);
  }

  uint64_t result = swift_release(v7);
  __break(1u);
  return result;
}

unint64_t sub_1000282CC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v10 = type metadata accessor for Client();
      uint64_t v11 = sub_10000C5E8( (unint64_t *)&unk_100098130,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079178);
      do
      {
        uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)(*(void *)(v3 + 40), v10, v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            int64_t v16 = (void *)(v15 + 8 * v2);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000284A0(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v6 = result;
    }
    else {
      uint64_t v6 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    uint64_t result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100009FDC(&qword_100096F40);
      uint64_t result = static _SetStorage.allocate(capacity:)(v3);
      uint64_t v4 = (void *)result;
      uint64_t v24 = v1;
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  uint64_t v24 = v1;
  if (!v2)
  {
LABEL_4:
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v5) {
      return (uint64_t)v4;
    }
    goto LABEL_15;
  }

void _s21CloudTelemetryService8ListenerC6handle5errorySo13OS_xpc_object_p_tF_0(void *a1)
{
  uint64_t v1 = xpc_copy_description(a1);
  uint64_t v2 = String.init(cString:)(v1);
  uint64_t v4 = v3;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000022LL,  0x800000010007B580LL,  "CloudTelemetryService/Listener.swift",  36LL,  2LL,  35LL,  0);
  __break(1u);
}

uint64_t sub_1000287D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100097140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000288A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000288E4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100028918()
{
  uint64_t v2 = swift_task_alloc(dword_100096E6C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000A560;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch(sub_100026D10, 0LL, 0LL);
}

uint64_t type metadata accessor for Listener()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService8Listener);
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_100096F30)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10008EC80);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100096F30);
    }
  }

uint64_t sub_1000289EC()
{
  return swift_release(v2);
}

uint64_t sub_100028A2C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ED58);
  sub_100009FC4(v0, (uint64_t)qword_10009ED58);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x2D646E656B636162LL,  0xED00006C61636F6CLL);
}

uint64_t sub_100028AAC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_100028ABC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = swift_allocObject(v3, 152LL, 15LL);
  sub_100028B10(a1, a2, a3);
  return v7;
}

void *sub_100028B10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  swift_defaultActor_initialize(v4);
  v4[16] = sub_10002A2F8(a2);
  v4[17] = a1;
  swift_bridgeObjectRelease(a2);
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  sub_10000A32C(a3, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 8))(&v15, v8, v9);
  uint64_t v11 = v15;
  uint64_t v10 = v16;
  swift_bridgeObjectRetain(v16);
  sub_1000173BC(&v15);
  v4[14] = v11;
  v4[15] = v10;
  uint64_t v12 = sub_10003D184();
  swift_beginAccess(v12, v14, 0LL, 0LL);
  v4[18] = 0LL;
  sub_10000C2B4(a3);
  return v4;
}

uint64_t sub_100028BD4(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  uint64_t v3 = *(void *)(type metadata accessor for ServiceEventValue(0LL) - 8);
  v2[13] = v3;
  v2[14] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v4 = (*(void *)(*(void *)(sub_100009FDC(&qword_100096710) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v4);
  v2[16] = swift_task_alloc(v4);
  return swift_task_switch(sub_100028C6C, v1, 0LL);
}

uint64_t sub_100028C6C()
{
  uint64_t v1 = sub_10003D184();
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  if (*v1 != 1) {
    goto LABEL_76;
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  swift_retain(v3);
  unint64_t v4 = sub_10002AA18(v2, v3);
  swift_release(*(void *)(v0 + 88));
  uint64_t v5 = v4[2];
  if (v5)
  {
    uint64_t v6 = v4 + 5;
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(v6 - 1);
      *(_OWORD *)os_log_type_t v105 = *(_OWORD *)v6;
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(v105[1]);
      uint64_t v107 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_1000148C0(0, v7[2] + 1LL, 1);
        uint64_t v7 = v107;
      }

      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1)
      {
        sub_1000148C0(v9 > 1, v10 + 1, 1);
        uint64_t v7 = v107;
      }

      v7[2] = v10 + 1;
      uint64_t v11 = &v7[3 * v10];
      v11[4] = v8;
      *(_OWORD *)(v11 + 5) = *(_OWORD *)v105;
      v6 += 3;
      --v5;
    }

    while (v5);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 136) = v7;
  uint64_t v12 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(v4);
  uint64_t v13 = *(void **)(v12 + 144);
  *(void *)(v0 + 144) = v13;
  if (!v13) {
    goto LABEL_73;
  }
  uint64_t v14 = v7[2];
  *(void *)(v0 + 152) = v14;
  if (!v14) {
    goto LABEL_73;
  }
  *(void *)(v0 + 160) = 0LL;
  uint64_t v7 = *(void **)(v0 + 136);
  uint64_t v15 = v7[2];
  id v16 = v13;
  if (!v15) {
    goto LABEL_72;
  }
  uint64_t v17 = (void *)(v0 + 64);
  unint64_t v18 = sub_10002AC3C();
  unint64_t v19 = 0LL;
  uint64_t v20 = &type metadata for String;
  uint64_t v21 = -1LL;
  while (2)
  {
    uint64_t v22 = &v7[3 * v19];
    uint64_t v23 = v22[5];
    uint64_t v24 = v22[6];
    uint64_t v25 = *(void *)(v24 + 16);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    void *v17 = Dictionary.init(minimumCapacity:)(v25, v20, v18, &protocol witness table for String);
    uint64_t v26 = *(void *)(v24 + 64);
    uint64_t v101 = v24 + 64;
    uint64_t v103 = v24;
    uint64_t v27 = -1LL << *(_BYTE *)(v24 + 32);
    BOOL v28 = (void *)swift_bridgeObjectRelease(v23);
    int64_t v104 = 0LL;
    if (-v27 < 64) {
      uint64_t v29 = ~(-1LL << -(char)v27);
    }
    else {
      uint64_t v29 = -1LL;
    }
    unint64_t v30 = v29 & v26;
    int64_t v102 = (unint64_t)(63 - v27) >> 6;
    while (1)
    {
      uint64_t v34 = &unk_100097070;
      if (v30)
      {
        uint64_t v106 = (v30 - 1) & v30;
        unint64_t v35 = __clz(__rbit64(v30)) | (v104 << 6);
LABEL_23:
        uint64_t v36 = *(void **)(v0 + 120);
        uint64_t v37 = *(void *)(v0 + 104);
        uint64_t v38 = (void *)(*(void *)(v103 + 48) + 16 * v35);
        uint64_t v39 = v38[1];
        void *v36 = *v38;
        v36[1] = v39;
        uint64_t v40 = *(void *)(v103 + 56) + *(void *)(v37 + 72) * v35;
        uint64_t v41 = sub_100009FDC((uint64_t *)&unk_100097070);
        sub_1000155F8(v40, (uint64_t)v36 + *(int *)(v41 + 48));
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v36, 0LL, 1LL, v41);
        swift_bridgeObjectRetain(v39);
        goto LABEL_42;
      }

      int64_t v42 = v104 + 1;
      if (__OFADD__(v104, 1LL))
      {
        __break(1u);
        goto LABEL_84;
      }

      if (v42 < v102)
      {
        unint64_t v43 = *(void *)(v101 + 8 * v42);
        if (v43) {
          goto LABEL_27;
        }
        int64_t v44 = v104 + 2;
        ++v104;
        if (v42 + 1 < v102)
        {
          unint64_t v43 = *(void *)(v101 + 8 * v44);
          if (v43) {
            goto LABEL_30;
          }
          int64_t v104 = v42 + 1;
          if (v42 + 2 < v102)
          {
            unint64_t v43 = *(void *)(v101 + 8 * (v42 + 2));
            if (v43)
            {
              v42 += 2LL;
LABEL_27:
              uint64_t v106 = (v43 - 1) & v43;
              unint64_t v35 = __clz(__rbit64(v43)) + (v42 << 6);
              int64_t v104 = v42;
              goto LABEL_23;
            }

            int64_t v44 = v42 + 3;
            int64_t v104 = v42 + 2;
            if (v42 + 3 < v102)
            {
              unint64_t v43 = *(void *)(v101 + 8 * v44);
              if (!v43)
              {
                while (1)
                {
                  int64_t v42 = v44 + 1;
                  if (__OFADD__(v44, 1LL)) {
                    break;
                  }
                  if (v42 >= v102)
                  {
                    int64_t v104 = v102 - 1;
                    goto LABEL_41;
                  }

                  unint64_t v43 = *(void *)(v101 + 8 * v42);
                  ++v44;
                  if (v43) {
                    goto LABEL_27;
                  }
                }

                __break(1u);
                goto LABEL_93;
              }

LABEL_41:
      uint64_t v45 = *(void *)(v0 + 120);
      uint64_t v46 = sub_100009FDC((uint64_t *)&unk_100097070);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v45, 1LL, 1LL, v46);
      uint64_t v106 = 0LL;
LABEL_42:
      uint64_t v47 = *(void *)(v0 + 128);
      sub_10001563C(*(void *)(v0 + 120), v47);
      uint64_t v48 = sub_100009FDC((uint64_t *)&unk_100097070);
      uint64_t v49 = v20;
      unint64_t v50 = v18;
      os_log_type_t v51 = *(uint64_t **)(v0 + 128);
      uint64_t v53 = *v51;
      uint64_t v52 = v51[1];
      sub_100015684((uint64_t)v51 + *(int *)(v48 + 48), *(void *)(v0 + 112));
      sub_10002DDB4();
      uint64_t v21 = v54;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 64));
      uint64_t v56 = *(void *)(v0 + 64);
      *(void *)(v0 + 64) = 0x8000000000000000LL;
      *(void *)(v0 + 72) = v56;
      unint64_t v58 = sub_100010540(v53, v52);
      int64_t v42 = *(void *)(v56 + 16);
      BOOL v59 = (v57 & 1) == 0;
      BOOL v28 = (void *)(v42 + v59);
      if (__OFADD__(v42, v59))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        uint64_t v72 = 2LL;
LABEL_86:
        uint64_t v85 = (v42 - 1) & v42;
        unint64_t v84 = __clz(__rbit64(v42)) + (v72 << 6);
LABEL_87:
        *(void *)(v0 + 176) = v72;
        *(void *)(v0 + 184) = v85;
        uint64_t v87 = (uint64_t *)(v28[6] + 16 * v84);
        uint64_t v27 = *v87;
        uint64_t v34 = (void *)v87[1];
        *(void *)(v0 + 192) = v34;
        id v88 = *(void **)(v28[7] + 8 * v84);
        *(void *)(v0 + 200) = v88;
        uint64_t v89 = qword_10009AE88;
        swift_bridgeObjectRetain(v34);
        uint64_t v21 = v88;
        if (v89 == -1)
        {
LABEL_88:
          uint64_t v90 = type metadata accessor for Logger(0LL);
          sub_100009FC4(v90, (uint64_t)qword_10009ED58);
          uint64_t v91 = swift_bridgeObjectRetain_n(v34, 2LL);
          int64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
          os_log_type_t v93 = static os_log_type_t.default.getter(v92);
          if (os_log_type_enabled(v92, v93))
          {
            uint64_t v94 = swift_slowAlloc(12LL, -1LL);
            uint64_t v95 = swift_slowAlloc(32LL, -1LL);
            uint64_t v107 = (void *)v95;
            *(_DWORD *)uint64_t v94 = 136446210;
            swift_bridgeObjectRetain(v34);
            *(void *)(v94 + 4) = sub_100009984(v27, (unint64_t)v34, (uint64_t *)&v107);
            swift_bridgeObjectRelease_n(v34, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "running TTR rule %{public}s", (uint8_t *)v94, 0xCu);
            swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v95, -1LL, -1LL);
            swift_slowDealloc(v94, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v34, 2LL);
          }

          uint64_t v96 = *(void *)(v0 + 144);
          uint64_t v97 = *(void *)(v0 + 88);
          uint64_t v98 = *(void *)(v0 + 96);
          sub_10002AC78();
          unint64_t v99 = (void *)swift_task_alloc(80LL);
          *(void *)(v0 + 208) = v99;
          v99[2] = v21;
          v99[3] = v96;
          v99[4] = v0 + 64;
          v99[5] = v97;
          v99[6] = v27;
          v99[7] = v34;
          v99[8] = v98;
          uint64_t v100 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
          *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v100;
          void *v100 = v0;
          v100[1] = sub_10002965C;
          return withCheckedContinuation<A>(isolation:function:_:)();
        }

  uint64_t result = swift_release(v9);
  *uint64_t v3 = v11;
  return result;
}

  uint64_t result = swift_release(v9);
  *uint64_t v3 = v11;
  return result;
}

LABEL_93:
        swift_once(&qword_10009AE88, sub_100028A2C);
        goto LABEL_88;
      }

      uint64_t v27 = v57;
      if (*(void *)(v56 + 24) >= (uint64_t)v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          BOOL v28 = sub_10002A868();
        }
      }

      else
      {
        sub_10002A55C((uint64_t)v28, isUniquelyReferenced_nonNull_native);
        BOOL v28 = (void *)sub_100010540(v53, v52);
        if ((v27 & 1) != (v60 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        unint64_t v58 = (unint64_t)v28;
      }

      unsigned int v61 = *(void **)(v0 + 72);
      if ((v27 & 1) != 0)
      {
        uint64_t v31 = v61[7];
        uint64_t v27 = 8 * v58;

        *(void *)(v31 + 8 * v58) = v21;
      }

      else
      {
        v61[(v58 >> 6) + 8] |= 1LL << v58;
        uint64_t v62 = (uint64_t *)(v61[6] + 16 * v58);
        *uint64_t v62 = v53;
        v62[1] = v52;
        *(void *)(v61[7] + 8 * v58) = v21;
        uint64_t v63 = v61[2];
        BOOL v64 = __OFADD__(v63, 1LL);
        int64_t v42 = v63 + 1;
        if (v64) {
          goto LABEL_81;
        }
        v61[2] = v42;
        swift_bridgeObjectRetain(v52);
      }

      uint64_t v32 = *(void *)(v0 + 112);
      uint64_t v33 = *(void *)(v0 + 64);
      *(void *)(v0 + 64) = v61;
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v52);
      BOOL v28 = (void *)sub_10002ACF0(v32);
      unint64_t v18 = v50;
      uint64_t v20 = v49;
      unint64_t v30 = v106;
    }

    uint64_t v65 = *(void *)(v0 + 88);
    swift_release(v103);
    uint64_t v66 = *(void *)(v65 + 128);
    *(void *)(v0 + 168) = v66;
    char v67 = *(_BYTE *)(v66 + 32);
    *(_BYTE *)(v0 + 224) = v67;
    uint64_t v68 = -1LL << v67;
    if (-(-1LL << v67) < 64) {
      uint64_t v69 = ~(-1LL << -(char)v68);
    }
    else {
      uint64_t v69 = -1LL;
    }
    unint64_t v70 = v69 & *(void *)(v66 + 64);
    swift_bridgeObjectRetain(v66);
    if (v70)
    {
      uint64_t v72 = 0LL;
      unint64_t v84 = __clz(__rbit64(v70));
      uint64_t v85 = (v70 - 1) & v70;
      goto LABEL_87;
    }

    unint64_t v71 = 63 - v68;
    uint64_t v72 = 1LL;
    if ((unint64_t)(63 - v68) > 0x7F)
    {
      int64_t v42 = v28[9];
      if (v42) {
        goto LABEL_86;
      }
      if (v71 >= 0xC0)
      {
        int64_t v42 = v28[10];
        if (v42) {
          goto LABEL_82;
        }
        if (v71 >= 0x100)
        {
          int64_t v42 = v28[11];
          if (!v42)
          {
            if (v71 >= 0x140)
            {
              int64_t v42 = v28[12];
              if (v42)
              {
                uint64_t v72 = 4LL;
                goto LABEL_86;
              }

              uint64_t v73 = 0LL;
              uint64_t v74 = v71 >> 6;
              if (v71 >> 6 <= 5) {
                uint64_t v74 = 5LL;
              }
              uint64_t v75 = v74 - 5;
              while (v75 != v73)
              {
                int64_t v42 = v28[v73++ + 13];
                if (v42)
                {
                  uint64_t v72 = v73 + 4;
                  goto LABEL_86;
                }
              }
            }

            goto LABEL_70;
          }

LABEL_84:
          uint64_t v72 = 3LL;
          goto LABEL_86;
        }
      }
    }

LABEL_70:
    uint64_t v76 = *(void *)(v0 + 152);
    uint64_t v77 = *(void *)(v0 + 160);
    swift_release(v28);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    if (v77 + 1 == v76)
    {
      unint64_t v86 = *(void **)(v0 + 144);
      swift_release(*(void *)(v0 + 136));

      goto LABEL_74;
    }

    unint64_t v19 = *(void *)(v0 + 160) + 1LL;
    *(void *)(v0 + 160) = v19;
    uint64_t v7 = *(void **)(v0 + 136);
    uint64_t v17 = (void *)(v0 + 64);
    uint64_t v21 = -1LL;
    if (v19 < v7[2]) {
      continue;
    }
    break;
  }

LABEL_72:
  __break(1u);
LABEL_73:
  swift_release(v7);
LABEL_74:
  swift_beginAccess(&off_10009ED70, v0 + 40, 0LL, 0LL);
  uint64_t v78 = (void (*)(uint64_t))off_10009ED70;
  if (off_10009ED70)
  {
    uint64_t v79 = qword_10009ED78;
    uint64_t v80 = swift_retain(qword_10009ED78);
    v78(v80);
    sub_100028AAC((uint64_t)v78, v79);
  }

uint64_t sub_10002965C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 88LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 216LL));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000296D0, v3, 0LL);
}

uint64_t sub_1000296D0()
{
  uint64_t v82 = (void *)(v1 + 64);

  int64_t v3 = *(void *)(v1 + 176);
  unint64_t v4 = *(void *)(v1 + 184);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 168);
LABEL_3:
    uint64_t v6 = (v4 - 1) & v4;
    unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
LABEL_4:
    *(void *)(v1 + 176) = v3;
    *(void *)(v1 + 184) = v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v7);
    uint64_t v9 = *v8;
    unint64_t v0 = v8[1];
    *(void *)(v1 + 192) = v0;
    unint64_t v10 = *(void **)(*(void *)(v5 + 56) + 8 * v7);
    *(void *)(v1 + 200) = v10;
    uint64_t v11 = qword_10009AE88;
    swift_bridgeObjectRetain(v0);
    unint64_t v2 = v10;
    if (v11 == -1) {
      goto LABEL_5;
    }
    goto LABEL_78;
  }

  uint64_t v9 = -1LL;
LABEL_12:
  BOOL v23 = __OFADD__(v3++, 1LL);
  if (v23)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

  int64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v1 + 224)) + 63) >> 6;
  uint64_t v5 = *(void *)(v1 + 168);
  if (v3 < v24)
  {
    uint64_t v25 = v5 + 64;
    unint64_t v26 = *(void *)(v5 + 64 + 8 * v3);
    if (v26) {
      goto LABEL_68;
    }
    int64_t v27 = v3 + 1;
    if (v3 + 1 < v24)
    {
      unint64_t v26 = *(void *)(v25 + 8 * v27);
      if (v26) {
        goto LABEL_67;
      }
      int64_t v27 = v3 + 2;
      if (v3 + 2 < v24)
      {
        unint64_t v26 = *(void *)(v25 + 8 * v27);
        if (v26)
        {
LABEL_67:
          int64_t v3 = v27;
          goto LABEL_68;
        }

        v3 += 3LL;
        if (v3 < v24)
        {
          unint64_t v26 = *(void *)(v25 + 8 * v3);
          if (!v26)
          {
            while (1)
            {
              int64_t v27 = v3 + 1;
              if (__OFADD__(v3, 1LL)) {
                break;
              }
              if (v27 >= v24) {
                goto LABEL_25;
              }
              unint64_t v26 = *(void *)(v25 + 8 * v27);
              ++v3;
              if (v26) {
                goto LABEL_67;
              }
            }

LABEL_77:
            __break(1u);
LABEL_78:
            swift_once(&qword_10009AE88, sub_100028A2C);
LABEL_5:
            uint64_t v12 = type metadata accessor for Logger(0LL);
            sub_100009FC4(v12, (uint64_t)qword_10009ED58);
            uint64_t v13 = swift_bridgeObjectRetain_n(v0, 2LL);
            uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
            os_log_type_t v15 = static os_log_type_t.default.getter(v14);
            if (os_log_type_enabled(v14, v15))
            {
              uint64_t v16 = swift_slowAlloc(12LL, -1LL);
              uint64_t v17 = swift_slowAlloc(32LL, -1LL);
              uint64_t v87 = v17;
              *(_DWORD *)uint64_t v16 = 136446210;
              swift_bridgeObjectRetain(v0);
              *(void *)(v16 + 4) = sub_100009984(v9, v0, &v87);
              swift_bridgeObjectRelease_n(v0, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "running TTR rule %{public}s",  (uint8_t *)v16,  0xCu);
              swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v17, -1LL, -1LL);
              swift_slowDealloc(v16, -1LL, -1LL);
            }

            else
            {
              swift_bridgeObjectRelease_n(v0, 2LL);
            }

            uint64_t v71 = *(void *)(v1 + 144);
            uint64_t v72 = *(void *)(v1 + 88);
            uint64_t v73 = *(void *)(v1 + 96);
            sub_10002AC78();
            uint64_t v74 = (void *)swift_task_alloc(80LL);
            *(void *)(v1 + 208) = v74;
            id v74[2] = v2;
            v74[3] = v71;
            v74[4] = v82;
            v74[5] = v72;
            v74[6] = v9;
            v74[7] = v0;
            v74[8] = v73;
            uint64_t v75 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
            *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = v75;
            void *v75 = v1;
            v75[1] = sub_10002965C;
            return withCheckedContinuation<A>(isolation:function:_:)();
          }

LABEL_68:
          uint64_t v6 = (v26 - 1) & v26;
          unint64_t v7 = __clz(__rbit64(v26)) + (v3 << 6);
          goto LABEL_4;
        }
      }
    }
  }

LABEL_42:
              int64_t v48 = v50;
LABEL_39:
              uint64_t v9 = (v49 - 1) & v49;
              unint64_t v42 = __clz(__rbit64(v49)) + (v48 << 6);
              int64_t v86 = v48;
LABEL_35:
              unint64_t v43 = *(void **)(v1 + 120);
              uint64_t v44 = *(void *)(v1 + 104);
              uint64_t v45 = (void *)(*(void *)(v85 + 48) + 16 * v42);
              uint64_t v46 = v45[1];
              *unint64_t v43 = *v45;
              v43[1] = v46;
              unint64_t v2 = *(void *)(v85 + 56) + *(void *)(v44 + 72) * v42;
              uint64_t v47 = sub_100009FDC((uint64_t *)&unk_100097070);
              sub_1000155F8(v2, (uint64_t)v43 + *(int *)(v47 + 48));
              (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))( v43,  0LL,  1LL,  v47);
              swift_bridgeObjectRetain(v46);
              goto LABEL_54;
            }
          }
        }
      }

LABEL_53:
      uint64_t v51 = *(void *)(v1 + 120);
      uint64_t v52 = sub_100009FDC((uint64_t *)&unk_100097070);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v51, 1LL, 1LL, v52);
      uint64_t v9 = 0LL;
LABEL_54:
      unint64_t v0 = *(void *)(v1 + 128);
      sub_10001563C(*(void *)(v1 + 120), v0);
      uint64_t v53 = sub_100009FDC((uint64_t *)&unk_100097070);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48LL))( v0,  1LL,  v53) == 1)
      {
        uint64_t v18 = *(void *)(v1 + 88);
        swift_release(v85);
        uint64_t v19 = *(void *)(v18 + 128);
        *(void *)(v1 + 168) = v19;
        char v20 = *(_BYTE *)(v19 + 32);
        *(_BYTE *)(v1 + 224) = v20;
        uint64_t v21 = 1LL << v20;
        uint64_t v9 = -1LL;
        if (v21 < 64) {
          uint64_t v22 = ~(-1LL << v21);
        }
        else {
          uint64_t v22 = -1LL;
        }
        unint64_t v4 = v22 & *(void *)(v19 + 64);
        swift_bridgeObjectRetain(v19);
        int64_t v3 = 0LL;
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }

      uint64_t v54 = *(uint64_t **)(v1 + 128);
      uint64_t v56 = *v54;
      uint64_t v55 = v54[1];
      sub_100015684((uint64_t)v54 + *(int *)(v53 + 48), *(void *)(v1 + 112));
      sub_10002DDB4();
      unint64_t v0 = v57;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + 64));
      uint64_t v59 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = 0x8000000000000000LL;
      *(void *)(v1 + 72) = v59;
      unint64_t v2 = sub_100010540(v56, v55);
      uint64_t v61 = *(void *)(v59 + 16);
      BOOL v62 = (v60 & 1) == 0;
      uint64_t v63 = v61 + v62;
      if (__OFADD__(v61, v62))
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }

      char v64 = v60;
      if (*(void *)(v59 + 24) >= v63)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10002A868();
        }
      }

      else
      {
        sub_10002A55C(v63, isUniquelyReferenced_nonNull_native);
        unint64_t v65 = sub_100010540(v56, v55);
        if ((v64 & 1) != (v66 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        unint64_t v2 = v65;
      }

      char v67 = *(void **)(v1 + 72);
      if ((v64 & 1) != 0)
      {
        uint64_t v38 = v67[7];
        v2 *= 8LL;

        *(void *)(v38 + v2) = v0;
      }

      else
      {
        v67[(v2 >> 6) + 8] |= 1LL << v2;
        uint64_t v68 = (uint64_t *)(v67[6] + 16 * v2);
        *uint64_t v68 = v56;
        v68[1] = v55;
        *(void *)(v67[7] + 8 * v2) = v0;
        uint64_t v69 = v67[2];
        BOOL v23 = __OFADD__(v69, 1LL);
        uint64_t v70 = v69 + 1;
        if (v23) {
          goto LABEL_73;
        }
        void v67[2] = v70;
        swift_bridgeObjectRetain(v55);
      }

      uint64_t v39 = *(void *)(v1 + 112);
      uint64_t v40 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = v67;
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v55);
      uint64_t result = sub_10002ACF0(v39);
    }

    unint64_t v41 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v42 = v41 | (v86 << 6);
    goto LABEL_35;
  }

  uint64_t v76 = *(void **)(v1 + 144);
  swift_release(*(void *)(v1 + 136));

  swift_beginAccess(&off_10009ED70, v1 + 40, 0LL, 0LL);
  uint64_t v77 = (void (*)(uint64_t))off_10009ED70;
  if (off_10009ED70)
  {
    uint64_t v78 = qword_10009ED78;
    uint64_t v79 = swift_retain(qword_10009ED78);
    v77(v79);
    sub_100028AAC((uint64_t)v77, v78);
  }

  uint64_t v80 = *(void *)(v1 + 120);
  uint64_t v81 = *(void *)(v1 + 112);
  swift_task_dealloc(*(void *)(v1 + 128));
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100029F18( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a8;
  uint64_t v33 = a7;
  uint64_t v30 = a1;
  uint64_t v31 = a6;
  id v34 = a3;
  uint64_t v10 = sub_100009FDC(&qword_100097038);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&isa - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = objc_opt_self(&OBJC_CLASS___NSDictionary);
  uint64_t v15 = swift_dynamicCastObjCClassUnconditional(a2, v14, 0LL, 0LL, 0LL);
  aBlock[0] = 0LL;
  unint64_t v16 = sub_10002AC3C();
  static Dictionary._forceBridgeFromObjectiveC(_:result:)( v15,  aBlock,  &type metadata for String,  v16,  &protocol witness table for String);
  uint64_t v17 = aBlock[0];
  if (aBlock[0])
  {
    uint64_t v18 = *a4;
    swift_bridgeObjectRetain(*a4);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&isa - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v30,  v10);
    uint64_t v21 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v22 = (v21 + 32) & ~v21;
    unint64_t v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v24 = swift_allocObject(&unk_10008ECC0, v23 + 8, v21 | 7);
    uint64_t v25 = v33;
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v24 + 24) = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v22, v13, v10);
    *(void *)(v24 + v23) = v32;
    aBlock[4] = sub_10002ADB0;
    uint64_t v36 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10002A170;
    aBlock[3] = &unk_10008ECD8;
    unint64_t v26 = _Block_copy(aBlock);
    uint64_t v27 = v36;
    swift_bridgeObjectRetain(v25);
    swift_release(v27);
    Class v28 = isa;
    [v34 handleEvent:isa sender:v19 ruleConfig:v20 withReplyBlock:v26];
    _Block_release(v26);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002A170(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10002A1AC()
{
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10002A1E8(uint64_t a1)
{
  unint64_t v4 = *(int **)(*(void *)v1 + 136LL);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A560;
  return v7(a1);
}

unint64_t sub_10002A24C()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 120);
  swift_bridgeObjectRetain(v1);
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  return 0xD000000000000016LL;
}

unint64_t sub_10002A2D8()
{
  return sub_10002A24C();
}

void *sub_10002A2F8(uint64_t a1)
{
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  Swift::String v3 = result;
  int64_t v4 = 0LL;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 8;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Class v20 = (__int128 *)(*(void *)(v28 + 56) + 48 * i);
    *(_OWORD *)unint64_t v29 = v20[1];
    *(_OWORD *)&v29[16] = v20[2];
    __int128 v30 = *v20;
    __int128 v31 = *(_OWORD *)&v29[8];
    uint64_t v32 = *(void *)&v29[24];
    swift_bridgeObjectRetain(v19);
    sub_1000232C4((uint64_t)&v30);
    sub_1000232C4((uint64_t)&v31);
    sub_10002AFBC(&v32);
    Class v21 = sub_100031650();
    sub_10002AFE4((uint64_t)&v30);
    sub_10002AFE4((uint64_t)&v31);
    uint64_t result = sub_10002B00C(&v32);
    *(void *)((char *)v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v22 = (void *)(v3[6] + 16 * i);
    *uint64_t v22 = v18;
    v22[1] = v19;
    *(void *)(v3[7] + 8 * i) = v21;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v25;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v14 >= v27) {
      return v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v27) {
        return v3;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v27) {
          return v3;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }

  int64_t v16 = v14 + 3;
  if (v16 >= v27) {
    return v3;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v27) {
      return v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

Swift::Int sub_10002A55C(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100097030);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          Swift::String v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

id sub_10002A868()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100097030);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10002AA18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    id v34 = _swiftEmptyArrayStorage;
    sub_1000148C0(0, v4, 0);
    uint64_t v8 = 0LL;
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v9 = a1 + 32;
    uint64_t v10 = *(void *)(a2 + 136);
    uint64_t v25 = v10;
    uint64_t v26 = v10 + 32;
    uint64_t v23 = a1 + 32;
    int64_t v24 = v4;
    while (1)
    {
      uint64_t v11 = (uint64_t *)(v9 + 24 * v8);
      uint64_t v12 = *v11;
      __int128 v27 = *(_OWORD *)(v11 + 1);
      uint64_t v32 = *v11;
      __int128 v33 = v27;
      uint64_t v13 = *(void *)(v10 + 16);
      swift_bridgeObjectRetain(*((void *)&v27 + 1));
      uint64_t v14 = v27;
      swift_bridgeObjectRetain(v27);
      if (v13) {
        break;
      }
      __int128 v18 = v27;
LABEL_9:
      id v34 = v5;
      unint64_t v20 = v5[2];
      unint64_t v19 = v5[3];
      if (v20 >= v19 >> 1)
      {
        __int128 v28 = v18;
        sub_1000148C0(v19 > 1, v20 + 1, 1);
        __int128 v18 = v28;
        uint64_t v5 = v34;
      }

      ++v8;
      v5[2] = v20 + 1;
      unint64_t v21 = &v5[3 * v20];
      v21[4] = v12;
      *(_OWORD *)(v21 + 5) = v18;
      if (v8 == v4) {
        return v5;
      }
    }

    *(void *)&__int128 v27 = v5;
    swift_bridgeObjectRetain(*((void *)&v27 + 1));
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v10);
    uint64_t v15 = v26;
    while (1)
    {
      sub_100015BAC(v15, (uint64_t)v29);
      uint64_t v17 = v30;
      uint64_t v16 = v31;
      sub_10000A32C(v29, v30);
      uint64_t v5 = v3;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v32, v17, v16);
      if (v3) {
        break;
      }
      sub_10000C2B4(v29);
      v15 += 40LL;
      if (!--v13)
      {
        swift_bridgeObjectRelease(*((void *)&v27 + 1));
        swift_bridgeObjectRelease(v14);
        uint64_t v10 = v25;
        swift_bridgeObjectRelease(v25);
        uint64_t v12 = v32;
        __int128 v18 = v33;
        uint64_t v5 = (void *)v27;
        uint64_t v9 = v23;
        int64_t v4 = v24;
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(*((void *)&v33 + 1));
    sub_10000C2B4(v29);
    swift_release(v27);
    swift_bridgeObjectRelease(*((void *)&v27 + 1));
    swift_bridgeObjectRelease(v14);
  }

  return v5;
}

unint64_t sub_10002AC3C()
{
  unint64_t result = qword_100097080;
  if (!qword_100097080)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100097080);
  }

  return result;
}

unint64_t sub_10002AC78()
{
  unint64_t result = qword_100096F50;
  if (!qword_100096F50)
  {
    uint64_t v1 = type metadata accessor for BackendLocal();
    unint64_t result = swift_getWitnessTable(&unk_1000771F0, v1);
    atomic_store(result, (unint64_t *)&qword_100096F50);
  }

  return result;
}

uint64_t type metadata accessor for BackendLocal()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService12BackendLocal);
}

void sub_10002ACDC(uint64_t a1)
{
}

uint64_t sub_10002ACF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServiceEventValue(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002AD2C()
{
  uint64_t v1 = sub_100009FDC(&qword_100097038);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10002ADB0(char a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  if (qword_10009AE88 != -1) {
    swift_once(&qword_10009AE88, sub_100028A2C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v5, (uint64_t)qword_10009ED58);
  uint64_t v6 = swift_bridgeObjectRetain_n(v3, 2LL);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(18LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    swift_bridgeObjectRetain(v3);
    uint64_t v13 = sub_100009984(v4, v3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v3, 3LL);
    *(_WORD *)(v9 + 12) = 1026;
    LODWORD(v13) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 4, v9 + 14, v9 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "TTR rule %{public}s processed event with status: %{BOOL,public}d",  (uint8_t *)v9,  0x12u);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  uint64_t v11 = sub_100009FDC(&qword_100097038);
  return CheckedContinuation.resume(returning:)(v11, v11);
}

uint64_t sub_10002AFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002AFB4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_10002AFBC(void *a1)
{
  return a1;
}

uint64_t sub_10002AFE4(uint64_t a1)
{
  return a1;
}

void *sub_10002B00C(void *a1)
{
  return a1;
}

uint64_t sub_10002B034()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009ED88);
  sub_100009FC4(v0, (uint64_t)qword_10009ED88);
  return Logger.init(subsystem:category:)( 0xD000000000000023LL,  0x800000010007B4A0LL,  0x6976726553435058LL,  0xEA00000000006563LL);
}

void sub_10002B0AC(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10009AF90 != -1) {
    swift_once(&qword_10009AF90, sub_10002B034);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_100009FC4(v5, (uint64_t)qword_10009ED88);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "received client connection.", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  memset(&v45, 0, sizeof(v45));
  xpc_connection_get_audit_token(a1, &v45);
  audit_token_t token = v45;
  SecTaskRef v10 = SecTaskCreateWithAuditToken(0LL, &token);
  if (!v10)
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v24, "failed to extract entitlements.", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    goto LABEL_24;
  }

  uint64_t v11 = v10;
  uint64_t v12 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef v13 = SecTaskCopyValueForEntitlement(v11, v12, 0LL);

  if (!v13)
  {
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      __int128 v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "missing bundle id.", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    goto LABEL_16;
  }

  uint64_t v44 = (uint64_t)v13;
  swift_unknownObjectRetain_n(v13, 2LL);
  uint64_t v15 = swift_dynamicCast(&token, &v44, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6LL);
  if (!(_DWORD)v15)
  {
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v29))
    {

      swift_unknownObjectRelease_n(v13, 2LL);
      goto LABEL_23;
    }

    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v29, "invalid bundle id.", v30, 2u);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_unknownObjectRelease_n(v13, 2LL);
LABEL_16:

LABEL_23:
LABEL_24:

    return;
  }

  uint64_t v17 = *(void *)token.val;
  unint64_t v16 = *(void *)&token.val[2];
  uint64_t v18 = swift_bridgeObjectRetain_n(*(void *)&token.val[2], 2LL);
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = a1;
    *(void *)token.val = v42;
    *(_DWORD *)unint64_t v21 = 136315138;
    unint64_t v41 = v21 + 4;
    swift_bridgeObjectRetain(v16);
    uint64_t v44 = sub_100009984(v17, v16, (uint64_t *)&token);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v41, v21 + 12);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "setting up XPCService for %s.", v21, 0xCu);
    uint64_t v22 = v42;
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v23 = v22;
    a1 = v43;
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  dispatch_semaphore_t v31 = dispatch_semaphore_create(0LL);
  uint64_t v32 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v4, 1LL, 1LL, v32);
  __int128 v33 = (void *)swift_allocObject(&unk_10008ED38, 56LL, 7LL);
  v33[2] = 0LL;
  v33[3] = 0LL;
  v33[4] = v17;
  v33[5] = v16;
  v33[6] = v31;
  id v34 = v31;
  uint64_t v35 = sub_100008680((uint64_t)v4, (uint64_t)&unk_100097048, (uint64_t)v33);
  swift_release(v35);
  OS_dispatch_semaphore.wait()();
  int64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "starting client connection.", v39, 2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  swift_beginAccess(&qword_10009ED80, &token, 0LL, 0LL);
  uint64_t v40 = qword_10009ED80;
  if (qword_10009ED80)
  {
    swift_retain(qword_10009ED80);
    Listener.handle(message:)(a1);

    swift_unknownObjectRelease_n(v13, 2LL);
    swift_release(v40);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002B6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch(sub_10002B6C0, 0LL);
}

uint64_t sub_10002B6C0()
{
  if (qword_10009ED80)
  {
    OS_dispatch_semaphore.signal()();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    type metadata accessor for Listener();
    uint64_t v3 = dword_100096E5C;
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (void *)swift_task_alloc(v3);
    *(void *)(v0 + 64) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10002B784;
    return Listener.__allocating_init(mode:clientBundleID:)(1, *(void *)(v0 + 40), v2);
  }

uint64_t sub_10002B784(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 72) = a1;
  return swift_task_switch(sub_10002B800, 0LL);
}

uint64_t sub_10002B800()
{
  uint64_t v1 = qword_10009ED80;
  qword_10009ED80 = *(void *)(v0 + 72);
  swift_release(v1);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B848(uint64_t a1)
{
  uint64_t v2 = swift_unknownObjectRetain(a1);
  sub_10002B0AC(v2);
  return swift_unknownObjectRelease(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  if (qword_10009AF90 != -1) {
    swift_once(&qword_10009AF90, sub_10002B034);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_100009FC4(v3, (uint64_t)qword_10009ED88);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "starting CloudTelemetryService XPCService.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  xpc_main((xpc_connection_handler_t)sub_10002B848);
}

uint64_t sub_10002B938()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10002B96C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_100097044);
  __int128 v4 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10000A560;
  *(_OWORD *)(v3 + 48) = v4;
  *(void *)(v3 + 40) = v2;
  return swift_task_switch(sub_10002B6C0, 0LL);
}

ValueMetadata *type metadata accessor for Main()
{
  return &type metadata for Main;
}

uint64_t sub_10002B9E4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10000A32C(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 16));
  uint64_t v9 = *(void *)(v2 + 16);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0x8000000000000000LL;
  sub_10002E5B0(v5, (uint64_t)sub_10002E544, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v9);
  uint64_t v7 = *(void *)(v2 + 16);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10002BA78@<X0>(uint64_t a1@<X0>, CFBooleanRef *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  SecTaskRef v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  CFTypeRef v13 = (char *)&v66 - v12;
  __chkstk_darwin(v11);
  uint64_t v76 = (CFBooleanRef *)((char *)&v66 - v14);
  sub_10000C2D4(a1, (uint64_t)v83);
  if (swift_dynamicCast(&v80, v83, (char *)&type metadata for Any + 8, &type metadata for String, 0LL))
  {
    uint64_t v15 = (const __CFBoolean *)v81;
    *a2 = v80;
    a2[1] = v15;
    unint64_t v16 = a2;
    uint64_t v17 = v6;
    uint64_t v18 = 0LL;
    goto LABEL_17;
  }

  uint64_t v74 = v13;
  uint64_t v75 = v7;
  uint64_t v19 = sub_10000A418(0LL, (unint64_t *)&qword_100097170, &OBJC_CLASS___NSNumber_ptr);
  if (swift_dynamicCast(&v80, v83, (char *)&type metadata for Any + 8, v19, 0LL))
  {
    os_log_type_t v20 = v80;
    if (kCFBooleanTrue) {
      BOOL v21 = v80 == kCFBooleanTrue;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {

      *(_BYTE *)a2 = 1;
      goto LABEL_16;
    }

    if (kCFBooleanFalse && v20 == kCFBooleanFalse)
    {
      *(_BYTE *)a2 = 0;
LABEL_16:
      unint64_t v16 = a2;
      uint64_t v17 = v6;
      uint64_t v18 = 4LL;
      goto LABEL_17;
    }
  }

  if (swift_dynamicCast(&v80, v83, (char *)&type metadata for Any + 8, &type metadata for Int64, 0LL))
  {
    *a2 = v80;
    unint64_t v16 = a2;
    uint64_t v17 = v6;
    uint64_t v18 = 1LL;
    goto LABEL_17;
  }

  if (swift_dynamicCast(&v80, v83, (char *)&type metadata for Any + 8, &type metadata for UInt64, 0LL))
  {
    *a2 = v80;
    unint64_t v16 = a2;
    uint64_t v17 = v6;
    uint64_t v18 = 2LL;
    goto LABEL_17;
  }

  if (swift_dynamicCast(&v80, v83, (char *)&type metadata for Any + 8, &type metadata for Double, 0LL))
  {
    *a2 = v80;
    unint64_t v16 = a2;
    uint64_t v17 = v6;
    uint64_t v18 = 3LL;
    goto LABEL_17;
  }

  uint64_t v23 = sub_100009FDC(&qword_100096630);
  if (!swift_dynamicCast(&v84, v83, (char *)&type metadata for Any + 8, v23, 0LL))
  {
    uint64_t v57 = sub_100009FDC(&qword_100097180);
    if (!swift_dynamicCast(&v78, v83, (char *)&type metadata for Any + 8, v57, 0LL))
    {
      unint64_t v64 = sub_100030358();
      uint64_t v65 = swift_allocError(&type metadata for BadCachedEvent, v64, 0LL, 0LL);
      swift_willThrow(v65);
      return sub_10000C2B4(v83);
    }

    uint64_t v76 = a2;
    uint64_t v58 = v78;
    uint64_t v59 = (const __CFBoolean *)sub_10002F0D8(0LL, *(void *)(v78 + 16), 0, _swiftEmptyArrayStorage);
    uint64_t v60 = *(void *)(v58 + 16);
    if (v60)
    {
      uint64_t v61 = v58 + 32;
      while (1)
      {
        sub_10000C2D4(v61, (uint64_t)&v80);
        sub_10002BA78(&v80);
        if (v2) {
          break;
        }
        unint64_t v63 = *((void *)v59 + 2);
        unint64_t v62 = *((void *)v59 + 3);
        if (v63 >= v62 >> 1) {
          uint64_t v59 = (const __CFBoolean *)sub_10002F0D8(v62 > 1, v63 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v63 + 1;
        sub_100015684( (uint64_t)v10,  (uint64_t)v59 + ((*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))
        + *(void *)(v75 + 72) * v63);
        sub_10000C2B4(&v80);
        v61 += 32LL;
        if (!--v60) {
          goto LABEL_75;
        }
      }

      sub_10000C2B4(&v80);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v58);
      return sub_10000C2B4(v83);
    }

LABEL_75:
    swift_bridgeObjectRelease(v58);
    unint64_t v16 = v76;
    *uint64_t v76 = v59;
    uint64_t v17 = v6;
    uint64_t v18 = 6LL;
LABEL_17:
    swift_storeEnumTagMultiPayload(v16, v17, v18);
    return sub_10000C2B4(v83);
  }

  uint64_t v24 = v84;
  uint64_t v25 = (const __CFBoolean *)Dictionary.init(minimumCapacity:)( *(void *)(v84 + 16),  &type metadata for String,  v6,  &protocol witness table for String);
  int64_t v26 = 0LL;
  uint64_t v27 = *(void *)(v24 + 64);
  uint64_t v67 = v24 + 64;
  uint64_t v70 = v24;
  uint64_t v28 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t v29 = -1LL;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v69 = v79;
  uint64_t v71 = &v82;
  int64_t v68 = (unint64_t)(v28 + 63) >> 6;
  int64_t v66 = v68 - 1;
  uint64_t v31 = (uint64_t)v74;
  uint64_t v32 = (uint64_t)v76;
  while (1)
  {
    if (v30)
    {
      uint64_t v73 = (v30 - 1) & v30;
      unint64_t v33 = __clz(__rbit64(v30)) | (v26 << 6);
      goto LABEL_29;
    }

    int64_t v37 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      goto LABEL_79;
    }
    if (v37 < v68)
    {
      unint64_t v38 = *(void *)(v67 + 8 * v37);
      if (v38) {
        goto LABEL_33;
      }
      v26 += 2LL;
      if (v37 + 1 >= v68)
      {
        int64_t v26 = v37;
        goto LABEL_38;
      }

      unint64_t v38 = *(void *)(v67 + 8 * v26);
      if (v38)
      {
        ++v37;
        goto LABEL_33;
      }

      if (v37 + 2 < v68) {
        break;
      }
    }

LABEL_38:
    uint64_t v73 = 0LL;
    memset(v79, 0, sizeof(v79));
    __int128 v78 = 0u;
LABEL_39:
    sub_100030C24((uint64_t)&v78, (uint64_t)&v80, &qword_100097188);
    uint64_t v39 = v81;
    if (!v81)
    {
      swift_release(v70);
      *a2 = v25;
      unint64_t v16 = a2;
      uint64_t v17 = v6;
      uint64_t v18 = 7LL;
      goto LABEL_17;
    }

    uint64_t v40 = v3;
    uint64_t v41 = v6;
    CFBooleanRef v42 = v80;
    sub_100030C0C(v71, &v78);
    sub_10002BA78(&v78);
    uint64_t v72 = v40;
    if (v40)
    {
      swift_bridgeObjectRelease(v39);
      sub_10000C2B4(&v78);
      swift_bridgeObjectRelease(v25);
      swift_release(v70);
      return sub_10000C2B4(v83);
    }

    sub_100015684(v32, v31);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    uint64_t v77 = v25;
    unint64_t v45 = sub_100010540((uint64_t)v42, v39);
    uint64_t v46 = *((void *)v25 + 2);
    BOOL v47 = (v44 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }

    char v49 = v44;
    if (*((void *)v25 + 3) >= v48)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v25 = v77;
        if ((v44 & 1) != 0) {
          goto LABEL_25;
        }
      }

      else
      {
        sub_10002ECC0();
        uint64_t v25 = v77;
        if ((v49 & 1) != 0) {
          goto LABEL_25;
        }
      }
    }

    else
    {
      sub_10002E964(v48, isUniquelyReferenced_nonNull_native);
      unint64_t v50 = sub_100010540((uint64_t)v42, v39);
      if ((v49 & 1) != (v51 & 1)) {
        goto LABEL_81;
      }
      unint64_t v45 = v50;
      uint64_t v25 = v77;
      if ((v49 & 1) != 0)
      {
LABEL_25:
        uint64_t v31 = (uint64_t)v74;
        sub_100030B80((uint64_t)v74, *((void *)v25 + 7) + *(void *)(v75 + 72) * v45);
        goto LABEL_26;
      }
    }

    *((void *)v25 + (v45 >> 6) + 8) |= 1LL << v45;
    uint64_t v52 = (CFBooleanRef *)(*((void *)v25 + 6) + 16 * v45);
    CFBooleanRef *v52 = v42;
    v52[1] = (CFBooleanRef)v39;
    uint64_t v31 = (uint64_t)v74;
    sub_100015684((uint64_t)v74, *((void *)v25 + 7) + *(void *)(v75 + 72) * v45);
    uint64_t v53 = *((void *)v25 + 2);
    BOOL v54 = __OFADD__(v53, 1LL);
    uint64_t v55 = v53 + 1;
    if (v54) {
      goto LABEL_78;
    }
    *((void *)v25 + 2) = v55;
    swift_bridgeObjectRetain(v39);
LABEL_26:
    uint64_t v6 = v41;
    uint64_t v32 = (uint64_t)v76;
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10000C2B4(&v78);
    uint64_t v3 = v72;
    unint64_t v30 = v73;
  }

  unint64_t v38 = *(void *)(v67 + 8 * (v37 + 2));
  if (v38)
  {
    v37 += 2LL;
    goto LABEL_33;
  }

  int64_t v56 = v37 + 3;
  if (v37 + 3 >= v68)
  {
    int64_t v26 = v37 + 2;
    goto LABEL_38;
  }

  unint64_t v38 = *(void *)(v67 + 8 * v56);
  if (v38)
  {
    v37 += 3LL;
LABEL_33:
    uint64_t v73 = (v38 - 1) & v38;
    unint64_t v33 = __clz(__rbit64(v38)) + (v37 << 6);
    int64_t v26 = v37;
LABEL_29:
    uint64_t v34 = *(void *)(v70 + 56);
    uint64_t v35 = (void *)(*(void *)(v70 + 48) + 16 * v33);
    uint64_t v36 = v35[1];
    *(void *)&__int128 v78 = *v35;
    *((void *)&v78 + 1) = v36;
    sub_10000C2D4(v34 + 32 * v33, (uint64_t)v69);
    swift_bridgeObjectRetain(v36);
    goto LABEL_39;
  }

  while (1)
  {
    int64_t v37 = v56 + 1;
    if (__OFADD__(v56, 1LL)) {
      break;
    }
    if (v37 >= v68)
    {
      int64_t v26 = v66;
      goto LABEL_38;
    }

    unint64_t v38 = *(void *)(v67 + 8 * v37);
    ++v56;
    if (v38) {
      goto LABEL_33;
    }
  }

LABEL_80:
  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10002C28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v5) {
    return v7;
  }
  else {
    return a1;
  }
}

uint64_t sub_10002C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  SecTaskRef v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v16 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100030114(a1 + v12, (uint64_t)v10, type metadata accessor for ServiceEventValue);
        sub_100030114(a2 + v12, (uint64_t)v7, type metadata accessor for ServiceEventValue);
        sub_10002FC20((uint64_t)v10, (uint64_t)v7);
        char v16 = v15;
        sub_100015BF0((uint64_t)v7, type metadata accessor for ServiceEventValue);
        sub_100015BF0((uint64_t)v10, type metadata accessor for ServiceEventValue);
        BOOL v18 = v14-- != 0;
        if ((v16 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v18);
    }
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_10002C414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v51 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = sub_100009FDC(&qword_100096710);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (int64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = __chkstk_darwin(v11);
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v52 = (int64_t *)((char *)&v46 - v15);
  int64_t v53 = 0LL;
  uint64_t v49 = a1;
  unint64_t v50 = v9;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v47 = a1 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v48 = (unint64_t)(v17 + 63) >> 6;
  int64_t v46 = v48 - 1;
  uint64_t v20 = (uint64_t *)&unk_100097070;
  uint64_t v21 = (uint64_t)v9;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v53 << 6);
LABEL_8:
      uint64_t v24 = *(void *)(v49 + 56);
      uint64_t v25 = (void *)(*(void *)(v49 + 48) + 16 * v23);
      uint64_t v26 = v25[1];
      *uint64_t v13 = *v25;
      v13[1] = v26;
      uint64_t v27 = v24 + *(void *)(v5 + 72) * v23;
      uint64_t v28 = sub_100009FDC(v20);
      sub_100030114(v27, (uint64_t)v13 + *(int *)(v28 + 48), type metadata accessor for ServiceEventValue);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v13, 0LL, 1LL, v28);
      swift_bridgeObjectRetain(v26);
      uint64_t v29 = v52;
      goto LABEL_30;
    }

    int64_t v30 = v53 + 1;
    if (__OFADD__(v53, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    uint64_t v29 = v52;
    if (v30 < v48)
    {
      unint64_t v31 = *(void *)(v47 + 8 * v30);
      if (v31) {
        goto LABEL_12;
      }
      int64_t v32 = v53 + 2;
      ++v53;
      if (v30 + 1 < v48)
      {
        unint64_t v31 = *(void *)(v47 + 8 * v32);
        if (v31) {
          goto LABEL_15;
        }
        int64_t v53 = v30 + 1;
        if (v30 + 2 < v48)
        {
          unint64_t v31 = *(void *)(v47 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2LL;
            goto LABEL_12;
          }

          int64_t v53 = v30 + 2;
          if (v30 + 3 < v48)
          {
            unint64_t v31 = *(void *)(v47 + 8 * (v30 + 3));
            if (v31)
            {
              v30 += 3LL;
              goto LABEL_12;
            }

            int64_t v32 = v30 + 4;
            int64_t v53 = v30 + 3;
            if (v30 + 4 < v48) {
              break;
            }
          }
        }
      }
    }

LABEL_29:
    uint64_t v33 = sub_100009FDC(v20);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v13, 1LL, 1LL, v33);
    unint64_t v19 = 0LL;
LABEL_30:
    sub_100030C24((uint64_t)v13, (uint64_t)v29, &qword_100096710);
    uint64_t v34 = sub_100009FDC(v20);
    int v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48LL))(v29, 1LL, v34);
    BOOL v36 = v35 == 1;
    if (v35 == 1) {
      return v36;
    }
    int64_t v37 = v20;
    uint64_t v38 = (uint64_t)v29 + *(int *)(v34 + 48);
    uint64_t v39 = v29;
    uint64_t v40 = *v29;
    uint64_t v41 = v39[1];
    sub_100015684(v38, v21);
    unint64_t v42 = sub_100010540(v40, v41);
    LOBYTE(v40) = v43;
    swift_bridgeObjectRelease(v41);
    if ((v40 & 1) == 0)
    {
      sub_100015BF0(v21, type metadata accessor for ServiceEventValue);
      return 0LL;
    }

    uint64_t v44 = v51;
    sub_100030114(*(void *)(a2 + 56) + *(void *)(v5 + 72) * v42, v51, type metadata accessor for ServiceEventValue);
    char v45 = sub_10002FC20(v44, v21);
    sub_100015BF0(v44, type metadata accessor for ServiceEventValue);
    uint64_t result = sub_100015BF0(v21, type metadata accessor for ServiceEventValue);
    uint64_t v20 = v37;
    if ((v45 & 1) == 0) {
      return v36;
    }
  }

  unint64_t v31 = *(void *)(v47 + 8 * v32);
  if (v31)
  {
LABEL_15:
    int64_t v30 = v32;
LABEL_12:
    unint64_t v19 = (v31 - 1) & v31;
    unint64_t v23 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v53 = v30;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v30 >= v48)
    {
      int64_t v53 = v46;
      goto LABEL_29;
    }

    unint64_t v31 = *(void *)(v47 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }

LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10002C830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100030114(a1, (uint64_t)v6, type metadata accessor for XPCObject);
  switch(swift_getEnumCaseMultiPayload(v6, v4))
  {
    case 2u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      *uint64_t v10 = *v6;
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 4LL;
      goto LABEL_9;
    case 3u:
    case 6u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      *(void *)uint64_t v10 = *(void *)v6;
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 1LL;
      goto LABEL_9;
    case 4u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      *(void *)uint64_t v10 = *(void *)v6;
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 2LL;
      goto LABEL_9;
    case 5u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      *(void *)uint64_t v10 = *(void *)v6;
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 3LL;
      goto LABEL_9;
    case 8u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      uint64_t v15 = *((void *)v6 + 1);
      *(void *)uint64_t v10 = *(void *)v6;
      *((void *)v10 + 1) = v15;
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 0LL;
      goto LABEL_9;
    case 9u:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      uint64_t v16 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v10, v6, v16);
      uint64_t v11 = v10;
      uint64_t v12 = v7;
      uint64_t v13 = 5LL;
LABEL_9:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      unint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      break;
    case 0xBu:
      uint64_t v21 = *(void **)v6;
      int64_t count = xpc_array_get_count(*(xpc_object_t *)v6);
      unint64_t v23 = _swiftEmptyArrayStorage;
      size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || count > _swiftEmptyArrayStorage[3] >> 1)
      {
        if (_swiftEmptyArrayStorage[2] <= count) {
          int64_t v25 = count;
        }
        else {
          int64_t v25 = _swiftEmptyArrayStorage[2];
        }
        unint64_t v23 = (void *)sub_10002F0D8(isUniquelyReferenced_nonNull_native, v25, 0, _swiftEmptyArrayStorage);
      }

      unint64_t v43 = (unint64_t)v23;
      uint64_t v18 = swift_allocObject(&unk_10008EDF8, 24LL, 7LL);
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = &v43;
      uint64_t v26 = swift_allocObject(&unk_10008EE20, 32LL, 7LL);
      *(void *)(v26 + swift_weakDestroy(v0 + 16) = sub_1000301E0;
      *(void *)(v26 + 24) = v18;
      uint64_t v41 = sub_100030C70;
      uint64_t v42 = v26;
      aBlock = _NSConcreteStackBlock;
      uint64_t v38 = 1107296256LL;
      uint64_t v39 = sub_10002CF7C;
      uint64_t v40 = &unk_10008EE38;
      uint64_t v27 = _Block_copy(&aBlock);
      uint64_t v28 = v42;
      swift_retain(v26);
      swift_release(v28);
      xpc_array_apply(v21, v27);
      _Block_release(v27);
      swift_unknownObjectRelease(v21);
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v26, "", 72LL, 89LL, 40LL, 1LL);
      swift_release(v26);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002CDA8LL);
      }

      *(void *)uint64_t v10 = v43;
      swift_storeEnumTagMultiPayload(v10, v7, 6LL);
      unint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v17 = sub_1000301E0;
      break;
    case 0xCu:
      xpc_object_t v30 = *(xpc_object_t *)v6;
      unint64_t v43 = sub_10002CF80((uint64_t)_swiftEmptyArrayStorage);
      size_t v31 = xpc_dictionary_get_count(v30);
      sub_100009FDC((uint64_t *)&unk_100097050);
      Dictionary.reserveCapacity(_:)(v31);
      uint64_t v20 = swift_allocObject(&unk_10008ED80, 24LL, 7LL);
      *(void *)(v20 + swift_weakDestroy(v0 + 16) = &v43;
      uint64_t v32 = swift_allocObject(&unk_10008EDA8, 32LL, 7LL);
      *(void *)(v32 + swift_weakDestroy(v0 + 16) = sub_100030168;
      *(void *)(v32 + 24) = v20;
      uint64_t v41 = sub_100030194;
      uint64_t v42 = v32;
      aBlock = _NSConcreteStackBlock;
      uint64_t v38 = 1107296256LL;
      uint64_t v39 = sub_10002CF7C;
      uint64_t v40 = &unk_10008EDC0;
      uint64_t v33 = _Block_copy(&aBlock);
      uint64_t v34 = v42;
      swift_unknownObjectRetain(v30);
      swift_retain(v32);
      swift_release(v34);
      xpc_dictionary_apply(v30, v33);
      _Block_release(v33);
      swift_unknownObjectRelease_n(v30, 2LL);
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      char v35 = swift_isEscapingClosureAtFileLocation(v32, "", 72LL, 97LL, 49LL, 1LL);
      swift_release(v32);
      if ((v35 & 1) != 0) {
        goto LABEL_23;
      }
      *(void *)uint64_t v10 = v43;
      swift_storeEnumTagMultiPayload(v10, v7, 7LL);
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      unint64_t v19 = sub_100030168;
      break;
    default:
      sub_100015BF0(a1, type metadata accessor for XPCObject);
      sub_100015BF0((uint64_t)v6, type metadata accessor for XPCObject);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1LL, 1LL, v7);
  }

  sub_100015684((uint64_t)v10, a2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0LL, 1LL, v7);
  sub_100028AAC((uint64_t)v17, v18);
  return sub_100028AAC((uint64_t)v19, v20);
}

uint64_t sub_10002CDD4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100009FDC(&qword_100096AA8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (void *)swift_unknownObjectRetain(a1);
  XPCObject.init(_:)(v10, (uint64_t)v6);
  uint64_t v11 = type metadata accessor for XPCObject(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v6, 1LL, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_9;
  }

  sub_10002C830(v6);
  uint64_t v13 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1LL, v13);
  if ((_DWORD)result == 1)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  uint64_t v15 = (void *)*a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v15 = (void *)sub_10002F0D8(0LL, v15[2] + 1LL, 1, v15);
    *a2 = v15;
  }

  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t v15 = (void *)sub_10002F0D8(v17 > 1, v18 + 1, 1, v15);
    *a2 = v15;
  }

  v15[2] = v18 + 1;
  return sub_100015684( (uint64_t)v9,  (uint64_t)v15 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
         + *(void *)(v14 + 72) * v18);
}

unint64_t sub_10002CF80(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100097160);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100009FDC(&qword_100098240);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100030BC4(v13, (uint64_t)v5);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_100010540(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for ServiceEventValue(0LL);
    unint64_t result = sub_100015684(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10002D110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100009FDC(&qword_100096AA8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = String.init(cString:)(a1);
  uint64_t v19 = v18;
  uint64_t v20 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v20, (uint64_t)v6);
  uint64_t v21 = type metadata accessor for XPCObject(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v6, 1LL, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_10002C830(v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
    if ((_DWORD)result != 1)
    {
      sub_100015684((uint64_t)v12, (uint64_t)v16);
      sub_100030114((uint64_t)v16, (uint64_t)v10, type metadata accessor for ServiceEventValue);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0LL, 1LL, v13);
      sub_10002D2EC((uint64_t)v10, v17, v19);
      return sub_100015BF0((uint64_t)v16, type metadata accessor for ServiceEventValue);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10002D2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100009FDC(&qword_100096AA8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ServiceEventValue(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_10000C234(a1, &qword_100096AA8);
    sub_10002EEF4(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    return sub_10000C234((uint64_t)v10, &qword_100096AA8);
  }

  else
  {
    sub_100015684(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10002F448((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = *v4;
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v17);
  }

uint64_t sub_10002D44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

uint64_t sub_10002D49C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10002D4C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_10002D4D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002D514(uint64_t a1)
{
  unint64_t v2 = sub_100030210();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002D53C(uint64_t a1)
{
  unint64_t v2 = sub_100030210();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10002D564()
{
  uint64_t v0 = sub_100009FDC(&qword_100096710);
  uint64_t v1 = __chkstk_darwin(v0);
  __chkstk_darwin(v1);
  uint64_t v12 = sub_100009FDC(&qword_100097060);
  v11[2] = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v13 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v11[3] = *(void *)(v3 - 8);
  v11[4] = v3;
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  v11[5] = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_100030114(v14, (uint64_t)v11 - v7, v9);
  uint64_t v14 = v4;
  uint64_t v10 = (char *)&loc_10002D708 + dword_10002DD64[swift_getEnumCaseMultiPayload(v8, v4)];
  __asm { BR              X10 }

uint64_t sub_10002D718()
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  sub_10000A32C(v0, v5);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of Encoder.singleValueContainer())(v5, v6);
  uint64_t v7 = *(void *)(v2 - 96);
  uint64_t v8 = *(void *)(v2 - 88);
  sub_10003029C(v2 - 120, v7);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of SingleValueEncodingContainer.encode(_:))( v3,  v4,  v7,  v8);
  swift_bridgeObjectRelease(v4);
  return sub_10000C2B4((void *)(v2 - 120));
}

void sub_10002DD84()
{
}

unint64_t sub_10002DD98()
{
  return 0xD000000000000021LL;
}

void sub_10002DDB4()
{
  uint64_t v1 = sub_100009FDC(&qword_100096710);
  uint64_t v2 = __chkstk_darwin(v1);
  v14[8] = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  v14[7] = (char *)v14 - v4;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for ServiceEventValue(0LL);
  v14[6] = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  v14[10] = (char *)v14 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - v10;
  sub_100030114(v0, (uint64_t)v14 - v10, v12);
  uint64_t v13 = (char *)&loc_10002DF10 + dword_10002E524[swift_getEnumCaseMultiPayload(v11, v6)];
  __asm { BR              X10 }

NSString sub_10002DF20()
{
  uint64_t v1 = *(void *)(v0 + 8);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

double sub_10002E544@<D0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_100009FDC((uint64_t *)&unk_100097070) + 48);
  uint64_t v5 = sub_100009FDC(&qword_100097160);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  sub_100030114(v4, (uint64_t)a2 + *(int *)(v5 + 48), type metadata accessor for ServiceEventValue);
  *a2 = v7;
  a2[1] = v6;
  *(void *)&double result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_10002E5B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v50 = (uint64_t)&v48 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v17 = sub_100009FDC((uint64_t *)&unk_100097190);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v21 = ~v20;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = -v20;
  uint64_t v52 = a1;
  uint64_t v53 = a1 + 64;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  else {
    uint64_t v24 = -1LL;
  }
  uint64_t v54 = v21;
  uint64_t v55 = 0LL;
  uint64_t v56 = v24 & v22;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v49 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v48 = a3;
  swift_retain(a3);
  sub_10002F604((uint64_t)v19);
  uint64_t v25 = sub_100009FDC(&qword_100097160);
  for (int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v19, 1LL, v25);
        ;
        int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v19, 1LL, v25))
  {
    if (i == 1)
    {
      swift_release(v48);
      swift_bridgeObjectRelease(v49);
      sub_100030C1C(v52);
      return swift_release(v58);
    }

    uint64_t v32 = *v19;
    uint64_t v31 = v19[1];
    sub_100015684((uint64_t)v19 + *(int *)(v25 + 48), (uint64_t)v16);
    uint64_t v33 = *(void **)a5;
    unint64_t v35 = sub_100010540(v32, v31);
    uint64_t v36 = v33[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v33[3] >= v38)
    {
      if ((a4 & 1) != 0)
      {
        uint64_t v42 = *(void **)a5;
        if ((v34 & 1) != 0) {
          goto LABEL_5;
        }
      }

      else
      {
        sub_10002ECC0();
        uint64_t v42 = *(void **)a5;
        if ((v39 & 1) != 0) {
          goto LABEL_5;
        }
      }
    }

    else
    {
      sub_10002E964(v38, a4 & 1);
      unint64_t v40 = sub_100010540(v32, v31);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_22;
      }
      unint64_t v35 = v40;
      uint64_t v42 = *(void **)a5;
      if ((v39 & 1) != 0)
      {
LABEL_5:
        unint64_t v27 = *(void *)(v59 + 72) * v35;
        uint64_t v28 = v42[7] + v27;
        uint64_t v29 = v51;
        sub_100030114(v28, v51, type metadata accessor for ServiceEventValue);
        uint64_t v30 = v50;
        sub_100030114(v29, v50, type metadata accessor for ServiceEventValue);
        sub_100015BF0(v29, type metadata accessor for ServiceEventValue);
        sub_100015BF0((uint64_t)v16, type metadata accessor for ServiceEventValue);
        swift_bridgeObjectRelease(v31);
        sub_100030B80(v30, *(void *)(*(void *)a5 + 56LL) + v27);
        goto LABEL_6;
      }
    }

    v42[(v35 >> 6) + 8] |= 1LL << v35;
    unint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
    *unint64_t v43 = v32;
    v43[1] = v31;
    sub_100015684((uint64_t)v16, v42[7] + *(void *)(v59 + 72) * v35);
    uint64_t v44 = v42[2];
    BOOL v45 = __OFADD__(v44, 1LL);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_21;
    }
    v42[2] = v46;
LABEL_6:
    sub_10002F604((uint64_t)v19);
    uint64_t v25 = sub_100009FDC(&qword_100097160);
    a4 = 1;
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ServiceEventValue(uint64_t a1)
{
  uint64_t result = qword_10009B3A0;
  if (!qword_10009B3A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServiceEventValue);
  }
  return result;
}

Swift::Int sub_10002E964(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100009FDC(&qword_100098240);
  int v43 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  char v39 = v3;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  char v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      goto LABEL_36;
    }
    unint64_t v24 = v41[v23];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v24 = v41[v18];
      if (!v24) {
        break;
      }
    }

void sub_10002ECC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100009FDC(&qword_100098240);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return;
  }

  uint64_t v28 = v1;
  uint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

uint64_t sub_10002EEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100010540(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10002ECC0();
      uint64_t v12 = v19;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56);
    uint64_t v14 = type metadata accessor for ServiceEventValue(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_100015684(v13 + *(void *)(v15 + 72) * v9, a3);
    sub_10002F24C(v9, v12);
    uint64_t v16 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for ServiceEventValue(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

uint64_t sub_10002F01C(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  uint64_t *v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  uint64_t *v2 = result;
  return result;
}

size_t sub_10002F0D8(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100009FDC((uint64_t *)&unk_100097150);
  uint64_t v11 = *(void *)(type metadata accessor for ServiceEventValue(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  uint64_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)v15 + v19;
  uint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20, v21);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20);
  }

  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

unint64_t sub_10002F24C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for ServiceEventValue(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        uint64_t result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront(result, v22);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

LABEL_21:
    unint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  uint64_t *v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    unint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  uint64_t *v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    BOOL v29 = (v35 - 1) & v35;
  }

  BOOL v36 = v34 + 3;
  if (v36 < v105)
  {
    unint64_t v35 = *(void *)(v104 + 8 * v36);
    if (!v35)
    {
      while (1)
      {
        uint64_t v30 = v36 + 1;
        if (__OFADD__(v36, 1LL)) {
          break;
        }
        if (v30 >= v105) {
          goto LABEL_55;
        }
        unint64_t v35 = *(void *)(v104 + 8 * v30);
        ++v36;
        if (v35) {
          goto LABEL_21;
        }
      }

    uint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v15);
    int64_t v20 = *v19;
    int64_t v21 = v19[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v7);
    uint64_t v22 = sub_100010540(v20, v21);
    int64_t v24 = v23;
    swift_bridgeObjectRelease(v7);
    if ((v24 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      unint64_t v35 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10002ECC0();
        uint64_t v7 = v35;
      }

      swift_bridgeObjectRelease(*(void *)(*(void *)(v7 + 48) + 16 * v22 + 8));
      uint64_t v26 = *(void *)(v7 + 56);
      uint64_t v27 = type metadata accessor for ServiceEventValue(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      sub_100015684(v26 + *(void *)(v28 + 72) * v22, (uint64_t)v6);
      sub_10002F24C(v22, v7);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v6, 0LL, 1LL, v27);
      a2 = v32;
    }

    else
    {
      unint64_t v13 = type metadata accessor for ServiceEventValue(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
    }

    sub_10000C234((uint64_t)v6, &qword_100096AA8);
    swift_bridgeObjectRelease(v21);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v34)
  {
LABEL_26:
    swift_release(a2);
    BOOL v29 = v31;
    swift_bridgeObjectRelease(*(void *)(v31 + 16));
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v7;
    return;
  }

  uint64_t v17 = *(void *)(v33 + 8 * v18);
  if (v17)
  {
    Swift::Int v12 = v18;
    goto LABEL_21;
  }

  while (1)
  {
    Swift::Int v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(v33 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }

void sub_10002F448(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for ServiceEventValue(0LL) - 8) + 72LL) * v12;
        sub_100030B80(a1, v20);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10002ECC0();
      goto LABEL_7;
    }

    sub_10002E964(v15, a4 & 1);
    unint64_t v21 = sub_100010540(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10002F57C(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10002F57C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t result = sub_100015684(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_10002F604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100009FDC((uint64_t *)&unk_100097070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100009FDC(&qword_100096710);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char **)((char *)&v41 - v11);
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v16 = v1[2];
  int64_t v15 = v1[3];
  int64_t v17 = v15;
  unint64_t v18 = v1[4];
  char v41 = v6;
  if (v18)
  {
    uint64_t v45 = a1;
    int64_t v46 = v15;
    uint64_t v42 = v16;
    uint64_t v43 = v14;
    uint64_t v44 = v10;
    uint64_t v19 = v4;
    uint64_t v20 = (v18 - 1) & v18;
    unint64_t v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    uint64_t v22 = *(void *)(v13 + 56);
    unint64_t v23 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v21);
    uint64_t v24 = v13;
    uint64_t v26 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v27 = type metadata accessor for ServiceEventValue(0LL);
    sub_100030114( v22 + *(void *)(*(void *)(v27 - 8) + 72LL) * v21,  (uint64_t)v12 + *(int *)(v3 + 48),  type metadata accessor for ServiceEventValue);
    *uint64_t v12 = v26;
    v12[1] = v25;
    uint64_t v4 = v19;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v12, 0LL, 1LL, v3);
    uint64_t v28 = v25;
    uint64_t v13 = v24;
    swift_bridgeObjectRetain(v28);
    uint64_t v10 = v44;
    a1 = v45;
    uint64_t v16 = v42;
    uint64_t v14 = v43;
    goto LABEL_25;
  }

  int64_t v29 = v15 + 1;
  if (__OFADD__(v15, 1LL))
  {
    __break(1u);
LABEL_23:
    int64_t v17 = v11;
    goto LABEL_24;
  }

  int64_t v30 = (unint64_t)(v16 + 64) >> 6;
  if (v29 < v30)
  {
    unint64_t v31 = *(void *)(v14 + 8 * v29);
    if (v31)
    {
LABEL_7:
      uint64_t v42 = v16;
      uint64_t v43 = v14;
      uint64_t v44 = v10;
      uint64_t v45 = a1;
      uint64_t v19 = v4;
      uint64_t v20 = (v31 - 1) & v31;
      unint64_t v21 = __clz(__rbit64(v31)) + (v29 << 6);
      int64_t v46 = v29;
      goto LABEL_3;
    }

    int64_t v32 = v15 + 2;
    int64_t v17 = v15 + 1;
    if (v15 + 2 < v30)
    {
      unint64_t v31 = *(void *)(v14 + 8 * v32);
      if (v31)
      {
LABEL_10:
        int64_t v29 = v32;
        goto LABEL_7;
      }

      int64_t v17 = v15 + 2;
      if (v15 + 3 < v30)
      {
        unint64_t v31 = *(void *)(v14 + 8 * (v15 + 3));
        if (v31)
        {
          int64_t v29 = v15 + 3;
          goto LABEL_7;
        }

        int64_t v32 = v15 + 4;
        int64_t v17 = v15 + 3;
        if (v15 + 4 < v30)
        {
          unint64_t v31 = *(void *)(v14 + 8 * v32);
          if (v31) {
            goto LABEL_10;
          }
          int64_t v29 = v15 + 5;
          int64_t v17 = v15 + 4;
          if (v15 + 5 < v30)
          {
            unint64_t v31 = *(void *)(v14 + 8 * v29);
            if (v31) {
              goto LABEL_7;
            }
            int64_t v11 = v30 - 1;
            uint64_t v33 = v15 + 6;
            while (v30 != v33)
            {
              unint64_t v31 = *(void *)(v14 + 8 * v33++);
              if (v31)
              {
                int64_t v29 = v33 - 1;
                goto LABEL_7;
              }
            }

            goto LABEL_23;
          }
        }
      }
    }
  }

LABEL_24:
  int64_t v46 = v17;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1LL, 1LL, v3);
  uint64_t v20 = 0LL;
LABEL_25:
  *uint64_t v1 = v13;
  v1[1] = v14;
  int64_t v34 = v46;
  v1[2] = v16;
  v1[3] = v34;
  v1[4] = v20;
  unint64_t v35 = (void (*)(uint64_t))v1[5];
  sub_100030C24((uint64_t)v12, (uint64_t)v10, &qword_100096710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1LL, v3) == 1)
  {
    uint64_t v36 = sub_100009FDC(&qword_100097160);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( a1,  1LL,  1LL,  v36);
  }

  else
  {
    uint64_t v38 = (uint64_t)v10;
    uint64_t v39 = (uint64_t)v41;
    sub_100030C24(v38, (uint64_t)v41, (uint64_t *)&unk_100097070);
    v35(v39);
    sub_10000C234(v39, (uint64_t *)&unk_100097070);
    uint64_t v40 = sub_100009FDC(&qword_100097160);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))( a1,  0LL,  1LL,  v40);
  }

    __break(1u);
    goto LABEL_25;
  }

  sub_100046ED4(v14, a2 & 1);
  unint64_t v18 = sub_100046ADC(v7);
  if ((v16 & 1) == (v19 & 1))
  {
    int64_t v15 = v18;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v21 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v21);
    uint64_t v48 = v21;
    swift_errorRetain(v21);
    uint64_t v22 = sub_100009FDC(&qword_100098870);
    if ((swift_dynamicCast(v22, &v48, v22, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v48);
    }

    goto LABEL_27;
  }

  uint64_t v42 = 0LL;
  uint64_t v43 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v32._object = (void *)0x800000010007BC90LL;
  v32._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)( v44,  &v42,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v33._uint64_t countAndFlagsBits = 39LL;
  v33._object = (void *)0xE100000000000000LL;
  String.append(_:)(v33);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v42,  v43,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    uint64_t v25 = (v31 - 1) & v31;
    int64_t v29 = __clz(__rbit64(v31)) + (v27 << 6);
    if (v21[2]) {
      goto LABEL_25;
    }
  }

  int64_t v32 = v30 + 3;
  if (v32 >= v26)
  {
LABEL_40:
    swift_bridgeObjectRelease(v71);
    swift_release(a2);
    unint64_t v62 = v69;
    unint64_t v63 = *(void *)(v69 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v63);
    *(void *)(v62 + swift_weakDestroy(v0 + 16) = v21;
    return swift_bridgeObjectRelease(v21);
  }

  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31)
  {
    uint64_t v27 = v32;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v27 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v27 >= v26) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v22 + 8 * v27);
    ++v32;
    if (v31) {
      goto LABEL_24;
    }
  }

    uint64_t v25 = (v31 - 1) & v31;
    int64_t v29 = __clz(__rbit64(v31)) + (v27 << 6);
    if (v21[2]) {
      goto LABEL_25;
    }
  }

  int64_t v32 = v30 + 3;
  if (v32 >= v26)
  {
LABEL_40:
    swift_bridgeObjectRelease(v71);
    swift_release(a2);
    unint64_t v62 = v69;
    unint64_t v63 = *(void *)(v69 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v63);
    *(void *)(v62 + swift_weakDestroy(v0 + 16) = v21;
    return swift_bridgeObjectRelease(v21);
  }

  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31)
  {
    uint64_t v27 = v32;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v27 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v27 >= v26) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v22 + 8 * v27);
    ++v32;
    if (v31) {
      goto LABEL_24;
    }
  }

        int64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      unint64_t v23 = v22[1];
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100030C0C(v25, v38);
      }

      else
      {
        sub_10000C2D4((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v29 = 0;
        int64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          unint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          int64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        int64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100030C0C(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10002F94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[0] = a1;
  uint64_t v7 = type metadata accessor for ServiceEventValue(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (CFBooleanRef *)((char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v12);
  uint64_t v15 = String.data(using:allowLossyConversion:)(v14, 0LL, a3, a4);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (v17 >> 60 == 15)
  {
    swift_bridgeObjectRelease(a2);
    unint64_t v18 = sub_100030358();
    uint64_t v19 = swift_allocError(&type metadata for BadCachedEvent, v18, 0LL, 0LL);
    return swift_willThrow(v19);
  }

  else
  {
    unint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v31 = 0LL;
    id v23 = [v21 JSONObjectWithData:isa options:0 error:&v31];

    id v24 = v31;
    if (v23)
    {
      _bridgeAnyObjectToAny(_:)(v32, v23);
      swift_unknownObjectRelease(v23);
      uint64_t v25 = v30[1];
      sub_10002BA78((uint64_t)v32, v9);
      if (v25)
      {
        sub_10000C2B4(v32);
        sub_10000A060(v15, v17);
        return swift_bridgeObjectRelease(a2);
      }

      else if (swift_getEnumCaseMultiPayload(v9, v7) == 7)
      {
        sub_10000C2B4(v32);
        sub_10000A060(v15, v17);
        return v30[0];
      }

      else
      {
        swift_bridgeObjectRelease(a2);
        sub_100015BF0((uint64_t)v9, type metadata accessor for ServiceEventValue);
        unint64_t v28 = sub_100030358();
        uint64_t v29 = swift_allocError(&type metadata for BadCachedEvent, v28, 0LL, 0LL);
        swift_willThrow(v29);
        sub_10000A060(v15, v17);
        return sub_10000C2B4(v32);
      }
    }

    else
    {
      uint64_t v26 = v24;
      swift_bridgeObjectRelease(a2);
      _convertNSErrorToError(_:)(v26);

      swift_willThrow(v27);
      return sub_10000A060(v15, v17);
    }
  }

void sub_10002FC20(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v20[2] = *(void *)(v2 - 8);
  v20[3] = v2;
  __chkstk_darwin(v2);
  v20[1] = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  v20[4] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v8 = __chkstk_darwin(v7);
  v20[5] = (char *)v20 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100009FDC(&qword_100097168);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_100030114(v21, (uint64_t)v17, type metadata accessor for ServiceEventValue);
  sub_100030114(v22, v18, type metadata accessor for ServiceEventValue);
  uint64_t v19 = (char *)sub_10002FE14 + 4 * byte_100077290[swift_getEnumCaseMultiPayload(v17, v4)];
  __asm { BR              X10 }

uint64_t sub_10002FE14()
{
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    swift_bridgeObjectRelease(v4);
    sub_10000C234(v0, &qword_100097168);
    goto LABEL_9;
  }

  uint64_t v6 = v2[1];
  if (v5 == *v2 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2LL);
    goto LABEL_12;
  }

  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  if ((v8 & 1) != 0)
  {
LABEL_12:
    sub_100015BF0(v0, type metadata accessor for ServiceEventValue);
    char v9 = 1;
    return v9 & 1;
  }

  sub_100015BF0(v0, type metadata accessor for ServiceEventValue);
LABEL_9:
  char v9 = 0;
  return v9 & 1;
}

uint64_t sub_100030114(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100030158()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100030168(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_100030184()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100030194()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000301B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000301C8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000301D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000301E0(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_100030200()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100030210()
{
  unint64_t result = qword_100097068;
  if (!qword_100097068)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000772E8, &type metadata for ServiceEventValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097068);
  }

  return result;
}

unint64_t sub_100030254()
{
  unint64_t result = qword_100096348;
  if (!qword_100096348)
  {
    uint64_t v1 = type metadata accessor for ServiceEventValue(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100077388, v1);
    atomic_store(result, (unint64_t *)&qword_100096348);
  }

  return result;
}

uint64_t sub_10003029C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

unint64_t sub_1000302C8()
{
  unint64_t result = qword_100097088;
  if (!qword_100097088)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077360, &type metadata for ServiceEventValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097088);
  }

  return result;
}

unint64_t sub_100030310()
{
  unint64_t result = qword_100097090;
  if (!qword_100097090)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077338, &type metadata for ServiceEventValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097090);
  }

  return result;
}

unint64_t sub_100030358()
{
  unint64_t result = qword_100097098;
  if (!qword_100097098)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077420, &type metadata for BadCachedEvent);
    atomic_store(result, (unint64_t *)&qword_100097098);
  }

  return result;
}

ValueMetadata *type metadata accessor for Event()
{
  return &type metadata for Event;
}

void *assignWithCopy for CachedEvent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for CachedEvent(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for CachedEvent()
{
  return &type metadata for CachedEvent;
}

uint64_t *sub_10003046C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 5u:
        uint64_t v11 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      case 6u:
        uint64_t v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 7u:
        uint64_t v13 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v13);
        swift_storeEnumTagMultiPayload(a1, a3, 7LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_10003059C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v4 = a1[1];
      goto LABEL_4;
    case 5:
      uint64_t v5 = type metadata accessor for UUID(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
      break;
    case 6:
    case 7:
      uint64_t v4 = *a1;
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }

  return result;
}

void *sub_10003061C(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 5u:
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_7;
    case 6u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
      goto LABEL_7;
    case 7u:
      uint64_t v12 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v12);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *sub_100030718(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for ServiceEventValue);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = a2[1];
        a1[1] = v6;
        swift_bridgeObjectRetain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 5u:
        uint64_t v10 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_8;
      case 6u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_8;
      case 7u:
        uint64_t v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *sub_100030834(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 5LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1000308C0(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for ServiceEventValue);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 5LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for XPCObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100030980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100030990(uint64_t a1)
{
  v4[0] = &unk_100077498;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = &unk_1000774B0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 8LL, v4);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for ServiceEventValue.CodingKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ServiceEventValue.CodingKeys(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for ServiceEventValue.CodingKeys(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for StorebagSectionPerCountrySampling(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for ServiceEventValue.CodingKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceEventValue.CodingKeys(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceEventValue.CodingKeys(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ServiceEventValue.CodingKeys()
{
  return &type metadata for ServiceEventValue.CodingKeys;
}

ValueMetadata *type metadata accessor for BadCachedEvent()
{
  return &type metadata for BadCachedEvent;
}

uint64_t sub_100030B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceEventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100097160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100030C0C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100030C1C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100030C24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100009FDC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void sub_100030C78(char *a1)
{
}

void sub_100030C84(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100030CD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100030D74 + 4 * byte_1000774EE[a2]))(7496054LL);
}

uint64_t sub_100030D74(uint64_t a1)
{
  if (a1 == 7496054 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return v2 & 1;
}

void sub_100030E5C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100030EA4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100030F0C + 4 * byte_1000774F8[a2]))(0x6E6F6973726576LL);
}

uint64_t sub_100030F0C(uint64_t a1)
{
  if (a1 == 0x6E6F6973726576LL && v1 == 0xE700000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  return v2 & 1;
}

void sub_100030FB8()
{
}

void sub_100030FC0(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_10003100C()
{
  return Hasher._finalize()();
}

void sub_100031080(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1000310D0()
{
  return Hasher._finalize()();
}

void sub_10003117C()
{
  __asm { BR              X10 }

uint64_t sub_1000311B4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void sub_100031214(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100031254(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

void sub_1000312EC(uint64_t a1)
{
}

void sub_1000312F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10003133C()
{
  return Hasher._finalize()();
}

void sub_1000313B0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1000313FC()
{
  return Hasher._finalize()();
}

unint64_t sub_1000314A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003228C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000314D4()
{
  return ((uint64_t (*)(void))((char *)sub_100031500 + 4 * byte_10007751A[*v0]))();
}

void sub_100031500(void *a1@<X8>)
{
  *a1 = 0x6E6F6973726576LL;
  a1[1] = 0xE700000000000000LL;
}

void sub_10003151C(void *a1@<X8>)
{
  *a1 = 0x63736A5F343662LL;
  a1[1] = 0xE700000000000000LL;
}

void sub_100031538(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x800000010007B6F0LL;
}

uint64_t sub_100031558()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100031584 + 4 * byte_10007751E[*v0]))( 0x747069726373LL,  0xE600000000000000LL);
}

uint64_t sub_100031584()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_10003159C()
{
  return 0x63736A5F343662LL;
}

unint64_t sub_1000315B4()
{
  return 0xD000000000000012LL;
}

unint64_t sub_1000315D0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003228C(a1);
  *a2 = result;
  return result;
}

void sub_1000315F4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100031600(uint64_t a1)
{
  unint64_t v2 = sub_100033408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100031628(uint64_t a1)
{
  unint64_t v2 = sub_100033408();
  return CodingKey.debugDescription.getter(a1, v2);
}

Class sub_100031650()
{
  uint64_t v1 = v0;
  unint64_t v2 = sub_10002AC3C();
  uint64_t v3 = Dictionary.init(minimumCapacity:)(4LL, &type metadata for String, v2, &protocol witness table for String);
  NSString v4 = String._bridgeToObjectiveC()();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100032130((uint64_t)v4, 0x747069726373LL, 0xE600000000000000LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v6 = [objc_allocWithZone(NSNumber) initWithChar:*(char *)(v1 + 16)];
  char v7 = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100032130((uint64_t)v6, 0x6E6F6973726576LL, 0xE700000000000000LL, v7);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  NSString v8 = String._bridgeToObjectiveC()();
  char v9 = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100032130((uint64_t)v8, 0x63736A5F343662LL, 0xE700000000000000LL, v9);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v10 = *(void *)(v1 + 40);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_100031C7C(v11);
  swift_bridgeObjectRelease(v10);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  char v14 = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100032130((uint64_t)isa, 0xD000000000000012LL, 0x800000010007B6F0LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  Class v15 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  return v15;
}

Class sub_100031844()
{
  uint64_t v1 = v0;
  unint64_t v2 = sub_10002AC3C();
  uint64_t v3 = Dictionary.init(minimumCapacity:)(2LL, &type metadata for String, v2, &protocol witness table for String);
  NSString v4 = String._bridgeToObjectiveC()();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100032130((uint64_t)v4, 0x7972617262696CLL, 0xE700000000000000LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  NSString v6 = String._bridgeToObjectiveC()();
  char v7 = swift_isUniquelyReferenced_nonNull_native(v3);
  v36[0] = v3;
  sub_100032130((uint64_t)v6, 7496054LL, 0xE300000000000000LL, v7);
  uint64_t v30 = v3;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_1000322D4(v1 + 32, (uint64_t)v33);
  sub_1000322D4((uint64_t)v33, (uint64_t)v34);
  if (v34[1])
  {
    NSString v8 = String._bridgeToObjectiveC()();
    char v9 = swift_isUniquelyReferenced_nonNull_native(v3);
    v36[0] = v3;
    sub_100032130((uint64_t)v8, 0xD000000000000013LL, 0x800000010007B710LL, v9);
    uint64_t v30 = v36[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
  }

  sub_1000322D4(v1 + 48, (uint64_t)v32);
  sub_1000322D4((uint64_t)v32, (uint64_t)v35);
  if (v35[1])
  {
    NSString v10 = String._bridgeToObjectiveC()();
    char v11 = swift_isUniquelyReferenced_nonNull_native(v30);
    v36[0] = v30;
    sub_100032130((uint64_t)v10, 0xD000000000000012LL, 0x800000010007B730LL, v11);
    uint64_t v30 = v36[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v12 = *(void *)(v1 + 64);
    if (!v12) {
      goto LABEL_14;
    }
  }

  else
  {

    uint64_t v12 = *(void *)(v1 + 64);
    if (!v12) {
      goto LABEL_14;
    }
  }

  v36[0] = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain(v12);
  uint64_t v14 = sub_10002F01C(v13, 0);
  specialized Array._endMutation()(v14);
  if (v13)
  {
    Class v15 = (void *)(v12 + 40);
    do
    {
      uint64_t v16 = *v15;
      swift_bridgeObjectRetain(*v15);
      NSString v17 = String._bridgeToObjectiveC()();
      uint64_t v18 = swift_bridgeObjectRelease(v16);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      unint64_t v20 = *(void *)((v36[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v19 = *(void *)((v36[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v20 >= v19 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
      }
      v15 += 2;
      uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
      specialized Array._endMutation()(v21);
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease(v12);
  uint64_t v22 = v36[0];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  char v24 = swift_isUniquelyReferenced_nonNull_native(v30);
  v31[0] = v30;
  sub_100032130((uint64_t)isa, 0xD000000000000011LL, 0x800000010007B750LL, v24);
  swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_14:
  sub_1000322D4(v1 + 72, (uint64_t)v31);
  sub_1000322D4((uint64_t)v31, (uint64_t)v36);
  if (v36[1])
  {
    NSString v25 = String._bridgeToObjectiveC()();
    char v26 = swift_isUniquelyReferenced_nonNull_native(v30);
    sub_100032130((uint64_t)v25, 0x69745F7261646172LL, 0xEB00000000656C74LL, v26);
    uint64_t v27 = v30;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {

    uint64_t v27 = v30;
  }

  Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  return v28;
}

void *sub_100031C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = a1 + 32;
    do
    {
      __int128 v5 = *(_OWORD *)(v4 + 48);
      v11[2] = *(_OWORD *)(v4 + 32);
      v11[3] = v5;
      v11[4] = *(_OWORD *)(v4 + 64);
      uint64_t v12 = *(void *)(v4 + 80);
      __int128 v6 = *(_OWORD *)(v4 + 16);
      v11[0] = *(_OWORD *)v4;
      v11[1] = v6;
      sub_100033550(v11);
      Class v7 = sub_100031844();
      NSString v8 = sub_1000335C0(v11);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      uint64_t v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      v4 += 88LL;
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

double sub_100031D5C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_100031D9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100031DD0 + 4 * byte_100077522[a1]))( 0x7972617262696CLL,  0xE700000000000000LL);
}

uint64_t sub_100031DD0()
{
  return 7496054LL;
}

unint64_t sub_100031DE0()
{
  return 0xD000000000000013LL;
}

unint64_t sub_100031E18()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100031E34()
{
  return 0x69745F7261646172LL;
}

uint64_t sub_100031E54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100031E88 + 4 * byte_100077528[a1]))( 0x7972617262696CLL,  0xE700000000000000LL);
}

uint64_t sub_100031E88()
{
  return 7496054LL;
}

unint64_t sub_100031E98()
{
  return 0xD000000000000013LL;
}

unint64_t sub_100031ED0()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100031EEC()
{
  return 0x69745F7261646172LL;
}

void sub_100031F0C(char *a1)
{
}

void sub_100031F18()
{
}

void sub_100031F20(uint64_t a1)
{
}

void sub_100031F28(uint64_t a1)
{
}

unint64_t sub_100031F30@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000325A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100031F5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100031D9C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100031F84()
{
  return sub_100031E54(*v0);
}

unint64_t sub_100031F8C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000325A0(a1);
  *a2 = result;
  return result;
}

void sub_100031FB0(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100031FBC(uint64_t a1)
{
  unint64_t v2 = sub_1000333C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100031FE4(uint64_t a1)
{
  unint64_t v2 = sub_1000333C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10003200C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v6;
  }

  return result;
}

uint64_t sub_100032064(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100010540(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10002A868();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10001A3DC(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_100032130(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10002A868();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

unint64_t sub_10003228C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008F0D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000322D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_1000971A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003231C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_1000971F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_100033408();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionScript.CodingKeys,  &type metadata for StorebagSectionScript.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  char v29 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  uint64_t v14 = v13;
  char v28 = 1;
  __n128 v15 = swift_bridgeObjectRetain(v13);
  int v25 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5, v15);
  char v27 = 2;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  uint64_t v17 = v16;
  uint64_t v22 = sub_100009FDC(&qword_100097200);
  char v26 = 3;
  sub_1000334A8();
  uint64_t v23 = v17;
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v18 = v24;
  swift_bridgeObjectRetain(v24);
  sub_10000C2B4(a1);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = v23;
  swift_bridgeObjectRelease(v23);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v25;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v18;
  return result;
}

unint64_t sub_1000325A0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008F150, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000325E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_1000971E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_1000333C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys,  &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  char v53 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v53, v5);
  uint64_t v14 = v13;
  char v52 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v5);
  uint64_t v44 = v12;
  uint64_t v45 = v15;
  char v51 = 2;
  uint64_t v17 = v16;
  __n128 v18 = swift_bridgeObjectRetain(v16);
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5, v18);
  uint64_t v46 = v20;
  uint64_t v40 = v19;
  uint64_t v43 = v17;
  char v50 = 3;
  __n128 v21 = swift_bridgeObjectRetain(v20);
  uint64_t v42 = 0LL;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5, v21);
  uint64_t v23 = v22;
  uint64_t v24 = sub_100009FDC(&qword_100096C10);
  char v49 = 4;
  unint64_t v25 = sub_10003344C();
  __n128 v26 = swift_bridgeObjectRetain(v23);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, v24, &v49, v5, v24, v25, v26);
  uint64_t v41 = v23;
  uint64_t v27 = v47;
  char v48 = 5;
  __n128 v28 = swift_bridgeObjectRetain(v47);
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5, v28);
  uint64_t v31 = v30;
  int64_t v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v33 = v29;
  v32(v8, v5);
  swift_bridgeObjectRetain(v31);
  sub_10000C2B4(a1);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v27);
  uint64_t v34 = v41;
  swift_bridgeObjectRelease(v41);
  uint64_t v35 = v46;
  swift_bridgeObjectRelease(v46);
  uint64_t v36 = v43;
  swift_bridgeObjectRelease(v43);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v44;
  a2[1] = v14;
  a2[2] = v45;
  a2[3] = v36;
  a2[4] = v40;
  a2[5] = v35;
  a2[6] = v39;
  a2[7] = v34;
  a2[8] = v27;
  a2[9] = v33;
  a2[10] = v31;
  return result;
}

unint64_t sub_100032A28()
{
  unint64_t result = qword_1000971A8;
  if (!qword_1000971A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077544, &type metadata for StorebagSectionScript.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971A8);
  }

  return result;
}

unint64_t sub_100032A70()
{
  unint64_t result = qword_1000971B0;
  if (!qword_1000971B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007765C, &type metadata for StorebagSectionScript.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971B0);
  }

  return result;
}

unint64_t sub_100032AB8()
{
  unint64_t result = qword_1000971B8;
  if (!qword_1000971B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077634, &type metadata for StorebagSectionScript.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971B8);
  }

  return result;
}

unint64_t sub_100032B00()
{
  unint64_t result = qword_1000971C0;
  if (!qword_1000971C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000776AC, &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971C0);
  }

  return result;
}

unint64_t sub_100032B48()
{
  unint64_t result = qword_1000971C8;
  if (!qword_1000971C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000777C4, &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971C8);
  }

  return result;
}

unint64_t sub_100032B90()
{
  unint64_t result = qword_1000971D0;
  if (!qword_1000971D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007779C, &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971D0);
  }

  return result;
}

uint64_t destroy for StorebagSectionScript(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for StorebagSectionScript(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for StorebagSectionScript(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for StorebagSectionScript(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StorebagSectionScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionScript(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionScript(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionScript()
{
  return &type metadata for StorebagSectionScript;
}

uint64_t getEnumTagSinglePayload for StorebagSectionScript.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for StorebagSectionScript.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100032EDC + 4 * byte_100077533[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100032F10 + 4 * byte_10007752E[v4]))();
}

uint64_t sub_100032F10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100032F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100032F20LL);
  }
  return result;
}

uint64_t sub_100032F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100032F34LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_100032F38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100032F40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionScript.CodingKeys()
{
  return &type metadata for StorebagSectionScript.CodingKeys;
}

uint64_t destroy for StorebagSectionScriptRequiredLibraries(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

void *initializeWithCopy for StorebagSectionScriptRequiredLibraries(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v8 = a2[8];
  uint64_t v7 = a2[9];
  a1[8] = v8;
  a1[9] = v7;
  uint64_t v9 = a2[10];
  a1[10] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *assignWithCopy for StorebagSectionScriptRequiredLibraries(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[8];
  uint64_t v13 = a2[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  a1[9] = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for StorebagSectionScriptRequiredLibraries(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void *assignWithTake for StorebagSectionScriptRequiredLibraries(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a1[5];
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  uint64_t v10 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = a1[10];
  a1[9] = *(void *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionScriptRequiredLibraries(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionScriptRequiredLibraries(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionScriptRequiredLibraries()
{
  return &type metadata for StorebagSectionScriptRequiredLibraries;
}

uint64_t getEnumTagSinglePayload for StorebagSectionScriptRequiredLibraries.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for StorebagSectionScriptRequiredLibraries.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100033344 + 4 * byte_10007753D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100033378 + 4 * byte_100077538[v4]))();
}

uint64_t sub_100033378(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100033388LL);
  }
  return result;
}

uint64_t sub_100033394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003339CLL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_1000333A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000333A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionScriptRequiredLibraries.CodingKeys()
{
  return &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys;
}

unint64_t sub_1000333C4()
{
  unint64_t result = qword_1000971D8;
  if (!qword_1000971D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007774C, &type metadata for StorebagSectionScriptRequiredLibraries.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971D8);
  }

  return result;
}

unint64_t sub_100033408()
{
  unint64_t result = qword_1000971E0;
  if (!qword_1000971E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000775E4, &type metadata for StorebagSectionScript.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000971E0);
  }

  return result;
}

unint64_t sub_10003344C()
{
  unint64_t result = qword_1000971F0;
  if (!qword_1000971F0)
  {
    uint64_t v1 = sub_10000A140(&qword_100096C10);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000971F0);
  }

  return result;
}

unint64_t sub_1000334A8()
{
  unint64_t result = qword_100097208;
  if (!qword_100097208)
  {
    uint64_t v1 = sub_10000A140(&qword_100097200);
    sub_10003350C();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100097208);
  }

  return result;
}

unint64_t sub_10003350C()
{
  unint64_t result = qword_100097210;
  if (!qword_100097210)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000777EC, &type metadata for StorebagSectionScriptRequiredLibraries);
    atomic_store(result, (unint64_t *)&qword_100097210);
  }

  return result;
}

void *sub_100033550(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_1000335C0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_100033638@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v29 = type metadata accessor for StorebagSectionMaybeShared(0LL, a2, a3, a4);
  uint64_t v23 = *(void *)(v29 - 8);
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_10000A32C(a1, v14);
  dispatch thunk of Decoder.singleValueContainer()(v24, v14, v15);
  if (v5)
  {
    swift_errorRelease(v5);
    uint64_t v25 = 0LL;
    memset(v24, 0, sizeof(v24));
    sub_100033830((uint64_t)v24);
    sub_100015BAC((uint64_t)a1, (uint64_t)v26);
    dispatch thunk of Decodable.init(from:)(v26, a2, a3);
    uint64_t v18 = v29;
    swift_storeEnumTagMultiPayload(v11, v29, 0LL);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v19(v13, v11, v18);
  }

  else
  {
    sub_100033870(v24, (uint64_t)v26);
    uint64_t v16 = v27;
    uint64_t v17 = v28;
    sub_10000A32C(v26, v27);
    *(void *)uint64_t v13 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v16, v17);
    *((void *)v13 + 1) = v20;
    uint64_t v18 = v29;
    swift_storeEnumTagMultiPayload(v13, v29, 1LL);
    sub_10000C2B4(v26);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  }

  v19(v22, v13, v18);
  return sub_10000C2B4(a1);
}

uint64_t type metadata accessor for StorebagSectionMaybeShared( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035EC8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StorebagSectionMaybeShared);
}

uint64_t sub_100033830(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100097218);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100033870(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_100033888@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return sub_100033638(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

void sub_1000338A4(char *a1)
{
}

void sub_1000338B0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000338F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100033974 + 4 * byte_100077882[a2]))(7955819LL);
}

uint64_t sub_100033974(uint64_t a1)
{
  if (a1 == 7955819 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return v2 & 1;
}

void sub_100033A48()
{
}

void sub_100033A50(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100033A98()
{
  return Hasher._finalize()();
}

void sub_100033B28()
{
  __asm { BR              X10 }

uint64_t sub_100033B5C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

void sub_100033BD8(uint64_t a1)
{
}

void sub_100033BE0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100033C24()
{
  return Hasher._finalize()();
}

unint64_t sub_100033CB4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100034978(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100033CE0()
{
  return ((uint64_t (*)(void))((char *)sub_100033D08 + 4 * byte_10007789A[*v0]))();
}

void sub_100033D08(void *a1@<X8>)
{
  *a1 = 7955819LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_100033D1C(void *a1@<X8>)
{
  *a1 = 0x7365756C6176LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100033D34(void *a1@<X8>)
{
  *a1 = 0x65756C6176LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_100033D4C(void *a1@<X8>)
{
  *a1 = 0x6E6F69746361LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100033D64(void *a1@<X8>)
{
  *a1 = 0x6F697469646E6F63LL;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t sub_100033D84()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100033DAC + 4 * byte_1000778A0[*v0]))( 1937335659LL,  0xE400000000000000LL);
}

uint64_t sub_100033DAC()
{
  return 7955819LL;
}

uint64_t sub_100033DBC()
{
  return 0x7365756C6176LL;
}

uint64_t sub_100033DD0()
{
  return 0x65756C6176LL;
}

uint64_t sub_100033DE4()
{
  return 0x6E6F69746361LL;
}

uint64_t sub_100033DF8()
{
  return 0x6F697469646E6F63LL;
}

unint64_t sub_100033E14@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100034978(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100033E38(uint64_t a1)
{
  unint64_t v2 = sub_100035CF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100033E60(uint64_t a1)
{
  unint64_t v2 = sub_100035CF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100033E88(void *result)
{
  uint64_t v2 = result[2];
  __int128 v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  unint64_t result = sub_10002229C(result, v11, 1, v3);
  __int128 v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

__n128 sub_100033F70@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_100033FC0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100033FEC + 4 * byte_1000778A6[*v0]))( 0x6E6F69746361LL,  0xE600000000000000LL);
}

uint64_t sub_100033FEC()
{
  return 1937335659LL;
}

uint64_t sub_100033FFC()
{
  return 0x7365756C6176LL;
}

uint64_t sub_10003400C()
{
  return 0x6F697469646E6F63LL;
}

uint64_t sub_100034028@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100036098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003404C(uint64_t a1)
{
  unint64_t v2 = sub_100035D3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034074(uint64_t a1)
{
  unint64_t v2 = sub_100035D3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10003409C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_1000340E0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_100097260);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_100035CF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionFilter.CodingKeys,  &type metadata for StorebagSectionFilter.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  char v52 = a2;
  uint64_t v57 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100009FDC(&qword_100096C10);
  LOBYTE(v56) = 0;
  unint64_t v13 = sub_10003344C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v53, v12, &v56, v5, v12, v13, v14);
  if (v53[0]) {
    sub_100033E88(v53[0]);
  }
  LOBYTE(v56) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v12);
  sub_100033E88(v53[0]);
  LOBYTE(v53[0]) = 1;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v53, v5);
  uint64_t v50 = v16;
  uint64_t v17 = v57;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
  uint64_t v51 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v17 = sub_10002229C(0LL, v17[2] + 1LL, 1, v17);
  }
  unint64_t v21 = v17[2];
  unint64_t v20 = v17[3];
  uint64_t v22 = v21 + 1;
  if (v21 >= v20 >> 1)
  {
    unint64_t v49 = v21 + 1;
    uint64_t v47 = sub_10002229C((void *)(v20 > 1), v21 + 1, 1, v17);
    uint64_t v22 = v49;
    uint64_t v17 = v47;
  }

  v17[2] = v22;
  uint64_t v23 = &v17[2 * v21];
  uint64_t v24 = v50;
  v23[4] = v51;
  v23[5] = v24;
  uint64_t v57 = v17;
  uint64_t v56 = _swiftEmptyArrayStorage;
  char v55 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v53, v12, &v55, v5, v12, v13, v19);
  if (v53[0]) {
    sub_100033E88(v53[0]);
  }
  char v55 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v12);
  sub_100033E88(v53[0]);
  LOBYTE(v53[0]) = 3;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)(v53, v5);
  uint64_t v28 = v27;
  uint64_t v51 = v26;
  uint64_t v29 = v56;
  if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0) {
    uint64_t v29 = sub_10002229C(0LL, v29[2] + 1LL, 1, v29);
  }
  unint64_t v31 = v29[2];
  unint64_t v30 = v29[3];
  if (v31 >= v30 >> 1) {
    uint64_t v29 = sub_10002229C((void *)(v30 > 1), v31 + 1, 1, v29);
  }
  v29[2] = v31 + 1;
  int64_t v32 = &v29[2 * v31];
  void v32[4] = v51;
  v32[5] = v28;
  uint64_t v56 = v29;
  uint64_t v33 = v57;
  LOBYTE(v53[0]) = 4;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v29);
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)(v53, v5);
  uint64_t v36 = v35;
  uint64_t v50 = v34;
  char v55 = 5;
  unint64_t v37 = sub_100035DE4();
  __n128 v38 = swift_bridgeObjectRetain(v36);
  uint64_t v51 = v36;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v53,  &type metadata for StorebagSectionCondition,  &v55,  v5,  &type metadata for StorebagSectionCondition,  v37,  v38);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v39 = v53[0];
  uint64_t v40 = v53[1];
  uint64_t v41 = v53[2];
  uint64_t v42 = v53[3];
  uint64_t v43 = v54;
  unint64_t v49 = v54;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v29);
  uint64_t v44 = v51;
  swift_bridgeObjectRetain(v51);
  sub_100035E28((uint64_t)v39, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42, v43);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v44);
  sub_10000C2B4(a1);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v33);
  uint64_t v45 = v49;
  uint64_t result = sub_100035E78((uint64_t)v39, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42, v49);
  uint64_t v46 = v52;
  void *v52 = v33;
  v46[1] = v29;
  void v46[2] = v50;
  v46[3] = v44;
  v46[4] = v39;
  v46[5] = v40;
  v46[6] = v41;
  v46[7] = v42;
  v46[8] = v45;
  return result;
}

uint64_t sub_10003466C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_100097240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_100035D3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionCondition.CodingKeys,  &type metadata for StorebagSectionCondition.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  LOBYTE(v31) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  uint64_t v14 = v13;
  uint64_t v28 = v12;
  uint64_t v29 = a2;
  uint64_t v15 = sub_100009FDC(&qword_100096C10);
  char v30 = 1;
  unint64_t v16 = sub_10003344C();
  __n128 v17 = swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v31, v15, &v30, v5, v15, v16, v17);
  char v30 = 2;
  uint64_t v27 = v31;
  __n128 v18 = swift_bridgeObjectRetain(v31);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v31, v15, &v30, v5, v15, v16, v18);
  uint64_t v19 = v31;
  uint64_t v20 = sub_100009FDC(&qword_100097248);
  char v30 = 3;
  unint64_t v21 = sub_100035D80();
  __n128 v22 = swift_bridgeObjectRetain(v19);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v31, v20, &v30, v5, v20, v21, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v23 = v31;
  swift_bridgeObjectRetain(v31);
  sub_10000C2B4(a1);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  uint64_t v24 = v27;
  swift_bridgeObjectRelease(v27);
  uint64_t result = swift_bridgeObjectRelease(v14);
  uint64_t v26 = v29;
  *uint64_t v29 = v28;
  v26[1] = v14;
  v26[2] = v24;
  void v26[3] = v19;
  v26[4] = v23;
  return result;
}

unint64_t sub_100034978(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008F4F8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000349C4()
{
  unint64_t result = qword_100097220;
  if (!qword_100097220)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077924, &type metadata for StorebagSectionFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097220);
  }

  return result;
}

unint64_t sub_100034A0C()
{
  unint64_t result = qword_100097228;
  if (!qword_100097228)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077A3C, &type metadata for StorebagSectionFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097228);
  }

  return result;
}

unint64_t sub_100034A54()
{
  unint64_t result = qword_100097230;
  if (!qword_100097230)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077A14, &type metadata for StorebagSectionFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097230);
  }

  return result;
}

uint64_t sub_100034A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_100034AA0(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100077AE0;
    swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100034B10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 == 1)
    {
      uint64_t v11 = a2[1];
      *unint64_t v3 = *a2;
      v3[1] = v11;
      *((_BYTE *)v3 + v5) = 1;
      swift_bridgeObjectRetain(v11);
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }

  return v3;
}

uint64_t sub_100034C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100034C70 + 4 * byte_1000778AF[v5]))();
  }

void *sub_100034CC8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain(v8);
    char v9 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

void *sub_100034DA0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_bridgeObjectRelease(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      uint64_t v12 = a2[1];
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_bridgeObjectRetain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

_OWORD *sub_100034F38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t sub_10003500C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_100035198(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_10003525C + 4 * byte_1000778D2[(v4 - 1)]))();
}

void sub_1000352A8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = &dword_100000004;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t sub_100035450(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_100035498 + 4 * byte_1000778E0[v3]))();
}

void sub_1000354E0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) <= 0x10uLL) {
    size_t v4 = 16LL;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }

      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }

      else
      {
        *a1 = v7;
      }
    }

    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }

  else
  {
    a1[v4] = a2;
  }

uint64_t destroy for StorebagSectionFilter(void *a1)
{
  uint64_t result = a1[5];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[7]);
    return swift_bridgeObjectRelease(a1[8]);
  }

  return result;
}

void *initializeWithCopy for StorebagSectionFilter(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[6];
    uint64_t v9 = a2[7];
    a1[6] = v8;
    a1[7] = v9;
    uint64_t v10 = a2[8];
    a1[8] = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }

  else
  {
    __int128 v11 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v11;
    a1[8] = a2[8];
  }

  return a1;
}

void *assignWithCopy for StorebagSectionFilter(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1 + 4;
  __int128 v11 = a2 + 4;
  uint64_t v12 = a1[5];
  uint64_t v13 = a2[5];
  if (v12)
  {
    if (v13)
    {
      a1[4] = a2[4];
      uint64_t v14 = a2[5];
      a1[5] = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      uint64_t v15 = a1[6];
      uint64_t v16 = a2[6];
      a1[6] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v15);
      uint64_t v17 = a1[7];
      uint64_t v18 = a2[7];
      a1[7] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v17);
      uint64_t v19 = a1[8];
      uint64_t v20 = a2[8];
      a1[8] = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v19);
    }

    else
    {
      sub_100035838(a1 + 4);
      uint64_t v25 = a2[8];
      __int128 v26 = *((_OWORD *)a2 + 3);
      *uint64_t v10 = *v11;
      *((_OWORD *)a1 + 3) = v26;
      a1[8] = v25;
    }
  }

  else if (v13)
  {
    a1[4] = a2[4];
    uint64_t v21 = a2[5];
    a1[5] = v21;
    uint64_t v22 = a2[6];
    a1[6] = v22;
    uint64_t v23 = a2[7];
    a1[7] = v23;
    uint64_t v24 = a2[8];
    a1[8] = v24;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }

  else
  {
    __int128 v27 = *v11;
    __int128 v28 = *((_OWORD *)a2 + 3);
    a1[8] = a2[8];
    *uint64_t v10 = v27;
    *((_OWORD *)a1 + 3) = v28;
  }

  return a1;
}

void *sub_100035838(void *a1)
{
  return a1;
}

__n128 initializeWithTake for StorebagSectionFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t *assignWithTake for StorebagSectionFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[5];
  if (!v8) {
    goto LABEL_5;
  }
  uint64_t v9 = a2[5];
  if (!v9)
  {
    sub_100035838(a1 + 4);
LABEL_5:
    __int128 v13 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v13;
    a1[8] = a2[8];
    return a1;
  }

  a1[4] = a2[4];
  a1[5] = v9;
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[6];
  a1[6] = a2[6];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionFilter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionFilter()
{
  return &type metadata for StorebagSectionFilter;
}

uint64_t storeEnumTagSinglePayload for StorebagSectionFilter.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100035A40 + 4 * byte_1000778EA[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100035A74 + 4 * byte_1000778E5[v4]))();
}

uint64_t sub_100035A74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035A7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100035A84LL);
  }
  return result;
}

uint64_t sub_100035A90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100035A98LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_100035A9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035AA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionFilter.CodingKeys()
{
  return &type metadata for StorebagSectionFilter.CodingKeys;
}

uint64_t destroy for StorebagSectionCondition(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *initializeWithCopy for StorebagSectionCondition(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  uint64_t v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for StorebagSectionCondition(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  uint64_t v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = a1[3];
  uint64_t v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[4];
  uint64_t v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for StorebagSectionCondition(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

void *assignWithTake for StorebagSectionCondition(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionCondition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionCondition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionCondition()
{
  return &type metadata for StorebagSectionCondition;
}

unint64_t sub_100035CF8()
{
  unint64_t result = qword_100097238;
  if (!qword_100097238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000779C4, &type metadata for StorebagSectionFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097238);
  }

  return result;
}

unint64_t sub_100035D3C()
{
  unint64_t result = qword_10009BFB0[0];
  if (!qword_10009BFB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100077C14, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, qword_10009BFB0);
  }

  return result;
}

unint64_t sub_100035D80()
{
  unint64_t result = qword_100097250;
  if (!qword_100097250)
  {
    uint64_t v1 = sub_10000A140(&qword_100097248);
    sub_100035DE4();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100097250);
  }

  return result;
}

unint64_t sub_100035DE4()
{
  unint64_t result = qword_100097258;
  if (!qword_100097258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077A8C, &type metadata for StorebagSectionCondition);
    atomic_store(result, (unint64_t *)&qword_100097258);
  }

  return result;
}

uint64_t sub_100035E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_100035E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }

  return result;
}

uint64_t sub_100035EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionCondition.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100035F40 + 4 * byte_1000778F4[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100035F74 + 4 * byte_1000778EF[v4]))();
}

uint64_t sub_100035F74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100035F84LL);
  }
  return result;
}

uint64_t sub_100035F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100035F98LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100035F9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035FA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionCondition.CodingKeys()
{
  return &type metadata for StorebagSectionCondition.CodingKeys;
}

unint64_t sub_100035FC4()
{
  unint64_t result = qword_10009C0C0[0];
  if (!qword_10009C0C0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100077BEC, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, qword_10009C0C0);
  }

  return result;
}

unint64_t sub_10003600C()
{
  unint64_t result = qword_10009C1D0;
  if (!qword_10009C1D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077B5C, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10009C1D0);
  }

  return result;
}

unint64_t sub_100036054()
{
  unint64_t result = qword_10009C1D8[0];
  if (!qword_10009C1D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100077B84, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, qword_10009C1D8);
  }

  return result;
}

uint64_t sub_100036098(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F69746361LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361LL, 0xE600000000000000LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1937335659 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937335659LL, 0xE400000000000000LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7365756C6176LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365756C6176LL, 0xE600000000000000LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6F697469646E6F63LL && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000736ELL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63LL, 0xEA0000000000736ELL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

void sub_10003623C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  char v10 = *((_BYTE *)a3 + 32);
  char v11 = *((_BYTE *)a3 + 33);
  uint64_t v13 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v14 = sub_10003D184();
  swift_beginAccess(v14, v20, 0LL, 0LL);
  uint64_t v15 = 0LL;
  if (*v14 == 1)
  {
    uint64_t v16 = sub_10003D4A4();
    uint64_t v15 = 5LL;
    if (!*v16) {
      uint64_t v15 = 1LL;
    }
  }

  *(void *)a5 = v15;
  *(void *)(a5 + 8) = v6;
  *(void *)(a5 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a5 + 24) = v8;
  *(void *)(a5 + 32) = v9;
  *(_BYTE *)(a5 + 40) = v10 & 1;
  *(_BYTE *)(a5 + 41) = v11 & 1;
  *(void *)(a5 + 48) = v13;
  *(void *)(a5 + 56) = v12;
  *(_BYTE *)(a5 + 64) = a4 & 1;
  *(void *)(a5 + 72) = a1;
  *(void *)(a5 + 80) = a2;
}

unint64_t sub_100036314()
{
  uint64_t v1 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v26 - v5);
  uint64_t v7 = sub_100009FDC(&qword_100097268);
  uint64_t v8 = sub_100009FDC(&qword_100097160);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v7, v12 + 3 * v10, v11 | 7);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
  uint64_t v14 = (void *)(v13 + v12);
  uint64_t v15 = *(int *)(v8 + 48);
  void *v14 = 0xD00000000000001BLL;
  v14[1] = 0x800000010007B7A0LL;
  __int128 v16 = *(_OWORD *)(v0 + 24);
  __int128 v28 = *(_OWORD *)(v0 + 8);
  __int128 v29 = v16;
  __int128 v30 = *(_OWORD *)(v0 + 40);
  uint64_t v31 = *(void *)(v0 + 56);
  __int128 v33 = v16;
  *(_OWORD *)((char *)v14 + vswift_weakDestroy(v0 + 15) = v16;
  swift_storeEnumTagMultiPayload((char *)v14 + v15, v1, 0LL);
  uint64_t v17 = (void *)((char *)v14 + v10);
  uint64_t v18 = (void *)((char *)v14 + v10 + *(int *)(v8 + 48));
  void *v17 = 0xD00000000000001FLL;
  v17[1] = 0x800000010007B7C0LL;
  *uint64_t v18 = *(void *)v0;
  swift_storeEnumTagMultiPayload(v18, v1, 1LL);
  uint64_t v19 = (void *)((char *)v14 + 2 * v10);
  uint64_t v20 = (_OWORD *)((char *)v19 + *(int *)(v8 + 48));
  *uint64_t v19 = 0xD000000000000017LL;
  v19[1] = 0x800000010007B7E0LL;
  __int128 v32 = v28;
  *uint64_t v20 = v28;
  swift_storeEnumTagMultiPayload(v20, v1, 0LL);
  sub_1000232C4((uint64_t)&v33);
  sub_1000232C4((uint64_t)&v32);
  unint64_t v21 = sub_10002CF80(v13);
  if ((*(_BYTE *)(v0 + 64) & 1) != 0)
  {
    uint64_t v22 = *(void *)(v0 + 72);
    uint64_t v23 = *(void *)(v0 + 80);
    void *v6 = v22;
    v6[1] = v23;
    swift_storeEnumTagMultiPayload(v6, v1, 0LL);
    sub_100015684((uint64_t)v6, (uint64_t)v4);
    swift_bridgeObjectRetain(v23);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    unint64_t v27 = v21;
    sub_10002F448((uint64_t)v4, 0xD000000000000010LL, 0x800000010007B800LL, isUniquelyReferenced_nonNull_native);
    unint64_t v21 = v27;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v21;
}

void sub_100036574()
{
  id v0 = (id)MobileGestalt_get_current_device();
  if (!v0)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v1 = v0;
  id v2 = (id)MobileGestalt_copy_deviceName_obj();
  if (!v2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v6 = v5;

  id v7 = (id)MobileGestalt_copy_marketingProductName_obj(v1);
  if (!v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v11 = v10;

  id v12 = (id)MobileGestalt_copy_productType_obj(v1);
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v16 = v15;

  id v17 = (id)MobileGestalt_copy_productVersion_obj(v1);
  if (!v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v18 = v17;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  id v21 = (id)MobileGestalt_copy_buildVersion_obj(v1);
  if (!v21)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v22 = v21;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v38 = v23;

  uint64_t v24 = sub_10003D184();
  __n128 v25 = swift_beginAccess(v24, v42, 0LL, 0LL);
  uint64_t v39 = v20;
  uint64_t v40 = v16;
  uint64_t v26 = v14;
  uint64_t v27 = v11;
  if (*v24 != 1)
  {
    uint64_t v30 = v4;
    uint64_t v31 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
    goto LABEL_11;
  }

  id v28 = (id)MobileGestalt_copy_serialNumber_obj(v1, v25);
  if (v28)
  {
    __int128 v29 = v28;
    uint64_t v30 = v4;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v33 = v32;

LABEL_11:
    uint64_t v34 = _s21CloudTelemetryService21AllEventFieldProviderV17getProjectVersionSSyFZ_0();
    uint64_t v36 = v35;

    qword_10009C268 = v30;
    qword_10009C270 = v6;
    qword_10009C278 = v9;
    qword_10009C280 = v27;
    qword_10009C288 = v26;
    qword_10009C290 = v40;
    qword_10009C298 = v41;
    qword_10009C2A0 = v39;
    qword_10009C2A8 = v37;
    qword_10009C2B0 = v38;
    qword_10009C2B8 = v34;
    qword_10009C2C0 = v36;
    qword_10009C2C8 = v31;
    qword_10009C2D0 = v33;
    return;
  }

uint64_t sub_1000367A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Date(0LL);
  v6[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TimeZone(0LL);
  v6[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[15] = v10;
  v6[16] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100036834, 0LL);
}

uint64_t sub_100036834()
{
  uint64_t v1 = *(uint64_t **)(v0 + 48);
  uint64_t v21 = v1[1];
  uint64_t v22 = *v1;
  uint64_t v19 = v1[3];
  uint64_t v20 = v1[2];
  *(_BYTE *)(v0 + 136) = *((_BYTE *)v1 + 32);
  *(_BYTE *)(v0 + 144) = *((_BYTE *)v1 + 33);
  uint64_t v17 = v1[6];
  uint64_t v18 = v1[5];
  id v2 = sub_10003D184();
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  uint64_t v3 = 0LL;
  if (*v2 == 1)
  {
    if (*sub_10003D4A4()) {
      uint64_t v3 = 5LL;
    }
    else {
      uint64_t v3 = 1LL;
    }
  }

  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  __int128 v15 = *(_OWORD *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = static TimeZone.current.getter();
  Date.init()(v11);
  uint64_t v12 = TimeZone.secondsFromGMT(for:)(v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  LOBYTE(v6) = *(_BYTE *)(v0 + 136);
  LOBYTE(v8) = *(_BYTE *)(v0 + 144);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  *(void *)uint64_t v10 = v3;
  *(void *)(v10 + 8) = v12;
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v15;
  *(void *)(v10 + 32) = v14;
  *(void *)(v10 + 40) = v16;
  *(void *)(v10 + 48) = v22;
  *(void *)(v10 + 56) = v21;
  *(void *)(v10 + 64) = v20;
  *(void *)(v10 + 72) = v19;
  *(_BYTE *)(v10 + 80) = v6;
  *(_BYTE *)(v10 + 81) = v8;
  *(void *)(v10 + 88) = v18;
  *(void *)(v10 + 96) = v17;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000369BC()
{
  uint64_t v1 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v51 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v50 = (void **)((char *)&v50 - v4);
  uint64_t v5 = sub_100009FDC(&qword_100097268);
  uint64_t v6 = sub_100009FDC(&qword_100097160);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = swift_allocObject(v5, v10 + 12 * v8, v9 | 7);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100077C80;
  uint64_t v12 = (void *)(v11 + v10);
  uint64_t v13 = (_OWORD *)((char *)v12 + *(int *)(v6 + 48));
  *uint64_t v12 = 0x7265646E65735FLL;
  v12[1] = 0xE700000000000000LL;
  __int128 v14 = *(_OWORD *)(v0 + 64);
  __int128 v56 = *(_OWORD *)(v0 + 48);
  __int128 v57 = v14;
  __int128 v58 = *(_OWORD *)(v0 + 80);
  uint64_t v59 = *(void *)(v0 + 96);
  __int128 v61 = v56;
  *uint64_t v13 = v56;
  swift_storeEnumTagMultiPayload(v13, v1, 0LL);
  __int128 v15 = (void *)((char *)v12 + v8);
  uint64_t v16 = (_OWORD *)((char *)v12 + v8 + *(int *)(v6 + 48));
  *__int128 v15 = 0x7954746E6576655FLL;
  v15[1] = 0xEA00000000006570LL;
  __int128 v60 = v57;
  *uint64_t v16 = v57;
  swift_storeEnumTagMultiPayload(v16, v1, 0LL);
  uint64_t v17 = (void *)((char *)v12 + 2 * v8);
  uint64_t v18 = (_OWORD *)((char *)v17 + *(int *)(v6 + 48));
  void *v17 = 0x6E6F69737365735FLL;
  v17[1] = 0xEA00000000004449LL;
  __int128 v55 = *(_OWORD *)(v0 + 16);
  *uint64_t v18 = v55;
  swift_storeEnumTagMultiPayload(v18, v1, 0LL);
  uint64_t v19 = (void *)((char *)v12 + 3 * v8);
  uint64_t v20 = (void *)((char *)v19 + *(int *)(v6 + 48));
  *uint64_t v19 = 0x616E7265746E695FLL;
  v19[1] = 0xE90000000000006CLL;
  *uint64_t v20 = *(void *)v0;
  swift_storeEnumTagMultiPayload(v20, v1, 1LL);
  uint64_t v21 = (void *)((char *)v12 + 4 * v8);
  uint64_t v22 = (void *)((char *)v21 + *(int *)(v6 + 48));
  *uint64_t v21 = 0x6E6F7A656D69745FLL;
  v21[1] = 0xEF74657366664F65LL;
  *uint64_t v22 = *(void *)(v0 + 8);
  swift_storeEnumTagMultiPayload(v22, v1, 1LL);
  uint64_t v23 = (void *)((char *)v12 + 5 * v8);
  uint64_t v24 = (_OWORD *)((char *)v23 + *(int *)(v6 + 48));
  *uint64_t v23 = 0x6449746E65696C63LL;
  v23[1] = 0xE800000000000000LL;
  __int128 v54 = *(_OWORD *)(v0 + 32);
  _OWORD *v24 = v54;
  swift_storeEnumTagMultiPayload(v24, v1, 0LL);
  __n128 v25 = (char *)v12 + 6 * v8;
  uint64_t v26 = &v25[*(int *)(v6 + 48)];
  strcpy(v25, "_productFamily");
  v25[15] = -18;
  sub_1000232C4((uint64_t)&v61);
  sub_1000232C4((uint64_t)&v60);
  sub_1000232C4((uint64_t)&v55);
  sub_1000232C4((uint64_t)&v54);
  if (qword_10009C260 != -1) {
    swift_once(&qword_10009C260, sub_100036574);
  }
  uint64_t v27 = qword_10009C270;
  *(void *)uint64_t v26 = qword_10009C268;
  *((void *)v26 + 1) = v27;
  swift_storeEnumTagMultiPayload(v26, v1, 0LL);
  id v28 = (void *)((char *)v12 + 7 * v8);
  __int128 v29 = (void *)((char *)v28 + *(int *)(v6 + 48));
  *id v28 = 0x656D614E736F5FLL;
  v28[1] = 0xE700000000000000LL;
  uint64_t v30 = qword_10009C280;
  *__int128 v29 = qword_10009C278;
  v29[1] = v30;
  swift_storeEnumTagMultiPayload(v29, v1, 0LL);
  uint64_t v31 = (void *)((char *)&v12[v8] + *(int *)(v6 + 48));
  strcpy((char *)&v12[v8], "_productModel");
  HIWORD(v12[v8 + 1]) = -4864;
  uint64_t v32 = qword_10009C290;
  *uint64_t v31 = qword_10009C288;
  v31[1] = v32;
  swift_storeEnumTagMultiPayload(v31, v1, 0LL);
  unint64_t v33 = (void *)((char *)v12 + 9 * v8);
  uint64_t v34 = (void *)((char *)v33 + *(int *)(v6 + 48));
  *unint64_t v33 = 0x6973726556736F5FLL;
  v33[1] = 0xEA00000000006E6FLL;
  uint64_t v35 = qword_10009C2A0;
  *uint64_t v34 = qword_10009C298;
  v34[1] = v35;
  swift_storeEnumTagMultiPayload(v34, v1, 0LL);
  uint64_t v36 = (void *)((char *)v12 + 10 * v8);
  uint64_t v37 = (void *)((char *)v36 + *(int *)(v6 + 48));
  void *v36 = 0x646C6975625FLL;
  v36[1] = 0xE600000000000000LL;
  uint64_t v38 = qword_10009C2B0;
  void *v37 = qword_10009C2A8;
  v37[1] = v38;
  swift_storeEnumTagMultiPayload(v37, v1, 0LL);
  uint64_t v39 = (void *)((char *)v12 + 11 * v8);
  uint64_t v40 = (void *)((char *)v39 + *(int *)(v6 + 48));
  void *v39 = 0x5674726F7065725FLL;
  v39[1] = 0xEB00000000737265LL;
  uint64_t v41 = qword_10009C2C0;
  *uint64_t v40 = qword_10009C2B8;
  v40[1] = v41;
  swift_storeEnumTagMultiPayload(v40, v1, 0LL);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  unint64_t v42 = sub_10002CF80(v11);
  uint64_t v43 = sub_10003D184();
  swift_beginAccess(v43, v53, 0LL, 0LL);
  if (*v43 == 1)
  {
    uint64_t v44 = qword_10009C2D0;
    uint64_t v45 = v50;
    void *v50 = qword_10009C2C8;
    v45[1] = v44;
    swift_storeEnumTagMultiPayload(v45, v1, 0LL);
    uint64_t v46 = (uint64_t)v45;
    uint64_t v47 = v51;
    sub_100015684(v46, v51);
    swift_bridgeObjectRetain(v44);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
    unint64_t v52 = v42;
    sub_10002F448(v47, 0x754E6C6169726553LL, 0xE90000000000006DLL, isUniquelyReferenced_nonNull_native);
    unint64_t v42 = v52;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v42;
}

unint64_t sub_100036F54()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = sub_100009FDC(&qword_100097268);
  uint64_t v4 = sub_100009FDC(&qword_100097160);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  uint64_t v10 = (void *)(v9 + v8);
  uint64_t v11 = (void *)(v9 + v8 + *(int *)(v4 + 48));
  *uint64_t v10 = 0x656C61636F4CLL;
  v10[1] = 0xE600000000000000LL;
  void *v11 = v2;
  v11[1] = v1;
  uint64_t v12 = type metadata accessor for ServiceEventValue(0LL);
  swift_storeEnumTagMultiPayload(v11, v12, 0LL);
  swift_bridgeObjectRetain(v1);
  return sub_10002CF80(v9);
}

unint64_t sub_10003701C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100009FDC(&qword_100097268);
  uint64_t v7 = sub_100009FDC(&qword_100097160);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + 2 * v9, v10 | 7);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100075D20;
  uint64_t v13 = (void *)(v12 + v11);
  __int128 v14 = (void *)(v12 + v11 + *(int *)(v7 + 48));
  *uint64_t v13 = 0x67616265726F7453LL;
  v13[1] = 0xEF6E6F6973726556LL;
  void *v14 = a2;
  v14[1] = a3;
  uint64_t v15 = type metadata accessor for ServiceEventValue(0LL);
  swift_storeEnumTagMultiPayload(v14, v15, 0LL);
  uint64_t v16 = (void *)((char *)v13 + v9);
  uint64_t v17 = (char *)v13 + v9 + *(int *)(v7 + 48);
  *uint64_t v16 = 0xD000000000000013LL;
  v16[1] = 0x800000010007B820LL;
  _BYTE *v17 = a1;
  swift_storeEnumTagMultiPayload(v17, v15, 4LL);
  swift_bridgeObjectRetain(a3);
  return sub_10002CF80(v12);
}

unint64_t sub_100037140()
{
  return sub_10003701C(*(_BYTE *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t _s21CloudTelemetryService21AllEventFieldProviderV17getProjectVersionSSyFZ_0()
{
  uint64_t v0 = 960051513LL;
  id v1 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v2 = [v1 infoDictionary];

  if (!v2) {
    return v0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (!*(void *)(v3 + 16) || (unint64_t v4 = sub_100010540(0x656C646E75424643LL, 0xEF6E6F6973726556LL), (v5 & 1) == 0))
  {
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }

  sub_10000C2D4(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v9 + 1))
  {
LABEL_8:
    sub_10000C234((uint64_t)&v8, &qword_100096638);
    return v0;
  }

  return v0;
}

uint64_t destroy for HTTPHeaderFieldProvider(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPHeaderFieldProvider()
{
  return &type metadata for HTTPHeaderFieldProvider;
}

uint64_t destroy for AllEventFieldProvider(void *a1)
{
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for AllEventFieldProvider(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllEventFieldProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllEventFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AllEventFieldProvider()
{
  return &type metadata for AllEventFieldProvider;
}

ValueMetadata *type metadata accessor for StartEventFieldProvider()
{
  return &type metadata for StartEventFieldProvider;
}

uint64_t sub_100037878(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for EndEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for EndEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for EndEventFieldProvider()
{
  return &type metadata for EndEventFieldProvider;
}

uint64_t type metadata accessor for CachedStorebag(uint64_t a1)
{
  return sub_10003B774(a1, (uint64_t *)&unk_10009C470, (uint64_t)&nominal type descriptor for CachedStorebag);
}

void sub_100037950()
{
  uint64_t v1 = type metadata accessor for CocoaError(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for CacheError(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100030114(v0, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_100037A2C + 4 * byte_100077D70[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_100037A2C()
{
  *(void *)(v4 - 64) = 0LL;
  *(void *)(v4 - 56) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease(*(void *)(v4 - 56));
  *(void *)(v4 - 64) = 0xD000000000000026LL;
  *(void *)(v4 - 56) = 0x800000010007B8E0LL;
  uint64_t v5 = sub_10000C5E8( &qword_1000961B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  v6._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v0, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  uint64_t v8 = *(void *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

uint64_t type metadata accessor for CacheError(uint64_t a1)
{
  return sub_10003B774(a1, (uint64_t *)&unk_10009C480, (uint64_t)&nominal type descriptor for CacheError);
}

uint64_t sub_100037C20()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10003D118();
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  Swift::String v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "mock error", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = type metadata accessor for CacheError(0LL);
  uint64_t v10 = sub_10000C5E8(&qword_100097288, type metadata accessor for CacheError, (uint64_t)&unk_100077DD0);
  swift_allocError(v9, v10, 0LL, 0LL);
  uint64_t v12 = swift_storeEnumTagMultiPayload(v11, v9, 4LL);
  return swift_willThrow(v12);
}

uint64_t sub_100037D74(uint64_t a1)
{
  return sub_100037DD4(a1, "unable to write storebag cache (OOS): %{public}s", 0LL);
}

uint64_t sub_100037D94(uint64_t a1)
{
  return sub_100037DD4(a1, "unable to access storebag cache (PERM): %{public}s", 1LL);
}

uint64_t sub_100037DB4(uint64_t a1)
{
  return sub_100037DD4(a1, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s", 2LL);
}

uint64_t sub_100037DD4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = type metadata accessor for CocoaError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10003D118();
  uint64_t v36 = v10;
  uint64_t v37 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v39 = a1;
  uint64_t v14 = v38(v8, a1, v5);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    unsigned int v34 = a3;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v42 = v33;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v32 = v18 + 4;
    uint64_t v19 = sub_10000C5E8( &qword_1000961B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v20 = Error.localizedDescription.getter(v5, v19);
    unint64_t v22 = v21;
    uint64_t v40 = sub_100009984(v20, v21, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32, v18 + 12);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v35, v18, 0xCu);
    uint64_t v23 = v33;
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v24 = v18;
    a3 = v34;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v37);
  uint64_t v25 = type metadata accessor for CacheError(0LL);
  uint64_t v26 = sub_10000C5E8(&qword_100097288, type metadata accessor for CacheError, (uint64_t)&unk_100077DD0);
  swift_allocError(v25, v26, 0LL, 0LL);
  id v28 = v27;
  v38(v27, v39, v5);
  uint64_t v29 = swift_storeEnumTagMultiPayload(v28, v25, a3);
  return swift_willThrow(v29);
}

uint64_t sub_100038090(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10003D118();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_errorRetain(a1);
  uint64_t v7 = swift_errorRetain(a1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = v2;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    unint64_t v22 = v11 + 4;
    swift_getErrorValue(a1, v26, v25);
    uint64_t v13 = Error.localizedDescription.getter(v25[1], v25[2]);
    unint64_t v15 = v14;
    uint64_t v24 = sub_100009984(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v22, v11 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "unable to access storebag cache (UNKNOWN): %{public}s",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  uint64_t v16 = type metadata accessor for CacheError(0LL);
  uint64_t v17 = sub_10000C5E8(&qword_100097288, type metadata accessor for CacheError, (uint64_t)&unk_100077DD0);
  swift_allocError(v16, v17, 0LL, 0LL);
  *uint64_t v18 = a1;
  swift_storeEnumTagMultiPayload(v18, v16, 3LL);
  uint64_t v19 = swift_errorRetain(a1);
  return swift_willThrow(v19);
}

uint64_t sub_1000382F4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EDA0);
  sub_100009FC4(v0, (uint64_t)qword_10009EDA0);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x67616265726F7473LL,  0xED00006568636163LL);
}

uint64_t sub_100038374()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t sub_1000383A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000383EC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100038428()
{
  return swift_retain(*(void *)(v0 + 120));
}

uint64_t sub_10003845C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 120);
  *(void *)(v1 + 1memset(&strm.total_in, 0, 20) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000384A0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000384DC()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 128));
}

uint64_t sub_100038510(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return swift_unknownObjectRelease(v3);
}

unint64_t sub_100038554()
{
  return sub_100038560((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100038560(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_1000975A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100009FDC(&qword_100097578);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10003CFBC(v13, (uint64_t)v5);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_100010540(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for CachedStorebag(0LL);
    unint64_t result = sub_10003C218(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000386F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_10003875C(a1, a2, a3, a4);
  return v9;
}

void *sub_10003875C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v25 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - v13;
  swift_defaultActor_initialize(v5);
  v5[15] = 0LL;
  v5[16] = 0LL;
  v5[14] = a1;
  swift_beginAccess(v5 + 15, v29, 1LL, 0LL);
  uint64_t v15 = v5[15];
  v5[15] = a2;
  uint64_t v16 = v26;
  swift_retain(a2);
  swift_release(v15);
  swift_beginAccess(v5 + 16, v28, 1LL, 0LL);
  uint64_t v17 = v5[16];
  v5[16] = a3;
  uint64_t v30 = a3;
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRelease(v17);
  uint64_t v18 = v27;
  sub_10003E288(v16, (void *)0x67616265726F7473LL, 0xEA00000000002F73LL, (uint64_t)v14);
  if (v18)
  {
    uint64_t v20 = v16;
    swift_bridgeObjectRelease(v5[14]);
    swift_release(v5[15]);
    swift_unknownObjectRelease(v5[16]);
    uint64_t v21 = type metadata accessor for StorebagCache(0LL);
    swift_defaultActor_destroy(v5);
    swift_unknownObjectRelease(v30);
    swift_release(a2);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v20, v9);
    swift_deallocPartialClassInstance(v5, v21, *(unsigned int *)(*v5 + 48LL), *(unsigned __int16 *)(*v5 + 52LL));
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( (uint64_t)v5 + OBJC_IVAR____TtC21CloudTelemetryService13StorebagCache_storebagCacheURL,  v14,  v9);
    type metadata accessor for StorebagCloudKitSource(0LL);
    uint64_t v19 = (uint64_t)v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v25, v16, v9);
    uint64_t v23 = sub_1000674C8(v19);
    swift_unknownObjectRelease(v30);
    swift_release(a2);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v16, v9);
    *(void *)((char *)v5 + OBJC_IVAR____TtC21CloudTelemetryService13StorebagCache_storebagCloudKitSource) = v23;
  }

  return v5;
}

uint64_t sub_1000389CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100009FDC(&qword_100097290);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v39 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for CachedStorebag(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v42 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(uint64_t (**)(__n128))(*(void *)v3 + 128LL);
  __n128 v18 = swift_bridgeObjectRetain(a2);
  uint64_t v40 = v3;
  uint64_t v19 = v17(v18);
  if (*(void *)(v19 + 16))
  {
    unint64_t v20 = a2;
    unint64_t v21 = sub_100010540(a1, a2);
    uint64_t v22 = a1;
    if ((v23 & 1) != 0)
    {
      sub_100030114( *(void *)(v19 + 56) + *(void *)(v15 + 72) * v21,  (uint64_t)v13,  type metadata accessor for CachedStorebag);
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v24(v13, 0LL, 1LL, v14);
    }

    else
    {
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v24(v13, 1LL, 1LL, v14);
    }
  }

  else
  {
    unint64_t v20 = a2;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v24(v13, 1LL, 1LL, v14);
    uint64_t v22 = a1;
  }

  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    sub_10000C234((uint64_t)v13, &qword_100097290);
LABEL_16:
    uint64_t v35 = 1LL;
    uint64_t v34 = v43;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v34, v35, 1LL, v14);
  }

  uint64_t v25 = v42;
  uint64_t v26 = sub_10003C218((uint64_t)v13, v42);
  uint64_t v27 = v25 + *(int *)(v14 + 20);
  static Date.now.getter(v26);
  LOBYTE(v27) = static Date.< infix(_:_:)(v27, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v41);
  if ((v27 & 1) != 0)
  {
    if (qword_10009C2E0 != -1) {
      swift_once(&qword_10009C2E0, sub_1000382F4);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v28, (uint64_t)qword_10009EDA0);
    uint64_t v29 = swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      v45[0] = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain(v20);
      uint64_t v44 = sub_100009984(v22, v20, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "removing expired storebag %{public}s from memory cache",  v32,  0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    uint64_t v36 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v40 + 144LL))(v45);
    uint64_t v37 = v39;
    sub_10003B7A8(v22, v20, v39);
    sub_10000C234(v37, &qword_100097290);
    v36(v45, 0LL);
    sub_100015BF0(v42, type metadata accessor for CachedStorebag);
    goto LABEL_16;
  }

  uint64_t v34 = v43;
  sub_10003C218(v25, v43);
  uint64_t v35 = 0LL;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v34, v35, 1LL, v14);
}

uint64_t sub_100038DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100009FDC(&qword_100097290);
  __chkstk_darwin(v8);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000389CC(a1, a2, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for CachedStorebag(0LL);
  char v12 = 1;
  int v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  sub_10000C234((uint64_t)v10, &qword_100097290);
  if (v13 == 1)
  {
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    swift_bridgeObjectRetain(a2);
    v14._uint64_t countAndFlagsBits = 0x7473696C702ELL;
    v14._object = (void *)0xE600000000000000LL;
    String.append(_:)(v14);
    uint64_t v15 = v21;
    URL.appendingPathComponent(_:)(v20, v21);
    swift_bridgeObjectRelease(v15);
    Swift::Bool v16 = URL.checkResourceIsReachable()();
    if (v17)
    {
      swift_errorRelease(v17);
      char v12 = 0;
    }

    else
    {
      char v12 = v16;
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  return v12 & 1;
}

uint64_t sub_100038F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  uint64_t v5 = sub_100009FDC(&qword_1000972A0);
  v4[33] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URLResourceValues(0LL);
  v4[34] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[35] = v7;
  v4[36] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v4[37] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[38] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[39] = swift_task_alloc(v10);
  v4[40] = swift_task_alloc(v10);
  v4[41] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for URL(0LL);
  v4[42] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[43] = v12;
  v4[44] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (*(void *)(*(void *)(sub_100009FDC(&qword_100097290) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[45] = swift_task_alloc(v13);
  v4[46] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for CachedStorebag(0LL);
  v4[47] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[48] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[49] = swift_task_alloc(v16);
  v4[50] = swift_task_alloc(v16);
  return swift_task_switch(sub_100039114, v3);
}

uint64_t sub_100039114()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 368);
  sub_1000389CC(*(void *)(v0 + 240), *(void *)(v0 + 248), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) != 1)
  {
    uint64_t v9 = *(void *)(v0 + 400);
    sub_10003C218(*(void *)(v0 + 368), v9);
    int v132 = *(_DWORD *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v130 = *(void *)(v9 + 16);
    uint64_t v131 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 32);
    swift_bridgeObjectRetain(*(void *)v9);
    uint64_t v128 = v10;
    swift_bridgeObjectRetain(v10);
    uint64_t v127 = v11;
    swift_bridgeObjectRetain(v11);
    sub_100015BF0(v9, type metadata accessor for CachedStorebag);
    goto LABEL_5;
  }

  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 240);
  sub_10000C234(*(void *)(v0 + 368), &qword_100097290);
  v133[0] = v5;
  v133[1] = v4;
  swift_bridgeObjectRetain(v4);
  v6._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v6._object = (void *)0xE600000000000000LL;
  String.append(_:)(v6);
  URL.appendingPathComponent(_:)(v5, v4);
  swift_bridgeObjectRelease(v4);
  Swift::Bool v7 = URL.checkResourceIsReachable()();
  if (v8)
  {
    swift_errorRelease(v8);
LABEL_9:
    uint64_t v28 = (void *)swift_task_alloc(dword_1000972AC);
    *(void *)(v0 + 408) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_100039CA0;
    return sub_10003ACEC(*(void *)(v0 + 240), *(void *)(v0 + 248));
  }

  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v23 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v23, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  uint64_t v25 = NSURLContentModificationDateKey;
  uint64_t v26 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v27);
  URL.resourceValues(forKeys:)(v26);
  uint64_t v30 = *(void *)(v0 + 296);
  uint64_t v29 = *(void *)(v0 + 304);
  uint64_t v32 = *(void *)(v0 + 280);
  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v34 = *(void *)(v0 + 264);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v35 = swift_bridgeObjectRelease(v26);
  URLResourceValues.contentModificationDate.getter(v35);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v34, 1LL, v30);
  if ((_DWORD)result != 1)
  {
    uint64_t v36 = *(void *)(v0 + 352);
    (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 32LL))( *(void *)(v0 + 328),  *(void *)(v0 + 264),  *(void *)(v0 + 296));
    uint64_t v37 = Data.init(contentsOf:options:)(v36, 8LL);
    unint64_t v39 = v38;
    unsigned __int8 v40 = sub_1000438CC();
    uint64_t v41 = sub_100044038(v37, v39, v40, v0 + 96);
    uint64_t v51 = v0 + 216;
    uint64_t v52 = *(void *)(v0 + 320);
    uint64_t v54 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 312);
    uint64_t v55 = *(void *)(v0 + 296);
    int v56 = *(_DWORD *)(v0 + 104);
    uint64_t v57 = Date.advanced(by:)(v41, (double)v56);
    static Date.now.getter(v57);
    LOBYTE(v37) = static Date.< infix(_:_:)(v52, v53);
    __int128 v58 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    *(void *)(v0 + 424) = v58;
    v58(v53, v55);
    id v126 = v58;
    if ((v37 & 1) != 0)
    {
      *(void *)(v0 + 184) = *(void *)(v0 + 96);
      sub_10002B00C((void *)(v0 + 184));
      *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 112);
      sub_10002AFE4(v0 + 168);
      *(void *)(v0 + 200) = *(void *)(v0 + 128);
      sub_10002B00C((void *)(v0 + 200));
      if (qword_10009C2E0 != -1) {
        swift_once(&qword_10009C2E0, sub_1000382F4);
      }
      uint64_t v59 = *(void *)(v0 + 248);
      uint64_t v60 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v60, (uint64_t)qword_10009EDA0);
      uint64_t v61 = swift_bridgeObjectRetain_n(v59, 2LL);
      unint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.default.getter(v62);
      BOOL v64 = os_log_type_enabled(v62, v63);
      unint64_t v65 = *(void *)(v0 + 248);
      if (v64)
      {
        uint64_t v66 = *(void *)(v0 + 240);
        uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v68 = swift_slowAlloc(32LL, -1LL);
        v133[0] = v68;
        *(_DWORD *)uint64_t v67 = 136446210;
        swift_bridgeObjectRetain(v65);
        *(void *)(v0 + 224) = sub_100009984(v66, v65, v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v67 + 4, v67 + 12);
        swift_bridgeObjectRelease_n(v65, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "removing expired storebag %{public}s", v67, 0xCu);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v69 = v68;
        uint64_t v51 = v0 + 216;
        swift_slowDealloc(v69, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v65, 2LL);
      }

      id v100 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL._bridgeToObjectiveC()(v101);
      uint64_t v103 = v102;
      *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = 0LL;
      unsigned int v104 = [v100 removeItemAtURL:v102 error:v51];

      os_log_type_t v105 = *(void **)(v0 + 216);
      if (v104)
      {
        uint64_t v106 = *(int **)(**(void **)(v0 + 256) + 232LL);
        uint64_t v107 = v106[1];
        uint64_t v108 = *v106;
        id v109 = v105;
        os_log_type_t v110 = (void *)swift_task_alloc(v107);
        *(void *)(v0 + 432) = v110;
        *os_log_type_t v110 = v0;
        v110[1] = sub_10003A764;
        return ((uint64_t (*)(uint64_t, void, void))((char *)v106 + v108))( v0 + 56,  *(void *)(v0 + 240),  *(void *)(v0 + 248));
      }

      uint64_t v111 = *(void *)(v0 + 344);
      uint64_t v112 = *(void *)(v0 + 352);
      uint64_t v114 = *(void *)(v0 + 328);
      uint64_t v113 = *(void *)(v0 + 336);
      uint64_t v115 = *(void *)(v0 + 320);
      uint64_t v116 = *(void *)(v0 + 296);
      id v117 = v105;
      _convertNSErrorToError(_:)(v105);

      swift_willThrow(v118);
      v126(v115, v116);
      v126(v114, v116);
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v113);
      uint64_t v42 = *(void *)(v0 + 392);
      uint64_t v44 = *(void *)(v0 + 360);
      uint64_t v43 = *(void *)(v0 + 368);
      uint64_t v45 = *(void *)(v0 + 352);
      uint64_t v47 = *(void *)(v0 + 320);
      uint64_t v46 = *(void *)(v0 + 328);
      uint64_t v48 = *(void *)(v0 + 312);
      uint64_t v49 = *(void *)(v0 + 288);
      uint64_t v50 = *(void *)(v0 + 264);
      swift_task_dealloc(*(void *)(v0 + 400));
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }

    int v132 = v56;
    uint64_t v70 = *(void *)(v0 + 384);
    uint64_t v71 = *(void *)(v0 + 392);
    uint64_t v72 = *(void *)(v0 + 376);
    uint64_t v73 = *(void *)(v0 + 360);
    uint64_t v74 = *(void *)(v0 + 256);
    uint64_t v123 = *(void *)(v0 + 248);
    uint64_t v129 = *(void *)(v0 + 240);
    uint64_t v75 = *(void *)(v0 + 96);
    uint64_t v76 = *(void *)(v0 + 120);
    uint64_t v130 = *(void *)(v0 + 112);
    uint64_t v77 = *(void *)(v0 + 128);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 304) + 16LL))( v71 + *(int *)(v72 + 20),  *(void *)(v0 + 320),  *(void *)(v0 + 296));
    uint64_t v78 = *(void *)(v0 + 128);
    __int128 v79 = *(_OWORD *)(v0 + 112);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = v79;
    *(void *)(v71 + 32) = v78;
    uint64_t v80 = v71;
    uint64_t v81 = v77;
    sub_100030114(v80, v73, type metadata accessor for CachedStorebag);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v73, 0LL, 1LL, v72);
    uint64_t v82 = *(uint64_t (**)(uint64_t, __n128))(*(void *)v74 + 144LL);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    __n128 v83 = swift_bridgeObjectRetain(v77);
    uint64_t v84 = (void (*)(uint64_t, void))v82(v0 + 136, v83);
    sub_10003AB8C(v73, v129, v123);
    v84(v0 + 136, 0LL);
    if (qword_10009C2E0 != -1) {
      swift_once(&qword_10009C2E0, sub_1000382F4);
    }
    uint64_t v128 = v76;
    uint64_t v131 = v75;
    uint64_t v85 = *(void *)(v0 + 248);
    uint64_t v86 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v86, (uint64_t)qword_10009EDA0);
    uint64_t v87 = swift_bridgeObjectRetain_n(v85, 2LL);
    id v88 = (os_log_s *)Logger.logObject.getter(v87);
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v92 = *(void *)(v0 + 344);
    uint64_t v91 = *(void *)(v0 + 352);
    uint64_t v94 = *(void *)(v0 + 328);
    uint64_t v93 = *(void *)(v0 + 336);
    uint64_t v122 = *(void *)(v0 + 320);
    uint64_t v124 = *(void *)(v0 + 392);
    uint64_t v95 = *(void *)(v0 + 296);
    unint64_t v96 = *(void *)(v0 + 248);
    uint64_t v127 = v81;
    if (v90)
    {
      uint64_t v119 = *(void *)(v0 + 240);
      uint64_t v121 = *(void *)(v0 + 336);
      uint64_t v97 = v88;
      uint64_t v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v120 = v91;
      uint64_t v99 = swift_slowAlloc(32LL, -1LL);
      v133[0] = v99;
      *(_DWORD *)uint64_t v98 = 136446210;
      swift_bridgeObjectRetain(v96);
      *(void *)(v0 + 208) = sub_100009984(v119, v96, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease_n(v96, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v97, v89, "storing storebag %{public}s in cache", v98, 0xCu);
      swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_slowDealloc(v98, -1LL, -1LL);

      sub_100015BF0(v124, type metadata accessor for CachedStorebag);
      v126(v122, v95);
      v126(v94, v95);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v120, v121);
    }

    else
    {
      swift_bridgeObjectRelease_n(v96, 2LL);

      sub_100015BF0(v124, type metadata accessor for CachedStorebag);
      v126(v122, v95);
      v126(v94, v95);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    }

uint64_t sub_100039CA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 408);
  *(void *)(*v1 + 4swift_weakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10003A974;
  }
  else {
    uint64_t v4 = sub_100039D50;
  }
  return swift_task_switch(v4, *(void *)(v2 + 256));
}

uint64_t sub_100039D50()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  uint64_t v4 = NSURLContentModificationDateKey;
  uint64_t v5 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v6);
  URL.resourceValues(forKeys:)(v5);
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 352), *(void *)(v0 + 336));
    swift_bridgeObjectRelease(v5);
LABEL_5:
    uint64_t v21 = *(void *)(v0 + 392);
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v22 = *(void *)(v0 + 368);
    uint64_t v24 = *(void *)(v0 + 352);
    uint64_t v26 = *(void *)(v0 + 320);
    uint64_t v25 = *(void *)(v0 + 328);
    uint64_t v27 = *(void *)(v0 + 312);
    uint64_t v28 = *(void *)(v0 + 288);
    uint64_t v29 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 400));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }

  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 272);
  uint64_t v13 = swift_bridgeObjectRelease(v5);
  URLResourceValues.contentModificationDate.getter(v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1LL, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 352);
    (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 32LL))( *(void *)(v0 + 328),  *(void *)(v0 + 264),  *(void *)(v0 + 296));
    uint64_t v16 = Data.init(contentsOf:options:)(v15, 8LL);
    unint64_t v18 = v17;
    unsigned __int8 v19 = sub_1000438CC();
    uint64_t v20 = sub_100044038(v16, v18, v19, v0 + 96);
    uint64_t v31 = v0 + 216;
    uint64_t v32 = *(void *)(v0 + 320);
    uint64_t v34 = *(void *)(v0 + 304);
    uint64_t v33 = *(void *)(v0 + 312);
    uint64_t v35 = *(void *)(v0 + 296);
    int v36 = *(_DWORD *)(v0 + 104);
    uint64_t v37 = Date.advanced(by:)(v20, (double)v36);
    static Date.now.getter(v37);
    char v38 = static Date.< infix(_:_:)(v32, v33);
    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    *(void *)(v0 + 424) = v39;
    v39(v33, v35);
    if ((v38 & 1) == 0)
    {
      int v119 = v36;
      os_log_type_t v110 = v39;
      uint64_t v52 = *(void *)(v0 + 384);
      uint64_t v51 = *(void *)(v0 + 392);
      uint64_t v53 = *(void *)(v0 + 376);
      uint64_t v54 = *(void *)(v0 + 360);
      uint64_t v55 = *(void *)(v0 + 256);
      uint64_t v111 = *(void *)(v0 + 248);
      uint64_t v113 = *(void *)(v0 + 240);
      uint64_t v56 = *(void *)(v0 + 96);
      uint64_t v57 = *(void *)(v0 + 120);
      uint64_t v118 = *(void *)(v0 + 112);
      uint64_t v58 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 304) + 16LL))( v51 + *(int *)(v53 + 20),  *(void *)(v0 + 320),  *(void *)(v0 + 296));
      uint64_t v59 = *(void *)(v0 + 128);
      __int128 v60 = *(_OWORD *)(v0 + 112);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v51 + swift_weakDestroy(v0 + 16) = v60;
      *(void *)(v51 + 32) = v59;
      sub_100030114(v51, v54, type metadata accessor for CachedStorebag);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v54, 0LL, 1LL, v53);
      uint64_t v61 = *(uint64_t (**)(uint64_t, __n128))(*(void *)v55 + 144LL);
      swift_bridgeObjectRetain(v111);
      uint64_t v115 = v56;
      swift_bridgeObjectRetain(v56);
      uint64_t v117 = v57;
      swift_bridgeObjectRetain(v57);
      uint64_t v116 = v58;
      __n128 v62 = swift_bridgeObjectRetain(v58);
      os_log_type_t v63 = (void (*)(uint64_t, void))v61(v0 + 136, v62);
      sub_10003AB8C(v54, v113, v111);
      v63(v0 + 136, 0LL);
      if (qword_10009C2E0 != -1) {
        swift_once(&qword_10009C2E0, sub_1000382F4);
      }
      uint64_t v64 = *(void *)(v0 + 248);
      uint64_t v65 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v65, (uint64_t)qword_10009EDA0);
      uint64_t v66 = swift_bridgeObjectRetain_n(v64, 2LL);
      uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      uint64_t v70 = *(void *)(v0 + 392);
      uint64_t v72 = *(void *)(v0 + 344);
      uint64_t v71 = *(void *)(v0 + 352);
      uint64_t v74 = *(void *)(v0 + 328);
      uint64_t v73 = *(void *)(v0 + 336);
      uint64_t v114 = *(void *)(v0 + 320);
      uint64_t v75 = *(void *)(v0 + 296);
      unint64_t v76 = *(void *)(v0 + 248);
      if (v69)
      {
        uint64_t v112 = *(void *)(v0 + 328);
        uint64_t v77 = *(void *)(v0 + 240);
        uint64_t v108 = *(void *)(v0 + 392);
        uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v109 = v71;
        uint64_t v79 = swift_slowAlloc(32LL, -1LL);
        v121[0] = v79;
        *(_DWORD *)uint64_t v78 = 136446210;
        swift_bridgeObjectRetain(v76);
        *(void *)(v0 + 208) = sub_100009984(v77, v76, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v78 + 4, v78 + 12);
        swift_bridgeObjectRelease_n(v76, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "storing storebag %{public}s in cache", v78, 0xCu);
        swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);

        sub_100015BF0(v108, type metadata accessor for CachedStorebag);
        v110(v114, v75);
        v110(v112, v75);
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v109, v73);
      }

      else
      {

        swift_bridgeObjectRelease_n(v76, 2LL);
        sub_100015BF0(v70, type metadata accessor for CachedStorebag);
        v110(v114, v75);
        v110(v74, v75);
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
      }

      uint64_t v91 = *(void *)(v0 + 392);
      uint64_t v93 = *(void *)(v0 + 360);
      uint64_t v92 = *(void *)(v0 + 368);
      uint64_t v94 = *(void *)(v0 + 352);
      uint64_t v96 = *(void *)(v0 + 320);
      uint64_t v95 = *(void *)(v0 + 328);
      uint64_t v97 = *(void *)(v0 + 312);
      uint64_t v98 = *(void *)(v0 + 288);
      uint64_t v120 = *(void *)(v0 + 264);
      uint64_t v99 = *(void *)(v0 + 232);
      swift_task_dealloc(*(void *)(v0 + 400));
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v120);
      *(void *)uint64_t v99 = v115;
      *(_DWORD *)(v99 + 8) = v119;
      *(void *)(v99 + swift_weakDestroy(v0 + 16) = v118;
      *(void *)(v99 + 24) = v117;
      *(void *)(v99 + 32) = v116;
      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }

    *(void *)(v0 + 184) = *(void *)(v0 + 96);
    sub_10002B00C((void *)(v0 + 184));
    *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 112);
    sub_10002AFE4(v0 + 168);
    *(void *)(v0 + 200) = *(void *)(v0 + 128);
    sub_10002B00C((void *)(v0 + 200));
    if (qword_10009C2E0 != -1) {
      swift_once(&qword_10009C2E0, sub_1000382F4);
    }
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v41, (uint64_t)qword_10009EDA0);
    uint64_t v42 = swift_bridgeObjectRetain_n(v40, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.default.getter(v43);
    BOOL v45 = os_log_type_enabled(v43, v44);
    unint64_t v46 = *(void *)(v0 + 248);
    if (v45)
    {
      uint64_t v47 = *(void *)(v0 + 240);
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v121[0] = v49;
      *(_DWORD *)uint64_t v48 = 136446210;
      swift_bridgeObjectRetain(v46);
      *(void *)(v0 + 224) = sub_100009984(v47, v46, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v46, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "removing expired storebag %{public}s", v48, 0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v50 = v49;
      uint64_t v31 = v0 + 216;
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 248), 2LL);
    }

    id v80 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v81);
    __n128 v83 = v82;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = 0LL;
    unsigned int v84 = [v80 removeItemAtURL:v82 error:v31];

    uint64_t v85 = *(void **)(v0 + 216);
    if (!v84)
    {
      uint64_t v100 = *(void *)(v0 + 344);
      uint64_t v101 = *(void *)(v0 + 352);
      uint64_t v103 = *(void *)(v0 + 328);
      uint64_t v102 = *(void *)(v0 + 336);
      uint64_t v104 = *(void *)(v0 + 320);
      uint64_t v105 = *(void *)(v0 + 296);
      id v106 = v85;
      _convertNSErrorToError(_:)(v85);

      swift_willThrow(v107);
      v39(v104, v105);
      v39(v103, v105);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v102);
      goto LABEL_5;
    }

    uint64_t v86 = *(int **)(**(void **)(v0 + 256) + 232LL);
    uint64_t v87 = v86[1];
    uint64_t v88 = *v86;
    id v89 = v85;
    BOOL v90 = (void *)swift_task_alloc(v87);
    *(void *)(v0 + 432) = v90;
    *BOOL v90 = v0;
    v90[1] = sub_10003A764;
    return ((uint64_t (*)(uint64_t, void, void))((char *)v86 + v88))( v0 + 56,  *(void *)(v0 + 240),  *(void *)(v0 + 248));
  }

  return result;
}

uint64_t sub_10003A764()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 432);
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10003AA6C;
  }
  else {
    uint64_t v4 = sub_10003A814;
  }
  return swift_task_switch(v4, *(void *)(v2 + 256));
}

uint64_t sub_10003A814()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  v1(*(void *)(v0 + 320), v6);
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v21 = *(void *)(v0 + 72);
  int v20 = *(_DWORD *)(v0 + 64);
  uint64_t v19 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 312);
  uint64_t v14 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 232);
  __int128 v18 = *(_OWORD *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  *(void *)uint64_t v15 = v19;
  *(_DWORD *)(v15 + 8) = v20;
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v21;
  *(_OWORD *)(v15 + 24) = v18;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A974()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003AA6C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  v1(*(void *)(v0 + 320), v6);
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v7 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 312);
  uint64_t v14 = *(void *)(v0 + 288);
  uint64_t v15 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003AB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100009FDC(&qword_100097290);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CachedStorebag(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_10000C234(a1, &qword_100097290);
    sub_10003B7A8(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    return sub_10000C234((uint64_t)v10, &qword_100097290);
  }

  else
  {
    sub_10003C218(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10003C05C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = *v4;
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v17);
  }

uint64_t sub_10003ACEC(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_100009FDC(&qword_1000963A0);
  v3[7] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003AD4C, v2);
}

uint64_t sub_10003AD4C()
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(v0 + 48) + 152LL);
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = v1();
  if (v2)
  {
    uint64_t v3 = v2;
    *(void *)(v0 + 72) = v2;
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to Task.result.getter[1]);
    *(void *)(v0 + 80) = v4;
    uint64_t v5 = sub_100009FDC(&qword_100098870);
    *uint64_t v4 = v0;
    v4[1] = sub_10003AF28;
    return Task.result.getter( v0 + 16,  v3,  &type metadata for ()[8],  v5,  &protocol self-conformance witness table for Error);
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v11 = os_transaction_create("com.apple.CloudTelemetryService.storebag-download");
    (*(void (**)(uint64_t))(*(void *)v8 + 184LL))(v11);
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 1LL, 1LL, v12);
    uint64_t v13 = sub_10000C5E8(&qword_100097588, type metadata accessor for StorebagCache, (uint64_t)&unk_100077E10);
    uint64_t v14 = (void *)swift_allocObject(&unk_10008FB70, 56LL, 7LL);
    void v14[2] = v8;
    v14[3] = v13;
    v14[4] = v8;
    v14[5] = v10;
    v14[6] = v9;
    swift_retain_n(v8, 2LL);
    swift_bridgeObjectRetain(v9);
    uint64_t v15 = sub_100008680(v7, (uint64_t)&unk_100097590, (uint64_t)v14);
    *(void *)(v0 + 88) = v15;
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v8 + 160LL);
    uint64_t v17 = swift_retain(v15);
    v16(v17);
    uint64_t v18 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 96) = v18;
    uint64_t v19 = sub_100009FDC(&qword_100098870);
    *uint64_t v18 = v0;
    v18[1] = sub_10003B160;
    return Task.value.getter( v19,  v15,  &type metadata for ()[8],  v19,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_10003AF28()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc(*(void *)(*v0 + 80));
  sub_10003CFB0(*(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
  return swift_task_switch(sub_10003AF88, v2);
}

uint64_t sub_10003AF88()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[8];
  uint64_t v2 = swift_release(v0[9]);
  uint64_t v3 = v1(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    v0[9] = v3;
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to Task.result.getter[1]);
    v0[10] = v5;
    uint64_t v6 = sub_100009FDC(&qword_100098870);
    void *v5 = v0;
    v5[1] = sub_10003AF28;
    return Task.result.getter( v0 + 2,  v4,  &type metadata for ()[8],  v6,  &protocol self-conformance witness table for Error);
  }

  else
  {
    uint64_t v9 = v0[6];
    uint64_t v8 = v0[7];
    uint64_t v11 = v0[4];
    uint64_t v10 = v0[5];
    uint64_t v12 = os_transaction_create("com.apple.CloudTelemetryService.storebag-download");
    (*(void (**)(uint64_t))(*(void *)v9 + 184LL))(v12);
    uint64_t v13 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
    uint64_t v14 = sub_10000C5E8(&qword_100097588, type metadata accessor for StorebagCache, (uint64_t)&unk_100077E10);
    uint64_t v15 = (void *)swift_allocObject(&unk_10008FB70, 56LL, 7LL);
    v15[2] = v9;
    v15[3] = v14;
    v15[4] = v9;
    v15[5] = v11;
    v15[6] = v10;
    swift_retain_n(v9, 2LL);
    swift_bridgeObjectRetain(v10);
    uint64_t v16 = sub_100008680(v8, (uint64_t)&unk_100097590, (uint64_t)v15);
    v0[11] = v16;
    uint64_t v17 = *(void (**)(uint64_t))(*(void *)v9 + 160LL);
    uint64_t v18 = swift_retain(v16);
    v17(v18);
    uint64_t v19 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[12] = v19;
    uint64_t v20 = sub_100009FDC(&qword_100098870);
    *uint64_t v19 = v0;
    v19[1] = sub_10003B160;
    return Task.value.getter( v20,  v16,  &type metadata for ()[8],  v20,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_10003B160()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10003B204;
  }
  else {
    uint64_t v4 = sub_10003B1C4;
  }
  return swift_task_switch(v4, *(void *)(v2 + 48));
}

uint64_t sub_10003B1C4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B204()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  _OWORD v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v8 = type metadata accessor for URL(0LL);
  v6[5] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[6] = v9;
  v6[7] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003B2AC, a4);
}

uint64_t sub_10003B2AC()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC21CloudTelemetryService13StorebagCache_storebagCloudKitSource);
  uint64_t v7 = v0[3];
  uint64_t v8 = v0[4];
  swift_bridgeObjectRetain(v8);
  v2._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  URL.appendingPathComponent(_:)(v7, v8);
  swift_bridgeObjectRelease(v8);
  uint64_t v3 = *(int **)(*(void *)v1 + 136LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10003B384;
  return ((uint64_t (*)(void, void, void))v6)(v0[3], v0[4], v0[7]);
}

uint64_t sub_10003B384()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v0) {
    uint64_t v7 = sub_10003B468;
  }
  else {
    uint64_t v7 = sub_10003B40C;
  }
  return swift_task_switch(v7, *(void *)(v2 + 16));
}

uint64_t sub_10003B40C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  (*(void (**)(void))(*(void *)v2 + 160LL))(0LL);
  (*(void (**)(void))(*(void *)v2 + 184LL))(0LL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B468()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  (*(void (**)(void))(*(void *)v2 + 160LL))(0LL);
  (*(void (**)(void))(*(void *)v2 + 184LL))(0LL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B4C4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100009FDC(&qword_100097290);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10009C2E0 != -1) {
    swift_once(&qword_10009C2E0, sub_1000382F4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v9, (uint64_t)qword_10009EDA0);
  uint64_t v10 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v19[0] = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_100009984(a1, a2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "evicting storebag %{public}s from cache", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v15 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v3 + 144LL))(v19);
  sub_10003B7A8(a1, a2, (uint64_t)v8);
  sub_10000C234((uint64_t)v8, &qword_100097290);
  return v15(v19, 0LL);
}

uint64_t sub_10003B6EC()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC21CloudTelemetryService13StorebagCache_storebagCacheURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)((char *)v0 + OBJC_IVAR____TtC21CloudTelemetryService13StorebagCache_storebagCloudKitSource));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StorebagCache(uint64_t a1)
{
  return sub_10003B774(a1, (uint64_t *)&unk_10009C490, (uint64_t)&nominal type descriptor for StorebagCache);
}

uint64_t sub_10003B774(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_10003B7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100010540(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003BE28();
      uint64_t v12 = v19;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56);
    uint64_t v14 = type metadata accessor for CachedStorebag(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_10003C218(v13 + *(void *)(v15 + 72) * v9, a3);
    sub_10003BC2C(v9, v12);
    uint64_t v16 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for CachedStorebag(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

Swift::Int sub_10003B8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CachedStorebag(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100009FDC(&qword_100097578);
  int v43 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  unint64_t v39 = v3;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      goto LABEL_36;
    }
    unint64_t v24 = v41[v23];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v24 = v41[v18];
      if (!v24) {
        break;
      }
    }

unint64_t sub_10003BC2C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *unint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for CachedStorebag(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        Swift::Int result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront(result, v22);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

void sub_10003BE28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CachedStorebag(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100009FDC(&qword_100097578);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return;
  }

  uint64_t v28 = v1;
  unint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

void sub_10003C05C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for CachedStorebag(0LL) - 8) + 72LL) * v12;
        sub_10003CED8(a1, v20);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10003BE28();
      goto LABEL_7;
    }

    sub_10003B8D0(v15, a4 & 1);
    unint64_t v21 = sub_100010540(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10003C190(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10003C190(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for CachedStorebag(0LL);
  uint64_t result = sub_10003C218(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_10003C218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedStorebag(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C25C()
{
  return sub_10000C5E8(&qword_100097288, type metadata accessor for CacheError, (uint64_t)&unk_100077DD0);
}

uint64_t sub_10003C288(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = a2[3];
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }

  return v5;
}

uint64_t sub_10003C350(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_10003C3A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[4];
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t *sub_10003C448(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_10003C4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10003C560(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_10003C5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C600);
}

uint64_t sub_10003C600(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_10003C67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C688);
}

char *sub_10003C688(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10003C6FC(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10003C770(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v11 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v12 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v13 = *a2;
        swift_errorRetain(v13);
        *a1 = v13;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_10003C8CC(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      uint64_t v4 = type metadata accessor for CocoaError(0LL);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 3:
      uint64_t result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }

  return result;
}

void *sub_10003C944(void *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 1u:
      uint64_t v10 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v11 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v12 = *a2;
      swift_errorRetain(v12);
      *a1 = v12;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *sub_10003CA6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for CacheError);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 1u:
        uint64_t v10 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v11 = type metadata accessor for CocoaError(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v12 = *a2;
        swift_errorRetain(v12);
        *a1 = v12;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *sub_10003CBAC(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for CocoaError(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = type metadata accessor for CocoaError(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for CocoaError(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_10003CCAC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for CacheError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for CocoaError(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10003CDC4(uint64_t a1)
{
  uint64_t result = type metadata accessor for CocoaError(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    v4[3] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_10003CE34()
{
  return type metadata accessor for StorebagCache(0LL);
}

uint64_t sub_10003CE3C(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = &unk_100077ED8;
  v4[3] = &unk_100077ED8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003CED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedStorebag(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CF1C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10003CF50()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_100097584);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A560;
  return sub_10003B244((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10003CFB0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10003CFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_1000975A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL static Mode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Mode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Mode.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t variable initialization expression of Daemon.clientBundleID()
{
  return 0LL;
}

uint64_t Daemon.disabled.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t Daemon.disabled.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*Daemon.disabled.modify())()
{
  return XPCIncomingConnection.init(conn:);
}

uint64_t sub_10003D0A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EDC8);
  sub_100009FC4(v0, (uint64_t)qword_10009EDC8);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x6E6F6D656164LL,  0xE600000000000000LL);
}

uint64_t sub_10003D118()
{
  if (qword_10009C4A0 != -1) {
    swift_once(&qword_10009C4A0, sub_10003D0A8);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return sub_100009FC4(v0, (uint64_t)qword_10009EDC8);
}

uint64_t sub_10003D160()
{
  uint64_t result = os_variant_has_internal_diagnostics("com.apple.CloudTelemetry");
  byte_10009EDE0 = result;
  return result;
}

char *sub_10003D184()
{
  if (qword_10009C4A8 != -1) {
    swift_once(&qword_10009C4A8, sub_10003D160);
  }
  return &byte_10009EDE0;
}

void sub_10003D1C4()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2) {
    qword_10009EDE8 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

uint64_t *sub_10003D238()
{
  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  return &qword_10009EDE8;
}

void sub_10003D278()
{
  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v3, 0LL, 0LL);
  id v0 = (id)qword_10009EDE8;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 BOOLForKey:v1];

  byte_10009EDF0 = v2;
}

char *sub_10003D338()
{
  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  return &byte_10009EDF0;
}

void sub_10003D378()
{
  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v7, 0LL, 0LL);
  id v0 = (id)qword_10009EDE8;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 BOOLForKey:v1];

  if ((v2 & 1) != 0)
  {
    BOOL v3 = 1;
  }

  else
  {
    id v4 = (id)qword_10009EDE8;
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 integerForKey:v5];

    BOOL v3 = v6 == (id)5;
  }

  byte_10009EDF1 = v3;
}

char *sub_10003D4A4()
{
  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  return &byte_10009EDF1;
}

void sub_10003D4E4()
{
  if (qword_10009C4A8 != -1) {
    swift_once(&qword_10009C4A8, sub_10003D160);
  }
  swift_beginAccess(&byte_10009EDE0, v4, 0LL, 0LL);
  if (byte_10009EDE0 == 1)
  {
    if (qword_10009C4B0 != -1) {
      swift_once(&qword_10009C4B0, sub_10003D1C4);
    }
    swift_beginAccess(&qword_10009EDE8, &v3, 0LL, 0LL);
    id v0 = (id)qword_10009EDE8;
    NSString v1 = String._bridgeToObjectiveC()();
    unsigned __int8 v2 = [v0 BOOLForKey:v1];
  }

  else
  {
    unsigned __int8 v2 = 0;
  }

  byte_10009EDF2 = v2;
}

char *sub_10003D5FC()
{
  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  return &byte_10009EDF2;
}

uint64_t sub_10003D63C()
{
  return DiagnosticLogSubmissionEnabled();
}

void sub_10003D650()
{
  if (!*(_BYTE *)v0)
  {
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    id v6 = [(id)objc_opt_self(NSBundle) mainBundle];
    id v7 = [v6 bundleIdentifier];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;

      v11._uint64_t countAndFlagsBits = v8;
      v11._object = v10;
      String.append(_:)(v11);
      NSString v5 = v10;
      goto LABEL_7;
    }

    goto LABEL_10;
  }

  if (*(_BYTE *)v0 == 1)
  {
    _StringGuts.grow(_:)(54LL);
    v1._uint64_t countAndFlagsBits = 0xD000000000000033LL;
    v1._object = (void *)0x800000010007BA40LL;
    String.append(_:)(v1);
    unsigned __int8 v2 = *(void **)(v0 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v0 + 8);
      swift_bridgeObjectRetain(v2);
      v4._uint64_t countAndFlagsBits = v3;
      v4._object = v2;
      String.append(_:)(v4);
      NSString v5 = v2;
LABEL_7:
      swift_bridgeObjectRelease(v5);
      v12._uint64_t countAndFlagsBits = 47LL;
      v12._object = (void *)0xE100000000000000LL;
      String.append(_:)(v12);
      return;
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

void sub_10003D7CC()
{
  if (!*(_BYTE *)v0)
  {
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    id v6 = [(id)objc_opt_self(NSBundle) mainBundle];
    id v7 = [v6 bundleIdentifier];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;

      v11._uint64_t countAndFlagsBits = v8;
      v11._object = v10;
      String.append(_:)(v11);
      NSString v5 = v10;
      goto LABEL_7;
    }

    goto LABEL_10;
  }

  if (*(_BYTE *)v0 == 1)
  {
    _StringGuts.grow(_:)(52LL);
    v1._uint64_t countAndFlagsBits = 0xD000000000000031LL;
    v1._object = (void *)0x800000010007BAE0LL;
    String.append(_:)(v1);
    unsigned __int8 v2 = *(void **)(v0 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v0 + 8);
      swift_bridgeObjectRetain(v2);
      v4._uint64_t countAndFlagsBits = v3;
      v4._object = v2;
      String.append(_:)(v4);
      NSString v5 = v2;
LABEL_7:
      swift_bridgeObjectRelease(v5);
      v12._uint64_t countAndFlagsBits = 47LL;
      v12._object = (void *)0xE100000000000000LL;
      String.append(_:)(v12);
      return;
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

id sub_10003D948@<X0>(char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v93 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v94 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v99 = (char *)&v87 - v6;
  uint64_t v98 = type metadata accessor for CocoaError(0LL);
  uint64_t v100 = *(void *)(v98 - 8);
  uint64_t v7 = __chkstk_darwin(v98);
  uint64_t v90 = (uint64_t)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  id v89 = (char *)&v87 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v87 - v12;
  __chkstk_darwin(v11);
  uint64_t v96 = (char *)&v87 - v13;
  uint64_t v14 = sub_100009FDC(&qword_100096BC8);
  __chkstk_darwin(v14);
  char v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v97 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  char v22 = (char *)&v87 - v21;
  sub_10001F7EC();
  sub_10003D7CC();
  uint64_t v24 = v23;
  URL.appendingPathComponent(_:isDirectory:)(v25, v23, 1LL);
  swift_bridgeObjectRelease(v24);
  uint64_t v101 = *(void (**)(char *, uint64_t))(v18 + 8);
  v101(v22, v17);
  uint64_t v26 = sub_100009FDC(&qword_1000963C0);
  uint64_t inited = swift_initStackObject(v26, v106);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v28 = NSURLIsDirectoryKey;
  uint64_t v29 = sub_10000C008(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v30);
  uint64_t v102 = a1;
  URL.resourceValues(forKeys:)(v29);
  if (v1)
  {
    swift_errorRelease(v1);
    swift_bridgeObjectRelease(v29);
    uint64_t v31 = type metadata accessor for URLResourceValues(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v16, 1LL, 1LL, v31);
LABEL_5:
    sub_10000C234((uint64_t)v16, &qword_100096BC8);
    goto LABEL_6;
  }

  uint64_t v32 = v17;
  swift_bridgeObjectRelease(v29);
  uint64_t v33 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0LL, 1LL, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1LL, v33) == 1)
  {
    uint64_t v17 = v32;
    goto LABEL_5;
  }

  char v70 = URLResourceValues.isDirectory.getter();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v33);
  uint64_t v17 = v32;
  if ((v70 & 1) == 0)
  {
LABEL_6:
    if (qword_10009C4A0 != -1) {
      swift_once(&qword_10009C4A0, sub_10003D0A8);
    }
    uint64_t v95 = 0LL;
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v35, (uint64_t)qword_10009EDC8);
    BOOL v36 = v97;
    uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 16))(v97, v102, v17);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v91 = v3;
    if (v40)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = (void *)swift_slowAlloc(32LL, -1LL);
      id v105 = v42;
      *(_DWORD *)uint64_t v41 = 136446210;
      uint64_t v43 = URL.path.getter(v42);
      unint64_t v45 = v44;
      uint64_t v104 = sub_100009984(v43, v44, (uint64_t *)&v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v45);
      v101(v36, v17);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "creating log directory at %{public}s", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      v101(v36, v17);
    }

    uint64_t v46 = v98;
    uint64_t v47 = v100;
    id v48 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v49);
    uint64_t v51 = v50;
    id v105 = 0LL;
    unsigned int v52 = [v48 createDirectoryAtURL:v50 withIntermediateDirectories:1 attributes:0 error:&v105];

    id v53 = v105;
    uint64_t v54 = v99;
    if (v52) {
      return v105;
    }
    id v56 = v105;
    uint64_t v57 = (void *)_convertNSErrorToError(_:)(v53);

    swift_willThrow(v58);
    id v105 = v57;
    swift_errorRetain(v57);
    uint64_t v59 = sub_100009FDC(&qword_100098870);
    __int128 v60 = v96;
    if (swift_dynamicCast(v96, &v105, v59, v46, 0LL))
    {
      uint64_t v98 = v17;
      uint64_t v61 = (uint64_t)v92;
      uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
      v88(v92, v60, v46);
      uint64_t v97 = (char *)sub_10000C5E8( &qword_1000961C8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
      uint64_t v62 = _BridgedStoredNSError.code.getter(v46);
      os_log_type_t v63 = v94;
      static CocoaError.fileWriteNoPermission.getter(v62);
      uint64_t v64 = sub_10000C5E8( &qword_1000961D0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      uint64_t v65 = v91;
      dispatch thunk of RawRepresentable.rawValue.getter(&v104, v91, v64);
      uint64_t v95 = v64;
      dispatch thunk of RawRepresentable.rawValue.getter(&v103, v65, v64);
      uint64_t v67 = v103;
      uint64_t v66 = v104;
      os_log_type_t v68 = *(void (**)(char *, uint64_t))(v93 + 8);
      v68(v63, v65);
      v68(v54, v65);
      if (v66 == v67)
      {
        swift_errorRelease(v57);
        sub_100037D94(v61);
        BOOL v69 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
        v69(v61, v46);
LABEL_20:
        v101(v102, v98);
        v69((uint64_t)v96, v46);
LABEL_21:
        id v78 = v105;
        return (id)swift_errorRelease(v78);
      }

      uint64_t v93 = *(void *)(v100 + 8);
      ((void (*)(uint64_t, uint64_t))v93)(v61, v46);
      uint64_t v71 = v89;
      v88(v89, v96, v46);
      uint64_t v72 = v99;
      uint64_t v73 = (uint64_t)v71;
      uint64_t v74 = _BridgedStoredNSError.code.getter(v46);
      static CocoaError.fileWriteOutOfSpace.getter(v74);
      uint64_t v75 = v95;
      dispatch thunk of RawRepresentable.rawValue.getter(&v104, v65, v95);
      dispatch thunk of RawRepresentable.rawValue.getter(&v103, v65, v75);
      uint64_t v76 = v103;
      uint64_t v77 = v104;
      v68(v63, v65);
      v68(v72, v65);
      if (v77 == v76)
      {
        swift_errorRelease(v57);
        sub_100037D74(v73);
        BOOL v69 = (void (*)(uint64_t, uint64_t))v93;
        ((void (*)(uint64_t, uint64_t))v93)(v73, v46);
        goto LABEL_20;
      }

      uint64_t v79 = v73;
      id v80 = (void (*)(uint64_t, uint64_t))v93;
      ((void (*)(uint64_t, uint64_t))v93)(v79, v46);
      uint64_t v81 = v63;
      (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v90, v96, v46);
      uint64_t v82 = _BridgedStoredNSError.code.getter(v46);
      static CocoaError.fileWriteUnknown.getter(v82);
      uint64_t v83 = v95;
      dispatch thunk of RawRepresentable.rawValue.getter(&v104, v65, v95);
      dispatch thunk of RawRepresentable.rawValue.getter(&v103, v65, v83);
      uint64_t v85 = v103;
      uint64_t v84 = v104;
      v68(v81, v65);
      v68(v72, v65);
      if (v84 == v85)
      {
        swift_errorRelease(v57);
        uint64_t v86 = v90;
        sub_100037DB4(v90);
        v80(v86, v46);
        v101(v102, v98);
        goto LABEL_21;
      }

      v80(v90, v46);
      uint64_t v17 = v98;
    }

    swift_errorRelease(v105);
    sub_100038090((uint64_t)v57);
    v101(v102, v17);
    id v78 = v57;
    return (id)swift_errorRelease(v78);
  }

  return result;
}

uint64_t sub_10003E250()
{
  uint64_t v0 = sub_100009FDC(&qword_1000975F8);
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(_DWORD *)(result + memset(&strm.total_in, 0, 20) = 0;
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
  qword_10009EDF8 = result;
  return result;
}

void sub_10003E288(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v89 = a1;
  uint64_t v92 = a4;
  uint64_t v7 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v86 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v79 - v10;
  uint64_t v87 = type metadata accessor for CocoaError(0LL);
  uint64_t v90 = *(void *)(v87 - 8);
  uint64_t v11 = __chkstk_darwin(v87);
  id v80 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v79 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v79 - v17;
  __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v79 - v18;
  uint64_t v19 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v84 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100009FDC(&qword_100096BC8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10009C4D0 != -1) {
    swift_once(&qword_10009C4D0, sub_10003E250);
  }
  uint64_t v81 = v15;
  uint64_t v83 = v7;
  swift_beginAccess(&qword_10009EDF8, v98, 0LL, 0LL);
  uint64_t v25 = qword_10009EDF8;
  uint64_t v26 = (os_unfair_lock_s *)(qword_10009EDF8 + 20);
  swift_retain(qword_10009EDF8);
  os_unfair_lock_lock(v26);
  if (v4)
  {
    os_unfair_lock_unlock(v26);
    __break(1u);
  }

  else
  {
    char v27 = *(_BYTE *)(v25 + 16);
    os_unfair_lock_unlock(v26);
    swift_release(v25);
    if ((v27 & 1) != 0)
    {
      sub_100037C20();
      return;
    }

    id v95 = a2;
    uint64_t v96 = a3;
    swift_bridgeObjectRetain(a3);
    v28._uint64_t countAndFlagsBits = 47LL;
    v28._object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    uint64_t v29 = v96;
    uint64_t v30 = v92;
    URL.appendingPathComponent(_:isDirectory:)(v95, v96, 1LL);
    swift_bridgeObjectRelease(v29);
    uint64_t v31 = sub_100009FDC(&qword_1000963C0);
    uint64_t inited = swift_initStackObject(v31, v97);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
    *(void *)(inited + 32) = NSURLIsDirectoryKey;
    uint64_t v33 = NSURLIsDirectoryKey;
    uint64_t v34 = sub_10000C008(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey();
    swift_arrayDestroy(inited + 32, 1LL, v35);
    URL.resourceValues(forKeys:)(v34);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v24, 0LL, 1LL, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v24, 1LL, v19) == 1)
    {
      sub_10000C234((uint64_t)v24, &qword_100096BC8);
      goto LABEL_8;
    }

    char v62 = URLResourceValues.isDirectory.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v19);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      id v36 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL._bridgeToObjectiveC()(v37);
      os_log_type_t v39 = v38;
      id v95 = 0LL;
      unsigned int v40 = [v36 createDirectoryAtURL:v38 withIntermediateDirectories:1 attributes:0 error:&v95];

      id v41 = v95;
      if (v40)
      {
        id v42 = v95;
        uint64_t v43 = v84;
        URLResourceValues.init()(v42);
        URLResourceValues.isExcludedFromBackup.setter(1LL);
        URL.setResourceValues(_:)(v43);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v43, v19);
        return;
      }

      id v44 = v95;
      unint64_t v45 = (void *)_convertNSErrorToError(_:)(v41);

      swift_willThrow(v46);
      uint64_t v47 = (uint64_t)v88;
      id v95 = v45;
      swift_errorRetain(v45);
      uint64_t v48 = sub_100009FDC(&qword_100098870);
      uint64_t v49 = v91;
      uint64_t v50 = v87;
      int v51 = swift_dynamicCast(v91, &v95, v48, v87, 0LL);
      id v53 = v85;
      unsigned int v52 = v86;
      if (v51)
      {
        uint64_t v89 = 0LL;
        uint64_t v79 = *(void (**)(uint64_t, char *, uint64_t))(v90 + 16);
        v79(v47, v49, v50);
        uint64_t v88 = (char *)sub_10000C5E8( &qword_1000961C8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
        uint64_t v54 = _BridgedStoredNSError.code.getter(v50);
        static CocoaError.fileWriteNoPermission.getter(v54);
        uint64_t v55 = sub_10000C5E8( &qword_1000961D0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
        uint64_t v56 = v83;
        dispatch thunk of RawRepresentable.rawValue.getter(&v94, v83, v55);
        uint64_t v84 = (char *)v55;
        dispatch thunk of RawRepresentable.rawValue.getter(&v93, v56, v55);
        uint64_t v58 = v93;
        uint64_t v57 = v94;
        uint64_t v59 = *(void (**)(char *, uint64_t))(v82 + 8);
        v59(v52, v56);
        v59(v53, v56);
        if (v57 == v58)
        {
          swift_errorRelease(v45);
          sub_100037D94(v47);
          __int128 v60 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
          v60(v47, v50);
          uint64_t v61 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8LL))(v92, v61);
          v60((uint64_t)v91, v50);
LABEL_19:
          id v77 = v95;
LABEL_22:
          swift_errorRelease(v77);
          return;
        }

        uint64_t v82 = *(void *)(v90 + 8);
        ((void (*)(uint64_t, uint64_t))v82)(v47, v50);
        uint64_t v63 = (uint64_t)v81;
        v79((uint64_t)v81, v91, v50);
        uint64_t v64 = v63;
        uint64_t v65 = _BridgedStoredNSError.code.getter(v50);
        static CocoaError.fileWriteOutOfSpace.getter(v65);
        uint64_t v66 = v84;
        dispatch thunk of RawRepresentable.rawValue.getter(&v94, v56, v84);
        dispatch thunk of RawRepresentable.rawValue.getter(&v93, v56, v66);
        uint64_t v68 = v93;
        uint64_t v67 = v94;
        v59(v52, v56);
        v59(v53, v56);
        if (v67 == v68)
        {
          swift_errorRelease(v45);
          sub_100037D74(v64);
          BOOL v69 = (void (*)(char *, uint64_t))v82;
          ((void (*)(uint64_t, uint64_t))v82)(v64, v50);
          uint64_t v70 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8LL))(v92, v70);
          v69(v91, v50);
          goto LABEL_19;
        }

        ((void (*)(uint64_t, uint64_t))v82)(v64, v50);
        uint64_t v71 = (uint64_t)v80;
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v80, v91, v50);
        uint64_t v72 = _BridgedStoredNSError.code.getter(v50);
        static CocoaError.fileWriteUnknown.getter(v72);
        uint64_t v73 = v84;
        dispatch thunk of RawRepresentable.rawValue.getter(&v94, v56, v84);
        dispatch thunk of RawRepresentable.rawValue.getter(&v93, v56, v73);
        uint64_t v75 = v93;
        uint64_t v74 = v94;
        v59(v52, v56);
        v59(v53, v56);
        if (v74 == v75)
        {
          swift_errorRelease(v45);
          sub_100037DB4(v71);
          ((void (*)(uint64_t, uint64_t))v82)(v71, v50);
          uint64_t v76 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8LL))(v92, v76);
          goto LABEL_19;
        }

        ((void (*)(uint64_t, uint64_t))v82)(v71, v50);
        uint64_t v30 = v92;
      }

      swift_errorRelease(v95);
      sub_100038090((uint64_t)v45);
      uint64_t v78 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8LL))(v30, v78);
      id v77 = v45;
      goto LABEL_22;
    }
  }

uint64_t Daemon.init(mode:clientBundleID:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 584) = a4;
  *(void *)(v4 + 576) = a3;
  *(_BYTE *)(v4 + 76) = a2;
  *(void *)(v4 + 568) = a1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  *(void *)(v4 + 592) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 600) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 608) = swift_task_alloc(v7);
  *(void *)(v4 + 6swift_weakDestroy(v0 + 16) = swift_task_alloc(v7);
  *(void *)(v4 + 624) = swift_task_alloc(v7);
  *(void *)(v4 + 632) = swift_task_alloc(v7);
  *(void *)(v4 + 640) = swift_task_alloc(v7);
  *(void *)(v4 + 648) = swift_task_alloc(v7);
  *(void *)(v4 + 656) = swift_task_alloc(v7);
  return swift_task_switch(sub_10003EC44, 0LL);
}

uint64_t sub_10003EC44()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = qword_10009C4A0;
  swift_bridgeObjectRetain(v1);
  if (v2 != -1) {
    swift_once(&qword_10009C4A0, sub_10003D0A8);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_100009FC4(v3, (uint64_t)qword_10009EDC8);
  *(void *)(v0 + 664) = v4;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "starting CloudTelemetryService", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v0 + 656);
  uint64_t v9 = *(void *)(v0 + 600);
  uint64_t v10 = *(void *)(v0 + 592);

  *(_BYTE *)(v0 + 872) = 0;
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  *(void *)(v0 + 672) = v11;
  id v12 = [v11 defaultManager];
  sub_10001F7EC();
  object = URL.path(percentEncoded:)(1)._object;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(void *)(v0 + 680) = v14;
  v14(v8, v10);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(v8) = [v12 fileExistsAtPath:v15];

  if ((v8 & 1) != 0)
  {
    uint64_t v17 = *(char **)(v0 + 648);
    *(_BYTE *)(v0 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v0 + 76);
    *(_OWORD *)(v0 + 24) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 0;
    swift_bridgeObjectRetain(v1);
    sub_10003D948(v17);
    swift_bridgeObjectRelease(v1);
    type metadata accessor for TransparencyLog(0LL);
    id v36 = (void *)swift_task_alloc(dword_1000961BC);
    *(void *)(v0 + 688) = v36;
    void *v36 = v0;
    v36[1] = sub_10003F7A0;
    return sub_100006AA4(*(void *)(v0 + 648));
  }

  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = *(void *)(v0 + 656);
    uint64_t v72 = *(void *)(v0 + 592);
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = v22;
    *(_DWORD *)uint64_t v21 = 136380675;
    sub_10001F7EC();
    Swift::String v23 = URL.path(percentEncoded:)(1);
    v14(v20, v72);
    *(void *)(v0 + 528) = sub_100009984(v23._countAndFlagsBits, (unint64_t)v23._object, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v23._object);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "reporting disabled due to missing home directory: %{private}s",  v21,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  *(_BYTE *)(v0 + 872) = 1;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v25, v26))
  {
    char v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "reporting disabled due to startup failure.", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  *(_BYTE *)(v0 + 872) = 1;
  *(_OWORD *)(v0 + 776) = 0u;
  *(_OWORD *)(v0 + 792) = 0u;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    Swift::String v28 = XPCActivity.makeHandler.unsafeMutableAddressor();
    uint64_t v29 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    void v29[3] = 0LL;
    v29[4] = 0LL;
    v29[2] = 0LL;
    swift_beginAccess(v28, v0 + 368, 1LL, 0LL);
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    *Swift::String v28 = (uint64_t)&unk_1000975B8;
    v28[1] = (uint64_t)v29;
    sub_100028AAC(v30, v31);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v32 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0) {
        uint64_t v38 = v32;
      }
      else {
        uint64_t v38 = v32 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v32);
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v38);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v33;
      if (v33) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v32);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v33;
      if (v33)
      {
LABEL_16:
        if (v33 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v34 = *(void *)(v0 + 808);
        if ((v34 & 0xC000000000000001LL) != 0)
        {
          uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v34);
        }

        else
        {
          uint64_t v35 = *(void *)(v34 + 32);
          swift_retain(v35);
        }

        *(void *)(v0 + 832) = v35;
        *(_BYTE *)(v0 + 77) = *(_BYTE *)(v0 + 872);
        *(void *)(v0 + 840) = *(void *)(*(void *)v35 + 160LL);
        return swift_task_switch(sub_100040ABC, v35);
      }
    }

    uint64_t v39 = *(void *)(v0 + 800);
    uint64_t v40 = *(void *)(v0 + 792);
    uint64_t v41 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v39);
    swift_release(v41);
    swift_release(v40);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v76, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v77);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v42 = (id)qword_10009EDE8;
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v42 valueForKey:v43];

  if (v44)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v44);
    swift_unknownObjectRelease(v44);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v76, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v77);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v76, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v77);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v76, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v77);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v47 = static os_log_type_t.default.getter(v46);
  BOOL v48 = os_log_type_enabled(v46, v47);
  uint64_t v49 = *(void *)(v0 + 792);
  uint64_t v50 = *(void *)(v0 + 784);
  if (v48)
  {
    uint64_t v73 = *(void *)(v0 + 784);
    int v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = v52;
    *(_DWORD *)int v51 = 136315138;
    uint64_t v53 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v70 = v49;
    unint64_t v55 = v54;
    *(void *)(v0 + 488) = sub_100009984(v53, v54, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "started CloudTelemetryService%s", v51, 0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);

    swift_release(v70);
    uint64_t v56 = v73;
  }

  else
  {
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);

    swift_release(v49);
    uint64_t v56 = v50;
  }

  swift_release(v56);
  uint64_t v57 = *(void *)(v0 + 800);
  uint64_t v71 = *(void *)(v0 + 792);
  uint64_t v74 = *(void *)(v0 + 784);
  uint64_t v58 = *(void *)(v0 + 656);
  uint64_t v59 = *(void *)(v0 + 648);
  uint64_t v60 = *(void *)(v0 + 640);
  uint64_t v61 = *(void *)(v0 + 632);
  uint64_t v62 = *(void *)(v0 + 624);
  uint64_t v63 = *(void *)(v0 + 616);
  uint64_t v67 = *(void *)(v0 + 608);
  uint64_t v64 = *(void *)(v0 + 584);
  uint64_t v68 = *(void *)(v0 + 576);
  uint64_t v69 = *(void *)(v0 + 776);
  char v66 = *(_BYTE *)(v0 + 76);
  uint64_t v65 = *(void *)(v0 + 568);
  char v75 = *(_BYTE *)(v0 + 872);
  swift_retain(v57);
  swift_bridgeObjectRelease(v64);
  swift_release(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v67);
  *(_BYTE *)uint64_t v65 = v66;
  *(void *)(v65 + 8) = v68;
  *(void *)(v65 + swift_weakDestroy(v0 + 16) = v64;
  *(void *)(v65 + 24) = v71;
  *(void *)(v65 + 32) = v69;
  *(void *)(v65 + 40) = v57;
  *(void *)(v65 + 48) = v74;
  *(_BYTE *)(v65 + 56) = v75;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F7A0(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 688));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_1000410F8;
  }

  else
  {
    *(void *)(v4 + 696) = a1;
    uint64_t v5 = sub_10003F85C;
  }

  return swift_task_switch(v5, 0LL);
}

uint64_t sub_10003F85C()
{
  uint64_t v1 = *(void *)(v0 + 696);
  *(void *)(v0 + 704) = v1;
  id v12 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 576);
  char v6 = *(_BYTE *)(v0 + 76);
  *(void *)(v0 + 712) = type metadata accessor for DiskCache();
  *(_BYTE *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v5;
  *(void *)(v0 + 96) = v4;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 1memset(&strm.total_in, 0, 20) = 0u;
  *(_BYTE *)(v0 + 136) = 0;
  swift_retain(v1);
  swift_bridgeObjectRetain(v4);
  sub_10001F7EC();
  sub_10003D650();
  uint64_t v8 = v7;
  URL.appendingPathComponent(_:)(v9, v7);
  swift_bridgeObjectRelease(v8);
  v12(v2, v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v10 = (void *)swift_task_alloc(dword_100096BBC);
  *(void *)(v0 + 7memset(&strm.total_in, 0, 20) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10003F99C;
  return DiskCache.__allocating_init(rootCacheURL:)(*(void *)(v0 + 640));
}

uint64_t sub_10003F99C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 720);
  *(void *)(*v2 + 728) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    char v6 = sub_100041B44;
  }

  else
  {
    *(void *)(v4 + 736) = a1;
    char v6 = sub_10003FA54;
  }

  return swift_task_switch(v6, 0LL);
}

uint64_t sub_10003FA54()
{
  uint64_t v1 = (_BYTE *)(v0 + 872);
  uint64_t v2 = *(void *)(v0 + 736);
  *(void *)(v0 + 744) = v2;
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = swift_retain(v2);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v6 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "reporting disabled due to startup failure.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    *uint64_t v1 = 1;
  }

  else if ((*v1 & 1) == 0)
  {
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    uint64_t v17 = *(void *)(v0 + 656);
    uint64_t v18 = *(void *)(v0 + 592);
    uint64_t v19 = *(void *)(v0 + 584);
    uint64_t v20 = *(void *)(v0 + 576);
    char v21 = *(_BYTE *)(v0 + 76);
    type metadata accessor for SessionCoordinator();
    *(_BYTE *)(v0 + 272) = v21;
    *(void *)(v0 + 280) = v20;
    *(void *)(v0 + 288) = v19;
    *(void *)(v0 + 296) = v2;
    *(void *)(v0 + 304) = 0LL;
    *(void *)(v0 + 312) = 0LL;
    *(void *)(v0 + 3memset(&strm.total_in, 0, 20) = v3;
    *(_BYTE *)(v0 + 328) = 0;
    swift_retain_n(v2, 2LL);
    swift_bridgeObjectRetain(v19);
    swift_retain(v3);
    sub_10001F7EC();
    sub_10003D650();
    uint64_t v23 = v22;
    URL.appendingPathComponent(_:)(v24, v22);
    swift_bridgeObjectRelease(v23);
    v63(v17, v18);
    swift_bridgeObjectRelease(v19);
    swift_release(v2);
    swift_release(v3);
    uint64_t v25 = (void *)swift_task_alloc(dword_100096864);
    *(void *)(v0 + 752) = v25;
    void *v25 = v0;
    v25[1] = sub_1000402C0;
    return sub_1000164A8(0, v2, *(void *)(v0 + 632));
  }

  *(void *)(v0 + 800) = 0LL;
  *(void *)(v0 + 792) = v2;
  *(void *)(v0 + 784) = v3;
  *(void *)(v0 + 776) = 0LL;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    uint64_t v9 = XPCActivity.makeHandler.unsafeMutableAddressor();
    uint64_t v10 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    v10[3] = 0LL;
    v10[4] = 0LL;
    v10[2] = v2;
    swift_beginAccess(v9, v0 + 368, 1LL, 0LL);
    uint64_t v11 = *v9;
    uint64_t v12 = v9[1];
    uint64_t *v9 = (uint64_t)&unk_1000975B8;
    v9[1] = (uint64_t)v10;
    swift_retain_n(v2, 2LL);
    sub_100028AAC(v11, v12);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v13 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0) {
        uint64_t v27 = v13;
      }
      else {
        uint64_t v27 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v13);
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v27);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v14;
      if (v14) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v13);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v14;
      if (v14)
      {
LABEL_15:
        if (v14 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v15 = *(void *)(v0 + 808);
        if ((v15 & 0xC000000000000001LL) != 0)
        {
          uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
        }

        else
        {
          uint64_t v16 = *(void *)(v15 + 32);
          swift_retain(v16);
        }

        *(void *)(v0 + 832) = v16;
        *(_BYTE *)(v0 + 77) = *v1;
        *(void *)(v0 + 840) = *(void *)(*(void *)v16 + 160LL);
        return swift_task_switch(sub_100040ABC, v16);
      }
    }

    uint64_t v28 = *(void *)(v0 + 800);
    uint64_t v29 = *(void *)(v0 + 792);
    uint64_t v30 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v28);
    swift_release(v30);
    swift_release(v29);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v65, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v66);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v31 = (id)qword_10009EDE8;
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 valueForKey:v32];

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v33);
    swift_unknownObjectRelease(v33);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v65, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v66);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v65, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v66);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v65, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v66);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = *(void *)(v0 + 792);
  uint64_t v39 = *(void *)(v0 + 784);
  if (v37)
  {
    uint64_t v61 = *(void *)(v0 + 784);
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v42 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v59 = v38;
    unint64_t v44 = v43;
    *(void *)(v0 + 488) = sub_100009984(v42, v43, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "started CloudTelemetryService%s", v40, 0xCu);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);

    swift_release(v59);
    uint64_t v45 = v61;
  }

  else
  {
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);

    swift_release(v38);
    uint64_t v45 = v39;
  }

  swift_release(v45);
  uint64_t v46 = *(void *)(v0 + 800);
  uint64_t v60 = *(void *)(v0 + 792);
  uint64_t v62 = *(void *)(v0 + 784);
  uint64_t v47 = *(void *)(v0 + 656);
  uint64_t v48 = *(void *)(v0 + 648);
  uint64_t v49 = *(void *)(v0 + 640);
  uint64_t v50 = *(void *)(v0 + 632);
  uint64_t v51 = *(void *)(v0 + 624);
  uint64_t v52 = *(void *)(v0 + 616);
  uint64_t v56 = *(void *)(v0 + 608);
  uint64_t v53 = *(void *)(v0 + 584);
  uint64_t v57 = *(void *)(v0 + 576);
  uint64_t v58 = *(void *)(v0 + 776);
  char v55 = *(_BYTE *)(v0 + 76);
  uint64_t v54 = *(void *)(v0 + 568);
  char v64 = *(_BYTE *)(v0 + 872);
  swift_retain(v46);
  swift_bridgeObjectRelease(v53);
  swift_release(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v56);
  *(_BYTE *)uint64_t v54 = v55;
  *(void *)(v54 + 8) = v57;
  *(void *)(v54 + swift_weakDestroy(v0 + 16) = v53;
  *(void *)(v54 + 24) = v60;
  *(void *)(v54 + 32) = v58;
  *(void *)(v54 + 40) = v46;
  *(void *)(v54 + 48) = v62;
  *(_BYTE *)(v54 + 56) = v64;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000402C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 752);
  *(void *)(*v2 + 760) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    char v6 = sub_1000427EC;
  }

  else
  {
    *(void *)(v4 + 768) = a1;
    char v6 = sub_100040378;
  }

  return swift_task_switch(v6, 0LL);
}

uint64_t sub_100040378()
{
  uint64_t v1 = *(void *)(v0 + 768);
  if (*(_BYTE *)(v0 + 872) == 1)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 744);
    uint64_t v4 = *(void *)(v0 + 704);
    if (!v1)
    {
      swift_release(*(void *)(v0 + 744));
      uint64_t result = swift_release(v4);
      __break(1u);
      return result;
    }

    type metadata accessor for SubmissionCoordinator();
    swift_retain(v1);
    swift_retain(v3);
    swift_retain(v4);
    uint64_t v2 = sub_10001C718(v1, v3, v4);
  }

  uint64_t v5 = *(void *)(v0 + 744);
  uint64_t v6 = *(void *)(v0 + 704);
  *(void *)(v0 + 800) = v2;
  *(void *)(v0 + 792) = v5;
  *(void *)(v0 + 784) = v6;
  *(void *)(v0 + 776) = v1;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    os_log_type_t v7 = XPCActivity.makeHandler.unsafeMutableAddressor();
    uint64_t v8 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    v8[2] = v5;
    v8[3] = v1;
    v8[4] = v2;
    swift_beginAccess(v7, v0 + 368, 1LL, 0LL);
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    uint64_t *v7 = (uint64_t)&unk_1000975B8;
    v7[1] = (uint64_t)v8;
    swift_retain_n(v2, 2LL);
    swift_retain_n(v5, 2LL);
    swift_retain_n(v1, 2LL);
    sub_100028AAC(v9, v10);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v11 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v16);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v12;
      if (v12) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v11);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v12;
      if (v12)
      {
LABEL_10:
        if (v12 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v13 = *(void *)(v0 + 808);
        if ((v13 & 0xC000000000000001LL) != 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
        }

        else
        {
          uint64_t v14 = *(void *)(v13 + 32);
          swift_retain(v14);
        }

        *(void *)(v0 + 832) = v14;
        *(_BYTE *)(v0 + 77) = *(_BYTE *)(v0 + 872);
        *(void *)(v0 + 840) = *(void *)(*(void *)v14 + 160LL);
        return swift_task_switch(sub_100040ABC, v14);
      }
    }

    uint64_t v17 = *(void *)(v0 + 800);
    uint64_t v18 = *(void *)(v0 + 792);
    uint64_t v19 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v17);
    swift_release(v19);
    swift_release(v18);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v53, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v54);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v20 = (id)qword_10009EDE8;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 valueForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v22);
    swift_unknownObjectRelease(v22);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v53, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v54);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v53, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v54);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v53, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v54);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void *)(v0 + 792);
  uint64_t v28 = *(void *)(v0 + 784);
  if (v26)
  {
    uint64_t v50 = *(void *)(v0 + 784);
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v48 = v27;
    unint64_t v33 = v32;
    *(void *)(v0 + 488) = sub_100009984(v31, v32, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "started CloudTelemetryService%s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    swift_release(v48);
    uint64_t v34 = v50;
  }

  else
  {
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);

    swift_release(v27);
    uint64_t v34 = v28;
  }

  swift_release(v34);
  uint64_t v35 = *(void *)(v0 + 800);
  uint64_t v49 = *(void *)(v0 + 792);
  uint64_t v51 = *(void *)(v0 + 784);
  uint64_t v36 = *(void *)(v0 + 656);
  uint64_t v37 = *(void *)(v0 + 648);
  uint64_t v38 = *(void *)(v0 + 640);
  uint64_t v39 = *(void *)(v0 + 632);
  uint64_t v40 = *(void *)(v0 + 624);
  uint64_t v41 = *(void *)(v0 + 616);
  uint64_t v45 = *(void *)(v0 + 608);
  uint64_t v42 = *(void *)(v0 + 584);
  uint64_t v46 = *(void *)(v0 + 576);
  uint64_t v47 = *(void *)(v0 + 776);
  char v44 = *(_BYTE *)(v0 + 76);
  uint64_t v43 = *(void *)(v0 + 568);
  char v52 = *(_BYTE *)(v0 + 872);
  swift_retain(v35);
  swift_bridgeObjectRelease(v42);
  swift_release(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v45);
  *(_BYTE *)uint64_t v43 = v44;
  *(void *)(v43 + 8) = v46;
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = v42;
  *(void *)(v43 + 24) = v49;
  *(void *)(v43 + 32) = v47;
  *(void *)(v43 + 40) = v35;
  *(void *)(v43 + 48) = v51;
  *(_BYTE *)(v43 + 56) = v52;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040ABC()
{
  return swift_task_switch(sub_100040B2C, 0LL);
}

uint64_t sub_100040B2C()
{
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 816);
  swift_release(*(void *)(v0 + 832));
  if (v1 + 1 == v2)
  {
    uint64_t v3 = *(void *)(v0 + 800);
    uint64_t v4 = *(void *)(v0 + 792);
    uint64_t v5 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v3);
    swift_release(v5);
    swift_release(v4);
    if (qword_10009C4B8 != -1) {
      swift_once(&qword_10009C4B8, sub_10003D278);
    }
    if (byte_10009EDF0 == 1)
    {
      sub_10001A168(&v43, 0xD000000000000011LL, 0x800000010007BB90LL);
      swift_bridgeObjectRelease(v44);
    }

    if (qword_10009C4B0 != -1) {
      swift_once(&qword_10009C4B0, sub_10003D1C4);
    }
    swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
    id v6 = (id)qword_10009EDE8;
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 valueForKey:v7];

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v8);
      swift_unknownObjectRelease(v8);
      sub_10000C234(v0 + 336, &qword_100096638);
      sub_10001A168(&v43, 0xD000000000000013LL, 0x800000010007BB70LL);
      swift_bridgeObjectRelease(v44);
    }

    else
    {
      *(_OWORD *)(v0 + 336) = 0u;
      *(_OWORD *)(v0 + 352) = 0u;
      sub_10000C234(v0 + 336, &qword_100096638);
    }

    if (qword_10009C4C0 != -1) {
      swift_once(&qword_10009C4C0, sub_10003D378);
    }
    if (byte_10009EDF1 == 1)
    {
      sub_10001A168(&v43, 0x6976654474736574LL, 0xEA00000000006563LL);
      swift_bridgeObjectRelease(v44);
    }

    if (qword_10009C4C8 != -1) {
      swift_once(&qword_10009C4C8, sub_10003D4E4);
    }
    if (byte_10009EDF2 == 1)
    {
      sub_10001A168(&v43, 0xD000000000000014LL, 0x800000010007BB50LL);
      swift_bridgeObjectRelease(v44);
    }

    swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 792);
    uint64_t v17 = *(void *)(v0 + 784);
    if (v15)
    {
      uint64_t v40 = *(void *)(v0 + 784);
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
      uint64_t v38 = v16;
      unint64_t v22 = v21;
      *(void *)(v0 + 488) = sub_100009984(v20, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "started CloudTelemetryService%s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      swift_release(v38);
      uint64_t v23 = v40;
    }

    else
    {
      swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);

      swift_release(v16);
      uint64_t v23 = v17;
    }

    swift_release(v23);
    uint64_t v24 = *(void *)(v0 + 800);
    uint64_t v39 = *(void *)(v0 + 792);
    uint64_t v41 = *(void *)(v0 + 784);
    uint64_t v25 = *(void *)(v0 + 656);
    uint64_t v26 = *(void *)(v0 + 648);
    uint64_t v27 = *(void *)(v0 + 640);
    uint64_t v28 = *(void *)(v0 + 632);
    uint64_t v29 = *(void *)(v0 + 624);
    uint64_t v30 = *(void *)(v0 + 616);
    uint64_t v35 = *(void *)(v0 + 608);
    uint64_t v31 = *(void *)(v0 + 584);
    uint64_t v36 = *(void *)(v0 + 576);
    uint64_t v37 = *(void *)(v0 + 776);
    char v34 = *(_BYTE *)(v0 + 76);
    uint64_t v32 = *(void *)(v0 + 568);
    char v42 = *(_BYTE *)(v0 + 872);
    swift_retain(v24);
    swift_bridgeObjectRelease(v31);
    swift_release(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v35);
    *(_BYTE *)uint64_t v32 = v34;
    *(void *)(v32 + 8) = v36;
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v32 + 24) = v39;
    *(void *)(v32 + 32) = v37;
    *(void *)(v32 + 40) = v24;
    *(void *)(v32 + 48) = v41;
    *(_BYTE *)(v32 + 56) = v42;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 824) + 1LL;
    *(void *)(v0 + 824) = v9;
    uint64_t v10 = *(void *)(v0 + 808);
    if ((v10 & 0xC000000000000001LL) != 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v10);
    }

    else
    {
      uint64_t v11 = *(void *)(v10 + 8 * v9 + 32);
      swift_retain(v11);
    }

    *(void *)(v0 + 832) = v11;
    *(_BYTE *)(v0 + 77) = *(_BYTE *)(v0 + 872);
    *(void *)(v0 + 840) = *(void *)(*(void *)v11 + 160LL);
    return swift_task_switch(sub_100040ABC, v11);
  }

uint64_t sub_1000410F8()
{
  *(void *)(v0 + 704) = 0LL;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 576);
  char v6 = *(_BYTE *)(v0 + 76);
  *(void *)(v0 + 712) = type metadata accessor for DiskCache();
  *(_BYTE *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v5;
  *(void *)(v0 + 96) = v4;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 1memset(&strm.total_in, 0, 20) = 0u;
  *(_BYTE *)(v0 + 136) = 0;
  swift_bridgeObjectRetain(v4);
  sub_10001F7EC();
  sub_10003D650();
  uint64_t v8 = v7;
  URL.appendingPathComponent(_:)(v9, v7);
  swift_bridgeObjectRelease(v8);
  v1(v2, v3);
  swift_bridgeObjectRelease(v4);
  uint64_t v10 = (void *)swift_task_alloc(dword_100096BBC);
  *(void *)(v0 + 7memset(&strm.total_in, 0, 20) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10003F99C;
  return DiskCache.__allocating_init(rootCacheURL:)(*(void *)(v0 + 640));
}

uint64_t sub_100041224(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 848);
  *(void *)(*v2 + 856) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    char v6 = sub_1000420C4;
  }

  else
  {
    *(void *)(v4 + 864) = a1;
    char v6 = sub_1000412DC;
  }

  return swift_task_switch(v6, 0LL);
}

uint64_t sub_1000412DC()
{
  uint64_t v1 = (_BYTE *)(v0 + 872);
  uint64_t v2 = *(void *)(v0 + 864);
  swift_errorRelease(*(void *)(v0 + 728));
  *(void *)(v0 + 744) = v2;
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = swift_retain(v2);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v6 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "reporting disabled due to startup failure.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    *uint64_t v1 = 1;
  }

  else if ((*v1 & 1) == 0)
  {
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    uint64_t v17 = *(void *)(v0 + 656);
    uint64_t v18 = *(void *)(v0 + 592);
    uint64_t v19 = *(void *)(v0 + 584);
    uint64_t v20 = *(void *)(v0 + 576);
    char v21 = *(_BYTE *)(v0 + 76);
    type metadata accessor for SessionCoordinator();
    *(_BYTE *)(v0 + 272) = v21;
    *(void *)(v0 + 280) = v20;
    *(void *)(v0 + 288) = v19;
    *(void *)(v0 + 296) = v2;
    *(void *)(v0 + 304) = 0LL;
    *(void *)(v0 + 312) = 0LL;
    *(void *)(v0 + 3memset(&strm.total_in, 0, 20) = v3;
    *(_BYTE *)(v0 + 328) = 0;
    swift_retain_n(v2, 2LL);
    swift_bridgeObjectRetain(v19);
    swift_retain(v3);
    sub_10001F7EC();
    sub_10003D650();
    uint64_t v23 = v22;
    URL.appendingPathComponent(_:)(v24, v22);
    swift_bridgeObjectRelease(v23);
    v63(v17, v18);
    swift_release(v3);
    swift_release(v2);
    swift_bridgeObjectRelease(v19);
    uint64_t v25 = (void *)swift_task_alloc(dword_100096864);
    *(void *)(v0 + 752) = v25;
    void *v25 = v0;
    v25[1] = sub_1000402C0;
    return sub_1000164A8(0, v2, *(void *)(v0 + 632));
  }

  *(void *)(v0 + 800) = 0LL;
  *(void *)(v0 + 792) = v2;
  *(void *)(v0 + 784) = v3;
  *(void *)(v0 + 776) = 0LL;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    uint64_t v9 = XPCActivity.makeHandler.unsafeMutableAddressor();
    uint64_t v10 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    v10[3] = 0LL;
    v10[4] = 0LL;
    v10[2] = v2;
    swift_beginAccess(v9, v0 + 368, 1LL, 0LL);
    uint64_t v11 = *v9;
    uint64_t v12 = v9[1];
    uint64_t *v9 = (uint64_t)&unk_1000975B8;
    v9[1] = (uint64_t)v10;
    swift_retain_n(v2, 2LL);
    sub_100028AAC(v11, v12);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v13 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0) {
        uint64_t v27 = v13;
      }
      else {
        uint64_t v27 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v13);
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v27);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v14;
      if (v14) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v13);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v14;
      if (v14)
      {
LABEL_15:
        if (v14 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v15 = *(void *)(v0 + 808);
        if ((v15 & 0xC000000000000001LL) != 0)
        {
          uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
        }

        else
        {
          uint64_t v16 = *(void *)(v15 + 32);
          swift_retain(v16);
        }

        *(void *)(v0 + 832) = v16;
        *(_BYTE *)(v0 + 77) = *v1;
        *(void *)(v0 + 840) = *(void *)(*(void *)v16 + 160LL);
        return swift_task_switch(sub_100040ABC, v16);
      }
    }

    uint64_t v28 = *(void *)(v0 + 800);
    uint64_t v29 = *(void *)(v0 + 792);
    uint64_t v30 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v28);
    swift_release(v30);
    swift_release(v29);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v65, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v66);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v31 = (id)qword_10009EDE8;
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 valueForKey:v32];

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v33);
    swift_unknownObjectRelease(v33);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v65, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v66);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v65, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v66);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v65, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v66);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = *(void *)(v0 + 792);
  uint64_t v39 = *(void *)(v0 + 784);
  if (v37)
  {
    uint64_t v61 = *(void *)(v0 + 784);
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v42 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v59 = v38;
    unint64_t v44 = v43;
    *(void *)(v0 + 488) = sub_100009984(v42, v43, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "started CloudTelemetryService%s", v40, 0xCu);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);

    swift_release(v59);
    uint64_t v45 = v61;
  }

  else
  {

    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_release(v38);
    uint64_t v45 = v39;
  }

  swift_release(v45);
  uint64_t v60 = *(void *)(v0 + 784);
  uint64_t v62 = *(void *)(v0 + 800);
  uint64_t v57 = *(void *)(v0 + 776);
  uint64_t v58 = *(void *)(v0 + 792);
  uint64_t v46 = *(void *)(v0 + 656);
  uint64_t v47 = *(void *)(v0 + 648);
  uint64_t v48 = *(void *)(v0 + 640);
  uint64_t v49 = *(void *)(v0 + 632);
  uint64_t v50 = *(void *)(v0 + 624);
  uint64_t v51 = *(void *)(v0 + 616);
  uint64_t v52 = *(void *)(v0 + 608);
  uint64_t v53 = *(void *)(v0 + 584);
  uint64_t v56 = *(void *)(v0 + 576);
  char v55 = *(_BYTE *)(v0 + 76);
  uint64_t v54 = *(void *)(v0 + 568);
  char v64 = *(_BYTE *)(v0 + 872);
  swift_bridgeObjectRelease(v53);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  *(_BYTE *)uint64_t v54 = v55;
  *(void *)(v54 + 8) = v56;
  *(void *)(v54 + swift_weakDestroy(v0 + 16) = v53;
  *(void *)(v54 + 24) = v58;
  *(void *)(v54 + 32) = v57;
  *(void *)(v54 + 40) = v62;
  *(void *)(v54 + 48) = v60;
  *(_BYTE *)(v54 + 56) = v64;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041B44()
{
  uint64_t v55 = v0 + 552;
  uint64_t v57 = (char *)(v0 + 872);
  uint64_t v1 = *(void *)(v0 + 728);
  *(void *)(v0 + 496) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_100009FDC(&qword_100098870);
  if (!swift_dynamicCast(v0 + 75, v0 + 496, v2, &type metadata for DiskCacheError, 6LL)
    || (*(_BYTE *)(v0 + 73) = *(_BYTE *)(v0 + 75),
        *(_BYTE *)(v0 + 74) = 1,
        unint64_t v3 = sub_1000230F8(),
        (dispatch thunk of static Equatable.== infix(_:_:)(v0 + 73, v0 + 74, &type metadata for DiskCacheError, v3) & 1) == 0))
  {
    uint64_t v4 = *(void *)(v0 + 728);
    swift_errorRetain(v4);
    uint64_t v5 = swift_errorRetain(v4);
    char v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 728);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v58 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_getErrorValue(v9, v55, v0 + 392);
      uint64_t v12 = Error.localizedDescription.getter(*(void *)(v0 + 400), *(void *)(v0 + 408));
      unint64_t v14 = v13;
      *(void *)(v0 + 512) = sub_100009984(v12, v13, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to open database file: %{public}s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 728));
      swift_errorRelease(v9);
    }
  }

  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  uint64_t v16 = *(void *)(v0 + 656);
  uint64_t v17 = *(void *)(v0 + 624);
  uint64_t v18 = *(void *)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 592);
  uint64_t v20 = *(void *)(v0 + 584);
  uint64_t v21 = *(void *)(v0 + 576);
  char v22 = *(_BYTE *)(v0 + 76);
  id v23 = objc_msgSend(*(id *)(v0 + 672), "defaultManager", v55);
  char v24 = *v57;
  *(_BYTE *)(v0 + 144) = v22;
  *(void *)(v0 + 152) = v21;
  *(void *)(v0 + 160) = v20;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_BYTE *)(v0 + 200) = v24;
  swift_bridgeObjectRetain(v20);
  sub_10001F7EC();
  sub_10003D650();
  uint64_t v26 = v25;
  URL.appendingPathComponent(_:)(v27, v25);
  swift_bridgeObjectRelease(v26);
  v15(v18, v19);
  uint64_t v28 = swift_bridgeObjectRelease(v20);
  URL.deletingLastPathComponent()(v28);
  v15(v17, v19);
  URL._bridgeToObjectiveC()(v29);
  id v31 = v30;
  v15(v16, v19);
  *(void *)(v0 + 536) = 0LL;
  LODWORD(v18) = [v23 removeItemAtURL:v31 error:v0 + 536];

  id v32 = *(id *)(v0 + 536);
  if (!(_DWORD)v18)
  {
    id v33 = v32;
    uint64_t v34 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v35);
    swift_errorRetain(v34);
    uint64_t v36 = swift_errorRetain(v34);
    BOOL v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v58 = v40;
      *(_DWORD *)uint64_t v39 = 136446210;
      swift_getErrorValue(v34, v0 + 560, v0 + 416);
      uint64_t v41 = Error.localizedDescription.getter(*(void *)(v0 + 424), *(void *)(v0 + 432));
      unint64_t v43 = v42;
      *(void *)(v0 + 544) = sub_100009984(v41, v42, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v56, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "failed to clear cache directory with error: %{public}s",  v39,  0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      swift_errorRelease(v34);
    }

    else
    {
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      swift_errorRelease(v34);
    }
  }

  unint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  uint64_t v45 = *(void *)(v0 + 656);
  uint64_t v46 = *(void *)(v0 + 592);
  uint64_t v47 = *(void *)(v0 + 584);
  uint64_t v48 = *(void *)(v0 + 576);
  *(_BYTE *)(v0 + 208) = *(_BYTE *)(v0 + 76);
  char v49 = *v57;
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v48;
  *(void *)(v0 + 224) = v47;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_BYTE *)(v0 + 264) = v49;
  swift_bridgeObjectRetain(v47);
  sub_10001F7EC();
  sub_10003D650();
  uint64_t v51 = v50;
  URL.appendingPathComponent(_:)(v52, v50);
  swift_bridgeObjectRelease(v51);
  v44(v45, v46);
  swift_bridgeObjectRelease(v47);
  uint64_t v53 = (void *)swift_task_alloc(dword_100096BBC);
  *(void *)(v0 + 848) = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_100041224;
  return DiskCache.__allocating_init(rootCacheURL:)(*(void *)(v0 + 608));
}

uint64_t sub_1000420C4()
{
  uint64_t v1 = *(void *)(v0 + 856);
  swift_errorRelease(*(void *)(v0 + 728));
  uint64_t v2 = swift_errorRelease(v1);
  *(void *)(v0 + 744) = 0LL;
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "reporting disabled due to startup failure.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  *(_BYTE *)(v0 + 872) = 1;
  *(_OWORD *)(v0 + 792) = 0u;
  *(void *)(v0 + 784) = v3;
  *(void *)(v0 + 776) = 0LL;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    os_log_type_t v7 = XPCActivity.makeHandler.unsafeMutableAddressor();
    BOOL v8 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    v8[3] = 0LL;
    v8[4] = 0LL;
    v8[2] = 0LL;
    swift_beginAccess(v7, v0 + 368, 1LL, 0LL);
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    uint64_t *v7 = (uint64_t)&unk_1000975B8;
    v7[1] = (uint64_t)v8;
    sub_100028AAC(v9, v10);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v11 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v16);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v12;
      if (v12) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v11);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v12;
      if (v12)
      {
LABEL_8:
        if (v12 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v13 = *(void *)(v0 + 808);
        if ((v13 & 0xC000000000000001LL) != 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
        }

        else
        {
          uint64_t v14 = *(void *)(v13 + 32);
          swift_retain(v14);
        }

        *(void *)(v0 + 832) = v14;
        *(_BYTE *)(v0 + 77) = *(_BYTE *)(v0 + 872);
        *(void *)(v0 + 840) = *(void *)(*(void *)v14 + 160LL);
        return swift_task_switch(sub_100040ABC, v14);
      }
    }

    uint64_t v17 = *(void *)(v0 + 800);
    uint64_t v18 = *(void *)(v0 + 792);
    uint64_t v19 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v17);
    swift_release(v19);
    swift_release(v18);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v53, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v54);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v20 = (id)qword_10009EDE8;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 valueForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v22);
    swift_unknownObjectRelease(v22);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v53, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v54);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v53, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v54);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v53, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v54);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  char v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void *)(v0 + 792);
  uint64_t v28 = *(void *)(v0 + 784);
  if (v26)
  {
    uint64_t v50 = *(void *)(v0 + 784);
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v48 = v27;
    unint64_t v33 = v32;
    *(void *)(v0 + 488) = sub_100009984(v31, v32, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "started CloudTelemetryService%s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    swift_release(v48);
    uint64_t v34 = v50;
  }

  else
  {

    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_release(v27);
    uint64_t v34 = v28;
  }

  swift_release(v34);
  uint64_t v49 = *(void *)(v0 + 784);
  uint64_t v51 = *(void *)(v0 + 800);
  uint64_t v46 = *(void *)(v0 + 776);
  uint64_t v47 = *(void *)(v0 + 792);
  uint64_t v35 = *(void *)(v0 + 656);
  uint64_t v36 = *(void *)(v0 + 648);
  uint64_t v37 = *(void *)(v0 + 640);
  uint64_t v38 = *(void *)(v0 + 632);
  uint64_t v39 = *(void *)(v0 + 624);
  uint64_t v40 = *(void *)(v0 + 616);
  uint64_t v41 = *(void *)(v0 + 608);
  uint64_t v42 = *(void *)(v0 + 584);
  uint64_t v45 = *(void *)(v0 + 576);
  char v44 = *(_BYTE *)(v0 + 76);
  uint64_t v43 = *(void *)(v0 + 568);
  char v52 = *(_BYTE *)(v0 + 872);
  swift_bridgeObjectRelease(v42);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  *(_BYTE *)uint64_t v43 = v44;
  *(void *)(v43 + 8) = v45;
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = v42;
  *(void *)(v43 + 24) = v47;
  *(void *)(v43 + 32) = v46;
  *(void *)(v43 + 40) = v51;
  *(void *)(v43 + 48) = v49;
  *(_BYTE *)(v43 + 56) = v52;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000427EC()
{
  uint64_t v1 = *(void *)(v0 + 760);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 760);
    char v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v60 = v7;
    *(_DWORD *)char v6 = 136446210;
    swift_getErrorValue(v5, v0 + 504, v0 + 464);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 472), *(void *)(v0 + 480));
    unint64_t v10 = v9;
    *(void *)(v0 + 5memset(&strm.total_in, 0, 20) = sub_100009984(v8, v9, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "reporting disabled due to failure setting up session coordinator. %{public}s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 760);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  *(_BYTE *)(v0 + 872) = 1;
  uint64_t v12 = *(void *)(v0 + 744);
  uint64_t v13 = *(void *)(v0 + 704);
  *(void *)(v0 + 800) = 0LL;
  *(void *)(v0 + 792) = v12;
  *(void *)(v0 + 784) = v13;
  *(void *)(v0 + 776) = 0LL;
  if ((*(unsigned __int8 *)(v0 + 76) | 2) == 2)
  {
    uint64_t v14 = XPCActivity.makeHandler.unsafeMutableAddressor();
    uint64_t v15 = (void *)swift_allocObject(&unk_10008FC00, 40LL, 7LL);
    v15[3] = 0LL;
    v15[4] = 0LL;
    v15[2] = v12;
    swift_beginAccess(v14, v0 + 368, 1LL, 0LL);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t *v14 = (uint64_t)&unk_1000975B8;
    v14[1] = (uint64_t)v15;
    swift_retain_n(v12, 2LL);
    sub_100028AAC(v16, v17);
    if (qword_10009C4D8 != -1) {
      swift_once(&qword_10009C4D8, sub_100043264);
    }
    uint64_t v18 = qword_10009EE00;
    *(void *)(v0 + 808) = qword_10009EE00;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v18);
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v23);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v19;
      if (v19) {
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v18);
      *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v19;
      if (v19)
      {
LABEL_9:
        if (v19 < 1) {
          __break(1u);
        }
        *(void *)(v0 + 824) = 0LL;
        uint64_t v20 = *(void *)(v0 + 808);
        if ((v20 & 0xC000000000000001LL) != 0)
        {
          uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v20);
        }

        else
        {
          uint64_t v21 = *(void *)(v20 + 32);
          swift_retain(v21);
        }

        *(void *)(v0 + 832) = v21;
        *(_BYTE *)(v0 + 77) = *(_BYTE *)(v0 + 872);
        *(void *)(v0 + 840) = *(void *)(*(void *)v21 + 160LL);
        return swift_task_switch(sub_100040ABC, v21);
      }
    }

    uint64_t v24 = *(void *)(v0 + 800);
    uint64_t v25 = *(void *)(v0 + 792);
    uint64_t v26 = *(void *)(v0 + 776);
    swift_bridgeObjectRelease(*(void *)(v0 + 808));
    swift_release(v24);
    swift_release(v26);
    swift_release(v25);
  }

  if (qword_10009C4B8 != -1) {
    swift_once(&qword_10009C4B8, sub_10003D278);
  }
  if (byte_10009EDF0 == 1)
  {
    sub_10001A168(&v60, 0xD000000000000011LL, 0x800000010007BB90LL);
    swift_bridgeObjectRelease(v61);
  }

  if (qword_10009C4B0 != -1) {
    swift_once(&qword_10009C4B0, sub_10003D1C4);
  }
  swift_beginAccess(&qword_10009EDE8, v0 + 440, 0LL, 0LL);
  id v27 = (id)qword_10009EDE8;
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 valueForKey:v28];

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 336), v29);
    swift_unknownObjectRelease(v29);
    sub_10000C234(v0 + 336, &qword_100096638);
    sub_10001A168(&v60, 0xD000000000000013LL, 0x800000010007BB70LL);
    swift_bridgeObjectRelease(v61);
  }

  else
  {
    *(_OWORD *)(v0 + 336) = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    sub_10000C234(v0 + 336, &qword_100096638);
  }

  if (qword_10009C4C0 != -1) {
    swift_once(&qword_10009C4C0, sub_10003D378);
  }
  if (byte_10009EDF1 == 1)
  {
    sub_10001A168(&v60, 0x6976654474736574LL, 0xEA00000000006563LL);
    swift_bridgeObjectRelease(v61);
  }

  if (qword_10009C4C8 != -1) {
    swift_once(&qword_10009C4C8, sub_10003D4E4);
  }
  if (byte_10009EDF2 == 1)
  {
    sub_10001A168(&v60, 0xD000000000000014LL, 0x800000010007BB50LL);
    swift_bridgeObjectRelease(v61);
  }

  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 792);
  uint64_t v35 = *(void *)(v0 + 784);
  if (v33)
  {
    uint64_t v57 = *(void *)(v0 + 784);
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v60 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = sub_10004318C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v55 = v34;
    unint64_t v40 = v39;
    *(void *)(v0 + 488) = sub_100009984(v38, v39, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "started CloudTelemetryService%s", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);

    swift_release(v55);
    uint64_t v41 = v57;
  }

  else
  {

    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2LL);
    swift_release(v34);
    uint64_t v41 = v35;
  }

  swift_release(v41);
  uint64_t v56 = *(void *)(v0 + 784);
  uint64_t v58 = *(void *)(v0 + 800);
  uint64_t v53 = *(void *)(v0 + 776);
  uint64_t v54 = *(void *)(v0 + 792);
  uint64_t v42 = *(void *)(v0 + 656);
  uint64_t v43 = *(void *)(v0 + 648);
  uint64_t v44 = *(void *)(v0 + 640);
  uint64_t v45 = *(void *)(v0 + 632);
  uint64_t v46 = *(void *)(v0 + 624);
  uint64_t v47 = *(void *)(v0 + 616);
  uint64_t v48 = *(void *)(v0 + 608);
  uint64_t v49 = *(void *)(v0 + 584);
  uint64_t v52 = *(void *)(v0 + 576);
  char v51 = *(_BYTE *)(v0 + 76);
  uint64_t v50 = *(void *)(v0 + 568);
  char v59 = *(_BYTE *)(v0 + 872);
  swift_bridgeObjectRelease(v49);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  *(_BYTE *)uint64_t v50 = v51;
  *(void *)(v50 + 8) = v52;
  *(void *)(v50 + swift_weakDestroy(v0 + 16) = v49;
  *(void *)(v50 + 24) = v54;
  *(void *)(v50 + 32) = v53;
  *(void *)(v50 + 40) = v58;
  *(void *)(v50 + 48) = v56;
  *(_BYTE *)(v50 + 56) = v59;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004300C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[4] = a5;
  v6[5] = a6;
  _OWORD v6[2] = a1;
  void v6[3] = a4;
  return swift_task_switch(sub_100043028, 0LL);
}

uint64_t sub_100043028()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (type metadata accessor for SubmitEventsActivity() == v1)
  {
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 24);
    swift_retain(v3);
    swift_retain(v5);
    swift_retain(v4);
    uint64_t v6 = (uint64_t)sub_10001C718(v5, v4, v3);
    uint64_t v7 = &qword_1000975D0;
    uint64_t v8 = type metadata accessor for SubmitEventsActivity;
    unint64_t v9 = &unk_100076C94;
  }

  else if (type metadata accessor for CacheCleanupActivity() == v1)
  {
    uint64_t v10 = swift_retain(*(void *)(v0 + 24));
    uint64_t v6 = sub_10004D8EC(v10);
    uint64_t v7 = &qword_1000975E0;
    uint64_t v8 = type metadata accessor for CacheCleanupActivity;
    unint64_t v9 = &unk_1000786F8;
  }

  else
  {
    if (type metadata accessor for PostInstallActivity() != v1) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "CloudTelemetryService/Daemon.swift",  34LL,  2LL,  190LL,  0);
    }
    uint64_t v6 = sub_10000CCE4();
    uint64_t v7 = &qword_1000975D8;
    uint64_t v8 = type metadata accessor for PostInstallActivity;
    unint64_t v9 = &unk_100076E78;
  }

  uint64_t v11 = sub_10000C5E8(v7, (uint64_t (*)(uint64_t))v8, (uint64_t)v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v11);
}

uint64_t sub_10004318C(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = sub_100009FDC(&qword_1000975E8);
  unint64_t v3 = sub_100043880();
  unint64_t v4 = sub_100024EC0();
  uint64_t v5 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v2, v3, v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(a1);
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 0x6769666E6F632820LL;
}

uint64_t sub_100043264()
{
  uint64_t v0 = sub_100009FDC(&qword_1000975C8);
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_100077F00;
  type metadata accessor for XPCActivity();
  uint64_t v2 = type metadata accessor for SubmitEventsActivity();
  uint64_t v3 = sub_10000C5E8( &qword_1000975D0,  (uint64_t (*)(uint64_t))type metadata accessor for SubmitEventsActivity,  (uint64_t)&unk_100076C94);
  *(void *)(v1 + 32) = XPCActivity.__allocating_init(handlerType:)(v2, v3);
  uint64_t v4 = type metadata accessor for PostInstallActivity();
  uint64_t v5 = sub_10000C5E8( &qword_1000975D8,  (uint64_t (*)(uint64_t))type metadata accessor for PostInstallActivity,  (uint64_t)&unk_100076E78);
  *(void *)(v1 + 40) = XPCActivity.__allocating_init(handlerType:)(v4, v5);
  uint64_t v6 = type metadata accessor for CacheCleanupActivity();
  uint64_t v7 = sub_10000C5E8( &qword_1000975E0,  (uint64_t (*)(uint64_t))type metadata accessor for CacheCleanupActivity,  (uint64_t)&unk_1000786F8);
  *(void *)(v1 + 48) = XPCActivity.__allocating_init(handlerType:)(v6, v7);
  uint64_t result = specialized Array._endMutation()();
  qword_10009EE00 = v1;
  return result;
}

uint64_t sub_100043380()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000433B4(uint64_t a1)
{
  __int128 v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc(dword_1000975B4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100043434;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100043028, 0LL);
}

uint64_t sub_100043434(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

unint64_t sub_100043490()
{
  unint64_t result = qword_1000975C0;
  if (!qword_1000975C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Mode, &type metadata for Mode);
    atomic_store(result, (unint64_t *)&qword_1000975C0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100043520 + 4 * byte_100077F25[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100043554 + 4 * byte_100077F20[v4]))();
}

uint64_t sub_100043554(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004355C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100043564LL);
  }
  return result;
}

uint64_t sub_100043570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100043578LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10004357C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043584(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Mode()
{
  return &type metadata for Mode;
}

uint64_t destroy for Daemon(void *a1)
{
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for Daemon(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for Daemon(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v9;
  swift_retain(v9);
  swift_release(v8);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v10);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for Daemon(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Daemon(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  swift_release(*(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v5);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release(v6);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for Daemon(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Daemon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Daemon()
{
  return &type metadata for Daemon;
}

unint64_t sub_100043880()
{
  unint64_t result = qword_1000975F0;
  if (!qword_1000975F0)
  {
    uint64_t v1 = sub_10000A140(&qword_1000975E8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000975F0);
  }

  return result;
}

uint64_t sub_1000438CC()
{
  uint64_t v0 = sub_10003D238();
  swift_beginAccess(v0, v24, 0LL, 0LL);
  id v1 = (id)*v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 integerForKey:v2];

  uint64_t v4 = 1LL;
  switch((unint64_t)v3)
  {
    case 0uLL:
      goto LABEL_8;
    case 1uLL:
      uint64_t v4 = 0LL;
      goto LABEL_13;
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      uint64_t v4 = 2LL;
      goto LABEL_13;
    case 4uLL:
      uint64_t v4 = 3LL;
LABEL_13:
      if (qword_10009C5E0 != -1) {
        swift_once(&qword_10009C5E0, sub_100043E58);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      uint64_t v12 = sub_100009FC4(v11, (uint64_t)qword_10009EE08);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc(22LL, -1LL);
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        uint64_t v22 = v16;
        *(_DWORD *)uint64_t v15 = 136446466;
        LOBYTE(v21) = v4;
        uint64_t v17 = String.init<A>(describing:)(&v21, &type metadata for StorebagEnvironment);
        unint64_t v19 = v18;
        uint64_t v21 = sub_100009984(v17, v18, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease(v19);
        *(_WORD *)(v15 + 12) = 2050;
        uint64_t v21 = (uint64_t)v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 14, v15 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "overriding environmentType to %{public}s (%{public}ld) from defaults",  (uint8_t *)v15,  0x16u);
        swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      break;
    default:
      if (qword_10009C5E0 != -1) {
        swift_once(&qword_10009C5E0, sub_100043E58);
      }
      uint64_t v5 = type metadata accessor for Logger(0LL);
      uint64_t v6 = sub_100009FC4(v5, (uint64_t)qword_10009EE08);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v9 = 134349056;
        uint64_t v22 = (uint64_t)v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "invalid environmentType override from defaults: %{public}ld",  v9,  0xCu);
        swift_slowDealloc(v9, -1LL, -1LL);
      }

LABEL_8:
      uint64_t v10 = sub_10003D184();
      swift_beginAccess(v10, &v22, 0LL, 0LL);
      if (*v10) {
        uint64_t v4 = 1LL;
      }
      else {
        uint64_t v4 = 3LL;
      }
      break;
  }

  return v4;
}

void *sub_100043C10(void (*a1)(uint64_t *__return_ptr, char *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  __n128 v5 = swift_bridgeObjectRetain(a3);
  uint64_t v6 = 0LL;
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    char v18 = *(_BYTE *)(a3 + v6 + 32);
    a1(&v16, &v18, v5);
    if (v3)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(a3);
      return v7;
    }

    uint64_t v9 = v17;
    if (v17)
    {
      char v10 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = sub_100045EF0(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1) {
        uint64_t v7 = sub_100045EF0((void *)(v11 > 1), v12 + 1, 1, v7);
      }
      v7[2] = v12 + 1;
      os_log_type_t v8 = &v7[2 * v12];
      *((_BYTE *)v8 + 32) = v10;
      v8[5] = v9;
    }

    ++v6;
  }

  while (v14 != v6);
  swift_bridgeObjectRelease(a3);
  return v7;
}

Swift::Int sub_100043D60()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_100043DA4()
{
}

Swift::Int sub_100043DD0(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

uint64_t sub_100043E10@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000479B4(*a1);
  *a2 = result;
  return result;
}

void sub_100043E38(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

void sub_100043E48(void *a1@<X8>)
{
  *a1 = &off_10008FD78;
}

uint64_t sub_100043E58()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EE08);
  sub_100009FC4(v0, (uint64_t)qword_10009EE08);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x67616265726F7473LL,  0xE800000000000000LL);
}

uint64_t sub_100043ECC(char a1)
{
  return *(void *)&aDevelopmappleI[8 * a1];
}

uint64_t sub_100043EEC()
{
  return sub_100043ECC(*v0);
}

uint64_t sub_100043EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5 = sub_100047B6C(a1, a2);
  uint64_t result = swift_bridgeObjectRelease(a2);
  *a3 = v5;
  return result;
}

void sub_100043F30(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100043F3C(uint64_t a1)
{
  unint64_t v2 = sub_100049808();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043F64(uint64_t a1)
{
  unint64_t v2 = sub_100049808();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100043F8C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

unint64_t sub_100043FD0(char a1)
{
  if (!a1) {
    return 0xD00000000000001DLL;
  }
  if (a1 == 1) {
    return 0xD000000000000025LL;
  }
  return 0xD000000000000010LL;
}

unint64_t sub_100044030()
{
  return sub_100043FD0(*v0);
}

uint64_t sub_100044038@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PropertyListDecoder.init()();
  uint64_t v30 = 100LL;
  unint64_t v11 = sub_1000479D8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)( v25,  &type metadata for Storebag._StorebagRoot,  a1,  a2,  &v30,  &type metadata for Storebag._StorebagRoot,  v11);
  if (v4)
  {
    sub_10000A074(a1, a2);
    return swift_release(v10);
  }

  else
  {
    uint64_t v21 = v25[1];
    uint64_t v22 = v25[0];
    int v23 = v26;
    int v13 = v27;
    unint64_t v15 = v28;
    unint64_t v14 = v29;
    if (*(void *)(v29 + 16) && (unint64_t v16 = sub_100046ADC(a3), (v17 & 1) != 0)) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v14 + 56) + 8 * v16));
    }
    else {
      unint64_t v18 = sub_1000441F8((uint64_t)_swiftEmptyArrayStorage);
    }
    if (v13) {
      int v19 = 86400;
    }
    else {
      int v19 = v23;
    }
    unint64_t v24 = v18;
    if (v15)
    {
      swift_bridgeObjectRetain(v15);
      uint64_t v20 = v21;
      swift_bridgeObjectRetain(v21);
      sub_10000A074(a1, a2);
      swift_bridgeObjectRelease(v14);
      unint64_t v14 = v15;
    }

    else
    {
      uint64_t v20 = v21;
      swift_bridgeObjectRetain(v21);
      unint64_t v15 = sub_100044340((uint64_t)_swiftEmptyArrayStorage);
      sub_10000A074(a1, a2);
    }

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v20);
    uint64_t result = swift_release(v10);
    *(void *)a4 = v24;
    *(_DWORD *)(a4 + 8) = v19;
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v22;
    *(void *)(a4 + 24) = v20;
    *(void *)(a4 + 32) = v15;
  }

  return result;
}

unint64_t sub_1000441F8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_1000976D0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v20 = v1;
  uint64_t v6 = (char *)(v1 + 72);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 5);
    uint64_t v8 = *((void *)v6 - 4);
    uint64_t v9 = *((void *)v6 - 3);
    uint64_t v10 = *((void *)v6 - 2);
    uint64_t v11 = *((void *)v6 - 1);
    char v12 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_10001C2AC(v9, v10, v11, v12);
    unint64_t result = sub_100010540(v7, v8);
    if ((v14 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v15 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v15 = v7;
    v15[1] = v8;
    uint64_t v16 = v4[7] + 32 * result;
    *(void *)uint64_t v16 = v9;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v11;
    *(_BYTE *)(v16 + 24) = v12;
    uint64_t v17 = v4[2];
    BOOL v18 = __OFADD__(v17, 1LL);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v6 += 48;
    void v4[2] = v19;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v20;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100044340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_1000976C8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_BYTE *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 3);
    uint64_t v8 = *((void *)v6 - 2);
    uint64_t v9 = *((void *)v6 - 1);
    char v10 = *v6;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100010540(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    int v13 = (uint64_t *)(v4[6] + 16 * result);
    *int v13 = v7;
    v13[1] = v8;
    uint64_t v14 = v4[7] + 16 * result;
    *(void *)uint64_t v14 = v9;
    *(_BYTE *)(v14 + 8) = v10;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 32;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100044468@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  v289 = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v319 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v318 = (char *)&v286 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SessionConfiguration.Backend(0LL);
  uint64_t v294 = *(void *)(v7 - 8);
  uint64_t v295 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  v298 = (char **)((char *)&v286 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v288 = (uint64_t)&v286 - v11;
  __chkstk_darwin(v10);
  uint64_t v287 = (uint64_t)&v286 - v12;
  uint64_t v13 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  __chkstk_darwin(v13);
  v286 = (char *)&v286 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100009FDC(&qword_100096350);
  __chkstk_darwin(v15);
  v306 = (char *)&v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v310 = *(void *)(v17 - 8);
  uint64_t v311 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v291 = (uint64_t)&v286 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  v290 = (char *)&v286 - v20;
  uint64_t v21 = type metadata accessor for Locale.Language(0LL);
  uint64_t v328 = *(void *)(v21 - 8);
  uint64_t v329 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  v309 = (char *)&v286 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  v315 = (char *)&v286 - v24;
  uint64_t v25 = type metadata accessor for Locale(0LL);
  uint64_t v326 = *(void *)(v25 - 8);
  uint64_t v327 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  v308 = (char *)&v286 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  v314 = (char *)&v286 - v28;
  uint64_t v29 = sub_100009FDC((uint64_t *)&unk_100097278);
  uint64_t v30 = __chkstk_darwin(v29);
  v307 = (char *)&v286 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  BOOL v33 = (char *)&v286 - v32;
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  v312 = a1;
  sub_10000A32C(a1, v34);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v355, v34, v35);
  __int128 v357 = v356;
  unint64_t v36 = *((void *)&v356 + 1);
  unint64_t v37 = v356;
  swift_bridgeObjectRetain(*((void *)&v356 + 1));
  sub_1000173BC(v355);
  v296 = v3;
  uint64_t v38 = *v3;
  unint64_t v39 = v36;
  uint64_t v40 = *(void *)(v38 + 64);
  uint64_t v313 = v38 + 64;
  uint64_t v41 = 1LL << *(_BYTE *)(v38 + 32);
  uint64_t v42 = -1LL;
  if (v41 < 64) {
    uint64_t v42 = ~(-1LL << v41);
  }
  unint64_t v43 = v42 & v40;
  int64_t v316 = (unint64_t)(v41 + 63) >> 6;
  v303 = &v340;
  __n128 v44 = swift_bridgeObjectRetain(v38);
  unint64_t v45 = v43;
  int64_t v46 = 0LL;
  uint64_t v297 = 0LL;
  v44.n128_u64[0] = 136315138LL;
  __n128 v302 = v44;
  v301 = (char *)&type metadata for Any + 8;
  v44.n128_u64[0] = 136446210LL;
  __n128 v292 = v44;
  v299 = _swiftEmptyArrayStorage;
  v293 = _swiftEmptyArrayStorage;
  uint64_t v322 = v5;
  v325 = v33;
  unint64_t v334 = v37;
  uint64_t v304 = v38;
  unint64_t v338 = v39;
  do
  {
    while (1)
    {
LABEL_7:
      if (v45)
      {
        unint64_t v49 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
        unint64_t v50 = v49 | (v46 << 6);
      }

      else
      {
        if (__OFADD__(v46++, 1LL)) {
          goto LABEL_260;
        }
        if (v46 >= v316) {
          goto LABEL_255;
        }
        unint64_t v52 = *(void *)(v313 + 8 * v46);
        if (!v52)
        {
          int64_t v53 = v46 + 1;
          if (v46 + 1 >= v316) {
            goto LABEL_255;
          }
          unint64_t v52 = *(void *)(v313 + 8 * v53);
          if (!v52)
          {
            int64_t v53 = v46 + 2;
            if (v46 + 2 >= v316) {
              goto LABEL_255;
            }
            unint64_t v52 = *(void *)(v313 + 8 * v53);
            if (!v52)
            {
              int64_t v53 = v46 + 3;
              if (v46 + 3 >= v316) {
                goto LABEL_255;
              }
              unint64_t v52 = *(void *)(v313 + 8 * v53);
              if (!v52)
              {
                while (1)
                {
                  int64_t v46 = v53 + 1;
                  if (__OFADD__(v53, 1LL)) {
                    goto LABEL_263;
                  }
                  if (v46 >= v316) {
                    break;
                  }
                  unint64_t v52 = *(void *)(v313 + 8 * v46);
                  ++v53;
                  if (v52) {
                    goto LABEL_19;
                  }
                }

LABEL_255:
                swift_release(v38);
                sub_10002AFE4((uint64_t)&v357);
                uint64_t v280 = v296[2];
                uint64_t v281 = v296[3];
                swift_bridgeObjectRetain(v281);
                char v282 = variable initialization expression of Daemon.mode();
                uint64_t result = sub_100066364((uint64_t)v293, (uint64_t)v299, v282 & 1, v280, v281, (uint64_t)&v341);
                __int128 v284 = v342;
                v285 = v289;
                _OWORD *v289 = v341;
                v285[1] = v284;
                *((void *)v285 + 4) = v343;
                return result;
              }
            }
          }

          int64_t v46 = v53;
        }

LABEL_19:
        unint64_t v45 = (v52 - 1) & v52;
        unint64_t v50 = __clz(__rbit64(v52)) + (v46 << 6);
      }

      uint64_t v54 = *(void *)(v38 + 56) + 32 * v50;
      uint64_t v55 = *(void *)(v54 + 8);
      uint64_t v331 = *(void *)v54;
      uint64_t v56 = *(void *)(v54 + 16);
      int v57 = *(unsigned __int8 *)(v54 + 24);
      if (v57) {
        break;
      }
      *(void *)&__int128 v337 = *(void *)(v56 + 16);
      if ((void)v337)
      {
        unint64_t v323 = v45;
        int64_t v324 = v46;
        id v80 = (uint64_t *)(*(void *)(v38 + 48) + 16 * v50);
        uint64_t v81 = v80[1];
        uint64_t v300 = *v80;
        uint64_t v330 = v81;
        swift_bridgeObjectRetain(v81);
        uint64_t v317 = v55;
        sub_10001C2AC(v331, v55, v56, 0);
        swift_bridgeObjectRetain(v56);
        if (!*(void *)(v56 + 16)) {
          goto LABEL_256;
        }
        unint64_t v82 = 0LL;
        uint64_t v335 = v56;
        v336 = (void *)(v56 + 32);
LABEL_51:
        uint64_t v83 = &v336[25 * v82];
        __int128 v341 = *(_OWORD *)v83;
        __int128 v84 = *((_OWORD *)v83 + 1);
        __int128 v85 = *((_OWORD *)v83 + 2);
        __int128 v86 = *((_OWORD *)v83 + 4);
        __int128 v344 = *((_OWORD *)v83 + 3);
        __int128 v345 = v86;
        __int128 v342 = v84;
        __int128 v343 = v85;
        __int128 v87 = *((_OWORD *)v83 + 5);
        __int128 v88 = *((_OWORD *)v83 + 6);
        __int128 v89 = *((_OWORD *)v83 + 8);
        __int128 v348 = *((_OWORD *)v83 + 7);
        __int128 v349 = v89;
        __int128 v346 = v87;
        __int128 v347 = v88;
        __int128 v90 = *((_OWORD *)v83 + 9);
        __int128 v91 = *((_OWORD *)v83 + 10);
        __int128 v92 = *((_OWORD *)v83 + 11);
        uint64_t v353 = v83[24];
        __int128 v351 = v91;
        __int128 v352 = v92;
        __int128 v350 = v90;
        if (__PAIR128__(v39, v37) != v341 && (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v39) & 1) == 0) {
          goto LABEL_135;
        }
        int v93 = BYTE8(v352);
        if (BYTE8(v352) == 2)
        {
          sub_100048FB8((uint64_t)&v341);
          BOOL v94 = 0;
        }

        else
        {
          sub_100048FB8((uint64_t)&v341);
          BOOL v94 = sub_100051374(v93 & 1);
        }

        BOOL v95 = BYTE9(v352) != 2 && sub_100051374(BYTE9(v352) & 1);
        if (((sub_10003D63C() | v94) & 1) != 0)
        {
          LODWORD(v332) = v95;
          LODWORD(v333) = v93;
          NSString v96 = String._bridgeToObjectiveC()();
          uint64_t v97 = MGCopyAnswer(v96, 0LL);

          if (!v97) {
            goto LABEL_265;
          }
          uint64_t v98 = (void *)*((void *)&v345 + 1);
          type metadata accessor for CFString(0LL);
          uint64_t v100 = (void *)swift_dynamicCastUnknownClassUnconditional(v97, v99, 0LL, 0LL, 0LL);
          uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          uint64_t v103 = v102;

          if (v98)
          {
            uint64_t v104 = v98[2];
            if (!v104) {
              goto LABEL_73;
            }
            uint64_t v105 = v98[4];
            uint64_t v106 = v98[5];
            if ((v105 != v101 || v106 != v103) && (_stringCompareWithSmolCheck(_:_:expecting:)(v105, v106) & 1) == 0)
            {
              uint64_t v56 = v335;
              if (v104 == 1) {
                goto LABEL_76;
              }
              uint64_t v178 = v98[6];
              uint64_t v179 = v98[7];
              if ((v178 != v101 || v179 != v103) && (_stringCompareWithSmolCheck(_:_:expecting:)(v178, v179) & 1) == 0)
              {
                if (v104 == 2)
                {
LABEL_76:
                  swift_bridgeObjectRelease(v103);
                  sub_10004908C((uint64_t)&v341);
                  unint64_t v39 = v338;
                  goto LABEL_135;
                }

                v180 = v98 + 9;
                uint64_t v181 = 2LL;
                while (1)
                {
                  uint64_t v182 = v181 + 1;
                  if (__OFADD__(v181, 1LL)) {
                    goto LABEL_261;
                  }
                  uint64_t v183 = *(v180 - 1);
                  uint64_t v184 = *v180;
                  BOOL v185 = v183 == v101 && v184 == v103;
                  if (v185 || (_stringCompareWithSmolCheck(_:_:expecting:)(v183, v184) & 1) != 0) {
                    break;
                  }
                  v180 += 2;
                  ++v181;
                  if (v182 == v104) {
                    goto LABEL_139;
                  }
                }

                unint64_t v37 = v334;
              }
            }
          }

          uint64_t v107 = (void *)v345;
          if ((void)v345)
          {
            uint64_t v108 = *(void *)(v345 + 16);
            if (v108)
            {
              uint64_t v109 = *(void *)(v345 + 32);
              uint64_t v110 = *(void *)(v345 + 40);
              BOOL v111 = v109 == v101 && v110 == v103;
              if (!v111 && (_stringCompareWithSmolCheck(_:_:expecting:)(v109, v110) & 1) == 0)
              {
                if (v108 == 1) {
                  goto LABEL_78;
                }
                uint64_t v186 = v107[6];
                uint64_t v187 = v107[7];
                if ((v186 != v101 || v187 != v103)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)(v186, v187) & 1) == 0)
                {
                  if (v108 == 2) {
                    goto LABEL_78;
                  }
                  swift_bridgeObjectRetain(v107);
                  NSURL v188 = v107 + 9;
                  uint64_t v189 = 2LL;
                  while (1)
                  {
                    uint64_t v190 = v189 + 1;
                    if (__OFADD__(v189, 1LL)) {
                      goto LABEL_262;
                    }
                    uint64_t v191 = *(v188 - 1);
                    uint64_t v192 = *v188;
                    BOOL v193 = v191 == v101 && v192 == v103;
                    if (v193 || (_stringCompareWithSmolCheck(_:_:expecting:)(v191, v192) & 1) != 0) {
                      break;
                    }
                    v188 += 2;
                    ++v189;
                    if (v190 == v108)
                    {
                      swift_bridgeObjectRelease(v107);
                      BOOL v33 = v325;
                      goto LABEL_78;
                    }
                  }

                  swift_bridgeObjectRelease(v107);
                  BOOL v33 = v325;
                  unint64_t v37 = v334;
                }
              }

LABEL_73:
              swift_bridgeObjectRelease(v103);
              goto LABEL_74;
            }
          }

LABEL_78:
          swift_bridgeObjectRelease(v103);
          uint64_t v113 = (void *)v352;
          if (!(void)v352) {
            goto LABEL_86;
          }
          __n128 v114 = swift_bridgeObjectRetain(v352);
          uint64_t v115 = v314;
          uint64_t v116 = static Locale.current.getter(v114);
          uint64_t v117 = v315;
          Locale.language.getter(v116);
          uint64_t v118 = (*(uint64_t (**)(char *, uint64_t))(v326 + 8))(v115, v327);
          Locale.Language.region.getter(v118);
          (*(void (**)(char *, uint64_t))(v328 + 8))(v117, v329);
          uint64_t v119 = type metadata accessor for Locale.Region(0LL);
          uint64_t v120 = *(void *)(v119 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v33, 1LL, v119) == 1)
          {
            swift_bridgeObjectRelease(v113);
            sub_10004908C((uint64_t)&v341);
            sub_10000C234((uint64_t)v33, (uint64_t *)&unk_100097278);
            goto LABEL_133;
          }

          uint64_t v121 = Locale.Region.identifier.getter();
          uint64_t v103 = v122;
          (*(void (**)(char *, uint64_t))(v120 + 8))(v33, v119);
          uint64_t v123 = v113[2];
          if (!v123)
          {
            swift_bridgeObjectRelease(v113);
LABEL_139:
            swift_bridgeObjectRelease(v103);
            sub_10004908C((uint64_t)&v341);
LABEL_133:
            unint64_t v37 = v334;
            goto LABEL_134;
          }

          uint64_t v124 = v113[4];
          uint64_t v125 = v113[5];
          if (v124 == v121 && v125 == v103 || (_stringCompareWithSmolCheck(_:_:expecting:)(v124, v125) & 1) != 0) {
            goto LABEL_85;
          }
          unint64_t v37 = v334;
          if (v123 == 1) {
            goto LABEL_167;
          }
          if ((uint64_t v194 = v113[6], v195 = v113[7], v194 == v121) && v195 == v103
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v194, v195) & 1) != 0)
          {
LABEL_85:
            swift_bridgeObjectRelease(v113);
            swift_bridgeObjectRelease(v103);
            goto LABEL_86;
          }

          if (v123 == 2)
          {
LABEL_167:
            swift_bridgeObjectRelease(v113);
            goto LABEL_73;
          }

          swift_bridgeObjectRetain(v113);
          v196 = v113 + 9;
          uint64_t v197 = 2LL;
          while (1)
          {
            uint64_t v198 = v197 + 1;
            if (__OFADD__(v197, 1LL)) {
              goto LABEL_264;
            }
            uint64_t v199 = *(v196 - 1);
            uint64_t v200 = *v196;
            BOOL v201 = v199 == v121 && v200 == v103;
            if (v201 || (_stringCompareWithSmolCheck(_:_:expecting:)(v199, v200) & 1) != 0) {
              break;
            }
            v196 += 2;
            ++v197;
            if (v198 == v123)
            {
              swift_bridgeObjectRelease(v103);
              swift_bridgeObjectRelease_n(v113, 2LL);
              BOOL v33 = v325;
              unint64_t v37 = v334;
LABEL_74:
              sub_10004908C((uint64_t)&v341);
LABEL_134:
              unint64_t v39 = v338;
              uint64_t v56 = v335;
LABEL_135:
              if (++v82 == (void)v337)
              {
                swift_bridgeObjectRelease(v330);
                sub_10001C2FC(v331, v317, v56, 0);
                swift_bridgeObjectRelease(v56);
                uint64_t v38 = v304;
                goto LABEL_6;
              }

              if (v82 >= *(void *)(v56 + 16))
              {
LABEL_256:
                __break(1u);
LABEL_257:
                __break(1u);
LABEL_258:
                __break(1u);
LABEL_259:
                __break(1u);
LABEL_260:
                __break(1u);
LABEL_261:
                __break(1u);
LABEL_262:
                __break(1u);
LABEL_263:
                __break(1u);
LABEL_264:
                __break(1u);
LABEL_265:
                __break(1u);
                goto LABEL_266;
              }

              goto LABEL_51;
            }
          }

          swift_bridgeObjectRelease(v103);
          swift_bridgeObjectRelease_n(v113, 2LL);
LABEL_86:
          id v126 = v308;
          uint64_t v127 = static Locale.current.getter(v112);
          uint64_t v128 = v309;
          Locale.language.getter(v127);
          uint64_t v129 = (*(uint64_t (**)(char *, uint64_t))(v326 + 8))(v126, v327);
          uint64_t v130 = (uint64_t)v307;
          Locale.Language.region.getter(v129);
          (*(void (**)(char *, uint64_t))(v328 + 8))(v128, v329);
          uint64_t v131 = type metadata accessor for Locale.Region(0LL);
          uint64_t v132 = *(void *)(v131 - 8);
          int v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v130, 1LL, v131);
          uint64_t v134 = v330;
          if (v133 == 1)
          {
            sub_10000C234(v130, (uint64_t *)&unk_100097278);
          }

          else
          {
            uint64_t v135 = v353;
            uint64_t v136 = Locale.Region.identifier.getter();
            uint64_t v138 = v137;
            uint64_t v139 = v130;
            uint64_t v140 = v135;
            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v139, v131);
            if (v135 && (uint64_t v320 = *(void *)(v135 + 16)) != 0)
            {
              uint64_t v321 = v135 + 32;
              swift_bridgeObjectRetain(v135);
              unint64_t v141 = 0LL;
              uint64_t v305 = v135;
              do
              {
                if (v141 >= *(void *)(v140 + 16)) {
                  goto LABEL_258;
                }
                uint64_t v142 = (double *)(v321 + 16 * v141);
                uint64_t v143 = *(void **)v142;
                uint64_t v144 = *(void *)(*(void *)v142 + 16LL);
                if (v144)
                {
                  double v145 = v142[1];
                  uint64_t v146 = v143[4];
                  uint64_t v147 = v143[5];
                  swift_bridgeObjectRetain(*(void *)v142);
                  if (v146 == v136 && v147 == v138)
                  {
                    uint64_t v134 = v330;
                    goto LABEL_184;
                  }

                  char v149 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v147);
                  swift_bridgeObjectRetain_n(v143, 2LL);
                  if ((v149 & 1) != 0) {
                    goto LABEL_182;
                  }
                  if (v144 != 1)
                  {
                    uint64_t v150 = v143[6];
                    uint64_t v151 = v143[7];
                    if (v150 == v136 && v151 == v138)
                    {
LABEL_182:
                      uint64_t v134 = v330;
                      goto LABEL_183;
                    }

                    char v153 = _stringCompareWithSmolCheck(_:_:expecting:)(v150, v151);
                    uint64_t v134 = v330;
                    if ((v153 & 1) != 0) {
                      goto LABEL_183;
                    }
                    if (v144 != 2)
                    {
                      uint64_t v154 = v143[8];
                      uint64_t v155 = v143[9];
                      if (v154 == v136 && v155 == v138
                        || (_stringCompareWithSmolCheck(_:_:expecting:)(v154, v155) & 1) != 0)
                      {
                        goto LABEL_183;
                      }

                      if (v144 != 3)
                      {
                        int v156 = v143 + 11;
                        uint64_t v157 = 3LL;
                        while (1)
                        {
                          uint64_t v158 = v157 + 1;
                          if (__OFADD__(v157, 1LL)) {
                            goto LABEL_259;
                          }
                          uint64_t v159 = *(v156 - 1);
                          uint64_t v160 = *v156;
                          BOOL v161 = v159 == v136 && v160 == v138;
                          if (v161 || (_stringCompareWithSmolCheck(_:_:expecting:)(v159, v160) & 1) != 0) {
                            break;
                          }
                          v156 += 2;
                          ++v157;
                          if (v158 == v144) {
                            goto LABEL_91;
                          }
                        }

                        uint64_t v134 = v330;
                        uint64_t v140 = v305;
LABEL_183:
                        swift_bridgeObjectRelease_n(v143, 2LL);
LABEL_184:
                        swift_bridgeObjectRelease(v138);
                        swift_bridgeObjectRelease(v143);
                        swift_bridgeObjectRelease(v140);
                        goto LABEL_125;
                      }
                    }
                  }

LABEL_91:
                  swift_bridgeObjectRelease_n(v143, 2LL);
                  swift_bridgeObjectRelease(v143);
                  uint64_t v134 = v330;
                  uint64_t v140 = v305;
                }

                ++v141;
              }

              while (v141 != v320);
              swift_bridgeObjectRelease(v138);
              uint64_t v162 = v140;
            }

            else
            {
              uint64_t v162 = v138;
            }

            swift_bridgeObjectRelease(v162);
          }

          if (BYTE8(v343)) {
            double v145 = 1.0;
          }
          else {
            double v145 = *(double *)&v343;
          }
LABEL_125:
          uint64_t v163 = v312[3];
          uint64_t v164 = v312[4];
          sub_10000A32C(v312, v163);
          if ((*(double (**)(uint64_t, uint64_t))(v164 + 24))(v163, v164) >= v145)
          {
            swift_bridgeObjectRelease(v134);
            sub_10004908C((uint64_t)&v341);
            uint64_t v234 = v335;
            sub_10001C2FC(v331, v317, v335, 0);
            swift_bridgeObjectRelease(v234);
            uint64_t v5 = v322;
            BOOL v33 = v325;
            unint64_t v37 = v334;
            uint64_t v38 = v304;
            goto LABEL_202;
          }

          int v165 = BYTE9(v351);
          __int128 v166 = v349;
          char v167 = v350;
          __int128 v168 = v342;
          uint64_t v169 = (uint64_t)v306;
          URL.init(string:)(v342, *((void *)&v342 + 1));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v310 + 48))(v169, 1LL, v311) == 1)
          {
            sub_10000C234(v169, &qword_100096350);
            if (qword_10009C5E0 != -1) {
              swift_once(&qword_10009C5E0, sub_100043E58);
            }
            uint64_t v5 = v322;
            uint64_t v170 = sub_100009FC4(v322, (uint64_t)qword_10009EE08);
            v172 = v318;
            uint64_t v171 = v319;
            (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v318, v170, v5);
            uint64_t v173 = sub_100048FB8((uint64_t)&v341);
            __n128 v174 = (os_log_s *)Logger.logObject.getter(v173);
            os_log_type_t v175 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v174, v175))
            {
              v176 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v177 = swift_slowAlloc(32LL, -1LL);
              uint64_t v340 = v177;
              *(_DWORD *)v176 = v302.n128_u32[0];
              swift_bridgeObjectRetain(*((void *)&v168 + 1));
              uint64_t v339 = sub_100009984(v168, *((unint64_t *)&v168 + 1), &v340);
              uint64_t v5 = v322;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v339, v303, v176 + 4, v176 + 12);
              swift_bridgeObjectRelease(*((void *)&v168 + 1));
              sub_10004908C((uint64_t)&v341);
              sub_10004908C((uint64_t)&v341);
              _os_log_impl((void *)&_mh_execute_header, v174, v175, "invalid URL %s", v176, 0xCu);
              swift_arrayDestroy(v177, 1LL, v301);
              swift_slowDealloc(v177, -1LL, -1LL);
              swift_slowDealloc(v176, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v319 + 8))(v318, v5);
            }

            else
            {
              sub_10004908C((uint64_t)&v341);
              sub_10004908C((uint64_t)&v341);

              (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v5);
            }

            BOOL v33 = v325;
            goto LABEL_133;
          }

          swift_bridgeObjectRelease(v335);
          uint64_t v236 = v310;
          uint64_t v235 = v311;
          v237 = v290;
          (*(void (**)(char *, uint64_t, uint64_t))(v310 + 32))(v290, v169, v311);
          uint64_t v238 = v296[4];
          sub_100047A34(v166, *((uint64_t *)&v166 + 1), v167);
          uint64_t v239 = sub_100048704((void *)v166, *((uint64_t *)&v166 + 1), v167, v238);
          sub_100047A58(v166, *((uint64_t *)&v166 + 1), v167);
          (*(void (**)(uint64_t, char *, uint64_t))(v236 + 16))(v291, v237, v235);
          BOOL v240 = sub_100051374((v165 == 2) | v165 & 1);
          BOOL v241 = (_DWORD)v333 != 2 && sub_100051374(v333 & 1);
          uint64_t v245 = (uint64_t)v286;
          BOOL v33 = v325;
          unint64_t v37 = v334;
          sub_10004908C((uint64_t)&v341);
          sub_1000662BC(v300, v330, v291, v239, v240, v241, v245, v145);
          uint64_t v5 = v322;
          if ((v332 & 1) != 0)
          {
            uint64_t v246 = v287;
            sub_100049160(v245, v287);
            swift_storeEnumTagMultiPayload(v246, v295, 0LL);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v299);
            unint64_t v39 = v338;
            uint64_t v248 = v335;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
              v249 = v299;
            }
            else {
              v249 = (void *)sub_100046214(0, v299[2] + 1LL, 1, (unint64_t)v299);
            }
            unint64_t v251 = v249[2];
            unint64_t v250 = v249[3];
            unint64_t v252 = v251 + 1;
            if (v251 >= v250 >> 1)
            {
              v253 = (void *)sub_100046214(v250 > 1, v251 + 1, 1, (unint64_t)v249);
              uint64_t v254 = v287;
              v299 = v253;
            }

            else
            {
              v299 = v249;
              v253 = v249;
              uint64_t v254 = v287;
            }
          }

          else
          {
            uint64_t v255 = v288;
            sub_100049160(v245, v288);
            swift_storeEnumTagMultiPayload(v255, v295, 0LL);
            char v256 = swift_isUniquelyReferenced_nonNull_native(v293);
            unint64_t v39 = v338;
            uint64_t v248 = v335;
            if ((v256 & 1) != 0) {
              v257 = v293;
            }
            else {
              v257 = (void *)sub_100046214(0, v293[2] + 1LL, 1, (unint64_t)v293);
            }
            unint64_t v251 = v257[2];
            unint64_t v258 = v257[3];
            unint64_t v252 = v251 + 1;
            if (v251 >= v258 >> 1)
            {
              v253 = (void *)sub_100046214(v258 > 1, v251 + 1, 1, (unint64_t)v257);
              uint64_t v254 = v288;
              v293 = v253;
            }

            else
            {
              v293 = v257;
              v253 = v257;
              uint64_t v254 = v288;
            }
          }

          v253[2] = v252;
          sub_100049B9C( v254,  (uint64_t)v253 + ((*(unsigned __int8 *)(v294 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v294 + 80))
          + *(void *)(v294 + 72) * v251,
            type metadata accessor for SessionConfiguration.Backend);
          sub_10001C2FC(v331, v317, v248, 0);
          sub_1000491A4(v245);
          (*(void (**)(char *, uint64_t))(v310 + 8))(v290, v311);
          uint64_t v38 = v304;
        }

        else
        {
          swift_bridgeObjectRelease(v56);
          sub_10004908C((uint64_t)&v341);
          if (qword_10009C5E0 != -1) {
            swift_once(&qword_10009C5E0, sub_100043E58);
          }
          sub_100009FC4(v5, (uint64_t)qword_10009EE08);
          unint64_t v202 = v330;
          swift_bridgeObjectRetain(v330);
          v204 = (os_log_s *)Logger.logObject.getter(v203);
          os_log_type_t v205 = static os_log_type_t.debug.getter();
          BOOL v206 = os_log_type_enabled(v204, v205);
          uint64_t v38 = v304;
          if (v206)
          {
            v207 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v208 = swift_slowAlloc(32LL, -1LL);
            uint64_t v340 = v208;
            *(_DWORD *)v207 = v292.n128_u32[0];
            swift_bridgeObjectRetain(v202);
            uint64_t v339 = sub_100009984(v300, v202, &v340);
            BOOL v33 = v325;
            unint64_t v37 = v334;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v339, v303, v207 + 4, v207 + 12);
            swift_bridgeObjectRelease_n(v202, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v204, v205, "skipping %{public}s: dnu disabled", v207, 0xCu);
            swift_arrayDestroy(v208, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v208, -1LL, -1LL);
            swift_slowDealloc(v207, -1LL, -1LL);

            uint64_t v209 = v331;
            uint64_t v210 = v317;
            uint64_t v211 = v335;
          }

          else
          {

            swift_bridgeObjectRelease_n(v202, 2LL);
            uint64_t v209 = v331;
            uint64_t v210 = v317;
            uint64_t v211 = v56;
          }

          sub_10001C2FC(v209, v210, v211, 0);
LABEL_202:
          unint64_t v39 = v338;
        }

LABEL_6:
        unint64_t v45 = v323;
        int64_t v46 = v324;
      }
    }
  }

  while (v57 != 1);
  unint64_t v323 = v45;
  int64_t v324 = v46;
  uint64_t v58 = v331;
  sub_10001C2AC(v331, v55, v56, 1);
  swift_bridgeObjectRetain(v58);
  char v59 = sub_10003D184();
  swift_beginAccess(v59, v354, 0LL, 0LL);
  if ((*v59 & 1) == 0)
  {
    sub_10001C2FC(v58, v55, v56, 1);
    uint64_t v47 = v58;
    uint64_t v48 = v55;
LABEL_5:
    sub_10001C2FC(v47, v48, v56, 1);
    goto LABEL_6;
  }

  uint64_t v317 = v55;
  uint64_t v60 = *(void *)(v58 + 16);
  if (!v60)
  {
    uint64_t v212 = v317;
    sub_10001C2FC(v58, v317, v56, 1);
    uint64_t v47 = v58;
    uint64_t v48 = v212;
    goto LABEL_5;
  }

  uint64_t v335 = v56;
  uint64_t v61 = 0LL;
  *(void *)&__int128 v337 = v58 + 32;
  while (1)
  {
    uint64_t v62 = v337 + 72 * v61;
    uint64_t v63 = *(void **)v62;
    uint64_t v64 = *(void *)(*(void *)v62 + 16LL);
    if (!v64) {
      goto LABEL_25;
    }
    double v65 = *(double *)(v62 + 8);
    int v66 = *(unsigned __int8 *)(v62 + 16);
    v336 = *(void **)(v62 + 24);
    uint64_t v321 = *(void *)(v62 + 32);
    LODWORD(v330) = *(unsigned __int8 *)(v62 + 40);
    uint64_t v67 = *(void *)(v62 + 56);
    uint64_t v332 = *(void *)(v62 + 48);
    LODWORD(v333) = *(unsigned __int8 *)(v62 + 64);
    uint64_t v68 = v63[4];
    uint64_t v69 = v63[5];
    BOOL v70 = v68 == v37 && v69 == v39;
    if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)(v68, v69) & 1) != 0) {
      break;
    }
    if (v64 != 1)
    {
      uint64_t v71 = v63[6];
      uint64_t v72 = v63[7];
      BOOL v73 = v71 == v37 && v72 == v39;
      if (v73 || (_stringCompareWithSmolCheck(_:_:expecting:)(v71, v72) & 1) != 0) {
        break;
      }
      if (v64 != 2)
      {
        uint64_t v74 = v63 + 9;
        uint64_t v75 = 2LL;
        do
        {
          uint64_t v76 = v75 + 1;
          if (__OFADD__(v75, 1LL)) {
            goto LABEL_257;
          }
          uint64_t v77 = *(v74 - 1);
          uint64_t v78 = *v74;
          if (v77 == v334 && v78 == v338)
          {
            unint64_t v37 = v334;
            goto LABEL_205;
          }

          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v77, v78) & 1) != 0)
          {
            unint64_t v37 = v334;
            goto LABEL_205;
          }

          v74 += 2;
          ++v75;
        }

        while (v76 != v64);
      }
    }

    swift_bridgeObjectRelease(v35);
    sub_10000C234((uint64_t)v19, &qword_100096AA8);
    uint64_t v10 = v80;
    uint64_t v27 = v81;
    uint64_t v26 = v82;
  }

  BOOL v33 = v26 + 4;
  if (v26 + 4 >= v77) {
    goto LABEL_48;
  }
  uint64_t v31 = *(void *)(v76 + 8 * v33);
  if (v31)
  {
    uint64_t v32 = v26 + 4;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
      JUMPOUT(0x10004D40CLL);
    }

    if (v32 >= v77) {
      break;
    }
    uint64_t v31 = *(void *)(v76 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }

LABEL_205:
  v213 = v336;
  if (v66) {
    double v65 = 1.0;
  }
  uint64_t v215 = v312[3];
  uint64_t v214 = v312[4];
  sub_10000A32C(v312, v215);
  *(void *)&__int128 v337 = *(void *)(v214 + 24);
  swift_bridgeObjectRetain(v63);
  uint64_t v216 = (uint64_t)v213;
  uint64_t v217 = v321;
  unsigned __int8 v218 = v330;
  sub_100047A1C(v216, v321, v330);
  uint64_t v219 = v332;
  sub_100047A34(v332, v67, (char)v333);
  if (((double (*)(uint64_t, uint64_t))v337)(v215, v214) >= v65)
  {
    swift_bridgeObjectRelease(v63);
    sub_100047A40((uint64_t)v336, v217, v218);
    sub_100047A58(v219, v67, (char)v333);
    uint64_t v231 = v331;
    uint64_t v232 = v317;
    uint64_t v233 = v335;
    sub_10001C2FC(v331, v317, v335, 1);
    sub_10001C2FC(v231, v232, v233, 1);
    uint64_t v5 = v322;
    unint64_t v45 = v323;
    uint64_t v38 = v304;
    unint64_t v39 = v338;
    int64_t v46 = v324;
    BOOL v33 = v325;
    goto LABEL_7;
  }

  *(void *)&__int128 v337 = v67;
  uint64_t v220 = v296[4];
  uint64_t v320 = sub_100048704(v336, v217, v218, v220);
  uint64_t v38 = v304;
  uint64_t v221 = v331;
  if ((v333 & 1) == 0)
  {
    uint64_t v222 = v332;
    swift_bridgeObjectRetain(v332);
    v230 = (void *)v222;
    BOOL v33 = v325;
    goto LABEL_233;
  }

  uint64_t v222 = v332;
  BOOL v33 = v325;
  if (!*(void *)(v220 + 16))
  {
LABEL_232:
    v230 = _swiftEmptyArrayStorage;
    goto LABEL_233;
  }

  uint64_t v223 = v337;
  swift_bridgeObjectRetain(v337);
  unint64_t v224 = sub_100010540(v222, v223);
  if ((v225 & 1) == 0)
  {
    sub_100047A58(v222, v223, 1);
    goto LABEL_232;
  }

  uint64_t v226 = *(void *)(v220 + 56) + 16 * v224;
  v227 = *(void **)v226;
  int v228 = *(unsigned __int8 *)(v226 + 8);
  swift_bridgeObjectRetain(*(void *)v226);
  char v229 = 1;
  sub_100047A58(v222, v223, 1);
  swift_bridgeObjectRelease(v63);
  uint64_t v63 = v227;
  v230 = _swiftEmptyArrayStorage;
  BOOL v70 = v228 == 1;
  uint64_t v38 = v304;
  if (!v70)
  {
LABEL_233:
    swift_bridgeObjectRelease(v63);
    char v229 = (char)v333;
    v227 = v230;
  }

  sub_100047A40((uint64_t)v336, v321, v330);
  sub_100047A58(v222, v337, v229);
  int64_t v259 = v227[2];
  if (v259)
  {
    *(void *)&__int128 v341 = _swiftEmptyArrayStorage;
    sub_1000475B8(0, v259, 0);
    v260 = (void *)v341;
    v333 = v227;
    v261 = v227 + 8;
    do
    {
      uint64_t v263 = *((void *)v261 - 4);
      uint64_t v262 = *((void *)v261 - 3);
      LODWORD(v336) = *((unsigned __int8 *)v261 - 16);
      uint64_t v264 = *((void *)v261 - 1);
      __int128 v337 = *v261;
      *(void *)&__int128 v341 = v260;
      unint64_t v266 = v260[2];
      unint64_t v265 = v260[3];
      swift_bridgeObjectRetain_n(v262, 2LL);
      swift_bridgeObjectRetain(v337);
      swift_bridgeObjectRetain(*((void *)&v337 + 1));
      if (v266 >= v265 >> 1)
      {
        sub_1000475B8(v265 > 1, v266 + 1, 1);
        v260 = (void *)v341;
      }

      v261 += 3;
      v260[2] = v266 + 1;
      v267 = &v260[8 * v266];
      v267[4] = v263;
      v267[5] = v262;
      v267[6] = v263;
      v267[7] = v262;
      *((_BYTE *)v267 + 64) = (_BYTE)v336;
      v267[9] = v264;
      *((_OWORD *)v267 + 5) = v337;
      --v259;
    }

    while (v259);
    swift_bridgeObjectRelease(v333);
    uint64_t v56 = v335;
    sub_10001C2FC(v331, v317, v335, 1);
    BOOL v33 = v325;
    unint64_t v37 = v334;
    uint64_t v38 = v304;
  }

  else
  {
    swift_bridgeObjectRelease(v227);
    uint64_t v56 = v335;
    sub_10001C2FC(v221, v317, v335, 1);
    v260 = _swiftEmptyArrayStorage;
  }

  uint64_t v268 = v260[2];
  uint64_t v5 = v322;
  if (v268)
  {
    sub_100009FDC(&qword_100097618);
    v269 = (void *)static _DictionaryStorage.allocate(capacity:)(v268);
  }

  else
  {
    v269 = &_swiftEmptyDictionarySingleton;
  }

  *(void *)&__int128 v341 = v269;
  swift_bridgeObjectRetain(v260);
  uint64_t v270 = v297;
  sub_100046788(v271, 1, &v341);
  uint64_t v297 = v270;
  if (!v270)
  {
    swift_bridgeObjectRelease(v260);
    uint64_t v272 = XPCIncomingConnection.init(conn:)(v320);
    v273 = v298;
    void *v298 = v274;
    v273[1] = v272;
    v273[2] = v275;
    swift_storeEnumTagMultiPayload(v273, v295, 1LL);
    if ((swift_isUniquelyReferenced_nonNull_native(v299) & 1) != 0)
    {
      unint64_t v39 = v338;
      v276 = v299;
    }

    else
    {
      v276 = (void *)sub_100046214(0, v299[2] + 1LL, 1, (unint64_t)v299);
      unint64_t v39 = v338;
    }

    unint64_t v278 = v276[2];
    unint64_t v277 = v276[3];
    if (v278 >= v277 >> 1) {
      v276 = (void *)sub_100046214(v277 > 1, v278 + 1, 1, (unint64_t)v276);
    }
    v276[2] = v278 + 1;
    unint64_t v279 = (*(unsigned __int8 *)(v294 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v294 + 80);
    v299 = v276;
    sub_100049B9C( (uint64_t)v298,  (uint64_t)v276 + v279 + *(void *)(v294 + 72) * v278,  type metadata accessor for SessionConfiguration.Backend);
    uint64_t v47 = v331;
    uint64_t v48 = v317;
    goto LABEL_5;
  }

LABEL_266:
  uint64_t result = swift_unexpectedError(v297, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
  __break(1u);
  return result;
}

void *sub_100045EF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_100097670);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100047A64(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100045FFC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_100097668);
      uint64_t v11 = (void *)swift_allocObject(v10, v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100047E8C(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000460F4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC(&qword_1000976B8);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000485F8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_100046214(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100009FDC(&qword_1000976A0);
  uint64_t v11 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for SessionConfiguration.Backend(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20, v22);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100049A84(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10004641C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease(a1);
  }
  unsigned __int8 v7 = *(_BYTE *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain(a1);
  unsigned __int8 v49 = v7;
  uint64_t v9 = (void *)*a3;
  unint64_t v10 = sub_100046ADC(v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v11 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_24;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  uint64_t v17 = v9[3];
  swift_bridgeObjectRetain(v8);
  if (v17 >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_100046B38();
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_100046788(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v36 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n(v3, 2LL);
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v35 = v3;
  while (1)
  {
    if (v6 >= *(void *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }

    __int128 v41 = *(_OWORD *)(v3 + v5 + 80);
    char v7 = *(_BYTE *)(v3 + v5 + 64);
    uint64_t v8 = *(void *)(v3 + v5 + 72);
    uint64_t v10 = *(void *)(v3 + v5 + 48);
    uint64_t v9 = *(void *)(v3 + v5 + 56);
    uint64_t v12 = *(void *)(v3 + v5 + 32);
    uint64_t v11 = *(void *)(v3 + v5 + 40);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(*((void *)&v41 + 1));
    if (!v11) {
      return swift_bridgeObjectRelease_n(v3, 2LL);
    }
    uint64_t v37 = v10;
    uint64_t v38 = v9;
    uint64_t v34 = v13;
    v44[0] = v12;
    v44[1] = v11;
    uint64_t v14 = (void *)*a3;
    unint64_t v16 = sub_100010540(v12, v11);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_21;
    }
    char v20 = v15;
    if (v14[3] < v19) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      sub_100046CD8();
      if ((v20 & 1) != 0) {
        goto LABEL_16;
      }
    }

unint64_t sub_100046ADC(unsigned __int8 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_1000474FC(a1, v3);
}

void sub_100046B38()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100097660);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void sub_100046CD8()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100097618);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }

Swift::Int sub_100046ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100097660);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    Swift::String v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    __int128 v31 = v3;
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint64_t v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *Swift::String v33 = -1LL << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

Swift::Int sub_1000471A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100097618);
  char v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v38 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    char v40 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v39 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }

      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v23 >= v39) {
          goto LABEL_36;
        }
        unint64_t v24 = v40[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_36;
          }
          unint64_t v24 = v40[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v38;
              if ((v42 & 1) != 0)
              {
                uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v40 = -1LL << v37;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v39) {
                  goto LABEL_36;
                }
                unint64_t v24 = v40[v14];
                ++v25;
                if (v24) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v25;
          }
        }

unint64_t sub_1000474FC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

uint64_t sub_10004759C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000475D4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000475B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000477B4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000475D4(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100009FDC((uint64_t *)&unk_100097150);
  uint64_t v11 = *(void *)(type metadata accessor for ServiceEventValue(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21, v22);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

uint64_t sub_1000477B4(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100009FDC(&qword_1000976A8);
    uint64_t v11 = (void *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 4;
  uint64_t v15 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v11 + 4, a4 + 4, v8 << 6);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    sub_100009FDC(&qword_1000976B0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10004793C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_100017380(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1 + 1;
  return sub_100033870(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000479B4(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

unint64_t sub_1000479D8()
{
  unint64_t result = qword_10009C5E8[0];
  if (!qword_10009C5E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1000781F8, &type metadata for Storebag._StorebagRoot);
    atomic_store(result, qword_10009C5E8);
  }

  return result;
}

uint64_t sub_100047A1C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100047A34(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_100047A34(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100047A40(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100047A58(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_100047A58(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100047A64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100009FDC(&qword_100097678);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100047B6C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL) & 1) != 0)
  {
    return 4LL;
  }

  if (a1 == 0x5F68736572666572LL && a2 == 0xED0000656C637963LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5F68736572666572LL, 0xED0000656C637963LL) & 1) != 0)
  {
    return 5LL;
  }

  if (a1 == 0x765F646572616873LL && a2 == 0xEC00000073656C61LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x765F646572616873LL, 0xEC00000073656C61LL) & 1) != 0)
  {
    return 6LL;
  }

  unint64_t v6 = 0xEB00000000746E65LL;
  if (a1 == 0x6D706F6C65766564LL && a2 == 0xEB00000000746E65LL)
  {
    uint64_t v4 = 0LL;
LABEL_17:
    swift_bridgeObjectRelease(v6);
    return v4;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D706F6C65766564LL, 0xEB00000000746E65LL);
  swift_bridgeObjectRelease(0xEB00000000746E65LL);
  uint64_t v4 = 0LL;
  if ((v7 & 1) != 0) {
    return v4;
  }
  if (a1 == 0x6E695F656C707061LL && a2 == 0xEE006C616E726574LL)
  {
    uint64_t v4 = 1LL;
    swift_bridgeObjectRelease(0xEE006C616E726574LL);
    return v4;
  }

  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E695F656C707061LL, 0xEE006C616E726574LL);
  swift_bridgeObjectRelease(0xEE006C616E726574LL);
  if ((v8 & 1) != 0) {
    return 1LL;
  }
  if (a1 == 1684366707 && a2 == 0xE400000000000000LL)
  {
    uint64_t v4 = 2LL;
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return v4;
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(1684366707LL, 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  if ((v9 & 1) != 0) {
    return 2LL;
  }
  uint64_t v4 = 3LL;
  if (a1 == 0x657361656C6572LL)
  {
    unint64_t v6 = 0xE700000000000000LL;
    if (a2 == 0xE700000000000000LL) {
      goto LABEL_17;
    }
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657361656C6572LL, 0xE700000000000000LL);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  if ((v10 & 1) != 0) {
    return 3LL;
  }
  else {
    return 7LL;
  }
}

char *sub_100047E8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100047F70@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_100097640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_100049808();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Storebag._StorebagRoot.CodingKeys,  &type metadata for Storebag._StorebagRoot.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  uint64_t v39 = v6;
  char v36 = a2;
  LOBYTE(v41) = 4;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
  uint64_t v15 = v14;
  LOBYTE(v41) = 5;
  __n128 v16 = swift_bridgeObjectRetain(v14);
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5, v16);
  uint64_t v35 = v13;
  uint64_t v17 = sub_100009FDC(&qword_100097648);
  char v40 = 6;
  uint64_t v18 = sub_1000499D4(&qword_100097650, &qword_100097648, (void (*)(void))sub_10004984C);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, v17, &v40, v5, v17, v18, v19);
  uint64_t v33 = v41;
  __n128 v20 = swift_bridgeObjectRetain(v41);
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter(v5, v20);
  uint64_t v22 = v21;
  if (*(void *)(v21 + 16))
  {
    v32[1] = v5;
    v32[2] = v15;
    swift_bridgeObjectRetain(v21);
    uint64_t v37 = v22;
    __asm { BR              X8 }
  }

  uint64_t v23 = swift_bridgeObjectRelease(v21);
  __chkstk_darwin(v23);
  v32[-2] = v8;
  unint64_t v24 = sub_100043C10( (void (*)(uint64_t *__return_ptr, char *, __n128))sub_100049890,  (uint64_t)&v32[-4],  (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  uint64_t v25 = v24[2];
  if (v25)
  {
    sub_100009FDC(&qword_100097660);
    char v26 = (void *)static _DictionaryStorage.allocate(capacity:)(v25);
  }

  else
  {
    char v26 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = (uint64_t)v26;
  swift_bridgeObjectRetain(v24);
  sub_10004641C(v27, 1, &v41);
  swift_bridgeObjectRelease(v24);
  uint64_t v28 = v41;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v5);
  swift_retain(v28);
  sub_10000C2B4(a1);
  swift_release(v28);
  uint64_t v29 = v33;
  swift_bridgeObjectRelease(v33);
  uint64_t result = swift_bridgeObjectRelease(v15);
  uint64_t v30 = v36;
  uint64_t *v36 = v35;
  v30[1] = v15;
  char v31 = BYTE4(v34);
  *((_DWORD *)v30 + 4) = v34;
  *((_BYTE *)v30 + memset(&strm.total_in, 0, 20) = v31 & 1;
  v30[3] = v29;
  v30[4] = v28;
  return result;
}

uint64_t sub_1000485F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100009FDC(&qword_1000976C0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100048704(void *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  int v8 = ~a3;
  uint64_t v82 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v9 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  unint64_t v11 = (uint64_t *)((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (!v8) {
    goto LABEL_9;
  }
  if ((a3 & 1) == 0)
  {
    sub_100047A34((uint64_t)a1, a2, 0);
    goto LABEL_10;
  }

  if (!*(void *)(a4 + 16)) {
    goto LABEL_9;
  }
  sub_100047A34((uint64_t)a1, a2, 1);
  unint64_t v12 = sub_100010540((uint64_t)a1, a2);
  if ((v13 & 1) == 0)
  {
    sub_100047A40((uint64_t)a1, a2, a3);
    goto LABEL_9;
  }

  uint64_t v14 = *(void *)(a4 + 56) + 16 * v12;
  uint64_t v15 = *(void **)v14;
  int v16 = *(unsigned __int8 *)(v14 + 8);
  swift_bridgeObjectRetain(*(void *)v14);
  sub_100047A40((uint64_t)a1, a2, a3);
  if (v16)
  {
    swift_bridgeObjectRelease(v15);
LABEL_9:
    a1 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }

  a1 = v15;
LABEL_10:
  uint64_t result = (uint64_t)sub_1000460F4(0LL, a1[2], 0, _swiftEmptyArrayStorage);
  __int128 v85 = (void *)result;
  uint64_t v18 = a1[2];
  if (v18)
  {
    unint64_t v19 = 0LL;
    __n128 v20 = a1 + 4;
    unint64_t v69 = (unint64_t)"Swift/NativeDictionary.swift";
    unint64_t v68 = 0x800000010007BCD0LL;
    uint64_t v71 = v18;
    uint64_t v72 = a1;
    BOOL v70 = a1 + 4;
    while (1)
    {
      if (v19 >= a1[2])
      {
        __break(1u);
        return result;
      }

      unint64_t v24 = &v20[9 * v19];
      if (!v24[5]) {
        break;
      }
LABEL_14:
      if (++v19 == v18)
      {
        swift_bridgeObjectRelease(a1);
        return (uint64_t)v85;
      }
    }

    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    uint64_t v27 = v24[2];
    unint64_t v28 = v24[3];
    uint64_t v73 = v19;
    uint64_t v74 = v27;
    uint64_t v29 = v24[4];
    uint64_t v30 = v24[6];
    uint64_t v31 = v24[7];
    uint64_t v32 = v24[8];
    uint64_t v33 = *(void *)(v25 + 16);
    swift_bridgeObjectRetain(v25);
    uint64_t v80 = v26;
    swift_bridgeObjectRetain(v26);
    unint64_t v75 = v28;
    swift_bridgeObjectRetain(v28);
    uint64_t v76 = v29;
    uint64_t v77 = v32;
    uint64_t v78 = v31;
    uint64_t v79 = v30;
    sub_100035E28(v29, 0LL, v30, v31, v32);
    __n128 v34 = swift_bridgeObjectRetain(v25);
    uint64_t v35 = Set.init(minimumCapacity:)(v33, &type metadata for String, &protocol witness table for String, v34);
    uint64_t v84 = v35;
    uint64_t v36 = *(void *)(v25 + 16);
    uint64_t v81 = v25;
    if (v36)
    {
      uint64_t v37 = (uint64_t *)(v25 + 40);
      do
      {
        uint64_t v38 = *(v37 - 1);
        uint64_t v39 = *v37;
        swift_bridgeObjectRetain(*v37);
        sub_10001A168(v83, v38, v39);
        swift_bridgeObjectRelease(v83[1]);
        v37 += 2;
        --v36;
      }

      while (v36);
      swift_bridgeObjectRelease(v81);
      uint64_t v40 = v84;
    }

    else
    {
      uint64_t v40 = v35;
      swift_bridgeObjectRelease(v25);
    }

    unint64_t v19 = v73;
    uint64_t v41 = v80;
    int64_t v42 = *(void *)(v80 + 16);
    if (v42)
    {
      uint64_t v73 = v40;
      v83[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v80);
      sub_10004759C(0, v42, 0);
      uint64_t v43 = v83[0];
      __int128 v44 = (uint64_t *)(v41 + 40);
      do
      {
        uint64_t v45 = *v44;
        void *v11 = *(v44 - 1);
        v11[1] = v45;
        swift_storeEnumTagMultiPayload(v11, v82, 0LL);
        v83[0] = v43;
        unint64_t v46 = *(void *)(v43 + 16);
        unint64_t v47 = *(void *)(v43 + 24);
        swift_bridgeObjectRetain(v45);
        if (v46 >= v47 >> 1)
        {
          sub_10004759C(v47 > 1, v46 + 1, 1);
          uint64_t v43 = v83[0];
        }

        v44 += 2;
        *(void *)(v43 + swift_weakDestroy(v0 + 16) = v46 + 1;
        sub_100049B9C( (uint64_t)v11,  v43 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + *(void *)(v9 + 72) * v46,
          type metadata accessor for ServiceEventValue);
        --v42;
      }

      while (v42);
      uint64_t v41 = v80;
      swift_bridgeObjectRelease(v80);
      uint64_t v40 = v73;
    }

    uint64_t v48 = XPCIncomingConnection.init(conn:)(v40);
    uint64_t v50 = v49;
    uint64_t v51 = v74;
    unint64_t v52 = v75;
    uint64_t v53 = v81;
    if (v74 == 0x776F6C6C61LL && v75 == 0xE500000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C61LL, 0xE500000000000000LL) & 1) != 0)
    {
      uint64_t v54 = v48;
      swift_bridgeObjectRelease(v52);
      uint64_t v55 = &type metadata for EventAllowFilter;
      uint64_t v56 = &off_100090198;
      goto LABEL_32;
    }

    if (v51 == 0x65766F6D6572LL && v52 == 0xE600000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65766F6D6572LL, 0xE600000000000000LL) & 1) != 0)
    {
      uint64_t v54 = v48;
      swift_bridgeObjectRelease(v52);
      uint64_t v55 = &type metadata for EventRemoveFilter;
      uint64_t v56 = &off_1000901B0;
      goto LABEL_32;
    }

    if (v51 == 0x363532616873LL && v52 == 0xE600000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x363532616873LL, 0xE600000000000000LL) & 1) != 0)
    {
      uint64_t v54 = v48;
      swift_bridgeObjectRelease(v52);
      uint64_t v55 = &type metadata for EventSHA256KeyFilter;
      uint64_t v56 = &off_1000901C8;
      goto LABEL_32;
    }

    if (v51 == 0x73696C6574696877LL && v52 == 0xEF7365756C615674LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6574696877LL, 0xEF7365756C615674LL) & 1) != 0)
    {
      uint64_t v54 = v48;
      swift_bridgeObjectRelease(v52);
      uint64_t v55 = &type metadata for EventAllowValuesFilter;
      uint64_t v56 = &off_1000901E0;
      goto LABEL_32;
    }

    if (v51 == 0x73696C6B63616C62LL && v52 == 0xEF7365756C615674LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6B63616C62LL, 0xEF7365756C615674LL) & 1) != 0)
    {
      uint64_t v54 = v48;
      swift_bridgeObjectRelease(v52);
      uint64_t v55 = &type metadata for EventDenyValuesFilter;
      uint64_t v56 = &off_1000901F8;
      goto LABEL_32;
    }

    if (v51 == 0xD000000000000018LL && v52 == v68)
    {
      uint64_t v54 = v48;
      unint64_t v63 = v69 | 0x8000000000000000LL;
    }

    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, v69 | 0x8000000000000000LL) & 1) == 0)
      {
        if (v51 == 0x646E65707061LL && v52 == 0xE600000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E65707061LL, 0xE600000000000000LL) & 1) != 0)
        {
          uint64_t v54 = v48;
          swift_bridgeObjectRelease(v52);
          uint64_t v55 = &type metadata for EventAppendToKeyFilter;
          uint64_t v56 = &off_100090228;
        }

        else
        {
          if (v51 != 0x646E6570657270LL || v52 != 0xE700000000000000LL)
          {
            uint64_t v64 = v41;
            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E6570657270LL, 0xE700000000000000LL);
            swift_bridgeObjectRelease(v52);
            swift_bridgeObjectRelease(v64);
            swift_bridgeObjectRelease(v53);
            sub_100035E78(v76, 0LL, v79, v78, v77);
            if ((v65 & 1) == 0)
            {
              swift_bridgeObjectRelease(v50);
              uint64_t result = swift_bridgeObjectRelease(v48);
LABEL_13:
              uint64_t v18 = v71;
              a1 = v72;
              __n128 v20 = v70;
              goto LABEL_14;
            }

            uint64_t v54 = v48;
            uint64_t v55 = &type metadata for EventPrependToKeyFilter;
            uint64_t v56 = &off_100090240;
LABEL_33:
            int v57 = (void (*)(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>))v56[1];
            v83[3] = (uint64_t)v55;
            v83[4] = (uint64_t)v56;
            uint64_t v58 = sub_100017380(v83);
            v57(v54, v50, v58);
            char v59 = v85;
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000460F4(0LL, v59[2] + 1LL, 1, v59);
              char v59 = (void *)isUniquelyReferenced_nonNull_native;
              __int128 v85 = (void *)isUniquelyReferenced_nonNull_native;
            }

            unint64_t v62 = v59[2];
            unint64_t v61 = v59[3];
            if (v62 >= v61 >> 1)
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000460F4((void *)(v61 > 1), v62 + 1, 1, v59);
              char v59 = (void *)isUniquelyReferenced_nonNull_native;
              __int128 v85 = (void *)isUniquelyReferenced_nonNull_native;
            }

            __chkstk_darwin(isUniquelyReferenced_nonNull_native);
            uint64_t v22 = (uint64_t *)((char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
            (*(void (**)(uint64_t *, uint64_t *))(v23 + 16))(v22, v58);
            sub_10004793C(v62, (uint64_t)v22, (uint64_t *)&v85, (uint64_t)v55, (uint64_t)v56);
            __int128 v85 = v59;
            uint64_t result = sub_10000C2B4(v83);
            goto LABEL_13;
          }

          uint64_t v54 = v48;
          swift_bridgeObjectRelease(0xE700000000000000LL);
          uint64_t v55 = &type metadata for EventPrependToKeyFilter;
          uint64_t v56 = &off_100090240;
        }

uint64_t sub_100048FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  char v10 = *(_BYTE *)(a1 + 144);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 192);
  swift_bridgeObjectRetain(*(void *)(a1 + 104));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_100047A34(v8, v9, v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10004908C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  char v10 = *(_BYTE *)(a1 + 144);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 176);
  uint64_t v14 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  sub_100047A58(v8, v9, v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100049160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000491A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000491E4()
{
  unint64_t result = qword_100097620;
  if (!qword_100097620)
  {
    unint64_t result = swift_getWitnessTable(&unk_100077FF4, &type metadata for StorebagEnvironment);
    atomic_store(result, (unint64_t *)&qword_100097620);
  }

  return result;
}

uint64_t sub_100049228()
{
  return sub_100049254(&qword_100097628, &qword_100097630, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_100049254(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000A140(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100049298()
{
  unint64_t result = qword_100097638;
  if (!qword_100097638)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000780CC, &type metadata for Storebag.Error);
    atomic_store(result, (unint64_t *)&qword_100097638);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for StorebagEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10004932C + 4 * byte_100077FD1[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100049360 + 4 * byte_100077FCC[v4]))();
}

uint64_t sub_100049360(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100049370LL);
  }
  return result;
}

uint64_t sub_10004937C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100049384LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100049388(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049390(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagEnvironment()
{
  return &type metadata for StorebagEnvironment;
}

uint64_t destroy for Storebag(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for Storebag(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for Storebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *assignWithTake for Storebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Storebag(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Storebag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Storebag()
{
  return &type metadata for Storebag;
}

uint64_t storeEnumTagSinglePayload for Storebag.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100049604 + 4 * byte_100077FDB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100049638 + 4 * byte_100077FD6[v4]))();
}

uint64_t sub_100049638(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100049648LL);
  }
  return result;
}

uint64_t sub_100049654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004965CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100049660(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049668(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Storebag.Error()
{
  return &type metadata for Storebag.Error;
}

uint64_t destroy for Storebag._StorebagRoot(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + memset(&strm.total_in, 0, 20) = *(_BYTE *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  int v6 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + memset(&strm.total_in, 0, 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + memset(&strm.total_in, 0, 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot()
{
  return &type metadata for Storebag._StorebagRoot;
}

unint64_t sub_100049808()
{
  unint64_t result = qword_10009CA70[0];
  if (!qword_10009CA70[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10007827C, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, qword_10009CA70);
  }

  return result;
}

unint64_t sub_10004984C()
{
  unint64_t result = qword_100097658;
  if (!qword_100097658)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007713C, &type metadata for StorebagSharedValue);
    atomic_store(result, (unint64_t *)&qword_100097658);
  }

  return result;
}

void *sub_100049890@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_100009FDC(&qword_100097640);
  sub_100049990();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v8, &type metadata for Data);
  if (v2)
  {
    swift_errorRelease(v2);
    uint64_t v5 = sub_100009FDC(&qword_100097688);
    sub_1000499D4(&qword_100097690, &qword_100097688, (void (*)(void))sub_100049A40);
    unint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v5);
    uint64_t v7 = v8[0];
    *a2 = v4;
    a2[1] = v7;
  }

  else
  {
    unint64_t result = (void *)sub_10000A074(v8[0], v8[1]);
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

unint64_t sub_100049990()
{
  unint64_t result = qword_100097680;
  if (!qword_100097680)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100097680);
  }

  return result;
}

uint64_t sub_1000499D4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000A140(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100049A40()
{
  unint64_t result = qword_100097698;
  if (!qword_100097698)
  {
    unint64_t result = swift_getWitnessTable(&unk_100076ABC, &type metadata for StorebagSectionBackend);
    atomic_store(result, (unint64_t *)&qword_100097698);
  }

  return result;
}

uint64_t sub_100049A84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100049B9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA)
  {
    unsigned int v6 = *a1;
    if (v6 >= 4) {
      unsigned int v7 = v6 - 3;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 4) {
      return v7 - 3;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100049C30 + 4 * byte_100077FE0[v4]))();
  }

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100049CDC + 4 * byte_100077FEA[v5]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100049D10 + 4 * byte_100077FE5[v5]))();
}

uint64_t sub_100049D10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049D18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100049D20LL);
  }
  return result;
}

uint64_t sub_100049D2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100049D34LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100049D38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049D40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049D4C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_100049D60(_BYTE *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot.CodingKeys()
{
  return &type metadata for Storebag._StorebagRoot.CodingKeys;
}

unint64_t sub_100049D84()
{
  unint64_t result = qword_10009CB80;
  if (!qword_10009CB80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007822C, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10009CB80);
  }

  return result;
}

unint64_t sub_100049DCC()
{
  unint64_t result = qword_10009CB88[0];
  if (!qword_10009CB88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100078254, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, qword_10009CB88);
  }

  return result;
}

void sub_100049E10()
{
  qword_10009EE20 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_100049E24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100049FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_10009CC10 != -1) {
    swift_once(&qword_10009CC10, sub_100049E10);
  }
  uint64_t v6 = qword_10009EE20;
  swift_bridgeObjectRetain(qword_10009EE20);
  swift_bridgeObjectRetain(a1);
  uint64_t result = sub_100049E24(v7, v6);
  *a3 = a1;
  a3[1] = a2;
  a3[2] = result;
  return result;
}

void *sub_10004A01C(uint64_t a1)
{
  return sub_10004C070(a1, *(void *)(v1 + 16));
}

void sub_10004A034(uint64_t a1)
{
}

uint64_t sub_10004A04C(uint64_t a1)
{
  return sub_10004C838(a1, *v1);
}

uint64_t sub_10004A064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a3;
  uint64_t v108 = a1;
  uint64_t v99 = sub_100009FDC(&qword_100097168);
  __chkstk_darwin(v99);
  uint64_t v112 = (uint64_t)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = &qword_100096AA8;
  uint64_t v6 = sub_100009FDC(&qword_100096AA8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v96 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v85 - v9;
  uint64_t v11 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  BOOL v94 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  int v93 = (double *)((char *)&v85 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  __int128 v92 = (uint64_t *)((char *)&v85 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  __int128 v91 = (uint64_t *)((char *)&v85 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v98 = (uint64_t *)((char *)&v85 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v105 = (uint64_t)&v85 - v24;
  __chkstk_darwin(v23);
  uint64_t v101 = (uint64_t)&v85 - v25;
  uint64_t v26 = *(void *)(a2 + 56);
  uint64_t v102 = a2 + 56;
  uint64_t v27 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v103 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v107 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v30 = 0LL;
  BOOL v95 = _swiftEmptyArrayStorage;
  uint64_t v100 = v12;
  if (v29) {
    goto LABEL_8;
  }
LABEL_35:
  int64_t v60 = v30 + 1;
  if (__OFADD__(v30, 1LL))
  {
    __break(1u);
    goto LABEL_65;
  }

  if (v60 < v103)
  {
    unint64_t v61 = *(void *)(v102 + 8 * v60);
    ++v30;
    if (v61) {
      goto LABEL_48;
    }
    int64_t v30 = v60 + 1;
    if (v60 + 1 >= v103) {
      goto LABEL_54;
    }
    unint64_t v61 = *(void *)(v102 + 8 * v30);
    if (v61) {
      goto LABEL_48;
    }
    int64_t v30 = v60 + 2;
    if (v60 + 2 >= v103) {
      goto LABEL_54;
    }
    unint64_t v61 = *(void *)(v102 + 8 * v30);
    if (v61)
    {
LABEL_48:
      unint64_t v29 = (v61 - 1) & v61;
      for (unint64_t i = __clz(__rbit64(v61)) + (v30 << 6); ; unint64_t i = v32 | (v30 << 6))
      {
        unint64_t v63 = (uint64_t *)(*(void *)(v107 + 48) + 16 * i);
        uint64_t v64 = *v63;
        uint64_t v65 = v63[1];
        uint64_t v66 = *(void *)(v108 + 16);
        uint64_t v67 = *(void *)(v66 + 16);
        uint64_t v106 = v64;
        if (v67)
        {
          swift_bridgeObjectRetain_n(v65, 2LL);
          unint64_t v68 = sub_100010540(v64, v65);
          if ((v69 & 1) != 0)
          {
            sub_1000155F8(*(void *)(v66 + 56) + *(void *)(v12 + 72) * v68, (uint64_t)v10);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
          }

          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
          }

          swift_bridgeObjectRelease(v65);
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
          __n128 v31 = swift_bridgeObjectRetain(v65);
        }

        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1LL, v11, v31) == 1)
        {
          swift_bridgeObjectRelease(v65);
          sub_10000C234((uint64_t)v10, v5);
          if (!v29) {
            goto LABEL_35;
          }
        }

        else
        {
          sub_100015684((uint64_t)v10, v101);
          uint64_t v34 = *(void *)(v90 + 16);
          if (v34)
          {
            __int128 v86 = v10;
            uint64_t v35 = v100;
            uint64_t v36 = v90 + ((*(unsigned __int8 *)(v100 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
            swift_bridgeObjectRetain(v90);
            uint64_t v97 = *(void *)(v35 + 72);
            while (2)
            {
              uint64_t v104 = v34;
              unint64_t v38 = v29;
              int64_t v39 = v30;
              uint64_t v40 = v105;
              sub_1000155F8(v36, v105);
              uint64_t v41 = v11;
              int64_t v42 = v5;
              uint64_t v43 = v112;
              __int128 v44 = (double *)(v112 + *(int *)(v99 + 48));
              uint64_t v45 = v40;
              int64_t v30 = v39;
              unint64_t v29 = v38;
              sub_1000155F8(v45, v112);
              sub_1000155F8(v101, (uint64_t)v44);
              uint64_t v46 = v43;
              uint64_t v5 = v42;
              uint64_t v11 = v41;
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v41);
              uint64_t v48 = v98;
              switch(EnumCaseMultiPayload)
              {
                case 0:
                  sub_1000155F8(v112, (uint64_t)v98);
                  uint64_t v37 = v48[1];
                  if (swift_getEnumCaseMultiPayload(v44, v11))
                  {
                    swift_bridgeObjectRelease(v37);
                    goto LABEL_13;
                  }

                  uint64_t v88 = *v48;
                  uint64_t v51 = *((void *)v44 + 1);
                  Swift::String v52 = String.lowercased()();
                  uint64_t countAndFlagsBits = v52._countAndFlagsBits;
                  object = v52._object;
                  swift_bridgeObjectRelease(v51);
                  uint64_t v110 = countAndFlagsBits;
                  BOOL v111 = v52._object;
                  Swift::String v53 = String.lowercased()();
                  swift_bridgeObjectRelease(v37);
                  Swift::String v109 = v53;
                  unint64_t v54 = sub_100024EC0();
                  char v50 = StringProtocol.contains<A>(_:)( &v109,  &type metadata for String,  &type metadata for String,  v54,  v54);
                  swift_bridgeObjectRelease(object);
                  swift_bridgeObjectRelease(v53._object);
                  goto LABEL_26;
                case 1:
                  sub_1000155F8(v112, (uint64_t)v91);
                  uint64_t v49 = v91;
                  goto LABEL_20;
                case 2:
                  sub_1000155F8(v112, (uint64_t)v92);
                  uint64_t v49 = v92;
LABEL_20:
                  char v50 = *v49 == *(void *)v44;
                  goto LABEL_26;
                case 3:
                  sub_1000155F8(v112, (uint64_t)v93);
                  char v50 = *v93 == *v44;
                  goto LABEL_26;
                case 4:
                  sub_1000155F8(v112, (uint64_t)v94);
                  char v50 = *v94 ^ *(_BYTE *)v44 ^ 1;
LABEL_26:
                  sub_10002ACF0(v112);
                  sub_10002ACF0(v105);
                  if ((v50 & 1) == 0) {
                    goto LABEL_14;
                  }
                  swift_bridgeObjectRelease(v90);
                  swift_bridgeObjectRelease(v65);
                  unint64_t v10 = v86;
                  goto LABEL_34;
                default:
LABEL_13:
                  sub_10000C234(v112, &qword_100097168);
                  sub_10002ACF0(v105);
LABEL_14:
                  v36 += v97;
                  uint64_t v34 = v104 - 1;
                  if (v104 != 1) {
                    continue;
                  }
                  swift_bridgeObjectRelease(v90);
                  unint64_t v10 = v86;
                  break;
              }

              break;
            }
          }

          if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0) {
            BOOL v95 = sub_10002229C(0LL, v95[2] + 1LL, 1, v95);
          }
          unint64_t v56 = v95[2];
          unint64_t v55 = v95[3];
          uint64_t v57 = v106;
          if (v56 >= v55 >> 1) {
            BOOL v95 = sub_10002229C((void *)(v55 > 1), v56 + 1, 1, v95);
          }
          uint64_t v58 = v95;
          v95[2] = v56 + 1;
          char v59 = &v58[2 * v56];
          v59[4] = v57;
          v59[5] = v65;
LABEL_34:
          sub_10002ACF0(v101);
          uint64_t v12 = v100;
          if (!v29) {
            goto LABEL_35;
          }
        }

LABEL_8:
        unint64_t v32 = __clz(__rbit64(v29));
        v29 &= v29 - 1;
      }
    }

    int64_t v62 = v60 + 3;
    if (v62 < v103)
    {
      unint64_t v61 = *(void *)(v102 + 8 * v62);
      if (v61)
      {
        int64_t v30 = v62;
        goto LABEL_48;
      }

      while (1)
      {
        int64_t v30 = v62 + 1;
        if (__OFADD__(v62, 1LL)) {
          break;
        }
        if (v30 >= v103) {
          goto LABEL_54;
        }
        unint64_t v61 = *(void *)(v102 + 8 * v30);
        ++v62;
        if (v61) {
          goto LABEL_48;
        }
      }

    uint64_t v34 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_66;
    }

    if (v34 >= v105) {
      goto LABEL_55;
    }
    uint64_t v35 = *(void *)(v104 + 8 * v34);
    ++v30;
    if (!v35)
    {
      int64_t v30 = v34 + 1;
      if (v34 + 1 >= v105) {
        goto LABEL_55;
      }
      uint64_t v35 = *(void *)(v104 + 8 * v30);
      if (!v35)
      {
        int64_t v30 = v34 + 2;
        if (v34 + 2 >= v105) {
          goto LABEL_55;
        }
        uint64_t v35 = *(void *)(v104 + 8 * v30);
        if (!v35) {
          break;
        }
      }
    }

LABEL_65:
      __break(1u);
      JUMPOUT(0x10004A914LL);
    }
  }

LABEL_54:
  swift_release(v107);
  BOOL v70 = v95;
  uint64_t v71 = *(void *)(v108 + 16);
  uint64_t v72 = v95[2];
  if (v72)
  {
    swift_bridgeObjectRetain(*(void *)(v108 + 16));
    uint64_t v73 = v70 + 5;
    do
    {
      uint64_t v77 = *(v73 - 1);
      uint64_t v78 = *v73;
      swift_bridgeObjectRetain(*v73);
      swift_bridgeObjectRetain(v71);
      unint64_t v79 = sub_100010540(v77, v78);
      char v81 = v80;
      swift_bridgeObjectRelease(v71);
      if ((v81 & 1) != 0)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
        uint64_t v110 = v71;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_10002ECC0();
          uint64_t v71 = v110;
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v71 + 48) + 16 * v79 + 8));
        uint64_t v76 = v100;
        uint64_t v75 = v96;
        sub_100015684(*(void *)(v71 + 56) + *(void *)(v100 + 72) * v79, v96);
        sub_10002F24C(v79, v71);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v74 = 0LL;
      }

      else
      {
        uint64_t v74 = 1LL;
        uint64_t v75 = v96;
        uint64_t v76 = v100;
      }

      v73 += 2;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v75, v74, 1LL, v11);
      sub_10000C234(v75, &qword_100096AA8);
      swift_bridgeObjectRelease(v78);
      --v72;
    }

    while (v72);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v108 + 16));
  }

  swift_bridgeObjectRelease(v95);
  uint64_t v83 = v108;
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v108 + 16));
  *(void *)(v83 + swift_weakDestroy(v0 + 16) = v71;
  return result;
}

uint64_t sub_10004A928(uint64_t a1)
{
  return sub_10004A064(a1, *v1, v1[1]);
}

uint64_t sub_10004A940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v92 = a3;
  uint64_t v110 = a1;
  uint64_t v101 = sub_100009FDC(&qword_100097168);
  __chkstk_darwin(v101);
  uint64_t v114 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = &qword_100096AA8;
  uint64_t v6 = sub_100009FDC(&qword_100096AA8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v99 = (uint64_t)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v87 - v9;
  uint64_t v11 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v97 = (double *)((char *)&v87 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v96 = (uint64_t *)((char *)&v87 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  BOOL v95 = (uint64_t *)((char *)&v87 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  BOOL v94 = (uint64_t *)((char *)&v87 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v107 = (uint64_t)&v87 - v24;
  __chkstk_darwin(v23);
  uint64_t v103 = (uint64_t)&v87 - v25;
  uint64_t v26 = *(void *)(a2 + 56);
  uint64_t v104 = a2 + 56;
  uint64_t v27 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v105 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v109 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v30 = 0LL;
  int v93 = _swiftEmptyArrayStorage;
  uint64_t v102 = v12;
  if (!v29) {
    goto LABEL_8;
  }
LABEL_4:
  unint64_t v31 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  for (unint64_t i = v31 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v35)) + (v30 << 6))
  {
    uint64_t v37 = (uint64_t *)(*(void *)(v109 + 48) + 16 * i);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    uint64_t v40 = *(void *)(v110 + 16);
    uint64_t v41 = *(void *)(v40 + 16);
    uint64_t v108 = v38;
    if (v41)
    {
      swift_bridgeObjectRetain_n(v39, 2LL);
      unint64_t v42 = sub_100010540(v38, v39);
      if ((v43 & 1) != 0)
      {
        sub_1000155F8(*(void *)(v40 + 56) + *(void *)(v12 + 72) * v42, (uint64_t)v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
      }

      swift_bridgeObjectRelease(v39);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
      __n128 v33 = swift_bridgeObjectRetain(v39);
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1LL, v11, v33) == 1)
    {
      swift_bridgeObjectRelease(v39);
      sub_10000C234((uint64_t)v10, v5);
      if (v29) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_100015684((uint64_t)v10, v103);
      uint64_t v44 = *(void *)(v92 + 16);
      if (v44)
      {
        uint64_t v88 = v39;
        uint64_t v45 = v102;
        uint64_t v46 = v92 + ((*(unsigned __int8 *)(v102 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
        swift_bridgeObjectRetain(v92);
        uint64_t v100 = *(void *)(v45 + 72);
        while (2)
        {
          uint64_t v106 = v44;
          unint64_t v49 = v29;
          uint64_t v50 = v107;
          sub_1000155F8(v46, v107);
          uint64_t v51 = v10;
          uint64_t v52 = v11;
          Swift::String v53 = v5;
          uint64_t v54 = v114;
          uint64_t v55 = v50;
          unint64_t v29 = v49;
          unint64_t v56 = (double *)(v114 + *(int *)(v101 + 48));
          sub_1000155F8(v55, v114);
          sub_1000155F8(v103, (uint64_t)v56);
          uint64_t v57 = v54;
          uint64_t v5 = v53;
          uint64_t v11 = v52;
          unint64_t v10 = v51;
          switch(swift_getEnumCaseMultiPayload(v57, v11))
          {
            case 0u:
              unint64_t v47 = v94;
              sub_1000155F8(v114, (uint64_t)v94);
              uint64_t v48 = v47[1];
              if (swift_getEnumCaseMultiPayload(v56, v11))
              {
                swift_bridgeObjectRelease(v48);
                goto LABEL_31;
              }

              uint64_t v90 = *v94;
              uint64_t v60 = *((void *)v56 + 1);
              Swift::String v61 = String.lowercased()();
              uint64_t countAndFlagsBits = v61._countAndFlagsBits;
              object = v61._object;
              swift_bridgeObjectRelease(v60);
              uint64_t v112 = countAndFlagsBits;
              uint64_t v113 = v61._object;
              Swift::String v62 = String.lowercased()();
              swift_bridgeObjectRelease(v48);
              Swift::String v111 = v62;
              unint64_t v63 = sub_100024EC0();
              char v59 = StringProtocol.contains<A>(_:)( &v111,  &type metadata for String,  &type metadata for String,  v63,  v63);
              swift_bridgeObjectRelease(object);
              swift_bridgeObjectRelease(v62._object);
              goto LABEL_44;
            case 1u:
              sub_1000155F8(v114, (uint64_t)v95);
              uint64_t v58 = v95;
              goto LABEL_38;
            case 2u:
              sub_1000155F8(v114, (uint64_t)v96);
              uint64_t v58 = v96;
LABEL_38:
              char v59 = *v58 == *(void *)v56;
              goto LABEL_44;
            case 3u:
              sub_1000155F8(v114, (uint64_t)v97);
              char v59 = *v97 == *v56;
              goto LABEL_44;
            case 4u:
              sub_1000155F8(v114, (uint64_t)v98);
              char v59 = *v98 ^ *(_BYTE *)v56 ^ 1;
LABEL_44:
              sub_10002ACF0(v114);
              sub_10002ACF0(v107);
              if ((v59 & 1) == 0) {
                goto LABEL_32;
              }
              swift_bridgeObjectRelease(v92);
              uint64_t v64 = v93;
              if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0) {
                int v93 = sub_10002229C(0LL, v64[2] + 1LL, 1, v64);
              }
              unint64_t v66 = v93[2];
              unint64_t v65 = v93[3];
              uint64_t v67 = v108;
              if (v66 >= v65 >> 1) {
                int v93 = sub_10002229C((void *)(v65 > 1), v66 + 1, 1, v93);
              }
              unint64_t v68 = v93;
              v93[2] = v66 + 1;
              char v69 = &v68[2 * v66];
              uint64_t v70 = v88;
              v69[4] = v67;
              v69[5] = v70;
              goto LABEL_53;
            default:
LABEL_31:
              sub_10000C234(v114, &qword_100097168);
              sub_10002ACF0(v107);
LABEL_32:
              v46 += v100;
              uint64_t v44 = v106 - 1;
              if (v106 != 1) {
                continue;
              }
              swift_bridgeObjectRelease(v92);
              uint64_t v71 = v88;
              break;
          }

          break;
        }
      }

      else
      {
        uint64_t v71 = v39;
      }

      swift_bridgeObjectRelease(v71);
LABEL_53:
      sub_10002ACF0(v103);
      uint64_t v12 = v102;
      if (v29) {
        goto LABEL_4;
      }
    }

LABEL_66:
      __break(1u);
      JUMPOUT(0x10004B21CLL);
    }

    int64_t v30 = v36;
    goto LABEL_21;
  }

LABEL_55:
  swift_release(v109);
  uint64_t v72 = *(void *)(v110 + 16);
  uint64_t v73 = v93;
  uint64_t v74 = v93[2];
  if (v74)
  {
    swift_bridgeObjectRetain(*(void *)(v110 + 16));
    uint64_t v75 = v73 + 5;
    do
    {
      uint64_t v79 = *(v75 - 1);
      uint64_t v80 = *v75;
      swift_bridgeObjectRetain(*v75);
      swift_bridgeObjectRetain(v72);
      unint64_t v81 = sub_100010540(v79, v80);
      char v83 = v82;
      swift_bridgeObjectRelease(v72);
      if ((v83 & 1) != 0)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
        uint64_t v112 = v72;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_10002ECC0();
          uint64_t v72 = v112;
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v72 + 48) + 16 * v81 + 8));
        uint64_t v78 = v102;
        uint64_t v77 = v99;
        sub_100015684(*(void *)(v72 + 56) + *(void *)(v102 + 72) * v81, v99);
        sub_10002F24C(v81, v72);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v76 = 0LL;
      }

      else
      {
        uint64_t v76 = 1LL;
        uint64_t v77 = v99;
        uint64_t v78 = v102;
      }

      v75 += 2;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, v76, 1LL, v11);
      sub_10000C234(v77, &qword_100096AA8);
      swift_bridgeObjectRelease(v80);
      --v74;
    }

    while (v74);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v110 + 16));
  }

  swift_bridgeObjectRelease(v93);
  uint64_t v85 = v110;
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v110 + 16));
  *(void *)(v85 + swift_weakDestroy(v0 + 16) = v72;
  return result;
}

uint64_t sub_10004B230(uint64_t a1)
{
  return sub_10004A940(a1, *v1, v1[1]);
}

uint64_t sub_10004B248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100009FDC(&qword_100096AA8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12);
  if (!*(void *)(a3 + 16)) {
    return result;
  }
  uint64_t v52 = v3;
  uint64_t v16 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v56 = (uint64_t)&v50 - v15;
  sub_1000155F8(v16, (uint64_t)&v50 - v15);
  uint64_t v51 = a1;
  uint64_t v17 = *(void **)(a1 + 16);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v58 = a2 + 56;
  uint64_t v19 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v59 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a2);
  int64_t v22 = 0LL;
  uint64_t v54 = a2;
  uint64_t v55 = v10;
  if (v21) {
    goto LABEL_25;
  }
LABEL_8:
  int64_t v23 = v22 + 1;
  if (!__OFADD__(v22, 1LL))
  {
    if (v23 < v59)
    {
      unint64_t v24 = *(void *)(v58 + 8 * v23);
      ++v22;
      if (v24) {
        goto LABEL_21;
      }
      int64_t v22 = v23 + 1;
      if (v23 + 1 >= v59) {
        goto LABEL_35;
      }
      unint64_t v24 = *(void *)(v58 + 8 * v22);
      if (v24) {
        goto LABEL_21;
      }
      int64_t v22 = v23 + 2;
      if (v23 + 2 >= v59) {
        goto LABEL_35;
      }
      unint64_t v24 = *(void *)(v58 + 8 * v22);
      if (v24)
      {
LABEL_21:
        unint64_t v21 = (v24 - 1) & v24;
        for (unint64_t i = __clz(__rbit64(v24)) + (v22 << 6); ; unint64_t i = v34 | (v22 << 6))
        {
          uint64_t v27 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
          uint64_t v29 = *v27;
          uint64_t v28 = v27[1];
          uint64_t v30 = v17[2];
          __n128 v31 = swift_bridgeObjectRetain(v28);
          if (v30 && (unint64_t v32 = sub_100010540(v29, v28), (v33 & 1) != 0))
          {
            sub_1000155F8(v17[7] + *(void *)(v11 + 72) * v32, (uint64_t)v9);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
            swift_bridgeObjectRelease(v28);
            sub_10000C234((uint64_t)v9, &qword_100096AA8);
            if (!v21) {
              goto LABEL_8;
            }
          }

          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))(v9, 1LL, 1LL, v10, v31);
            sub_10000C234((uint64_t)v9, &qword_100096AA8);
            sub_1000155F8(v56, v57);
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
            uint64_t v60 = v17;
            unint64_t v37 = sub_100010540(v29, v28);
            uint64_t v38 = v17[2];
            BOOL v39 = (v36 & 1) == 0;
            uint64_t v40 = v38 + v39;
            if (__OFADD__(v38, v39)) {
              goto LABEL_39;
            }
            if (v17[3] >= v40)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                char v47 = v36;
                sub_10002ECC0();
                LOBYTE(v36) = v47;
              }
            }

            else
            {
              int v53 = v36;
              sub_10002E964(v40, isUniquelyReferenced_nonNull_native);
              unint64_t v41 = sub_100010540(v29, v28);
              int v42 = v36 & 1;
              LOBYTE(v36) = v53;
              if ((v53 & 1) != v42) {
                goto LABEL_41;
              }
              unint64_t v37 = v41;
            }

            uint64_t v10 = v55;
            uint64_t v17 = v60;
            if ((v36 & 1) != 0)
            {
              sub_100030B80(v57, v60[7] + *(void *)(v11 + 72) * v37);
            }

            else
            {
              v60[(v37 >> 6) + 8] |= 1LL << v37;
              char v43 = (uint64_t *)(v17[6] + 16 * v37);
              *char v43 = v29;
              v43[1] = v28;
              sub_100015684(v57, v17[7] + *(void *)(v11 + 72) * v37);
              uint64_t v44 = v17[2];
              BOOL v45 = __OFADD__(v44, 1LL);
              uint64_t v46 = v44 + 1;
              if (v45) {
                goto LABEL_40;
              }
              uint64_t v17[2] = v46;
              swift_bridgeObjectRetain(v28);
            }

            swift_bridgeObjectRelease(v28);
            swift_bridgeObjectRelease(0x8000000000000000LL);
            a2 = v54;
            if (!v21) {
              goto LABEL_8;
            }
          }

LABEL_35:
    swift_release(a2);
    sub_10002ACF0(v56);
    uint64_t v48 = v51;
    uint64_t v49 = *(void *)(v51 + 16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(v49);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v17;
    return swift_bridgeObjectRelease(v17);
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10004B6A0(uint64_t a1)
{
  return sub_10004B248(a1, *v1, v1[1]);
}

uint64_t sub_10004B6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v19 = (uint64_t *)((char *)&v64 - v17);
  if (!*(void *)(a3 + 16)) {
    return result;
  }
  uint64_t v72 = v18;
  sub_1000155F8( a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  (uint64_t)&v64 - v17);
  uint64_t v74 = (uint64_t *)v15;
  uint64_t v75 = v8;
  uint64_t v76 = v7;
  uint64_t v67 = *v19;
  unint64_t v68 = v11;
  uint64_t v20 = (void *)v19[1];
  uint64_t v70 = v3;
  uint64_t v71 = v20;
  uint64_t v69 = a1;
  unint64_t v21 = *(void **)(a1 + 16);
  uint64_t v22 = a2 + 56;
  uint64_t v23 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(a2 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(a2);
  int64_t v27 = 0LL;
  int64_t v73 = v26;
  while (1)
  {
    while (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v29 = v28 | (v27 << 6);
      if (v21[2])
      {
LABEL_25:
        char v33 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v29);
        uint64_t v34 = *v33;
        uint64_t v35 = v33[1];
        swift_bridgeObjectRetain(v35);
        unint64_t v36 = sub_100010540(v34, v35);
        if ((v37 & 1) != 0)
        {
          uint64_t v38 = v22;
          uint64_t v39 = a2;
          uint64_t v40 = v21;
          uint64_t v41 = v21[7];
          int v42 = v74;
          uint64_t v43 = *(void *)(v75 + 72);
          sub_1000155F8(v41 + v43 * v36, (uint64_t)v74);
          if (swift_getEnumCaseMultiPayload(v42, v76))
          {
            swift_bridgeObjectRelease(v35);
            sub_10002ACF0((uint64_t)v42);
            a2 = v39;
            uint64_t v22 = v38;
            int64_t v26 = v73;
            unint64_t v21 = v40;
          }

          else
          {
            uint64_t v44 = v42[1];
            uint64_t v77 = *v42;
            uint64_t v78 = v44;
            v45._uint64_t countAndFlagsBits = v67;
            v45._object = v71;
            String.append(_:)(v45);
            uint64_t v46 = v78;
            uint64_t v47 = (uint64_t)v72;
            void *v72 = v77;
            *(void *)(v47 + 8) = v46;
            swift_storeEnumTagMultiPayload(v47, v76, 0LL);
            sub_100015684(v47, (uint64_t)v68);
            uint64_t v48 = v40;
            unsigned int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
            uint64_t v79 = v40;
            unint64_t v50 = sub_100010540(v34, v35);
            uint64_t v51 = v48[2];
            BOOL v52 = (v49 & 1) == 0;
            uint64_t v53 = v51 + v52;
            if (__OFADD__(v51, v52)) {
              goto LABEL_44;
            }
            if (v48[3] >= v53)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                uint64_t v56 = v79;
                if ((v49 & 1) != 0) {
                  goto LABEL_35;
                }
              }

              else
              {
                int v65 = v49;
                sub_10002ECC0();
                uint64_t v56 = v79;
                if ((v65 & 1) != 0) {
                  goto LABEL_35;
                }
              }
            }

            else
            {
              int v65 = v49;
              sub_10002E964(v53, isUniquelyReferenced_nonNull_native);
              unint64_t v54 = sub_100010540(v34, v35);
              if ((v65 & 1) != (v55 & 1)) {
                goto LABEL_46;
              }
              unint64_t v50 = v54;
              uint64_t v56 = v79;
              if ((v65 & 1) != 0)
              {
LABEL_35:
                uint64_t v57 = v56;
                sub_100030B80((uint64_t)v68, v56[7] + v50 * v43);
                goto LABEL_39;
              }
            }

            v56[(v50 >> 6) + 8] |= 1LL << v50;
            uint64_t v58 = (uint64_t *)(v56[6] + 16 * v50);
            *uint64_t v58 = v34;
            v58[1] = v35;
            sub_100015684((uint64_t)v68, v56[7] + v50 * v43);
            uint64_t v59 = v56[2];
            BOOL v60 = __OFADD__(v59, 1LL);
            uint64_t v61 = v59 + 1;
            if (v60) {
              goto LABEL_45;
            }
            uint64_t v57 = v56;
            v56[2] = v61;
            swift_bridgeObjectRetain(v35);
LABEL_39:
            a2 = v39;
            swift_bridgeObjectRelease(v35);
            swift_bridgeObjectRelease(0x8000000000000000LL);
            uint64_t v22 = v38;
            int64_t v26 = v73;
            unint64_t v21 = v57;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v35);
        }
      }
    }

    int64_t v30 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v30 >= v26) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v22 + 8 * v30);
    ++v27;
    if (!v31)
    {
      int64_t v27 = v30 + 1;
      if (v30 + 1 >= v26) {
        goto LABEL_40;
      }
      unint64_t v31 = *(void *)(v22 + 8 * v27);
      if (!v31)
      {
        int64_t v27 = v30 + 2;
        if (v30 + 2 >= v26) {
          goto LABEL_40;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v27);
        if (!v31) {
          break;
        }
      }
    }

LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10004BB5C(uint64_t a1)
{
  return sub_10004B6B8(a1, *v1, v1[1]);
}

uint64_t sub_10004BB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)&v64[-v14];
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v19 = (uint64_t *)&v64[-v17];
  if (!*(void *)(a3 + 16)) {
    return result;
  }
  uint64_t v72 = v18;
  sub_1000155F8( a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  (uint64_t)&v64[-v17]);
  uint64_t v74 = v15;
  uint64_t v75 = v8;
  uint64_t v79 = v7;
  uint64_t v67 = *v19;
  unint64_t v68 = v11;
  uint64_t v20 = v19[1];
  uint64_t v70 = v3;
  uint64_t v71 = v20;
  uint64_t v69 = a1;
  unint64_t v21 = *(void **)(a1 + 16);
  uint64_t v22 = a2 + 56;
  uint64_t v23 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(a2 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(*(void *)(a1 + 16));
  swift_bridgeObjectRetain(a2);
  int64_t v27 = 0LL;
  int64_t v73 = v26;
  while (1)
  {
    while (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v29 = v28 | (v27 << 6);
      if (v21[2])
      {
LABEL_25:
        char v33 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v29);
        uint64_t v34 = *v33;
        uint64_t v35 = v33[1];
        swift_bridgeObjectRetain(v35);
        unint64_t v36 = sub_100010540(v34, v35);
        if ((v37 & 1) != 0)
        {
          uint64_t v38 = a2;
          uint64_t v39 = v21;
          uint64_t v40 = v21[7];
          uint64_t v41 = v74;
          uint64_t v42 = *(void *)(v75 + 72);
          sub_1000155F8(v40 + v42 * v36, (uint64_t)v74);
          if (swift_getEnumCaseMultiPayload(v41, v79))
          {
            swift_bridgeObjectRelease(v35);
            sub_10002ACF0((uint64_t)v41);
            a2 = v38;
            int64_t v26 = v73;
            unint64_t v21 = v39;
          }

          else
          {
            uint64_t v43 = *v41;
            uint64_t v66 = v41[1];
            v78[0] = v43;
            v78[1] = v66;
            uint64_t v76 = v67;
            uint64_t v77 = v71;
            __n128 v44 = swift_bridgeObjectRetain(v71);
            uint64_t v76 = String.init<A>(_:)( &v76,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v44);
            uint64_t v77 = v45;
            String.append<A>(contentsOf:)(v78, &type metadata for String, &protocol witness table for String);
            swift_bridgeObjectRelease(v66);
            uint64_t v46 = v77;
            uint64_t v47 = (uint64_t)v72;
            uint64_t *v72 = v76;
            *(void *)(v47 + 8) = v46;
            swift_storeEnumTagMultiPayload(v47, v79, 0LL);
            sub_100015684(v47, (uint64_t)v68);
            uint64_t v48 = v39;
            LODWORD(v66) = swift_isUniquelyReferenced_nonNull_native(v39);
            v78[0] = v39;
            unint64_t v50 = sub_100010540(v34, v35);
            uint64_t v51 = v48[2];
            BOOL v52 = (v49 & 1) == 0;
            uint64_t v53 = v51 + v52;
            if (__OFADD__(v51, v52)) {
              goto LABEL_44;
            }
            if (v48[3] >= v53)
            {
              if ((v66 & 1) != 0)
              {
                uint64_t v56 = (void *)v78[0];
                if ((v49 & 1) != 0) {
                  goto LABEL_35;
                }
              }

              else
              {
                int v65 = v49;
                sub_10002ECC0();
                uint64_t v56 = (void *)v78[0];
                if ((v65 & 1) != 0) {
                  goto LABEL_35;
                }
              }
            }

            else
            {
              int v65 = v49;
              sub_10002E964(v53, v66);
              unint64_t v54 = sub_100010540(v34, v35);
              if ((v65 & 1) != (v55 & 1)) {
                goto LABEL_46;
              }
              unint64_t v50 = v54;
              uint64_t v56 = (void *)v78[0];
              if ((v65 & 1) != 0)
              {
LABEL_35:
                uint64_t v57 = v56;
                sub_100030B80((uint64_t)v68, v56[7] + v50 * v42);
                goto LABEL_39;
              }
            }

            v56[(v50 >> 6) + 8] |= 1LL << v50;
            uint64_t v58 = (uint64_t *)(v56[6] + 16 * v50);
            *uint64_t v58 = v34;
            v58[1] = v35;
            sub_100015684((uint64_t)v68, v56[7] + v50 * v42);
            uint64_t v59 = v56[2];
            BOOL v60 = __OFADD__(v59, 1LL);
            uint64_t v61 = v59 + 1;
            if (v60) {
              goto LABEL_45;
            }
            uint64_t v57 = v56;
            v56[2] = v61;
            swift_bridgeObjectRetain(v35);
LABEL_39:
            a2 = v38;
            swift_bridgeObjectRelease(v35);
            swift_bridgeObjectRelease(0x8000000000000000LL);
            int64_t v26 = v73;
            unint64_t v21 = v57;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v35);
        }
      }
    }

    int64_t v30 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v30 >= v26) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v22 + 8 * v30);
    ++v27;
    if (!v31)
    {
      int64_t v27 = v30 + 1;
      if (v30 + 1 >= v26) {
        goto LABEL_40;
      }
      unint64_t v31 = *(void *)(v22 + 8 * v27);
      if (!v31)
      {
        int64_t v27 = v30 + 2;
        if (v30 + 2 >= v26) {
          goto LABEL_40;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v27);
        if (!v31) {
          break;
        }
      }
    }

uint64_t sub_10004C058(uint64_t a1)
{
  return sub_10004BB74(a1, *v1, v1[1]);
}

void *sub_10004C070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100096AA8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v56 = v7 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v7 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & v8;
  int64_t v57 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v59 = a2 + 56;
  uint64_t result = (void *)swift_bridgeObjectRetain_n(v7, 2LL);
  int64_t v13 = 0LL;
  char v55 = _swiftEmptyArrayStorage;
  uint64_t v58 = v6;
  if (v11) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
LABEL_59:
    __break(1u);
    return result;
  }

  if (v16 < v57)
  {
    unint64_t v17 = *(void *)(v56 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (v17) {
      goto LABEL_25;
    }
    int64_t v18 = v13 + 2;
    if (v13 + 2 >= v57) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v56 + 8 * v18);
    if (v17) {
      goto LABEL_25;
    }
    int64_t v18 = v13 + 3;
    if (v13 + 3 >= v57) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v56 + 8 * v18);
    if (v17) {
      goto LABEL_25;
    }
    int64_t v18 = v13 + 4;
    if (v13 + 4 >= v57) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v56 + 8 * v18);
    if (v17) {
      goto LABEL_25;
    }
    int64_t v18 = v13 + 5;
    if (v13 + 5 >= v57) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v56 + 8 * v18);
    if (v17)
    {
LABEL_25:
      unint64_t v11 = (v17 - 1) & v17;
      int64_t v61 = v18;
      for (unint64_t i = __clz(__rbit64(v17)) + (v18 << 6); ; unint64_t i = v14 | (v13 << 6))
      {
        uint64_t v20 = v7;
        unint64_t v21 = (uint64_t *)(*(void *)(v7 + 48) + 16 * i);
        uint64_t v23 = *v21;
        uint64_t v22 = v21[1];
        if (*(void *)(a2 + 16))
        {
          Hasher.init(_seed:)(v60, *(void *)(a2 + 40));
          swift_bridgeObjectRetain(v22);
          String.hash(into:)(v60, v23, v22);
          Swift::Int v24 = Hasher._finalize()();
          uint64_t v25 = -1LL << *(_BYTE *)(a2 + 32);
          unint64_t v26 = v24 & ~v25;
          if (((*(void *)(v59 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) != 0)
          {
            uint64_t v27 = *(void *)(a2 + 48);
            unint64_t v28 = (void *)(v27 + 16 * v26);
            uint64_t v29 = v28[1];
            BOOL v30 = *v28 == v23 && v29 == v22;
            if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29) & 1) != 0)
            {
LABEL_6:
              uint64_t result = (void *)swift_bridgeObjectRelease(v22);
              uint64_t v7 = v20;
              uint64_t v6 = v58;
              int64_t v13 = v61;
              if (!v11) {
                goto LABEL_8;
              }
              goto LABEL_7;
            }

            uint64_t v31 = ~v25;
            for (unint64_t j = v26 + 1; ; unint64_t j = v33 + 1)
            {
              uint64_t v33 = j & v31;
              uint64_t v34 = (void *)(v27 + 16 * v33);
              uint64_t v35 = v34[1];
              BOOL v36 = *v34 == v23 && v35 == v22;
              if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v35) & 1) != 0) {
                goto LABEL_6;
              }
            }
          }
        }

        else
        {
          swift_bridgeObjectRetain(v22);
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) != 0)
        {
          uint64_t v7 = v20;
          uint64_t result = v55;
        }

        else
        {
          uint64_t result = sub_10002229C(0LL, v55[2] + 1LL, 1, v55);
          uint64_t v7 = v20;
        }

        unint64_t v38 = result[2];
        unint64_t v37 = result[3];
        uint64_t v6 = v58;
        if (v38 >= v37 >> 1) {
          uint64_t result = sub_10002229C((void *)(v37 > 1), v38 + 1, 1, result);
        }
        result[2] = v38 + 1;
        char v55 = result;
        uint64_t v39 = &result[2 * v38];
        v39[4] = v23;
        _OWORD v39[5] = v22;
        int64_t v13 = v61;
        if (!v11) {
          goto LABEL_8;
        }
LABEL_7:
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v61 = v13;
      }
    }

    uint64_t v19 = v13 + 6;
    if (v13 + 6 < v57)
    {
      unint64_t v17 = *(void *)(v56 + 8 * v19);
      if (v17)
      {
        int64_t v18 = v13 + 6;
        goto LABEL_25;
      }

      while (1)
      {
        int64_t v18 = v19 + 1;
        if (__OFADD__(v19, 1LL)) {
          goto LABEL_59;
        }
        if (v18 >= v57) {
          break;
        }
        unint64_t v17 = *(void *)(v56 + 8 * v18);
        ++v19;
        if (v17) {
          goto LABEL_25;
        }
      }
    }
  }

LABEL_49:
  swift_release(v7);
  uint64_t v40 = v55[2];
  if (v40)
  {
    uint64_t v41 = v55 + 5;
    do
    {
      uint64_t v43 = *(v41 - 1);
      uint64_t v44 = *v41;
      swift_bridgeObjectRetain(*v41);
      swift_bridgeObjectRetain(v7);
      unint64_t v45 = sub_100010540(v43, v44);
      char v47 = v46;
      swift_bridgeObjectRelease(v7);
      if ((v47 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        v60[0] = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10002ECC0();
          uint64_t v7 = v60[0];
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v7 + 48) + 16 * v45 + 8));
        uint64_t v49 = *(void *)(v7 + 56);
        uint64_t v50 = type metadata accessor for ServiceEventValue(0LL);
        uint64_t v51 = *(void *)(v50 - 8);
        uint64_t v52 = v49 + *(void *)(v51 + 72) * v45;
        uint64_t v6 = v58;
        sub_100015684(v52, (uint64_t)v58);
        sub_10002F24C(v45, v7);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v6, 0LL, 1LL, v50);
      }

      else
      {
        uint64_t v42 = type metadata accessor for ServiceEventValue(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v6, 1LL, 1LL, v42);
      }

      v41 += 2;
      sub_10000C234((uint64_t)v6, &qword_100096AA8);
      swift_bridgeObjectRelease(v44);
      --v40;
    }

    while (v40);
  }

  swift_bridgeObjectRelease(v55);
  uint64_t v53 = v54;
  uint64_t result = (void *)swift_bridgeObjectRelease(*(void *)(v54 + 16));
  *(void *)(v53 + swift_weakDestroy(v0 + 16) = v7;
  return result;
}

void sub_10004C558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100096AA8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v33 = a2 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a2);
  int64_t v12 = 0LL;
  uint64_t v32 = a2;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v16 >= v34) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v33 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v34) {
          goto LABEL_26;
        }
        unint64_t v17 = *(void *)(v33 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10004C838(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = type metadata accessor for SHA256(0LL);
  v63[5] = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = type metadata accessor for String.Encoding(0LL);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v70 = *(void *)(v71 - 8);
  uint64_t v6 = __chkstk_darwin(v71);
  v63[4] = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)v63 - v8;
  uint64_t v9 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  v63[3] = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v63[2] = (char *)v63 - v13;
  uint64_t v14 = sub_100009FDC(&qword_100096AA8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v67 = (uint64_t)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v63 - v18;
  __chkstk_darwin(v17);
  unint64_t v81 = (void *)((char *)v63 - v20);
  uint64_t v68 = a1;
  uint64_t v21 = *(void **)(a1 + 16);
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v76 = a2 + 56;
  uint64_t v23 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v77 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  uint64_t v78 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v26 = 0LL;
  __int128 v74 = xmmword_100075D10;
  uint64_t v79 = v19;
  uint64_t v80 = v10;
LABEL_4:
  uint64_t v27 = v81;
  while (1)
  {
    if (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      int64_t v82 = v26;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_23;
    }

    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      JUMPOUT(0x10004D400LL);
    }

    if (v30 >= v77) {
      goto LABEL_48;
    }
    unint64_t v31 = *(void *)(v76 + 8 * v30);
    int64_t v32 = v26 + 1;
    if (!v31)
    {
      int64_t v32 = v26 + 2;
      if (v26 + 2 >= v77) {
        goto LABEL_48;
      }
      unint64_t v31 = *(void *)(v76 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v26 + 3;
        if (v26 + 3 >= v77) {
          goto LABEL_48;
        }
        unint64_t v31 = *(void *)(v76 + 8 * v32);
        if (!v31) {
          break;
        }
      }
    }

LABEL_48:
  swift_release(v78);
  uint64_t v60 = v68;
  uint64_t v61 = *(void *)(v68 + 16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v61);
  *(void *)(v60 + swift_weakDestroy(v0 + 16) = v21;
  return swift_bridgeObjectRelease(v21);
}

ValueMetadata *type metadata accessor for EventFilterMatcher()
{
  return &type metadata for EventFilterMatcher;
}

uint64_t destroy for EventAllowFilter(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s21CloudTelemetryService16EventAllowFilterVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for EventAllowFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for EventAllowFilter(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventAllowFilter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventAllowFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EventAllowFilter()
{
  return &type metadata for EventAllowFilter;
}

uint64_t destroy for EventRemoveFilter(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

ValueMetadata *type metadata accessor for EventRemoveFilter()
{
  return &type metadata for EventRemoveFilter;
}

ValueMetadata *type metadata accessor for EventSHA256KeyFilter()
{
  return &type metadata for EventSHA256KeyFilter;
}

ValueMetadata *type metadata accessor for EventAllowValuesFilter()
{
  return &type metadata for EventAllowValuesFilter;
}

ValueMetadata *type metadata accessor for EventDenyValuesFilter()
{
  return &type metadata for EventDenyValuesFilter;
}

ValueMetadata *type metadata accessor for EventInsertStringKeyFilter()
{
  return &type metadata for EventInsertStringKeyFilter;
}

ValueMetadata *type metadata accessor for EventAppendToKeyFilter()
{
  return &type metadata for EventAppendToKeyFilter;
}

uint64_t *_s21CloudTelemetryService18EventFilterMatcherVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *_s21CloudTelemetryService18EventFilterMatcherVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *_s21CloudTelemetryService18EventFilterMatcherVwta_0(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionPerCountrySampling(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionPerCountrySampling(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EventPrependToKeyFilter()
{
  return &type metadata for EventPrependToKeyFilter;
}

unint64_t sub_10004D818()
{
  unint64_t result = qword_100097610;
  if (!qword_100097610)
  {
    uint64_t v1 = sub_10000A140(&qword_100096C10);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100097610);
  }

  return result;
}

uint64_t sub_10004D86C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009CC28);
  sub_100009FC4(v0, (uint64_t)qword_10009CC28);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x2D646E656B636162LL,  0xED000070756F7267LL);
}

uint64_t sub_10004D8EC(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 120LL, 15LL);
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  return v3;
}

uint64_t sub_10004D928(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return swift_task_switch(sub_10004D948, v1);
}

uint64_t sub_10004D948()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess(v1 + 112, v0 + 16, 0LL, 0LL);
  if (*(void *)(*(void *)(v1 + 112) + 16LL))
  {
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 40);
    sub_10004EF74( &qword_1000976E0,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup,  (uint64_t)&unk_1000785C4);
    uint64_t v6 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 64) = v6;
    _OWORD v6[2] = v3;
    void v6[3] = v5;
    _OWORD v6[4] = v4;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + 72) = v7;
    void *v7 = v0;
    v7[1] = sub_10004DA74;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }

  else
  {
    unint64_t v9 = sub_10004DF3C();
    uint64_t v10 = swift_allocError(&type metadata for BackendGroup.Error, v9, 0LL, 0LL);
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10004DA74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100020910, v2);
}

uint64_t type metadata accessor for BackendGroup()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService12BackendGroup);
}

uint64_t sub_10004DAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  unint64_t v7 = (*(void *)(*(void *)(sub_100009FDC(&qword_1000963A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[16] = swift_task_alloc(v7);
  v5[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_10004DB68, a3);
}

uint64_t sub_10004DB68()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_beginAccess(v1 + 112, v0 + 48, 0LL, 0LL);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v37 = *(void *)(v3 + 16);
  if (v37)
  {
    uint64_t v4 = type metadata accessor for TaskPriority(0LL);
    uint64_t v36 = *(void *)(v4 - 8);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
    swift_bridgeObjectRetain(v3);
    uint64_t v5 = 0LL;
    uint64_t v34 = v3;
    uint64_t v38 = v4;
    while (1)
    {
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 136);
      uint64_t v11 = *(void *)(v0 + 112);
      uint64_t v10 = *(void *)(v0 + 120);
      uint64_t v12 = *(void *)(v0 + 104);
      __int128 v39 = *(_OWORD *)(v3 + 16 * v5 + 32);
      v35(v8, 1LL, 1LL, v4);
      uint64_t v13 = swift_allocObject(&unk_100090788, 72LL, 7LL);
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v14 = (uint64_t *)(v13 + 16);
      *(void *)(v13 + 24) = 0LL;
      *(_OWORD *)(v13 + 32) = v39;
      *(void *)(v13 + 48) = v11;
      *(void *)(v13 + 56) = v12;
      *(void *)(v13 + 64) = v10;
      sub_10004E998(v8, v9);
      int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v9, 1LL, v4);
      swift_unknownObjectRetain_n(v39, 2LL);
      swift_bridgeObjectRetain(v11);
      uint64_t v16 = swift_retain(v12);
      uint64_t v17 = *(void *)(v0 + 128);
      if (v15 == 1)
      {
        sub_10000C234(*(void *)(v0 + 128), &qword_1000963A0);
        uint64_t v18 = 0LL;
        uint64_t v19 = *v14;
        if (!*v14) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned __int8 v25 = TaskPriority.rawValue.getter(v16);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v17, v38);
        uint64_t v18 = v25;
        uint64_t v19 = *v14;
        if (!*v14)
        {
LABEL_8:
          uint64_t v22 = 0LL;
          uint64_t v24 = 0LL;
          goto LABEL_9;
        }
      }

      uint64_t v20 = *(void *)(v13 + 24);
      uint64_t ObjectType = swift_getObjectType(v19);
      swift_unknownObjectRetain(v19);
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v20);
      uint64_t v24 = v23;
      swift_unknownObjectRelease(v19);
LABEL_9:
      uint64_t v3 = v34;
      uint64_t v26 = **(void **)(v0 + 96);
      uint64_t v27 = swift_allocObject(&unk_1000907B0, 32LL, 7LL);
      *(void *)(v27 + swift_weakDestroy(v0 + 16) = &unk_1000977F0;
      *(void *)(v27 + 24) = v13;
      uint64_t v28 = v24 | v22;
      if (v24 | v22)
      {
        uint64_t v28 = v0 + 16;
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v0 + 24) = 0LL;
        *(void *)(v0 + 32) = v22;
        *(void *)(v0 + 40) = v24;
      }

      ++v5;
      uint64_t v6 = *(void *)(v0 + 136);
      *(void *)(v0 + 72) = 1LL;
      *(void *)(v0 + 80) = v28;
      *(void *)(v0 + 88) = v26;
      uint64_t v7 = swift_task_create(v18 | 0x3100, v0 + 72, &type metadata for ()[8], &unk_1000977F8, v27);
      swift_unknownObjectRelease(v39);
      swift_release(v7);
      sub_10000C234(v6, &qword_1000963A0);
      uint64_t v4 = v38;
      if (v37 == v5)
      {
        swift_bridgeObjectRelease(v34);
        break;
      }
    }
  }

  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v30 = sub_10004EF74( &qword_1000976E0,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup,  (uint64_t)&unk_1000785C4);
  unint64_t v31 = (void *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  *(void *)(v0 + 144) = v31;
  uint64_t v32 = sub_100009FDC(&qword_100097800);
  *unint64_t v31 = v0;
  v31[1] = sub_10004DE78;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(v29, v30, v32);
}

uint64_t sub_10004DE78()
{
  uint64_t v1 = *(void *)(*v0 + 136);
  uint64_t v2 = *(void *)(*v0 + 128);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10004DED4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000976EC);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10000A560;
  return sub_10004DAF4((uint64_t)v8, a2, v5, v6, v7);
}

unint64_t sub_10004DF3C()
{
  unint64_t result = qword_1000976F8;
  if (!qword_1000976F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078584, &type metadata for BackendGroup.Error);
    atomic_store(result, (unint64_t *)&qword_1000976F8);
  }

  return result;
}

uint64_t sub_10004DF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[18] = a5;
  v7[19] = a7;
  v7[17] = a4;
  uint64_t v11 = sub_100009FDC(&qword_100097808);
  v7[20] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CocoaError(0LL);
  v7[21] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[22] = v13;
  v7[23] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URLError.Code(0LL);
  _BYTE v7[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v7[25] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[26] = swift_task_alloc(v16);
  v7[27] = swift_task_alloc(v16);
  uint64_t v17 = sub_100009FDC(&qword_100097810);
  v7[28] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for URLError(0LL);
  v7[29] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v7[30] = v19;
  v7[31] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v21 = *(int **)(a5 + 8);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v21 + *v21);
  uint64_t v22 = (void *)swift_task_alloc(v21[1]);
  v7[32] = v22;
  *uint64_t v22 = v7;
  v22[1] = sub_10004E0E0;
  return v24(a6, ObjectType, a5);
}

uint64_t sub_10004E0E0()
{
  uint64_t v2 = *(void *)(*v1 + 256);
  uint64_t v3 = *v1;
  *(void *)(v3 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10004E2D8, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 216);
  uint64_t v6 = *(void *)(v3 + 224);
  uint64_t v7 = *(void *)(v3 + 208);
  uint64_t v8 = *(void *)(v3 + 184);
  uint64_t v9 = *(void *)(v3 + 160);
  swift_task_dealloc(*(void *)(v3 + 248));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10004E1A4()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 152) + 112LL;
  swift_beginAccess(v2, v0 + 40, 33LL, 0LL);
  swift_unknownObjectRetain(v1);
  uint64_t v3 = sub_10004EC9C(v2, v1);
  uint64_t result = swift_unknownObjectRelease(v1);
  int64_t v5 = *(void *)(*(void *)v2 + 16LL);
  if (v5 < v3)
  {
    __break(1u);
  }

  else
  {
    sub_10004EE04(v3, v5);
    swift_endAccess(v0 + 40);
    return swift_task_switch(sub_10004E258, 0LL);
  }

  return result;
}

uint64_t sub_10004E258()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E2D8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  swift_errorRetain(v1);
  uint64_t v5 = sub_100009FDC(&qword_100098870);
  char v6 = swift_dynamicCast(v4, v0 + 104, v5, v2, 6LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 168);
    v7(v11, 0LL, 1LL, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v11, v10);
    LOBYTE(v11) = CocoaError.isCoderError.getter(v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 160);
    v7(v13, 1LL, 1LL, *(void *)(v0 + 168));
    sub_10000C234(v13, &qword_100097808);
  }

  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 224);
  *(void *)(v0 + 80) = v14;
  swift_errorRetain(v14);
  char v18 = swift_dynamicCast(v17, v0 + 80, v5, v15, 6LL);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v18 & 1) != 0)
  {
    uint64_t v20 = *(void *)(v0 + 240);
    uint64_t v21 = *(void *)(v0 + 248);
    uint64_t v57 = v20;
    uint64_t v22 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v24 = *(void *)(v0 + 216);
    uint64_t v26 = *(void *)(v0 + 192);
    uint64_t v58 = *(void *)(v0 + 200);
    v19(v22, 0LL, 1LL, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, v22, v23);
    sub_10004EF74( &qword_100097820,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
    uint64_t v27 = _BridgedStoredNSError.code.getter(v23);
    static URLError.Code.cancelled.getter(v27);
    uint64_t v28 = sub_10004EF74( &qword_100097828,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError.Code,  (uint64_t)&protocol conformance descriptor for URLError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 120), v26, v28);
    dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 128), v26, v28);
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 128);
    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v31(v25, v26);
    v31(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v21, v23);
    if (v30 == v29)
    {
LABEL_7:
      swift_errorRelease(*(void *)(v0 + 264));
      uint64_t v32 = *(void *)(v0 + 216);
      uint64_t v33 = *(void *)(v0 + 224);
      uint64_t v34 = *(void *)(v0 + 208);
      uint64_t v35 = *(void *)(v0 + 184);
      uint64_t v36 = *(void *)(v0 + 160);
      swift_task_dealloc(*(void *)(v0 + 248));
      swift_task_dealloc(v33);
      swift_task_dealloc(v32);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 224);
    v19(v38, 1LL, 1LL, *(void *)(v0 + 232));
    sub_10000C234(v38, &qword_100097810);
  }

  if (qword_10009CC20 != -1) {
    swift_once(&qword_10009CC20, sub_10004D86C);
  }
  uint64_t v39 = *(void *)(v0 + 264);
  uint64_t v40 = *(void *)(v0 + 136);
  uint64_t v41 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v41, (uint64_t)qword_10009CC28);
  swift_errorRetain(v39);
  swift_unknownObjectRetain(v40);
  swift_errorRetain(v39);
  uint64_t v42 = swift_unknownObjectRetain(v40);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v46 = *(void *)(v0 + 264);
  if (v45)
  {
    __int128 v56 = *(_OWORD *)(v0 + 136);
    uint64_t v47 = swift_slowAlloc(22LL, -1LL);
    uint64_t v48 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v48;
    *(_DWORD *)uint64_t v47 = 136446466;
    *(_OWORD *)(v0 + 64) = v56;
    swift_unknownObjectRetain(v56);
    uint64_t v49 = sub_100009FDC(&qword_100097818);
    uint64_t v50 = String.init<A>(describing:)(v0 + 64, v49);
    unint64_t v52 = v51;
    *(void *)(v0 + 88) = sub_100009984(v50, v51, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v47 + 4, v47 + 12);
    swift_unknownObjectRelease_n(v56, 2LL);
    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v47 + 12) = 2082;
    swift_getErrorValue(v46, v0 + 96, v0 + 16);
    uint64_t v53 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v55 = v54;
    *(void *)(v0 + 112) = sub_100009984(v53, v54, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease(v55);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "disabling backend '%{public}s' which returned error: %{public}s",  (uint8_t *)v47,  0x16u);
    swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(*(void *)(v0 + 136), 2LL);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
  }

  return swift_task_switch(sub_10004E1A4, *(void *)(v0 + 152));
}

uint64_t sub_10004E7F0()
{
  return swift_defaultActor_deallocate(v0);
}

unint64_t sub_10004E818()
{
  unint64_t result = qword_100097700;
  if (!qword_100097700)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007851C, &type metadata for BackendGroup.Error);
    atomic_store(result, (unint64_t *)&qword_100097700);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BackendGroup.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10004E89C + 4 * asc_100078510[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10004E8BC + 4 * byte_100078515[v4]))();
  }
}

_BYTE *sub_10004E89C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10004E8BC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10004E8C4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10004E8CC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10004E8D4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10004E8DC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackendGroup.Error()
{
  return &type metadata for BackendGroup.Error;
}

uint64_t sub_10004E8F8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10004E934()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  char v6 = (void *)swift_task_alloc(dword_1000977E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10001B608;
  return sub_10004DF80((uint64_t)v6, v7, v8, v2, v3, v5, v4);
}

uint64_t sub_10004E998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_1000963A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E9E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004EA04(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000977EC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A560;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000977E8 + dword_1000977E8))(a1, v4);
}

void *sub_10004EA74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100009FDC((uint64_t *)&unk_100097830);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10004EB94(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004EB80(void *a1)
{
  return sub_10004EA74(0LL, a1[2], 0, a1);
}

uint64_t sub_10004EB94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100009FDC(&qword_100097818);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10004EC9C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)result;
  unint64_t v3 = *(void *)(*(void *)result + 16LL);
  if (!v3) {
    return 0LL;
  }
  char v5 = (void *)result;
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  while (v2[v6 + 4] != a2)
  {
    ++v7;
    v6 += 2LL;
    if (v3 == v7) {
      return *(void *)(*(void *)result + 16LL);
    }
  }

  unint64_t v8 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_11;
  }

  while (v8 != v3)
  {
    if (v8 >= v3)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }

    uint64_t v9 = v2[v6 + 6];
    if (v9 != a2)
    {
      if (v8 != v7)
      {
        if (v7 >= v3) {
          goto LABEL_25;
        }
        uint64_t v10 = v2[v6 + 7];
        __int128 v15 = *(_OWORD *)&v2[2 * v7 + 4];
        swift_unknownObjectRetain(v2[2 * v7 + 4]);
        swift_unknownObjectRetain(v9);
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
          uint64_t v2 = sub_10004EB80(v2);
        }
        uint64_t v11 = &v2[2 * v7];
        uint64_t v12 = v11[4];
        v11[4] = v9;
        _OWORD v11[5] = v10;
        uint64_t result = swift_unknownObjectRelease(v12);
        if (v8 >= v2[2]) {
          goto LABEL_26;
        }
        uint64_t v13 = v2[v6 + 6];
        *(_OWORD *)&v2[v6 + 6] = v15;
        uint64_t result = swift_unknownObjectRelease(v13);
        void *v5 = v2;
      }

      if (__OFADD__(v7++, 1LL)) {
        goto LABEL_24;
      }
      unint64_t v3 = v2[2];
    }

void *sub_10004EE04(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10004EA74(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = sub_100009FDC(&qword_100097818);
  uint64_t result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, v12);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v14 = v4[2];
  BOOL v15 = __OFSUB__(v14, a2);
  uint64_t v16 = v14 - a2;
  if (v15) {
    goto LABEL_26;
  }
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v17[16 * v16]) {
      uint64_t result = memmove(&v4[2 * a1 + 4], v17, 16 * v16);
    }
    uint64_t v18 = v4[2];
    BOOL v15 = __OFADD__(v18, v8);
    uint64_t v19 = v18 - v7;
    if (!v15)
    {
      void v4[2] = v19;
LABEL_20:
      void *v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_10004EF74(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10004EFB4()
{
  uint64_t v0 = type metadata accessor for RequestOptions();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t result = swift_unknownObjectRelease(v2);
  static RequestOptions.globalRequestOptions = v1;
  return result;
}

uint64_t RequestOptions.__allocating_init(networkingDelegate:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_beginAccess(v3 + 16, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  swift_unknownObjectRelease(v4);
  return v3;
}

uint64_t *RequestOptions.globalRequestOptions.unsafeMutableAddressor()
{
  if (qword_10009CE40 != -1) {
    swift_once(&qword_10009CE40, sub_10004EFB4);
  }
  return &static RequestOptions.globalRequestOptions;
}

uint64_t static RequestOptions.globalRequestOptions.getter()
{
  if (qword_10009CE40 != -1) {
    swift_once(&qword_10009CE40, sub_10004EFB4);
  }
  swift_beginAccess(&static RequestOptions.globalRequestOptions, v1, 0LL, 0LL);
  return swift_retain(static RequestOptions.globalRequestOptions);
}

uint64_t static RequestOptions.globalRequestOptions.setter(uint64_t a1)
{
  if (qword_10009CE40 != -1) {
    swift_once(&qword_10009CE40, sub_10004EFB4);
  }
  swift_beginAccess(&static RequestOptions.globalRequestOptions, v4, 1LL, 0LL);
  uint64_t v2 = static RequestOptions.globalRequestOptions;
  static RequestOptions.globalRequestOptions = a1;
  return swift_release(v2);
}

uint64_t (*static RequestOptions.globalRequestOptions.modify(uint64_t a1))(void)
{
  if (qword_10009CE40 != -1) {
    swift_once(&qword_10009CE40, sub_10004EFB4);
  }
  swift_beginAccess(&static RequestOptions.globalRequestOptions, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t RequestOptions.init(networkingDelegate:)(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_beginAccess(v1 + 16, v5, 1LL, 0LL);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  swift_unknownObjectRelease(v3);
  return v1;
}

id sub_10004F268(unsigned int a1)
{
  char v2 = a1;
  uint64_t v3 = (a1 >> 8) & 1;
  id v4 = [objc_allocWithZone(C2RequestOptions) init];
  objc_msgSend(v4, "set_timeoutIntervalForRequest:", 5.0);
  [v4 setAllowsCellularAccess:v2 & 1];
  objc_msgSend(v4, "set_allowsExpensiveAccess:", v3);
  NSString v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "set_sourceApplicationBundleIdentifier:", v5);

  swift_beginAccess(v1 + 16, v7, 0LL, 0LL);
  if (*(void *)(v1 + 16)) {
    objc_msgSend(v4, "setNetworkingDelegate:");
  }
  return v4;
}

uint64_t RequestOptions.deinit()
{
  return v0;
}

uint64_t RequestOptions.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for RequestOptions()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService14RequestOptions);
}

uint64_t sub_10004F3B4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EE30);
  sub_100009FC4(v0, (uint64_t)qword_10009EE30);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010007BE20LL,  0x656C74746F726874LL,  0xE800000000000000LL);
}

uint64_t sub_10004F428(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_defaultActor_initialize();
  *(void *)(v3 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state) = 0LL;
  uint64_t v4 = v3 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_location;
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v4, a1, v5);
  return v3;
}

void sub_10004F4A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

id sub_10004F4CC()
{
  uint64_t v1 = OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state);
  if (!v2)
  {
    uint64_t v12 = Data.init(contentsOf:options:)(v0 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_location, 0LL);
    unint64_t v14 = v13;
    BOOL v15 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    sub_10000A0B8(v12, v14);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000A074(v12, v14);
    *(void *)&__int128 v35 = 0LL;
    id v17 = [v15 propertyListWithData:isa options:0 format:0 error:&v35];

    uint64_t v18 = v35;
    if (v17)
    {
      id v19 = (id)v35;
      _bridgeAnyObjectToAny(_:)(&v35, v17);
      sub_10000A074(v12, v14);
      swift_unknownObjectRelease(v17);
      uint64_t v20 = sub_100009FDC(&qword_100096630);
      int v21 = swift_dynamicCast(&v34, &v35, (char *)&type metadata for Any + 8, v20, 6LL);
      uint64_t v22 = v34;
      if (!v21) {
        uint64_t v22 = 0LL;
      }
    }

    else
    {
      id v30 = (id)v35;
      uint64_t v31 = _convertNSErrorToError(_:)(v18);

      swift_willThrow(v32);
      sub_10000A074(v12, v14);
      swift_errorRelease(v31);
      uint64_t v22 = 0LL;
    }

    uint64_t v33 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v22;
    swift_bridgeObjectRelease(v33);
    uint64_t v2 = *(void *)(v0 + v1);
    if (!v2) {
      return 0LL;
    }
  }

  if (!*(void *)(v2 + 16)) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain(v2);
  unint64_t v3 = sub_100010540(0xD000000000000011LL, 0x800000010007BDE0LL);
  if ((v4 & 1) == 0) {
    goto LABEL_17;
  }
  sub_10000C2D4(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v35);
  unint64_t v5 = sub_100050330();
  uint64_t v6 = v34;
  if (!*(void *)(v2 + 16)
    || (unint64_t v7 = sub_100010540(0xD000000000000012LL, 0x800000010007BE00LL), (v8 & 1) == 0)
    || (sub_10000C2D4(*(void *)(v2 + 56) + 32 * v7, (uint64_t)&v35),
        (swift_dynamicCast(&v34, &v35, (char *)&type metadata for Any + 8, v5, 6LL) & 1) == 0))
  {

LABEL_17:
    swift_bridgeObjectRelease(v2);
LABEL_18:
    if (qword_10009CE50 != -1) {
      swift_once(&qword_10009CE50, sub_10004F3B4);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_100009FC4(v23, (uint64_t)qword_10009EE30);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "failed to decode throttle state", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    id v28 = 0LL;
    goto LABEL_23;
  }

  int64_t v9 = v34;
  if (*(void *)(v2 + 16) && (unint64_t v10 = sub_100010540(0x756F437972746572LL, 0xEC0000007265746ELL), (v11 & 1) != 0))
  {
    sub_10000C2D4(*(void *)(v2 + 56) + 32 * v10, (uint64_t)&v35);
  }

  else
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
  }

  swift_bridgeObjectRelease(v2);
  if (!*((void *)&v36 + 1))
  {

    sub_1000509E4((uint64_t)&v35);
    goto LABEL_18;
  }

  if ((swift_dynamicCast(&v34, &v35, (char *)&type metadata for Any + 8, v5, 6LL) & 1) == 0)
  {

    goto LABEL_18;
  }

  uint64_t v25 = (os_log_s *)v34;
  [v6 doubleValue];
  [v9 doubleValue];
  id v28 = -[os_log_s integerValue](v25, "integerValue");

LABEL_23:
  return v28;
}

void sub_10004F92C(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  id v7 = [objc_allocWithZone(NSNumber) initWithDouble:a2];
  unint64_t v8 = sub_100050330();
  unint64_t v33 = v8;
  *(void *)&__int128 v32 = v7;
  sub_100030C0C(&v32, v31);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_100050668(v31, 0xD000000000000011LL, 0x800000010007BDE0LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v10 = [objc_allocWithZone(NSNumber) initWithDouble:a3];
  unint64_t v33 = v8;
  *(void *)&__int128 v32 = v10;
  sub_100030C0C(&v32, v31);
  char v11 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_100050668(v31, 0xD000000000000012LL, 0x800000010007BE00LL, v11);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v12 = [objc_allocWithZone(NSNumber) initWithInteger:a1];
  unint64_t v33 = v8;
  *(void *)&__int128 v32 = v12;
  sub_100030C0C(&v32, v31);
  char v13 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_100050668(v31, 0x756F437972746572LL, 0xEC0000007265746ELL, v13);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state);
  *(void *)(v4 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v14);
  BOOL v15 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  *(void *)&__int128 v32 = 0LL;
  id v17 = [v15 dataWithPropertyList:isa format:100 options:0 error:&v32];

  id v18 = (id)v32;
  if (v17)
  {
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;

    uint64_t v22 = v4 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_location;
    sub_10000A0B8(v19, v21);
    Data.write(to:options:)(v22, 0LL, v19, v21);
    sub_10000A074(v19, v21);
    sub_10000A074(v19, v21);
  }

  else
  {
    uint64_t v23 = v18;
    uint64_t v24 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v25);
    swift_errorRelease(v24);
    if (qword_10009CE50 != -1) {
      swift_once(&qword_10009CE50, sub_10004F3B4);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_100009FC4(v26, (uint64_t)qword_10009EE30);
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "failed to encode throttle", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }
  }

uint64_t sub_10004FDC4()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_10004FE28, v0);
}

uint64_t sub_10004FE28()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state);
  *(void *)(v1 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state) = 0LL;
  swift_bridgeObjectRelease(v2);
  id v3 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC21CloudTelemetryService8Throttle_location);
  unint64_t v5 = v4;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  unsigned int v6 = [v3 removeItemAtURL:v4 error:v0 + 16];

  id v7 = *(void **)(v0 + 16);
  if (v6)
  {
    id v8 = v7;
  }

  else
  {
    id v9 = v7;
    uint64_t v10 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v11);
    if (qword_10009CE50 != -1) {
      swift_once(&qword_10009CE50, sub_10004F3B4);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_100009FC4(v12, (uint64_t)qword_10009EE30);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "failed to clear throttle", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    swift_errorRelease(v10);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FFEC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005004C, v0);
}

uint64_t sub_10005004C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  id v4 = sub_10004F4CC();
  double v6 = v5;
  double v8 = v7;
  uint64_t v9 = static Date.now.getter(v4);
  double v10 = Date.timeIntervalSince1970.getter(v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  BOOL v11 = 1LL;
  if (v6 != 0.0) {
    BOOL v11 = v8 == 0.0 || v10 + 3600.0 < v6 || v6 + v8 < v10;
  }
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v11);
}

uint64_t sub_100050104()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100050164, v0);
}

uint64_t sub_100050164()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  int64_t v4 = (int64_t)sub_10004F4CC();
  uint64_t v5 = static Date.now.getter(v4);
  double v6 = Date.timeIntervalSince1970.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t result = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 40);
    double v9 = 86400.0;
    sub_10004F92C(result, v6, v9);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_100050210()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_location;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService8Throttle_state));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10005026C()
{
  return type metadata accessor for Throttle(0LL);
}

uint64_t type metadata accessor for Throttle(uint64_t a1)
{
  uint64_t result = qword_10009CEF0;
  if (!qword_10009CEF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Throttle);
  }
  return result;
}

uint64_t sub_1000502B0(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1000786B8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100050330()
{
  unint64_t result = qword_100097170;
  if (!qword_100097170)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100097170);
  }

  return result;
}

uint64_t sub_10005036C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100097A48);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    __int128 v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              unint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

void sub_100050668(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        int64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10000C2B4(v19);
        sub_100030C0C(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100050800();
      goto LABEL_7;
    }

    sub_10005036C(v15, a4 & 1);
    unint64_t v20 = sub_100010540(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100050798(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_100050798(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100030C0C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void sub_100050800()
{
  uint64_t v1 = v0;
  sub_100009FDC(&qword_100097A48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v25 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1000509E4(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100096638);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100050A24()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EE48);
  sub_100009FC4(v0, (uint64_t)qword_10009EE48);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x6E61656C632D6264LL,  0xEA00000000007075LL);
}

uint64_t sub_100050A9C()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[8] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  void v1[9] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  return swift_task_switch(sub_100050B0C, v0);
}

uint64_t sub_100050B0C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112LL);
  *(void *)(v0 + 96) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = swift_retain(v1);
    uint64_t v6 = static Date.now.getter(v5);
    Date.addingTimeInterval(_:)(v6, -172800.0);
    unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    *(void *)(v0 + 104) = v7;
    v7(v2, v3);
    uint64_t v8 = (void *)swift_task_alloc(dword_100096C2C);
    *(void *)(v0 + 112) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100050C9C;
    return sub_1000213E8(*(void *)(v0 + 88));
  }

  else
  {
    if (qword_10009CF00 != -1) {
      swift_once(&qword_10009CF00, sub_100050A24);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_100009FC4(v10, (uint64_t)qword_10009EE48);
    unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "cleanup cache activity skipped due to bad initialization",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100050C9C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v3 = *(void **)v1;
  v3[15] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100050DEC, v3[7]);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_100096C64);
  v3[16] = v5;
  void *v5 = v3;
  v5[1] = sub_100050D2C;
  return sub_100022068();
}

uint64_t sub_100050D2C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100051008;
  }
  else {
    uint64_t v4 = sub_100050D90;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56));
}

uint64_t sub_100050D90()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 96));
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050DEC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  if (qword_10009CF00 != -1) {
    swift_once(&qword_10009CF00, sub_100050A24);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_10009EE48);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to delete outdated sessions: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_release(v13);

    swift_errorRelease(v1);
  }

  else
  {
    swift_release(*(void *)(v0 + 96));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v11 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051008()
{
  uint64_t v1 = *(void *)(v0 + 136);
  (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  if (qword_10009CF00 != -1) {
    swift_once(&qword_10009CF00, sub_100050A24);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v2, (uint64_t)qword_10009EE48);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v10 = v9;
    *(void *)(v0 + 48) = sub_100009984(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to delete outdated sessions: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_release(v13);

    swift_errorRelease(v1);
  }

  else
  {
    swift_release(*(void *)(v0 + 96));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v11 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051224()
{
  uint64_t v2 = *(int **)(*(void *)v0 + 104LL);
  os_log_type_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000A560;
  return v5();
}

double sub_10005127C()
{
  uint64_t v0 = CacheCleanupActivityConfig.activityFlags.unsafeMutableAddressor();
  swift_beginAccess(v0, v2, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(*v0).n128_u64[0];
  return result;
}

uint64_t sub_1000512BC()
{
  uint64_t v0 = CacheCleanupActivityConfig.identifier.unsafeMutableAddressor();
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRetain(*((void *)v0 + 1));
  return v1;
}

unint64_t sub_1000512EC(uint64_t a1)
{
  unint64_t result = sub_100051310();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100051310()
{
  unint64_t result = qword_100097A60;
  if (!qword_100097A60)
  {
    uint64_t v1 = type metadata accessor for CacheCleanupActivity();
    unint64_t result = swift_getWitnessTable(&unk_1000786D0, v1);
    atomic_store(result, (unint64_t *)&qword_100097A60);
  }

  return result;
}

uint64_t type metadata accessor for CacheCleanupActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService20CacheCleanupActivity);
}

BOOL sub_100051374(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t sub_100051388@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100051F78(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000513B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000513EC + 4 * byte_100078740[a1]))( 0x79745F746E657665LL,  0xEA00000000006570LL);
}

uint64_t sub_1000513EC()
{
  return 0x6C72755F74736F70LL;
}

unint64_t sub_100051404()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100051604(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1000513B4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1000513B4(v2) && v5 == v6)
  {
    char v9 = 1;
    uint64_t v8 = v5;
  }

  else
  {
    uint64_t v8 = v6;
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

void sub_10005168C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000516F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100051750 + 4 * byte_100078759[a2]))(0xD000000000000012LL);
}

uint64_t sub_100051750(uint64_t a1)
{
  unint64_t v2 = 0x800000010007BEA0LL;
  if (a1 == 0xD000000000000012LL && v1 == 0x800000010007BEA0LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

Swift::Int sub_1000517FC()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_1000513B4(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10005185C(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1000518B4()
{
  return Hasher._finalize()();
}

uint64_t sub_100051924(uint64_t a1)
{
  uint64_t v3 = sub_1000513B4(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100051964(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_1000513B4(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

void sub_1000519C0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100051A14()
{
  return Hasher._finalize()();
}

uint64_t sub_100051A84@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100052110(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100051AB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000513B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100051AD8()
{
  return sub_1000513B4(*v0);
}

uint64_t sub_100051AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100052110(a1, a2);
  *a3 = result;
  return result;
}

void sub_100051B04(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_100051B10(uint64_t a1)
{
  unint64_t v2 = sub_100054418();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051B38(uint64_t a1)
{
  unint64_t v2 = sub_100054418();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100051B60@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(void *)(a2 + 192) = v11;
    __int128 v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    __int128 v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    __int128 v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    __int128 v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_100051BE0()
{
  if (*v0) {
    return 0x6C6F687365726874LL;
  }
  else {
    return 0x7972746E756F63LL;
  }
}

uint64_t sub_100051C20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100052EE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100051C44(uint64_t a1)
{
  unint64_t v2 = sub_10005449C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051C6C(uint64_t a1)
{
  unint64_t v2 = sub_10005449C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100051C94(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = sub_100052FE0(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(double *)(a2 + 8) = v5;
  }

void sub_100051CC0(char *a1)
{
}

void sub_100051CCC()
{
}

void sub_100051CD4()
{
  __asm { BR              X10 }

uint64_t sub_100051D18(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010007BEA0LL);
}

void sub_100051D74(uint64_t a1)
{
}

unint64_t sub_100051D7C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005319C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100051DA8()
{
  return ((uint64_t (*)(void))((char *)sub_100051DE0 + 4 * byte_100078771[*v0]))();
}

void sub_100051DE0(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x800000010007BEA0LL;
}

void sub_100051E00(void *a1@<X8>)
{
  *a1 = 0x737265746C6966LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t sub_100051E30()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100051E68 + 4 * byte_100078775[*v0]))( 0x79745F746E657665LL,  0xEB00000000736570LL);
}

unint64_t sub_100051E68()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100051E84()
{
  return 0x737265746C6966LL;
}

uint64_t sub_100051E9C()
{
  return 0x73747069726373LL;
}

unint64_t sub_100051EB4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005319C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100051ED8(uint64_t a1)
{
  unint64_t v2 = sub_1000543D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051F00(uint64_t a1)
{
  unint64_t v2 = sub_1000543D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100051F28@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_100051F78(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_10000A32C(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v17, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    sub_10000A32C(v17, v18);
    char v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    if (!v8)
    {
      uint64_t v5 = 1LL;
      goto LABEL_10;
    }

    if (v8 == 1)
    {
      uint64_t v5 = 0LL;
LABEL_10:
      sub_10000C2B4(v17);
      sub_10000C2B4(a1);
      return v5;
    }

    uint64_t v10 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v10, &protocol witness table for DecodingError, 0LL, 0LL);
    unint64_t v12 = v11;
    sub_100009FDC(&qword_100097BC8);
    *unint64_t v12 = &type metadata for StorebagBool;
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    uint64_t v5 = (uint64_t)sub_10000A32C(a1, v13);
    uint64_t v15 = dispatch thunk of Decoder.codingPath.getter(v13, v14);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v15,  0xD00000000000001BLL,  0x800000010007C050LL,  0LL);
    uint64_t v16 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v12,  enum case for DecodingError.typeMismatch(_:),  v10);
    swift_willThrow(v16);
    sub_10000C2B4(v17);
  }

  sub_10000C2B4(a1);
  return v5;
}

uint64_t sub_100052110(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100090888, a1, a2, &unk_10009D010);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x15) {
    return 21LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100052160@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_100097B90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __int128 v166 = a1;
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_100054418();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionClientHTTP.CodingKeys,  &type metadata for StorebagSectionClientHTTP.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(v166);
  }
  LOBYTE(v110) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v110, v5);
  uint64_t v14 = v13;
  LOBYTE(v110) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v89 = KeyedDecodingContainer.decode(_:forKey:)(&v110, v5);
  uint64_t v90 = v12;
  LOBYTE(v110) = 2;
  uint64_t v16 = v15;
  __n128 v17 = swift_bridgeObjectRetain(v15);
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5, v17);
  uint64_t v96 = v16;
  uint64_t v88 = v18;
  char v165 = v19 & 1;
  LOBYTE(v110) = 3;
  LODWORD(vswift_weakDestroy(v0 + 16) = v19;
  uint64_t v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5);
  int v85 = v20;
  int v86 = v16;
  char v163 = v20 & 1;
  LOBYTE(v97) = 4;
  unint64_t v21 = sub_1000544E0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v21,  v22);
  unint64_t v83 = v21;
  int v82 = v110;
  uint64_t v23 = sub_100009FDC(&qword_100096C10);
  LOBYTE(v97) = 5;
  uint64_t v84 = sub_100054524((unint64_t *)&qword_1000971F0, &qword_100096C10);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, v23, &v97, v5, v23, v84, v24);
  LOBYTE(v97) = 6;
  uint64_t v81 = v110;
  __n128 v25 = swift_bridgeObjectRetain(v110);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, v23, &v97, v5, v23, v84, v25);
  uint64_t v80 = v23;
  uint64_t v26 = v110;
  LOBYTE(v110) = 7;
  uint64_t v27 = v26;
  __n128 v28 = swift_bridgeObjectRetain(v26);
  uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5, v28);
  uint64_t v79 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = sub_100009FDC(&qword_100097BA0);
  LOBYTE(v97) = 8;
  uint64_t v32 = sub_100054524(&qword_100097BA8, &qword_100097BA0);
  uint64_t v95 = v30;
  __n128 v33 = swift_bridgeObjectRetain(v30);
  uint64_t v93 = v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, v31, &v97, v5, v31, v32, v33);
  LOBYTE(v97) = 9;
  uint64_t v94 = v110;
  __n128 v34 = swift_bridgeObjectRetain(v110);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, v93, &v97, v5, v93, v32, v34);
  uint64_t v35 = v110;
  LOBYTE(v110) = 10;
  uint64_t v93 = v35;
  swift_bridgeObjectRetain(v35);
  uint64_t v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5);
  int v77 = v36;
  char v160 = v36 & 1;
  LOBYTE(v97) = 11;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v37);
  int v75 = v110;
  uint64_t v38 = sub_100009FDC(&qword_100097B50);
  LOBYTE(v97) = 12;
  sub_10005445C(&qword_100097B70, &qword_100097B50);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v110, v38);
  uint64_t v39 = v110;
  char v157 = v112;
  LOBYTE(v110) = 13;
  uint64_t v91 = v111;
  uint64_t v92 = v39;
  int v74 = v112;
  sub_100047A34(v39, v111, v112);
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5, v40);
  uint64_t v42 = v41;
  LOBYTE(v97) = 14;
  __n128 v43 = swift_bridgeObjectRetain(v41);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v43);
  int v72 = v110;
  LOBYTE(v97) = 15;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v44);
  int v71 = v110;
  LOBYTE(v97) = 16;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, v80, &v97, v5, v80, v84, v45);
  LOBYTE(v97) = 17;
  uint64_t v84 = v110;
  __n128 v46 = swift_bridgeObjectRetain(v110);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v46);
  LODWORD(v80) = v110;
  LOBYTE(v97) = 18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v47);
  int v70 = v110;
  LOBYTE(v97) = 19;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for StorebagBool,  &v97,  v5,  &type metadata for StorebagBool,  v83,  v48);
  LODWORD(v83) = v110;
  uint64_t v49 = sub_100009FDC(&qword_100097BB0);
  char v150 = 20;
  unint64_t v50 = sub_100054578();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v151, v49, &v150, v5, v49, v50, v51);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v69 = v151;
  *(void *)&__int128 v97 = v90;
  *((void *)&v97 + 1) = v14;
  *(void *)&__int128 v98 = v89;
  *((void *)&v98 + 1) = v96;
  *(void *)&__int128 v99 = v88;
  BYTE8(v99) = v86 & 1;
  *(void *)&__int128 v100 = v87;
  BYTE8(v100) = v85 & 1;
  BYTE9(v100) = v82;
  *(void *)&__int128 v101 = v81;
  *((void *)&v101 + 1) = v79;
  *(void *)&__int128 v102 = v78;
  *((void *)&v102 + 1) = v95;
  uint64_t v52 = v92;
  *(void *)&__int128 v103 = v94;
  *((void *)&v103 + 1) = v93;
  *(void *)&__int128 v104 = v76;
  BYTE8(v104) = v77 & 1;
  char v53 = v74;
  BYTE9(v104) = v75;
  uint64_t v54 = v91;
  *(void *)&__int128 v105 = v92;
  *((void *)&v105 + 1) = v91;
  LOBYTE(v106) = v74;
  *((void *)&v106 + 1) = v73;
  *(void *)&__int128 v107 = v42;
  uint64_t v68 = v42;
  BYTE8(v107) = v72;
  BYTE9(v107) = v71;
  uint64_t v55 = v84;
  *(void *)&__int128 v108 = v84;
  BYTE8(v108) = v80;
  BYTE9(v108) = v70;
  BYTE10(v108) = v83;
  uint64_t v109 = v151;
  sub_100048FB8((uint64_t)&v97);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v55);
  sub_100047A58(v52, v54, v53);
  swift_bridgeObjectRelease(v14);
  uint64_t v56 = v96;
  swift_bridgeObjectRelease(v96);
  swift_bridgeObjectRelease(v81);
  uint64_t v57 = v79;
  swift_bridgeObjectRelease(v79);
  uint64_t v58 = v95;
  swift_bridgeObjectRelease(v95);
  uint64_t v59 = v94;
  swift_bridgeObjectRelease(v94);
  uint64_t v60 = v93;
  swift_bridgeObjectRelease(v93);
  sub_10000C2B4(v166);
  uint64_t v110 = v90;
  uint64_t v111 = v14;
  uint64_t v112 = v89;
  uint64_t v113 = v56;
  uint64_t v114 = v88;
  char v115 = v165;
  *(_DWORD *)uint64_t v116 = *(_DWORD *)v164;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v164[3];
  uint64_t v117 = v87;
  char v118 = v163;
  char v119 = v82;
  int v120 = v161;
  __int16 v121 = v162;
  uint64_t v122 = v81;
  uint64_t v123 = v57;
  uint64_t v124 = v78;
  uint64_t v125 = v58;
  uint64_t v126 = v59;
  uint64_t v127 = v60;
  uint64_t v128 = v76;
  char v129 = v160;
  char v130 = v75;
  int v131 = v158;
  __int16 v132 = v159;
  uint64_t v133 = v92;
  uint64_t v134 = v91;
  char v135 = v157;
  *(_DWORD *)&v136[3] = *(_DWORD *)&v156[3];
  *(_DWORD *)uint64_t v136 = *(_DWORD *)v156;
  uint64_t v137 = v73;
  uint64_t v138 = v68;
  char v139 = v72;
  char v140 = v71;
  __int16 v142 = v155;
  int v141 = v154;
  uint64_t v143 = v84;
  char v144 = v80;
  char v145 = v70;
  char v146 = v83;
  char v148 = v153;
  int v147 = v152;
  uint64_t v149 = v69;
  uint64_t result = sub_10004908C((uint64_t)&v110);
  __int128 v62 = v108;
  *(_OWORD *)(a2 + 160) = v107;
  *(_OWORD *)(a2 + 176) = v62;
  *(void *)(a2 + 192) = v109;
  __int128 v63 = v104;
  *(_OWORD *)(a2 + 96) = v103;
  *(_OWORD *)(a2 + 112) = v63;
  __int128 v64 = v106;
  *(_OWORD *)(a2 + 128) = v105;
  *(_OWORD *)(a2 + 144) = v64;
  __int128 v65 = v100;
  *(_OWORD *)(a2 + 32) = v99;
  *(_OWORD *)(a2 + 48) = v65;
  __int128 v66 = v102;
  *(_OWORD *)(a2 + 64) = v101;
  *(_OWORD *)(a2 + 80) = v66;
  __int128 v67 = v98;
  *(_OWORD *)a2 = v97;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v67;
  return result;
}

uint64_t sub_100052EE4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7972746E756F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63LL, 0xE700000000000000LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C6F687365726874LL && a2 == 0xE900000000000064LL)
  {
    swift_bridgeObjectRelease(0xE900000000000064LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874LL, 0xE900000000000064LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

double sub_100052FE0(void *a1)
{
  uint64_t v4 = sub_100009FDC(&qword_100097B88);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000A32C(a1, v8);
  unint64_t v10 = sub_10005449C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionPerCountrySampling.CodingKeys,  &type metadata for StorebagSectionPerCountrySampling.CodingKeys,  v10,  v8,  v9);
  if (v1)
  {
    sub_10000C2B4(a1);
  }

  else
  {
    uint64_t v11 = sub_100009FDC(&qword_100096C10);
    v16[1] = 0;
    sub_100054524((unint64_t *)&qword_1000971F0, &qword_100096C10);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v11);
    uint64_t v13 = v17;
    v16[0] = 1;
    __n128 v14 = swift_bridgeObjectRetain(v17);
    double v2 = KeyedDecodingContainer.decode(_:forKey:)(v16, v4, v14);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_10000C2B4(a1);
    swift_bridgeObjectRelease(v13);
  }

  return v2;
}

unint64_t sub_10005319C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100090AA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000531E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100009FDC(&qword_100097B68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000A32C(a1, v9);
  unint64_t v11 = sub_1000543D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionClientScriptGroup.CodingKeys,  &type metadata for StorebagSectionClientScriptGroup.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000C2B4(a1);
  }
  uint64_t v12 = sub_100009FDC(&qword_100096C10);
  char v40 = 0;
  sub_100054524((unint64_t *)&qword_1000971F0, &qword_100096C10);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, v12);
  uint64_t v13 = v36;
  LOBYTE(v36) = 1;
  __n128 v14 = swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5, v14);
  int v39 = v16;
  uint64_t v35 = v15;
  uint64_t v17 = sub_100009FDC(&qword_100097B50);
  char v40 = 2;
  uint64_t v18 = sub_10005445C(&qword_100097B70, &qword_100097B50);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, v17, &v40, v5, v17, v18, v19);
  uint64_t v20 = v36;
  uint64_t v21 = v37;
  HIDWORD(v31) = v38;
  uint64_t v32 = sub_100009FDC(&qword_100097B78);
  uint64_t v33 = v21;
  char v40 = 3;
  uint64_t v34 = v20;
  uint64_t v22 = v21;
  LOBYTE(v21) = BYTE4(v31);
  sub_100047A1C(v20, v22, BYTE4(v31));
  sub_10005445C(&qword_100097B80, &qword_100097B78);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, v32);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v23 = v36;
  uint64_t v24 = v37;
  char v25 = v38;
  sub_100047A34(v36, v37, v38);
  sub_10000C2B4(a1);
  swift_bridgeObjectRelease(v13);
  uint64_t v26 = v34;
  unsigned __int8 v27 = v21;
  uint64_t v28 = v33;
  sub_100047A40(v34, v33, v27);
  uint64_t result = sub_100047A58(v23, v24, v25);
  uint64_t v30 = v35;
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v39 & 1;
  *(void *)(a2 + 24) = v26;
  *(void *)(a2 + 32) = v28;
  *(_BYTE *)(a2 + 40) = v27;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v24;
  *(_BYTE *)(a2 + 64) = v25;
  return result;
}

unint64_t sub_10005352C()
{
  unint64_t result = qword_100097B18;
  if (!qword_100097B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078798, &type metadata for StorebagBool);
    atomic_store(result, (unint64_t *)&qword_100097B18);
  }

  return result;
}

unint64_t sub_100053574()
{
  unint64_t result = qword_100097B20;
  if (!qword_100097B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078828, &type metadata for StorebagSectionClientHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B20);
  }

  return result;
}

unint64_t sub_1000535BC()
{
  unint64_t result = qword_100097B28;
  if (!qword_100097B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078940, &type metadata for StorebagSectionClientHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B28);
  }

  return result;
}

unint64_t sub_100053604()
{
  unint64_t result = qword_100097B30;
  if (!qword_100097B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078918, &type metadata for StorebagSectionClientHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B30);
  }

  return result;
}

unint64_t sub_10005364C()
{
  unint64_t result = qword_100097B38;
  if (!qword_100097B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000789B8, &type metadata for StorebagSectionClientScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B38);
  }

  return result;
}

unint64_t sub_100053694()
{
  unint64_t result = qword_100097B40;
  if (!qword_100097B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078AD0, &type metadata for StorebagSectionClientScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B40);
  }

  return result;
}

unint64_t sub_1000536DC()
{
  unint64_t result = qword_100097B48;
  if (!qword_100097B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078AA8, &type metadata for StorebagSectionClientScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B48);
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagBool()
{
  return &type metadata for StorebagBool;
}

uint64_t destroy for StorebagSectionClientHTTP(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 192));
}

uint64_t initializeWithCopy for StorebagSectionClientHTTP(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 1memset(&strm.total_in, 0, 20) = *(_WORD *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  char v17 = *(_BYTE *)(a2 + 144);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_100047A34(v11, v12, v17);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = v12;
  *(_BYTE *)(a1 + 144) = v17;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_WORD *)(a1 + 185) = *(_WORD *)(a2 + 185);
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 192) = v15;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for StorebagSectionClientHTTP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  uint64_t v20 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 1memset(&strm.total_in, 0, 20) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v20;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  uint64_t v21 = *(void *)(a2 + 128);
  uint64_t v22 = *(void *)(a2 + 136);
  char v23 = *(_BYTE *)(a2 + 144);
  sub_100047A34(v21, v22, v23);
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 136);
  char v26 = *(_BYTE *)(a1 + 144);
  *(void *)(a1 + 128) = v21;
  *(void *)(a1 + 136) = v22;
  *(_BYTE *)(a1 + 144) = v23;
  sub_100047A58(v24, v25, v26);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v27 = *(void *)(a2 + 160);
  uint64_t v28 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  uint64_t v29 = *(void *)(a1 + 176);
  uint64_t v30 = *(void *)(a2 + 176);
  *(void *)(a1 + 176) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  uint64_t v31 = *(void *)(a1 + 192);
  uint64_t v32 = *(void *)(a2 + 192);
  *(void *)(a1 + 192) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v31);
  return a1;
}

__n128 initializeWithTake for StorebagSectionClientHTTP(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for StorebagSectionClientHTTP(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v8 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease(*(void *)(a1 + 88));
  uint64_t v9 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 1memset(&strm.total_in, 0, 20) = *(_WORD *)(a2 + 120);
  char v11 = *(_BYTE *)(a2 + 144);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v13 = *(void *)(a1 + 136);
  char v14 = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = v11;
  sub_100047A58(v12, v13, v14);
  uint64_t v15 = *(void *)(a2 + 160);
  uint64_t v16 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v15;
  swift_bridgeObjectRelease(v16);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  uint64_t v17 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_WORD *)(a1 + 185) = *(_WORD *)(a2 + 185);
  uint64_t v18 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionClientHTTP(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionClientHTTP(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 1memset(&strm.total_in, 0, 20) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 200) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionClientHTTP()
{
  return &type metadata for StorebagSectionClientHTTP;
}

uint64_t getEnumTagSinglePayload for StorebagSectionClientHTTP.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

uint64_t storeEnumTagSinglePayload for StorebagSectionClientHTTP.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEB) {
    return ((uint64_t (*)(void))((char *)&loc_100053DD0 + 4 * byte_10007877E[v4]))();
  }
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_100053E04 + 4 * byte_100078779[v4]))();
}

uint64_t sub_100053E04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053E0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100053E14LL);
  }
  return result;
}

uint64_t sub_100053E20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100053E28LL);
  }
  *(_BYTE *)__n128 result = a2 + 20;
  return result;
}

uint64_t sub_100053E2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053E34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionClientHTTP.CodingKeys()
{
  return &type metadata for StorebagSectionClientHTTP.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorebagSectionPerCountrySampling(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for StorebagSectionPerCountrySampling(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for StorebagSectionPerCountrySampling(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for StorebagSectionPerCountrySampling()
{
  return &type metadata for StorebagSectionPerCountrySampling;
}

uint64_t destroy for StorebagSectionClientScriptGroup(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255) {
    sub_100047A58(*(void *)(a1 + 24), *(void *)(a1 + 32), v2 & 1);
  }
  return sub_100047A58(*(void *)(a1 + 48), *(void *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for StorebagSectionClientScriptGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  int v6 = *((unsigned __int8 *)a2 + 40);
  swift_bridgeObjectRetain(v4);
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  }

  else
  {
    char v7 = v6 & 1;
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    sub_100047A34(v8, v9, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v7;
  }

  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  char v12 = *((_BYTE *)a2 + 64);
  sub_100047A34(v10, v11, v12);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  return a1;
}

uint64_t *assignWithCopy for StorebagSectionClientScriptGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  char v7 = (__int128 *)(a1 + 3);
  uint64_t v8 = (__int128 *)(a2 + 3);
  int v9 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned __int8 *)a1 + 40) == 255)
  {
    if (v9 == 255)
    {
      __int128 v11 = *v8;
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      __int128 *v7 = v11;
    }

    else
    {
      char v18 = v9 & 1;
      uint64_t v19 = a2[3];
      uint64_t v20 = a2[4];
      sub_100047A34(v19, v20, v9 & 1);
      a1[3] = v19;
      a1[4] = v20;
      *((_BYTE *)a1 + 40) = v18;
    }
  }

  else if (v9 == 255)
  {
    sub_100054138((uint64_t)(a1 + 3));
    char v10 = *((_BYTE *)a2 + 40);
    __int128 *v7 = *v8;
    *((_BYTE *)a1 + 40) = v10;
  }

  else
  {
    char v12 = v9 & 1;
    uint64_t v13 = a2[3];
    uint64_t v14 = a2[4];
    sub_100047A34(v13, v14, v9 & 1);
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    char v17 = *((_BYTE *)a1 + 40);
    a1[3] = v13;
    a1[4] = v14;
    *((_BYTE *)a1 + 40) = v12;
    sub_100047A58(v15, v16, v17);
  }

  uint64_t v21 = a2[6];
  uint64_t v22 = a2[7];
  char v23 = *((_BYTE *)a2 + 64);
  sub_100047A34(v21, v22, v23);
  uint64_t v24 = a1[6];
  uint64_t v25 = a1[7];
  char v26 = *((_BYTE *)a1 + 64);
  a1[6] = v21;
  a1[7] = v22;
  *((_BYTE *)a1 + 64) = v23;
  sub_100047A58(v24, v25, v26);
  return a1;
}

uint64_t sub_100054138(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100097B50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 initializeWithTake for StorebagSectionClientScriptGroup(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t *assignWithTake for StorebagSectionClientScriptGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v5 = a2 + 3;
  int v6 = *((unsigned __int8 *)a1 + 40);
  if (v6 != 255)
  {
    int v7 = *((unsigned __int8 *)a2 + 40);
    if (v7 != 255)
    {
      uint64_t v8 = a1[3];
      uint64_t v9 = a1[4];
      *(_OWORD *)(a1 + 3) = *v5;
      *((_BYTE *)a1 + 40) = v7 & 1;
      sub_100047A58(v8, v9, v6 & 1);
      goto LABEL_6;
    }

    sub_100054138((uint64_t)(a1 + 3));
  }

  *(_OWORD *)(a1 + 3) = *v5;
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
LABEL_6:
  char v10 = *((_BYTE *)a2 + 64);
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  char v13 = *((_BYTE *)a1 + 64);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_BYTE *)a1 + 64) = v10;
  sub_100047A58(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSectionClientScriptGroup(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionClientScriptGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionClientScriptGroup()
{
  return &type metadata for StorebagSectionClientScriptGroup;
}

uint64_t storeEnumTagSinglePayload for StorebagSectionClientScriptGroup.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100054354 + 4 * byte_100078788[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100054388 + 4 * byte_100078783[v4]))();
}

uint64_t sub_100054388(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100054398LL);
  }
  return result;
}

uint64_t sub_1000543A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000543ACLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_1000543B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000543B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionClientScriptGroup.CodingKeys()
{
  return &type metadata for StorebagSectionClientScriptGroup.CodingKeys;
}

unint64_t sub_1000543D4()
{
  unint64_t result = qword_100097B58;
  if (!qword_100097B58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078A58, &type metadata for StorebagSectionClientScriptGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B58);
  }

  return result;
}

unint64_t sub_100054418()
{
  unint64_t result = qword_100097B60;
  if (!qword_100097B60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000788C8, &type metadata for StorebagSectionClientHTTP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100097B60);
  }

  return result;
}

uint64_t sub_10005445C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000A140(a2);
    uint64_t result = swift_getWitnessTable(&unk_1000778FC, v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10005449C()
{
  unint64_t result = qword_10009D920[0];
  if (!qword_10009D920[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100078C7C, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, qword_10009D920);
  }

  return result;
}

unint64_t sub_1000544E0()
{
  unint64_t result = qword_100097B98;
  if (!qword_100097B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078800, &type metadata for StorebagBool);
    atomic_store(result, (unint64_t *)&qword_100097B98);
  }

  return result;
}

uint64_t sub_100054524(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000A140(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100054578()
{
  unint64_t result = qword_100097BB8;
  if (!qword_100097BB8)
  {
    uint64_t v1 = sub_10000A140(&qword_100097BB0);
    sub_1000545DC();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100097BB8);
  }

  return result;
}

unint64_t sub_1000545DC()
{
  unint64_t result = qword_100097BC0;
  if (!qword_100097BC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078990, &type metadata for StorebagSectionPerCountrySampling);
    atomic_store(result, (unint64_t *)&qword_100097BC0);
  }

  return result;
}

uint64_t _s21CloudTelemetryService12StorebagBoolOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005466C + 4 * byte_100078792[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000546A0 + 4 * byte_10007878D[v4]))();
}

uint64_t sub_1000546A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000546A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000546B0LL);
  }
  return result;
}

uint64_t sub_1000546BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000546C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000546C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000546D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionPerCountrySampling.CodingKeys()
{
  return &type metadata for StorebagSectionPerCountrySampling.CodingKeys;
}

unint64_t sub_1000546F0()
{
  unint64_t result = qword_10009DA30[0];
  if (!qword_10009DA30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100078C54, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, qword_10009DA30);
  }

  return result;
}

unint64_t sub_100054738()
{
  unint64_t result = qword_10009DB40;
  if (!qword_10009DB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078BC4, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10009DB40);
  }

  return result;
}

unint64_t sub_100054780()
{
  unint64_t result = qword_10009DB48[0];
  if (!qword_10009DB48[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100078BEC, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, qword_10009DB48);
  }

  return result;
}

const char *sub_1000547D4(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = 0x6F727245204C5153LL;
  if (a3)
  {
    uint64_t v5 = a2;
    unint64_t v6 = a3;
  }

  else
  {
    unint64_t v6 = 0xE900000000000072LL;
  }

  uint64_t v13 = v5;
  swift_bridgeObjectRetain(v6);
  v7._uint64_t countAndFlagsBits = 8250LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v6);
  unint64_t result = sqlite3_errstr(a1);
  if (result)
  {
    uint64_t v9 = String.init(cString:)(result);
    uint64_t v11 = v10;
    swift_bridgeObjectRetain(v6);
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v11);
    return (const char *)v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

const char *sub_1000548AC()
{
  return sub_1000547D4(*(_DWORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_1000548B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000548F0 + 4 * byte_100078CD0[a1]))( 0xD00000000000001ALL,  0x800000010007C0D0LL);
}

uint64_t sub_1000548F0(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_100054918()
{
  return 0x6465736F6C63LL;
}

uint64_t sub_10005492C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100054964 + 4 * byte_100078CD4[a1]))( 0xD00000000000001ALL,  0x800000010007C0D0LL);
}

uint64_t sub_100054964(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_10005498C()
{
  return 0x6465736F6C63LL;
}

uint64_t sub_1000549A0()
{
  return sub_10005492C(*v0);
}

uint64_t sub_1000549A8()
{
  return sub_1000548B8(*v0);
}

uint64_t type metadata accessor for SQLiteDB.Location(uint64_t a1)
{
  uint64_t result = qword_10009E060;
  if (!qword_10009E060) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SQLiteDB.Location);
  }
  return result;
}

uint64_t sub_1000549EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Location(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_100054A30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&ppDb - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SQLiteDB.Location(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&ppDb - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((_BYTE *)v2 + 24) = 0;
  ppDb = 0LL;
  sub_1000549EC(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v5) == 1)
  {
    unint64_t v12 = 0xE800000000000000LL;
    uint64_t v13 = 0x3A79726F6D656D3ALL;
  }

  else
  {
    uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    uint64_t v13 = URL.path.getter(v14);
    unint64_t v12 = v15;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v16 = String.utf8CString.getter(v13, v12);
  swift_bridgeObjectRelease(v12);
  int v17 = sqlite3_open_v2((const char *)(v16 + 32), &ppDb, 32774, 0LL);
  swift_release(v16);
  char v18 = ppDb;
  if (!ppDb || v17)
  {
    unint64_t v19 = sub_100054F70();
    uint64_t v20 = swift_allocError(&type metadata for SQLError, v19, 0LL, 0LL);
    *(_DWORD *)uint64_t v21 = v17;
    *(void *)(v21 + 8) = 0xD000000000000017LL;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = 0x800000010007C380LL;
    swift_willThrow(v20);
    sub_100055E34(a1);
    swift_deallocPartialClassInstance(v2, v4, 25LL, 7LL);
  }

  else
  {
    sub_100055E34(a1);
    v2[2] = v18;
  }

  return v2;
}

uint64_t sub_100054C50()
{
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    *(_BYTE *)(v0 + 24) = 1;
    sqlite3_close_v2(*(sqlite3 **)(v0 + 16));
  }

  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t sub_100054C84()
{
  __int16 v1 = sqlite3_expanded_sql(*(sqlite3_stmt **)(v0 + 16));
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = String.init(cString:)(v1);
  sqlite3_free(v2);
  return v3;
}

uint64_t sub_100054CDC()
{
  uint64_t v1 = v0;
  int v2 = sqlite3_step(*(sqlite3_stmt **)(v0 + 16));
  if (v2 == 101)
  {
    swift_beginAccess(v0 + 24, v13, 1LL, 0LL);
    *(_BYTE *)(v0 + 24) = 1;
    return 0LL;
  }

  else
  {
    int v3 = v2;
    if (v2 == 100)
    {
      swift_retain(v0);
    }

    else
    {
      HIDWORD(v13[1]) = -335544320;
      _StringGuts.grow(_:)(38LL);
      uint64_t v4 = swift_bridgeObjectRelease(0xE000000000000000LL);
      strcpy((char *)v13, "Statement ((");
      v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 96LL))(v4);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      v7._object = (void *)0x800000010007C0F0LL;
      v7._uint64_t countAndFlagsBits = 0xD000000000000018LL;
      String.append(_:)(v7);
      uint64_t v8 = v13[0];
      uint64_t v1 = v13[1];
      unint64_t v9 = sub_100054F70();
      uint64_t v10 = swift_allocError(&type metadata for SQLError, v9, 0LL, 0LL);
      *(_DWORD *)uint64_t v11 = v3;
      *(void *)(v11 + 8) = v8;
      *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
      swift_willThrow(v10);
    }
  }

  return v1;
}

void sub_100054E14(void (*a1)(uint64_t))
{
  uint64_t v4 = *(sqlite3_stmt **)(v1 + 16);
  while (1)
  {
    int v5 = sqlite3_step(v4);
    if (v5 != 100) {
      break;
    }
    uint64_t v6 = swift_retain(v1);
    a1(v6);
    swift_release(v1);
    if (v2) {
      return;
    }
  }

  int v7 = v5;
  if (v5 == 101)
  {
    swift_beginAccess(v1 + 24, v17, 1LL, 0LL);
    *(_BYTE *)(v1 + 24) = 1;
  }

  else
  {
    HIDWORD(v17[1]) = -335544320;
    _StringGuts.grow(_:)(38LL);
    uint64_t v8 = swift_bridgeObjectRelease(0xE000000000000000LL);
    strcpy((char *)v17, "Statement ((");
    v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96LL))(v8);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._object = (void *)0x800000010007C0F0LL;
    v11._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    String.append(_:)(v11);
    uint64_t v12 = v17[0];
    uint64_t v13 = v17[1];
    unint64_t v14 = sub_100054F70();
    uint64_t v15 = swift_allocError(&type metadata for SQLError, v14, 0LL, 0LL);
    *(_DWORD *)uint64_t v16 = v7;
    *(void *)(v16 + 8) = v12;
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v13;
    swift_willThrow(v15);
  }

unint64_t sub_100054F70()
{
  unint64_t result = qword_100097BD0;
  if (!qword_100097BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078D54, &type metadata for SQLError);
    atomic_store(result, (unint64_t *)&qword_100097BD0);
  }

  return result;
}

uint64_t sub_100054FB4@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100054CDC();
  if (!v4)
  {
    uint64_t v10 = result;
    if (result)
    {
      a1(result);
      uint64_t v14 = sub_100054CDC();
      swift_release(v14);
      if (v14)
      {
        uint64_t v15 = *(sqlite3_stmt **)(v5 + 16);
        do
          int v16 = sqlite3_step(v15);
        while (v16 == 100);
        int v17 = v16;
        if (v16 == 101)
        {
          swift_beginAccess(v5 + 24, v30, 1LL, 0LL);
          *(_BYTE *)(v5 + 24) = 1;
          unint64_t v18 = sub_1000551E0();
          uint64_t v19 = swift_allocError(&type metadata for DBError, v18, 0LL, 0LL);
          *uint64_t v20 = 1;
          swift_willThrow(v19);
          swift_release(v10);
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a3, a2);
        }

        HIDWORD(v30[1]) = -335544320;
        _StringGuts.grow(_:)(38LL);
        uint64_t v21 = swift_bridgeObjectRelease(0xE000000000000000LL);
        strcpy((char *)v30, "Statement ((");
        v22._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96LL))(v21);
        object = v22._object;
        String.append(_:)(v22);
        swift_bridgeObjectRelease(object);
        v24._object = (void *)0x800000010007C0F0LL;
        v24._uint64_t countAndFlagsBits = 0xD000000000000018LL;
        String.append(_:)(v24);
        uint64_t v25 = v30[0];
        uint64_t v26 = v30[1];
        unint64_t v27 = sub_100054F70();
        uint64_t v28 = swift_allocError(&type metadata for SQLError, v27, 0LL, 0LL);
        *(_DWORD *)uint64_t v29 = v17;
        *(void *)(v29 + 8) = v25;
        *(void *)(v29 + swift_weakDestroy(v0 + 16) = v26;
        swift_willThrow(v28);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a3, a2);
      }

      return swift_release(v10);
    }

    unint64_t v11 = sub_1000551E0();
    uint64_t v12 = swift_allocError(&type metadata for DBError, v11, 0LL, 0LL);
    *uint64_t v13 = 0;
    return swift_willThrow(v12);
  }

  return result;
}

unint64_t sub_1000551E0()
{
  unint64_t result = qword_100097BD8;
  if (!qword_100097BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078E6C, &type metadata for DBError);
    atomic_store(result, (unint64_t *)&qword_100097BD8);
  }

  return result;
}

uint64_t sub_100055224(uint64_t a1, uint64_t a2)
{
  void v4[2] = a1;
  void v4[3] = a2;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t), void *, uint64_t))(*(void *)v2 + 152LL))( sub_10005525C,  v4,  a1);
}

uint64_t sub_10005525C(uint64_t a1)
{
  return sub_1000552D8(a1);
}

uint64_t sub_100055270(uint64_t a1, uint64_t a2)
{
  void v6[3] = a2;
  _OWORD v6[2] = a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t (*)(uint64_t), void *, uint64_t))(*(void *)v2 + 152LL);
  uint64_t v4 = type metadata accessor for Optional(0LL, a1);
  return v3(sub_10005525C, v6, v4);
}

uint64_t sub_1000552D8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 16)) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 8);
    uint64_t v6 = swift_retain(a1);
    return v5(v6, 0LL, v4, v3);
  }

  else
  {
    unint64_t v8 = sub_1000551E0();
    uint64_t v9 = swift_allocError(&type metadata for DBError, v8, 0LL, 0LL);
    *uint64_t v10 = 2;
    return swift_willThrow(v9);
  }

void sub_10005537C()
{
  uint64_t v1 = (_BYTE *)v0;
  uint64_t v2 = *(sqlite3_stmt **)(v0 + 16);
  do
    int v3 = sqlite3_step(v2);
  while (v3 == 100);
  int v4 = v3;
  if (v3 == 101)
  {
    swift_beginAccess(v1 + 24, v14, 1LL, 0LL);
    _BYTE v1[24] = 1;
  }

  else
  {
    HIDWORD(v14[1]) = -335544320;
    _StringGuts.grow(_:)(38LL);
    uint64_t v5 = swift_bridgeObjectRelease(0xE000000000000000LL);
    strcpy((char *)v14, "Statement ((");
    v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96LL))(v5);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v8._object = (void *)0x800000010007C0F0LL;
    v8._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    String.append(_:)(v8);
    uint64_t v9 = v14[0];
    uint64_t v10 = v14[1];
    unint64_t v11 = sub_100054F70();
    uint64_t v12 = swift_allocError(&type metadata for SQLError, v11, 0LL, 0LL);
    *(_DWORD *)uint64_t v13 = v4;
    *(void *)(v13 + 8) = v9;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v10;
    swift_willThrow(v12);
  }

uint64_t sub_1000554A4(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  sub_10000A32C(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v2, a1, v4, v5);
}

void sub_100055508(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  unint64_t v5 = 0LL;
  while (1)
  {
    if (v5 == v3)
    {
      unint64_t v5 = v3;
      memset(v9, 0, sizeof(v9));
    }

    else
    {
      if (v5 >= v3) {
        goto LABEL_11;
      }
      sub_100015BAC(v4 + 40 * v5, (uint64_t)v8);
      *(void *)&v9[0] = v5;
      sub_100033870(v8, (uint64_t)v9 + 8);
      ++v5;
    }

    sub_10005561C((uint64_t)v9, (uint64_t)&v10);
    if (!v12)
    {
LABEL_9:
      swift_bridgeObjectRelease(a1);
      return;
    }

    uint64_t v6 = v10;
    sub_100033870(&v11, (uint64_t)v9);
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v1 + 184LL))(v6 + 1, v9);
    sub_10000C2B4(v9);
    if (v2) {
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
}

uint64_t sub_10005561C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100097BE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055664()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t sub_10005568C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  swift_retain(a2);
  return v8(a2, a1, a3, a4);
}

uint64_t sub_1000556EC()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_10005571C(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 24, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_100055758(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100055794(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 25LL, 7LL);
  *(_BYTE *)(result + 24) = 0;
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t sub_1000557C8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (((*(uint64_t (**)(void))(*(void *)v3 + 96LL))() & 1) != 0)
  {
    unint64_t v6 = sub_100054F70();
    uint64_t v7 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
    *(_DWORD *)uint64_t v8 = 1;
    *(void *)(v8 + 8) = 0xD00000000000001DLL;
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0x800000010007C110LL;
    return swift_willThrow(v7);
  }

  else
  {
    uint64_t result = sub_1000558B0();
    if (!v4)
    {
      uint64_t v10 = result;
      a3();
      return swift_release(v10);
    }
  }

  return result;
}

uint64_t sub_1000558B0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    unint64_t v2 = sub_1000551E0();
    uint64_t v3 = swift_allocError(&type metadata for DBError, v2, 0LL, 0LL);
    *uint64_t v4 = 3;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v5 = String.utf8CString.getter();
    unint64_t v6 = *(void *)(v5 + 16);
    if (v6 >> 31) {
      __break(1u);
    }
    uint64_t v7 = v5;
    int v8 = sqlite3_prepare_v2(*(sqlite3 **)(v1 + 16), (const char *)(v5 + 32), v6, &v14, 0LL);
    swift_release(v7);
    uint64_t v9 = v14;
    if (v14 && !v8)
    {
      uint64_t v10 = type metadata accessor for SQLiteDB.Statement();
      uint64_t result = swift_allocObject(v10, 25LL, 7LL);
      *(_BYTE *)(result + 24) = 0;
      *(void *)(result + swift_weakDestroy(v0 + 16) = v9;
      return result;
    }

    unint64_t v12 = sub_100054F70();
    uint64_t v3 = swift_allocError(&type metadata for SQLError, v12, 0LL, 0LL);
    *(_DWORD *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = 0xD00000000000001BLL;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0x800000010007C3A0LL;
  }

  return swift_willThrow(v3);
}

sqlite3_int64 sub_1000559F0()
{
  return sqlite3_changes64(*(sqlite3 **)(*(void *)(*(void *)(v0 + 16) + 112LL) + 16LL));
}

uint64_t sub_100055A00()
{
  return sub_100055B10();
}

uint64_t sub_100055A24()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    unint64_t v2 = sub_1000551E0();
    uint64_t v3 = swift_allocError(&type metadata for DBError, v2, 0LL, 0LL);
    *uint64_t v4 = 3;
  }

  else
  {
    uint64_t v5 = *(sqlite3 **)(v1 + 16);
    uint64_t v6 = String.utf8CString.getter();
    int v7 = sqlite3_exec(v5, (const char *)(v6 + 32), 0LL, 0LL, 0LL);
    uint64_t result = swift_release(v6);
    if (!v7) {
      return result;
    }
    unint64_t v9 = sub_100054F70();
    uint64_t v3 = swift_allocError(&type metadata for SQLError, v9, 0LL, 0LL);
    *(_DWORD *)uint64_t v10 = v7;
    *(void *)(v10 + 8) = 0LL;
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  return swift_willThrow(v3);
}

uint64_t sub_100055AE8()
{
  return sub_100055B10();
}

uint64_t sub_100055B10()
{
  if (((*(uint64_t (**)(void))(*(void *)v0 + 96LL))() & 1) != 0)
  {
    unint64_t v2 = sub_100054F70();
    uint64_t v3 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + 8) = 0xD00000000000001DLL;
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0x800000010007C110LL;
    return swift_willThrow(v3);
  }

  else
  {
    uint64_t result = sub_100055A24();
    if (!v1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 104LL))(1LL);
    }
  }

  return result;
}

uint64_t sub_100055BDC()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t sub_100055C00(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 120LL, 15LL);
  sub_100055C4C(a1);
  return v3;
}

void *sub_100055C4C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = type metadata accessor for SQLiteDB.Location(0LL);
  __chkstk_darwin(v6);
  int v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v1);
  sub_1000549EC(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for SQLiteDB.DBHandle();
  uint64_t v10 = swift_allocObject(v9, 25LL, 7LL);
  sub_100054A30((uint64_t)v8);
  if (!v2)
  {
    __int128 v11 = *(sqlite3 **)(v10 + 16);
    int v12 = sqlite3_exec(v11, "PRAGMA journal_mode=WAL;", 0LL, 0LL, 0LL);
    if (v12)
    {
      int v13 = v12;
      unint64_t v14 = sub_100054F70();
      uint64_t v15 = swift_allocError(&type metadata for SQLError, v14, 0LL, 0LL);
      *(_DWORD *)uint64_t v16 = v13;
      unint64_t v17 = 0xD000000000000014LL;
      unint64_t v18 = "Failed to enable WAL";
    }

    else
    {
      int v19 = sqlite3_exec(v11, "PRAGMA foreign_keys=ON;", 0LL, 0LL, 0LL);
      if (!v19)
      {
        sub_100055E34(a1);
        v3[14] = v10;
        return v3;
      }

      int v20 = v19;
      unint64_t v17 = 0xD000000000000013LL;
      unint64_t v21 = sub_100054F70();
      uint64_t v15 = swift_allocError(&type metadata for SQLError, v21, 0LL, 0LL);
      *(_DWORD *)uint64_t v16 = v20;
      unint64_t v18 = "Failed to enable FK";
    }

    *(void *)(v16 + 8) = v17;
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = (unint64_t)(v18 - 32) | 0x8000000000000000LL;
    swift_willThrow(v15);
    swift_release(v10);
  }

  swift_defaultActor_destroy(v3);
  sub_100055E34(a1);
  swift_deallocPartialClassInstance(v3, v5, 120LL, 15LL);
  return v3;
}

uint64_t type metadata accessor for SQLiteDB.DBHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtCC21CloudTelemetryService8SQLiteDBP33_63B944502EA165D1836E2F0164F7F00D8DBHandle);
}

uint64_t sub_100055E34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SQLiteDB.Location(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100055E70(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result = sub_1000558B0();
  if (!v3)
  {
    uint64_t v6 = result;
    a3();
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_100055ED4(void (*a1)(uint64_t))
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Transaction();
  uint64_t v5 = swift_allocObject(v4, 25LL, 7LL);
  *(_BYTE *)(v5 + 24) = 0;
  uint64_t v6 = (_BYTE *)(v5 + 24);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v1;
  swift_retain(v1);
  sub_100055A24();
  if (!v2)
  {
    a1(v5);
    swift_beginAccess(v6, v8, 0LL, 0LL);
    if ((*v6 & 1) == 0) {
      sub_100055A24();
    }
  }

  return swift_release(v5);
}

uint64_t type metadata accessor for SQLiteDB.Transaction()
{
  return objc_opt_self(&OBJC_CLASS____TtCC21CloudTelemetryService8SQLiteDB11Transaction);
}

uint64_t sub_100056018()
{
  return sub_100055A24();
}

uint64_t sub_10005602C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
  {
    *(_BYTE *)(v1 + 24) = 1;
    return sqlite3_close_v2(*(sqlite3 **)(v1 + 16));
  }

  return result;
}

uint64_t sub_10005604C(uint64_t result, uint64_t a2, char a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(result + 16), a2, a3 & 1);
  if ((_DWORD)result)
  {
    int v3 = result;
    unint64_t v4 = sub_100054F70();
    uint64_t v5 = swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = v3;
    *(void *)(v6 + 8) = 0xD000000000000012LL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010007C1D0LL;
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t sub_1000560E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v4 = result;
    int v5 = sqlite3_column_int(*(sqlite3_stmt **)(result + 16), a2);
    uint64_t result = swift_release(v4);
    *a3 = v5 > 0;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_100056150(uint64_t a1, uint64_t a2)
{
  return sub_10005604C(a1, a2, *v2);
}

uint64_t sub_100056168(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (a3 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(result + 16), a2, a3);
  if ((_DWORD)result)
  {
    int v3 = result;
    unint64_t v4 = sub_100054F70();
    uint64_t v5 = swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = v3;
    *(void *)(v6 + 8) = 0xD000000000000012LL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010007C1D0LL;
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t sub_100056218@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v4 = result;
    int v5 = sqlite3_column_int(*(sqlite3_stmt **)(result + 16), a2);
    uint64_t result = swift_release(v4);
    *a3 = v5;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005627C(uint64_t a1, uint64_t a2)
{
  return sub_100056168(a1, a2, *v2);
}

uint64_t sub_100056294(uint64_t result, uint64_t a2, sqlite3_int64 a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = sqlite3_bind_int64(*(sqlite3_stmt **)(result + 16), a2, a3);
  if ((_DWORD)result)
  {
    int v3 = result;
    unint64_t v4 = sub_100054F70();
    uint64_t v5 = swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = v3;
    *(void *)(v6 + 8) = 0xD000000000000014LL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010007C1F0LL;
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t sub_10005632C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, sqlite3_int64 *a3@<X8>)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v4 = result;
    sqlite3_int64 v5 = sqlite3_column_int64(*(sqlite3_stmt **)(result + 16), a2);
    uint64_t result = swift_release(v4);
    *a3 = v5;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005638C(uint64_t a1, uint64_t a2)
{
  return sub_100056294(a1, a2, *v2);
}

uint64_t sub_1000563A4(uint64_t result, uint64_t a2, double a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = sqlite3_bind_double(*(sqlite3_stmt **)(result + 16), a2, a3);
  if ((_DWORD)result)
  {
    int v3 = result;
    unint64_t v4 = sub_100054F70();
    uint64_t v5 = swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = v3;
    *(void *)(v6 + 8) = 0xD000000000000015LL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010007C210LL;
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t sub_10005643C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v4 = result;
    double v5 = sqlite3_column_double(*(sqlite3_stmt **)(result + 16), a2);
    uint64_t result = swift_release(v4);
    *a3 = v5;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005649C(uint64_t a1, uint64_t a2)
{
  return sub_1000563A4(a1, a2, *v2);
}

uint64_t sub_1000564B4(sqlite3_stmt *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = String.utf8CString.getter(a3, a4);
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = v9;
  unint64_t v5 = *(void *)(v9 + 16);
  if (!(v5 >> 31))
  {
    uint64_t v6 = (const char *)(v9 + 32);
    a1 = (sqlite3_stmt *)*((void *)a1 + 2);
    if (qword_10009DBD0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

LABEL_10:
  __break(1u);
LABEL_11:
  swift_once(&qword_10009DBD0, sub_100056668);
LABEL_5:
  int v10 = sqlite3_bind_text(a1, a2, v6, v5, (void (__cdecl *)(void *))qword_10009DBD8);
  uint64_t result = swift_release(v4);
  if (v10)
  {
    unint64_t v12 = sub_100054F70();
    uint64_t v13 = swift_allocError(&type metadata for SQLError, v12, 0LL, 0LL);
    *(_DWORD *)uint64_t v14 = v10;
    *(void *)(v14 + 8) = 0xD000000000000015LL;
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = 0x800000010007C230LL;
    return swift_willThrow(v13);
  }

  return result;
}

uint64_t sub_1000565D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  if (sqlite3_column_text(*(sqlite3_stmt **)(result + 16), a2))
  {
    uint64_t v5 = String.init(cString:)();
    uint64_t v7 = v6;
    uint64_t result = swift_release(v4);
  }

  else
  {
    uint64_t result = swift_release(v4);
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t sub_100056650(sqlite3_stmt *a1, uint64_t a2)
{
  return sub_1000564B4(a1, a2, *v2, v2[1]);
}

void sub_100056668()
{
  qword_10009DBD8 = -1LL;
}

unint64_t sub_100056680()
{
  unint64_t result = qword_100097BE8;
  if (!qword_100097BE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100078D94, &type metadata for DBError);
    atomic_store(result, (unint64_t *)&qword_100097BE8);
  }

  return result;
}

uint64_t sub_1000566CC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLError()
{
  return &type metadata for SQLError;
}

uint64_t storeEnumTagSinglePayload for DBError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10005688C + 4 * byte_100078CDD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000568C0 + 4 * byte_100078CD8[v4]))();
}

uint64_t sub_1000568C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000568C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000568D0LL);
  }
  return result;
}

uint64_t sub_1000568DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000568E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000568E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000568F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DBError()
{
  return &type metadata for DBError;
}

uint64_t type metadata accessor for SQLiteDB()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService8SQLiteDB);
}

uint64_t *sub_10005692C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_1000569F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return result;
}

void *sub_100056A5C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_100056B00(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

void *sub_100056BF0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_100056C94(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_100056D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056D90);
}

uint64_t sub_100056D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100056DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056DE8);
}

uint64_t sub_100056DE8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_100056E38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 1LL, v2);
}

uint64_t sub_100056E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 1LL, v4);
}

uint64_t sub_100056EB0(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for SQLiteDB.Statement()
{
  return objc_opt_self(&OBJC_CLASS____TtCC21CloudTelemetryService8SQLiteDB9Statement);
}

ValueMetadata *type metadata accessor for SQLiteDB.Row()
{
  return &type metadata for SQLiteDB.Row;
}

uint64_t variable initialization expression of StorebagCoordinator.pathMonitorQueue()
{
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v0 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_1000260E0();
  static DispatchQoS.background.getter(v12);
  Swift::String v22 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10000C5E8( &qword_100096E40,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100009FDC((uint64_t *)&unk_100098100);
  uint64_t v15 = sub_10000A494((unint64_t *)&qword_100096E48, (uint64_t *)&unk_100098100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v19 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v20);
  uint64_t v16 = v21;
  (*(void (**)(char *, void, uint64_t))(v0 + 104))( v2,  enum case for DispatchQoS.QoSClass.background(_:),  v21);
  uint64_t v17 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v16);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x800000010007C3C0LL,  v11,  v8,  v5,  v17);
}

char *StorebagCoordinator.mockAvailability.unsafeMutableAddressor()
{
  return &static StorebagCoordinator.mockAvailability;
}

uint64_t static StorebagCoordinator.mockAvailability.getter()
{
  return static StorebagCoordinator.mockAvailability;
}

uint64_t static StorebagCoordinator.mockAvailability.setter(char a1)
{
  uint64_t result = swift_beginAccess(&static StorebagCoordinator.mockAvailability, v3, 1LL, 0LL);
  static StorebagCoordinator.mockAvailability = a1;
  return result;
}

uint64_t (*static StorebagCoordinator.mockAvailability.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10005723C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100009FDC((uint64_t *)&unk_1000980D0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)(a2 + 120);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1000912D8, v16 + 8, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v15, v13, v10);
  *(void *)(v17 + vswift_weakDestroy(v0 + 16) = a2;
  aBlock[4] = sub_100058500;
  uint64_t v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000087B4;
  aBlock[3] = &unk_1000912F0;
  unint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10000C5E8( &qword_100096388,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100009FDC(&qword_100096390);
  uint64_t v22 = sub_10000A494(&qword_100096398, &qword_100096390);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  return swift_release(v30);
}

uint64_t sub_1000574A8(uint64_t a1, uint64_t a2)
{
  v28[1] = a2;
  uint64_t v2 = type metadata accessor for NWPath.Status(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = type metadata accessor for NWPath(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v28 - v14;
  __n128 v16 = swift_beginAccess(&static StorebagCoordinator.mockAvailability, v30, 0LL, 0LL);
  if (static StorebagCoordinator.mockAvailability != 4)
  {
    char v29 = static StorebagCoordinator.mockAvailability;
    uint64_t v22 = sub_100009FDC((uint64_t *)&unk_1000980D0);
    return CheckedContinuation.resume(returning:)(&v29, v22);
  }

  uint64_t v17 = NWPathMonitor.currentPath.getter(v16);
  NWPath.status.getter(v17);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for NWPath.Status.unsatisfied(_:), v2);
  char v18 = static NWPath.Status.== infix(_:_:)(v8, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v19(v8, v2);
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  if ((v18 & 1) != 0)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, v9);
  }

  else
  {
    char v24 = NWPath.isConstrained.getter(v20);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v25 = ((uint64_t (*)(char *, uint64_t))v21)(v13, v9);
    if ((v24 & 1) == 0)
    {
      if ((NWPath.isExpensive.getter(v25) & 1) != 0) {
        char v26 = 1;
      }
      else {
        char v26 = 2;
      }
      char v29 = v26;
      goto LABEL_11;
    }
  }

  char v29 = 0;
LABEL_11:
  uint64_t v27 = sub_100009FDC((uint64_t *)&unk_1000980D0);
  CheckedContinuation.resume(returning:)(&v29, v27);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
}

uint64_t sub_1000576E4(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return swift_task_switch(sub_1000576FC, v1);
}

uint64_t sub_1000576FC()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = *(void *)(v0[10] + 128LL);
  v0[11] = v2;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_10000A32C(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v5 = v0[3];
  v0[12] = v0[2];
  v0[13] = v5;
  swift_bridgeObjectRetain(v5);
  sub_1000173BC(v0 + 2);
  v0[14] = *(void *)(*(void *)v2 + 224LL);
  return swift_task_switch(sub_100057794, v2);
}

uint64_t sub_100057794()
{
  uint64_t v1 = *(void *)(v0 + 104);
  char v2 = (*(uint64_t (**)(void, uint64_t))(v0 + 112))(*(void *)(v0 + 96), v1);
  swift_bridgeObjectRelease(v1);
  if ((v2 & 1) != 0) {
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(3LL);
  }
  else {
    return swift_task_switch(sub_100057800, *(void *)(v0 + 80));
  }
}

uint64_t sub_100057800()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = sub_10000C5E8( &qword_100097FA8,  type metadata accessor for StorebagCoordinator,  (uint64_t)&protocol conformance descriptor for StorebagCoordinator);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 1memset(&strm.total_in, 0, 20) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000578B4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 128,  v1,  v2,  0xD000000000000013LL,  0x800000010007C3F0LL,  sub_100057954,  *(void *)(v0 + 80),  &type metadata for SessionConfiguration.Availability);
}

uint64_t sub_1000578B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(sub_10005790C, v1);
}

uint64_t sub_10005790C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 128));
}

uint64_t type metadata accessor for StorebagCoordinator(uint64_t a1)
{
  uint64_t result = qword_10009E180;
  if (!qword_10009E180) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StorebagCoordinator);
  }
  return result;
}

uint64_t sub_100057954(uint64_t a1)
{
  return sub_10005723C(a1, v1);
}

uint64_t sub_10005795C(uint64_t a1, uint64_t a2)
{
  _BYTE v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  return swift_task_switch(sub_100057978, v2);
}

uint64_t sub_100057978()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = *(void *)(v0[25] + 128LL);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_10000A32C(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  v0[26] = v6;
  swift_bridgeObjectRetain(v6);
  sub_1000173BC(v0 + 2);
  uint64_t v7 = *(int **)(*(void *)v2 + 232LL);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[27] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100057A44;
  return ((uint64_t (*)(void *, uint64_t, uint64_t))v10)(v0 + 14, v5, v6);
}

uint64_t sub_100057A44()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_100057B40;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 200);
    swift_bridgeObjectRelease(*(void *)(v2 + 208));
    uint64_t v5 = sub_100057AB4;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4);
}

uint64_t sub_100057AB4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_100044468(*(void **)(v0 + 192), (_OWORD *)(v0 + 72));
  *(void *)(v0 + 168) = *(void *)(v0 + 112);
  sub_10002B00C((void *)(v0 + 168));
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 128);
  sub_10002AFE4(v0 + 152);
  *(void *)(v0 + 176) = *(void *)(v0 + 144);
  sub_10002B00C((void *)(v0 + 176));
  __int128 v2 = *(_OWORD *)(v0 + 88);
  __int128 v3 = *(_OWORD *)(v0 + 72);
  *(void *)(v1 + 32) = *(void *)(v0 + 104);
  *(_OWORD *)uint64_t v1 = v3;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057B40()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057B74(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_100057B90, v2);
}

uint64_t sub_100057B90()
{
  uint64_t v1 = *(void *)(v0[4] + 128LL);
  v0[5] = v1;
  v0[6] = *(void *)(*(void *)v1 + 256LL);
  return swift_task_switch(sub_100057BB8, v1);
}

uint64_t sub_100057BB8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057BEC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_100097FCC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100016520;
  return sub_100057C4C(a1);
}

uint64_t sub_100057C4C(uint64_t a1)
{
  uint64_t v3 = v1;
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  v2[5] = v4;
  uint64_t v35 = *(void *)(v4 - 8);
  v2[6] = v35;
  uint64_t v33 = swift_task_alloc((*(void *)(v35 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[7] = v33;
  uint64_t v36 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v5 = swift_task_alloc((*(void *)(v34 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[8] = v5;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  uint64_t v7 = swift_task_alloc((*(void *)(v31 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v2[9] = v7;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v9 = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[10] = v9;
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[11] = v11;
  swift_defaultActor_initialize(v3);
  unint64_t v29 = sub_1000260E0();
  static DispatchQoS.background.getter(v29);
  v2[2] = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_10000C5E8( &qword_100096E40,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100009FDC((uint64_t *)&unk_100098100);
  uint64_t v14 = sub_10000A494((unint64_t *)&qword_100096E48, (uint64_t *)&unk_100098100);
  dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 2, v13, v14, v8, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v32);
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))( v5,  enum case for DispatchQoS.QoSClass.background(_:),  v36);
  uint64_t v15 = static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v5, v36);
  v30[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x800000010007C3C0LL,  v11,  v9,  v7,  v15);
  type metadata accessor for StorebagCache(0LL);
  __n128 v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  uint64_t v37 = v4;
  v16(v33, a1, v4);
  unint64_t v17 = sub_100038554();
  v30[16] = sub_1000386F0(v17, 0LL, 0LL, v33);
  uint64_t v18 = sub_100009FDC(&qword_100097FD0);
  uint64_t v19 = type metadata accessor for NWInterface.InterfaceType(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v23 = swift_allocObject(v18, v22 + *(void *)(v20 + 72), v21 | 7);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v23 + v22,  enum case for NWInterface.InterfaceType.loopback(_:),  v19);
  uint64_t v24 = type metadata accessor for NWPathMonitor(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = NWPathMonitor.init(prohibitedInterfaceTypes:)(v23);
  v30[14] = v25;
  char v26 = (void *)v30[15];
  swift_retain(v25);
  id v27 = v26;
  NWPathMonitor.start(queue:)();
  swift_release(v25);

  v16((uint64_t)v30 + OBJC_IVAR____TtC21CloudTelemetryService19StorebagCoordinator_rootCacheURL, a1, v37);
  return swift_task_switch(sub_100058068, v30);
}

uint64_t sub_100058068()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 24), *(void *)(v0 + 40));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 32));
}

uint64_t StorebagCoordinator.deinit()
{
  swift_release(*(void *)(v0 + 128));
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService19StorebagCoordinator_rootCacheURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t StorebagCoordinator.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 128));
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService19StorebagCoordinator_rootCacheURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000581B4(uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 128LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100058218;
  return v7(a1);
}

uint64_t sub_100058218(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100058268(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 56) = a1;
  uint64_t v5 = *(int **)(*(void *)v2 + 136LL);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 64) = v6;
  void *v6 = v3;
  v6[1] = sub_1000582E0;
  return v8(v3 + 16, a2);
}

uint64_t sub_1000582E0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
  {
    uint64_t v5 = *(void *)(v2 + 56);
    __int128 v6 = *(_OWORD *)(v2 + 16);
    __int128 v7 = *(_OWORD *)(v2 + 32);
    *(void *)(v5 + 32) = *(void *)(v2 + 48);
    *(_OWORD *)uint64_t v5 = v6;
    *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  }

  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100058340(uint64_t a1, uint64_t a2)
{
  __int128 v6 = *(int **)(*(void *)v2 + 144LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  __int128 v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10000A560;
  return v9(a1, a2);
}

uint64_t sub_1000583B0(uint64_t a1)
{
  uint64_t result = sub_10000C5E8( &qword_100097FA8,  type metadata accessor for StorebagCoordinator,  (uint64_t)&protocol conformance descriptor for StorebagCoordinator);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000583EC()
{
  return type metadata accessor for StorebagCoordinator(0LL);
}

uint64_t sub_1000583F4(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100058488()
{
  uint64_t v1 = sub_100009FDC((uint64_t *)&unk_1000980D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100058500()
{
  uint64_t v1 = *(void *)(sub_100009FDC((uint64_t *)&unk_1000980D0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000574A8(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100058544(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100058554(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10005855C(char a1, char a2)
{
  if ((a2 & 1) != 0) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFFFE | a1 & 1;
}

uint64_t sub_10005857C@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5 & 1;
  *(_BYTE *)(a8 + 33) = HIBYTE(a5) & 1;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  return result;
}

uint64_t sub_10005859C()
{
  __int128 v7 = *v0;
  uint64_t v6 = v7;
  sub_1000232C4((uint64_t)&v7);
  v1._uint64_t countAndFlagsBits = 58LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  uint64_t v3 = *((void *)v0 + 2);
  int v2 = (void *)*((void *)v0 + 3);
  swift_bridgeObjectRetain(v2);
  v4._uint64_t countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  return v6;
}

uint64_t sub_100058614()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009E198);
  sub_100009FC4(v0, (uint64_t)qword_10009E198);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x746E65696C63LL,  0xE600000000000000LL);
}

uint64_t sub_100058684()
{
  if (qword_10009E190 != -1) {
    swift_once(&qword_10009E190, sub_100058614);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return sub_100009FC4(v0, (uint64_t)qword_10009E198);
}

uint64_t sub_1000586CC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain(*(void *)(v0 + 136));
  return v1;
}

uint64_t sub_1000586F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (void *)swift_task_alloc(dword_1000980EC);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v14;
  void *v14 = v7;
  v14[1] = sub_100058218;
  return sub_100058798(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100058798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  *(void *)(v7 + 88) = a6;
  *(void *)(v7 + 96) = v8;
  *(void *)(v7 + 72) = a4;
  *(void *)(v7 + 80) = a5;
  *(void *)(v7 + 56) = a2;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 48) = a1;
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t v52 = v15;
  uint64_t v16 = swift_task_alloc((*(void *)(v51 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 104) = v16;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  uint64_t v50 = swift_task_alloc((*(void *)(v47 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 112) = v50;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v49 = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 1memset(&strm.total_in, 0, 20) = v49;
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 128) = v46;
  swift_defaultActor_initialize(v8);
  v8[14] = 0LL;
  v8[18] = a1;
  v8[19] = a2;
  v8[20] = a3;
  v8[21] = a4;
  v8[22] = a5;
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a3);
  swift_retain(a4);
  swift_retain(a5);
  *(void *)(v7 + 136) = XPCIncomingConnection.auditToken.getter(a6);
  *(_DWORD *)(v7 + 144) = v20;
  *(_DWORD *)(v7 + 148) = v21;
  *(_DWORD *)(v7 + 152) = v22;
  *(_DWORD *)(v7 + 156) = v23;
  *(_DWORD *)(v7 + 160) = v24;
  *(_DWORD *)(v7 + 164) = v25;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(4096LL, 1LL);
  if ((isStackAllocationSafe & 1) != 0)
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_100058D3C(&v43, (audit_token_t *)(v7 + 136), (uint64_t)&v44, &v53);
  }

  else
  {
    id v27 = (_BYTE *)swift_slowAlloc(4096LL, -1LL);
    sub_100058D3C(v27, (audit_token_t *)(v7 + 136), (uint64_t)(v27 + 4096), &v53);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  unint64_t v28 = v54;
  v8[16] = v53;
  v8[17] = v28;
  sub_1000260E0();
  uint64_t v53 = 0LL;
  unint64_t v54 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(v54);
  uint64_t v53 = 0xD000000000000020LL;
  unint64_t v54 = 0x800000010007C4A0LL;
  uint64_t v29 = v8[16];
  uint64_t v30 = (void *)v8[17];
  swift_bridgeObjectRetain(v30);
  v31._uint64_t countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  uint64_t v32 = swift_bridgeObjectRelease(v30);
  unint64_t v44 = v54;
  uint64_t v45 = v53;
  uint64_t v33 = v46;
  static DispatchQoS.background.getter(v32);
  *(void *)(v7 + 40) = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_10004EF74( &qword_100096E40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v35 = sub_100009FDC((uint64_t *)&unk_100098100);
  unint64_t v36 = sub_10002611C();
  uint64_t v37 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(v7 + 40, v35, v36, v18, v34);
  uint64_t v38 = v50;
  (*(void (**)(uint64_t, void, uint64_t))(v47 + 104))( v50,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v48);
  uint64_t v40 = v51;
  uint64_t v39 = v52;
  (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))( v16,  enum case for DispatchQoS.QoSClass.background(_:),  v52);
  uint64_t v41 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v16, v39);
  v8[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v45, v44, v33, v37, v38, v41);
  return swift_task_switch(sub_100058BE8, v8, 0LL);
}

uint64_t sub_100058BE8()
{
  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  int v2 = *(_xpc_connection_s **)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  id v8 = *(id *)(v1 + 120);
  swift_retain(v1);
  uint64_t v9 = XPCIncomingConnection.makeConnection(targetQ:delegate:)(v8, v1, (uint64_t)&off_100091360, v2);

  swift_release(v1);
  swift_release(v7);
  swift_release(v6);
  swift_release(v4);
  swift_release(v5);
  swift_release(v3);
  swift_unknownObjectRelease(v2);
  swift_beginAccess(v1 + 112, v0 + 16, 1LL, 0LL);
  uint64_t v10 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = v9;
  swift_release(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 96));
}

uint64_t sub_100058D3C@<X0>( _BYTE *buffer@<X0>, audit_token_t *audittoken@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  *buffer = 0;
  if (!buffer)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a3 - (uint64_t)buffer >= (uint64_t)&_mh_execute_header)
  {
LABEL_9:
    LOBYTE(v24) = 2;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v24,  3455LL,  0);
    __break(1u);
    return result;
  }

  uint64_t result = proc_pidpath_audittoken(audittoken, buffer, a3 - (_DWORD)buffer);
  if ((int)result < 1)
  {
    unint64_t v9 = 0xE700000000000000LL;
    uint64_t v7 = 0x6E776F6E6B6E75LL;
  }

  else
  {
    uint64_t v7 = String.init(cString:)(buffer);
    unint64_t v9 = v8;
    v26[0] = 47LL;
    v26[1] = 0xE100000000000000LL;
    __chkstk_darwin(v7);
    int v25 = v26;
    swift_bridgeObjectRetain(v10);
    unint64_t v11 = sub_100065DF8(sub_100065F40, (uint64_t)&v24, v7, v9);
    char v13 = v12;
    uint64_t result = swift_bridgeObjectRelease(v9);
    if ((v13 & 1) == 0)
    {
      __n128 v14 = swift_bridgeObjectRetain(v9);
      unint64_t v15 = String.index(after:)(v11, v7, v9, v14);
      swift_bridgeObjectRelease(v9);
      unint64_t v16 = sub_100065F94(v15, v7, v9);
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      swift_bridgeObjectRelease(v9);
      uint64_t v7 = static String._fromSubstring(_:)(v16, v18, v20, v22);
      unint64_t v9 = v23;
      uint64_t result = swift_bridgeObjectRelease(v22);
    }
  }

  *a4 = v7;
  a4[1] = v9;
  return result;
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService6Client);
}

void sub_100058F38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_unknownObjectRetain(a1);
  unint64_t v8 = XPCMessage.init(fromXPC:)(v7);
  if (v8)
  {
    uint64_t v10 = v8;
    char v11 = v9;
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
    uint64_t v13 = swift_allocObject(&unk_100091348, 49LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(v13 + 32) = v2;
    *(void *)(v13 + 40) = v10;
    *(_BYTE *)(v13 + 48) = v11;
    swift_retain(v2);
    uint64_t v14 = sub_100016C04((uint64_t)v6, (uint64_t)&unk_100098128, v13);
    swift_release(v14);
  }

  else
  {
    if (qword_10009E190 != -1) {
      swift_once(&qword_10009E190, sub_100058614);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v15, (uint64_t)qword_10009E198);
    uint64_t v16 = swift_retain(v2);
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136446210;
      uint64_t v20 = *(void *)(v2 + 128);
      unint64_t v21 = *(void *)(v2 + 136);
      swift_bridgeObjectRetain(v21);
      uint64_t v24 = sub_100009984(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v21);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v23, v17, "received invalid XPC message from %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_release(v2);
    }
  }

uint64_t sub_1000591AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9 = (void *)swift_task_alloc(dword_100098234);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v6;
  v9[1] = sub_10001B608;
  return sub_100059210(a5, a6);
}

uint64_t sub_100059210(uint64_t a1, char a2)
{
  *(void *)(v3 + 784) = v2;
  *(_BYTE *)(v3 + 1644) = a2;
  *(void *)(v3 + 776) = a1;
  *(void *)(v3 + 792) = *v2;
  uint64_t v4 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  *(void *)(v3 + 800) = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  *(void *)(v3 + 808) = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 8swift_weakDestroy(v0 + 16) = swift_task_alloc(v6);
  *(void *)(v3 + 824) = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 832) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 840) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 848) = swift_task_alloc(v9);
  *(void *)(v3 + 856) = swift_task_alloc(v9);
  *(void *)(v3 + 864) = swift_task_alloc(v9);
  *(void *)(v3 + 872) = swift_task_alloc(v9);
  *(void *)(v3 + 880) = swift_task_alloc(v9);
  *(void *)(v3 + 888) = swift_task_alloc(v9);
  *(void *)(v3 + 896) = swift_task_alloc(v9);
  *(void *)(v3 + 904) = swift_task_alloc(v9);
  *(void *)(v3 + 912) = swift_task_alloc(v9);
  *(void *)(v3 + 9memset(&strm.total_in, 0, 20) = swift_task_alloc(v9);
  *(void *)(v3 + 928) = swift_task_alloc(v9);
  *(void *)(v3 + 936) = swift_task_alloc(v9);
  *(void *)(v3 + 944) = swift_task_alloc(v9);
  *(void *)(v3 + 952) = swift_task_alloc(v9);
  *(void *)(v3 + 960) = swift_task_alloc(v9);
  *(void *)(v3 + 968) = swift_task_alloc(v9);
  *(void *)(v3 + 976) = swift_task_alloc(v9);
  *(void *)(v3 + 984) = swift_task_alloc(v9);
  *(void *)(v3 + 992) = swift_task_alloc(v9);
  *(void *)(v3 + 1000) = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(sub_100009FDC(&qword_100096AA8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 1008) = swift_task_alloc(v10);
  *(void *)(v3 + 10swift_weakDestroy(v0 + 16) = swift_task_alloc(v10);
  *(void *)(v3 + 1024) = swift_task_alloc(v10);
  *(void *)(v3 + 1032) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 1040) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v3 + 1048) = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 1056) = swift_task_alloc(v13);
  *(void *)(v3 + 1064) = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for CachedSession(0LL);
  *(void *)(v3 + 1072) = v14;
  *(void *)(v3 + 1080) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_100009FDC((uint64_t *)&unk_100097140) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 1088) = swift_task_alloc(v15);
  *(void *)(v3 + 1096) = swift_task_alloc(v15);
  *(void *)(v3 + 1104) = swift_task_alloc(v15);
  *(void *)(v3 + 1112) = swift_task_alloc(v15);
  *(void *)(v3 + 11memset(&strm.total_in, 0, 20) = swift_task_alloc(v15);
  *(void *)(v3 + 1128) = swift_task_alloc(v15);
  *(void *)(v3 + 1136) = swift_task_alloc(v15);
  *(void *)(v3 + 1144) = swift_task_alloc(v15);
  *(void *)(v3 + 1152) = swift_task_alloc(v15);
  return swift_task_switch(sub_1000594D0, v2);
}

void sub_1000594D0()
{
  __asm { BR              X10 }

uint64_t sub_10005953C()
{
  *(void *)(v10 - 136) = v0;
  *(void *)(v10 - 128) = v4;
  *(void *)(v10 - 160) = v3;
  *(void *)(v10 - 152) = v2;
  *(void *)(v10 - 144) = v1;
  if (qword_10009E190 != -1) {
    swift_once(&qword_10009E190, sub_100058614);
  }
  uint64_t v11 = sub_100009FC4(*(void *)(v6 + 832), (uint64_t)qword_10009E198);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SendOneMessage Request Received", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = *(void *)(v6 + 1152);
  uint64_t v16 = *(void **)(v6 + 776);

  os_log_type_t v17 = (uint64_t *)MessageKeys.sendOneMessageSessionInfo.unsafeMutableAddressor();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_bridgeObjectRetain(v19);
  XPCDictionary.subscript.getter(v18, v19, v16, v15);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = type metadata accessor for XPCObject(0LL);
  unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48LL);
  int v22 = v21(v15, 1LL, v20);
  unint64_t v23 = *(void ***)(v6 + 1152);
  if (v22 == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1152), v20) != 12)
  {
LABEL_14:
    sub_100015BF0((uint64_t)v23, type metadata accessor for XPCObject);
    goto LABEL_15;
  }

  uint64_t v243 = v8;
  uint64_t v246 = v7;
  uint64_t v24 = *(void *)(v6 + 1144);
  *(void *)(v10 - 168) = v21;
  uint64_t v25 = *(void **)(v6 + 776);
  char v26 = *v23;
  *(void *)(v6 + 1160) = *v23;
  id v27 = (uint64_t *)MessageKeys.sendOneMessageEvent.unsafeMutableAddressor();
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  uint64_t v30 = v25;
  Swift::String v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168);
  XPCDictionary.subscript.getter(v28, v29, v30, v24);
  swift_bridgeObjectRelease(v29);
  int v32 = v31(v24, 1LL, v20);
  unint64_t v23 = *(void ***)(v6 + 1144);
  if (v32 == 1)
  {
    swift_unknownObjectRelease(v26);
LABEL_6:
    sub_10000C234((uint64_t)v23, (uint64_t *)&unk_100097140);
LABEL_15:
    uint64_t v41 = *(void *)(v6 + 912);
    uint64_t v42 = *(void *)(v6 + 840);
    uint64_t v43 = *(void *)(v6 + 784);
    uint64_t v44 = sub_100058684();
    uint64_t v45 = *(void (**)(uint64_t))(v42 + 16);
    *(void *)(v10 - 136) = v44;
    v45(v41);
    uint64_t v46 = swift_retain(v43);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.error.getter();
    uint64_t v49 = swift_allocObject(&unk_100091498, 17LL, 7LL);
    *(_BYTE *)(v49 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v50 = swift_allocObject(&unk_1000914C0, 17LL, 7LL);
    *(_BYTE *)(v50 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v51 = swift_allocObject(&unk_1000914E8, 32LL, 7LL);
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = sub_1000660FC;
    *(void *)(v51 + 24) = v43;
    uint64_t v52 = swift_allocObject(&unk_100091510, 32LL, 7LL);
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = sub_1000657B4;
    *(void *)(v52 + 24) = v51;
    uint64_t v53 = sub_100009FDC(&qword_100098238);
    uint64_t v54 = swift_allocObject(v53, 80LL, 7LL);
    *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
    *(void *)(v54 + 32) = sub_100065790;
    *(void *)(v54 + 40) = v49;
    *(void *)(v54 + 48) = sub_1000660F8;
    *(void *)(v54 + 56) = v50;
    *(void *)(v54 + 64) = sub_1000657D4;
    *(void *)(v54 + 72) = v52;
    swift_retain(v49);
    swift_retain(v50);
    swift_retain(v52);
    swift_bridgeObjectRelease(v54);
    os_log_type_t v55 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v10 - 112) = 0LL;
      *(void *)(v10 - 104) = v57;
      *(_WORD *)uint64_t v56 = 258;
      v56[2] = *(_BYTE *)(v49 + 16);
      swift_release(v49);
      v56[3] = *(_BYTE *)(v50 + 16);
      *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v56 + 4;
      swift_release(v50);
      sub_100065300((uint64_t *)(v10 - 120), v10 - 112, (uint64_t *)(v10 - 104), *(uint64_t (**)(void))(v52 + 16));
      *(void *)(v10 - 144) = *(void *)(v6 + 912);
      uint64_t v58 = v5;
      uint64_t v59 = v45;
      uint64_t v60 = *(void *)(v6 + 840);
      uint64_t v61 = *(void *)(v6 + 832);
      swift_release(v52);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v55,  "missing required values for sendOneMessage from %{public}s",  v56,  0xCu);
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);

      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
      uint64_t v45 = v59;
      uint64_t v5 = v58;
      v62(*(void *)(v10 - 144), v61);
    }

    else
    {
      uint64_t v63 = *(void *)(v6 + 912);
      uint64_t v64 = *(void *)(v6 + 840);
      uint64_t v65 = *(void *)(v6 + 832);

      swift_release(v52);
      swift_release(v50);
      swift_release(v49);
      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v62(v63, v65);
    }

    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v6 + 776));
    if (!reply) {
      goto LABEL_26;
    }
    __int128 v67 = reply;
    uint64_t v68 = *(void *)(v6 + 784);
    xpc_dictionary_set_string(reply, "error", "missing required sendOneMessage fields");
    swift_beginAccess(v68 + 112, v5, 0LL, 0LL);
    uint64_t v69 = *(void *)(v68 + 112);
    if (v69)
    {
      swift_beginAccess(v69 + 16, *(void *)(v10 - 128), 0LL, 0LL);
      int v70 = *(_xpc_connection_s **)(v69 + 16);
      if (v70)
      {
        uint64_t v71 = *(void *)(v6 + 904);
        uint64_t v72 = *(void *)(v6 + 832);
        xpc_connection_send_message(v70, v67);
        uint64_t v73 = ((uint64_t (*)(uint64_t, void, uint64_t))v45)(v71, *(void *)(v10 - 136), v72);
        int v74 = (os_log_s *)Logger.logObject.getter(v73);
        os_log_type_t v75 = static os_log_type_t.info.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        uint64_t v77 = *(void *)(v6 + 904);
        uint64_t v78 = *(void *)(v6 + 832);
        if (!v76)
        {

          swift_unknownObjectRelease(v67);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          goto LABEL_25;
        }

        uint64_t v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(void *)(v10 - 112) = 0LL;
        *(void *)(v10 - 104) = 0LL;
        *(_WORD *)uint64_t v79 = 0;
        *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v79 + 2;
        sub_100065270((uint64_t)_swiftEmptyArrayStorage, v10 - 120, v10 - 112, v10 - 104);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "SendOneMessage Error Reply Sent", v79, 2u);
        swift_slowDealloc(v79, -1LL, -1LL);

        uint64_t v80 = v67;
LABEL_23:
        swift_unknownObjectRelease(v80);
LABEL_25:
        v62(v77, v78);
LABEL_26:
        uint64_t v81 = *(void *)(v6 + 1152);
        uint64_t v82 = *(void *)(v6 + 1144);
        uint64_t v83 = *(void *)(v6 + 1136);
        uint64_t v84 = *(void *)(v6 + 1128);
        uint64_t v85 = *(void *)(v6 + 1120);
        uint64_t v86 = *(void *)(v6 + 1112);
        uint64_t v87 = *(void *)(v6 + 1104);
        uint64_t v88 = *(void *)(v6 + 1096);
        uint64_t v89 = *(void *)(v6 + 1088);
        uint64_t v90 = *(void *)(v6 + 1080);
        uint64_t v220 = *(void *)(v6 + 1064);
        uint64_t v221 = *(void *)(v6 + 1056);
        uint64_t v222 = *(void *)(v6 + 1032);
        uint64_t v223 = *(void *)(v6 + 1024);
        uint64_t v224 = *(void *)(v6 + 1016);
        uint64_t v225 = *(void *)(v6 + 1008);
        uint64_t v226 = *(void *)(v6 + 1000);
        uint64_t v227 = *(void *)(v6 + 992);
        uint64_t v228 = *(void *)(v6 + 984);
        uint64_t v229 = *(void *)(v6 + 976);
        uint64_t v230 = *(void *)(v6 + 968);
        uint64_t v231 = *(void *)(v6 + 960);
        uint64_t v232 = *(void *)(v6 + 952);
        uint64_t v233 = *(void *)(v6 + 944);
        uint64_t v234 = *(void *)(v6 + 936);
        uint64_t v235 = *(void *)(v6 + 928);
        uint64_t v236 = *(void *)(v6 + 920);
        uint64_t v237 = *(void *)(v6 + 912);
        uint64_t v239 = *(void *)(v6 + 904);
        uint64_t v242 = *(void *)(v6 + 896);
        uint64_t v244 = *(void *)(v6 + 888);
        uint64_t v247 = *(void *)(v6 + 880);
        uint64_t v91 = *(void *)(v6 + 864);
        *(void *)(v10 - 168) = *(void *)(v6 + 872);
        *(void *)(v10 - 160) = v91;
        uint64_t v92 = *(void *)(v6 + 848);
        *(void *)(v10 - 152) = *(void *)(v6 + 856);
        *(void *)(v10 - 144) = v92;
        uint64_t v93 = *(void *)(v6 + 816);
        *(void *)(v10 - 136) = *(void *)(v6 + 824);
        *(void *)(v10 - 128) = v93;
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v220);
        swift_task_dealloc(v221);
        swift_task_dealloc(v222);
        swift_task_dealloc(v223);
        swift_task_dealloc(v224);
        swift_task_dealloc(v225);
        swift_task_dealloc(v226);
        swift_task_dealloc(v227);
        swift_task_dealloc(v228);
        swift_task_dealloc(v229);
        swift_task_dealloc(v230);
        swift_task_dealloc(v231);
        swift_task_dealloc(v232);
        swift_task_dealloc(v233);
        swift_task_dealloc(v234);
        swift_task_dealloc(v235);
        swift_task_dealloc(v236);
        swift_task_dealloc(v237);
        swift_task_dealloc(v239);
        swift_task_dealloc(v242);
        swift_task_dealloc(v244);
        swift_task_dealloc(v247);
        swift_task_dealloc(*(void *)(v10 - 168));
        swift_task_dealloc(*(void *)(v10 - 160));
        swift_task_dealloc(*(void *)(v10 - 152));
        swift_task_dealloc(*(void *)(v10 - 144));
        swift_task_dealloc(*(void *)(v10 - 136));
        swift_task_dealloc(*(void *)(v10 - 128));
        return (*(uint64_t (**)(void))(v6 + 8))();
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_78;
  }

  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1144), v20) != 12)
  {
    swift_unknownObjectRelease(v26);
    goto LABEL_14;
  }

  uint64_t v33 = *(void *)(v6 + 1136);
  uint64_t v34 = *v23;
  *(void *)(v6 + 1168) = *v23;
  uint64_t v35 = (uint64_t *)MessageKeys.eventType.unsafeMutableAddressor();
  unint64_t v36 = v26;
  uint64_t v37 = *v35;
  uint64_t v38 = v35[1];
  swift_bridgeObjectRetain(v38);
  *(void *)(v10 - 128) = v36;
  XPCDictionary.subscript.getter(v37, v38, v36, v33);
  swift_bridgeObjectRelease(v38);
  int v39 = v31(v33, 1LL, v20);
  uint64_t v40 = *(uint64_t **)(v6 + 1136);
  BOOL v241 = v34;
  if (v39 == 1)
  {
    sub_10000C234((uint64_t)v40, (uint64_t *)&unk_100097140);
LABEL_44:
    uint64_t v129 = *(void *)(v6 + 928);
    uint64_t v130 = *(void *)(v6 + 840);
    uint64_t v131 = *(void *)(v6 + 784);
    uint64_t v132 = sub_100058684();
    uint64_t v133 = *(void (**)(uint64_t))(v130 + 16);
    *(void *)(v10 - 152) = v132;
    v133(v129);
    uint64_t v134 = swift_retain(v131);
    char v135 = (os_log_s *)Logger.logObject.getter(v134);
    os_log_type_t v136 = static os_log_type_t.error.getter();
    uint64_t v137 = swift_allocObject(&unk_100091538, 17LL, 7LL);
    *(_BYTE *)(v137 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v138 = swift_allocObject(&unk_100091560, 17LL, 7LL);
    *(_BYTE *)(v138 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v139 = swift_allocObject(&unk_100091588, 32LL, 7LL);
    *(void *)(v139 + swift_weakDestroy(v0 + 16) = sub_1000660FC;
    *(void *)(v139 + 24) = v131;
    uint64_t v140 = swift_allocObject(&unk_1000915B0, 32LL, 7LL);
    *(void *)(v140 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v140 + 24) = v139;
    uint64_t v141 = sub_100009FDC(&qword_100098238);
    uint64_t v142 = swift_allocObject(v141, 80LL, 7LL);
    *(_OWORD *)(v142 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
    *(void *)(v142 + 32) = sub_1000660F8;
    *(void *)(v142 + 40) = v137;
    *(void *)(v142 + 48) = sub_1000660F8;
    *(void *)(v142 + 56) = v138;
    *(void *)(v142 + 64) = sub_100065FE4;
    *(void *)(v142 + 72) = v140;
    swift_retain(v137);
    swift_retain(v138);
    swift_retain(v140);
    swift_bridgeObjectRelease(v142);
    os_log_type_t v143 = v136;
    if (os_log_type_enabled(v135, v136))
    {
      char v144 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v145 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v10 - 112) = 0LL;
      *(void *)(v10 - 104) = v145;
      *(_WORD *)char v144 = 258;
      v144[2] = *(_BYTE *)(v137 + 16);
      swift_release(v137);
      v144[3] = *(_BYTE *)(v138 + 16);
      *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v144 + 4;
      swift_release(v138);
      sub_100065300((uint64_t *)(v10 - 120), v10 - 112, (uint64_t *)(v10 - 104), *(uint64_t (**)(void))(v140 + 16));
      uint64_t v146 = *(void *)(v6 + 928);
      uint64_t v147 = *(void *)(v6 + 840);
      uint64_t v148 = *(void *)(v6 + 832);
      swift_release(v140);
      _os_log_impl( (void *)&_mh_execute_header,  v135,  v143,  "missing required values in create session from %{public}s",  v144,  0xCu);
      swift_arrayDestroy(v145, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v145, -1LL, -1LL);
      swift_slowDealloc(v144, -1LL, -1LL);

      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
      v62(v146, v148);
    }

    else
    {
      uint64_t v149 = *(void *)(v6 + 928);
      uint64_t v150 = *(void *)(v6 + 840);
      uint64_t v151 = *(void *)(v6 + 832);

      swift_release(v140);
      swift_release(v138);
      swift_release(v137);
      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
      v62(v149, v151);
    }

    xpc_object_t v152 = xpc_dictionary_create_reply(*(xpc_object_t *)(v6 + 776));
    uint64_t v153 = *(void *)(v10 - 128);
    if (v152)
    {
      int v154 = v152;
      uint64_t v155 = *(void *)(v6 + 784);
      xpc_dictionary_set_string(v152, "error", "missing required sendOneMessage event fields");
      swift_beginAccess(v155 + 112, *(void *)(v10 - 144), 0LL, 0LL);
      uint64_t v156 = *(void *)(v155 + 112);
      if (!v156)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }

      swift_beginAccess(v156 + 16, *(void *)(v10 - 136), 0LL, 0LL);
      char v157 = *(_xpc_connection_s **)(v156 + 16);
      if (!v157)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }

      uint64_t v158 = *(void *)(v6 + 920);
      uint64_t v159 = *(void *)(v6 + 832);
      xpc_connection_send_message(v157, v154);
      uint64_t v160 = ((uint64_t (*)(uint64_t, void, uint64_t))v133)(v158, *(void *)(v10 - 152), v159);
      int v161 = (os_log_s *)Logger.logObject.getter(v160);
      os_log_type_t v162 = static os_log_type_t.info.getter();
      BOOL v163 = os_log_type_enabled(v161, v162);
      uint64_t v77 = *(void *)(v6 + 920);
      uint64_t v78 = *(void *)(v6 + 832);
      if (v163)
      {
        uint64_t v164 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(void *)(v10 - 112) = 0LL;
        *(void *)(v10 - 104) = 0LL;
        *(_WORD *)uint64_t v164 = 0;
        *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v164 + 2;
        sub_100065270((uint64_t)_swiftEmptyArrayStorage, v10 - 120, v10 - 112, v10 - 104);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        _os_log_impl((void *)&_mh_execute_header, v161, v162, "SendOneMessage Error Reply Sent", v164, 2u);
        swift_slowDealloc(v164, -1LL, -1LL);
        swift_unknownObjectRelease(v241);

        char v165 = v154;
LABEL_56:
        swift_unknownObjectRelease(v165);
        uint64_t v80 = *(void **)(v10 - 128);
        goto LABEL_23;
      }

      swift_unknownObjectRelease(v154);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_55:
      char v165 = v241;
      goto LABEL_56;
    }

    swift_unknownObjectRelease(v241);
    uint64_t v166 = v153;
    goto LABEL_53;
  }

  if (swift_getEnumCaseMultiPayload(v40, v20) != 8)
  {
    uint64_t v103 = (uint64_t)v40;
LABEL_43:
    sub_100015BF0(v103, type metadata accessor for XPCObject);
    goto LABEL_44;
  }

  uint64_t v95 = *(void *)(v6 + 1128);
  uint64_t v96 = *v40;
  uint64_t v97 = v40[1];
  uint64_t v240 = v96;
  *(void *)(v6 + 1176) = v97;
  __int128 v98 = (uint64_t *)MessageKeys.clientType.unsafeMutableAddressor();
  uint64_t v99 = *v98;
  uint64_t v100 = v98[1];
  swift_bridgeObjectRetain(v100);
  XPCDictionary.subscript.getter(v99, v100, *(void **)(v10 - 128), v95);
  swift_bridgeObjectRelease(v100);
  int v101 = v31(v95, 1LL, v20);
  __int128 v102 = *(void ***)(v6 + 1128);
  if (v101 == 1)
  {
LABEL_29:
    swift_bridgeObjectRelease(v97);
    sub_10000C234((uint64_t)v102, (uint64_t *)&unk_100097140);
    goto LABEL_44;
  }

  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1128), v20) != 8)
  {
LABEL_42:
    swift_bridgeObjectRelease(v97);
    uint64_t v103 = (uint64_t)v102;
    goto LABEL_43;
  }

  uint64_t v104 = *(void *)(v6 + 1120);
  __int128 v105 = *v102;
  *(void *)(v6 + 1184) = *v102;
  __int128 v106 = v102[1];
  *(void *)(v6 + 1192) = v106;
  __int128 v107 = (uint64_t *)MessageKeys.transportConfiguration.unsafeMutableAddressor();
  uint64_t v108 = *v107;
  uint64_t v109 = v107[1];
  swift_bridgeObjectRetain(v109);
  XPCDictionary.subscript.getter(v108, v109, *(void **)(v10 - 128), v104);
  swift_bridgeObjectRelease(v109);
  int v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168))(v104, 1LL, v20);
  __int128 v102 = *(void ***)(v6 + 1120);
  if (v110 == 1)
  {
    swift_bridgeObjectRelease(v106);
    goto LABEL_29;
  }

  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1120), v20) != 12)
  {
    swift_bridgeObjectRelease(v106);
    goto LABEL_42;
  }

  *(void *)(v10 - 144) = v9;
  uint64_t v111 = *(void *)(v6 + 1112);
  uint64_t v112 = *v102;
  *(void *)(v6 + 1200) = *v102;
  uint64_t v113 = (uint64_t *)MessageKeys.tcAllowsCellularAccess.unsafeMutableAddressor();
  uint64_t v114 = *v113;
  uint64_t v115 = v113[1];
  swift_bridgeObjectRetain(v115);
  *(void *)(v10 - 136) = v112;
  XPCDictionary.subscript.getter(v114, v115, v112, v111);
  swift_bridgeObjectRelease(v115);
  int v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168))(v111, 1LL, v20);
  uint64_t v117 = *(void *)(v6 + 1112);
  if (v116 == 1) {
    goto LABEL_40;
  }
  uint64_t v118 = *(void *)(v6 + 1104);
  char v119 = *(_BYTE *)v117;
  int v120 = (uint64_t *)MessageKeys.tcAllowsExpensiveAccess.unsafeMutableAddressor();
  uint64_t v121 = *v120;
  uint64_t v122 = v120[1];
  swift_bridgeObjectRetain(v122);
  XPCDictionary.subscript.getter(v121, v122, *(void **)(v10 - 136), v118);
  swift_bridgeObjectRelease(v122);
  int v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168))(v118, 1LL, v20);
  uint64_t v117 = *(void *)(v6 + 1104);
  if (v123 == 1)
  {
LABEL_40:
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v97);
    sub_10000C234(v117, (uint64_t *)&unk_100097140);
LABEL_61:
    uint64_t v173 = *(void *)(v6 + 944);
    uint64_t v174 = *(void *)(v6 + 840);
    uint64_t v175 = *(void *)(v6 + 784);
    uint64_t v176 = sub_100058684();
    uint64_t v177 = *(void (**)(uint64_t))(v174 + 16);
    *(void *)(v10 - 152) = v176;
    *(void *)(v10 - 144) = v177;
    v177(v173);
    uint64_t v178 = swift_retain(v175);
    uint64_t v179 = (os_log_s *)Logger.logObject.getter(v178);
    os_log_type_t v180 = static os_log_type_t.error.getter();
    uint64_t v181 = swift_allocObject(&unk_1000915D8, 17LL, 7LL);
    *(_BYTE *)(v181 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v182 = swift_allocObject(&unk_100091600, 17LL, 7LL);
    *(_BYTE *)(v182 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v183 = swift_allocObject(&unk_100091628, 32LL, 7LL);
    *(void *)(v183 + swift_weakDestroy(v0 + 16) = sub_1000660FC;
    *(void *)(v183 + 24) = v175;
    uint64_t v184 = swift_allocObject(&unk_100091650, 32LL, 7LL);
    *(void *)(v184 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v184 + 24) = v183;
    uint64_t v185 = sub_100009FDC(&qword_100098238);
    uint64_t v186 = swift_allocObject(v185, 80LL, 7LL);
    *(_OWORD *)(v186 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
    *(void *)(v186 + 32) = sub_1000660F8;
    *(void *)(v186 + 40) = v181;
    *(void *)(v186 + 48) = sub_1000660F8;
    *(void *)(v186 + 56) = v182;
    *(void *)(v186 + 64) = sub_100065FE4;
    *(void *)(v186 + 72) = v184;
    swift_retain(v181);
    swift_retain(v182);
    swift_retain(v184);
    swift_bridgeObjectRelease(v186);
    os_log_type_t v187 = v180;
    if (os_log_type_enabled(v179, v180))
    {
      NSURL v188 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v189 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v10 - 112) = 0LL;
      *(void *)(v10 - 104) = v189;
      *(_WORD *)NSURL v188 = 258;
      v188[2] = *(_BYTE *)(v181 + 16);
      swift_release(v181);
      v188[3] = *(_BYTE *)(v182 + 16);
      *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v188 + 4;
      swift_release(v182);
      sub_100065300((uint64_t *)(v10 - 120), v10 - 112, (uint64_t *)(v10 - 104), *(uint64_t (**)(void))(v184 + 16));
      uint64_t v190 = *(void *)(v6 + 944);
      uint64_t v191 = *(void *)(v6 + 840);
      uint64_t v192 = *(void *)(v6 + 832);
      swift_release(v184);
      _os_log_impl( (void *)&_mh_execute_header,  v179,  v187,  "missing required values in transport configuration from %{public}s",  v188,  0xCu);
      swift_arrayDestroy(v189, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v189, -1LL, -1LL);
      swift_slowDealloc(v188, -1LL, -1LL);

      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
      v62(v190, v192);
    }

    else
    {
      uint64_t v193 = *(void *)(v6 + 944);
      uint64_t v194 = *(void *)(v6 + 840);
      uint64_t v195 = *(void *)(v6 + 832);

      swift_release(v184);
      swift_release(v182);
      swift_release(v181);
      __int128 v62 = *(void (**)(uint64_t, uint64_t))(v194 + 8);
      v62(v193, v195);
    }

    xpc_object_t v196 = xpc_dictionary_create_reply(*(xpc_object_t *)(v6 + 776));
    if (v196)
    {
      uint64_t v197 = v196;
      uint64_t v198 = *(void *)(v6 + 784);
      xpc_dictionary_set_string(v196, "error", "missing required sendOneMessage event fields");
      swift_beginAccess(v198 + 112, v243, 0LL, 0LL);
      uint64_t v199 = *(void *)(v198 + 112);
      if (!v199)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }

      swift_beginAccess(v199 + 16, v246, 0LL, 0LL);
      uint64_t v200 = *(_xpc_connection_s **)(v199 + 16);
      if (!v200)
      {
LABEL_81:
        __break(1u);
        __break(1u);
        __break(1u);
        JUMPOUT(0x10005AFD0LL);
      }

      uint64_t v201 = *(void *)(v6 + 936);
      uint64_t v202 = *(void *)(v6 + 832);
      xpc_connection_send_message(v200, v197);
      uint64_t v203 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 - 144))(v201, *(void *)(v10 - 152), v202);
      v204 = (os_log_s *)Logger.logObject.getter(v203);
      os_log_type_t v205 = static os_log_type_t.info.getter();
      BOOL v206 = os_log_type_enabled(v204, v205);
      uint64_t v77 = *(void *)(v6 + 936);
      uint64_t v78 = *(void *)(v6 + 832);
      if (v206)
      {
        v207 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(void *)(v10 - 112) = 0LL;
        *(void *)(v10 - 104) = 0LL;
        *(_WORD *)v207 = 0;
        *(void *)(v10 - 1memset(&strm.total_in, 0, 20) = v207 + 2;
        sub_100065270((uint64_t)_swiftEmptyArrayStorage, v10 - 120, v10 - 112, v10 - 104);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        _os_log_impl((void *)&_mh_execute_header, v204, v205, "SendOneMessage Error Reply Sent", v207, 2u);
        swift_slowDealloc(v207, -1LL, -1LL);
        swift_unknownObjectRelease(v241);

        swift_unknownObjectRelease(v197);
        char v165 = *(void **)(v10 - 136);
        goto LABEL_56;
      }

      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_unknownObjectRelease(v197);
      swift_unknownObjectRelease(*(void *)(v10 - 136));
      goto LABEL_55;
    }

    swift_unknownObjectRelease(*(void *)(v10 - 136));
    swift_unknownObjectRelease(v241);
    uint64_t v166 = *(void *)(v10 - 128);
LABEL_53:
    swift_unknownObjectRelease(v166);
    goto LABEL_26;
  }

  uint64_t v124 = *(void *)(v6 + 1096);
  char v238 = *(_BYTE *)v117;
  uint64_t v125 = (uint64_t *)MessageKeys.tcBundleID.unsafeMutableAddressor();
  uint64_t v126 = *v125;
  uint64_t v127 = v125[1];
  swift_bridgeObjectRetain(v127);
  XPCDictionary.subscript.getter(v126, v127, *(void **)(v10 - 136), v124);
  swift_bridgeObjectRelease(v127);
  int v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168))(v124, 1LL, v20);
  uint64_t v117 = *(void *)(v6 + 1096);
  if (v128 == 1) {
    goto LABEL_40;
  }
  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1096), v20) != 8)
  {
LABEL_60:
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v97);
    sub_100015BF0(v117, type metadata accessor for XPCObject);
    goto LABEL_61;
  }

  uint64_t v167 = *(void *)(v6 + 1088);
  uint64_t v245 = *(void *)v117;
  uint64_t v248 = *(void *)(v117 + 8);
  *(void *)(v6 + 1208) = v248;
  __int128 v168 = (uint64_t *)MessageKeys.samplingUUID.unsafeMutableAddressor();
  uint64_t v169 = *v168;
  uint64_t v170 = v168[1];
  swift_bridgeObjectRetain(v170);
  XPCDictionary.subscript.getter(v169, v170, *(void **)(v10 - 128), v167);
  swift_bridgeObjectRelease(v170);
  int v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 - 168))(v167, 1LL, v20);
  v172 = *(uint64_t **)(v6 + 1088);
  if (v171 == 1)
  {
    sub_10000C234(*(void *)(v6 + 1088), (uint64_t *)&unk_100097140);
LABEL_74:
    uint64_t v208 = 0LL;
    uint64_t v209 = 0LL;
    goto LABEL_75;
  }

  if (swift_getEnumCaseMultiPayload(*(void *)(v6 + 1088), v20) != 8)
  {
    sub_100015BF0((uint64_t)v172, type metadata accessor for XPCObject);
    goto LABEL_74;
  }

  uint64_t v208 = *v172;
  uint64_t v209 = v172[1];
LABEL_75:
  type metadata accessor for Session();
  sub_10000C7DC(v208, v209);
  *(double *)(v6 + 12swift_weakDestroy(v0 + 16) = v210;
  *(void *)(v10 - 168) = 0LL;
  double v211 = v210;
  uint64_t v212 = *(void *)(v6 + 1080);
  uint64_t v213 = *(void *)(v6 + 1064);
  uint64_t v214 = *(void *)(v6 + 784);
  swift_bridgeObjectRelease(v209);
  *(void *)(v6 + 1memset(&strm.total_in, 0, 20) = v105;
  *(void *)(v6 + 128) = v106;
  *(void *)(v6 + 136) = v240;
  *(void *)(v6 + 144) = v97;
  *(_BYTE *)(v6 + 152) = v119;
  *(_BYTE *)(v6 + 153) = v238;
  *(void *)(v6 + 160) = v245;
  *(void *)(v6 + 168) = v248;
  swift_bridgeObjectRetain_n(v106, 2LL);
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v248);
  static Date.now.getter(v215);
  sub_10000C6A4(*(void *)(v10 - 160), 0x4D656E4F646E6553LL, 0xEE00656761737365LL, v213, v212, v211);
  uint64_t v216 = *(void *)(v214 + 152);
  *(void *)(v6 + 1224) = v216;
  uint64_t v217 = *(int **)(*(void *)v216 + 232LL);
  uint64_t v218 = v217[1];
  *(void *)(v10 - 128) = (char *)v217 + *v217;
  uint64_t v219 = (void *)swift_task_alloc(v218);
  *(void *)(v6 + 1232) = v219;
  *uint64_t v219 = v6;
  v219[1] = sub_10005AFE0;
  return (*(uint64_t (**)(void, void, void, _UNKNOWN **))(v10 - 128))( *(void *)(v10 - 152),  *(void *)(v6 + 1080),  *(void *)(v6 + 1072),  &off_10008DB90);
}

uint64_t sub_10005AFE0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1232);
  *(void *)(*v1 + 1240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 784);
    swift_bridgeObjectRelease(*(void *)(v2 + 1192));
    uint64_t v5 = sub_100060388;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 784);
    uint64_t v5 = sub_10005B054;
  }

  return swift_task_switch(v5, v6);
}

uint64_t sub_10005B054()
{
  uint64_t v1 = v0[153];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[34];
  v0[156] = v3;
  v0[157] = v2;
  v0[158] = *(void *)(*(void *)v1 + 248LL);
  swift_bridgeObjectRetain_n(v2, 2LL);
  swift_bridgeObjectRetain(v3);
  return swift_task_switch(sub_10005B0B4, v1);
}

uint64_t sub_10005B0B4()
{
  uint64_t v1 = *(void *)(v0 + 784);
  (*(void (**)(void, void))(v0 + 1264))(*(void *)(v0 + 1184), *(void *)(v0 + 1192));
  return swift_task_switch(sub_10005B100, v1);
}

uint64_t sub_10005B100()
{
  uint64_t v1 = v0[156];
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  if (v2)
  {
    uint64_t v3 = *(int **)(**(void **)(v0[98] + 160LL) + 136LL);
    os_log_t osloga = (os_log_t)((char *)v3 + *v3);
    uint64_t v4 = (void *)swift_task_alloc(v3[1]);
    v0[159] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10005B9D4;
    return ((uint64_t (*)(void *, void, void, _UNKNOWN **))osloga)( v0 + 33,  v0[135],  v0[134],  &off_10008DB90);
  }

  uint64_t v6 = v0[157];
  swift_bridgeObjectRelease(v0[156]);
  swift_bridgeObjectRelease(v6);
  *((_OWORD *)v0 + 42) = *((_OWORD *)v0 + 18);
  sub_10002AFE4((uint64_t)(v0 + 84));
  uint64_t v67 = v0[155];
  *(_OWORD *)(v0 + 163) = 0u;
  uint64_t v7 = (void *)v0[146];
  uint64_t v8 = v0[99];
  v0[92] = sub_10002CF80((uint64_t)_swiftEmptyArrayStorage);
  size_t count = xpc_dictionary_get_count(v7);
  sub_100009FDC((uint64_t *)&unk_100097050);
  Dictionary.reserveCapacity(_:)(count);
  uint64_t v10 = swift_allocObject(&unk_1000918F8, 32LL, 7LL);
  v0[165] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v0 + 92;
  *(void *)(v10 + 24) = v8;
  uint64_t v11 = swift_allocObject(&unk_100091920, 32LL, 7LL);
  v0[22] = _NSConcreteStackBlock;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_100065954;
  *(void *)(v11 + 24) = v10;
  v0[26] = sub_100030194;
  v0[27] = v11;
  v0[23] = 1107296256LL;
  v0[24] = sub_10002CF7C;
  v0[25] = &unk_100091938;
  uint64_t v12 = _Block_copy(v0 + 22);
  uint64_t v13 = v0[27];
  swift_unknownObjectRetain(v7);
  swift_retain(v11);
  swift_release(v13);
  xpc_dictionary_apply(v7, v12);
  swift_unknownObjectRelease(v7);
  _Block_release(v12);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v11, "", 73LL, 189LL, 53LL, 1LL);
  uint64_t result = swift_release(v11);
  if ((v7 & 1) != 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v14 = 4079420LL;
  uint64_t v15 = v0[129];
  sub_100064F90(0x646F6874656D5FLL, 0xE700000000000000LL, v0[92], v15);
  uint64_t v16 = type metadata accessor for ServiceEventValue(0LL);
  os_log_type_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL);
  if (v17(v15, 1LL, v16) != 1)
  {
    uint64_t v18 = v0[128];
    sub_100065EFC(v0[129], v18, &qword_100096AA8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v16);
    if (EnumCaseMultiPayload == 2)
    {
      v0[95] = *(void *)v0[128];
      uint64_t v20 = &type metadata for UInt64;
      unint64_t v21 = &protocol witness table for UInt64;
      goto LABEL_9;
    }

    if (EnumCaseMultiPayload == 1)
    {
      v0[96] = *(void *)v0[128];
      uint64_t v20 = &type metadata for Int64;
      unint64_t v21 = &protocol witness table for Int64;
LABEL_9:
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      unint64_t v24 = v23;
      goto LABEL_12;
    }

    sub_100015BF0(v0[128], type metadata accessor for ServiceEventValue);
  }

  unint64_t v24 = 0xE300000000000000LL;
  uint64_t v22 = 4079420LL;
LABEL_12:
  v0[167] = v24;
  v0[166] = v22;
  uint64_t v25 = v0[127];
  sub_10000C234(v0[129], &qword_100096AA8);
  sub_100064F90(0x7375746174735FLL, 0xE700000000000000LL, v0[92], v25);
  if (v17(v25, 1LL, v16) == 1)
  {
LABEL_19:
    unint64_t v31 = 0xE300000000000000LL;
    goto LABEL_20;
  }

  uint64_t v26 = v0[126];
  sub_100065EFC(v0[127], v26, &qword_100096AA8);
  int v27 = swift_getEnumCaseMultiPayload(v26, v16);
  if (v27 == 2)
  {
    v0[93] = *(void *)v0[126];
    uint64_t v28 = &type metadata for UInt64;
    uint64_t v29 = &protocol witness table for UInt64;
    goto LABEL_17;
  }

  if (v27 != 1)
  {
    sub_100015BF0(v0[126], type metadata accessor for ServiceEventValue);
    goto LABEL_19;
  }

  v0[94] = *(void *)v0[126];
  uint64_t v28 = &type metadata for Int64;
  uint64_t v29 = &protocol witness table for Int64;
LABEL_17:
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
  unint64_t v31 = v30;
LABEL_20:
  v0[169] = v31;
  v0[168] = v14;
  uint64_t v32 = v0[125];
  uint64_t v33 = v0[105];
  uint64_t v34 = v0[104];
  sub_10000C234(v0[127], &qword_100096AA8);
  uint64_t v35 = sub_100058684();
  v0[170] = v35;
  unint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v0[171] = v36;
  v36(v32, v35, v34);
  uint64_t v37 = swift_allocObject(&unk_100091970, 32LL, 7LL);
  *(void *)(v37 + swift_weakDestroy(v0 + 16) = v22;
  *(void *)(v37 + 24) = v24;
  uint64_t v38 = swift_allocObject(&unk_100091998, 32LL, 7LL);
  *(void *)(v38 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v38 + 24) = v31;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v31);
  oslog = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v40 = static os_log_type_t.default.getter(oslog);
  uint64_t v41 = swift_allocObject(&unk_1000919C0, 17LL, 7LL);
  *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v42 = swift_allocObject(&unk_1000919E8, 17LL, 7LL);
  *(_BYTE *)(v42 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v43 = swift_allocObject(&unk_100091A10, 32LL, 7LL);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v43 + 24) = v37;
  uint64_t v44 = swift_allocObject(&unk_100091A38, 32LL, 7LL);
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v44 + 24) = v43;
  uint64_t v45 = swift_allocObject(&unk_100091A60, 17LL, 7LL);
  *(_BYTE *)(v45 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v46 = swift_allocObject(&unk_100091A88, 17LL, 7LL);
  *(_BYTE *)(v46 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v47 = swift_allocObject(&unk_100091AB0, 32LL, 7LL);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v47 + 24) = v38;
  uint64_t v48 = swift_allocObject(&unk_100091AD8, 32LL, 7LL);
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v48 + 24) = v47;
  uint64_t v49 = sub_100009FDC(&qword_100098238);
  v0[172] = v49;
  uint64_t v50 = swift_allocObject(v49, 128LL, 7LL);
  *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v50 + 32) = sub_1000660F8;
  *(void *)(v50 + 40) = v41;
  *(void *)(v50 + 48) = sub_1000660F8;
  *(void *)(v50 + 56) = v42;
  *(void *)(v50 + 64) = sub_100065FE4;
  *(void *)(v50 + 72) = v44;
  *(void *)(v50 + 80) = sub_1000660F8;
  *(void *)(v50 + 88) = v45;
  *(void *)(v50 + 96) = sub_1000660F8;
  *(void *)(v50 + 104) = v46;
  *(void *)(v50 + 112) = sub_100065FE4;
  *(void *)(v50 + 1memset(&strm.total_in, 0, 20) = v48;
  swift_retain(v41);
  swift_retain(v42);
  swift_retain(v44);
  swift_retain(v45);
  swift_retain(v46);
  swift_retain(v48);
  swift_bridgeObjectRelease(v50);
  os_log_type_t v66 = v40;
  if (os_log_type_enabled(oslog, v40))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v72 = 0LL;
    uint64_t v73 = v52;
    *(_WORD *)uint64_t v51 = 514;
    v51[2] = *(_BYTE *)(v41 + 16);
    if (v67) {
      return swift_errorRelease(v67);
    }
    swift_release(v41);
    v51[3] = *(_BYTE *)(v42 + 16);
    uint64_t v71 = v51 + 4;
    swift_release(v42);
    sub_100065300((uint64_t *)&v71, (uint64_t)&v72, &v73, *(uint64_t (**)(void))(v44 + 16));
    swift_release(v44);
    uint64_t v57 = v71;
    _BYTE *v71 = *(_BYTE *)(v45 + 16);
    swift_release(v45);
    v57[1] = *(_BYTE *)(v46 + 16);
    uint64_t v71 = v57 + 2;
    swift_release(v46);
    sub_100065300((uint64_t *)&v71, (uint64_t)&v72, &v73, *(uint64_t (**)(void))(v48 + 16));
    uint64_t v58 = v0[125];
    uint64_t v59 = v0[105];
    uint64_t v60 = v0[104];
    swift_release(v48);
    _os_log_impl((void *)&_mh_execute_header, oslog, v66, "sending one message %{public}s:%{public}s", v51, 0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);

    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v56(v58, v60);
  }

  else
  {
    uint64_t v53 = v0[125];
    uint64_t v54 = v0[105];
    uint64_t v55 = v0[104];

    swift_release(v48);
    swift_release(v46);
    swift_release(v45);
    swift_release(v44);
    swift_release(v42);
    swift_release(v41);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v56(v53, v55);
  }

  v0[173] = v56;
  uint64_t v61 = v0[98];
  swift_bridgeObjectRetain(v0[92]);
  v0[77] = XPCIncomingConnection.init(conn:)(0x4D656E4F646E6553LL);
  v0[78] = v62;
  v0[79] = v63;
  uint64_t v64 = *(int **)(**(void **)(v61 + 160) + 152LL);
  os_log_t oslogb = (os_log_t)((char *)v64 + *v64);
  uint64_t v65 = (void *)swift_task_alloc(v64[1]);
  v0[174] = v65;
  void *v65 = v0;
  v65[1] = sub_10005C2F8;
  return ((uint64_t (*)(void *))oslogb)(v0 + 15);
}

uint64_t sub_10005B9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 1272);
  *(void *)(*v3 + 1280) = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = (_OWORD *)(v6 + 288);
  uint64_t v9 = *(void *)(v6 + 1256);
  uint64_t v10 = *(void *)(v6 + 1248);
  uint64_t v11 = *(void *)(v6 + 784);
  if (v2)
  {
    swift_errorRelease(v2);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    *(_OWORD *)(v6 + 640) = *v8;
    sub_10002AFE4(v6 + 640);
    uint64_t v12 = sub_100060C10;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 1248));
    swift_bridgeObjectRelease(v9);
    *(void *)(v6 + 1288) = a2;
    *(void *)(v6 + 1296) = a1;
    *(_OWORD *)(v6 + 656) = *v8;
    sub_10002AFE4(v6 + 656);
    uint64_t v12 = sub_10005BABC;
  }

  return swift_task_switch(v12, v11);
}

uint64_t sub_10005BABC()
{
  uint64_t v1 = v0[162];
  uint64_t v62 = v0[160];
  v0[164] = v0[161];
  v0[163] = v1;
  uint64_t v2 = (void *)v0[146];
  uint64_t v3 = v0[99];
  v0[92] = sub_10002CF80((uint64_t)_swiftEmptyArrayStorage);
  size_t count = xpc_dictionary_get_count(v2);
  sub_100009FDC((uint64_t *)&unk_100097050);
  Dictionary.reserveCapacity(_:)(count);
  uint64_t v5 = swift_allocObject(&unk_1000918F8, 32LL, 7LL);
  v0[165] = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v0 + 92;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject(&unk_100091920, 32LL, 7LL);
  v0[22] = _NSConcreteStackBlock;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = sub_100065954;
  *(void *)(v6 + 24) = v5;
  v0[26] = sub_100030194;
  v0[27] = v6;
  v0[23] = 1107296256LL;
  v0[24] = sub_10002CF7C;
  v0[25] = &unk_100091938;
  uint64_t v7 = _Block_copy(v0 + 22);
  uint64_t v8 = v0[27];
  swift_unknownObjectRetain(v2);
  swift_retain(v6);
  swift_release(v8);
  xpc_dictionary_apply(v2, v7);
  swift_unknownObjectRelease(v2);
  _Block_release(v7);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v6, "", 73LL, 189LL, 53LL, 1LL);
  uint64_t result = swift_release(v6);
  if ((v2 & 1) != 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v10 = 4079420LL;
  uint64_t v11 = v0[129];
  sub_100064F90(0x646F6874656D5FLL, 0xE700000000000000LL, v0[92], v11);
  uint64_t v12 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL);
  uint64_t v61 = v1;
  if (v13(v11, 1LL, v12) != 1)
  {
    uint64_t v14 = v0[128];
    sub_100065EFC(v0[129], v14, &qword_100096AA8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
    if (EnumCaseMultiPayload == 2)
    {
      v0[95] = *(void *)v0[128];
      uint64_t v16 = &type metadata for UInt64;
      os_log_type_t v17 = &protocol witness table for UInt64;
      goto LABEL_7;
    }

    if (EnumCaseMultiPayload == 1)
    {
      v0[96] = *(void *)v0[128];
      uint64_t v16 = &type metadata for Int64;
      os_log_type_t v17 = &protocol witness table for Int64;
LABEL_7:
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
      unint64_t v20 = v19;
      goto LABEL_10;
    }

    sub_100015BF0(v0[128], type metadata accessor for ServiceEventValue);
  }

  unint64_t v20 = 0xE300000000000000LL;
  uint64_t v18 = 4079420LL;
LABEL_10:
  v0[167] = v20;
  v0[166] = v18;
  uint64_t v21 = v0[127];
  sub_10000C234(v0[129], &qword_100096AA8);
  sub_100064F90(0x7375746174735FLL, 0xE700000000000000LL, v0[92], v21);
  if (v13(v21, 1LL, v12) == 1)
  {
LABEL_17:
    unint64_t v27 = 0xE300000000000000LL;
    goto LABEL_18;
  }

  uint64_t v22 = v0[126];
  sub_100065EFC(v0[127], v22, &qword_100096AA8);
  int v23 = swift_getEnumCaseMultiPayload(v22, v12);
  if (v23 == 2)
  {
    v0[93] = *(void *)v0[126];
    unint64_t v24 = &type metadata for UInt64;
    uint64_t v25 = &protocol witness table for UInt64;
    goto LABEL_15;
  }

  if (v23 != 1)
  {
    sub_100015BF0(v0[126], type metadata accessor for ServiceEventValue);
    goto LABEL_17;
  }

  v0[94] = *(void *)v0[126];
  unint64_t v24 = &type metadata for Int64;
  uint64_t v25 = &protocol witness table for Int64;
LABEL_15:
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
  unint64_t v27 = v26;
LABEL_18:
  v0[169] = v27;
  v0[168] = v10;
  uint64_t v28 = v0[125];
  uint64_t v29 = v0[105];
  uint64_t v30 = v0[104];
  sub_10000C234(v0[127], &qword_100096AA8);
  uint64_t v31 = sub_100058684();
  v0[170] = v31;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v0[171] = v32;
  v32(v28, v31, v30);
  uint64_t v33 = swift_allocObject(&unk_100091970, 32LL, 7LL);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(v33 + 24) = v20;
  uint64_t v34 = swift_allocObject(&unk_100091998, 32LL, 7LL);
  *(void *)(v34 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v34 + 24) = v27;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v27);
  oslog = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v63 = static os_log_type_t.default.getter(oslog);
  uint64_t v36 = swift_allocObject(&unk_1000919C0, 17LL, 7LL);
  *(_BYTE *)(v36 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v37 = swift_allocObject(&unk_1000919E8, 17LL, 7LL);
  *(_BYTE *)(v37 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v38 = swift_allocObject(&unk_100091A10, 32LL, 7LL);
  *(void *)(v38 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v38 + 24) = v33;
  uint64_t v39 = swift_allocObject(&unk_100091A38, 32LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v39 + 24) = v38;
  uint64_t v40 = swift_allocObject(&unk_100091A60, 17LL, 7LL);
  *(_BYTE *)(v40 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v41 = swift_allocObject(&unk_100091A88, 17LL, 7LL);
  *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v42 = swift_allocObject(&unk_100091AB0, 32LL, 7LL);
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v42 + 24) = v34;
  uint64_t v43 = swift_allocObject(&unk_100091AD8, 32LL, 7LL);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v43 + 24) = v42;
  uint64_t v44 = sub_100009FDC(&qword_100098238);
  v0[172] = v44;
  uint64_t v45 = swift_allocObject(v44, 128LL, 7LL);
  *(_OWORD *)(v45 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v45 + 32) = sub_1000660F8;
  *(void *)(v45 + 40) = v36;
  *(void *)(v45 + 48) = sub_1000660F8;
  *(void *)(v45 + 56) = v37;
  *(void *)(v45 + 64) = sub_100065FE4;
  *(void *)(v45 + 72) = v39;
  *(void *)(v45 + 80) = sub_1000660F8;
  *(void *)(v45 + 88) = v40;
  *(void *)(v45 + 96) = sub_1000660F8;
  *(void *)(v45 + 104) = v41;
  *(void *)(v45 + 112) = sub_100065FE4;
  *(void *)(v45 + 1memset(&strm.total_in, 0, 20) = v43;
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v39);
  swift_retain(v40);
  swift_retain(v41);
  swift_retain(v43);
  swift_bridgeObjectRelease(v45);
  if (os_log_type_enabled(oslog, v63))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
    uint64_t v47 = swift_slowAlloc(64LL, -1LL);
    uint64_t v68 = 0LL;
    uint64_t v69 = v47;
    *(_WORD *)uint64_t v46 = 514;
    void v46[2] = *(_BYTE *)(v36 + 16);
    if (v62)
    {
      swift_unknownObjectRelease(v61);
      return swift_errorRelease(v62);
    }

    uint64_t v51 = v47;
    swift_release(v36);
    v46[3] = *(_BYTE *)(v37 + 16);
    uint64_t v67 = v46 + 4;
    swift_release(v37);
    sub_100065300((uint64_t *)&v67, (uint64_t)&v68, &v69, *(uint64_t (**)(void))(v39 + 16));
    swift_release(v39);
    uint64_t v52 = v67;
    _BYTE *v67 = *(_BYTE *)(v40 + 16);
    swift_release(v40);
    v52[1] = *(_BYTE *)(v41 + 16);
    uint64_t v67 = v52 + 2;
    swift_release(v41);
    sub_100065300((uint64_t *)&v67, (uint64_t)&v68, &v69, *(uint64_t (**)(void))(v43 + 16));
    uint64_t v53 = v0[125];
    uint64_t v54 = v0[105];
    uint64_t v55 = v0[104];
    swift_release(v43);
    _os_log_impl((void *)&_mh_execute_header, oslog, v63, "sending one message %{public}s:%{public}s", v46, 0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);

    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v50(v53, v55);
  }

  else
  {
    uint64_t v64 = v0[125];
    uint64_t v48 = v0[105];
    uint64_t v49 = v0[104];

    swift_release(v43);
    swift_release(v41);
    swift_release(v40);
    swift_release(v39);
    swift_release(v37);
    swift_release(v36);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v50(v64, v49);
  }

  v0[173] = v50;
  uint64_t v56 = v0[98];
  swift_bridgeObjectRetain(v0[92]);
  v0[77] = XPCIncomingConnection.init(conn:)(0x4D656E4F646E6553LL);
  v0[78] = v57;
  v0[79] = v58;
  uint64_t v59 = *(int **)(**(void **)(v56 + 160) + 152LL);
  os_log_t osloga = (os_log_t)((char *)v59 + *v59);
  uint64_t v60 = (void *)swift_task_alloc(v59[1]);
  v0[174] = v60;
  void *v60 = v0;
  v60[1] = sub_10005C2F8;
  return ((uint64_t (*)(void *))osloga)(v0 + 15);
}

uint64_t sub_10005C2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  swift_task_dealloc(*(void *)(*(void *)v3 + 1392LL));
  uint64_t v7 = v6[98];
  if (v2)
  {
    swift_errorRelease(v2);
    uint64_t v8 = sub_100061404;
  }

  else
  {
    v6[175] = a2;
    v6[176] = a1;
    uint64_t v8 = sub_10005C384;
  }

  return swift_task_switch(v8, v7);
}

uint64_t sub_10005C384()
{
  uint64_t v1 = v0[151];
  uint64_t v2 = v0[147];
  uint64_t v3 = dword_100097274;
  swift_bridgeObjectRetain(v0[149]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[177] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10005C43C;
  return sub_1000367A4( (uint64_t)(v0 + 2),  (uint64_t)(v0 + 15),  v0[176],  v0[175],  0x4D656E4F646E6553LL,  0xEE00656761737365LL);
}

uint64_t sub_10005C43C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1416);
  *(void *)(*v1 + 1424) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 784);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v5 = sub_1000660F4;
  }

  else
  {
    uint64_t v5 = sub_10005C4AC;
  }

  return swift_task_switch(v5, v4);
}

uint64_t sub_10005C4AC()
{
  *(void *)(v0 + 248) = &type metadata for AllEventFieldProvider;
  *(void *)(v0 + 256) = &off_10008F918;
  uint64_t v1 = swift_allocObject(&unk_100092848, 120LL, 7LL);
  *(void *)(v0 + 224) = v1;
  uint64_t v2 = (uint64_t *)(v0 + 224);
  __int128 v3 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v1 + 96) = v3;
  *(void *)(v1 + 112) = *(void *)(v0 + 112);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 64) = v5;
  sub_10002B9E4((void *)(v0 + 224));
  sub_10000C2B4((void *)(v0 + 224));
  uint64_t v6 = *(void *)(v0 + 1424);
  uint64_t v7 = *(void *)(v0 + 624);
  *(void *)(v0 + 1432) = *(void *)(v0 + 616);
  *(void *)(v0 + 1440) = v7;
  uint64_t v8 = *(void *)(v0 + 632);
  *(void *)(v0 + 1448) = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  uint64_t v9 = sub_10003D184();
  swift_beginAccess(v9, v0 + 592, 0LL, 0LL);
  uint64_t v10 = *(void *)(v0 + 1256);
  if (*v9 != 1 || (uint64_t v11 = *(void *)(v10 + 16), (*(void *)(v0 + 1456) = v11) == 0LL))
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    *(void *)(v0 + 1528) = v55;
    uint64_t v168 = *(void *)(v0 + 1304);
    if (v168)
    {
      uint64_t v151 = v55;
      uint64_t v164 = v6;
      uint64_t v56 = *(void *)(v0 + 1352);
      uint64_t v57 = *(void *)(v0 + 1344);
      uint64_t v58 = *(void *)(v0 + 1336);
      uint64_t v59 = *(void *)(v0 + 1328);
      uint64_t v154 = *(void *)(v0 + 1312);
      os_log_t oslogb = *(os_log_t *)(v0 + 1376);
      (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 984),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
      uint64_t v60 = swift_allocObject(&unk_100091EE8, 32LL, 7LL);
      *(void *)(v60 + swift_weakDestroy(v0 + 16) = v59;
      *(void *)(v60 + 24) = v58;
      uint64_t v61 = swift_allocObject(&unk_100091F10, 32LL, 7LL);
      *(void *)(v61 + swift_weakDestroy(v0 + 16) = v57;
      *(void *)(v61 + 24) = v56;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v56);
      uint64_t v62 = swift_unknownObjectRetain(v168);
      loga = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v63 = static os_log_type_t.default.getter(loga);
      uint64_t v64 = swift_allocObject(&unk_100091F38, 17LL, 7LL);
      *(_BYTE *)(v64 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v65 = swift_allocObject(&unk_100091F60, 17LL, 7LL);
      *(_BYTE *)(v65 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v66 = swift_allocObject(&unk_100091F88, 32LL, 7LL);
      *(void *)(v66 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v66 + 24) = v60;
      uint64_t v67 = swift_allocObject(&unk_100091FB0, 32LL, 7LL);
      *(void *)(v67 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v67 + 24) = v66;
      uint64_t v68 = swift_allocObject(&unk_100091FD8, 17LL, 7LL);
      *(_BYTE *)(v68 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v69 = swift_allocObject(&unk_100092000, 17LL, 7LL);
      *(_BYTE *)(v69 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v70 = swift_allocObject(&unk_100092028, 32LL, 7LL);
      *(void *)(v70 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v70 + 24) = v61;
      uint64_t v71 = swift_allocObject(&unk_100092050, 32LL, 7LL);
      *(void *)(v71 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v71 + 24) = v70;
      uint64_t v72 = swift_allocObject(oslogb, 128LL, 7LL);
      *(_OWORD *)(v72 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
      *(void *)(v72 + 32) = sub_1000660F8;
      *(void *)(v72 + 40) = v64;
      *(void *)(v72 + 48) = sub_1000660F8;
      *(void *)(v72 + 56) = v65;
      *(void *)(v72 + 64) = sub_100065FE4;
      *(void *)(v72 + 72) = v67;
      *(void *)(v72 + 80) = sub_1000660F8;
      *(void *)(v72 + 88) = v68;
      *(void *)(v72 + 96) = sub_1000660F8;
      *(void *)(v72 + 104) = v69;
      *(void *)(v72 + 112) = sub_100065FE4;
      *(void *)(v72 + 1memset(&strm.total_in, 0, 20) = v71;
      swift_retain(v64);
      swift_retain(v65);
      swift_retain(v67);
      swift_retain(v68);
      swift_retain(v69);
      swift_retain(v71);
      swift_bridgeObjectRelease(v72);
      if (os_log_type_enabled(loga, v63))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = swift_slowAlloc(64LL, -1LL);
        uint64_t v173 = 0LL;
        uint64_t v174 = v74;
        *(_WORD *)uint64_t v73 = 514;
        v73[2] = *(_BYTE *)(v64 + 16);
        if (v164)
        {
          uint64_t v75 = v168;
LABEL_14:
          swift_unknownObjectRelease(v75);
          uint64_t v54 = v164;
          return swift_errorRelease(v54);
        }

        uint64_t v112 = v74;
        swift_release(v64);
        v73[3] = *(_BYTE *)(v65 + 16);
        v172 = v73 + 4;
        swift_release(v65);
        sub_100065300((uint64_t *)&v172, (uint64_t)&v173, &v174, *(uint64_t (**)(void))(v67 + 16));
        swift_release(v67);
        uint64_t v113 = v172;
        _BYTE *v172 = *(_BYTE *)(v68 + 16);
        swift_release(v68);
        v113[1] = *(_BYTE *)(v69 + 16);
        v172 = v113 + 2;
        swift_release(v69);
        sub_100065300((uint64_t *)&v172, (uint64_t)&v173, &v174, *(uint64_t (**)(void))(v71 + 16));
        uint64_t v114 = *(void *)(v0 + 984);
        uint64_t v115 = *(void *)(v0 + 832);
        swift_release(v71);
        _os_log_impl( (void *)&_mh_execute_header,  loga,  v63,  "processing sendOneMessage, immediate %{public}s:%{public}s",  v73,  0x16u);
        swift_arrayDestroy(v112, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);

        uint64_t v99 = v114;
        uint64_t v100 = v115;
      }

      else
      {
        uint64_t v97 = *(void *)(v0 + 984);
        uint64_t v98 = *(void *)(v0 + 832);
        swift_release(v64);
        swift_release(v65);
        swift_release(v67);
        swift_release(v68);
        swift_release(v69);
        swift_release(v71);

        uint64_t v99 = v97;
        uint64_t v100 = v98;
      }

      v151(v99, v100);
      uint64_t v116 = *(void *)(v0 + 1448);
      uint64_t v117 = *(void *)(v0 + 1440);
      uint64_t v118 = *(void *)(v0 + 1432);
      uint64_t ObjectType = swift_getObjectType(v168);
      uint64_t v120 = sub_100009FDC(&qword_100096858);
      uint64_t v121 = swift_allocObject(v120, 56LL, 7LL);
      *(void *)(v0 + 1536) = v121;
      *(_OWORD *)(v121 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
      *(void *)(v121 + 32) = v118;
      *(void *)(v121 + 40) = v117;
      *(void *)(v121 + 48) = v116;
      uint64_t v122 = *(int **)(v154 + 8);
      uint64_t v123 = v122[1];
      char v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v122 + *v122);
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRetain(v116);
      uint64_t v124 = (void *)swift_task_alloc(v123);
      *(void *)(v0 + 1544) = v124;
      void *v124 = v0;
      v124[1] = sub_10005E704;
      return v165(v121, ObjectType, v154);
    }

    uint64_t v76 = *(void *)(v0 + 1256);
    uint64_t v77 = *(void *)(v76 + 16);
    swift_bridgeObjectRelease(v76);
    if (!v77)
    {
      uint64_t v105 = *(void *)(v0 + 1448);
      uint64_t v106 = *(void *)(v0 + 1440);
      uint64_t v107 = *(void *)(v0 + 1352);
      uint64_t v108 = *(void *)(v0 + 1208);
      uint64_t v109 = *(void *)(v0 + 1192);
      uint64_t v110 = *(void *)(v0 + 1176);
      swift_bridgeObjectRelease(*(void *)(v0 + 1336));
      swift_bridgeObjectRelease(v107);
      swift_bridgeObjectRelease(v109);
      swift_bridgeObjectRelease(v110);
      swift_bridgeObjectRelease(v108);
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(v105);
      *(void *)(v0 + 1576) = v6;
      uint64_t v111 = *(void *)(v0 + 1224);
      *(void *)(v0 + 1584) = *(void *)(*(void *)v111 + 256LL);
      return swift_task_switch(sub_10005F6E8, v111);
    }

    uint64_t v164 = v6;
    os_log_t oslogc = *(os_log_t *)(v0 + 1376);
    uint64_t v78 = *(void *)(v0 + 1352);
    uint64_t v79 = *(void *)(v0 + 1344);
    uint64_t v80 = *(void *)(v0 + 1336);
    uint64_t v81 = *(void *)(v0 + 1328);
    (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 968),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
    uint64_t v82 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
    *(void *)(v82 + swift_weakDestroy(v0 + 16) = v81;
    *(void *)(v82 + 24) = v80;
    uint64_t v83 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
    *(void *)(v83 + swift_weakDestroy(v0 + 16) = v79;
    *(void *)(v83 + 24) = v78;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v78);
    logb = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v169 = static os_log_type_t.default.getter(logb);
    uint64_t v85 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
    *(_BYTE *)(v85 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v86 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
    *(_BYTE *)(v86 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v87 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
    *(void *)(v87 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v87 + 24) = v82;
    uint64_t v88 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
    *(void *)(v88 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v88 + 24) = v87;
    uint64_t v89 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
    *(_BYTE *)(v89 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v90 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
    *(_BYTE *)(v90 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v91 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
    *(void *)(v91 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v91 + 24) = v83;
    uint64_t v92 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
    *(void *)(v92 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v92 + 24) = v91;
    uint64_t v93 = swift_allocObject(oslogc, 128LL, 7LL);
    *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
    *(void *)(v93 + 32) = sub_1000660F8;
    *(void *)(v93 + 40) = v85;
    *(void *)(v93 + 48) = sub_1000660F8;
    *(void *)(v93 + 56) = v86;
    *(void *)(v93 + 64) = sub_100065FE4;
    *(void *)(v93 + 72) = v88;
    *(void *)(v93 + 80) = sub_1000660F8;
    *(void *)(v93 + 88) = v89;
    *(void *)(v93 + 96) = sub_1000660F8;
    *(void *)(v93 + 104) = v90;
    *(void *)(v93 + 112) = sub_100065FE4;
    *(void *)(v93 + 1memset(&strm.total_in, 0, 20) = v92;
    swift_retain(v85);
    swift_retain(v86);
    swift_retain(v88);
    swift_retain(v89);
    swift_retain(v90);
    swift_retain(v92);
    swift_bridgeObjectRelease(v93);
    if (os_log_type_enabled(logb, v169))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
      uint64_t v95 = swift_slowAlloc(64LL, -1LL);
      uint64_t v173 = 0LL;
      uint64_t v174 = v95;
      *(_WORD *)uint64_t v94 = 514;
      v94[2] = *(_BYTE *)(v85 + 16);
      if (v164)
      {
        uint64_t v75 = *(void *)(v0 + 1304);
        goto LABEL_14;
      }

      uint64_t v138 = v95;
      swift_release(v85);
      v94[3] = *(_BYTE *)(v86 + 16);
      v172 = v94 + 4;
      swift_release(v86);
      sub_100065300((uint64_t *)&v172, (uint64_t)&v173, &v174, *(uint64_t (**)(void))(v88 + 16));
      swift_release(v88);
      uint64_t v139 = v172;
      _BYTE *v172 = *(_BYTE *)(v89 + 16);
      swift_release(v89);
      v139[1] = *(_BYTE *)(v90 + 16);
      v172 = v139 + 2;
      swift_release(v90);
      sub_100065300((uint64_t *)&v172, (uint64_t)&v173, &v174, *(uint64_t (**)(void))(v92 + 16));
      uint64_t v140 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v141 = *(void *)(v0 + 968);
      uint64_t v142 = *(void *)(v0 + 832);
      swift_release(v92);
      _os_log_impl((void *)&_mh_execute_header, logb, v169, "caching sendOneMessage %{public}s:%{public}s", v94, 0x16u);
      swift_arrayDestroy(v138, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v138, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);

      uint64_t v127 = v140(v141, v142);
    }

    else
    {
      uint64_t v170 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v125 = *(void *)(v0 + 968);
      uint64_t v126 = *(void *)(v0 + 832);
      swift_release(v85);
      swift_release(v86);
      swift_release(v88);
      swift_release(v89);
      swift_release(v90);
      swift_release(v92);

      uint64_t v127 = v170(v125, v126);
    }

    static Date.now.getter(v127);
    os_log_type_t v143 = (void *)swift_task_alloc(dword_100096BEC);
    *(void *)(v0 + 1560) = v143;
    *os_log_type_t v143 = v0;
    v143[1] = sub_10005F0FC;
    return sub_10002091C( v0 + 120,  *(void *)(v0 + 1056),  *(double *)(v0 + 1216),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
  }

  uint64_t v12 = *(void *)(v0 + 808);
  uint64_t v13 = *(void *)(v0 + 800);
  LODWORD(v14) = *(_DWORD *)(v13 + 80);
  *(_DWORD *)(v0 + 1640) = v14;
  uint64_t v14 = v14;
  uint64_t v163 = v6;
  uint64_t v166 = (v14 + 16) & ~v14;
  *(void *)(v0 + 1464) = *(void *)(v13 + 72);
  *(void *)(v0 + 1480) = 0LL;
  *(void *)(v0 + 1472) = v6;
  uint64_t v149 = *(void *)(v0 + 1376);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
  uint64_t v16 = *(void *)(v0 + 1360);
  uint64_t v152 = *(void *)(v0 + 1352);
  uint64_t v147 = *(void *)(v0 + 1344);
  uint64_t v17 = *(void *)(v0 + 1336);
  uint64_t v18 = *(void *)(v0 + 1328);
  uint64_t v19 = *(void *)(v0 + 992);
  uint64_t v20 = *(void *)(v0 + 832);
  uint64_t v21 = *(void *)(v0 + 824);
  uint64_t v22 = *(void *)(v0 + 816);
  os_log_t logc = (os_log_t)(v166 + v12);
  os_log_t osloga = (os_log_t)(v14 | 7LL);
  sub_100030114(v10 + ((v14 + 32) & ~v14), v21, type metadata accessor for SessionConfiguration.Backend);
  v15(v19, v16, v20);
  uint64_t v23 = swift_allocObject(&unk_1000922D0, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(v23 + 24) = v17;
  uint64_t v24 = swift_allocObject(&unk_1000922F8, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v147;
  *(void *)(v24 + 24) = v152;
  sub_100030114(v21, v22, type metadata accessor for SessionConfiguration.Backend);
  uint64_t v25 = swift_allocObject(&unk_100092320, logc, osloga);
  sub_100049B9C(v22, v25 + v166, type metadata accessor for SessionConfiguration.Backend);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v152);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v153 = static os_log_type_t.default.getter(oslog);
  uint64_t v167 = swift_allocObject(&unk_100092348, 17LL, 7LL);
  *(_BYTE *)(v167 + swift_weakDestroy(v0 + 16) = 34;
  os_log_t log = (os_log_t)swift_allocObject(&unk_100092370, 17LL, 7LL);
  *((_BYTE *)log + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v27 = swift_allocObject(&unk_100092398, 32LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v27 + 24) = v23;
  uint64_t v28 = swift_allocObject(&unk_1000923C0, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v28 + 24) = v27;
  uint64_t v29 = swift_allocObject(&unk_1000923E8, 17LL, 7LL);
  *(_BYTE *)(v29 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v30 = v29;
  uint64_t v148 = swift_allocObject(&unk_100092410, 17LL, 7LL);
  *(_BYTE *)(v148 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v31 = swift_allocObject(&unk_100092438, 32LL, 7LL);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v31 + 24) = v24;
  uint64_t v32 = swift_allocObject(&unk_100092460, 32LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v32 + 24) = v31;
  uint64_t v33 = swift_allocObject(&unk_100092488, 17LL, 7LL);
  *(_BYTE *)(v33 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v34 = v33;
  uint64_t v35 = swift_allocObject(&unk_1000924B0, 17LL, 7LL);
  *(_BYTE *)(v35 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v36 = swift_allocObject(&unk_1000924D8, 32LL, 7LL);
  *(void *)(v36 + swift_weakDestroy(v0 + 16) = sub_100065B64;
  *(void *)(v36 + 24) = v25;
  uint64_t v37 = swift_allocObject(&unk_100092500, 32LL, 7LL);
  *(void *)(v37 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v37 + 24) = v36;
  uint64_t v38 = swift_allocObject(v149, 176LL, 7LL);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1000790E0;
  *(void *)(v38 + 32) = sub_1000660F8;
  *(void *)(v38 + 40) = v167;
  *(void *)(v38 + 48) = sub_1000660F8;
  *(void *)(v38 + 56) = log;
  *(void *)(v38 + 64) = sub_100065FE4;
  *(void *)(v38 + 72) = v28;
  *(void *)(v38 + 80) = sub_1000660F8;
  *(void *)(v38 + 88) = v30;
  *(void *)(v38 + 96) = sub_1000660F8;
  *(void *)(v38 + 104) = v148;
  *(void *)(v38 + 112) = sub_100065FE4;
  *(void *)(v38 + 1memset(&strm.total_in, 0, 20) = v32;
  *(void *)(v38 + 128) = sub_1000660F8;
  uint64_t v39 = v34;
  *(void *)(v38 + 136) = v34;
  *(void *)(v38 + 144) = sub_1000660F8;
  *(void *)(v38 + 152) = v35;
  *(void *)(v38 + 160) = sub_100065FE4;
  *(void *)(v38 + 168) = v37;
  uint64_t v40 = v28;
  uint64_t v150 = (void *)v0;
  uint64_t v41 = v32;
  uint64_t v42 = v39;
  swift_retain(v167);
  swift_retain(log);
  swift_retain(v28);
  uint64_t v145 = v30;
  uint64_t v43 = v42;
  uint64_t v44 = v41;
  swift_retain(v30);
  swift_retain(v148);
  swift_retain(v41);
  swift_retain(v43);
  swift_retain(v35);
  uint64_t v146 = v37;
  swift_retain(v37);
  swift_bridgeObjectRelease(v38);
  if (os_log_type_enabled(oslog, v153))
  {
    uint64_t v45 = v150;
    uint64_t v46 = v40;
    uint64_t v144 = v43;
    uint64_t v47 = v2 + 61;
    uint64_t v48 = v2 + 62;
    uint64_t v49 = v2 + 63;
    uint64_t v50 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
    uint64_t v51 = swift_slowAlloc(96LL, -1LL);
    *uint64_t v48 = 0LL;
    uint64_t v52 = v49;
    *uint64_t v49 = v51;
    *(_WORD *)uint64_t v50 = 770;
    uint64_t v54 = v163;
    uint64_t v53 = v167;
    id v50[2] = *(_BYTE *)(v167 + 16);
    *uint64_t v47 = (uint64_t)(v50 + 3);
    if (v163)
    {
      swift_unknownObjectRelease(v150[163]);
      return swift_errorRelease(v54);
    }

    uint64_t v171 = v51;
    swift_release(v53);
    int v128 = (_BYTE *)v150[89];
    _BYTE *v128 = *((_BYTE *)log + 16);
    v150[89] = v128 + 1;
    swift_release(log);
    sub_100065300(v47, (uint64_t)v48, v52, *(uint64_t (**)(void))(v46 + 16));
    swift_release(v46);
    uint64_t v129 = (_BYTE *)v150[89];
    *uint64_t v129 = *(_BYTE *)(v145 + 16);
    v150[89] = v129 + 1;
    swift_release(v145);
    uint64_t v130 = (_BYTE *)v150[89];
    *uint64_t v130 = *(_BYTE *)(v148 + 16);
    v150[89] = v130 + 1;
    swift_release(v148);
    sub_100065300(v47, (uint64_t)v48, v52, *(uint64_t (**)(void))(v44 + 16));
    swift_release(v44);
    uint64_t v131 = (_BYTE *)v150[89];
    *uint64_t v131 = *(_BYTE *)(v144 + 16);
    v150[89] = v131 + 1;
    swift_release(v144);
    uint64_t v132 = (_BYTE *)v150[89];
    _BYTE *v132 = *(_BYTE *)(v35 + 16);
    v150[89] = v132 + 1;
    swift_release(v35);
    sub_100065300(v47, (uint64_t)v48, v52, *(uint64_t (**)(void))(v146 + 16));
    uint64_t v133 = v150[124];
    uint64_t v134 = v150[105];
    uint64_t v135 = v150[104];
    swift_release(v146);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v153,  "writing sendOneMessage to transparency log %{public}s:%{public}s for backend %{public}s",  v50,  0x20u);
    swift_arrayDestroy(v171, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v171, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);

    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
    v104(v133, v135);
  }

  else
  {
    uint64_t v45 = v150;
    uint64_t v101 = v150[124];
    uint64_t v102 = v150[105];
    uint64_t v103 = v150[104];
    swift_release(v167);
    swift_release(log);
    swift_release(v40);
    swift_release(v30);
    swift_release(v148);
    swift_release(v44);
    swift_release(v43);
    swift_release(v35);
    swift_release(v146);

    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    v104(v101, v103);
  }

  v45[186] = v104;
  uint64_t v136 = *(void *)(v45[98] + 168LL);
  v45[187] = v136;
  v45[188] = sub_100066104();
  v45[189] = v137;
  return swift_task_switch(sub_10005D5F8, v136);
}

uint64_t sub_10005D5F8()
{
  uint64_t v1 = *(void *)(v0 + 1472);
  sub_100008BD4( *(void *)(v0 + 1504),  *(void **)(v0 + 1512),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
  *(void *)(v0 + 15memset(&strm.total_in, 0, 20) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 784);
    __int128 v3 = sub_10006244C;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 784);
    swift_bridgeObjectRelease(*(void *)(v0 + 1512));
    __int128 v3 = sub_10005D678;
    uint64_t v2 = v4;
  }

  return swift_task_switch(v3, v2);
}

uint64_t sub_10005D678()
{
  uint64_t v1 = *(void *)(v0 + 1520);
  uint64_t v2 = *(void *)(v0 + 1480) + 1LL;
  uint64_t v140 = v1;
  if (v2 == *(void *)(v0 + 1456))
  {
    __int128 v3 = *(void (**)(uint64_t, uint64_t))(v0 + 1488);
    swift_bridgeObjectRelease(*(void *)(v0 + 1256));
    *(void *)(v0 + 1528) = v3;
    uint64_t v136 = *(void *)(v0 + 1304);
    if (v136)
    {
      uint64_t v122 = v3;
      uint64_t v4 = *(void *)(v0 + 1352);
      uint64_t v5 = *(void *)(v0 + 1344);
      uint64_t v6 = *(void *)(v0 + 1336);
      uint64_t v7 = *(void *)(v0 + 1328);
      uint64_t v125 = *(void *)(v0 + 1312);
      uint64_t v128 = *(void *)(v0 + 1376);
      (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 984),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
      uint64_t v8 = swift_allocObject(&unk_100091EE8, 32LL, 7LL);
      *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
      *(void *)(v8 + 24) = v6;
      uint64_t v9 = swift_allocObject(&unk_100091F10, 32LL, 7LL);
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
      *(void *)(v9 + 24) = v4;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v4);
      uint64_t v10 = swift_unknownObjectRetain(v136);
      osos_log_t log = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v11 = static os_log_type_t.default.getter(oslog);
      uint64_t v12 = swift_allocObject(&unk_100091F38, 17LL, 7LL);
      *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v13 = swift_allocObject(&unk_100091F60, 17LL, 7LL);
      *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v14 = swift_allocObject(&unk_100091F88, 32LL, 7LL);
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v14 + 24) = v8;
      uint64_t v15 = swift_allocObject(&unk_100091FB0, 32LL, 7LL);
      *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v15 + 24) = v14;
      uint64_t v16 = swift_allocObject(&unk_100091FD8, 17LL, 7LL);
      *(_BYTE *)(v16 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v17 = swift_allocObject(&unk_100092000, 17LL, 7LL);
      *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v18 = swift_allocObject(&unk_100092028, 32LL, 7LL);
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v18 + 24) = v9;
      uint64_t v19 = swift_allocObject(&unk_100092050, 32LL, 7LL);
      *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v19 + 24) = v18;
      uint64_t v20 = swift_allocObject(v128, 128LL, 7LL);
      *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
      *(void *)(v20 + 32) = sub_1000660F8;
      *(void *)(v20 + 40) = v12;
      *(void *)(v20 + 48) = sub_1000660F8;
      *(void *)(v20 + 56) = v13;
      *(void *)(v20 + 64) = sub_100065FE4;
      *(void *)(v20 + 72) = v15;
      *(void *)(v20 + 80) = sub_1000660F8;
      *(void *)(v20 + 88) = v16;
      *(void *)(v20 + 96) = sub_1000660F8;
      *(void *)(v20 + 104) = v17;
      *(void *)(v20 + 112) = sub_100065FE4;
      *(void *)(v20 + 1memset(&strm.total_in, 0, 20) = v19;
      swift_retain(v12);
      swift_retain(v13);
      swift_retain(v15);
      swift_retain(v16);
      swift_retain(v17);
      swift_retain(v19);
      swift_bridgeObjectRelease(v20);
      if (os_log_type_enabled(oslog, v11))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
        uint64_t v22 = swift_slowAlloc(64LL, -1LL);
        uint64_t v145 = 0LL;
        uint64_t v146 = v22;
        *(_WORD *)uint64_t v21 = 514;
        v21[2] = *(_BYTE *)(v12 + 16);
        if (v140)
        {
          uint64_t v23 = v136;
LABEL_14:
          swift_unknownObjectRelease(v23);
          uint64_t v53 = v140;
          return swift_errorRelease(v53);
        }

        uint64_t v100 = v22;
        swift_release(v12);
        v21[3] = *(_BYTE *)(v13 + 16);
        uint64_t v144 = v21 + 4;
        swift_release(v13);
        sub_100065300((uint64_t *)&v144, (uint64_t)&v145, &v146, *(uint64_t (**)(void))(v15 + 16));
        swift_release(v15);
        uint64_t v101 = v144;
        _BYTE *v144 = *(_BYTE *)(v16 + 16);
        swift_release(v16);
        v101[1] = *(_BYTE *)(v17 + 16);
        uint64_t v144 = v101 + 2;
        swift_release(v17);
        sub_100065300((uint64_t *)&v144, (uint64_t)&v145, &v146, *(uint64_t (**)(void))(v19 + 16));
        uint64_t v102 = *(void *)(v0 + 984);
        uint64_t v103 = *(void *)(v0 + 832);
        swift_release(v19);
        _os_log_impl( (void *)&_mh_execute_header,  oslog,  v11,  "processing sendOneMessage, immediate %{public}s:%{public}s",  v21,  0x16u);
        swift_arrayDestroy(v100, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);

        uint64_t v81 = v102;
        uint64_t v82 = v103;
      }

      else
      {
        uint64_t v79 = *(void *)(v0 + 984);
        uint64_t v80 = *(void *)(v0 + 832);
        swift_release(v12);
        swift_release(v13);
        swift_release(v15);
        swift_release(v16);
        swift_release(v17);
        swift_release(v19);

        uint64_t v81 = v79;
        uint64_t v82 = v80;
      }

      v122(v81, v82);
      uint64_t v104 = *(void *)(v0 + 1448);
      uint64_t v105 = *(void *)(v0 + 1440);
      uint64_t v106 = *(void *)(v0 + 1432);
      uint64_t ObjectType = swift_getObjectType(v136);
      uint64_t v108 = sub_100009FDC(&qword_100096858);
      uint64_t v109 = swift_allocObject(v108, 56LL, 7LL);
      *(void *)(v0 + 1536) = v109;
      *(_OWORD *)(v109 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
      *(void *)(v109 + 32) = v106;
      *(void *)(v109 + 40) = v105;
      *(void *)(v109 + 48) = v104;
      uint64_t v110 = *(int **)(v125 + 8);
      uint64_t v111 = v110[1];
      uint64_t v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v110 + *v110);
      swift_bridgeObjectRetain(v105);
      swift_bridgeObjectRetain(v104);
      uint64_t v112 = (void *)swift_task_alloc(v111);
      *(void *)(v0 + 1544) = v112;
      *uint64_t v112 = v0;
      v112[1] = sub_10005E704;
      return v142(v109, ObjectType, v125);
    }

    else
    {
      uint64_t v58 = *(void *)(v0 + 1256);
      uint64_t v59 = *(void *)(v58 + 16);
      swift_bridgeObjectRelease(v58);
      if (v59)
      {
        uint64_t v131 = *(void *)(v0 + 1376);
        uint64_t v60 = *(void *)(v0 + 1352);
        uint64_t v61 = *(void *)(v0 + 1344);
        uint64_t v62 = *(void *)(v0 + 1336);
        uint64_t v63 = *(void *)(v0 + 1328);
        (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 968),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
        uint64_t v64 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
        *(void *)(v64 + swift_weakDestroy(v0 + 16) = v63;
        *(void *)(v64 + 24) = v62;
        uint64_t v65 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
        *(void *)(v65 + swift_weakDestroy(v0 + 16) = v61;
        *(void *)(v65 + 24) = v60;
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v60);
        os_log_t oslogb = (os_log_s *)Logger.logObject.getter(v66);
        os_log_type_t v139 = static os_log_type_t.default.getter(oslogb);
        uint64_t v67 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
        *(_BYTE *)(v67 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v68 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
        *(_BYTE *)(v68 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v69 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
        *(void *)(v69 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v69 + 24) = v64;
        uint64_t v70 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
        *(void *)(v70 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v70 + 24) = v69;
        uint64_t v71 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
        *(_BYTE *)(v71 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v72 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
        *(_BYTE *)(v72 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v73 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
        *(void *)(v73 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v73 + 24) = v65;
        uint64_t v74 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
        *(void *)(v74 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v74 + 24) = v73;
        uint64_t v75 = swift_allocObject(v131, 128LL, 7LL);
        *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
        *(void *)(v75 + 32) = sub_1000660F8;
        *(void *)(v75 + 40) = v67;
        *(void *)(v75 + 48) = sub_1000660F8;
        *(void *)(v75 + 56) = v68;
        *(void *)(v75 + 64) = sub_100065FE4;
        *(void *)(v75 + 72) = v70;
        *(void *)(v75 + 80) = sub_1000660F8;
        *(void *)(v75 + 88) = v71;
        *(void *)(v75 + 96) = sub_1000660F8;
        *(void *)(v75 + 104) = v72;
        *(void *)(v75 + 112) = sub_100065FE4;
        *(void *)(v75 + 1memset(&strm.total_in, 0, 20) = v74;
        swift_retain(v67);
        swift_retain(v68);
        swift_retain(v70);
        swift_retain(v71);
        swift_retain(v72);
        swift_retain(v74);
        swift_bridgeObjectRelease(v75);
        if (os_log_type_enabled(oslogb, v139))
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
          uint64_t v77 = swift_slowAlloc(64LL, -1LL);
          uint64_t v145 = 0LL;
          uint64_t v146 = v77;
          *(_WORD *)uint64_t v76 = 514;
          v76[2] = *(_BYTE *)(v67 + 16);
          if (v140)
          {
            uint64_t v23 = *(void *)(v0 + 1304);
            goto LABEL_14;
          }

          uint64_t v116 = v77;
          swift_release(v67);
          v76[3] = *(_BYTE *)(v68 + 16);
          uint64_t v144 = v76 + 4;
          swift_release(v68);
          sub_100065300((uint64_t *)&v144, (uint64_t)&v145, &v146, *(uint64_t (**)(void))(v70 + 16));
          swift_release(v70);
          uint64_t v117 = v144;
          _BYTE *v144 = *(_BYTE *)(v71 + 16);
          swift_release(v71);
          v117[1] = *(_BYTE *)(v72 + 16);
          uint64_t v144 = v117 + 2;
          swift_release(v72);
          sub_100065300((uint64_t *)&v144, (uint64_t)&v145, &v146, *(uint64_t (**)(void))(v74 + 16));
          uint64_t v118 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
          uint64_t v119 = *(void *)(v0 + 968);
          uint64_t v120 = *(void *)(v0 + 832);
          swift_release(v74);
          _os_log_impl( (void *)&_mh_execute_header,  oslogb,  v139,  "caching sendOneMessage %{public}s:%{public}s",  v76,  0x16u);
          swift_arrayDestroy(v116, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v116, -1LL, -1LL);
          swift_slowDealloc(v76, -1LL, -1LL);

          uint64_t v115 = v118(v119, v120);
        }

        else
        {
          os_log_type_t v143 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
          uint64_t v113 = *(void *)(v0 + 968);
          uint64_t v114 = *(void *)(v0 + 832);
          swift_release(v67);
          swift_release(v68);
          swift_release(v70);
          swift_release(v71);
          swift_release(v72);
          swift_release(v74);

          uint64_t v115 = v143(v113, v114);
        }

        static Date.now.getter(v115);
        uint64_t v121 = (void *)swift_task_alloc(dword_100096BEC);
        *(void *)(v0 + 1560) = v121;
        *uint64_t v121 = v0;
        v121[1] = sub_10005F0FC;
        return sub_10002091C( v0 + 120,  *(void *)(v0 + 1056),  *(double *)(v0 + 1216),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
      }

      else
      {
        uint64_t v93 = *(void *)(v0 + 1448);
        uint64_t v94 = *(void *)(v0 + 1440);
        uint64_t v95 = *(void *)(v0 + 1352);
        uint64_t v96 = *(void *)(v0 + 1208);
        uint64_t v97 = *(void *)(v0 + 1192);
        uint64_t v98 = *(void *)(v0 + 1176);
        swift_bridgeObjectRelease(*(void *)(v0 + 1336));
        swift_bridgeObjectRelease(v95);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v94);
        swift_bridgeObjectRelease(v93);
        *(void *)(v0 + 1576) = v1;
        uint64_t v99 = *(void *)(v0 + 1224);
        *(void *)(v0 + 1584) = *(void *)(*(void *)v99 + 256LL);
        return swift_task_switch(sub_10005F6E8, v99);
      }
    }
  }

  else
  {
    *(void *)(v0 + 1480) = v2;
    *(void *)(v0 + 1472) = v1;
    uint64_t v24 = *(unsigned __int8 *)(v0 + 1640);
    uint64_t v126 = *(void *)(v0 + 1376);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
    uint64_t v26 = *(void *)(v0 + 1360);
    uint64_t v137 = *(void *)(v0 + 1352);
    os_log_t oslogc = *(os_log_t *)(v0 + 1344);
    uint64_t v27 = *(void *)(v0 + 1336);
    uint64_t v28 = *(void *)(v0 + 1328);
    uint64_t v29 = *(void *)(v0 + 992);
    uint64_t v30 = (v24 + 16) & ~v24;
    uint64_t v129 = *(void *)(v0 + 808) + v30;
    uint64_t v31 = *(void *)(v0 + 832);
    uint64_t v32 = *(void *)(v0 + 824);
    uint64_t v123 = v24 | 7;
    uint64_t v33 = *(void *)(v0 + 816);
    sub_100030114( *(void *)(v0 + 1256) + ((v24 + 32) & ~v24) + *(void *)(v0 + 1464) * v2,  v32,  type metadata accessor for SessionConfiguration.Backend);
    v25(v29, v26, v31);
    uint64_t v34 = swift_allocObject(&unk_1000922D0, 32LL, 7LL);
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = v28;
    *(void *)(v34 + 24) = v27;
    uint64_t v35 = swift_allocObject(&unk_1000922F8, 32LL, 7LL);
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = oslogc;
    *(void *)(v35 + 24) = v137;
    sub_100030114(v32, v33, type metadata accessor for SessionConfiguration.Backend);
    uint64_t v36 = swift_allocObject(&unk_100092320, v129, v123);
    sub_100049B9C(v33, v36 + v30, type metadata accessor for SessionConfiguration.Backend);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v137);
    os_log_t osloga = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v130 = static os_log_type_t.default.getter(osloga);
    uint64_t v138 = swift_allocObject(&unk_100092348, 17LL, 7LL);
    *(_BYTE *)(v138 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v38 = swift_allocObject(&unk_100092370, 17LL, 7LL);
    *(_BYTE *)(v38 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v39 = swift_allocObject(&unk_100092398, 32LL, 7LL);
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v39 + 24) = v34;
    uint64_t v40 = swift_allocObject(&unk_1000923C0, 32LL, 7LL);
    *(void *)(v40 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v40 + 24) = v39;
    uint64_t v41 = swift_allocObject(&unk_1000923E8, 17LL, 7LL);
    *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v42 = swift_allocObject(&unk_100092410, 17LL, 7LL);
    *(_BYTE *)(v42 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v43 = swift_allocObject(&unk_100092438, 32LL, 7LL);
    *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v43 + 24) = v35;
    uint64_t v44 = swift_allocObject(&unk_100092460, 32LL, 7LL);
    *(void *)(v44 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v44 + 24) = v43;
    uint64_t v45 = swift_allocObject(&unk_100092488, 17LL, 7LL);
    *(_BYTE *)(v45 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v46 = swift_allocObject(&unk_1000924B0, 17LL, 7LL);
    *(_BYTE *)(v46 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v47 = swift_allocObject(&unk_1000924D8, 32LL, 7LL);
    *(void *)(v47 + swift_weakDestroy(v0 + 16) = sub_100065B64;
    *(void *)(v47 + 24) = v36;
    uint64_t v48 = swift_allocObject(&unk_100092500, 32LL, 7LL);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v48 + 24) = v47;
    uint64_t v49 = swift_allocObject(v126, 176LL, 7LL);
    *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = xmmword_1000790E0;
    *(void *)(v49 + 32) = sub_1000660F8;
    *(void *)(v49 + 40) = v138;
    *(void *)(v49 + 48) = sub_1000660F8;
    *(void *)(v49 + 56) = v38;
    *(void *)(v49 + 64) = sub_100065FE4;
    *(void *)(v49 + 72) = v40;
    *(void *)(v49 + 80) = sub_1000660F8;
    *(void *)(v49 + 88) = v41;
    *(void *)(v49 + 96) = sub_1000660F8;
    *(void *)(v49 + 104) = v42;
    *(void *)(v49 + 112) = sub_100065FE4;
    *(void *)(v49 + 1memset(&strm.total_in, 0, 20) = v44;
    *(void *)(v49 + 128) = sub_1000660F8;
    *(void *)(v49 + 136) = v45;
    *(void *)(v49 + 144) = sub_1000660F8;
    *(void *)(v49 + 152) = v46;
    *(void *)(v49 + 160) = sub_100065FE4;
    *(void *)(v49 + 168) = v48;
    swift_retain(v138);
    uint64_t v127 = v38;
    swift_retain(v38);
    swift_retain(v40);
    swift_retain(v41);
    uint64_t v50 = v42;
    swift_retain(v42);
    swift_retain(v44);
    swift_retain(v45);
    swift_retain(v46);
    uint64_t v124 = v48;
    swift_retain(v48);
    swift_bridgeObjectRelease(v49);
    if (os_log_type_enabled(osloga, v130))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = swift_slowAlloc(96LL, -1LL);
      *(void *)(v0 + 7memset(&strm.total_in, 0, 20) = 0LL;
      *(void *)(v0 + 728) = v52;
      *(_WORD *)uint64_t v51 = 770;
      uint64_t v53 = v140;
      v51[2] = *(_BYTE *)(v138 + 16);
      *(void *)(v0 + 712) = v51 + 3;
      if (v140)
      {
        swift_unknownObjectRelease(*(void *)(v0 + 1304));
        return swift_errorRelease(v53);
      }

      uint64_t v141 = v52;
      swift_release(v138);
      uint64_t v83 = *(_BYTE **)(v0 + 712);
      _BYTE *v83 = *(_BYTE *)(v127 + 16);
      *(void *)(v0 + 712) = v83 + 1;
      swift_release(v127);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v40 + 16));
      swift_release(v40);
      uint64_t v84 = *(_BYTE **)(v0 + 712);
      _BYTE *v84 = *(_BYTE *)(v41 + 16);
      *(void *)(v0 + 712) = v84 + 1;
      swift_release(v41);
      uint64_t v85 = *(_BYTE **)(v0 + 712);
      *uint64_t v85 = *(_BYTE *)(v50 + 16);
      *(void *)(v0 + 712) = v85 + 1;
      swift_release(v50);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v44 + 16));
      swift_release(v44);
      uint64_t v86 = *(_BYTE **)(v0 + 712);
      *uint64_t v86 = *(_BYTE *)(v45 + 16);
      *(void *)(v0 + 712) = v86 + 1;
      swift_release(v45);
      uint64_t v87 = *(_BYTE **)(v0 + 712);
      _BYTE *v87 = *(_BYTE *)(v46 + 16);
      *(void *)(v0 + 712) = v87 + 1;
      swift_release(v46);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v48 + 16));
      uint64_t v88 = *(void *)(v0 + 992);
      uint64_t v89 = *(void *)(v0 + 840);
      uint64_t v90 = *(void *)(v0 + 832);
      swift_release(v48);
      _os_log_impl( (void *)&_mh_execute_header,  osloga,  v130,  "writing sendOneMessage to transparency log %{public}s:%{public}s for backend %{public}s",  v51,  0x20u);
      swift_arrayDestroy(v141, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);

      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v57(v88, v90);
    }

    else
    {
      uint64_t v54 = *(void *)(v0 + 992);
      uint64_t v55 = *(void *)(v0 + 840);
      uint64_t v56 = *(void *)(v0 + 832);
      swift_release(v138);
      swift_release(v127);
      swift_release(v40);
      swift_release(v41);
      swift_release(v50);
      swift_release(v44);
      swift_release(v45);
      swift_release(v46);
      swift_release(v124);

      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v57(v54, v56);
    }

    *(void *)(v0 + 1488) = v57;
    uint64_t v91 = *(void *)(*(void *)(v0 + 784) + 168LL);
    *(void *)(v0 + 1496) = v91;
    *(void *)(v0 + 1504) = sub_100066104();
    *(void *)(v0 + 1512) = v92;
    return swift_task_switch(sub_10005D5F8, v91);
  }

uint64_t sub_10005E704()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1544);
  *(void *)(*v1 + 1552) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 784);
    uint64_t v5 = sub_100063BE4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 784);
    swift_bridgeObjectRelease(*(void *)(v2 + 1536));
    uint64_t v5 = sub_10005E778;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4);
}

uint64_t sub_10005E778()
{
  uint64_t v78 = *(void *)(v0 + 1376);
  uint64_t v1 = *(void *)(v0 + 1352);
  uint64_t v2 = *(void *)(v0 + 1344);
  uint64_t v3 = *(void *)(v0 + 1336);
  uint64_t v4 = *(void *)(v0 + 1328);
  (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 976),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
  uint64_t v5 = swift_allocObject(&unk_100092140, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject(&unk_100092168, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v6 + 24) = v1;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  osos_log_t log = (os_log_t)Logger.logObject.getter(v7);
  os_log_type_t v8 = static os_log_type_t.default.getter(oslog);
  uint64_t v9 = swift_allocObject(&unk_100092190, 17LL, 7LL);
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v10 = swift_allocObject(&unk_1000921B8, 17LL, 7LL);
  *(_BYTE *)(v10 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v11 = swift_allocObject(&unk_1000921E0, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v11 + 24) = v5;
  uint64_t v12 = swift_allocObject(&unk_100092208, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = swift_allocObject(&unk_100092230, 17LL, 7LL);
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v14 = swift_allocObject(&unk_100092258, 17LL, 7LL);
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v15 = swift_allocObject(&unk_100092280, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v15 + 24) = v6;
  uint64_t v16 = swift_allocObject(&unk_1000922A8, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = swift_allocObject(v78, 128LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v17 + 32) = sub_1000660F8;
  *(void *)(v17 + 40) = v9;
  *(void *)(v17 + 48) = sub_1000660F8;
  *(void *)(v17 + 56) = v10;
  *(void *)(v17 + 64) = sub_100065FE4;
  *(void *)(v17 + 72) = v12;
  *(void *)(v17 + 80) = sub_1000660F8;
  *(void *)(v17 + 88) = v13;
  *(void *)(v17 + 96) = sub_1000660F8;
  *(void *)(v17 + 104) = v14;
  *(void *)(v17 + 112) = sub_100065FE4;
  *(void *)(v17 + 1memset(&strm.total_in, 0, 20) = v16;
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v16);
  swift_bridgeObjectRelease(v17);
  if (!os_log_type_enabled(oslog, v8))
  {
    uint64_t v24 = *(void *)(v0 + 1304);
    uint64_t v73 = *(void *)(v0 + 976);
    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v25 = *(void *)(v0 + 832);
    swift_release(v9);
    swift_release(v10);
    swift_release(v12);
    swift_release(v13);
    swift_release(v14);
    swift_release(v16);

    swift_unknownObjectRelease(v24);
    v76(v73, v25);
    goto LABEL_6;
  }

  uint64_t v75 = v13;
  uint64_t v18 = *(void *)(v0 + 1552);
  uint64_t v19 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
  uint64_t v20 = swift_slowAlloc(64LL, -1LL);
  uint64_t v83 = 0LL;
  uint64_t v84 = v20;
  *(_WORD *)uint64_t v19 = 514;
  v19[2] = *(_BYTE *)(v9 + 16);
  uint64_t v21 = *(void *)(v0 + 1552);
  if (!v18)
  {
    uint64_t v22 = v20;
    swift_release(v9);
    void v19[3] = *(_BYTE *)(v10 + 16);
    uint64_t v82 = v19 + 4;
    uint64_t v23 = *(void *)(v0 + 1552);
    if (v21)
    {
      uint64_t v21 = *(void *)(v0 + 1552);
      goto LABEL_20;
    }

    swift_release(v10);
    sub_100065300((uint64_t *)&v82, (uint64_t)&v83, &v84, *(uint64_t (**)(void))(v12 + 16));
    uint64_t v64 = *(void *)(v0 + 1552);
    if (v23)
    {
      uint64_t v21 = *(void *)(v0 + 1552);
      goto LABEL_20;
    }

    swift_release(v12);
    uint64_t v65 = v82;
    _BYTE *v82 = *(_BYTE *)(v75 + 16);
    uint64_t v21 = *(void *)(v0 + 1552);
    if (v64) {
      goto LABEL_20;
    }
    swift_release(v75);
    uint64_t v66 = v14;
    v65[1] = *(_BYTE *)(v14 + 16);
    uint64_t v82 = v65 + 2;
    uint64_t v67 = *(void *)(v0 + 1552);
    if (v21)
    {
      uint64_t v21 = *(void *)(v0 + 1552);
      goto LABEL_20;
    }

    swift_release(v66);
    sub_100065300((uint64_t *)&v82, (uint64_t)&v83, &v84, *(uint64_t (**)(void))(v16 + 16));
    if (v67)
    {
      uint64_t v21 = *(void *)(v0 + 1552);
      goto LABEL_20;
    }

    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v69 = *(void *)(v0 + 1304);
    uint64_t v70 = *(void *)(v0 + 976);
    uint64_t v71 = *(void *)(v0 + 832);
    swift_release(v16);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v8,  "processed sendOneMessage, immediate %{public}s:%{public}s",  v19,  0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    swift_unknownObjectRelease(v69);
    v68(v70, v71);
LABEL_6:
    uint64_t v26 = *(void *)(v0 + 1552);
    uint64_t v27 = *(void *)(v0 + 1256);
    uint64_t v28 = *(void *)(v27 + 16);
    swift_bridgeObjectRelease(v27);
    uint64_t v29 = *(void *)(v0 + 1336);
    if (!v28)
    {
      uint64_t v53 = *(void *)(v0 + 1448);
      uint64_t v54 = *(void *)(v0 + 1440);
      uint64_t v55 = *(void *)(v0 + 1352);
      uint64_t v56 = *(void *)(v0 + 1208);
      uint64_t v57 = *(void *)(v0 + 1192);
      uint64_t v58 = *(void *)(v0 + 1176);
      swift_bridgeObjectRelease(*(void *)(v0 + 1336));
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v53);
      *(void *)(v0 + 1576) = v26;
      uint64_t v59 = *(void *)(v0 + 1224);
      *(void *)(v0 + 1584) = *(void *)(*(void *)v59 + 256LL);
      return swift_task_switch(sub_10005F6E8, v59);
    }

    uint64_t v72 = v26;
    uint64_t v74 = *(void *)(v0 + 1376);
    uint64_t v30 = *(void *)(v0 + 1352);
    uint64_t v31 = *(void *)(v0 + 1344);
    uint64_t v32 = *(void *)(v0 + 1328);
    (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 968),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
    uint64_t v33 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v32;
    *(void *)(v33 + 24) = v29;
    uint64_t v34 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v34 + 24) = v30;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    os_log_t osloga = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v77 = static os_log_type_t.default.getter(osloga);
    uint64_t v36 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
    *(_BYTE *)(v36 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v37 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
    *(_BYTE *)(v37 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v38 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v38 + 24) = v33;
    uint64_t v39 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v39 + 24) = v38;
    uint64_t v40 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
    *(_BYTE *)(v40 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v41 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
    *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v42 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v42 + 24) = v34;
    uint64_t v43 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
    *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v43 + 24) = v42;
    uint64_t v44 = swift_allocObject(v74, 128LL, 7LL);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
    *(void *)(v44 + 32) = sub_1000660F8;
    *(void *)(v44 + 40) = v36;
    *(void *)(v44 + 48) = sub_1000660F8;
    *(void *)(v44 + 56) = v37;
    *(void *)(v44 + 64) = sub_100065FE4;
    *(void *)(v44 + 72) = v39;
    *(void *)(v44 + 80) = sub_1000660F8;
    *(void *)(v44 + 88) = v40;
    *(void *)(v44 + 96) = sub_1000660F8;
    *(void *)(v44 + 104) = v41;
    *(void *)(v44 + 112) = sub_100065FE4;
    *(void *)(v44 + 1memset(&strm.total_in, 0, 20) = v43;
    swift_retain(v36);
    swift_retain(v37);
    swift_retain(v39);
    swift_retain(v40);
    swift_retain(v41);
    swift_retain(v43);
    swift_bridgeObjectRelease(v44);
    if (os_log_type_enabled(osloga, v77))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      uint64_t v83 = 0LL;
      uint64_t v84 = v46;
      *(_WORD *)uint64_t v45 = 514;
      v45[2] = *(_BYTE *)(v36 + 16);
      uint64_t v21 = v72;
      if (v72) {
        goto LABEL_20;
      }
      uint64_t v47 = v46;
      swift_release(v36);
      v45[3] = *(_BYTE *)(v37 + 16);
      uint64_t v82 = v45 + 4;
      swift_release(v37);
      sub_100065300((uint64_t *)&v82, (uint64_t)&v83, &v84, *(uint64_t (**)(void))(v39 + 16));
      swift_release(v39);
      uint64_t v48 = v82;
      _BYTE *v82 = *(_BYTE *)(v40 + 16);
      swift_release(v40);
      v48[1] = *(_BYTE *)(v41 + 16);
      uint64_t v82 = v48 + 2;
      swift_release(v41);
      sub_100065300((uint64_t *)&v82, (uint64_t)&v83, &v84, *(uint64_t (**)(void))(v43 + 16));
      uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v50 = *(void *)(v0 + 968);
      uint64_t v51 = *(void *)(v0 + 832);
      swift_release(v43);
      _os_log_impl((void *)&_mh_execute_header, osloga, v77, "caching sendOneMessage %{public}s:%{public}s", v45, 0x16u);
      swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      uint64_t v52 = v49(v50, v51);
    }

    else
    {
      uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v61 = *(void *)(v0 + 968);
      uint64_t v62 = *(void *)(v0 + 832);
      swift_release(v36);
      swift_release(v37);
      swift_release(v39);
      swift_release(v40);
      swift_release(v41);
      swift_release(v43);

      uint64_t v52 = v79(v61, v62);
    }

    static Date.now.getter(v52);
    uint64_t v63 = (void *)swift_task_alloc(dword_100096BEC);
    *(void *)(v0 + 1560) = v63;
    *uint64_t v63 = v0;
    v63[1] = sub_10005F0FC;
    return sub_10002091C( v0 + 120,  *(void *)(v0 + 1056),  *(double *)(v0 + 1216),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
  }

uint64_t sub_10005F0FC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1560LL);
  *(void *)(*(void *)v1 + 1568LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[181];
  uint64_t v5 = v2[180];
  if (v0)
  {
    uint64_t v6 = v2[167];
    uint64_t v7 = v2[151];
    uint64_t v8 = v2[149];
    uint64_t v9 = v2[147];
    uint64_t v20 = v2[132];
    uint64_t v21 = v2[169];
    uint64_t v10 = v2[131];
    uint64_t v11 = v2[130];
    uint64_t v12 = v2[98];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v20, v11);
    uint64_t v13 = sub_1000643A4;
    uint64_t v14 = v12;
  }

  else
  {
    uint64_t v15 = v2[151];
    uint64_t v16 = v2[149];
    uint64_t v17 = v2[147];
    uint64_t v18 = v2[98];
    (*(void (**)(void, void))(v2[131] + 8LL))(v2[132], v2[130]);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    uint64_t v13 = sub_10005F248;
    uint64_t v14 = v18;
  }

  return swift_task_switch(v13, v14);
}

uint64_t sub_10005F248()
{
  uint64_t v31 = *(void *)(v0 + 1376);
  uint64_t v1 = *(void *)(v0 + 1352);
  uint64_t v2 = *(void *)(v0 + 1344);
  uint64_t v3 = *(void *)(v0 + 1336);
  uint64_t v4 = *(void *)(v0 + 1328);
  (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 960),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
  uint64_t v5 = swift_allocObject(&unk_100091D58, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject(&unk_100091D80, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v6 + 24) = v1;
  os_log_t log = (os_log_t)Logger.logObject.getter(v6);
  os_log_type_t v32 = static os_log_type_t.default.getter(log);
  uint64_t v7 = swift_allocObject(&unk_100091DA8, 17LL, 7LL);
  *(_BYTE *)(v7 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v8 = swift_allocObject(&unk_100091DD0, 17LL, 7LL);
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v9 = swift_allocObject(&unk_100091DF8, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v9 + 24) = v5;
  uint64_t v10 = swift_allocObject(&unk_100091E20, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject(&unk_100091E48, 17LL, 7LL);
  *(_BYTE *)(v11 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v12 = swift_allocObject(&unk_100091E70, 17LL, 7LL);
  *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v13 = swift_allocObject(&unk_100091E98, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v13 + 24) = v6;
  uint64_t v14 = swift_allocObject(&unk_100091EC0, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = swift_allocObject(v31, 128LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v15 + 32) = sub_1000660F8;
  *(void *)(v15 + 40) = v7;
  *(void *)(v15 + 48) = sub_1000660F8;
  *(void *)(v15 + 56) = v8;
  *(void *)(v15 + 64) = sub_100065FE4;
  *(void *)(v15 + 72) = v10;
  *(void *)(v15 + 80) = sub_1000660F8;
  *(void *)(v15 + 88) = v11;
  *(void *)(v15 + 96) = sub_1000660F8;
  *(void *)(v15 + 104) = v12;
  *(void *)(v15 + 112) = sub_100065FE4;
  *(void *)(v15 + 1memset(&strm.total_in, 0, 20) = v14;
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v14);
  swift_bridgeObjectRelease(v15);
  if (!os_log_type_enabled(log, v32))
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 832);
    swift_release(v7);
    swift_release(v8);
    swift_release(v10);
    swift_release(v11);
    swift_release(v12);
    swift_release(v14);

    v33(v22, v23);
    goto LABEL_6;
  }

  uint64_t v16 = *(void *)(v0 + 1568);
  uint64_t v17 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
  uint64_t v18 = swift_slowAlloc(64LL, -1LL);
  uint64_t v36 = 0LL;
  uint64_t v37 = v18;
  *(_WORD *)uint64_t v17 = 514;
  uint64_t v17[2] = *(_BYTE *)(v7 + 16);
  uint64_t v19 = *(void *)(v0 + 1568);
  if (!v16)
  {
    uint64_t v20 = v18;
    swift_release(v7);
    void v17[3] = *(_BYTE *)(v8 + 16);
    uint64_t v35 = v17 + 4;
    uint64_t v21 = *(void *)(v0 + 1568);
    if (v19)
    {
      uint64_t v19 = *(void *)(v0 + 1568);
      goto LABEL_13;
    }

    swift_release(v8);
    sub_100065300((uint64_t *)&v35, (uint64_t)&v36, &v37, *(uint64_t (**)(void))(v10 + 16));
    uint64_t v19 = *(void *)(v0 + 1568);
    if (v21) {
      goto LABEL_13;
    }
    swift_release(v10);
    uint64_t v26 = v35;
    _BYTE *v35 = *(_BYTE *)(v11 + 16);
    uint64_t v27 = *(void *)(v0 + 1568);
    if (v19)
    {
      uint64_t v19 = *(void *)(v0 + 1568);
      goto LABEL_13;
    }

    swift_release(v11);
    v26[1] = *(_BYTE *)(v12 + 16);
    uint64_t v35 = v26 + 2;
    uint64_t v19 = *(void *)(v0 + 1568);
    if (v27) {
      goto LABEL_13;
    }
    swift_release(v12);
    sub_100065300((uint64_t *)&v35, (uint64_t)&v36, &v37, *(uint64_t (**)(void))(v14 + 16));
    if (v19)
    {
      uint64_t v19 = *(void *)(v0 + 1568);
      goto LABEL_13;
    }

    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v29 = *(void *)(v0 + 960);
    uint64_t v30 = *(void *)(v0 + 832);
    swift_release(v14);
    _os_log_impl((void *)&_mh_execute_header, log, v32, "cached sendOneMessage %{public}s:%{public}s", v17, 0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    v28(v29, v30);
LABEL_6:
    *(void *)(v0 + 1576) = *(void *)(v0 + 1568);
    uint64_t v24 = *(void *)(v0 + 1224);
    *(void *)(v0 + 1584) = *(void *)(*(void *)v24 + 256LL);
    return swift_task_switch(sub_10005F6E8, v24);
  }

uint64_t sub_10005F6E8()
{
  uint64_t v1 = *(void *)(v0 + 1192);
  uint64_t v2 = *(void *)(v0 + 784);
  (*(void (**)(void, uint64_t, uint64_t))(v0 + 1584))(*(void *)(v0 + 1184), v1, 1LL);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10005F74C, v2);
}

uint64_t sub_10005F74C()
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 776));
  if (!reply)
  {
    uint64_t v19 = *(void *)(v0 + 1304);
    uint64_t v20 = *(void *)(v0 + 1200);
    uint64_t v21 = *(void *)(v0 + 1168);
    uint64_t v22 = *(void *)(v0 + 1080);
    swift_unknownObjectRelease(*(void *)(v0 + 1160));
    swift_unknownObjectRelease(v20);
    swift_unknownObjectRelease(v21);
    swift_unknownObjectRelease(v19);
    swift_bridgeObjectRelease(*(void *)(v0 + 624));
    swift_bridgeObjectRelease(*(void *)(v0 + 632));
    uint64_t v18 = v22;
LABEL_8:
    sub_100015BF0(v18, type metadata accessor for CachedSession);
    uint64_t v30 = *(void *)(v0 + 1320);
    swift_bridgeObjectRelease(*(void *)(v0 + 736));
    swift_release(v30);
    uint64_t v31 = *(void *)(v0 + 1144);
    uint64_t v32 = *(void *)(v0 + 1136);
    uint64_t v33 = *(void *)(v0 + 1128);
    uint64_t v34 = *(void *)(v0 + 1120);
    uint64_t v35 = *(void *)(v0 + 1112);
    uint64_t v36 = *(void *)(v0 + 1104);
    uint64_t v37 = *(void *)(v0 + 1096);
    uint64_t v38 = *(void *)(v0 + 1088);
    uint64_t v39 = *(void *)(v0 + 1080);
    uint64_t v41 = *(void *)(v0 + 1064);
    uint64_t v42 = *(void *)(v0 + 1056);
    uint64_t v43 = *(void *)(v0 + 1032);
    uint64_t v44 = *(void *)(v0 + 1024);
    uint64_t v45 = *(void *)(v0 + 1016);
    uint64_t v46 = *(void *)(v0 + 1008);
    uint64_t v47 = *(void *)(v0 + 1000);
    uint64_t v48 = *(void *)(v0 + 992);
    uint64_t v49 = *(void *)(v0 + 984);
    uint64_t v50 = *(void *)(v0 + 976);
    uint64_t v51 = *(void *)(v0 + 968);
    uint64_t v52 = *(void *)(v0 + 960);
    uint64_t v53 = *(void *)(v0 + 952);
    uint64_t v54 = *(void *)(v0 + 944);
    uint64_t v55 = *(void *)(v0 + 936);
    uint64_t v56 = *(void *)(v0 + 928);
    uint64_t v57 = *(void *)(v0 + 920);
    uint64_t v58 = *(void *)(v0 + 912);
    uint64_t v59 = *(void *)(v0 + 904);
    uint64_t v60 = *(void *)(v0 + 896);
    uint64_t v61 = *(void *)(v0 + 888);
    uint64_t v62 = *(void *)(v0 + 880);
    uint64_t v63 = *(void *)(v0 + 872);
    uint64_t v65 = *(void *)(v0 + 864);
    uint64_t v67 = *(void *)(v0 + 856);
    uint64_t v69 = *(void *)(v0 + 848);
    uint64_t v71 = *(void *)(v0 + 824);
    uint64_t v73 = *(void *)(v0 + 816);
    swift_task_dealloc(*(void *)(v0 + 1152));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = reply;
  uint64_t v3 = *(void *)(v0 + 784);
  swift_beginAccess(v3 + 112, v0 + 568, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 112);
  if (v4)
  {
    swift_beginAccess(v4 + 16, v0 + 448, 0LL, 0LL);
    uint64_t v5 = *(_xpc_connection_s **)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
      uint64_t v7 = *(void *)(v0 + 1360);
      uint64_t v8 = *(void *)(v0 + 952);
      uint64_t v9 = *(void *)(v0 + 832);
      uint64_t v10 = *(void *)(v0 + 624);
      swift_unknownObjectRetain(v5);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(*(void *)(v0 + 632));
      xpc_connection_send_message(v5, v2);
      swift_unknownObjectRelease(v5);
      uint64_t v11 = v6(v8, v7, v9);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = *(void *)(v0 + 1200);
        uint64_t v15 = *(void *)(v0 + 1168);
        uint64_t v16 = *(void *)(v0 + 1160);
        uint64_t v70 = *(void *)(v0 + 1080);
        uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
        uint64_t v66 = *(void *)(v0 + 952);
        uint64_t v68 = *(void *)(v0 + 1304);
        uint64_t v64 = *(void *)(v0 + 832);
        uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        uint64_t v75 = 0LL;
        v76[0] = 0LL;
        *(_WORD *)uint64_t v17 = 0;
        uint64_t v74 = v17 + 2;
        sub_100065270((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)v76);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "SendOneMessage Reply Sent", v17, 2u);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_unknownObjectRelease(v16);
        swift_unknownObjectRelease(v14);
        swift_unknownObjectRelease(v2);

        swift_unknownObjectRelease(v15);
        swift_unknownObjectRelease(v68);
        v72(v66, v64);
        uint64_t v18 = v70;
      }

      else
      {
        uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
        uint64_t v24 = *(void *)(v0 + 1304);
        uint64_t v25 = *(void *)(v0 + 1200);
        uint64_t v26 = *(void *)(v0 + 1168);
        uint64_t v27 = *(void *)(v0 + 1080);
        uint64_t v28 = *(void *)(v0 + 952);
        uint64_t v29 = *(void *)(v0 + 832);
        swift_unknownObjectRelease(*(void *)(v0 + 1160));
        swift_unknownObjectRelease(v25);
        swift_unknownObjectRelease(v2);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

        swift_unknownObjectRelease(v26);
        swift_unknownObjectRelease(v24);
        v23(v28, v29);
        uint64_t v18 = v27;
      }

      goto LABEL_8;
    }
  }

  else
  {
    swift_unknownObjectRelease(*(void *)(v0 + 1304));
    __break(1u);
  }

  uint64_t result = swift_unknownObjectRelease(*(void *)(v0 + 1304));
  __break(1u);
  return result;
}

uint64_t sub_10005FC2C()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 1592);
  uint64_t v42 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 1600));
  swift_release(v2);
  uint64_t v3 = v1[144];
  uint64_t v4 = v1[143];
  uint64_t v5 = v1[142];
  uint64_t v6 = v1[141];
  uint64_t v7 = v1[140];
  uint64_t v8 = v1[139];
  uint64_t v9 = v1[138];
  uint64_t v10 = v1[137];
  uint64_t v11 = v1[136];
  uint64_t v12 = v1[135];
  uint64_t v15 = v1[133];
  uint64_t v16 = v1[132];
  uint64_t v17 = v1[129];
  uint64_t v18 = v1[128];
  uint64_t v19 = v1[127];
  uint64_t v20 = v1[126];
  uint64_t v21 = v1[125];
  uint64_t v22 = v1[124];
  uint64_t v23 = v1[123];
  uint64_t v24 = v1[122];
  uint64_t v25 = v1[121];
  uint64_t v26 = v1[120];
  uint64_t v27 = v1[119];
  uint64_t v28 = v1[118];
  uint64_t v29 = v1[117];
  uint64_t v30 = v1[116];
  uint64_t v31 = v1[115];
  uint64_t v32 = v1[114];
  uint64_t v33 = v1[113];
  uint64_t v34 = v1[112];
  uint64_t v35 = v1[111];
  uint64_t v36 = v1[110];
  uint64_t v37 = v1[109];
  uint64_t v38 = v1[108];
  uint64_t v39 = v1[107];
  uint64_t v40 = v1[106];
  uint64_t v41 = v1[103];
  uint64_t v13 = v1[102];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v42 + 8))();
}

uint64_t sub_10005FEA0()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 1608);
  uint64_t v42 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 1616));
  swift_release(v2);
  uint64_t v3 = v1[144];
  uint64_t v4 = v1[143];
  uint64_t v5 = v1[142];
  uint64_t v6 = v1[141];
  uint64_t v7 = v1[140];
  uint64_t v8 = v1[139];
  uint64_t v9 = v1[138];
  uint64_t v10 = v1[137];
  uint64_t v11 = v1[136];
  uint64_t v12 = v1[135];
  uint64_t v15 = v1[133];
  uint64_t v16 = v1[132];
  uint64_t v17 = v1[129];
  uint64_t v18 = v1[128];
  uint64_t v19 = v1[127];
  uint64_t v20 = v1[126];
  uint64_t v21 = v1[125];
  uint64_t v22 = v1[124];
  uint64_t v23 = v1[123];
  uint64_t v24 = v1[122];
  uint64_t v25 = v1[121];
  uint64_t v26 = v1[120];
  uint64_t v27 = v1[119];
  uint64_t v28 = v1[118];
  uint64_t v29 = v1[117];
  uint64_t v30 = v1[116];
  uint64_t v31 = v1[115];
  uint64_t v32 = v1[114];
  uint64_t v33 = v1[113];
  uint64_t v34 = v1[112];
  uint64_t v35 = v1[111];
  uint64_t v36 = v1[110];
  uint64_t v37 = v1[109];
  uint64_t v38 = v1[108];
  uint64_t v39 = v1[107];
  uint64_t v40 = v1[106];
  uint64_t v41 = v1[103];
  uint64_t v13 = v1[102];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v42 + 8))();
}

uint64_t sub_100060114()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 1624);
  uint64_t v42 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 1632));
  swift_release(v2);
  uint64_t v3 = v1[144];
  uint64_t v4 = v1[143];
  uint64_t v5 = v1[142];
  uint64_t v6 = v1[141];
  uint64_t v7 = v1[140];
  uint64_t v8 = v1[139];
  uint64_t v9 = v1[138];
  uint64_t v10 = v1[137];
  uint64_t v11 = v1[136];
  uint64_t v12 = v1[135];
  uint64_t v15 = v1[133];
  uint64_t v16 = v1[132];
  uint64_t v17 = v1[129];
  uint64_t v18 = v1[128];
  uint64_t v19 = v1[127];
  uint64_t v20 = v1[126];
  uint64_t v21 = v1[125];
  uint64_t v22 = v1[124];
  uint64_t v23 = v1[123];
  uint64_t v24 = v1[122];
  uint64_t v25 = v1[121];
  uint64_t v26 = v1[120];
  uint64_t v27 = v1[119];
  uint64_t v28 = v1[118];
  uint64_t v29 = v1[117];
  uint64_t v30 = v1[116];
  uint64_t v31 = v1[115];
  uint64_t v32 = v1[114];
  uint64_t v33 = v1[113];
  uint64_t v34 = v1[112];
  uint64_t v35 = v1[111];
  uint64_t v36 = v1[110];
  uint64_t v37 = v1[109];
  uint64_t v38 = v1[108];
  uint64_t v39 = v1[107];
  uint64_t v40 = v1[106];
  uint64_t v41 = v1[103];
  uint64_t v13 = v1[102];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v42 + 8))();
}

void sub_100060388()
{
  uint64_t v1 = *(void *)(v0 + 1240);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 840);
  uint64_t v86 = sub_100058684();
  uint64_t v89 = *(void (**)(uint64_t))(v3 + 16);
  v89(v2);
  uint64_t v4 = swift_allocObject(&unk_100091740, 72LL, 7LL);
  __int128 v5 = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v0 + 152);
  *(void *)(v4 + 64) = *(void *)(v0 + 168);
  uint64_t v6 = swift_allocObject(&unk_100091768, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = sub_100065874;
  *(void *)(v6 + 24) = v4;
  uint64_t v7 = swift_allocObject(&unk_100091790, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v8 = swift_errorRetain(v1);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v92 = static os_log_type_t.error.getter();
  uint64_t v10 = swift_allocObject(&unk_1000917B8, 17LL, 7LL);
  *(_BYTE *)(v10 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v11 = swift_allocObject(&unk_1000917E0, 17LL, 7LL);
  *(_BYTE *)(v11 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v12 = swift_allocObject(&unk_100091808, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_100065894;
  *(void *)(v12 + 24) = v6;
  uint64_t v13 = swift_allocObject(&unk_100091830, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = swift_allocObject(&unk_100091858, 17LL, 7LL);
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 32;
  uint64_t v15 = swift_allocObject(&unk_100091880, 17LL, 7LL);
  *(_BYTE *)(v15 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v16 = swift_allocObject(&unk_1000918A8, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = sub_10006581C;
  *(void *)(v16 + 24) = v7;
  uint64_t v17 = swift_allocObject(&unk_1000918D0, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v17 + 24) = v16;
  uint64_t v18 = sub_100009FDC(&qword_100098238);
  uint64_t v19 = swift_allocObject(v18, 128LL, 7LL);
  *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v19 + 32) = sub_1000660F8;
  *(void *)(v19 + 40) = v10;
  *(void *)(v19 + 48) = sub_1000660F8;
  *(void *)(v19 + 56) = v11;
  *(void *)(v19 + 64) = sub_100065FE4;
  *(void *)(v19 + 72) = v13;
  *(void *)(v19 + 80) = sub_1000660F8;
  *(void *)(v19 + 88) = v14;
  *(void *)(v19 + 96) = sub_1000660F8;
  *(void *)(v19 + 104) = v15;
  *(void *)(v19 + 112) = sub_100065FE4;
  *(void *)(v19 + 1memset(&strm.total_in, 0, 20) = v17;
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v17);
  swift_bridgeObjectRelease(v19);
  os_log_type_t v20 = v92;
  uint64_t v93 = v9;
  if (os_log_type_enabled(v9, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    uint64_t v97 = 0LL;
    v98[0] = v22;
    *(_WORD *)uint64_t v21 = 514;
    v21[2] = *(_BYTE *)(v10 + 16);
    swift_release(v10);
    v21[3] = *(_BYTE *)(v11 + 16);
    uint64_t v96 = v21 + 4;
    swift_release(v11);
    sub_100065300((uint64_t *)&v96, (uint64_t)&v97, v98, *(uint64_t (**)(void))(v13 + 16));
    swift_release(v13);
    uint64_t v23 = v96;
    *uint64_t v96 = *(_BYTE *)(v14 + 16);
    swift_release(v14);
    v23[1] = *(_BYTE *)(v15 + 16);
    uint64_t v96 = v23 + 2;
    swift_release(v15);
    sub_100065300((uint64_t *)&v96, (uint64_t)&v97, v98, *(uint64_t (**)(void))(v17 + 16));
    uint64_t v24 = *(void *)(v0 + 880);
    uint64_t v25 = *(void *)(v0 + 840);
    uint64_t v26 = *(void *)(v0 + 832);
    swift_release(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v93,  v20,  "unable to find config for identity %{public}s with error %s",  v21,  0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v27(v24, v26);
  }

  else
  {
    uint64_t v28 = *(void *)(v0 + 880);
    uint64_t v29 = *(void *)(v0 + 840);
    uint64_t v30 = *(void *)(v0 + 832);
    swift_release(v10);
    swift_release(v11);
    swift_release(v13);
    swift_release(v14);
    swift_release(v15);
    swift_release(v17);

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v27(v28, v30);
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 776));
  if (!reply)
  {
    uint64_t v48 = *(void *)(v0 + 1240);
    uint64_t v49 = *(void *)(v0 + 1200);
    uint64_t v50 = *(void *)(v0 + 1168);
    uint64_t v51 = *(void *)(v0 + 1160);
    sub_100015BF0(*(void *)(v0 + 1080), type metadata accessor for CachedSession);
    swift_unknownObjectRelease(v51);
    swift_unknownObjectRelease(v50);
    swift_unknownObjectRelease(v49);
    swift_errorRelease(v48);
LABEL_12:
    uint64_t v52 = *(void *)(v0 + 1144);
    uint64_t v53 = *(void *)(v0 + 1136);
    uint64_t v54 = *(void *)(v0 + 1128);
    uint64_t v55 = *(void *)(v0 + 1120);
    uint64_t v56 = *(void *)(v0 + 1112);
    uint64_t v57 = *(void *)(v0 + 1104);
    uint64_t v58 = *(void *)(v0 + 1096);
    uint64_t v59 = *(void *)(v0 + 1088);
    uint64_t v60 = *(void *)(v0 + 1080);
    uint64_t v61 = *(void *)(v0 + 1064);
    uint64_t v62 = *(void *)(v0 + 1056);
    uint64_t v63 = *(void *)(v0 + 1032);
    uint64_t v64 = *(void *)(v0 + 1024);
    uint64_t v65 = *(void *)(v0 + 1016);
    uint64_t v66 = *(void *)(v0 + 1008);
    uint64_t v67 = *(void *)(v0 + 1000);
    uint64_t v68 = *(void *)(v0 + 992);
    uint64_t v69 = *(void *)(v0 + 984);
    uint64_t v70 = *(void *)(v0 + 976);
    uint64_t v71 = *(void *)(v0 + 968);
    uint64_t v72 = *(void *)(v0 + 960);
    uint64_t v73 = *(void *)(v0 + 952);
    uint64_t v74 = *(void *)(v0 + 944);
    uint64_t v75 = *(void *)(v0 + 936);
    uint64_t v76 = *(void *)(v0 + 928);
    uint64_t v77 = *(void *)(v0 + 920);
    uint64_t v78 = *(void *)(v0 + 912);
    uint64_t v79 = *(void *)(v0 + 904);
    uint64_t v80 = *(void *)(v0 + 896);
    uint64_t v81 = *(void *)(v0 + 888);
    uint64_t v82 = *(void *)(v0 + 880);
    uint64_t v83 = *(void *)(v0 + 872);
    uint64_t v84 = *(void *)(v0 + 864);
    uint64_t v85 = *(void *)(v0 + 856);
    uint64_t v88 = *(void *)(v0 + 848);
    uint64_t v91 = *(void *)(v0 + 824);
    uint64_t v95 = *(os_log_s **)(v0 + 816);
    swift_task_dealloc(*(void *)(v0 + 1152));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    swift_task_dealloc(v95);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v32 = reply;
  uint64_t v33 = *(void *)(v0 + 784);
  xpc_dictionary_set_string(reply, "error", "missing required sendOneMessage event fields");
  swift_beginAccess(v33 + 112, v0 + 520, 0LL, 0LL);
  uint64_t v34 = *(void *)(v33 + 112);
  if (v34)
  {
    swift_beginAccess(v34 + 16, v0 + 544, 0LL, 0LL);
    uint64_t v35 = *(_xpc_connection_s **)(v34 + 16);
    if (v35)
    {
      uint64_t v36 = *(void *)(v0 + 872);
      uint64_t v37 = *(void *)(v0 + 832);
      xpc_connection_send_message(v35, v32);
      uint64_t v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v36, v86, v37);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.info.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = *(void *)(v0 + 1240);
      uint64_t v43 = *(void *)(v0 + 1200);
      uint64_t v44 = *(void *)(v0 + 1160);
      uint64_t v45 = *(void *)(v0 + 1080);
      uint64_t v46 = *(void *)(v0 + 872);
      uint64_t v90 = *(void *)(v0 + 1168);
      uint64_t v94 = *(os_log_s **)(v0 + 832);
      if (v41)
      {
        uint64_t v87 = *(void *)(v0 + 1240);
        uint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        uint64_t v97 = 0LL;
        v98[0] = 0LL;
        *(_WORD *)uint64_t v47 = 0;
        uint64_t v96 = v47 + 2;
        sub_100065270((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v96, (uint64_t)&v97, (uint64_t)v98);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "SendOneMessage Error Reply Sent", v47, 2u);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_unknownObjectRelease(v44);
        swift_unknownObjectRelease(v43);
        swift_unknownObjectRelease(v32);

        swift_unknownObjectRelease(v90);
        swift_errorRelease(v87);
      }

      else
      {
        swift_unknownObjectRelease(v44);
        swift_unknownObjectRelease(v43);
        swift_unknownObjectRelease(v32);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

        swift_unknownObjectRelease(v90);
        swift_errorRelease(v42);
      }

      v27(v46, (uint64_t)v94);
      sub_100015BF0(v45, type metadata accessor for CachedSession);
      goto LABEL_12;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100060C10()
{
  *(_OWORD *)(v0 + 163) = 0u;
  uint64_t v1 = (void *)v0[146];
  uint64_t v2 = v0[99];
  v0[92] = sub_10002CF80((uint64_t)_swiftEmptyArrayStorage);
  size_t count = xpc_dictionary_get_count(v1);
  sub_100009FDC((uint64_t *)&unk_100097050);
  Dictionary.reserveCapacity(_:)(count);
  uint64_t v4 = swift_allocObject(&unk_1000918F8, 32LL, 7LL);
  v0[165] = v4;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v0 + 92;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_allocObject(&unk_100091920, 32LL, 7LL);
  v0[22] = _NSConcreteStackBlock;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = sub_100065954;
  *(void *)(v5 + 24) = v4;
  v0[26] = sub_100030194;
  v0[27] = v5;
  v0[23] = 1107296256LL;
  v0[24] = sub_10002CF7C;
  v0[25] = &unk_100091938;
  uint64_t v6 = _Block_copy(v0 + 22);
  uint64_t v7 = v0[27];
  swift_unknownObjectRetain(v1);
  swift_retain(v5);
  swift_release(v7);
  xpc_dictionary_apply(v1, v6);
  swift_unknownObjectRelease(v1);
  _Block_release(v6);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v5, "", 73LL, 189LL, 53LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((v1 & 1) != 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v9 = 4079420LL;
  uint64_t v10 = v0[129];
  sub_100064F90(0x646F6874656D5FLL, 0xE700000000000000LL, v0[92], v10);
  uint64_t v11 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL);
  if (v12(v10, 1LL, v11) != 1)
  {
    uint64_t v13 = v0[128];
    sub_100065EFC(v0[129], v13, &qword_100096AA8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v11);
    if (EnumCaseMultiPayload == 2)
    {
      v0[95] = *(void *)v0[128];
      uint64_t v15 = &type metadata for UInt64;
      uint64_t v16 = &protocol witness table for UInt64;
      goto LABEL_7;
    }

    if (EnumCaseMultiPayload == 1)
    {
      v0[96] = *(void *)v0[128];
      uint64_t v15 = &type metadata for Int64;
      uint64_t v16 = &protocol witness table for Int64;
LABEL_7:
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      unint64_t v19 = v18;
      goto LABEL_10;
    }

    sub_100015BF0(v0[128], type metadata accessor for ServiceEventValue);
  }

  unint64_t v19 = 0xE300000000000000LL;
  uint64_t v17 = 4079420LL;
LABEL_10:
  v0[167] = v19;
  v0[166] = v17;
  uint64_t v20 = v0[127];
  sub_10000C234(v0[129], &qword_100096AA8);
  sub_100064F90(0x7375746174735FLL, 0xE700000000000000LL, v0[92], v20);
  if (v12(v20, 1LL, v11) == 1)
  {
LABEL_17:
    unint64_t v26 = 0xE300000000000000LL;
    goto LABEL_18;
  }

  uint64_t v21 = v0[126];
  sub_100065EFC(v0[127], v21, &qword_100096AA8);
  int v22 = swift_getEnumCaseMultiPayload(v21, v11);
  if (v22 == 2)
  {
    v0[93] = *(void *)v0[126];
    uint64_t v23 = &type metadata for UInt64;
    uint64_t v24 = &protocol witness table for UInt64;
    goto LABEL_15;
  }

  if (v22 != 1)
  {
    sub_100015BF0(v0[126], type metadata accessor for ServiceEventValue);
    goto LABEL_17;
  }

  v0[94] = *(void *)v0[126];
  uint64_t v23 = &type metadata for Int64;
  uint64_t v24 = &protocol witness table for Int64;
LABEL_15:
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  unint64_t v26 = v25;
LABEL_18:
  v0[169] = v26;
  v0[168] = v9;
  uint64_t v27 = v0[125];
  uint64_t v28 = v0[105];
  uint64_t v29 = v0[104];
  sub_10000C234(v0[127], &qword_100096AA8);
  uint64_t v30 = sub_100058684();
  v0[170] = v30;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v0[171] = v31;
  v31(v27, v30, v29);
  uint64_t v32 = swift_allocObject(&unk_100091970, 32LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v17;
  *(void *)(v32 + 24) = v19;
  uint64_t v33 = swift_allocObject(&unk_100091998, 32LL, 7LL);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v33 + 24) = v26;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v26);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v60 = static os_log_type_t.default.getter(oslog);
  uint64_t v35 = swift_allocObject(&unk_1000919C0, 17LL, 7LL);
  *(_BYTE *)(v35 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v36 = swift_allocObject(&unk_1000919E8, 17LL, 7LL);
  *(_BYTE *)(v36 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v37 = swift_allocObject(&unk_100091A10, 32LL, 7LL);
  *(void *)(v37 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v37 + 24) = v32;
  uint64_t v38 = swift_allocObject(&unk_100091A38, 32LL, 7LL);
  *(void *)(v38 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v38 + 24) = v37;
  uint64_t v39 = swift_allocObject(&unk_100091A60, 17LL, 7LL);
  *(_BYTE *)(v39 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v40 = swift_allocObject(&unk_100091A88, 17LL, 7LL);
  *(_BYTE *)(v40 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v41 = swift_allocObject(&unk_100091AB0, 32LL, 7LL);
  *(void *)(v41 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v41 + 24) = v33;
  uint64_t v42 = swift_allocObject(&unk_100091AD8, 32LL, 7LL);
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v42 + 24) = v41;
  uint64_t v43 = sub_100009FDC(&qword_100098238);
  v0[172] = v43;
  uint64_t v44 = swift_allocObject(v43, 128LL, 7LL);
  *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
  *(void *)(v44 + 32) = sub_1000660F8;
  *(void *)(v44 + 40) = v35;
  *(void *)(v44 + 48) = sub_1000660F8;
  *(void *)(v44 + 56) = v36;
  *(void *)(v44 + 64) = sub_100065FE4;
  *(void *)(v44 + 72) = v38;
  *(void *)(v44 + 80) = sub_1000660F8;
  *(void *)(v44 + 88) = v39;
  *(void *)(v44 + 96) = sub_1000660F8;
  *(void *)(v44 + 104) = v40;
  *(void *)(v44 + 112) = sub_100065FE4;
  *(void *)(v44 + 1memset(&strm.total_in, 0, 20) = v42;
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v38);
  swift_retain(v39);
  swift_retain(v40);
  swift_retain(v42);
  swift_bridgeObjectRelease(v44);
  if (os_log_type_enabled(oslog, v60))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
    uint64_t v46 = swift_slowAlloc(64LL, -1LL);
    uint64_t v64 = 0LL;
    uint64_t v65 = v46;
    *(_WORD *)uint64_t v45 = 514;
    v45[2] = *(_BYTE *)(v35 + 16);
    swift_release(v35);
    v45[3] = *(_BYTE *)(v36 + 16);
    uint64_t v63 = v45 + 4;
    swift_release(v36);
    sub_100065300((uint64_t *)&v63, (uint64_t)&v64, &v65, *(uint64_t (**)(void))(v38 + 16));
    swift_release(v38);
    uint64_t v47 = v63;
    *uint64_t v63 = *(_BYTE *)(v39 + 16);
    swift_release(v39);
    v47[1] = *(_BYTE *)(v40 + 16);
    uint64_t v63 = v47 + 2;
    swift_release(v40);
    sub_100065300((uint64_t *)&v63, (uint64_t)&v64, &v65, *(uint64_t (**)(void))(v42 + 16));
    uint64_t v48 = v0[125];
    uint64_t v49 = v0[105];
    uint64_t v50 = v0[104];
    swift_release(v42);
    _os_log_impl((void *)&_mh_execute_header, oslog, v60, "sending one message %{public}s:%{public}s", v45, 0x16u);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);

    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v51(v48, v50);
  }

  else
  {
    uint64_t v52 = v0[125];
    uint64_t v53 = v0[105];
    uint64_t v54 = v0[104];

    swift_release(v42);
    swift_release(v40);
    swift_release(v39);
    swift_release(v38);
    swift_release(v36);
    swift_release(v35);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v51(v52, v54);
  }

  v0[173] = v51;
  uint64_t v55 = v0[98];
  swift_bridgeObjectRetain(v0[92]);
  v0[77] = XPCIncomingConnection.init(conn:)(0x4D656E4F646E6553LL);
  v0[78] = v56;
  v0[79] = v57;
  uint64_t v58 = *(int **)(**(void **)(v55 + 160) + 152LL);
  os_log_t osloga = (os_log_t)((char *)v58 + *v58);
  uint64_t v59 = (void *)swift_task_alloc(v58[1]);
  v0[174] = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_10005C2F8;
  return ((uint64_t (*)(void *))osloga)(v0 + 15);
}

uint64_t sub_100061404()
{
  *(void *)(v0 + 1432) = *(void *)(v0 + 616);
  uint64_t v1 = *(void *)(v0 + 624);
  *(void *)(v0 + 1440) = v1;
  uint64_t v2 = *(void *)(v0 + 632);
  *(void *)(v0 + 1448) = v2;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = sub_10003D184();
  swift_beginAccess(v3, v0 + 592, 0LL, 0LL);
  uint64_t v4 = *(void *)(v0 + 1256);
  if (*v3 == 1 && (uint64_t v5 = *(void *)(v4 + 16), (*(void *)(v0 + 1456) = v5) != 0LL))
  {
    uint64_t v6 = *(void *)(v0 + 808);
    uint64_t v7 = *(void *)(v0 + 800);
    LODWORD(v8) = *(_DWORD *)(v7 + 80);
    *(_DWORD *)(v0 + 1640) = v8;
    uint64_t v8 = v8;
    uint64_t v9 = (v8 + 16) & ~v8;
    *(void *)(v0 + 1464) = *(void *)(v7 + 72);
    *(_OWORD *)(v0 + 1472) = 0u;
    uint64_t v135 = *(void *)(v0 + 1376);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
    uint64_t v11 = *(void *)(v0 + 1360);
    uint64_t v126 = *(void *)(v0 + 1352);
    uint64_t v12 = *(void *)(v0 + 1336);
    uint64_t v13 = *(void *)(v0 + 1328);
    uint64_t v14 = *(void *)(v0 + 992);
    uint64_t v15 = *(void *)(v0 + 832);
    uint64_t v16 = *(void *)(v0 + 824);
    uint64_t v17 = *(void *)(v0 + 816);
    os_log_t oslogc = (os_log_t)(v9 + v6);
    uint64_t v129 = *(void *)(v0 + 1344);
    uint64_t typeb = v8 | 7LL;
    sub_100030114(v4 + ((v8 + 32) & ~v8), v16, type metadata accessor for SessionConfiguration.Backend);
    v10(v14, v11, v15);
    uint64_t v18 = swift_allocObject(&unk_1000922D0, 32LL, 7LL);
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v13;
    *(void *)(v18 + 24) = v12;
    uint64_t v19 = swift_allocObject(&unk_1000922F8, 32LL, 7LL);
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v129;
    *(void *)(v19 + 24) = v126;
    sub_100030114(v16, v17, type metadata accessor for SessionConfiguration.Backend);
    uint64_t v130 = swift_allocObject(&unk_100092320, oslogc, typeb);
    sub_100049B9C(v17, v130 + v9, type metadata accessor for SessionConfiguration.Backend);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v126);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t type = static os_log_type_t.default.getter(oslog);
    uint64_t v21 = swift_allocObject(&unk_100092348, 17LL, 7LL);
    *(_BYTE *)(v21 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v127 = swift_allocObject(&unk_100092370, 17LL, 7LL);
    *(_BYTE *)(v127 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v22 = swift_allocObject(&unk_100092398, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v22 + 24) = v18;
    uint64_t v23 = swift_allocObject(&unk_1000923C0, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v23 + 24) = v22;
    uint64_t v24 = swift_allocObject(&unk_1000923E8, 17LL, 7LL);
    *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v25 = swift_allocObject(&unk_100092410, 17LL, 7LL);
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v26 = swift_allocObject(&unk_100092438, 32LL, 7LL);
    *(void *)(v26 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v26 + 24) = v19;
    uint64_t v27 = swift_allocObject(&unk_100092460, 32LL, 7LL);
    *(void *)(v27 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v27 + 24) = v26;
    uint64_t v28 = swift_allocObject(&unk_100092488, 17LL, 7LL);
    *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v29 = swift_allocObject(&unk_1000924B0, 17LL, 7LL);
    *(_BYTE *)(v29 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v30 = swift_allocObject(&unk_1000924D8, 32LL, 7LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = sub_100065B64;
    *(void *)(v30 + 24) = v130;
    uint64_t v31 = swift_allocObject(&unk_100092500, 32LL, 7LL);
    *(void *)(v31 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v31 + 24) = v30;
    uint64_t v32 = swift_allocObject(v135, 176LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1000790E0;
    *(void *)(v32 + 32) = sub_1000660F8;
    *(void *)(v32 + 40) = v21;
    *(void *)(v32 + 48) = sub_1000660F8;
    *(void *)(v32 + 56) = v127;
    *(void *)(v32 + 64) = sub_100065FE4;
    *(void *)(v32 + 72) = v23;
    *(void *)(v32 + 80) = sub_1000660F8;
    *(void *)(v32 + 88) = v24;
    *(void *)(v32 + 96) = sub_1000660F8;
    *(void *)(v32 + 104) = v25;
    *(void *)(v32 + 112) = sub_100065FE4;
    *(void *)(v32 + 1memset(&strm.total_in, 0, 20) = v27;
    *(void *)(v32 + 128) = sub_1000660F8;
    *(void *)(v32 + 136) = v28;
    *(void *)(v32 + 144) = sub_1000660F8;
    *(void *)(v32 + 152) = v29;
    *(void *)(v32 + 160) = sub_100065FE4;
    *(void *)(v32 + 168) = v31;
    swift_retain(v21);
    swift_retain(v127);
    swift_retain(v23);
    uint64_t v123 = v24;
    swift_retain(v24);
    uint64_t v124 = v25;
    swift_retain(v25);
    swift_retain(v27);
    swift_retain(v28);
    swift_retain(v29);
    swift_retain(v31);
    swift_bridgeObjectRelease(v32);
    if (os_log_type_enabled(oslog, type))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
      uint64_t v122 = swift_slowAlloc(96LL, -1LL);
      *(void *)(v0 + 7memset(&strm.total_in, 0, 20) = 0LL;
      *(void *)(v0 + 728) = v122;
      *(_WORD *)uint64_t v33 = 770;
      v33[2] = *(_BYTE *)(v21 + 16);
      *(void *)(v0 + 712) = v33 + 3;
      swift_release(v21);
      uint64_t v34 = *(_BYTE **)(v0 + 712);
      *uint64_t v34 = *(_BYTE *)(v127 + 16);
      *(void *)(v0 + 712) = v34 + 1;
      swift_release(v127);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v23 + 16));
      swift_release(v23);
      uint64_t v35 = *(_BYTE **)(v0 + 712);
      _BYTE *v35 = *(_BYTE *)(v24 + 16);
      *(void *)(v0 + 712) = v35 + 1;
      swift_release(v24);
      uint64_t v36 = *(_BYTE **)(v0 + 712);
      _BYTE *v36 = *(_BYTE *)(v25 + 16);
      *(void *)(v0 + 712) = v36 + 1;
      swift_release(v25);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v27 + 16));
      swift_release(v27);
      uint64_t v37 = *(_BYTE **)(v0 + 712);
      _BYTE *v37 = *(_BYTE *)(v28 + 16);
      *(void *)(v0 + 712) = v37 + 1;
      swift_release(v28);
      uint64_t v38 = *(_BYTE **)(v0 + 712);
      *uint64_t v38 = *(_BYTE *)(v29 + 16);
      *(void *)(v0 + 712) = v38 + 1;
      swift_release(v29);
      sub_100065300((uint64_t *)(v0 + 712), v0 + 720, (uint64_t *)(v0 + 728), *(uint64_t (**)(void))(v31 + 16));
      uint64_t v39 = *(void *)(v0 + 992);
      uint64_t v40 = *(void *)(v0 + 840);
      uint64_t v41 = *(void *)(v0 + 832);
      swift_release(v31);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  type,  "writing sendOneMessage to transparency log %{public}s:%{public}s for backend %{public}s",  v33,  0x20u);
      swift_arrayDestroy(v122, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v42(v39, v41);
    }

    else
    {
      uint64_t v106 = *(void *)(v0 + 992);
      uint64_t v107 = *(void *)(v0 + 840);
      uint64_t v108 = *(void *)(v0 + 832);

      swift_release(v31);
      swift_release(v29);
      swift_release(v28);
      swift_release(v27);
      swift_release(v124);
      swift_release(v123);
      swift_release(v23);
      swift_release(v127);
      swift_release(v21);
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v42(v106, v108);
    }

    *(void *)(v0 + 1488) = v42;
    uint64_t v109 = *(void *)(*(void *)(v0 + 784) + 168LL);
    *(void *)(v0 + 1496) = v109;
    *(void *)(v0 + 1504) = sub_100066104();
    *(void *)(v0 + 1512) = v110;
    return swift_task_switch(sub_10005D5F8, v109);
  }

  else
  {
    swift_bridgeObjectRelease(v4);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    *(void *)(v0 + 1528) = v43;
    uint64_t v44 = *(void *)(v0 + 1304);
    if (v44)
    {
      uint64_t v131 = v43;
      uint64_t v128 = *(void *)(v0 + 1376);
      uint64_t v45 = *(void *)(v0 + 1352);
      uint64_t v46 = *(void *)(v0 + 1344);
      uint64_t v47 = *(void *)(v0 + 1336);
      uint64_t v48 = *(void *)(v0 + 1328);
      *(void *)typea = *(void *)(v0 + 1312);
      (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 984),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
      uint64_t v49 = swift_allocObject(&unk_100091EE8, 32LL, 7LL);
      *(void *)(v49 + swift_weakDestroy(v0 + 16) = v48;
      *(void *)(v49 + 24) = v47;
      uint64_t v50 = swift_allocObject(&unk_100091F10, 32LL, 7LL);
      *(void *)(v50 + swift_weakDestroy(v0 + 16) = v46;
      *(void *)(v50 + 24) = v45;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v45);
      uint64_t v136 = v44;
      uint64_t v51 = swift_unknownObjectRetain(v44);
      os_log_t osloga = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v125 = static os_log_type_t.default.getter(osloga);
      uint64_t v52 = swift_allocObject(&unk_100091F38, 17LL, 7LL);
      *(_BYTE *)(v52 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v53 = swift_allocObject(&unk_100091F60, 17LL, 7LL);
      *(_BYTE *)(v53 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v54 = swift_allocObject(&unk_100091F88, 32LL, 7LL);
      *(void *)(v54 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v54 + 24) = v49;
      uint64_t v55 = swift_allocObject(&unk_100091FB0, 32LL, 7LL);
      *(void *)(v55 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v55 + 24) = v54;
      uint64_t v56 = swift_allocObject(&unk_100091FD8, 17LL, 7LL);
      *(_BYTE *)(v56 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v57 = swift_allocObject(&unk_100092000, 17LL, 7LL);
      *(_BYTE *)(v57 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v58 = swift_allocObject(&unk_100092028, 32LL, 7LL);
      *(void *)(v58 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v58 + 24) = v50;
      uint64_t v59 = swift_allocObject(&unk_100092050, 32LL, 7LL);
      *(void *)(v59 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v59 + 24) = v58;
      uint64_t v60 = swift_allocObject(v128, 128LL, 7LL);
      *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
      *(void *)(v60 + 32) = sub_1000660F8;
      *(void *)(v60 + 40) = v52;
      *(void *)(v60 + 48) = sub_1000660F8;
      *(void *)(v60 + 56) = v53;
      *(void *)(v60 + 64) = sub_100065FE4;
      *(void *)(v60 + 72) = v55;
      *(void *)(v60 + 80) = sub_1000660F8;
      *(void *)(v60 + 88) = v56;
      *(void *)(v60 + 96) = sub_1000660F8;
      *(void *)(v60 + 104) = v57;
      *(void *)(v60 + 112) = sub_100065FE4;
      *(void *)(v60 + 1memset(&strm.total_in, 0, 20) = v59;
      swift_retain(v52);
      swift_retain(v53);
      swift_retain(v55);
      swift_retain(v56);
      swift_retain(v57);
      swift_retain(v59);
      swift_bridgeObjectRelease(v60);
      if (os_log_type_enabled(osloga, v125))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
        uint64_t v62 = swift_slowAlloc(64LL, -1LL);
        uint64_t v144 = 0LL;
        uint64_t v145 = v62;
        *(_WORD *)uint64_t v61 = 514;
        v61[2] = *(_BYTE *)(v52 + 16);
        swift_release(v52);
        v61[3] = *(_BYTE *)(v53 + 16);
        os_log_type_t v143 = v61 + 4;
        swift_release(v53);
        sub_100065300((uint64_t *)&v143, (uint64_t)&v144, &v145, *(uint64_t (**)(void))(v55 + 16));
        swift_release(v55);
        uint64_t v63 = v143;
        *os_log_type_t v143 = *(_BYTE *)(v56 + 16);
        swift_release(v56);
        v63[1] = *(_BYTE *)(v57 + 16);
        os_log_type_t v143 = v63 + 2;
        swift_release(v57);
        sub_100065300((uint64_t *)&v143, (uint64_t)&v144, &v145, *(uint64_t (**)(void))(v59 + 16));
        uint64_t v64 = *(void *)(v0 + 984);
        uint64_t v65 = *(void *)(v0 + 832);
        swift_release(v59);
        _os_log_impl( (void *)&_mh_execute_header,  osloga,  v125,  "processing sendOneMessage, immediate %{public}s:%{public}s",  v61,  0x16u);
        swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);

        uint64_t v66 = v64;
        uint64_t v67 = v65;
      }

      else
      {
        uint64_t v94 = *(void *)(v0 + 984);
        uint64_t v95 = *(void *)(v0 + 832);

        swift_release(v59);
        swift_release(v57);
        swift_release(v56);
        swift_release(v55);
        swift_release(v53);
        swift_release(v52);
        uint64_t v66 = v94;
        uint64_t v67 = v95;
      }

      v131(v66, v67);
      uint64_t v96 = *(void *)(v0 + 1448);
      uint64_t v97 = *(void *)(v0 + 1440);
      uint64_t v98 = *(void *)(v0 + 1432);
      uint64_t ObjectType = swift_getObjectType(v136);
      uint64_t v100 = sub_100009FDC(&qword_100096858);
      uint64_t v101 = swift_allocObject(v100, 56LL, 7LL);
      *(void *)(v0 + 1536) = v101;
      *(_OWORD *)(v101 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
      *(void *)(v101 + 32) = v98;
      *(void *)(v101 + 40) = v97;
      *(void *)(v101 + 48) = v96;
      uint64_t v102 = *(int **)(*(void *)typea + 8LL);
      uint64_t v103 = v102[1];
      os_log_t oslogd = (os_log_t)((char *)v102 + *v102);
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v96);
      uint64_t v104 = (void *)swift_task_alloc(v103);
      *(void *)(v0 + 1544) = v104;
      void *v104 = v0;
      v104[1] = sub_10005E704;
      return ((uint64_t (*)(uint64_t, uint64_t, void))oslogd)(v101, ObjectType, *(void *)typea);
    }

    else
    {
      uint64_t v68 = *(void *)(v0 + 1256);
      uint64_t v69 = *(void *)(v68 + 16);
      swift_bridgeObjectRelease(v68);
      if (v69)
      {
        uint64_t v137 = *(void *)(v0 + 1376);
        uint64_t v70 = *(void *)(v0 + 1352);
        uint64_t v71 = *(void *)(v0 + 1344);
        uint64_t v72 = *(void *)(v0 + 1336);
        uint64_t v73 = *(void *)(v0 + 1328);
        (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 968),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
        uint64_t v74 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
        *(void *)(v74 + swift_weakDestroy(v0 + 16) = v73;
        *(void *)(v74 + 24) = v72;
        uint64_t v75 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
        *(void *)(v75 + swift_weakDestroy(v0 + 16) = v71;
        *(void *)(v75 + 24) = v70;
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v70);
        os_log_t oslogb = (os_log_s *)Logger.logObject.getter(v76);
        os_log_type_t v77 = static os_log_type_t.default.getter(oslogb);
        uint64_t v78 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
        *(_BYTE *)(v78 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v79 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
        *(_BYTE *)(v79 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v80 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
        *(void *)(v80 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v80 + 24) = v74;
        uint64_t v81 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
        *(void *)(v81 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v81 + 24) = v80;
        uint64_t v82 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
        *(_BYTE *)(v82 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v83 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
        *(_BYTE *)(v83 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v84 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
        *(void *)(v84 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v84 + 24) = v75;
        uint64_t v85 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
        *(void *)(v85 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v85 + 24) = v84;
        uint64_t v86 = swift_allocObject(v137, 128LL, 7LL);
        *(_OWORD *)(v86 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
        *(void *)(v86 + 32) = sub_1000660F8;
        *(void *)(v86 + 40) = v78;
        *(void *)(v86 + 48) = sub_1000660F8;
        *(void *)(v86 + 56) = v79;
        *(void *)(v86 + 64) = sub_100065FE4;
        *(void *)(v86 + 72) = v81;
        *(void *)(v86 + 80) = sub_1000660F8;
        *(void *)(v86 + 88) = v82;
        *(void *)(v86 + 96) = sub_1000660F8;
        *(void *)(v86 + 104) = v83;
        *(void *)(v86 + 112) = sub_100065FE4;
        *(void *)(v86 + 1memset(&strm.total_in, 0, 20) = v85;
        swift_retain(v78);
        swift_retain(v79);
        swift_retain(v81);
        swift_retain(v82);
        swift_retain(v83);
        swift_retain(v85);
        swift_bridgeObjectRelease(v86);
        if (os_log_type_enabled(oslogb, v77))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
          uint64_t v88 = swift_slowAlloc(64LL, -1LL);
          uint64_t v144 = 0LL;
          uint64_t v145 = v88;
          *(_WORD *)uint64_t v87 = 514;
          v87[2] = *(_BYTE *)(v78 + 16);
          swift_release(v78);
          v87[3] = *(_BYTE *)(v79 + 16);
          os_log_type_t v143 = v87 + 4;
          swift_release(v79);
          sub_100065300((uint64_t *)&v143, (uint64_t)&v144, &v145, *(uint64_t (**)(void))(v81 + 16));
          swift_release(v81);
          uint64_t v89 = v143;
          *os_log_type_t v143 = *(_BYTE *)(v82 + 16);
          swift_release(v82);
          v89[1] = *(_BYTE *)(v83 + 16);
          os_log_type_t v143 = v89 + 2;
          swift_release(v83);
          sub_100065300((uint64_t *)&v143, (uint64_t)&v144, &v145, *(uint64_t (**)(void))(v85 + 16));
          uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
          uint64_t v91 = *(void *)(v0 + 968);
          uint64_t v92 = *(void *)(v0 + 832);
          swift_release(v85);
          _os_log_impl( (void *)&_mh_execute_header,  oslogb,  v77,  "caching sendOneMessage %{public}s:%{public}s",  v87,  0x16u);
          swift_arrayDestroy(v88, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v88, -1LL, -1LL);
          swift_slowDealloc(v87, -1LL, -1LL);

          uint64_t v93 = v90(v91, v92);
        }

        else
        {
          uint64_t v118 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
          uint64_t v119 = *(void *)(v0 + 968);
          uint64_t v120 = *(void *)(v0 + 832);

          swift_release(v85);
          swift_release(v83);
          swift_release(v82);
          swift_release(v81);
          swift_release(v79);
          swift_release(v78);
          uint64_t v93 = v118(v119, v120);
        }

        static Date.now.getter(v93);
        uint64_t v121 = (void *)swift_task_alloc(dword_100096BEC);
        *(void *)(v0 + 1560) = v121;
        *uint64_t v121 = v0;
        v121[1] = sub_10005F0FC;
        return sub_10002091C( v0 + 120,  *(void *)(v0 + 1056),  *(double *)(v0 + 1216),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
      }

      else
      {
        uint64_t v111 = *(void *)(v0 + 1440);
        uint64_t v112 = *(void *)(v0 + 1352);
        uint64_t v113 = *(void *)(v0 + 1336);
        uint64_t v114 = *(void *)(v0 + 1208);
        uint64_t v115 = *(void *)(v0 + 1192);
        uint64_t v116 = *(void *)(v0 + 1176);
        swift_bridgeObjectRelease(*(void *)(v0 + 1448));
        swift_bridgeObjectRelease(v111);
        swift_bridgeObjectRelease(v114);
        swift_bridgeObjectRelease(v116);
        swift_bridgeObjectRelease(v115);
        swift_bridgeObjectRelease(v112);
        swift_bridgeObjectRelease(v113);
        *(void *)(v0 + 1576) = 0LL;
        uint64_t v117 = *(void *)(v0 + 1224);
        *(void *)(v0 + 1584) = *(void *)(*(void *)v117 + 256LL);
        return swift_task_switch(sub_10005F6E8, v117);
      }
    }
  }

uint64_t sub_10006244C()
{
  uint64_t v1 = *(void *)(v0 + 1512);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1640);
  uint64_t v174 = *(void *)(v0 + 1376);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
  uint64_t v4 = *(void *)(v0 + 1360);
  uint64_t v196 = *(void *)(v0 + 1352);
  os_log_t v202 = *(os_log_t *)(v0 + 1520);
  uint64_t v5 = *(void *)(v0 + 1336);
  uint64_t v6 = *(void *)(v0 + 1328);
  uint64_t v7 = *(void *)(v0 + 864);
  uint64_t v8 = *(void *)(v0 + 832);
  os_log_t logb = *(os_log_t *)(v0 + 824);
  *(void *)uint64_t v189 = *(void *)(v0 + 1344);
  uint64_t v9 = *(void *)(v0 + 816);
  uint64_t v10 = *(void *)(v0 + 808);
  swift_bridgeObjectRelease(v1);
  uint64_t v11 = (v2 + 16) & ~v2;
  os_log_t oslogb = (os_log_t)(v2 | 7);
  v3(v7, v4, v8);
  uint64_t v12 = swift_allocObject(&unk_100092528, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = v5;
  uint64_t v14 = swift_allocObject(&unk_100092550, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = *(void *)v189;
  *(void *)(v14 + 24) = v196;
  sub_100030114((uint64_t)logb, v9, type metadata accessor for SessionConfiguration.Backend);
  uint64_t v15 = swift_allocObject(&unk_100092578, v10 + v11, oslogb);
  sub_100049B9C(v9, v15 + v11, type metadata accessor for SessionConfiguration.Backend);
  uint64_t v172 = swift_allocObject(&unk_1000925A0, 24LL, 7LL);
  *(void *)(v172 + swift_weakDestroy(v0 + 16) = v202;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v196);
  uint64_t v16 = swift_errorRetain(v202);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t type = static os_log_type_t.error.getter();
  os_log_t v203 = (os_log_t)swift_allocObject(&unk_1000925C8, 17LL, 7LL);
  *((_BYTE *)v203 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v17 = swift_allocObject(&unk_1000925F0, 17LL, 7LL);
  *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v18 = v17;
  uint64_t v19 = swift_allocObject(&unk_100092618, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_100065BC8;
  *(void *)(v19 + 24) = v12;
  uint64_t v20 = swift_allocObject(&unk_100092640, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v20 + 24) = v19;
  uint64_t v177 = swift_allocObject(&unk_100092668, 17LL, 7LL);
  *(_BYTE *)(v177 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v197 = swift_allocObject(&unk_100092690, 17LL, 7LL);
  *(_BYTE *)(v197 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v21 = swift_allocObject(&unk_1000926B8, 32LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = sub_100066100;
  *(void *)(v21 + 24) = v14;
  uint64_t v22 = swift_allocObject(&unk_1000926E0, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = v22;
  os_log_t log = (os_log_t)v22;
  uint64_t v176 = swift_allocObject(&unk_100092708, 17LL, 7LL);
  *(_BYTE *)(v176 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v170 = swift_allocObject(&unk_100092730, 17LL, 7LL);
  *(_BYTE *)(v170 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v24 = swift_allocObject(&unk_100092758, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = sub_100065B64;
  *(void *)(v24 + 24) = v15;
  uint64_t v25 = swift_allocObject(&unk_100092780, 32LL, 7LL);
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = swift_allocObject(&unk_1000927A8, 17LL, 7LL);
  *(_BYTE *)(v26 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v27 = v26;
  *(void *)uint64_t v190 = v26;
  uint64_t v169 = swift_allocObject(&unk_1000927D0, 17LL, 7LL);
  *(_BYTE *)(v169 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v28 = swift_allocObject(&unk_1000927F8, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = sub_10006581C;
  *(void *)(v28 + 24) = v172;
  uint64_t v29 = swift_allocObject(&unk_100092820, 32LL, 7LL);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = swift_allocObject(v174, 224LL, 7LL);
  *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_100077C80;
  *(void *)(v30 + 32) = sub_1000660F8;
  *(void *)(v30 + 40) = v203;
  *(void *)(v30 + 48) = sub_1000660F8;
  *(void *)(v30 + 56) = v18;
  *(void *)(v30 + 64) = sub_100065FE4;
  *(void *)(v30 + 72) = v20;
  *(void *)(v30 + 80) = sub_1000660F8;
  *(void *)(v30 + 88) = v177;
  *(void *)(v30 + 96) = sub_1000660F8;
  *(void *)(v30 + 104) = v197;
  *(void *)(v30 + 112) = sub_100065FE4;
  *(void *)(v30 + 1memset(&strm.total_in, 0, 20) = v23;
  *(void *)(v30 + 128) = sub_1000660F8;
  *(void *)(v30 + 136) = v176;
  *(void *)(v30 + 144) = sub_1000660F8;
  *(void *)(v30 + 152) = v170;
  *(void *)(v30 + 160) = sub_100065FE4;
  *(void *)(v30 + 168) = v25;
  *(void *)(v30 + 176) = sub_1000660F8;
  *(void *)(v30 + 184) = v27;
  *(void *)(v30 + 192) = sub_1000660F8;
  *(void *)(v30 + 200) = v169;
  *(void *)(v30 + 208) = sub_100065FE4;
  *(void *)(v30 + 2swift_weakDestroy(v0 + 16) = v29;
  swift_retain(v203);
  uint64_t v175 = v18;
  swift_retain(v18);
  uint64_t v173 = v20;
  swift_retain(v20);
  swift_retain(v177);
  swift_retain(v197);
  swift_retain(log);
  swift_retain(v176);
  swift_retain(v170);
  swift_retain(v25);
  swift_retain(*(void *)v190);
  swift_retain(v169);
  swift_retain(v29);
  swift_bridgeObjectRelease(v30);
  if (os_log_type_enabled(oslog, type))
  {
    uint64_t v31 = v207;
    buf = (uint8_t *)swift_slowAlloc(42LL, -1LL);
    uint64_t v168 = swift_slowAlloc(128LL, -1LL);
    *(void *)(v207 + 696) = 0LL;
    *(void *)(v207 + 704) = v168;
    *(_WORD *)buf = 1026;
    buf[2] = *((_BYTE *)v203 + 16);
    *(void *)(v207 + 688) = buf + 3;
    swift_release(v203);
    uint64_t v32 = *(_BYTE **)(v207 + 688);
    _BYTE *v32 = *(_BYTE *)(v18 + 16);
    *(void *)(v207 + 688) = v32 + 1;
    swift_release(v18);
    sub_100065300((uint64_t *)(v31 + 688), v31 + 696, (uint64_t *)(v31 + 704), *(uint64_t (**)(void))(v20 + 16));
    swift_release(v20);
    uint64_t v33 = *(_BYTE **)(v207 + 688);
    *uint64_t v33 = *(_BYTE *)(v177 + 16);
    *(void *)(v207 + 688) = v33 + 1;
    swift_release(v177);
    uint64_t v34 = *(_BYTE **)(v207 + 688);
    *uint64_t v34 = *(_BYTE *)(v197 + 16);
    *(void *)(v207 + 688) = v34 + 1;
    swift_release(v197);
    sub_100065300((uint64_t *)(v31 + 688), v31 + 696, (uint64_t *)(v31 + 704), *((uint64_t (**)(void))log + 2));
    swift_release(log);
    uint64_t v35 = *(_BYTE **)(v207 + 688);
    _BYTE *v35 = *(_BYTE *)(v176 + 16);
    *(void *)(v207 + 688) = v35 + 1;
    swift_release(v176);
    uint64_t v36 = *(_BYTE **)(v207 + 688);
    _BYTE *v36 = *(_BYTE *)(v170 + 16);
    *(void *)(v207 + 688) = v36 + 1;
    swift_release(v170);
    sub_100065300((uint64_t *)(v31 + 688), v31 + 696, (uint64_t *)(v31 + 704), *(uint64_t (**)(void))(v25 + 16));
    swift_release(v25);
    uint64_t v37 = *(_BYTE **)(v207 + 688);
    _BYTE *v37 = *(_BYTE *)(*(void *)v190 + 16LL);
    *(void *)(v207 + 688) = v37 + 1;
    swift_release(*(void *)v190);
    uint64_t v38 = *(_BYTE **)(v207 + 688);
    *uint64_t v38 = *(_BYTE *)(v169 + 16);
    *(void *)(v207 + 688) = v38 + 1;
    swift_release(v169);
    sub_100065300((uint64_t *)(v31 + 688), v31 + 696, (uint64_t *)(v31 + 704), *(uint64_t (**)(void))(v29 + 16));
    uint64_t v39 = *(void *)(v207 + 1520);
    uint64_t v40 = *(void *)(v207 + 864);
    uint64_t v41 = *(void *)(v207 + 840);
    uint64_t v42 = *(void *)(v207 + 832);
    uint64_t v43 = *(void *)(v207 + 824);
    swift_release(v29);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  type,  "failed writing sendOneMessage to transparency log %{public}s:%{public}s for backend %{public}s with error %{public}s",  buf,  0x2Au);
    swift_arrayDestroy(v168, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v168, -1LL, -1LL);
    swift_slowDealloc(buf, -1LL, -1LL);

    swift_errorRelease(v39);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v44(v40, v42);
    uint64_t v45 = v43;
  }

  else
  {
    uint64_t v46 = *(void *)(v207 + 1520);
    uint64_t v47 = *(void *)(v207 + 864);
    uint64_t v48 = *(void *)(v207 + 840);
    uint64_t v49 = *(void *)(v207 + 832);
    uint64_t v50 = *(void *)(v207 + 824);

    swift_release(v29);
    swift_release(v169);
    swift_release(*(void *)v190);
    swift_release(v25);
    swift_release(v170);
    swift_release(v176);
    swift_release(log);
    swift_release(v197);
    swift_release(v177);
    swift_release(v173);
    swift_release(v175);
    swift_release(v203);
    swift_errorRelease(v46);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v44(v47, v49);
    uint64_t v45 = v50;
  }

  sub_100015BF0(v45, type metadata accessor for SessionConfiguration.Backend);
  uint64_t v51 = *(void *)(v207 + 1480) + 1LL;
  if (v51 == *(void *)(v207 + 1456))
  {
    swift_bridgeObjectRelease(*(void *)(v207 + 1256));
    *(void *)(v207 + 1528) = v44;
    uint64_t v52 = *(void *)(v207 + 1304);
    if (v52)
    {
      uint64_t v191 = v44;
      os_log_t logc = *(os_log_t *)(v207 + 1376);
      uint64_t v53 = *(void *)(v207 + 1352);
      uint64_t v54 = *(void *)(v207 + 1344);
      uint64_t v55 = *(void *)(v207 + 1336);
      uint64_t v56 = *(void *)(v207 + 1328);
      uint64_t v198 = *(void *)(v207 + 1312);
      (*(void (**)(void, void, void))(v207 + 1368))( *(void *)(v207 + 984),  *(void *)(v207 + 1360),  *(void *)(v207 + 832));
      uint64_t v57 = swift_allocObject(&unk_100091EE8, 32LL, 7LL);
      *(void *)(v57 + swift_weakDestroy(v0 + 16) = v56;
      *(void *)(v57 + 24) = v55;
      uint64_t v58 = swift_allocObject(&unk_100091F10, 32LL, 7LL);
      *(void *)(v58 + swift_weakDestroy(v0 + 16) = v54;
      *(void *)(v58 + 24) = v53;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v53);
      uint64_t v59 = swift_unknownObjectRetain(v52);
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t osloga = static os_log_type_t.default.getter(v60);
      uint64_t v61 = swift_allocObject(&unk_100091F38, 17LL, 7LL);
      *(_BYTE *)(v61 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v62 = swift_allocObject(&unk_100091F60, 17LL, 7LL);
      *(_BYTE *)(v62 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v63 = swift_allocObject(&unk_100091F88, 32LL, 7LL);
      *(void *)(v63 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v63 + 24) = v57;
      uint64_t v64 = swift_allocObject(&unk_100091FB0, 32LL, 7LL);
      *(void *)(v64 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v64 + 24) = v63;
      uint64_t v65 = swift_allocObject(&unk_100091FD8, 17LL, 7LL);
      *(_BYTE *)(v65 + swift_weakDestroy(v0 + 16) = 34;
      uint64_t v66 = swift_allocObject(&unk_100092000, 17LL, 7LL);
      *(_BYTE *)(v66 + swift_weakDestroy(v0 + 16) = 8;
      uint64_t v67 = swift_allocObject(&unk_100092028, 32LL, 7LL);
      *(void *)(v67 + swift_weakDestroy(v0 + 16) = sub_100066100;
      *(void *)(v67 + 24) = v58;
      uint64_t v68 = swift_allocObject(&unk_100092050, 32LL, 7LL);
      *(void *)(v68 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
      *(void *)(v68 + 24) = v67;
      uint64_t v69 = swift_allocObject(logc, 128LL, 7LL);
      *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
      *(void *)(v69 + 32) = sub_1000660F8;
      *(void *)(v69 + 40) = v61;
      *(void *)(v69 + 48) = sub_1000660F8;
      *(void *)(v69 + 56) = v62;
      *(void *)(v69 + 64) = sub_100065FE4;
      *(void *)(v69 + 72) = v64;
      *(void *)(v69 + 80) = sub_1000660F8;
      *(void *)(v69 + 88) = v65;
      *(void *)(v69 + 96) = sub_1000660F8;
      *(void *)(v69 + 104) = v66;
      *(void *)(v69 + 112) = sub_100065FE4;
      *(void *)(v69 + 1memset(&strm.total_in, 0, 20) = v68;
      swift_retain(v61);
      swift_retain(v62);
      swift_retain(v64);
      swift_retain(v65);
      swift_retain(v66);
      swift_retain(v68);
      swift_bridgeObjectRelease(v69);
      loga = v60;
      if (os_log_type_enabled(v60, osloga))
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
        uint64_t v71 = swift_slowAlloc(64LL, -1LL);
        uint64_t v209 = 0LL;
        uint64_t v210 = v71;
        *(_WORD *)uint64_t v70 = 514;
        v70[2] = *(_BYTE *)(v61 + 16);
        swift_release(v61);
        v70[3] = *(_BYTE *)(v62 + 16);
        uint64_t v208 = v70 + 4;
        swift_release(v62);
        sub_100065300((uint64_t *)&v208, (uint64_t)&v209, &v210, *(uint64_t (**)(void))(v64 + 16));
        swift_release(v64);
        uint64_t v72 = v208;
        *uint64_t v208 = *(_BYTE *)(v65 + 16);
        swift_release(v65);
        v72[1] = *(_BYTE *)(v66 + 16);
        uint64_t v208 = v72 + 2;
        swift_release(v66);
        sub_100065300((uint64_t *)&v208, (uint64_t)&v209, &v210, *(uint64_t (**)(void))(v68 + 16));
        uint64_t v73 = *(void *)(v207 + 984);
        uint64_t v74 = *(void *)(v207 + 832);
        swift_release(v68);
        _os_log_impl( (void *)&_mh_execute_header,  loga,  osloga,  "processing sendOneMessage, immediate %{public}s:%{public}s",  v70,  0x16u);
        swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v70, -1LL, -1LL);

        uint64_t v75 = v73;
        uint64_t v76 = v74;
      }

      else
      {
        uint64_t v145 = *(void *)(v207 + 984);
        uint64_t v146 = *(void *)(v207 + 832);
        swift_release(v61);
        swift_release(v62);
        swift_release(v64);
        swift_release(v65);
        swift_release(v66);
        swift_release(v68);

        uint64_t v75 = v145;
        uint64_t v76 = v146;
      }

      v191(v75, v76);
      uint64_t v147 = *(void *)(v207 + 1448);
      uint64_t v148 = *(void *)(v207 + 1440);
      uint64_t v149 = *(void *)(v207 + 1432);
      uint64_t ObjectType = swift_getObjectType(v52);
      uint64_t v151 = sub_100009FDC(&qword_100096858);
      uint64_t v152 = swift_allocObject(v151, 56LL, 7LL);
      *(void *)(v207 + 1536) = v152;
      *(_OWORD *)(v152 + swift_weakDestroy(v0 + 16) = xmmword_100075D10;
      *(void *)(v152 + 32) = v149;
      *(void *)(v152 + 40) = v148;
      *(void *)(v152 + 48) = v147;
      os_log_type_t v153 = *(int **)(v198 + 8);
      uint64_t v154 = v153[1];
      uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v153 + *v153);
      swift_bridgeObjectRetain(v148);
      swift_bridgeObjectRetain(v147);
      uint64_t v155 = (void *)swift_task_alloc(v154);
      *(void *)(v207 + 1544) = v155;
      *uint64_t v155 = v207;
      v155[1] = sub_10005E704;
      return v195(v152, ObjectType, v198);
    }

    else
    {
      uint64_t v118 = *(void *)(v207 + 1256);
      uint64_t v119 = *(void *)(v118 + 16);
      swift_bridgeObjectRelease(v118);
      uint64_t v120 = *(void *)(v207 + 1336);
      if (v119)
      {
        uint64_t v121 = *(void *)(v207 + 1376);
        uint64_t v122 = *(void *)(v207 + 1352);
        uint64_t v123 = *(void *)(v207 + 1344);
        uint64_t v124 = *(void *)(v207 + 1328);
        (*(void (**)(void, void, void))(v207 + 1368))( *(void *)(v207 + 968),  *(void *)(v207 + 1360),  *(void *)(v207 + 832));
        uint64_t v125 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
        *(void *)(v125 + swift_weakDestroy(v0 + 16) = v124;
        *(void *)(v125 + 24) = v120;
        uint64_t v126 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
        *(void *)(v126 + swift_weakDestroy(v0 + 16) = v123;
        *(void *)(v126 + 24) = v122;
        swift_bridgeObjectRetain(v120);
        swift_bridgeObjectRetain(v122);
        BOOL v206 = (os_log_s *)Logger.logObject.getter(v127);
        os_log_type_t v201 = static os_log_type_t.default.getter(v206);
        uint64_t v128 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
        *(_BYTE *)(v128 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v129 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
        *(_BYTE *)(v129 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v130 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
        *(void *)(v130 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v130 + 24) = v125;
        uint64_t v131 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
        *(void *)(v131 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v131 + 24) = v130;
        uint64_t v132 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
        *(_BYTE *)(v132 + swift_weakDestroy(v0 + 16) = 34;
        uint64_t v133 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
        *(_BYTE *)(v133 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v134 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
        *(void *)(v134 + swift_weakDestroy(v0 + 16) = sub_100066100;
        *(void *)(v134 + 24) = v126;
        uint64_t v135 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
        *(void *)(v135 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
        *(void *)(v135 + 24) = v134;
        uint64_t v136 = swift_allocObject(v121, 128LL, 7LL);
        *(_OWORD *)(v136 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
        *(void *)(v136 + 32) = sub_1000660F8;
        *(void *)(v136 + 40) = v128;
        *(void *)(v136 + 48) = sub_1000660F8;
        *(void *)(v136 + 56) = v129;
        *(void *)(v136 + 64) = sub_100065FE4;
        *(void *)(v136 + 72) = v131;
        *(void *)(v136 + 80) = sub_1000660F8;
        *(void *)(v136 + 88) = v132;
        *(void *)(v136 + 96) = sub_1000660F8;
        *(void *)(v136 + 104) = v133;
        *(void *)(v136 + 112) = sub_100065FE4;
        *(void *)(v136 + 1memset(&strm.total_in, 0, 20) = v135;
        swift_retain(v128);
        swift_retain(v129);
        swift_retain(v131);
        swift_retain(v132);
        swift_retain(v133);
        swift_retain(v135);
        swift_bridgeObjectRelease(v136);
        if (os_log_type_enabled(v206, v201))
        {
          uint64_t v137 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
          uint64_t v138 = swift_slowAlloc(64LL, -1LL);
          uint64_t v209 = 0LL;
          uint64_t v210 = v138;
          *(_WORD *)uint64_t v137 = 514;
          v137[2] = *(_BYTE *)(v128 + 16);
          swift_release(v128);
          v137[3] = *(_BYTE *)(v129 + 16);
          uint64_t v208 = v137 + 4;
          swift_release(v129);
          sub_100065300((uint64_t *)&v208, (uint64_t)&v209, &v210, *(uint64_t (**)(void))(v131 + 16));
          swift_release(v131);
          os_log_type_t v139 = v208;
          *uint64_t v208 = *(_BYTE *)(v132 + 16);
          swift_release(v132);
          v139[1] = *(_BYTE *)(v133 + 16);
          uint64_t v208 = v139 + 2;
          swift_release(v133);
          sub_100065300((uint64_t *)&v208, (uint64_t)&v209, &v210, *(uint64_t (**)(void))(v135 + 16));
          uint64_t v140 = *(uint64_t (**)(uint64_t, uint64_t))(v207 + 1528);
          uint64_t v141 = *(void *)(v207 + 968);
          uint64_t v142 = *(void *)(v207 + 832);
          swift_release(v135);
          _os_log_impl( (void *)&_mh_execute_header,  v206,  v201,  "caching sendOneMessage %{public}s:%{public}s",  v137,  0x16u);
          swift_arrayDestroy(v138, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1LL, -1LL);
          swift_slowDealloc(v137, -1LL, -1LL);

          uint64_t v143 = v141;
          uint64_t v144 = v142;
        }

        else
        {
          uint64_t v140 = *(uint64_t (**)(uint64_t, uint64_t))(v207 + 1528);
          uint64_t v163 = *(void *)(v207 + 968);
          uint64_t v164 = *(void *)(v207 + 832);
          swift_release(v128);
          swift_release(v129);
          swift_release(v131);
          swift_release(v132);
          swift_release(v133);
          swift_release(v135);

          uint64_t v143 = v163;
          uint64_t v144 = v164;
        }

        uint64_t v165 = v140(v143, v144);
        static Date.now.getter(v165);
        uint64_t v166 = (void *)swift_task_alloc(dword_100096BEC);
        *(void *)(v207 + 1560) = v166;
        void *v166 = v207;
        v166[1] = sub_10005F0FC;
        return sub_10002091C( v207 + 120,  *(void *)(v207 + 1056),  *(double *)(v207 + 1216),  *(void *)(v207 + 1432),  *(void *)(v207 + 1440),  *(void *)(v207 + 1448));
      }

      else
      {
        uint64_t v156 = *(void *)(v207 + 1448);
        uint64_t v157 = *(void *)(v207 + 1440);
        uint64_t v158 = *(void *)(v207 + 1352);
        uint64_t v159 = *(void *)(v207 + 1208);
        uint64_t v160 = *(void *)(v207 + 1192);
        uint64_t v161 = *(void *)(v207 + 1176);
        swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v158);
        swift_bridgeObjectRelease(v160);
        swift_bridgeObjectRelease(v161);
        swift_bridgeObjectRelease(v159);
        swift_bridgeObjectRelease(v157);
        swift_bridgeObjectRelease(v156);
        *(void *)(v207 + 1576) = 0LL;
        uint64_t v162 = *(void *)(v207 + 1224);
        *(void *)(v207 + 1584) = *(void *)(*(void *)v162 + 256LL);
        return swift_task_switch(sub_10005F6E8, v162);
      }
    }
  }

  else
  {
    *(void *)(v207 + 1480) = v51;
    *(void *)(v207 + 1472) = 0LL;
    uint64_t v77 = *(unsigned __int8 *)(v207 + 1640);
    uint64_t v199 = *(void *)(v207 + 1376);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1368);
    uint64_t v79 = *(void *)(v207 + 1360);
    uint64_t v80 = *(void *)(v207 + 1352);
    os_log_t v204 = *(os_log_t *)(v207 + 1344);
    uint64_t v81 = *(void *)(v207 + 1336);
    uint64_t v82 = *(void *)(v207 + 1328);
    uint64_t v83 = *(void *)(v207 + 992);
    uint64_t v84 = (v77 + 16) & ~v77;
    *(void *)uint64_t v192 = *(void *)(v207 + 808) + v84;
    uint64_t v85 = *(void *)(v207 + 832);
    uint64_t v86 = *(void *)(v207 + 824);
    os_log_t logd = (os_log_t)(v77 | 7);
    uint64_t v87 = *(void *)(v207 + 816);
    sub_100030114( *(void *)(v207 + 1256) + ((v77 + 32) & ~v77) + *(void *)(v207 + 1464) * v51,  v86,  type metadata accessor for SessionConfiguration.Backend);
    v78(v83, v79, v85);
    uint64_t v88 = swift_allocObject(&unk_1000922D0, 32LL, 7LL);
    *(void *)(v88 + swift_weakDestroy(v0 + 16) = v82;
    *(void *)(v88 + 24) = v81;
    uint64_t v89 = swift_allocObject(&unk_1000922F8, 32LL, 7LL);
    *(void *)(v89 + swift_weakDestroy(v0 + 16) = v204;
    *(void *)(v89 + 24) = v80;
    sub_100030114(v86, v87, type metadata accessor for SessionConfiguration.Backend);
    os_log_t loge = (os_log_t)swift_allocObject(&unk_100092320, *(void *)v192, logd);
    sub_100049B9C(v87, (uint64_t)loge + v84, type metadata accessor for SessionConfiguration.Backend);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v80);
    os_log_type_t v205 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v193 = static os_log_type_t.default.getter(v205);
    uint64_t v91 = swift_allocObject(&unk_100092348, 17LL, 7LL);
    *(_BYTE *)(v91 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v92 = swift_allocObject(&unk_100092370, 17LL, 7LL);
    *(_BYTE *)(v92 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v93 = swift_allocObject(&unk_100092398, 32LL, 7LL);
    *(void *)(v93 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v93 + 24) = v88;
    uint64_t v94 = swift_allocObject(&unk_1000923C0, 32LL, 7LL);
    *(void *)(v94 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v94 + 24) = v93;
    uint64_t v95 = swift_allocObject(&unk_1000923E8, 17LL, 7LL);
    *(_BYTE *)(v95 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v96 = swift_allocObject(&unk_100092410, 17LL, 7LL);
    *(_BYTE *)(v96 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v97 = swift_allocObject(&unk_100092438, 32LL, 7LL);
    *(void *)(v97 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v97 + 24) = v89;
    uint64_t v98 = swift_allocObject(&unk_100092460, 32LL, 7LL);
    *(void *)(v98 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v98 + 24) = v97;
    uint64_t v99 = swift_allocObject(&unk_100092488, 17LL, 7LL);
    *(_BYTE *)(v99 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v100 = swift_allocObject(&unk_1000924B0, 17LL, 7LL);
    *(_BYTE *)(v100 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v101 = swift_allocObject(&unk_1000924D8, 32LL, 7LL);
    *(void *)(v101 + swift_weakDestroy(v0 + 16) = sub_100065B64;
    *(void *)(v101 + 24) = loge;
    uint64_t v102 = swift_allocObject(&unk_100092500, 32LL, 7LL);
    *(void *)(v102 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v102 + 24) = v101;
    uint64_t v103 = swift_allocObject(v199, 176LL, 7LL);
    *(_OWORD *)(v103 + swift_weakDestroy(v0 + 16) = xmmword_1000790E0;
    *(void *)(v103 + 32) = sub_1000660F8;
    *(void *)(v103 + 40) = v91;
    *(void *)(v103 + 48) = sub_1000660F8;
    *(void *)(v103 + 56) = v92;
    *(void *)(v103 + 64) = sub_100065FE4;
    *(void *)(v103 + 72) = v94;
    *(void *)(v103 + 80) = sub_1000660F8;
    *(void *)(v103 + 88) = v95;
    *(void *)(v103 + 96) = sub_1000660F8;
    *(void *)(v103 + 104) = v96;
    *(void *)(v103 + 112) = sub_100065FE4;
    *(void *)(v103 + 1memset(&strm.total_in, 0, 20) = v98;
    *(void *)(v103 + 128) = sub_1000660F8;
    *(void *)(v103 + 136) = v99;
    *(void *)(v103 + 144) = sub_1000660F8;
    *(void *)(v103 + 152) = v100;
    *(void *)(v103 + 160) = sub_100065FE4;
    *(void *)(v103 + 168) = v102;
    swift_retain(v91);
    swift_retain(v92);
    swift_retain(v94);
    swift_retain(v95);
    swift_retain(v96);
    swift_retain(v98);
    swift_retain(v99);
    uint64_t v200 = v100;
    swift_retain(v100);
    swift_retain(v102);
    swift_bridgeObjectRelease(v103);
    if (os_log_type_enabled(v205, v193))
    {
      os_log_t oslogc = (uint8_t *)swift_slowAlloc(32LL, -1LL);
      os_log_t logf = (os_log_t)swift_slowAlloc(96LL, -1LL);
      *(void *)(v207 + 7memset(&strm.total_in, 0, 20) = 0LL;
      *(void *)(v207 + 728) = logf;
      *(_WORD *)os_log_t oslogc = 770;
      oslogc[2] = *(_BYTE *)(v91 + 16);
      *(void *)(v207 + 712) = oslogc + 3;
      swift_release(v91);
      uint64_t v104 = *(_BYTE **)(v207 + 712);
      _BYTE *v104 = *(_BYTE *)(v92 + 16);
      *(void *)(v207 + 712) = v104 + 1;
      swift_release(v92);
      sub_100065300((uint64_t *)(v207 + 712), v207 + 720, (uint64_t *)(v207 + 728), *(uint64_t (**)(void))(v94 + 16));
      swift_release(v94);
      uint64_t v105 = *(_BYTE **)(v207 + 712);
      _BYTE *v105 = *(_BYTE *)(v95 + 16);
      *(void *)(v207 + 712) = v105 + 1;
      swift_release(v95);
      uint64_t v106 = *(_BYTE **)(v207 + 712);
      _BYTE *v106 = *(_BYTE *)(v96 + 16);
      *(void *)(v207 + 712) = v106 + 1;
      swift_release(v96);
      sub_100065300((uint64_t *)(v207 + 712), v207 + 720, (uint64_t *)(v207 + 728), *(uint64_t (**)(void))(v98 + 16));
      swift_release(v98);
      uint64_t v107 = *(_BYTE **)(v207 + 712);
      _BYTE *v107 = *(_BYTE *)(v99 + 16);
      *(void *)(v207 + 712) = v107 + 1;
      swift_release(v99);
      uint64_t v108 = *(_BYTE **)(v207 + 712);
      *uint64_t v108 = *(_BYTE *)(v100 + 16);
      *(void *)(v207 + 712) = v108 + 1;
      swift_release(v100);
      sub_100065300((uint64_t *)(v207 + 712), v207 + 720, (uint64_t *)(v207 + 728), *(uint64_t (**)(void))(v102 + 16));
      uint64_t v109 = *(void *)(v207 + 992);
      uint64_t v110 = *(void *)(v207 + 840);
      uint64_t v111 = *(void *)(v207 + 832);
      swift_release(v102);
      _os_log_impl( (void *)&_mh_execute_header,  v205,  v193,  "writing sendOneMessage to transparency log %{public}s:%{public}s for backend %{public}s",  oslogc,  0x20u);
      swift_arrayDestroy(logf, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(logf, -1LL, -1LL);
      swift_slowDealloc(oslogc, -1LL, -1LL);

      uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
      v112(v109, v111);
    }

    else
    {
      *(void *)uint64_t v194 = *(void *)(v207 + 992);
      uint64_t v113 = *(void *)(v207 + 840);
      uint64_t v114 = *(void *)(v207 + 832);
      swift_release(v91);
      swift_release(v92);
      swift_release(v94);
      swift_release(v95);
      swift_release(v96);
      swift_release(v98);
      swift_release(v99);
      swift_release(v200);
      swift_release(v102);

      uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
      v112(*(void *)v194, v114);
    }

    *(void *)(v207 + 1488) = v112;
    uint64_t v115 = *(void *)(*(void *)(v207 + 784) + 168LL);
    *(void *)(v207 + 1496) = v115;
    *(void *)(v207 + 1504) = sub_100066104();
    *(void *)(v207 + 1512) = v116;
    return swift_task_switch(sub_10005D5F8, v115);
  }

uint64_t sub_100063BE4()
{
  uint64_t v1 = *(void *)(v0 + 1552);
  uint64_t v2 = *(void *)(v0 + 1376);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368);
  uint64_t v4 = *(void *)(v0 + 1360);
  uint64_t v5 = *(void *)(v0 + 856);
  uint64_t v6 = *(void *)(v0 + 832);
  swift_bridgeObjectRelease(*(void *)(v0 + 1536));
  v3(v5, v4, v6);
  uint64_t v7 = swift_allocObject(&unk_100092078, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v8 = swift_errorRetain(v1);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = swift_allocObject(&unk_1000920A0, 17LL, 7LL);
  *(_BYTE *)(v11 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v12 = swift_allocObject(&unk_1000920C8, 17LL, 7LL);
  *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v13 = swift_allocObject(&unk_1000920F0, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_10006581C;
  *(void *)(v13 + 24) = v7;
  uint64_t v14 = swift_allocObject(&unk_100092118, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = swift_allocObject(v2, 80LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
  *(void *)(v15 + 32) = sub_1000660F8;
  *(void *)(v15 + 40) = v11;
  *(void *)(v15 + 48) = sub_1000660F8;
  *(void *)(v15 + 56) = v12;
  *(void *)(v15 + 64) = sub_100065FE4;
  *(void *)(v15 + 72) = v14;
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v14);
  swift_bridgeObjectRelease(v15);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = 0LL;
    uint64_t v69 = v17;
    *(_WORD *)uint64_t v16 = 258;
    _BYTE v16[2] = *(_BYTE *)(v11 + 16);
    swift_release(v11);
    v16[3] = *(_BYTE *)(v12 + 16);
    uint64_t v67 = v16 + 4;
    swift_release(v12);
    sub_100065300((uint64_t *)&v67, (uint64_t)&v68, &v69, *(uint64_t (**)(void))(v14 + 16));
    uint64_t v18 = *(void *)(v0 + 1552);
    os_log_t osloga = *(os_log_t *)(v0 + 1528);
    uint64_t v19 = *(void *)(v0 + 1304);
    uint64_t v20 = *(void *)(v0 + 856);
    uint64_t v21 = *(void *)(v0 + 832);
    swift_release(v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "immediate backend failed to send events: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_unknownObjectRelease(v19);

    swift_errorRelease(v18);
    ((void (*)(uint64_t, uint64_t))osloga)(v20, v21);
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 1552);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v24 = *(void *)(v0 + 856);
    uint64_t v25 = *(void *)(v0 + 832);
    swift_unknownObjectRelease(*(void *)(v0 + 1304));
    swift_errorRelease(v22);

    swift_release(v14);
    swift_release(v12);
    swift_release(v11);
    v23(v24, v25);
  }

  uint64_t v26 = *(void *)(v0 + 1256);
  uint64_t v27 = *(void *)(v26 + 16);
  swift_bridgeObjectRelease(v26);
  if (v27)
  {
    uint64_t v64 = *(void *)(v0 + 1376);
    uint64_t v28 = *(void *)(v0 + 1352);
    uint64_t v29 = *(void *)(v0 + 1344);
    uint64_t v30 = *(void *)(v0 + 1336);
    uint64_t v31 = *(void *)(v0 + 1328);
    (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 968),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
    uint64_t v32 = swift_allocObject(&unk_100091B00, 32LL, 7LL);
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v32 + 24) = v30;
    uint64_t v33 = swift_allocObject(&unk_100091B28, 32LL, 7LL);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v29;
    *(void *)(v33 + 24) = v28;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v28);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v35 = static os_log_type_t.default.getter(oslog);
    uint64_t v36 = swift_allocObject(&unk_100091B50, 17LL, 7LL);
    *(_BYTE *)(v36 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v37 = swift_allocObject(&unk_100091B78, 17LL, 7LL);
    *(_BYTE *)(v37 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v38 = swift_allocObject(&unk_100091BA0, 32LL, 7LL);
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v38 + 24) = v32;
    uint64_t v39 = swift_allocObject(&unk_100091BC8, 32LL, 7LL);
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v39 + 24) = v38;
    uint64_t v40 = swift_allocObject(&unk_100091BF0, 17LL, 7LL);
    *(_BYTE *)(v40 + swift_weakDestroy(v0 + 16) = 34;
    uint64_t v41 = swift_allocObject(&unk_100091C18, 17LL, 7LL);
    *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = 8;
    uint64_t v42 = swift_allocObject(&unk_100091C40, 32LL, 7LL);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = sub_100066100;
    *(void *)(v42 + 24) = v33;
    uint64_t v43 = swift_allocObject(&unk_100091C68, 32LL, 7LL);
    *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
    *(void *)(v43 + 24) = v42;
    uint64_t v44 = swift_allocObject(v64, 128LL, 7LL);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_1000790D0;
    *(void *)(v44 + 32) = sub_1000660F8;
    *(void *)(v44 + 40) = v36;
    *(void *)(v44 + 48) = sub_1000660F8;
    *(void *)(v44 + 56) = v37;
    *(void *)(v44 + 64) = sub_100065FE4;
    *(void *)(v44 + 72) = v39;
    *(void *)(v44 + 80) = sub_1000660F8;
    *(void *)(v44 + 88) = v40;
    *(void *)(v44 + 96) = sub_1000660F8;
    *(void *)(v44 + 104) = v41;
    *(void *)(v44 + 112) = sub_100065FE4;
    *(void *)(v44 + 1memset(&strm.total_in, 0, 20) = v43;
    swift_retain(v36);
    swift_retain(v37);
    swift_retain(v39);
    swift_retain(v40);
    swift_retain(v41);
    swift_retain(v43);
    swift_bridgeObjectRelease(v44);
    if (os_log_type_enabled(oslog, v35))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      uint64_t v68 = 0LL;
      uint64_t v69 = v46;
      *(_WORD *)uint64_t v45 = 514;
      v45[2] = *(_BYTE *)(v36 + 16);
      swift_release(v36);
      v45[3] = *(_BYTE *)(v37 + 16);
      uint64_t v67 = v45 + 4;
      swift_release(v37);
      sub_100065300((uint64_t *)&v67, (uint64_t)&v68, &v69, *(uint64_t (**)(void))(v39 + 16));
      swift_release(v39);
      uint64_t v47 = v67;
      _BYTE *v67 = *(_BYTE *)(v40 + 16);
      swift_release(v40);
      v47[1] = *(_BYTE *)(v41 + 16);
      uint64_t v67 = v47 + 2;
      swift_release(v41);
      sub_100065300((uint64_t *)&v67, (uint64_t)&v68, &v69, *(uint64_t (**)(void))(v43 + 16));
      uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v49 = *(void *)(v0 + 968);
      uint64_t v50 = *(void *)(v0 + 832);
      swift_release(v43);
      _os_log_impl((void *)&_mh_execute_header, oslog, v35, "caching sendOneMessage %{public}s:%{public}s", v45, 0x16u);
      swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      uint64_t v51 = v48(v49, v50);
    }

    else
    {
      uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1528);
      uint64_t v61 = *(void *)(v0 + 968);
      uint64_t v62 = *(void *)(v0 + 832);

      swift_release(v43);
      swift_release(v41);
      swift_release(v40);
      swift_release(v39);
      swift_release(v37);
      swift_release(v36);
      uint64_t v51 = v60(v61, v62);
    }

    static Date.now.getter(v51);
    uint64_t v63 = (void *)swift_task_alloc(dword_100096BEC);
    *(void *)(v0 + 1560) = v63;
    *uint64_t v63 = v0;
    v63[1] = sub_10005F0FC;
    return sub_10002091C( v0 + 120,  *(void *)(v0 + 1056),  *(double *)(v0 + 1216),  *(void *)(v0 + 1432),  *(void *)(v0 + 1440),  *(void *)(v0 + 1448));
  }

  else
  {
    uint64_t v52 = *(void *)(v0 + 1440);
    uint64_t v53 = *(void *)(v0 + 1352);
    uint64_t v54 = *(void *)(v0 + 1336);
    uint64_t v55 = *(void *)(v0 + 1208);
    uint64_t v56 = *(void *)(v0 + 1192);
    uint64_t v57 = *(void *)(v0 + 1176);
    swift_bridgeObjectRelease(*(void *)(v0 + 1448));
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v54);
    *(void *)(v0 + 1576) = 0LL;
    uint64_t v58 = *(void *)(v0 + 1224);
    *(void *)(v0 + 1584) = *(void *)(*(void *)v58 + 256LL);
    return swift_task_switch(sub_10005F6E8, v58);
  }

uint64_t sub_1000643A4()
{
  uint64_t v1 = *(void *)(v0 + 1568);
  uint64_t v2 = *(void *)(v0 + 1376);
  (*(void (**)(void, void, void))(v0 + 1368))( *(void *)(v0 + 848),  *(void *)(v0 + 1360),  *(void *)(v0 + 832));
  uint64_t v3 = swift_allocObject(&unk_100091C90, 24LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = swift_allocObject(&unk_100091CB8, 17LL, 7LL);
  *(_BYTE *)(v7 + swift_weakDestroy(v0 + 16) = 34;
  uint64_t v8 = swift_allocObject(&unk_100091CE0, 17LL, 7LL);
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v9 = swift_allocObject(&unk_100091D08, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_10006581C;
  *(void *)(v9 + 24) = v3;
  uint64_t v10 = swift_allocObject(&unk_100091D30, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_100065FE0;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject(v2, 80LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
  *(void *)(v11 + 32) = sub_1000660F8;
  *(void *)(v11 + 40) = v7;
  *(void *)(v11 + 48) = sub_1000660F8;
  *(void *)(v11 + 56) = v8;
  *(void *)(v11 + 64) = sub_100065FE4;
  *(void *)(v11 + 72) = v10;
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_bridgeObjectRelease(v11);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = 0LL;
    uint64_t v25 = v13;
    *(_WORD *)uint64_t v12 = 258;
    v12[2] = *(_BYTE *)(v7 + 16);
    swift_release(v7);
    uint64_t v12[3] = *(_BYTE *)(v8 + 16);
    uint64_t v23 = v12 + 4;
    swift_release(v8);
    sub_100065300((uint64_t *)&v23, (uint64_t)&v24, &v25, *(uint64_t (**)(void))(v10 + 16));
    uint64_t v14 = *(void *)(v0 + 1568);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v16 = *(void *)(v0 + 848);
    uint64_t v17 = *(void *)(v0 + 832);
    swift_release(v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "failed to cache sendOneMessage event: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v14);
    v15(v16, v17);
  }

  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v19 = *(void *)(v0 + 848);
    uint64_t v20 = *(void *)(v0 + 832);
    swift_errorRelease(*(void *)(v0 + 1568));

    swift_release(v10);
    swift_release(v8);
    swift_release(v7);
    v18(v19, v20);
  }

  *(void *)(v0 + 1576) = 0LL;
  uint64_t v21 = *(void *)(v0 + 1224);
  *(void *)(v0 + 1584) = *(void *)(*(void *)v21 + 256LL);
  return swift_task_switch(sub_10005F6E8, v21);
}

void sub_100064694(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = XPC_ERROR_CONNECTION_INVALID.getter();
  uint64_t v5 = swift_unknownObjectRelease(v4);
  if ((void *)v4 == a1)
  {
    if (qword_10009E190 != -1) {
      swift_once(&qword_10009E190, sub_100058614);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v17, (uint64_t)qword_10009E198);
    uint64_t v18 = swift_retain(v2);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v23 = *(void *)(v2 + 128);
      unint64_t v24 = *(void *)(v2 + 136);
      swift_bridgeObjectRetain(v24);
      uint64_t v33 = sub_100009984(v23, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v21 + 4, v21 + 12);
      swift_release(v2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "XPC client %{public}s closed connection", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_release(v2);
    }

    sub_100026EEC(v2);
  }

  else
  {
    uint64_t v6 = XPC_ERROR_CONNECTION_INTERRUPTED.getter(v5);
    swift_unknownObjectRelease(v6);
    if ((void *)v6 == a1)
    {
      if (qword_10009E190 != -1) {
        swift_once(&qword_10009E190, sub_100058614);
      }
      uint64_t v25 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v25, (uint64_t)qword_10009E198);
      uint64_t v26 = swift_retain(v2);
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v30 = swift_slowAlloc(32LL, -1LL);
        uint64_t v34 = v30;
        *(_DWORD *)uint64_t v29 = 136446210;
        uint64_t v31 = *(void *)(v2 + 128);
        unint64_t v32 = *(void *)(v2 + 136);
        swift_bridgeObjectRetain(v32);
        uint64_t v33 = sub_100009984(v31, v32, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29 + 4, v29 + 12);
        swift_release(v2);
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "XPC client %{public}s interrupted connection", v29, 0xCu);
        swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1LL, -1LL);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {

        swift_release(v2);
      }
    }

    else
    {
      uint64_t v7 = xpc_copy_description(a1);
      uint64_t v8 = String.init(cString:)(v7);
      unint64_t v10 = v9;
      if (qword_10009E190 != -1) {
        swift_once(&qword_10009E190, sub_100058614);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      sub_100009FC4(v11, (uint64_t)qword_10009E198);
      swift_bridgeObjectRetain(v10);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        uint64_t v34 = v16;
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain(v10);
        uint64_t v33 = sub_100009984(v8, v10, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease_n(v10, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "XPC connection triggered error: %s", v15, 0xCu);
        swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v10, 2LL);
      }

      sub_100026EEC(v2);
      free(v7);
    }
  }

void sub_100064B6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v5 = sub_100009FDC(&qword_100096AA8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v44 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for ServiceEventValue(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for XPCObject(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v42 = String.init(cString:)(a1);
  uint64_t v24 = v23;
  uint64_t v25 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v25, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    swift_bridgeObjectRelease(v24);
    uint64_t v26 = (uint64_t *)&unk_100097140;
    uint64_t v27 = (uint64_t)v15;
  }

  else
  {
    sub_100049B9C((uint64_t)v15, (uint64_t)v22, type metadata accessor for XPCObject);
    sub_100030114((uint64_t)v22, (uint64_t)v20, type metadata accessor for XPCObject);
    sub_10002C830((uint64_t)v20, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
    {
      uint64_t v39 = (uint64_t)v9;
      uint64_t v40 = v43;
      sub_100049B9C(v39, v43, type metadata accessor for ServiceEventValue);
      uint64_t v41 = v44;
      sub_100030114(v40, v44, type metadata accessor for ServiceEventValue);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v41, 0LL, 1LL, v10);
      sub_10002D2EC(v41, v42, v24);
      sub_100015BF0(v40, type metadata accessor for ServiceEventValue);
      sub_100015BF0((uint64_t)v22, type metadata accessor for XPCObject);
      return;
    }

    sub_100015BF0((uint64_t)v22, type metadata accessor for XPCObject);
    swift_bridgeObjectRelease(v24);
    uint64_t v26 = &qword_100096AA8;
    uint64_t v27 = (uint64_t)v9;
  }

  sub_10000C234(v27, v26);
  os_log_type_t type = xpc_get_type(a2);
  name = xpc_type_get_name(type);
  uint64_t v30 = String.init(cString:)(name);
  unint64_t v32 = v31;
  if (qword_10009E190 != -1) {
    swift_once(&qword_10009E190, sub_100058614);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v33, (uint64_t)qword_10009E198);
  swift_bridgeObjectRetain(v32);
  os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v38;
    *(_DWORD *)uint64_t v37 = 136446210;
    swift_bridgeObjectRetain(v32);
    uint64_t v46 = sub_100009984(v30, v32, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v32, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "skipping invalid payload value of type %{public}s", v37, 0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v32, 2LL);
  }

uint64_t sub_100064F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100010540(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for ServiceEventValue(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    sub_100030114(v9 + *(void *)(v11 + 72) * v8, a4, type metadata accessor for ServiceEventValue);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v13 = a4;
    uint64_t v14 = 0LL;
    uint64_t v15 = v10;
  }

  else
  {
    uint64_t v15 = type metadata accessor for ServiceEventValue(0LL);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
    uint64_t v13 = a4;
    uint64_t v14 = 1LL;
  }

  return v12(v13, v14, 1LL, v15);
}

uint64_t sub_100065038()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_release(*(void *)(v0 + 144));
  swift_release(*(void *)(v0 + 152));
  swift_release(*(void *)(v0 + 160));
  swift_release(*(void *)(v0 + 168));
  swift_release(*(void *)(v0 + 176));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100065094()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000650AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

Swift::Int sub_1000650D4(uint64_t a1, uint64_t a2)
{
  void v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

void sub_100065134(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10004EF74( (unint64_t *)&unk_100098110,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079140);
  Swift::UInt v4 = Identifiable<>.id.getter(a2, v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_100065190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_1000651F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10004EF74( (unint64_t *)&unk_100098110,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_100079140);
  uint64_t v4 = Identifiable<>.id.getter(v2, v3);
  return v4 == Identifiable<>.id.getter(v2, v3);
}

uint64_t sub_100065270(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)(swift_bridgeObjectRetain(result) + 40);
    do
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))*(v9 - 1);
      uint64_t v10 = *v9;
      swift_retain(*v9);
      v11(a2, a3, a4);
      swift_release(v10);
      v9 += 2;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease(v8);
  }

  return result;
}

uint64_t sub_100065300(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = sub_100009984(v6, v7, a3);
  uint64_t v10 = *a1;
  uint64_t v11 = *a1 + 8;
  uint64_t v13 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10, v11);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v11;
  return result;
}

uint64_t sub_100065370()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_1000653A4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(_BYTE *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc(dword_100098124);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10000A560;
  uint64_t v5 = (void *)swift_task_alloc(dword_100098234);
  void v4[2] = v5;
  void *v5 = v4;
  v5[1] = sub_10001B608;
  return sub_100059210(v2, v3);
}

void *sub_100065424()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_100065430(uint64_t a1, uint64_t a2)
{
  return sub_10004EF74( &qword_100096F38,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_1000791C8);
}

uint64_t sub_100065460(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ServiceTransportConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for ServiceTransportConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ServiceTransportConfiguration()
{
  return &type metadata for ServiceTransportConfiguration;
}

uint64_t destroy for ClientIdentity(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

uint64_t sub_100065780()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_BYTE **sub_100065790(_BYTE **result)
{
  unint64_t v2 = *result;
  _BYTE *v2 = *(_BYTE *)(v1 + 16);
  *__n128 result = v2 + 1;
  return result;
}

uint64_t sub_1000657A4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000657B4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000657D4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100065300(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000657DC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000657EC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000657FC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10006580C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065820()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065830()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065840()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void *sub_100065874@<X0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 48);
  *(void *)(a1 + 48) = *(void *)(v1 + 64);
  return sub_10001F5F0((void *)(v1 + 16));
}

uint64_t sub_100065894()
{
  (*(void (**)(void *__return_ptr))(v0 + 16))(v3);
  uint64_t v1 = sub_10005859C();
  sub_1000173BC(v3);
  return v1;
}

uint64_t sub_1000658E0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000658F0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065900()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065910()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065920()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100065944()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100065954(uint64_t a1, void *a2)
{
  return 1LL;
}

uint64_t sub_100065970()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100065980(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100065990(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100065998()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000659BC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000659CC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000659DC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000659EC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000659FC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A0C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A1C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A2C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100065A60()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A70()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A80()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065A90()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AA0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AB0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AC0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AD0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AE0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065AF0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B00()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B10()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B20()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B30()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B40()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B50()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B68()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B78()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B88()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065B98()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065BA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065BB8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065BC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100065BF8()
{
  uint64_t v1 = type metadata accessor for SessionConfiguration.Backend(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    uint64_t v7 = (void *)(v6 + 16);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    uint64_t v8 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v9 = v6 + *(int *)(v8 + 24);
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
    uint64_t v7 = (void *)(v6 + *(int *)(v8 + 28));
  }

  swift_bridgeObjectRelease(*v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100065CC0()
{
  return sub_100066104();
}

uint64_t sub_100065CF8()
{
  return Error.localizedDescription.getter(v2[1], v2[2]);
}

uint64_t sub_100065D34()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D44()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D54()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D64()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D74()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D84()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065D94()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065DA4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100065DB4()
{
  return swift_deallocObject(v0, 120LL, 7LL);
}

unint64_t sub_100065DF8( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

uint64_t sub_100065EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100009FDC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100065F40(uint64_t *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v4 == *v3 && v5 == v3[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5) & 1;
  }
}

unint64_t sub_100065F94(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_100066104()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for SessionConfiguration.Backend(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100066234(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    sub_100015BF0((uint64_t)v7, type metadata accessor for SessionConfiguration.Backend);
    return 0x6C61636F6CLL;
  }

  else
  {
    sub_100066278((uint64_t)v7, (uint64_t)v4);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain(v4[1]);
    sub_100015BF0((uint64_t)v4, type metadata accessor for SessionConfiguration.BackendHTTP);
  }

  return v8;
}

uint64_t type metadata accessor for SessionConfiguration.BackendHTTP(uint64_t a1)
{
  return sub_10003B774( a1,  (uint64_t *)&unk_10009E540,  (uint64_t)&nominal type descriptor for SessionConfiguration.BackendHTTP);
}

uint64_t type metadata accessor for SessionConfiguration.Backend(uint64_t a1)
{
  return sub_10003B774( a1,  (uint64_t *)&unk_10009E530,  (uint64_t)&nominal type descriptor for SessionConfiguration.Backend);
}

uint64_t sub_100066234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.Backend(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000662BC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(double *)(a7 + swift_weakDestroy(v0 + 16) = a8;
  uint64_t v13 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  uint64_t v14 = a7 + v13[6];
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, a3, v15);
  *(void *)(a7 + v13[7]) = a4;
  *(_BYTE *)(a7 + v13[8]) = a5;
  *(_BYTE *)(a7 + v13[9]) = a6;
  return result;
}

uint64_t variable initialization expression of SessionConfiguration.version()
{
  return 1701736302LL;
}

uint64_t sub_100066364@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

void sub_100066374(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 8) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = 1;
  *(void *)(a1 + 24) = 1701736302LL;
  *(void *)(a1 + 32) = 0xE400000000000000LL;
}

unint64_t sub_1000663A0()
{
  unint64_t result = qword_100098248;
  if (!qword_100098248)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionConfiguration.Availability,  &type metadata for SessionConfiguration.Availability);
    atomic_store(result, (unint64_t *)&qword_100098248);
  }

  return result;
}

uint64_t destroy for SessionConfiguration(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for SessionConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v5 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for SessionConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for SessionConfiguration()
{
  return &type metadata for SessionConfiguration;
}

uint64_t storeEnumTagSinglePayload for SessionConfiguration.Availability( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10006659C + 4 * byte_100079275[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000665D0 + 4 * asc_100079270[v4]))();
}

uint64_t sub_1000665D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000665D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000665E0LL);
  }
  return result;
}

uint64_t sub_1000665EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000665F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000665F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066600(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionConfiguration.Availability()
{
  return &type metadata for SessionConfiguration.Availability;
}

void *sub_10006661C(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      a1[1] = v8;
      a1[2] = v9;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v15 = a2[1];
      uint64_t v14 = a2[2];
      a1[1] = v15;
      a1[2] = v14;
      uint64_t v16 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v17 = v16[6];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for URL(0LL);
      uint64_t v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v20 - 8) + 16LL);
      __n128 v22 = swift_bridgeObjectRetain(v15);
      v21(v18, v19, v20, v22);
      uint64_t v23 = v16[7];
      uint64_t v24 = *(void *)((char *)a2 + v23);
      *(void *)((char *)a1 + v23) = v24;
      *((_BYTE *)a1 + v16[8]) = *((_BYTE *)a2 + v16[8]);
      *((_BYTE *)a1 + v16[9]) = *((_BYTE *)a2 + v16[9]);
      swift_bridgeObjectRetain(v24);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_100066754(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    int v3 = (void *)(a1 + 16);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v5 = a1 + *(int *)(v4 + 24);
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
    int v3 = (void *)(a1 + *(int *)(v4 + 28));
  }

  return swift_bridgeObjectRelease(*v3);
}

void *sub_1000667D8(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    a1[1] = v7;
    a1[2] = v8;
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v11 = a2[1];
    uint64_t v10 = a2[2];
    a1[1] = v11;
    a1[2] = v10;
    uint64_t v12 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v13 = v12[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL(0LL);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v16 - 8) + 16LL);
    __n128 v18 = swift_bridgeObjectRetain(v11);
    v17(v14, v15, v16, v18);
    uint64_t v9 = 0LL;
    uint64_t v19 = v12[7];
    uint64_t v8 = *(void *)((char *)a2 + v19);
    *(void *)((char *)a1 + v19) = v8;
    *((_BYTE *)a1 + v12[8]) = *((_BYTE *)a2 + v12[8]);
    *((_BYTE *)a1 + v12[9]) = *((_BYTE *)a2 + v12[9]);
  }

  swift_bridgeObjectRetain(v8);
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

void *sub_1000668DC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      a1[1] = v7;
      uint64_t v8 = a2[2];
      a1[2] = v8;
      swift_bridgeObjectRetain(v7);
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = a2[1];
      a1[1] = v10;
      a1[2] = a2[2];
      uint64_t v11 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v12 = v11[6];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for URL(0LL);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
      __n128 v17 = swift_bridgeObjectRetain(v10);
      v16(v13, v14, v15, v17);
      uint64_t v9 = 0LL;
      uint64_t v18 = v11[7];
      uint64_t v8 = *(void *)((char *)a2 + v18);
      *(void *)((char *)a1 + v18) = v8;
      *((_BYTE *)a1 + v11[8]) = *((_BYTE *)a2 + v11[8]);
      *((_BYTE *)a1 + v11[9]) = *((_BYTE *)a2 + v11[9]);
    }

    swift_bridgeObjectRetain(v8);
    swift_storeEnumTagMultiPayload(a1, a3, v9);
  }

  return a1;
}

void *sub_100066A08(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v7 = v6[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100066AE4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100015BF0((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v7 = v6[6];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100066BD8(uint64_t a1)
{
  uint64_t result = type metadata accessor for SessionConfiguration.BackendHTTP(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100079340;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

void *sub_100066C44(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = *(void *)((char *)a2 + v13);
    *(void *)((char *)v4 + v13) = v15;
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v15);
  }

  return v4;
}

uint64_t sub_100066D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28)));
}

void *sub_100066D78(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = *(void *)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  swift_bridgeObjectRetain(v14);
  return a1;
}

void *sub_100066E24(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)((char *)a2 + v12);
  uint64_t v14 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100066EE4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

void *sub_100066F78(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  return a1;
}

uint64_t sub_10006701C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067028);
}

uint64_t sub_100067028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1000670A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000670B0);
}

uint64_t sub_1000670B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100067124(uint64_t a1)
{
  v4[0] = &unk_100079368;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[4] = &unk_100079380;
    void v4[5] = &unk_100079380;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *assignWithCopy for SessionConfiguration.BackendLocal(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for SessionConfiguration.BackendLocal(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SessionConfiguration.BackendLocal()
{
  return &type metadata for SessionConfiguration.BackendLocal;
}

id sub_100067274()
{
  id result = [objc_allocWithZone((Class)CKSoftLinkAssetFetch) init];
  qword_10009EE60 = (uint64_t)result;
  return result;
}

uint64_t sub_1000672A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EE68);
  sub_100009FC4(v0, (uint64_t)qword_10009EE68);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x67616265726F7473LL,  0xE900000000000073LL);
}

uint64_t sub_10006731C(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xD000000000000010LL;
  if (a2)
  {
    if (a2 == (void *)1)
    {
      return 0x64616F6C6E776F64LL;
    }

    else
    {
      _StringGuts.grow(_:)(33LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v5._uint64_t countAndFlagsBits = a1;
      v5._object = a2;
      String.append(_:)(v5);
      return 0xD00000000000001FLL;
    }
  }

  return v2;
}

uint64_t sub_1000673E4()
{
  return sub_10006731C(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1000673EC()
{
  __int16 v1 = (void *)(v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100067434(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *unint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100067484(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000674C8(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_100067514(a1);
  return v3;
}

uint64_t sub_100067514(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v17 - v12;
  type metadata accessor for Throttle(0LL);
  sub_10004F4A0(a1, (uint64_t)v13);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    uint64_t v14 = type metadata accessor for StorebagCloudKitSource(0LL);
    swift_deallocPartialClassInstance( v1,  v14,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v1 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttleCacheURL,  v13,  v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
    sub_10000D764((uint64_t)v11, (uint64_t)v6);
    sub_10006772C( (uint64_t)v6,  v1 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_storebagCloudKitSigningConfiguration);
    unint64_t v16 = sub_100067770((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    *(void *)(v1 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName) = v16;
  }

  return v1;
}

uint64_t type metadata accessor for StorebagCloudKitSource(uint64_t a1)
{
  uint64_t result = qword_10009E660;
  if (!qword_10009E660) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StorebagCloudKitSource);
  }
  return result;
}

uint64_t sub_10006772C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100067770(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100009FDC(&qword_100098460);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    unint64_t result = sub_100010540(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id static StorebagCloudKitSource.setContainerPtr(object:)(uint64_t a1)
{
  if (qword_10009E550 != -1) {
    swift_once(&qword_10009E550, sub_100067274);
  }
  return [(id)qword_10009EE60 setContainerPtr:a1];
}

uint64_t sub_1000678E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[57] = a3;
  v4[58] = v3;
  v4[55] = a1;
  v4[56] = a2;
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  v4[59] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[60] = v6;
  v4[61] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  v4[62] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_10009661C);
  v4[63] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000679B8;
  return sub_10000F98C();
}

uint64_t sub_1000679B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 504);
  uint64_t v4 = *v2;
  *(void *)(v4 + 512) = a1;
  *(void *)(v4 + 5memset(&strm.total_in, 0, 20) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    return swift_task_switch(sub_100067A90, 0LL);
  }
  uint64_t v5 = *(void *)(v4 + 488);
  swift_task_dealloc(*(void *)(v4 + 496));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100067A90()
{
  uint64_t v1 = *(void *)(v0 + 512);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v36 = *(void *)(v0 + 512);
    }
    else {
      uint64_t v36 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 512));
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v1);
    if (v37) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease(*(void *)(v0 + 512));
    unint64_t v38 = sub_100069FB4();
    uint64_t v34 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v38, 0LL, 0LL);
    void *v35 = 0xD000000000000043LL;
    unint64_t v32 = 0x800000010007C7B0LL;
    goto LABEL_14;
  }

  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v2 = *(uint64_t (**)(__n128))(**(void **)(v0 + 464) + 104LL);
  __n128 v3 = swift_bridgeObjectRetain(*(void *)(v0 + 448));
  uint64_t v4 = v2(v3);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = sub_100010540(*(void *)(v0 + 440), *(void *)(v0 + 448));
    if ((v6 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v7 = *(void *)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 464);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v9 = *(void **)(v0 + 448);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v9);
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v11._uint64_t countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  type metadata accessor for Throttle(0LL);
  v12._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v12._object = (void *)0xE600000000000000LL;
  String.append(_:)(v12);
  URL.appendingPathComponent(_:)(0xD000000000000018LL, 0x800000010007C5F0LL);
  swift_bridgeObjectRelease(0x800000010007C5F0LL);
  uint64_t v13 = sub_10004F428(v7);
  BOOL v14 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v8 + 120LL))(v0 + 184);
  unint64_t v16 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
  uint64_t v40 = *v16;
  *unint64_t v16 = 0x8000000000000000LL;
  sub_100069E58(v13, v10, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = *v16;
  *unint64_t v16 = v40;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v18);
  v14(v0 + 184, 0LL);
  __n128 v19 = swift_bridgeObjectRetain(v9);
  uint64_t v4 = v2(v19);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = sub_100010540(*(void *)(v0 + 440), *(void *)(v0 + 448));
    if ((v20 & 1) != 0)
    {
LABEL_7:
      uint64_t v21 = *(void *)(v0 + 448);
      uint64_t v22 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
      swift_retain(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v4);
      *(void *)(v0 + 528) = v22;
      uint64_t v23 = *(int **)(*(void *)v22 + 160LL);
      uint64_t v24 = v23[1];
      uint64_t v25 = *v23;
      swift_retain(v22);
      uint64_t v26 = (void *)swift_task_alloc(v24);
      *(void *)(v0 + 536) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_100067E80;
      return ((uint64_t (*)(void))((char *)v23 + v25))();
    }
  }

  uint64_t v28 = *(void *)(v0 + 512);
  uint64_t v30 = *(void *)(v0 + 440);
  uint64_t v29 = *(void **)(v0 + 448);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v28);
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v31._uint64_t countAndFlagsBits = v30;
  v31._object = v29;
  String.append(_:)(v31);
  unint64_t v32 = 0x800000010007C610LL;
  unint64_t v33 = sub_100069FB4();
  uint64_t v34 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v33, 0LL, 0LL);
  void *v35 = 0xD00000000000001ELL;
LABEL_14:
  v35[1] = v32;
  swift_willThrow(v34);
  uint64_t v39 = *(void *)(v0 + 488);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067E80(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 536LL);
  *(_BYTE *)(*(void *)v1 + 712LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100067F08, 0LL);
}

void sub_100067F08()
{
  if ((*(_BYTE *)(v0 + 712) & 1) != 0)
  {
    if (qword_10009E550 != -1) {
      swift_once(&qword_10009E550, sub_100067274);
    }
    uint64_t v1 = (void *)qword_10009EE60;
    NSString v2 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 544) = v2;
    __n128 v3 = RequestOptions.globalRequestOptions.unsafeMutableAddressor();
    swift_beginAccess(v3, v0 + 376, 0LL, 0LL);
    uint64_t v4 = *v3;
    unint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
    swift_retain(v4);
    id v6 = [v5 mainBundle];
    id v7 = [v6 bundleIdentifier];

    if (v7)
    {
      uint64_t v8 = v0 + 16;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      __int16 v9 = sub_10005855C(1, 1);
      uint64_t v11 = v10;
      id v12 = sub_10004F268(v9 & 0x101);
      *(void *)(v0 + 552) = v12;
      swift_release(v4);
      swift_bridgeObjectRelease(v11);
      *(void *)(v0 + 56) = v0 + 152;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1000681DC;
      uint64_t v13 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      BOOL v14 = (void *)(v0 + 80);
      v14[1] = 0x40000000LL;
      void v14[2] = sub_1000696BC;
      void v14[3] = &unk_100092AC0;
      v14[4] = v13;
      [v1 fetchAssetWithTeamID:v2 options:v12 completionHandler:v14];
      swift_continuation_await(v8);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 528);
    uint64_t v17 = *(void *)(v0 + 440);
    unint64_t v16 = *(void **)(v0 + 448);
    swift_bridgeObjectRelease(*(void *)(v0 + 512));
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v18._uint64_t countAndFlagsBits = v17;
    v18._object = v16;
    String.append(_:)(v18);
    unint64_t v19 = sub_100069FB4();
    uint64_t v20 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v19, 0LL, 0LL);
    *uint64_t v21 = 0xD00000000000001DLL;
    v21[1] = 0x800000010007C630LL;
    swift_willThrow(v20);
    swift_release_n(v15, 2LL);
    uint64_t v22 = *(void *)(v0 + 488);
    swift_task_dealloc(*(void *)(v0 + 496));
    swift_task_dealloc(v22);
    (*(void (**)(void))(v0 + 8))();
  }

uint64_t sub_1000681DC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 560) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 512));
    __n128 v3 = sub_100069610;
  }

  else
  {
    __n128 v3 = sub_100068288;
  }

  return swift_task_switch(v3, 0LL);
}

uint64_t sub_100068288()
{
  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void **)(v0 + 544);
  Class isa = *(const __CFData **)(v0 + 152);
  unint64_t v3 = *(void *)(v0 + 160);
  *(void *)(v0 + 568) = isa;
  *(void *)(v0 + 576) = v3;
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);

  if (!v5)
  {
    uint64_t v17 = *(void *)(v0 + 440);
    unint64_t v16 = *(void **)(v0 + 448);
    swift_bridgeObjectRelease(*(void *)(v0 + 512));
    _StringGuts.grow(_:)(58LL);
    v18._object = (void *)0x800000010007C680LL;
    v18._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v17;
    v19._object = v16;
    String.append(_:)(v19);
    unint64_t v14 = 0xD00000000000001FLL;
    uint64_t v15 = ", failed to read data signature";
    goto LABEL_5;
  }

  uint64_t v7 = Data.init(base64Encoded:options:)(v6, v5, 0LL);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v5);
  *(void *)(v0 + 584) = v7;
  *(void *)(v0 + 592) = v9;
  if (v9 >> 60 == 15)
  {
    uint64_t v11 = *(void *)(v0 + 440);
    uint64_t v10 = *(void **)(v0 + 448);
    swift_bridgeObjectRelease(*(void *)(v0 + 512));
    _StringGuts.grow(_:)(55LL);
    v12._object = (void *)0x800000010007C680LL;
    v12._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = v11;
    v13._object = v10;
    String.append(_:)(v13);
    unint64_t v14 = 0xD00000000000001CLL;
    uint64_t v15 = ", failed to decode signature";
LABEL_5:
    unint64_t v20 = (unint64_t)(v15 - 32) | 0x8000000000000000LL;
    String.append(_:)(*(Swift::String *)&v14);
    unint64_t v21 = sub_100069FB4();
    uint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v21, 0LL, 0LL);
    *uint64_t v23 = 0LL;
    v23[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    uint64_t v24 = (uint64_t)isa;
    unint64_t v25 = v3;
LABEL_6:
    sub_10000A060(v24, v25);
    goto LABEL_7;
  }

  uint64_t v31 = *(void *)(v0 + 512);
  if (v3 >> 60 == 15)
  {
    uint64_t v33 = *(void *)(v0 + 440);
    unint64_t v32 = *(void **)(v0 + 448);
    sub_10000A0B8(v7, v9);
    swift_bridgeObjectRelease(v31);
    _StringGuts.grow(_:)(59LL);
    v34._object = (void *)0x800000010007C680LL;
    v34._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = v33;
    v35._object = v32;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    v36._object = (void *)0x800000010007C6E0LL;
    String.append(_:)(v36);
    unint64_t v37 = sub_100069FB4();
    uint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v37, 0LL, 0LL);
    *unint64_t v38 = 0LL;
    v38[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    sub_10000A060(v7, v9);
    uint64_t v24 = v7;
    unint64_t v25 = v9;
    goto LABEL_6;
  }

  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0) {
      uint64_t v40 = *(void *)(v0 + 512);
    }
    else {
      uint64_t v40 = v31 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 512));
    sub_10000CDC4(v7, v9);
    sub_10000CDC4((uint64_t)isa, v3);
    uint64_t v39 = (__SecKey *)_CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v31);
  }

  else
  {
    uint64_t v39 = *(__SecKey **)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10000CDC4(v7, v9);
    sub_10000CDC4((uint64_t)isa, v3);
  }

  uint64_t v41 = *(void *)(v0 + 512);
  uint64_t v147 = v7;
  if (!v39)
  {
LABEL_41:
    uint64_t v99 = *(void *)(v0 + 440);
    uint64_t v98 = *(void **)(v0 + 448);
    swift_bridgeObjectRelease(v41);
    _StringGuts.grow(_:)(55LL);
    v100._object = (void *)0x800000010007C680LL;
    v100._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v100);
    v101._uint64_t countAndFlagsBits = v99;
    v101._object = v98;
    String.append(_:)(v101);
    v102._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v102._object = (void *)0x800000010007C790LL;
    String.append(_:)(v102);
    unint64_t v103 = sub_100069FB4();
    uint64_t v22 = swift_allocError(&type metadata for StorebagCloudKitSource.Error, v103, 0LL, 0LL);
    void *v104 = 0LL;
    v104[1] = 0xE000000000000000LL;
    swift_willThrow(v22);
    sub_10000A060(v147, v9);
    sub_10000A060((uint64_t)isa, v3);
    sub_10000A060((uint64_t)isa, v3);
    uint64_t v24 = v147;
    unint64_t v25 = v9;
    goto LABEL_6;
  }

  unint64_t v42 = v41 & 0xC000000000000001LL;
  if ((v41 & 0xC000000000000001LL) != 0) {
    goto LABEL_51;
  }
  if (!*(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    __break(1u);
  }
  for (unint64_t i = (__SecKey *)*(id *)(v41 + 32);
        ;
        unint64_t i = (__SecKey *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v41))
  {
    uint64_t v44 = i;
    uint64_t v146 = (uint64_t)isa;
    Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
    unint64_t v145 = v9;
    uint64_t v45 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
    int v46 = SecKeyVerifySignature(v44, kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256, isa, v45, 0LL);

    if (v46) {
      break;
    }
    unint64_t v9 = 0LL;
    uint64_t v47 = *(void *)(v0 + 512);
    uint64_t v141 = v47 + 40;
    uint64_t v143 = v47 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v48 = (char *)v39 - 1;
    while (1)
    {
      if (v48 == (char *)v9)
      {
        uint64_t v41 = *(void *)(v0 + 512);
        unint64_t v9 = v145;
        Class isa = (const __CFData *)v146;
        goto LABEL_41;
      }

      unint64_t v49 = v9 + 1;
      if (v42)
      {
        uint64_t v50 = (__SecKey *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 + 1, *(void *)(v0 + 512));
      }

      else
      {
        if (v49 >= *(void *)(v143 + 16)) {
          goto LABEL_50;
        }
        uint64_t v50 = (__SecKey *)*(id *)(v141 + 8 * v9);
      }

      uint64_t v39 = v50;
      if (__OFADD__(v49, 1LL)) {
        break;
      }
      uint64_t v51 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
      uint64_t v52 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
      Class isa = (const __CFData *)SecKeyVerifySignature( v39,  kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256,  v51,  v52,  0LL);

      ++v9;
      if ((_DWORD)isa) {
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    ;
  }

LABEL_7:
  *(void *)(v0 + 696) = v22;
  uint64_t v26 = *(int **)(**(void **)(v0 + 528) + 168LL);
  uint64_t v27 = *v26;
  uint64_t v28 = (void *)swift_task_alloc(v26[1]);
  *(void *)(v0 + 704) = v28;
  uint64_t v29 = sub_100069508;
LABEL_8:
  *uint64_t v28 = v0;
  v28[1] = v29;
  return ((uint64_t (*)(void))((char *)v26 + v27))();
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100069244()
{
  return swift_task_switch(sub_1000692C4, 0LL);
}

uint64_t sub_1000692C4()
{
  if (qword_10009E558 != -1) {
    swift_once(&qword_10009E558, sub_1000672A4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100009FC4(v1, (uint64_t)qword_10009EE68);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "sucessfully fetched storebag from server", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v18 = *(void *)(v0 + 672);
  unint64_t v19 = *(void *)(v0 + 680);
  uint64_t v16 = *(void *)(v0 + 656);
  unint64_t v17 = *(void *)(v0 + 664);
  unint64_t v6 = *(void *)(v0 + 648);
  uint64_t v7 = *(void *)(v0 + 640);
  unint64_t v20 = *(void *)(v0 + 632);
  unint64_t v21 = v3;
  uint64_t v8 = *(void *)(v0 + 624);
  unint64_t v9 = *(void *)(v0 + 608);
  uint64_t v10 = *(void *)(v0 + 600);
  unint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(void *)(v0 + 584);
  unint64_t v13 = *(void *)(v0 + 576);
  uint64_t v22 = *(void **)(v0 + 616);
  uint64_t v14 = *(void *)(v0 + 568);
  uint64_t v23 = *(void *)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 496);
  uint64_t v25 = *(void *)(v0 + 488);
  swift_release(v23);
  sub_10000A060(v14, v13);
  sub_10000A060(v12, v11);
  sub_10000A074(v10, v9);
  sub_10000A074(v16, v17);
  sub_10000A074(v18, v19);
  sub_10000A074(v7, v6);
  sub_10000A074(v8, v20);

  sub_10000A074(v7, v6);
  sub_10000A074(v8, v20);

  sub_10000A074(v10, v9);
  sub_10000A060(v14, v13);
  sub_10000A060(v12, v11);
  swift_release(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069508()
{
  return swift_task_switch(sub_100069588, 0LL);
}

uint64_t sub_100069588()
{
  uint64_t v1 = *(void *)(v0 + 528);
  swift_willThrow();
  swift_release_n(v1, 2LL);
  uint64_t v2 = *(void *)(v0 + 488);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069610(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 552);
  unint64_t v3 = *(void **)(v1 + 544);
  swift_willThrow(a1);

  *(void *)(v1 + 696) = *(void *)(v1 + 560);
  os_log_type_t v4 = *(int **)(**(void **)(v1 + 528) + 168LL);
  uint64_t v5 = *v4;
  unint64_t v6 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v1 + 704) = v6;
  void *v6 = v1;
  v6[1] = sub_100069508;
  return ((uint64_t (*)(void))((char *)v4 + v5))();
}

uint64_t sub_1000696BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    uint64_t v6 = sub_100009FDC(&qword_100098870);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  if (!a2)
  {
    id v21 = a3;
    uint64_t v15 = 0LL;
    unint64_t v17 = 0xF000000000000000LL;
    if (a3) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v18 = 0LL;
    uint64_t v20 = 0LL;
    goto LABEL_8;
  }

  id v13 = a2;
  id v14 = a3;
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  unint64_t v17 = v16;

  if (!a3) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v20 = v19;

LABEL_8:
  uint64_t v22 = *(uint64_t **)(*(void *)(v4 + 64) + 40LL);
  *uint64_t v22 = v15;
  v22[1] = v17;
  v22[2] = v18;
  v22[3] = v20;
  return swift_continuation_throwingResume(v4);
}

uint64_t StorebagCloudKitSource.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttleCacheURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_10006A034(v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_storebagCloudKitSigningConfiguration);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName));
  return v0;
}

uint64_t StorebagCloudKitSource.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttleCacheURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_10006A034(v0 + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_storebagCloudKitSigningConfiguration);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC21CloudTelemetryService22StorebagCloudKitSource_throttlesByName));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

double sub_100069880@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100010540(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100050800();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100030C0C((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_100069C84(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

Swift::Int sub_100069970(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100009FDC(&qword_100098460);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_100069C84(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

void sub_100069E58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100010540(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10006A36C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

unint64_t sub_100069FB4()
{
  unint64_t result = qword_100098380;
  if (!qword_100098380)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000793F8, &type metadata for StorebagCloudKitSource.Error);
    atomic_store(result, (unint64_t *)&qword_100098380);
  }

  return result;
}

unint64_t sub_100069FF8()
{
  unint64_t result = qword_100098388;
  if (!qword_100098388)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100098388);
  }

  return result;
}

uint64_t sub_10006A034(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StorebagCloudKitSigningConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006A074()
{
  return type metadata accessor for StorebagCloudKitSource(0LL);
}

uint64_t sub_10006A07C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for StorebagCloudKitSigningConfiguration(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

unint64_t destroy for StorebagCloudKitSource.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s21CloudTelemetryService22StorebagCloudKitSourceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for StorebagCloudKitSource.Error(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for StorebagCloudKitSource.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagCloudKitSource.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for StorebagCloudKitSource.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_10006A324(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10006A33C(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagCloudKitSource.Error()
{
  return &type metadata for StorebagCloudKitSource.Error;
}

void *sub_10006A36C()
{
  unint64_t v1 = v0;
  sub_100009FDC(&qword_100098460);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_10006A520()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009EE98);
  sub_100009FC4(v0, (uint64_t)qword_10009EE98);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0xD000000000000016LL,  0x800000010007C8E0LL);
}

uint64_t sub_10006A5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  return swift_task_switch(sub_10006A5C0, v3);
}

uint64_t sub_10006A5C0()
{
  unint64_t v1 = *(int **)(**(void **)(v0[18] + 112LL) + 232LL);
  uint64_t v4 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[19] = v2;
  void *v2 = v0;
  v2[1] = sub_10006A638;
  return ((uint64_t (*)(void *, void, void, void))v4)(v0 + 2, v0[15], v0[16], v0[17]);
}

uint64_t sub_10006A638()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  uint64_t v6 = *(int **)(**(void **)(v2 + 144) + 128LL);
  unint64_t v8 = (int *)((char *)v6 + *v6);
  unint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v2 + 160) = v7;
  void *v7 = v4;
  v7[1] = sub_10006A6E4;
  return ((uint64_t (*)(uint64_t, void, void, void))v8)( v2 + 16,  *(void *)(v2 + 120),  *(void *)(v2 + 128),  *(void *)(v2 + 136));
}

uint64_t sub_10006A6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 160LL);
  *(void *)(*(void *)v3 + 168LL) = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = v6[18];
  if (v2)
  {
    int64_t v9 = sub_10006A7C0;
  }

  else
  {
    v6[22] = a2;
    v6[23] = a1;
    int64_t v9 = sub_10006A75C;
  }

  return swift_task_switch(v9, v8);
}

uint64_t sub_10006A75C()
{
  *(void *)(v0 + 112) = *(void *)(v0 + 16);
  sub_10002B00C((void *)(v0 + 112));
  *(void *)(v0 + 96) = *(void *)(v0 + 24);
  sub_10002B00C((void *)(v0 + 96));
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 40);
  sub_10002AFE4(v0 + 56);
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 184), *(void *)(v0 + 176));
}

uint64_t sub_10006A7C0()
{
  *(void *)(v0 + 88) = *(void *)(v0 + 16);
  sub_10002B00C((void *)(v0 + 88));
  *(void *)(v0 + 104) = *(void *)(v0 + 24);
  sub_10002B00C((void *)(v0 + 104));
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 40);
  sub_10002AFE4(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[30] = a4;
  v5[31] = v4;
  v5[28] = a2;
  v5[29] = a3;
  v5[27] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  v5[32] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[33] = swift_task_alloc(v7);
  v5[34] = swift_task_alloc(v7);
  return swift_task_switch(sub_10006A894, v4);
}

uint64_t sub_10006A894()
{
  uint64_t v1 = **(void **)(v0 + 216);
  *(void *)(v0 + 208) = v1;
  *(void *)(v0 + 280) = v1;
  int64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 288) = v2;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = *(void *)(v0 + 272);
      uint64_t v5 = *(void *)(v0 + 248);
      uint64_t v4 = *(void *)(v0 + 256);
      uint64_t v7 = *(void *)(v0 + 232);
      uint64_t v6 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 224);
      *(void *)(v0 + 192) = v7;
      *(void *)(v0 + 200) = v6;
      int64_t v9 = sub_100017380((void *)(v0 + 168));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v9, v8, v7);
      sub_100030114( v1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)),  v3,  type metadata accessor for SessionConfiguration.Backend);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
      uint64_t v10 = *(int **)(*(void *)v5 + 152LL);
      uint64_t v31 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
      uint64_t v11 = (void *)swift_task_alloc(v10[1]);
      *(void *)(v0 + 296) = v11;
      void *v11 = v0;
      v11[1] = sub_10006AAE0;
      uint64_t v12 = v0 + 72;
      int64_t v13 = v31;
    }

    else
    {
      uint64_t v17 = *(void *)(v0 + 248);
      uint64_t v16 = *(void *)(v0 + 256);
      uint64_t v18 = *(void *)(v0 + 240);
      uint64_t v19 = sub_10004EA74(0LL, v2, 0, _swiftEmptyArrayStorage);
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      *(void *)(v0 + 328) = v20;
      char v21 = *(int **)(*(void *)v17 + 152LL);
      *(void *)(v0 + 336) = v21;
      int v22 = *(_DWORD *)(v16 + 80);
      *(_DWORD *)(v0 + 392) = v22;
      *(void *)(v0 + 344) = v19;
      *(void *)(v0 + 352) = 1LL;
      uint64_t v23 = *(void *)(v0 + 264);
      uint64_t v25 = *(void *)(v0 + 232);
      uint64_t v24 = *(void *)(v0 + 240);
      uint64_t v26 = *(void *)(v0 + 224);
      uint64_t v27 = *(void *)(v0 + 280) + ((v22 + 32LL) & ~(unint64_t)v22);
      swift_bridgeObjectRetain(v1);
      sub_100030114(v27, v23, type metadata accessor for SessionConfiguration.Backend);
      *(void *)(v0 + 152) = v25;
      *(void *)(v0 + 160) = v24;
      BOOL v28 = sub_100017380((void *)(v0 + 128));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v28, v26, v25);
      v20(v25, v24);
      uint64_t v30 = (uint64_t (*)(uint64_t))((char *)v21 + *v21);
      uint64_t v29 = (void *)swift_task_alloc(v21[1]);
      *(void *)(v0 + 360) = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_10006AC30;
      uint64_t v12 = v0 + 16;
      int64_t v13 = v30;
    }

    return v13(v12);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

uint64_t sub_10006AAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 296LL);
  *(void *)(*(void *)v3 + 304LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = v6[31];
    sub_100015BF0(v6[34], type metadata accessor for SessionConfiguration.Backend);
    sub_1000173BC(v6 + 9);
    int64_t v9 = sub_10006AEE4;
  }

  else
  {
    uint64_t v8 = v6[31];
    v6[39] = a2;
    v6[40] = a1;
    sub_1000173BC(v6 + 9);
    int64_t v9 = sub_10006AB8C;
  }

  return swift_task_switch(v9, v8);
}

uint64_t sub_10006AB8C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(**(void **)(v0 + 248) + 144LL))( v0 + 168,  v2,  *(void *)(v0 + 320),  v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v1);
  sub_100015BF0(v2, type metadata accessor for SessionConfiguration.Backend);
  sub_10000C2B4((void *)(v0 + 168));
  uint64_t v6 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v5);
}

uint64_t sub_10006AC30(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 360LL);
  *(void *)(*(void *)v3 + 368LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = v6[43];
    uint64_t v9 = v6[31];
    sub_1000173BC(v6 + 2);
    sub_10002B00C(v6 + 26);
    swift_bridgeObjectRelease(v8);
    uint64_t v10 = sub_10006AF28;
    uint64_t v11 = v9;
  }

  else
  {
    uint64_t v12 = v6[31];
    v6[47] = a2;
    v6[48] = a1;
    sub_1000173BC(v6 + 2);
    uint64_t v10 = sub_10006ACE8;
    uint64_t v11 = v12;
  }

  return swift_task_switch(v10, v11);
}

uint64_t sub_10006ACE8()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(**(void **)(v0 + 248) + 144LL))( v0 + 128,  *(void *)(v0 + 264),  *(void *)(v0 + 384),  v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v1);
  sub_10000C2B4((void *)(v0 + 128));
  unint64_t v7 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = *(void **)(v0 + 344);
  if (v7 >= v6 >> 1) {
    uint64_t v8 = sub_10004EA74((void *)(v6 > 1), v7 + 1, 1, *(void **)(v0 + 344));
  }
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 264);
  __int128 v8[2] = v7 + 1;
  uint64_t v12 = &v8[2 * v7];
  v12[4] = v3;
  v12[5] = v5;
  uint64_t result = sub_100015BF0(v11, type metadata accessor for SessionConfiguration.Backend);
  if (v9 == v10)
  {
    sub_10002B00C((void *)(v0 + 208));
    type metadata accessor for BackendGroup();
    uint64_t v14 = sub_10004D8EC((uint64_t)v8);
    uint64_t v15 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8))(v14, &off_1000906D8);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 352);
    *(void *)(v0 + 344) = v8;
    *(void *)(v0 + 352) = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      uint64_t v17 = *(int **)(v0 + 336);
      uint64_t v20 = *(void *)(v0 + 232);
      uint64_t v19 = *(void *)(v0 + 240);
      uint64_t v21 = *(void *)(v0 + 224);
      sub_100030114( *(void *)(v0 + 280)
      + ((*(unsigned __int8 *)(v0 + 392) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 392))
      + *(void *)(*(void *)(v0 + 256) + 72LL) * v16,
        *(void *)(v0 + 264),
        type metadata accessor for SessionConfiguration.Backend);
      *(void *)(v0 + 152) = v20;
      *(void *)(v0 + 160) = v19;
      int v22 = sub_100017380((void *)(v0 + 128));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v22, v21, v20);
      v18(v20, v19);
      uint64_t v24 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
      uint64_t v23 = (void *)swift_task_alloc(v17[1]);
      *(void *)(v0 + 360) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_10006AC30;
      return v24(v0 + 16);
    }
  }

  return result;
}

uint64_t sub_10006AEE4()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AF28()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[30] = a4;
  v5[31] = v4;
  v5[28] = a2;
  v5[29] = a3;
  v5[27] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  v5[32] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[33] = swift_task_alloc(v7);
  v5[34] = swift_task_alloc(v7);
  return swift_task_switch(sub_10006AFF4, v4);
}

uint64_t sub_10006AFF4()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v2 = v1[1];
  *(void *)(v0 + 208) = v2;
  *(void *)(v0 + 280) = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 288) = v3;
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = *(void *)(v0 + 272);
      uint64_t v6 = *(void *)(v0 + 248);
      uint64_t v5 = *(void *)(v0 + 256);
      uint64_t v8 = *(void *)(v0 + 232);
      uint64_t v7 = *(void *)(v0 + 240);
      uint64_t v9 = *(void *)(v0 + 224);
      *(void *)(v0 + 192) = v8;
      *(void *)(v0 + 200) = v7;
      uint64_t v10 = sub_100017380((void *)(v0 + 168));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v10, v9, v8);
      sub_100030114( v2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  v4,  type metadata accessor for SessionConfiguration.Backend);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7);
      uint64_t v11 = *(int **)(*(void *)v6 + 152LL);
      uint64_t v32 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
      uint64_t v12 = (void *)swift_task_alloc(v11[1]);
      *(void *)(v0 + 296) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_10006AAE0;
      uint64_t v13 = v0 + 72;
      uint64_t v14 = v32;
    }

    else
    {
      uint64_t v18 = *(void *)(v0 + 248);
      uint64_t v17 = *(void *)(v0 + 256);
      uint64_t v19 = *(void *)(v0 + 240);
      uint64_t v20 = sub_10004EA74(0LL, *(void *)(*v1 + 16LL), 0, _swiftEmptyArrayStorage);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      *(void *)(v0 + 328) = v21;
      int v22 = *(int **)(*(void *)v18 + 152LL);
      *(void *)(v0 + 336) = v22;
      int v23 = *(_DWORD *)(v17 + 80);
      *(_DWORD *)(v0 + 392) = v23;
      *(void *)(v0 + 344) = v20;
      *(void *)(v0 + 352) = 1LL;
      uint64_t v24 = *(void *)(v0 + 264);
      uint64_t v26 = *(void *)(v0 + 232);
      uint64_t v25 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 224);
      uint64_t v28 = *(void *)(v0 + 280) + ((v23 + 32LL) & ~(unint64_t)v23);
      swift_bridgeObjectRetain(v2);
      sub_100030114(v28, v24, type metadata accessor for SessionConfiguration.Backend);
      *(void *)(v0 + 152) = v26;
      *(void *)(v0 + 160) = v25;
      uint64_t v29 = sub_100017380((void *)(v0 + 128));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v29, v27, v26);
      v21(v26, v25);
      uint64_t v31 = (uint64_t (*)(uint64_t))((char *)v22 + *v22);
      uint64_t v30 = (void *)swift_task_alloc(v22[1]);
      *(void *)(v0 + 360) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_10006B248;
      uint64_t v13 = v0 + 16;
      uint64_t v14 = v31;
    }

    return v14(v13);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

uint64_t sub_10006B248(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 360LL);
  *(void *)(*(void *)v3 + 368LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = v6[43];
    uint64_t v9 = v6[31];
    sub_1000173BC(v6 + 2);
    sub_10002B00C(v6 + 26);
    swift_bridgeObjectRelease(v8);
    uint64_t v10 = sub_10006AF28;
    uint64_t v11 = v9;
  }

  else
  {
    uint64_t v12 = v6[31];
    v6[47] = a2;
    v6[48] = a1;
    sub_1000173BC(v6 + 2);
    uint64_t v10 = sub_10006B300;
    uint64_t v11 = v12;
  }

  return swift_task_switch(v10, v11);
}

uint64_t sub_10006B300()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(**(void **)(v0 + 248) + 144LL))( v0 + 128,  *(void *)(v0 + 264),  *(void *)(v0 + 384),  v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v1);
  sub_10000C2B4((void *)(v0 + 128));
  unint64_t v7 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = *(void **)(v0 + 344);
  if (v7 >= v6 >> 1) {
    uint64_t v8 = sub_10004EA74((void *)(v6 > 1), v7 + 1, 1, *(void **)(v0 + 344));
  }
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 264);
  __int128 v8[2] = v7 + 1;
  uint64_t v12 = &v8[2 * v7];
  v12[4] = v3;
  v12[5] = v5;
  uint64_t result = sub_100015BF0(v11, type metadata accessor for SessionConfiguration.Backend);
  if (v9 == v10)
  {
    sub_10002B00C((void *)(v0 + 208));
    type metadata accessor for BackendGroup();
    uint64_t v14 = sub_10004D8EC((uint64_t)v8);
    uint64_t v15 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8))(v14, &off_1000906D8);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 352);
    *(void *)(v0 + 344) = v8;
    *(void *)(v0 + 352) = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      uint64_t v17 = *(int **)(v0 + 336);
      uint64_t v20 = *(void *)(v0 + 232);
      uint64_t v19 = *(void *)(v0 + 240);
      uint64_t v21 = *(void *)(v0 + 224);
      sub_100030114( *(void *)(v0 + 280)
      + ((*(unsigned __int8 *)(v0 + 392) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 392))
      + *(void *)(*(void *)(v0 + 256) + 72LL) * v16,
        *(void *)(v0 + 264),
        type metadata accessor for SessionConfiguration.Backend);
      *(void *)(v0 + 152) = v20;
      *(void *)(v0 + 160) = v19;
      int v22 = sub_100017380((void *)(v0 + 128));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v22, v21, v20);
      v18(v20, v19);
      uint64_t v24 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
      int v23 = (void *)swift_task_alloc(v17[1]);
      *(void *)(v0 + 360) = v23;
      *int v23 = v0;
      v23[1] = sub_10006B248;
      return v24(v0 + 16);
    }
  }

  return result;
}

uint64_t sub_10006B4FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v29)(void *__return_ptr, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v35[2];
  _BYTE v36[24];
  void v37[5];
  void v38[4];
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v35 - v14;
  uint64_t v16 = type metadata accessor for SessionConfiguration.Backend(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100030114(a2, (uint64_t)v18, v19);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    uint64_t v20 = *((void *)v18 + 1);
    uint64_t v21 = *((void *)v18 + 2);
    type metadata accessor for BackendLocal();
    sub_100015BAC((uint64_t)a1, (uint64_t)v38);
    return sub_100028ABC(v20, v21, v38);
  }

  else
  {
    sub_100066278((uint64_t)v18, (uint64_t)v15);
    v35[1] = type metadata accessor for BackendHTTP(0LL);
    uint64_t v23 = *(void *)(v5 + 128);
    sub_100015BAC((uint64_t)a1, (uint64_t)v37);
    sub_100030114((uint64_t)v15, (uint64_t)v13, type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain(v23);
    swift_retain(v5);
    swift_bridgeObjectRetain(a4);
    uint64_t v24 = RequestOptions.globalRequestOptions.unsafeMutableAddressor();
    swift_beginAccess(v24, v36, 0LL, 0LL);
    uint64_t v25 = *v24;
    v35[0] = a4;
    uint64_t v26 = a3;
    uint64_t v28 = a1[3];
    uint64_t v27 = a1[4];
    sub_10000A32C(a1, v28);
    uint64_t v29 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v27 + 8);
    swift_retain(v25);
    v29(v38, v28, v27);
    uint64_t v30 = v39;
    LODWORD(v28) = v40;
    uint64_t v31 = v41;
    swift_bridgeObjectRetain(v41);
    sub_1000173BC(v38);
    if ((_DWORD)v28) {
      uint64_t v32 = 256;
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = sub_10004F268(v32 | v30);
    swift_release(v25);
    swift_bridgeObjectRelease(v31);
    uint64_t v22 = sub_1000117EC(v23, v37, v5, v13, v26, v35[0], v33);
    sub_100015BF0((uint64_t)v15, type metadata accessor for SessionConfiguration.BackendHTTP);
  }

  return v22;
}

uint64_t sub_10006B788(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100009FDC(&qword_100096C38);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  v2[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[17] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  return swift_task_switch(sub_10006B85C, v1);
}

uint64_t sub_10006B85C()
{
  uint64_t v1 = *(int **)(**(void **)(*(void *)(v0 + 88) + 112LL) + 264LL);
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 176) = v2;
  void *v2 = v0;
  v2[1] = sub_10006B8BC;
  return v4();
}

uint64_t sub_10006B8BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  return swift_task_switch(sub_10006B914, v1);
}

uint64_t sub_10006B914()
{
  v0[23] = *(void *)(v0[11] + 120);
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_100096C34);
  v0[24] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_10006B974;
  return sub_100021734(v0[15], v0[10]);
}

uint64_t sub_10006B974()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10006C070;
  }
  else {
    uint64_t v4 = sub_10006B9D8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 88));
}

uint64_t sub_10006B9D8()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(char **)(v0 + 120);
  uint64_t v3 = sub_100009FDC(&qword_100096D20);
  int v4 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v2, 1LL, v3);
  uint64_t v5 = *(void *)(v0 + 128);
  if (v4 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = sub_10006C1DC((uint64_t)v2);
    uint64_t v11 = UUID.init()(v10);
    uint64_t v12 = UUID.uuidString.getter(v11);
    uint64_t v14 = v13;
    *(void *)(v0 + 248) = v12;
    *(void *)(v0 + 256) = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = static Date.now.getter(v15);
    Date.addingTimeInterval(_:)(v16, 86400.0);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 264) = v17;
    v17(v6, v5);
    uint64_t v18 = (void *)swift_task_alloc(dword_100096C44);
    *(void *)(v0 + 272) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10006BF68;
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v21 = v12;
  }

  else
  {
    uint64_t v23 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 168);
    uint64_t v25 = *(void *)v2;
    uint64_t v24 = *((void *)v2 + 1);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, void))(v1 + 32))( v22,  &v2[*(int *)(v3 + 48)],  *(void *)(v0 + 128));
    static Date.now.getter(v26);
    char v27 = static Date.< infix(_:_:)(v23, v22);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 208) = v28;
    v28(v23, v5);
    if ((v27 & 1) != 0)
    {
      v28(*(void *)(v0 + 168), *(void *)(v0 + 128));
      uint64_t v29 = *(void *)(v0 + 160);
      uint64_t v31 = *(void *)(v0 + 144);
      uint64_t v30 = *(void *)(v0 + 152);
      uint64_t v33 = *(void *)(v0 + 112);
      uint64_t v32 = *(void *)(v0 + 120);
      swift_task_dealloc(*(void *)(v0 + 168));
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v25, v24);
    }

    swift_bridgeObjectRelease(v24);
    if (qword_10009E670 != -1) {
      swift_once(&qword_10009E670, sub_10006A520);
    }
    int64_t v35 = *(void **)(v0 + 80);
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v36, (uint64_t)qword_10009EE98);
    sub_10001F5F0(v35);
    char v37 = sub_10001F5F0(v35);
    unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(__int128 **)(v0 + 80);
    if (v40)
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v62 = v43;
      *(_DWORD *)unint64_t v42 = 136446210;
      __int128 v45 = v41[1];
      __int128 v44 = v41[2];
      __int128 v46 = *v41;
      *(void *)(v0 + 64) = *((void *)v41 + 6);
      *(_OWORD *)(v0 + 32) = v45;
      *(_OWORD *)(v0 + 48) = v44;
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v46;
      unint64_t v47 = sub_10006C21C();
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for ClientIdentity, v47);
      unint64_t v50 = v49;
      *(void *)(v0 + 72) = sub_100009984(v48, v49, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v50);
      sub_1000173BC(v41);
      sub_1000173BC(v41);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "CID expired for %{public}s, refreshing", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      sub_1000173BC(*(void **)(v0 + 80));
      sub_1000173BC(v41);
    }

    uint64_t v51 = *(void *)(v0 + 160);
    uint64_t v52 = *(void *)(v0 + 128);
    uint64_t v54 = *(void *)(v0 + 104);
    uint64_t v53 = *(void *)(v0 + 112);
    uint64_t v55 = *(void *)(v0 + 96);
    uint64_t v56 = ((uint64_t (*)(void))UUID.init())();
    uint64_t v57 = UUID.uuidString.getter(v56);
    uint64_t v14 = v58;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v57;
    *(void *)(v0 + 224) = v58;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    swift_bridgeObjectRetain(v14);
    uint64_t v60 = static Date.now.getter(v59);
    Date.addingTimeInterval(_:)(v60, 86400.0);
    v28(v51, v52);
    Class v61 = (void *)swift_task_alloc(dword_100096C44);
    *(void *)(v0 + 232) = v61;
    void *v61 = v0;
    v61[1] = sub_10006BE2C;
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v21 = v57;
  }

  return sub_100021958(v20, v21, v14, v19);
}

uint64_t sub_10006BE2C()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 224);
  uint64_t v3 = *(void *)(*v1 + 232);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*v1 + 208);
  uint64_t v6 = *(void *)(*v1 + 152);
  uint64_t v7 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  v5(v6, v7);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v8 = *(void *)(v2 + 88);
    swift_bridgeObjectRelease(*(void *)(v2 + 224));
    uint64_t v9 = sub_10006C0E4;
    uint64_t v10 = v8;
  }

  else
  {
    uint64_t v10 = *(void *)(v2 + 88);
    uint64_t v9 = sub_10006BED0;
  }

  return swift_task_switch(v9, v10);
}

uint64_t sub_10006BED0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10006BF68()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 264);
  uint64_t v2 = *(void *)(*v1 + 272);
  uint64_t v4 = *(void *)(*v1 + 256);
  uint64_t v5 = *(void *)(*v1 + 144);
  uint64_t v6 = *(void *)(*v1 + 128);
  uint64_t v7 = *v1;
  *(void *)(v7 + 280) = v0;
  swift_task_dealloc(v2);
  v3(v5, v6);
  swift_bridgeObjectRelease(v4);
  uint64_t v8 = *(void *)(v7 + 256);
  if (v0)
  {
    uint64_t v9 = *(void *)(v7 + 88);
    swift_bridgeObjectRelease(*(void *)(v7 + 256));
    return swift_task_switch(sub_10006C168, v9);
  }

  else
  {
    uint64_t v11 = *(void *)(v7 + 248);
    uint64_t v12 = *(void *)(v7 + 160);
    uint64_t v14 = *(void *)(v7 + 144);
    uint64_t v13 = *(void *)(v7 + 152);
    uint64_t v16 = *(void *)(v7 + 112);
    uint64_t v15 = *(void *)(v7 + 120);
    swift_task_dealloc(*(void *)(v7 + 168));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v8);
  }

uint64_t sub_10006C070()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C0E4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C168()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C1DC(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100096C38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10006C21C()
{
  unint64_t result = qword_100098488;
  if (!qword_100098488)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000790F0, &type metadata for ClientIdentity);
    atomic_store(result, (unint64_t *)&qword_100098488);
  }

  return result;
}

uint64_t type metadata accessor for SubmissionCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC21CloudTelemetryService21SubmissionCoordinator);
}

void *XPCTypeConnection.getter()
{
  return &_xpc_type_connection;
}

void *XPCTypeEndpoint.getter()
{
  return &_xpc_type_endpoint;
}

void *XPCTypeNull.getter()
{
  return &_xpc_type_null;
}

void *XPCTypeBool.getter()
{
  return &_xpc_type_BOOL;
}

void *XPCTypeInt64.getter()
{
  return &_xpc_type_int64;
}

void *XPCTypeUInt64.getter()
{
  return &_xpc_type_uint64;
}

void *XPCTypeDouble.getter()
{
  return &_xpc_type_double;
}

void *XPCTypeData.getter()
{
  return &_xpc_type_data;
}

void *XPCTypeDate.getter()
{
  return &_xpc_type_date;
}

void *XPCTypeString.getter()
{
  return &_xpc_type_string;
}

void *XPCTypeUUID.getter()
{
  return &_xpc_type_uuid;
}

void *XPCTypeShmem.getter()
{
  return &_xpc_type_shmem;
}

void *XPCTypeArray.getter()
{
  return &_xpc_type_array;
}

void *XPCTypeDictionary.getter()
{
  return &_xpc_type_dictionary;
}

void *XPCTypeError.getter()
{
  return &_xpc_type_error;
}

void *XPCTypeActivity.getter()
{
  return &_xpc_type_activity;
}

const char *SubmitEventsActivityConfig.identifier.unsafeMutableAddressor()
{
  return "submit";
}

uint64_t static SubmitEventsActivityConfig.identifier.getter()
{
  return 0x74696D627573LL;
}

uint64_t sub_10006C360()
{
  uint64_t v0 = sub_100009FDC(&qword_100098570);
  uint64_t v1 = sub_100009FDC(&qword_100098578);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 13 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1000794C0;
  uint64_t v7 = (const char **)(v6 + v5);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 48);
  void *v7 = XPC_ACTIVITY_REPEATING;
  *uint64_t v8 = 1;
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  swift_storeEnumTagMultiPayload(v8, v9, 2LL);
  uint64_t v10 = (const char **)((char *)v7 + v3 + *(int *)(v1 + 48));
  *(const char **)((char *)v7 + v3) = XPC_ACTIVITY_DELAY;
  *uint64_t v10 = 86400LL;
  swift_storeEnumTagMultiPayload(v10, v9, 3LL);
  uint64_t v11 = (const char **)((char *)v7 + 2 * v3);
  uint64_t v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  int *v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v12 = 43200LL;
  swift_storeEnumTagMultiPayload(v12, v9, 3LL);
  uint64_t v13 = (const char **)((char *)v7 + 3 * v3);
  uint64_t v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *uint64_t v13 = XPC_ACTIVITY_PRIORITY;
  void *v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8LL);
  uint64_t v16 = (const char **)((char *)v7 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *uint64_t v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  _BYTE *v17 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload(v17, v9, 2LL);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v19 = (const char **)((char *)v7 + 5 * v3);
  uint64_t v20 = (char *)v19 + *(int *)(v1 + 48);
  *uint64_t v19 = XPC_ACTIVITY_POWER_NAP;
  *uint64_t v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v20, v9, 2LL);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v21 = (const char **)((char *)v7 + 6 * v3);
  uint64_t v22 = (void *)((char *)v21 + *(int *)(v1 + 48));
  *uint64_t v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *uint64_t v22 = 43200LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v22, v9, 4LL);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v23 = (const char **)((char *)&v7[v3] - v3);
  uint64_t v24 = (char *)v23 + *(int *)(v1 + 48);
  *uint64_t v23 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  _BYTE *v24 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v24, v9, 2LL);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v25 = &v7[v3];
  uint64_t v26 = (char *)v25 + *(int *)(v1 + 48);
  void *v25 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  *uint64_t v26 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v26, v9, 2LL);
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v27 = (const char **)((char *)v7 + 9 * v3);
  uint64_t v28 = (void *)((char *)v27 + *(int *)(v1 + 48));
  *char v27 = XPC_ACTIVITY_NETWORK_UPLOAD_SIZE;
  *uint64_t v28 = 5242880LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v28, v9, 4LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v29 = (const char **)((char *)v7 + 10 * v3);
  uint64_t v30 = (void *)((char *)v29 + *(int *)(v1 + 48));
  *uint64_t v29 = XPC_ACTIVITY_EXPECTED_DURATION;
  *uint64_t v30 = XPC_ACTIVITY_INTERVAL_5_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload(v30, v9, 3LL);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v31 = (const char **)((char *)v7 + 11 * v3);
  uint64_t v32 = (void *)((char *)v31 + *(int *)(v1 + 48));
  *uint64_t v31 = XPC_ACTIVITY_GROUP_NAME;
  void *v32 = 0xD000000000000025LL;
  v32[1] = 0x800000010007C900LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v32, v9, 8LL);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    uint64_t v33 = (const char **)((char *)v7 + 12 * v3);
    uint64_t v34 = (void *)((char *)v33 + *(int *)(v1 + 48));
    *uint64_t v33 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    *uint64_t v34 = 1LL;
    swift_storeEnumTagMultiPayload(v34, v9, 4LL);
    unint64_t v35 = sub_10006C994(v6);
    swift_setDeallocating(v6);
    swift_arrayDestroy(v7, 13LL, v1);
    uint64_t result = swift_deallocClassInstance(v6, 32LL, 7LL);
    static SubmitEventsActivityConfig.activityFlags = v35;
    return result;
  }

uint64_t *SubmitEventsActivityConfig.activityFlags.unsafeMutableAddressor()
{
  if (qword_10009E700 != -1) {
    swift_once(&qword_10009E700, sub_10006C360);
  }
  return &static SubmitEventsActivityConfig.activityFlags;
}

double static SubmitEventsActivityConfig.activityFlags.getter()
{
  if (qword_10009E700 != -1) {
    swift_once(&qword_10009E700, sub_10006C360);
  }
  swift_beginAccess(&static SubmitEventsActivityConfig.activityFlags, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static SubmitEventsActivityConfig.activityFlags).n128_u64[0];
  return result;
}

uint64_t static SubmitEventsActivityConfig.activityFlags.setter(uint64_t a1)
{
  if (qword_10009E700 != -1) {
    swift_once(&qword_10009E700, sub_10006C360);
  }
  swift_beginAccess(&static SubmitEventsActivityConfig.activityFlags, v4, 1LL, 0LL);
  uint64_t v2 = static SubmitEventsActivityConfig.activityFlags;
  static SubmitEventsActivityConfig.activityFlags = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static SubmitEventsActivityConfig.activityFlags.modify(uint64_t a1))(void)
{
  if (qword_10009E700 != -1) {
    swift_once(&qword_10009E700, sub_10006C360);
  }
  swift_beginAccess(&static SubmitEventsActivityConfig.activityFlags, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

ValueMetadata *type metadata accessor for SubmitEventsActivityConfig()
{
  return &type metadata for SubmitEventsActivityConfig;
}

unint64_t sub_10006C8C8(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10006C8F8(a1, v3);
}

unint64_t sub_10006C8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10006C994(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC(&qword_100098578);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100009FDC(&qword_100098580);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
    uint64_t v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_10006CAEC(v9, (uint64_t)v5);
      uint64_t v11 = *v5;
      unint64_t result = sub_10006C8C8(*v5);
      if ((v13 & 1) != 0) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for XPCObject(0LL);
      unint64_t result = sub_100028820(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v14);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t sub_10006CAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100098578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unsigned __int8 *XPCObject.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v35 - v10);
  __chkstk_darwin(v9);
  char v13 = (uint64_t *)((char *)&v35 - v12);
  if (!a1) {
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))( a2,  1LL,  1LL,  v4);
  }
  unint64_t v14 = (void *)swift_unknownObjectRetain(a1);
  xpc_type_t type = xpc_get_type(v14);
  if (XPCTypeNull.getter() == type)
  {
    swift_unknownObjectRelease_n(a1, 2LL);
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 13LL;
LABEL_26:
    swift_storeEnumTagMultiPayload(v18, v19, v20);
LABEL_27:
    sub_100028820((uint64_t)v13, a2);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
  }

  if (XPCTypeConnection.getter() == type)
  {
    swift_unknownObjectRelease(a1);
    *char v13 = a1;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 0LL;
    goto LABEL_26;
  }

  if (XPCTypeEndpoint.getter() == type)
  {
    swift_unknownObjectRelease(a1);
    *char v13 = a1;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 1LL;
    goto LABEL_26;
  }

  if (XPCTypeBool.getter() == type)
  {
    BOOL value = xpc_BOOL_get_value(a1);
    swift_unknownObjectRelease_n(a1, 2LL);
    *(_BYTE *)char v13 = value;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 2LL;
    goto LABEL_26;
  }

  if (XPCTypeInt64.getter() == type)
  {
    int64_t v22 = xpc_int64_get_value(a1);
    swift_unknownObjectRelease_n(a1, 2LL);
    *char v13 = v22;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 3LL;
    goto LABEL_26;
  }

  if (XPCTypeUInt64.getter() == type)
  {
    uint64_t v23 = xpc_uint64_get_value(a1);
    swift_unknownObjectRelease_n(a1, 2LL);
    *char v13 = v23;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 4LL;
    goto LABEL_26;
  }

  if (XPCTypeDouble.getter() == type)
  {
    double v24 = xpc_double_get_value(a1);
    swift_unknownObjectRelease_n(a1, 2LL);
    *(double *)char v13 = v24;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 5LL;
    goto LABEL_26;
  }

  if (XPCTypeDate.getter() == type)
  {
    int64_t v25 = xpc_date_get_value(a1);
    swift_unknownObjectRelease_n(a1, 2LL);
    *char v13 = v25;
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 6LL;
    goto LABEL_26;
  }

  if (XPCTypeData.getter() == type)
  {
    unint64_t result = (unsigned __int8 *)xpc_data_get_bytes_ptr(a1);
    if (result)
    {
      uint64_t v26 = result;
      size_t length = xpc_data_get_length(a1);
      uint64_t v28 = sub_10006DC80(v26, length);
      uint64_t v30 = v29;
      swift_unknownObjectRelease_n(a1, 2LL);
      uint64_t *v11 = v28;
      v11[1] = v30;
      swift_storeEnumTagMultiPayload(v11, v4, 7LL);
      uint64_t v31 = (uint64_t)v11;
LABEL_32:
      sub_100028820(v31, (uint64_t)v13);
      goto LABEL_27;
    }

    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (XPCTypeString.getter() == type)
  {
    unint64_t result = (unsigned __int8 *)xpc_string_get_string_ptr(a1);
    if (result)
    {
      uint64_t v32 = String.init(cString:)(result);
      uint64_t v34 = v33;
      swift_unknownObjectRelease_n(a1, 2LL);
      *uint64_t v8 = v32;
      v8[1] = v34;
      swift_storeEnumTagMultiPayload(v8, v4, 8LL);
      uint64_t v31 = (uint64_t)v8;
      goto LABEL_32;
    }

    goto LABEL_39;
  }

  if (XPCTypeUUID.getter() != type)
  {
    if (XPCTypeShmem.getter() == type)
    {
      swift_unknownObjectRelease(a1);
      *char v13 = a1;
      BOOL v18 = v13;
      uint64_t v19 = v4;
      uint64_t v20 = 10LL;
    }

    else if (XPCTypeArray.getter() == type)
    {
      swift_unknownObjectRelease(a1);
      *char v13 = a1;
      BOOL v18 = v13;
      uint64_t v19 = v4;
      uint64_t v20 = 11LL;
    }

    else
    {
      xpc_type_t v16 = (xpc_type_t)XPCTypeDictionary.getter();
      swift_unknownObjectRelease(a1);
      if (v16 != type)
      {
        swift_unknownObjectRelease(a1);
        return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))( a2,  1LL,  1LL,  v4);
      }

      *char v13 = a1;
      BOOL v18 = v13;
      uint64_t v19 = v4;
      uint64_t v20 = 12LL;
    }

    goto LABEL_26;
  }

  unint64_t result = (unsigned __int8 *)xpc_uuid_get_bytes(a1);
  if (result)
  {
    UUID.init(uuid:)( *result,  result[1],  result[2],  result[3],  result[4],  result[5],  result[6],  result[7],  *((void *)result + 1));
    swift_unknownObjectRelease_n(a1, 2LL);
    BOOL v18 = v13;
    uint64_t v19 = v4;
    uint64_t v20 = 9LL;
    goto LABEL_26;
  }

uint64_t type metadata accessor for XPCObject(uint64_t a1)
{
  uint64_t result = qword_10009E810;
  if (!qword_10009E810) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for XPCObject);
  }
  return result;
}

void XPCObject.obj.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for XPCObject(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100028864(v1, (uint64_t)v5);
  uint64_t v6 = (char *)&loc_10006D08C + *((int *)qword_10006D3C0 + swift_getEnumCaseMultiPayload(v5, v3));
  __asm { BR              X10 }

uint64_t sub_10006D09C()
{
  return *(void *)v0;
}

BOOL static XPCObject.== infix(_:_:)()
{
  uint64_t v1 = v0;
  XPCObject.obj.getter();
  uint64_t v3 = v2;
  BOOL v4 = xpc_equal(v1, v2);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v3);
  return v4;
}

xpc_object_t XPCDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  xpc_object_t v2 = sub_10006DD2C(a1);
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  sub_100065EFC(a1, (uint64_t)v9, (uint64_t *)&unk_100097140);
  uint64_t v11 = type metadata accessor for XPCObject(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) == 1)
  {
    sub_10000C234((uint64_t)v9, (uint64_t *)&unk_100097140);
    uint64_t v12 = 0LL;
  }

  else
  {
    XPCObject.obj.getter();
    uint64_t v12 = v13;
    sub_1000288A8((uint64_t)v9);
  }

  uint64_t v14 = String.utf8CString.getter(a2, a3);
  swift_bridgeObjectRelease(a3);
  xpc_dictionary_set_value(v10, (const char *)(v14 + 32), v12);
  swift_unknownObjectRelease(v12);
  sub_10000C234(a1, (uint64_t *)&unk_100097140);
  return swift_release(v14);
}

uint64_t XPCDictionary.keys.getter(void *a1)
{
  int64_t count = xpc_dictionary_get_count(a1);
  uint64_t v3 = _swiftEmptyArrayStorage;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || count > _swiftEmptyArrayStorage[3] >> 1)
  {
    if (_swiftEmptyArrayStorage[2] <= count) {
      int64_t v5 = count;
    }
    else {
      int64_t v5 = _swiftEmptyArrayStorage[2];
    }
    uint64_t v3 = sub_10002229C(isUniquelyReferenced_nonNull_native, v5, 0, _swiftEmptyArrayStorage);
  }

  uint64_t v15 = v3;
  uint64_t v6 = swift_allocObject(&unk_100092C98, 24LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = &v15;
  uint64_t v7 = swift_allocObject(&unk_100092CC0, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = sub_10006E03C;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_100030194;
  uint64_t v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10002CF7C;
  aBlock[3] = &unk_100092CD8;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v14;
  swift_retain(v7);
  swift_release(v9);
  xpc_dictionary_apply(a1, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 79LL, 136LL, 40LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = v15;
    swift_release(v6);
    return (uint64_t)v12;
  }

  return result;
}

unsigned __int8 *XPCDictionary.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = String.utf8CString.getter(a1, a2);
  xpc_object_t v7 = xpc_dictionary_get_value(a3, (const char *)(v6 + 32));
  swift_release(v6);
  return XPCObject.init(_:)(v7, a4);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  xpc_object_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  void *v7 = a2;
  size_t v8 = *(void *)(*(void *)(sub_100009FDC((uint64_t *)&unk_100097140) - 8) + 64LL);
  v7[3] = malloc(v8);
  v7[4] = malloc(v8);
  _OWORD v7[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v7[6] = v9;
  uint64_t v10 = *v3;
  uint64_t v11 = String.utf8CString.getter(a2, a3);
  xpc_object_t v12 = xpc_dictionary_get_value(v10, (const char *)(v11 + 32));
  swift_release(v11);
  XPCObject.init(_:)(v12, (uint64_t)v9);
  return sub_10006D874;
}

void sub_10006D874(uint64_t a1, char a2)
{
  xpc_object_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[3];
    uint64_t v4 = v2[4];
    uint64_t v6 = v2[1];
    xpc_object_t v7 = (void **)v2[2];
    sub_100065EFC(v3, v4, (uint64_t *)&unk_100097140);
    size_t v8 = *v7;
    sub_100065EFC(v4, v5, (uint64_t *)&unk_100097140);
    uint64_t v9 = type metadata accessor for XPCObject(0LL);
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v5, 1LL, v9);
    swift_bridgeObjectRetain(v6);
    uint64_t v10 = v2[3];
    if ((_DWORD)v5 == 1)
    {
      sub_10000C234(v2[3], (uint64_t *)&unk_100097140);
      uint64_t v11 = 0LL;
    }

    else
    {
      XPCObject.obj.getter();
      uint64_t v11 = v19;
      sub_1000288A8(v10);
    }

    uint64_t v21 = (void *)v2[5];
    uint64_t v20 = (void *)v2[6];
    uint64_t v23 = (void *)v2[3];
    int64_t v22 = (void *)v2[4];
    uint64_t v24 = v2[1];
    uint64_t v25 = String.utf8CString.getter(*v2, v24);
    swift_bridgeObjectRelease(v24);
    xpc_dictionary_set_value(v8, (const char *)(v25 + 32), v11);
    swift_unknownObjectRelease(v11);
    sub_10000C234((uint64_t)v22, (uint64_t *)&unk_100097140);
    swift_release(v25);
    sub_10000C234((uint64_t)v20, (uint64_t *)&unk_100097140);
  }

  else
  {
    uint64_t v12 = v2[5];
    uint64_t v13 = v2[1];
    uint64_t v14 = *(void **)v2[2];
    sub_100065EFC(v3, v12, (uint64_t *)&unk_100097140);
    uint64_t v15 = type metadata accessor for XPCObject(0LL);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v12, 1LL, v15);
    swift_bridgeObjectRetain(v13);
    uint64_t v17 = v2[5];
    if (v16 == 1)
    {
      sub_10000C234(v2[5], (uint64_t *)&unk_100097140);
      BOOL v18 = 0LL;
    }

    else
    {
      XPCObject.obj.getter();
      BOOL v18 = v26;
      sub_1000288A8(v17);
    }

    uint64_t v21 = (void *)v2[5];
    uint64_t v20 = (void *)v2[6];
    uint64_t v23 = (void *)v2[3];
    int64_t v22 = (void *)v2[4];
    uint64_t v27 = v2[1];
    uint64_t v28 = String.utf8CString.getter(*v2, v27);
    swift_bridgeObjectRelease(v27);
    xpc_dictionary_set_value(v14, (const char *)(v28 + 32), v18);
    swift_unknownObjectRelease(v18);
    sub_10000C234((uint64_t)v20, (uint64_t *)&unk_100097140);
    swift_release(v28);
  }

  free(v20);
  free(v21);
  free(v22);
  free(v23);
  free(v2);
}

Swift::Bool __swiftcall XPCDictionary.contains(key:)(Swift::String key)
{
  xpc_object_t v2 = v1;
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  uint64_t v5 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v5);
  xpc_object_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = String.utf8CString.getter(countAndFlagsBits, object);
  xpc_object_t v9 = xpc_dictionary_get_value(v2, (const char *)(v8 + 32));
  swift_release(v8);
  XPCObject.init(_:)(v9, (uint64_t)v7);
  uint64_t v10 = type metadata accessor for XPCObject(0LL);
  LOBYTE(v9) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v7, 1LL, v10) != 1;
  sub_10000C234((uint64_t)v7, (uint64_t *)&unk_100097140);
  return (char)v9;
}

uint64_t sub_10006DB84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = sub_10006DD2C(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10006DBC0(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10006DC80(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_10006DBC0(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

xpc_object_t sub_10006DD2C(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC((uint64_t *)&unk_100097140);
  uint64_t v3 = __chkstk_darwin(v2);
  char v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  xpc_object_t v7 = (char *)&v38 - v6;
  uint64_t v45 = sub_100009FDC(&qword_100098628);
  uint64_t v8 = *(void *)(v45 - 8);
  uint64_t v9 = __chkstk_darwin(v45);
  uint64_t v43 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v42 = (uint64_t *)((char *)&v38 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - v14;
  __chkstk_darwin(v13);
  __int128 v44 = (uint64_t *)((char *)&v38 - v16);
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v41 = (uint64_t)v44 + *(int *)(v45 + 48);
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v19 = *(void *)(v8 + 72);
    os_log_type_t v39 = v15;
    uint64_t v40 = v19;
    do
    {
      int64_t v22 = v44;
      sub_100065EFC(v18, (uint64_t)v44, &qword_100098628);
      uint64_t v23 = v45;
      uint64_t v24 = (uint64_t)&v15[*(int *)(v45 + 48)];
      uint64_t v25 = (uint64_t *)v15;
      uint64_t v27 = *v22;
      uint64_t v26 = v22[1];
      uint64_t *v25 = *v22;
      v25[1] = v26;
      sub_100028820(v41, v24);
      uint64_t v28 = *(int *)(v23 + 48);
      uint64_t v29 = v42;
      uint64_t v30 = (uint64_t)v42 + v28;
      *unint64_t v42 = v27;
      v29[1] = v26;
      uint64_t v47 = (uint64_t)v29 + v28;
      sub_100028864(v24, v30);
      uint64_t v31 = *(int *)(v23 + 48);
      uint64_t v32 = v43;
      uint64_t v33 = (uint64_t)v43 + v31;
      *uint64_t v43 = v27;
      v32[1] = v26;
      sub_100028864(v24, (uint64_t)v32 + v31);
      sub_100028820(v33, (uint64_t)v7);
      uint64_t v34 = type metadata accessor for XPCObject(0LL);
      uint64_t v35 = *(void *)(v34 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v7, 0LL, 1LL, v34);
      sub_100065EFC((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_100097140);
      LODWORD(v34) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v5, 1LL, v34);
      swift_bridgeObjectRetain(v26);
      if ((_DWORD)v34 == 1)
      {
        sub_10000C234((uint64_t)v5, (uint64_t *)&unk_100097140);
        uint64_t v20 = 0LL;
      }

      else
      {
        XPCObject.obj.getter();
        uint64_t v20 = v36;
        sub_1000288A8((uint64_t)v5);
      }

      uint64_t v21 = String.utf8CString.getter(v27, v26);
      swift_bridgeObjectRelease(v26);
      xpc_dictionary_set_value(empty, (const char *)(v21 + 32), v20);
      swift_unknownObjectRelease(v20);
      sub_10000C234((uint64_t)v7, (uint64_t *)&unk_100097140);
      swift_release(v21);
      uint64_t v15 = v39;
      sub_10000C234((uint64_t)v39, &qword_100098628);
      sub_1000288A8(v47);
      v18 += v40;
      --v17;
    }

    while (v17);
  }

  return empty;
}

uint64_t sub_10006E02C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10006E03C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = String.init(cString:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void *v2 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_10002229C(0LL, v6[2] + 1LL, 1, v6);
    void *v2 = v6;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = sub_10002229C((void *)(v8 > 1), v9 + 1, 1, v6);
    void *v2 = v6;
  }

  _OWORD v6[2] = v9 + 1;
  uint64_t v10 = &v6[2 * v9];
  v10[4] = v3;
  v10[5] = v5;
  return 1LL;
}

uint64_t sub_10006E0F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006E100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006E110(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 7u:
        uint64_t v13 = *a2;
        unint64_t v12 = a2[1];
        sub_10000A0B8(v13, v12);
        *a1 = v13;
        a1[1] = v12;
        swift_storeEnumTagMultiPayload(a1, a3, 7LL);
        break;
      case 8u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain(v14);
        swift_storeEnumTagMultiPayload(a1, a3, 8LL);
        break;
      case 9u:
        uint64_t v15 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      case 0xAu:
        uint64_t v16 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 10LL);
        break;
      case 0xBu:
        uint64_t v17 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, a3, 11LL);
        break;
      case 0xCu:
        uint64_t v18 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v18);
        swift_storeEnumTagMultiPayload(a1, a3, 12LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for XPCObject(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
      uint64_t result = swift_unknownObjectRelease(*a1);
      break;
    case 7:
      uint64_t result = sub_10000A074(*a1, a1[1]);
      break;
    case 8:
      uint64_t result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 9:
      uint64_t v4 = type metadata accessor for UUID(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *initializeWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v6);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_11;
    case 1u:
      uint64_t v10 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v10);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_11;
    case 7u:
      uint64_t v12 = *a2;
      unint64_t v11 = a2[1];
      sub_10000A0B8(v12, v11);
      *a1 = v12;
      a1[1] = v11;
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
      goto LABEL_11;
    case 8u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 8LL;
      goto LABEL_11;
    case 9u:
      uint64_t v14 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 9LL;
      goto LABEL_11;
    case 0xAu:
      uint64_t v15 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v15);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 10LL;
      goto LABEL_11;
    case 0xBu:
      uint64_t v16 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v16);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 11LL;
      goto LABEL_11;
    case 0xCu:
      uint64_t v17 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v17);
      xpc_object_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 12LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *assignWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000288A8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v6);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_12;
      case 1u:
        uint64_t v10 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v10);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_12;
      case 7u:
        uint64_t v12 = *a2;
        unint64_t v11 = a2[1];
        sub_10000A0B8(v12, v11);
        *a1 = v12;
        a1[1] = v11;
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
        goto LABEL_12;
      case 8u:
        *a1 = *a2;
        uint64_t v13 = a2[1];
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
        goto LABEL_12;
      case 9u:
        uint64_t v14 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
        goto LABEL_12;
      case 0xAu:
        uint64_t v15 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v15);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 10LL;
        goto LABEL_12;
      case 0xBu:
        uint64_t v16 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v16);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 11LL;
        goto LABEL_12;
      case 0xCu:
        uint64_t v17 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v17);
        xpc_object_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 12LL;
LABEL_12:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 9LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000288A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 9LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10006E790(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  void v4[2] = &unk_100079608;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_100079620;
  void v4[8] = &unk_100079638;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[9] = *(void *)(result - 8) + 64LL;
    void v4[10] = "\b";
    v4[11] = "\b";
    v4[12] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 13LL, v4);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCDictionary()
{
  return &type metadata for XPCDictionary;
}

uint64_t sub_10006E848(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t sub_10006E878()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009E828);
  sub_100009FC4(v0, (uint64_t)qword_10009E828);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007A0C0LL,  0x7974697669746361LL,  0xE800000000000000LL);
}

uint64_t sub_10006E8EC()
{
  return swift_retain(*(void *)(v0 + 128));
}

uint64_t sub_10006E920(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10006E964(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10006E9A0()
{
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t sub_10006E9D0(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 136, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 136) = a1;
  return result;
}

uint64_t *XPCActivity.makeHandler.unsafeMutableAddressor()
{
  return &static XPCActivity.makeHandler;
}

uint64_t static XPCActivity.makeHandler.getter()
{
  uint64_t v0 = static XPCActivity.makeHandler;
  sub_10006EA6C(static XPCActivity.makeHandler, qword_10009EEC0);
  return v0;
}

uint64_t sub_10006EA6C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t static XPCActivity.makeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static XPCActivity.makeHandler;
  uint64_t v5 = qword_10009EEC0;
  static XPCActivity.makeHandler = a1;
  qword_10009EEC0 = a2;
  sub_10006EA6C(a1, a2);
  sub_100028AAC(v4, v5);
  return sub_100028AAC(a1, a2);
}

uint64_t (*static XPCActivity.makeHandler.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

Swift::Void __swiftcall XPCActivity.register(disabled:)(Swift::Bool_optional disabled)
{
  uint64_t v2 = v1;
  id v4 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v5 = [v4 bundleIdentifier];

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    if (disabled.value != 2) {
      (*(void (**)(Swift::Bool))(*v2 + 144LL))(disabled.value);
    }
    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t aBlock = 0x6C655464756F6C43LL;
    unint64_t v32 = 0xEF2E797274656D65LL;
    v9._uint64_t countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v8);
    v10._uint64_t countAndFlagsBits = 46LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(v2[15] + 32LL))();
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    uint64_t v35 = sub_100070284;
    uint64_t v36 = v2;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v32 = 1107296256LL;
    uint64_t v33 = sub_10006EFF4;
    uint64_t v34 = &unk_100092D58;
    uint64_t v13 = _Block_copy(&aBlock);
    uint64_t v14 = v36;
    swift_retain(v2);
    swift_release(v14);
    uint64_t v15 = String.utf8CString.getter(0x6C655464756F6C43LL, 0xEF2E797274656D65LL);
    xpc_activity_register((const char *)(v15 + 32), XPC_ACTIVITY_CHECK_IN, v13);
    swift_release(v15);
    _Block_release(v13);
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v16, (uint64_t)qword_10009E828);
    swift_bridgeObjectRetain(0xEF2E797274656D65LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain(0xEF2E797274656D65LL);
      uint64_t v37 = sub_100009984(0x6C655464756F6C43LL, 0xEF2E797274656D65LL, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(0xEF2E797274656D65LL, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "registered: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(0xEF2E797274656D65LL, 2LL);
    }
  }

  else
  {
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v22, (uint64_t)qword_10009E828);
    uint64_t v23 = swift_retain_n(v2, 2LL);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t aBlock = v26;
      uint64_t v27 = (*(uint64_t (**)(void))(v2[15] + 32LL))();
      unint64_t v29 = v28;
      uint64_t v37 = sub_100009984(v27, v28, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v29);
      swift_release_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "unable to register: %s, nil bundleIdentifier", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
    }
  }

uint64_t sub_10006EFF4(uint64_t a1, uint64_t a2)
{
  id v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10006F03C()
{
  uint64_t v1 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  __chkstk_darwin(v4);
  xpc_object_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100009FDC(&qword_100098890);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::String v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v39 - v12);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 24);
  uint64_t v17 = v16(v14, v15);
  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease(v17);
  if (!v18) {
    return 0LL;
  }
  xpc_object_t v46 = XPCDictionary.init()();
  uint64_t result = v16(v14, v15);
  int64_t v20 = 0LL;
  uint64_t v21 = *(void *)(result + 64);
  uint64_t v41 = result + 64;
  uint64_t v22 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v42 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v43 = result;
  int64_t v40 = v42 - 1;
  if ((v23 & v21) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v29 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  unint64_t v30 = v29 | (v20 << 6);
  while (2)
  {
    uint64_t v31 = *(void *)(v43 + 56);
    void *v11 = *(void *)(*(void *)(v43 + 48) + 8 * v30);
    uint64_t v32 = v31 + *(void *)(v45 + 72) * v30;
    uint64_t v33 = sub_100009FDC(&qword_100098898);
    sub_100028864(v32, (uint64_t)v11 + *(int *)(v33 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v11, 0LL, 1LL, v33);
    while (1)
    {
      sub_1000706AC((uint64_t)v11, (uint64_t)v13);
      uint64_t v38 = sub_100009FDC(&qword_100098898);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v13, 1LL, v38) == 1)
      {
        swift_release(v43);
        return (uint64_t)v46;
      }

      uint64_t v25 = *v13;
      sub_100028820((uint64_t)v13 + *(int *)(v38 + 48), (uint64_t)v7);
      uint64_t v26 = String.init(cString:)(v25);
      uint64_t v28 = v27;
      sub_100028864((uint64_t)v7, (uint64_t)v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v3, 0LL, 1LL, v44);
      XPCDictionary.subscript.setter((uint64_t)v3, v26, v28);
      uint64_t result = sub_1000288A8((uint64_t)v7);
      if (v24) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v34 = v20 + 1;
      if (__OFADD__(v20, 1LL))
      {
        __break(1u);
        goto LABEL_31;
      }

      if (v34 < v42)
      {
        unint64_t v35 = *(void *)(v41 + 8 * v34);
        if (v35) {
          goto LABEL_12;
        }
        int64_t v36 = v20 + 2;
        ++v20;
        if (v34 + 1 < v42)
        {
          unint64_t v35 = *(void *)(v41 + 8 * v36);
          if (v35) {
            goto LABEL_15;
          }
          int64_t v20 = v34 + 1;
          if (v34 + 2 < v42)
          {
            unint64_t v35 = *(void *)(v41 + 8 * (v34 + 2));
            if (v35)
            {
              v34 += 2LL;
              goto LABEL_12;
            }

            int64_t v36 = v34 + 3;
            int64_t v20 = v34 + 2;
            if (v34 + 3 < v42) {
              break;
            }
          }
        }
      }

LABEL_31:
  __break(1u);
  return result;
}

void sub_10006F3F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for XPCActivityHandle();
  uint64_t v8 = swift_allocObject(v7, 24LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v9 = (_xpc_activity_s *)swift_unknownObjectRetain(a1);
  xpc_activity_state_t state = xpc_activity_get_state(v9);
  if (state == 2)
  {
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v20, (uint64_t)qword_10009E828);
    uint64_t v21 = swift_retain_n(v2, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v48 = v25;
      uint64_t v26 = (*(uint64_t (**)(void))(*(void *)(v2 + 120) + 32LL))();
      unint64_t v28 = v27;
      uint64_t v47 = sub_100009984(v26, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      swift_release_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "run: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
    }

    uint64_t v41 = *(_xpc_activity_s **)(v8 + 16);
    if (!xpc_activity_should_defer(v41))
    {
      xpc_activity_set_state(v41, 4LL);
      uint64_t v43 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v6, 1LL, 1LL, v43);
      uint64_t v44 = (void *)swift_allocObject(&unk_100092E08, 48LL, 7LL);
      void v44[2] = 0LL;
      v44[3] = 0LL;
      v44[4] = v2;
      v44[5] = v8;
      swift_retain(v2);
      uint64_t v42 = sub_100016C04((uint64_t)v6, (uint64_t)&unk_100098880, (uint64_t)v44);
      goto LABEL_26;
    }

    xpc_activity_set_state(v41, 3LL);
  }

  else if (state)
  {
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v29, (uint64_t)qword_10009E828);
    swift_retain_n(v2, 2LL);
    uint64_t v30 = swift_retain_n(v8, 2LL);
    id v46 = (id)Logger.logObject.getter(v30);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v46, v31))
    {
      swift_release_n(v8, 3LL);
      swift_release_n(v2, 2LL);

      return;
    }

    uint64_t v32 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v34 = (*(uint64_t (**)(void))(*(void *)(v2 + 120) + 32LL))();
    unint64_t v36 = v35;
    uint64_t v47 = sub_100009984(v34, v35, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v36);
    swift_release_n(v2, 2LL);
    *(_WORD *)(v32 + 12) = 2048;
    xpc_activity_state_t v37 = xpc_activity_get_state(*(xpc_activity_t *)(v8 + 16));
    swift_release(v8);
    uint64_t v47 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 14, v32 + 22);
    swift_release(v8);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v46,  v31,  "activity: %s, encountered unrecognized XPC activity state: %ld",  (uint8_t *)v32,  0x16u);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v11, (uint64_t)qword_10009E828);
    uint64_t v12 = swift_retain_n(v2, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v48 = v16;
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)(v2 + 120) + 32LL))();
      unint64_t v19 = v18;
      uint64_t v47 = sub_100009984(v17, v18, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v19);
      swift_release_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "checkin: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
    }

    uint64_t v38 = sub_10006F03C();
    if (v38)
    {
      uint64_t v39 = (void *)v38;
      xpc_object_t v40 = xpc_activity_copy_criteria(*(xpc_activity_t *)(v8 + 16));
      swift_unknownObjectRelease(v40);
      if (!v40) {
        xpc_activity_set_criteria(*(xpc_activity_t *)(v8 + 16), v39);
      }
      swift_unknownObjectRelease(v39);
    }
  }

  uint64_t v42 = v8;
LABEL_26:
  swift_release(v42);
}

uint64_t sub_10006FA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10006FA30, a4);
}

uint64_t sub_10006FA30()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006FA60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_100009FDC(&qword_1000963A0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = (*(uint64_t (**)(uint64_t))(v4 + 136))(v6);
  uint64_t v10 = *(void *)(a1 + 16);
  if ((v9 & 1) != 0)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(a1 + 16), 5LL);
    if (qword_10009E820 != -1) {
      swift_once(&qword_10009E820, sub_10006E878);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100009FC4(v11, (uint64_t)qword_10009E828);
    uint64_t v12 = swift_retain_n(v2, 2LL);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)os_log_type_t v14 = 136315138;
      aBlock[0] = v15;
      uint64_t v16 = (*(uint64_t (**)(void))(v2[15] + 32LL))();
      unint64_t v18 = v17;
      uint64_t v27 = sub_100009984(v16, v17, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, aBlock, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      swift_release_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v26, v13, "disabled: skipping %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
    }
  }

  else
  {
    aBlock[4] = (uint64_t)sub_1000702E0;
    uint64_t v29 = v2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_10006EFF4;
    aBlock[3] = (uint64_t)&unk_100092D80;
    unint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v29;
    swift_retain(v2);
    swift_release(v20);
    uint64_t v21 = xpc_activity_add_eligibility_changed_handler(v10, v19);
    _Block_release(v19);
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v8, 1LL, 1LL, v22);
    unint64_t v23 = sub_1000702E8();
    unint64_t v24 = (void *)swift_allocObject(&unk_100092DB8, 64LL, 7LL);
    void v24[2] = v2;
    v24[3] = v23;
    v24[4] = v21;
    v24[5] = a1;
    v24[6] = v2;
    v24[7] = v4;
    swift_retain_n(v2, 2LL);
    swift_retain(a1);
    uint64_t v25 = sub_100008680((uint64_t)v8, (uint64_t)&unk_100098858, (uint64_t)v24);
    (*(void (**)(uint64_t))(*v2 + 120LL))(v25);
  }

uint64_t sub_10006FD78(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_1000963A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = xpc_activity_should_defer(a1);
  if ((_DWORD)result)
  {
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
    char v9 = (void *)swift_allocObject(&unk_100092DE0, 40LL, 7LL);
    v9[2] = 0LL;
    _OWORD v9[3] = 0LL;
    v9[4] = a2;
    swift_retain(a2);
    uint64_t v10 = sub_100016C04((uint64_t)v6, (uint64_t)&unk_100098868, (uint64_t)v9);
    return swift_release(v10);
  }

  return result;
}

uint64_t sub_10006FE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_10006FE64, a4);
}

uint64_t sub_10006FE64()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 112LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v0 + 16);
    sub_100009FDC(&qword_100098870);
    Task.cancel()();
    (*(void (**)(void))(*(void *)v3 + 120LL))(0LL);
    swift_release(v2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[9] = a5;
  void v6[10] = a6;
  v6[8] = a4;
  return swift_task_switch(sub_10006FF08, a6);
}

void sub_10006FF08()
{
  uint64_t v1 = (int *)static XPCActivity.makeHandler;
  v0[11] = static XPCActivity.makeHandler;
  if (v1)
  {
    uint64_t v2 = v0[10];
    uint64_t v3 = qword_10009EEC0;
    v0[12] = qword_10009EEC0;
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = *(void *)(v2 + 120);
    uint64_t v6 = v1[1];
    uint64_t v8 = (int *)((char *)v1 + *v1);
    swift_retain(v3);
    uint64_t v7 = (void *)swift_task_alloc(v6);
    v0[13] = v7;
    void *v7 = v0;
    v7[1] = sub_10006FFBC;
    ((void (*)(uint64_t, uint64_t, void))v8)(v4, v5, v0[10]);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10006FFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  void v3[7] = a2;
  uint64_t v5 = v3[12];
  uint64_t v4 = v3[13];
  uint64_t v7 = v3[10];
  uint64_t v6 = v3[11];
  v3[14] = a1;
  swift_task_dealloc(v4);
  sub_100028AAC(v6, v5);
  return swift_task_switch(sub_100070038, v7);
}

uint64_t sub_100070038()
{
  uint64_t v1 = v0[7];
  uint64_t ObjectType = swift_getObjectType(v0[14]);
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100070100;
  return v6(ObjectType, v1);
}

uint64_t sub_100070100()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(sub_100070158, v1);
}

uint64_t sub_100070158()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 112));
  sub_1000703D0(v3, v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCActivity.__allocating_init(handlerType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, 137LL, 15LL);
  swift_defaultActor_initialize();
  *(void *)(v5 + 1memset(&strm.total_in, 0, 20) = a2;
  *(void *)(v5 + 128) = 0LL;
  *(_BYTE *)(v5 + 136) = 0;
  *(void *)(v5 + 112) = a1;
  return v5;
}

uint64_t XPCActivity.init(handlerType:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1memset(&strm.total_in, 0, 20) = a2;
  *(void *)(v2 + 128) = 0LL;
  *(_BYTE *)(v2 + 136) = 0;
  *(void *)(v2 + 112) = a1;
  return v2;
}

uint64_t XPCActivity.deinit()
{
  return v0;
}

uint64_t XPCActivity.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100070288(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100070298(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for XPCActivityHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtC20CloudTelemetryShared17XPCActivityHandle);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC20CloudTelemetryShared11XPCActivity);
}

uint64_t sub_1000702E0(_xpc_activity_s *a1)
{
  return sub_10006FD78(a1, v1);
}

unint64_t sub_1000702E8()
{
  unint64_t result = qword_100098850;
  if (!qword_100098850)
  {
    uint64_t v1 = type metadata accessor for XPCActivity();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for XPCActivity, v1);
    atomic_store(result, (unint64_t *)&qword_100098850);
  }

  return result;
}

uint64_t sub_10007032C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100070360()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_10009884C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A560;
  void v5[9] = v3;
  v5[10] = v4;
  v5[8] = v2;
  return swift_task_switch(sub_10006FF08, v4);
}

void sub_1000703D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    xpc_activity_remove_eligibility_changed_handler();
  }
  xpc_activity_set_state(*(xpc_activity_t *)(a2 + 16), 5LL);
  if (qword_10009E820 != -1) {
    swift_once(&qword_10009E820, sub_10006E878);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100009FC4(v5, (uint64_t)qword_10009E828);
  uint64_t v6 = swift_retain_n(a3, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)char v9 = 136315138;
    uint64_t v15 = v10;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(a3 + 120) + 32LL))();
    unint64_t v13 = v12;
    uint64_t v14 = sub_100009984(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
    swift_release_n(a3, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "done: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a3, 2LL);
  }

uint64_t sub_10007058C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000705B8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100098864);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001B608;
  v3[2] = v2;
  return swift_task_switch(sub_10006FE64, v2);
}

uint64_t sub_100070618()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10007064C()
{
  uint64_t v2 = swift_task_alloc(dword_10009887C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000A560;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_10006FA30, v3);
}

uint64_t sub_1000706AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC(&qword_100098890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

const char *MessageKeys.eventType.unsafeMutableAddressor()
{
  return "et";
}

uint64_t static MessageKeys.eventType.getter()
{
  return 29797LL;
}

void *MessageKeys.clientType.unsafeMutableAddressor()
{
  return &static MessageKeys.clientType;
}

uint64_t static MessageKeys.clientType.getter()
{
  return 29795LL;
}

void *MessageKeys.legacyClient.unsafeMutableAddressor()
{
  return &static MessageKeys.legacyClient;
}

uint64_t static MessageKeys.legacyClient.getter()
{
  return 31084LL;
}

void *MessageKeys.payload.unsafeMutableAddressor()
{
  return &static MessageKeys.payload;
}

uint64_t static MessageKeys.payload.getter()
{
  return 27760LL;
}

void *MessageKeys.sessionID.unsafeMutableAddressor()
{
  return &static MessageKeys.sessionID;
}

uint64_t static MessageKeys.sessionID.getter()
{
  return 25705LL;
}

const char *MessageKeys.hierarchyLevel.unsafeMutableAddressor()
{
  return "hlvl";
}

uint64_t static MessageKeys.hierarchyLevel.getter()
{
  return 1819700328LL;
}

const char *MessageKeys.hierarchyToken.unsafeMutableAddressor()
{
  return "hktn";
}

uint64_t static MessageKeys.hierarchyToken.getter()
{
  return 1853123432LL;
}

const char *MessageKeys.samplingUUID.unsafeMutableAddressor()
{
  return "suuid";
}

uint64_t static MessageKeys.samplingUUID.getter()
{
  return 0x6469757573LL;
}

void *MessageKeys.transportConfiguration.unsafeMutableAddressor()
{
  return &static MessageKeys.transportConfiguration;
}

uint64_t static MessageKeys.transportConfiguration.getter()
{
  return 25460LL;
}

const char *MessageKeys.allowed.unsafeMutableAddressor()
{
  return "allowed";
}

uint64_t static MessageKeys.allowed.getter()
{
  return 0x6465776F6C6C61LL;
}

const char *MessageKeys.denied.unsafeMutableAddressor()
{
  return "denied";
}

uint64_t static MessageKeys.denied.getter()
{
  return 0x6465696E6564LL;
}

const char *MessageKeys.overrideSampling.unsafeMutableAddressor()
{
  return "orsf";
}

uint64_t static MessageKeys.overrideSampling.getter()
{
  return 1718841967LL;
}

void *MessageKeys.sendOneMessageSessionInfo.unsafeMutableAddressor()
{
  return &static MessageKeys.sendOneMessageSessionInfo;
}

uint64_t static MessageKeys.sendOneMessageSessionInfo.getter()
{
  return 7549299LL;
}

void *MessageKeys.sendOneMessageEvent.unsafeMutableAddressor()
{
  return &static MessageKeys.sendOneMessageEvent;
}

uint64_t static MessageKeys.sendOneMessageEvent.getter()
{
  return 6631795LL;
}

void *MessageKeys.tcAllowsCellularAccess.unsafeMutableAddressor()
{
  return &static MessageKeys.tcAllowsCellularAccess;
}

uint64_t static MessageKeys.tcAllowsCellularAccess.getter()
{
  return 97LL;
}

void *MessageKeys.tcAllowsExpensiveAccess.unsafeMutableAddressor()
{
  return &static MessageKeys.tcAllowsExpensiveAccess;
}

uint64_t static MessageKeys.tcAllowsExpensiveAccess.getter()
{
  return 101LL;
}

void *MessageKeys.tcBundleID.unsafeMutableAddressor()
{
  return &static MessageKeys.tcBundleID;
}

uint64_t static MessageKeys.tcBundleID.getter()
{
  return 98LL;
}

ValueMetadata *type metadata accessor for MessageKeys()
{
  return &type metadata for MessageKeys;
}

uint64_t XPCError.errorDescription.getter(void *a1)
{
  string = xpc_dictionary_get_string(a1, "XPCErrorDescription");
  if (string) {
    return String.init(cString:)(string);
  }
  else {
    return 0x64696C61766E693CLL;
  }
}

uint64_t sub_100070918()
{
  return XPCError.errorDescription.getter(*v0);
}

uint64_t XPCIncomingConnection.auditToken.getter(uint64_t a1)
{
  return *(void *)&v2[0];
}

unsigned __int8 *XPCIncomingConnection.entitlementValue(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = String.utf8CString.getter(a1, a2);
  uint64_t v7 = (void *)xpc_connection_copy_entitlement_value(a3, v6 + 32);
  swift_release(v6);
  return XPCObject.init(_:)(v7, a4);
}

void *XPCIncomingConnection.makeConnection(targetQ:delegate:)( void *a1, uint64_t a2, uint64_t a3, _xpc_connection_s *a4)
{
  uint64_t v8 = type metadata accessor for XPCConnection();
  swift_allocObject(v8, 48LL, 7LL);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a4);
  id v9 = a1;
  uint64_t v10 = sub_100072148(a4, v9, a2, a3);
  swift_unknownObjectRelease(a4);

  swift_unknownObjectRelease(a2);
  return v10;
}

void *XPCConnection.__allocating_init(conn:targetQ:delegate:)( _xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = sub_100072148(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1);

  swift_unknownObjectRelease(a3);
  return v9;
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC20CloudTelemetryShared13XPCConnection);
}

uint64_t XPCConnection.conn.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t XPCConnection.conn.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_unknownObjectRelease(v3);
}

uint64_t (*XPCConnection.conn.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t XPCConnection.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t XPCConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return swift_unknownObjectRelease(a1);
}

void (*XPCConnection.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 24, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_100070CC4;
}

void sub_100070CC4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 32) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

id XPCConnection.targetQ.getter()
{
  return *(id *)(v0 + 40);
}

uint64_t sub_100070D3C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000C274(v0, qword_10009E8C8);
  sub_100009FC4(v0, (uint64_t)qword_10009E8C8);
  return Logger.init(subsystem:category:)( 0xD00000000000001FLL,  0x800000010007CA70LL,  0x6E6E6F632E637078LL,  0xEE006E6F69746365LL);
}

uint64_t XPCConnection.__allocating_init(targetQ:delegate:)(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 48LL, 7LL);
  XPCConnection.init(targetQ:delegate:)(a1, a2, a3);
  return v7;
}

void *XPCConnection.init(targetQ:delegate:)(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  void v4[2] = 0LL;
  void v4[4] = 0LL;
  swift_unknownObjectWeakInit(v4 + 3, 0LL);
  uint64_t v8 = xpc_connection_create(0LL, a1);
  swift_beginAccess(v4 + 3, v23, 1LL, 0LL);
  void v4[4] = a3;
  swift_unknownObjectWeakAssign(v4 + 3, a2);
  swift_beginAccess(v4 + 2, v22, 1LL, 0LL);
  uint64_t v9 = v4[2];
  void v4[2] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  void v4[5] = a1;
  uint64_t v10 = qword_10009E8C0;
  uint64_t v11 = a1;
  if (v10 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100009FC4(v12, (uint64_t)qword_10009E8C8);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "A.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  xpc_connection_set_target_queue(v8, v11);
  v20[4] = j___s20CloudTelemetryShared13XPCConnectionC12eventHandler3objySo13OS_xpc_object_p_tF;
  uint64_t v21 = v4;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  v20[2] = sub_10006EFF4;
  v20[3] = &unk_100092E50;
  unint64_t v17 = _Block_copy(v20);
  unint64_t v18 = v21;
  swift_retain(v4);
  swift_release(v18);
  xpc_connection_set_event_handler(v8, v17);
  _Block_release(v17);
  xpc_connection_activate(v8);
  swift_unknownObjectRelease(v8);

  swift_unknownObjectRelease(a2);
  return v4;
}

uint64_t XPCConnection.eventHandler(obj:)(void *a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 32);
    xpc_type_t type = xpc_get_type(a1);
    xpc_type_t v7 = (xpc_type_t)XPCTypeError.getter();
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v9 = 16LL;
    if (type == v7) {
      uint64_t v9 = 8LL;
    }
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + v9))(a1, ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }

  return result;
}

uint64_t XPCConnection.__allocating_init(machService:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, _xpc_connection_s *a6)
{
  uint64_t v13 = swift_allocObject(v6, 48LL, 7LL);
  XPCConnection.init(machService:targetQ:listen:delegate:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t XPCConnection.init(machService:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, _xpc_connection_s *a6)
{
  uint64_t v7 = v6;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v14 = (_xpc_connection_s **)(v6 + 16);
  void v14[2] = 0LL;
  swift_unknownObjectWeakInit(v14 + 1, 0LL);
  if ((a4 & 1) != 0) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = 2LL;
  }
  uint64_t v16 = String.utf8CString.getter(a1, a2);
  unint64_t v17 = a3;
  swift_bridgeObjectRelease(a2);
  mach_service = xpc_connection_create_mach_service((const char *)(v16 + 32), v17, v15);

  swift_release(v16);
  swift_beginAccess(v14 + 1, v33, 1LL, 0LL);
  void v14[2] = a6;
  swift_unknownObjectWeakAssign(v14 + 1, a5);
  swift_beginAccess(v14, v32, 1LL, 0LL);
  unint64_t v19 = *v14;
  os_log_s *v14 = mach_service;
  swift_unknownObjectRetain(mach_service);
  swift_unknownObjectRelease(v19);
  void v14[3] = (_xpc_connection_s *)v17;
  uint64_t v20 = qword_10009E8C0;
  uint64_t v21 = v17;
  if (v20 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100009FC4(v22, (uint64_t)qword_10009E8C8);
  unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "B.", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  xpc_connection_set_target_queue(mach_service, v21);
  v30[4] = j___s20CloudTelemetryShared13XPCConnectionC12eventHandler3objySo13OS_xpc_object_p_tF;
  uint64_t v31 = v7;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 1107296256LL;
  void v30[2] = sub_10006EFF4;
  void v30[3] = &unk_100092E78;
  uint64_t v27 = _Block_copy(v30);
  uint64_t v28 = v31;
  swift_retain(v7);
  swift_release(v28);
  xpc_connection_set_event_handler(mach_service, v27);
  _Block_release(v27);
  xpc_connection_activate(mach_service);
  swift_unknownObjectRelease(mach_service);

  swift_unknownObjectRelease(a5);
  return v7;
}

uint64_t XPCConnection.__allocating_init(serviceName:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = swift_allocObject(v6, 48LL, 7LL);
  XPCConnection.init(serviceName:targetQ:listen:delegate:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

void XPCConnection.init(serviceName:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  v7[2] = 0LL;
  uint64_t v14 = (xpc_connection_t *)(v7 + 2);
  v7[4] = 0LL;
  swift_unknownObjectWeakInit(v7 + 3, 0LL);
  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_beginAccess(v7 + 3, v32, 1LL, 0LL);
    v7[4] = a6;
    swift_unknownObjectWeakAssign(v7 + 3, a5);
    swift_unknownObjectRelease(a5);
    swift_beginAccess(v7 + 2, v35, 1LL, 0LL);
    uint64_t v15 = v7[2];
    v7[2] = 0LL;
    swift_unknownObjectRelease(v15);
    _OWORD v7[5] = a3;
    return;
  }

  uint64_t v16 = String.utf8CString.getter(a1, a2);
  unint64_t v17 = a3;
  swift_bridgeObjectRelease(a2);
  xpc_connection_t v18 = xpc_connection_create((const char *)(v16 + 32), v17);

  swift_release(v16);
  swift_beginAccess(v7 + 3, v35, 1LL, 0LL);
  v7[4] = a6;
  swift_unknownObjectWeakAssign(v7 + 3, a5);
  swift_beginAccess(v7 + 2, v34, 1LL, 0LL);
  uint64_t v19 = v7[2];
  v7[2] = v18;
  swift_unknownObjectRetain(v18);
  swift_unknownObjectRelease(v19);
  _OWORD v7[5] = v17;
  uint64_t v20 = qword_10009E8C0;
  uint64_t v21 = v17;
  if (v20 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100009FC4(v22, (uint64_t)qword_10009E8C8);
  unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "C.", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  if (!*v14)
  {
    __break(1u);
    goto LABEL_12;
  }

  xpc_connection_set_target_queue(*v14, v21);
  uint64_t v27 = *v14;
  if (!*v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  void v32[4] = j___s20CloudTelemetryShared13XPCConnectionC12eventHandler3objySo13OS_xpc_object_p_tF;
  uint64_t v33 = v7;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 1107296256LL;
  v32[2] = sub_10006EFF4;
  void v32[3] = &unk_100092EA0;
  uint64_t v28 = _Block_copy(v32);
  uint64_t v29 = v33;
  swift_retain(v7);
  swift_unknownObjectRetain(v27);
  swift_release(v29);
  xpc_connection_set_event_handler(v27, v28);
  _Block_release(v28);
  swift_unknownObjectRelease(v27);
  uint64_t v30 = v7[2];
  if (v30)
  {
    uint64_t v31 = (_xpc_connection_s *)swift_unknownObjectRetain(v7[2]);
    xpc_connection_activate(v31);
    swift_unknownObjectRelease(v18);
    swift_unknownObjectRelease(v30);

    swift_unknownObjectRelease(a5);
    return;
  }

void *XPCConnection.init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072148(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1);

  swift_unknownObjectRelease(a3);
  return v7;
}

uint64_t XPCConnection.__allocating_init(listener:targetQ:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 48LL, 7LL);
  XPCConnection.init(listener:targetQ:delegate:)(a1, a2, a3, a4);
  return v9;
}

_xpc_connection_s *XPCConnection.init(listener:targetQ:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v5[2] = 0LL;
  v5[4] = 0LL;
  swift_unknownObjectWeakInit(v5 + 3, 0LL);
  swift_beginAccess(a1 + 16, v27, 0LL, 0LL);
  uint64_t result = *(_xpc_connection_s **)(a1 + 16);
  if (result)
  {
    uint64_t v11 = xpc_endpoint_create(result);
    uint64_t v12 = xpc_connection_create_from_endpoint(v11);
    swift_beginAccess(v5 + 2, v26, 1LL, 0LL);
    uint64_t v13 = v5[2];
    v5[2] = v12;
    swift_unknownObjectRetain(v12);
    swift_unknownObjectRelease(v13);
    swift_beginAccess(v5 + 3, v25, 1LL, 0LL);
    v5[4] = a4;
    swift_unknownObjectWeakAssign(v5 + 3, a3);
    v5[5] = a2;
    uint64_t v14 = qword_10009E8C0;
    uint64_t v15 = a2;
    if (v14 != -1) {
      swift_once(&qword_10009E8C0, sub_100070D3C);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100009FC4(v16, (uint64_t)qword_10009E8C8);
    xpc_connection_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "E.", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    xpc_connection_set_target_queue(v12, v15);
    aBlock[4] = j___s20CloudTelemetryShared13XPCConnectionC12eventHandler3objySo13OS_xpc_object_p_tF;
    unint64_t v24 = v5;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10006EFF4;
    aBlock[3] = &unk_100092EC8;
    uint64_t v21 = _Block_copy(aBlock);
    uint64_t v22 = v24;
    swift_retain(v5);
    swift_release(v22);
    xpc_connection_set_event_handler(v12, v21);
    _Block_release(v21);
    xpc_connection_activate(v12);
    swift_unknownObjectRelease(v11);
    swift_unknownObjectRelease(v12);
    swift_release(a1);

    swift_unknownObjectRelease(a3);
    return (_xpc_connection_s *)v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

_xpc_connection_s *XPCConnection.endpoint()()
{
  uint64_t result = *(_xpc_connection_s **)(v0 + 16);
  if (result) {
    return xpc_endpoint_create(result);
  }
  __break(1u);
  return result;
}

uint64_t XPCConnection.send(_:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v6, 0LL, 0LL);
  uint64_t v4 = *(_xpc_connection_s **)(v1 + 16);
  if (v4)
  {
    swift_unknownObjectRetain(*(void *)(v1 + 16));
    uint64_t v5 = (void *)XPCIncomingConnection.conn.getter(a1);
    xpc_connection_send_message(v4, v5);
    swift_unknownObjectRelease(v4);
    return swift_unknownObjectRelease(v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCConnection.sendWithReply(_:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 96) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  return swift_task_switch(sub_100071AF4, 0LL);
}

void sub_100071AF4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_beginAccess(v1 + 16, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 64) = v2;
  if (v2)
  {
    char v3 = *(_BYTE *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(*(void *)(v0 + 56) + 40LL);
    uint64_t v6 = swift_task_alloc(48LL);
    *(void *)(v0 + 72) = v6;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v2;
    *(void *)(v6 + 24) = v4;
    *(_BYTE *)(v6 + 32) = v3;
    *(void *)(v6 + 40) = v5;
    uint64_t v7 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    swift_unknownObjectRetain(v2);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 80) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100071BE8;
    withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 40,  0LL,  0LL,  0xD000000000000011LL,  0x800000010007CA00LL,  sub_100072358,  v6,  &type metadata for XPCDictionary);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100071BE8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100071C8C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    uint64_t v4 = sub_100071C54;
  }

  return swift_task_switch(v4, 0LL);
}

uint64_t sub_100071C54()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 40));
}

uint64_t sub_100071C8C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071CC8(uint64_t a1, _xpc_connection_s *a2, uint64_t a3, dispatch_queue_s *a4)
{
  uint64_t v8 = sub_100009FDC((uint64_t *)&unk_100098980);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)XPCIncomingConnection.conn.getter(a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100092F50, v13 + v10, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v14 + v13,  (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  aBlock[4] = sub_100072454;
  uint64_t v18 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10006EFF4;
  aBlock[3] = &unk_100092F68;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release(v18);
  xpc_connection_send_message_with_reply(a2, v11, a4, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease(v11);
}

Swift::Bool __swiftcall OS_xpc_object.isError()()
{
  xpc_type_t type = xpc_get_type(v0);
  return type == XPCTypeError.getter();
}

uint64_t XPCConnection.auditToken.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    __break(1u);
  }
  xpc_connection_get_audit_token(v1, v3);
  return *(void *)&v3[0];
}

_xpc_connection_s *XPCConnection.remoteUID.getter()
{
  uint64_t result = *(_xpc_connection_s **)(v0 + 16);
  if (result) {
    return (_xpc_connection_s *)xpc_connection_get_euid(result);
  }
  __break(1u);
  return result;
}

uint64_t XPCConnection.deinit()
{
  uint64_t v1 = v0;
  if (qword_10009E8C0 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100009FC4(v2, (uint64_t)qword_10009E8C8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "connection released", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_beginAccess(v1 + 16, v9, 0LL, 0LL);
  uint64_t v7 = *(_xpc_connection_s **)(v1 + 16);
  if (v7)
  {
    xpc_connection_cancel(v7);
    uint64_t v7 = *(_xpc_connection_s **)(v1 + 16);
  }

  swift_unknownObjectRelease(v7);
  sub_100072364(v1 + 24);

  return v1;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (qword_10009E8C0 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100009FC4(v2, (uint64_t)qword_10009E8C8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "connection released", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_beginAccess(v1 + 16, v9, 0LL, 0LL);
  uint64_t v7 = *(_xpc_connection_s **)(v1 + 16);
  if (v7)
  {
    xpc_connection_cancel(v7);
    uint64_t v7 = *(_xpc_connection_s **)(v1 + 16);
  }

  swift_unknownObjectRelease(v7);
  sub_100072364(v1 + 24);

  return swift_deallocClassInstance(v1, 48LL, 7LL);
}

Swift::OpaquePointer __swiftcall OS_xpc_object.type()()
{
  return (Swift::OpaquePointer)xpc_get_type(v0);
}

void *sub_100072148(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v5 = v4;
  v5[2] = 0LL;
  v5[4] = 0LL;
  swift_unknownObjectWeakInit(v5 + 3, 0LL);
  swift_beginAccess(v5 + 2, v24, 1LL, 0LL);
  uint64_t v10 = v5[2];
  v5[2] = a1;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v10);
  swift_beginAccess(v5 + 3, v23, 1LL, 0LL);
  v5[4] = a4;
  swift_unknownObjectWeakAssign(v5 + 3, a3);
  v5[5] = a2;
  uint64_t v11 = qword_10009E8C0;
  uint64_t v12 = a2;
  if (v11 != -1) {
    swift_once(&qword_10009E8C0, sub_100070D3C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100009FC4(v13, (uint64_t)qword_10009E8C8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "D.", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  xpc_connection_set_target_queue(a1, v12);
  v21[4] = j___s20CloudTelemetryShared13XPCConnectionC12eventHandler3objySo13OS_xpc_object_p_tF;
  uint64_t v22 = v5;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_10006EFF4;
  v21[3] = &unk_100092F90;
  uint64_t v18 = _Block_copy(v21);
  os_log_type_t v19 = v22;
  swift_retain(v5);
  swift_release(v19);
  xpc_connection_set_event_handler(a1, v18);
  _Block_release(v18);
  xpc_connection_activate(a1);
  return v5;
}

uint64_t sub_100072340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100072350(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100072358(uint64_t a1)
{
  return sub_100071CC8(a1, *(_xpc_connection_s **)(v1 + 16), *(void *)(v1 + 24), *(dispatch_queue_s **)(v1 + 40));
}

uint64_t sub_100072364(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007238C()
{
  unint64_t result = qword_1000988A8;
  if (!qword_1000988A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_1000988A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

ValueMetadata *type metadata accessor for XPCIncomingConnection()
{
  return &type metadata for XPCIncomingConnection;
}

uint64_t sub_1000723F0()
{
  uint64_t v1 = sub_100009FDC((uint64_t *)&unk_100098980);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100072454(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == XPCTypeError.getter())
  {
    unint64_t v6 = sub_10007238C();
    uint64_t v7 = swift_allocError(&type metadata for XPCError, v6, 0LL, 0LL);
    *uint64_t v8 = a1;
    uint64_t v10 = v7;
    swift_unknownObjectRetain(a1);
    uint64_t v9 = sub_100009FDC((uint64_t *)&unk_100098980);
    return CheckedContinuation.resume(throwing:)(&v10, v9);
  }

  else
  {
    uint64_t v3 = swift_unknownObjectRetain(a1);
    uint64_t v10 = XPCIncomingConnection.init(conn:)(v3);
    uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100098980);
    return CheckedContinuation.resume(returning:)(&v10, v4);
  }

void getTimeIntervalSince1970(Date:)()
{
  double v0 = Date.timeIntervalSince1970.getter();
  if (v0 >= 0.0 && (*(void *)&v0 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL)
  {
    if (v0 <= -9.22337204e18)
    {
      __break(1u);
    }

    else if (v0 < 9.22337204e18)
    {
      return;
    }

    __break(1u);
  }

const char *PostInstallActivityConfig.identifier.unsafeMutableAddressor()
{
  return "postinstall";
}

uint64_t static PostInstallActivityConfig.identifier.getter()
{
  return 0x74736E6974736F70LL;
}

uint64_t sub_1000725EC()
{
  uint64_t v0 = sub_100009FDC(&qword_100098570);
  uint64_t v1 = sub_100009FDC(&qword_100098578);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_100077C70;
  uint64_t v7 = (const char **)(v6 + v5);
  uint64_t v8 = (const char **)((char *)v7 + *(int *)(v1 + 48));
  _xpc_connection_s *v7 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v8 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v8[1] = v9;
  uint64_t v10 = type metadata accessor for XPCObject(0LL);
  uint64_t result = swift_storeEnumTagMultiPayload(v8, v10, 8LL);
  if (XPC_ACTIVITY_POWER_NAP)
  {
    uint64_t v12 = (char *)v7 + v3 + *(int *)(v1 + 48);
    *(const char **)((char *)v7 + v3) = (const char *)XPC_ACTIVITY_POWER_NAP;
    *uint64_t v12 = 1;
    uint64_t result = swift_storeEnumTagMultiPayload(v12, v10, 2LL);
    if (XPC_ACTIVITY_POST_INSTALL)
    {
      uint64_t v13 = (const char **)((char *)v7 + 2 * v3);
      uint64_t v14 = (char *)v13 + *(int *)(v1 + 48);
      *uint64_t v13 = XPC_ACTIVITY_POST_INSTALL;
      _BYTE *v14 = 1;
      swift_storeEnumTagMultiPayload(v14, v10, 2LL);
      unint64_t v15 = sub_10006C994(v6);
      swift_setDeallocating(v6);
      swift_arrayDestroy(v7, 3LL, v1);
      uint64_t result = swift_deallocClassInstance(v6, 32LL, 7LL);
      static PostInstallActivityConfig.activityFlags = v15;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *PostInstallActivityConfig.activityFlags.unsafeMutableAddressor()
{
  if (qword_10009EA60 != -1) {
    swift_once(&qword_10009EA60, sub_1000725EC);
  }
  return &static PostInstallActivityConfig.activityFlags;
}

double static PostInstallActivityConfig.activityFlags.getter()
{
  if (qword_10009EA60 != -1) {
    swift_once(&qword_10009EA60, sub_1000725EC);
  }
  swift_beginAccess(&static PostInstallActivityConfig.activityFlags, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static PostInstallActivityConfig.activityFlags).n128_u64[0];
  return result;
}

uint64_t static PostInstallActivityConfig.activityFlags.setter(uint64_t a1)
{
  if (qword_10009EA60 != -1) {
    swift_once(&qword_10009EA60, sub_1000725EC);
  }
  swift_beginAccess(&static PostInstallActivityConfig.activityFlags, v4, 1LL, 0LL);
  uint64_t v2 = static PostInstallActivityConfig.activityFlags;
  static PostInstallActivityConfig.activityFlags = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static PostInstallActivityConfig.activityFlags.modify(uint64_t a1))(void)
{
  if (qword_10009EA60 != -1) {
    swift_once(&qword_10009EA60, sub_1000725EC);
  }
  swift_beginAccess(&static PostInstallActivityConfig.activityFlags, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

ValueMetadata *type metadata accessor for PostInstallActivityConfig()
{
  return &type metadata for PostInstallActivityConfig;
}

const char *CacheCleanupActivityConfig.identifier.unsafeMutableAddressor()
{
  return "db-cleanup";
}

uint64_t static CacheCleanupActivityConfig.identifier.getter()
{
  return 0x6E61656C632D6264LL;
}

uint64_t sub_100072924()
{
  uint64_t v0 = sub_100009FDC(&qword_100098570);
  uint64_t v1 = sub_100009FDC(&qword_100098578);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 11 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1000799D0;
  uint64_t v7 = (const char **)(v6 + v5);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 48);
  _xpc_connection_s *v7 = XPC_ACTIVITY_REPEATING;
  *uint64_t v8 = 1;
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  swift_storeEnumTagMultiPayload(v8, v9, 2LL);
  uint64_t v10 = (const char **)((char *)v7 + v3 + *(int *)(v1 + 48));
  *(const char **)((char *)v7 + v3) = XPC_ACTIVITY_DELAY;
  *uint64_t v10 = 86400LL;
  swift_storeEnumTagMultiPayload(v10, v9, 3LL);
  uint64_t v11 = (const char **)((char *)v7 + 2 * v3);
  uint64_t v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  void *v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v12 = 43200LL;
  swift_storeEnumTagMultiPayload(v12, v9, 3LL);
  uint64_t v13 = (const char **)((char *)v7 + 3 * v3);
  uint64_t v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *uint64_t v13 = XPC_ACTIVITY_PRIORITY;
  void *v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8LL);
  os_log_type_t v16 = (const char **)((char *)v7 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *os_log_type_t v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  _BYTE *v17 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload(v17, v9, 2LL);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_9;
  }

  os_log_type_t v19 = (const char **)((char *)v7 + 5 * v3);
  uint64_t v20 = (char *)v19 + *(int *)(v1 + 48);
  *os_log_type_t v19 = XPC_ACTIVITY_POWER_NAP;
  *uint64_t v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v20, v9, 2LL);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v21 = (const char **)((char *)v7 + 6 * v3);
  uint64_t v22 = (void *)((char *)v21 + *(int *)(v1 + 48));
  *uint64_t v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *uint64_t v22 = 43200LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v22, v9, 4LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v23 = (const char **)((char *)&v7[v3] - v3);
  unint64_t v24 = (void *)((char *)v23 + *(int *)(v1 + 48));
  *uint64_t v23 = XPC_ACTIVITY_EXPECTED_DURATION;
  int64_t *v24 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload(v24, v9, 3LL);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  os_log_type_t v25 = &v7[v3];
  uint64_t v26 = (const char **)((char *)v25 + *(int *)(v1 + 48));
  uint8_t *v25 = (const char *)XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v26 = 0xD000000000000025LL;
  v26[1] = 0x800000010007C900LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v26, v9, 8LL);
  if (!XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v27 = (const char **)((char *)v7 + 9 * v3);
  uint64_t v28 = (void *)((char *)v27 + *(int *)(v1 + 48));
  *uint64_t v27 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
  *uint64_t v28 = 1LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v28, v9, 4LL);
  if (XPC_ACTIVITY_DISK_INTENSIVE)
  {
    uint64_t v29 = (const char **)((char *)v7 + 10 * v3);
    uint64_t v30 = (char *)v29 + *(int *)(v1 + 48);
    *uint64_t v29 = XPC_ACTIVITY_DISK_INTENSIVE;
    *uint64_t v30 = 1;
    swift_storeEnumTagMultiPayload(v30, v9, 2LL);
    unint64_t v31 = sub_10006C994(v6);
    swift_setDeallocating(v6);
    swift_arrayDestroy(v7, 11LL, v1);
    uint64_t result = swift_deallocClassInstance(v6, 32LL, 7LL);
    static CacheCleanupActivityConfig.activityFlags = v31;
    return result;
  }

uint64_t *CacheCleanupActivityConfig.activityFlags.unsafeMutableAddressor()
{
  if (qword_10009EA68 != -1) {
    swift_once(&qword_10009EA68, sub_100072924);
  }
  return &static CacheCleanupActivityConfig.activityFlags;
}

double static CacheCleanupActivityConfig.activityFlags.getter()
{
  if (qword_10009EA68 != -1) {
    swift_once(&qword_10009EA68, sub_100072924);
  }
  swift_beginAccess(&static CacheCleanupActivityConfig.activityFlags, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static CacheCleanupActivityConfig.activityFlags).n128_u64[0];
  return result;
}

uint64_t static CacheCleanupActivityConfig.activityFlags.setter(uint64_t a1)
{
  if (qword_10009EA68 != -1) {
    swift_once(&qword_10009EA68, sub_100072924);
  }
  swift_beginAccess(&static CacheCleanupActivityConfig.activityFlags, v4, 1LL, 0LL);
  uint64_t v2 = static CacheCleanupActivityConfig.activityFlags;
  static CacheCleanupActivityConfig.activityFlags = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static CacheCleanupActivityConfig.activityFlags.modify(uint64_t a1))(void)
{
  if (qword_10009EA68 != -1) {
    swift_once(&qword_10009EA68, sub_100072924);
  }
  swift_beginAccess(&static CacheCleanupActivityConfig.activityFlags, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

ValueMetadata *type metadata accessor for CacheCleanupActivityConfig()
{
  return &type metadata for CacheCleanupActivityConfig;
}

uint64_t XPCMessage.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

Swift::Int sub_100072E20()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100072E64()
{
}

Swift::Int sub_100072E8C(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100072ECC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s20CloudTelemetryShared10XPCMessageV11MessageTypeO8rawValueAESgs5Int64V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100072EF4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t XPCMessage.ty.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t XPCMessage.init(ty:payload:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2;
  swift_unknownObjectRetain(a2);
  xpc_object_t v7 = xpc_int64_create(a1);
  XPCObject.init(_:)(v7, (uint64_t)v6);
  XPCDictionary.subscript.setter((uint64_t)v6, 1701869940LL, 0xE400000000000000LL);
  swift_unknownObjectRelease(a2);
  return v10;
}

void *XPCMessage.init(fromXPC:)(void *a1)
{
  uint64_t v2 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  swift_getObjectType(a1);
  rawValue = OS_xpc_object.type()()._rawValue;
  if (rawValue != XPCTypeDictionary.getter())
  {
    uint64_t v6 = a1;
LABEL_3:
    swift_unknownObjectRelease(v6);
    return 0LL;
  }

  uint64_t v7 = swift_unknownObjectRetain(a1);
  uint64_t v8 = (void *)XPCIncomingConnection.init(conn:)(v7);
  XPCDictionary.subscript.getter(1701869940LL, 0xE400000000000000LL, v8, (uint64_t)v4);
  swift_unknownObjectRelease(a1);
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v4, 1LL, v9) == 1)
  {
    swift_unknownObjectRelease(v8);
    sub_1000739CC((uint64_t)v4);
    return 0LL;
  }

  if (swift_getEnumCaseMultiPayload(v4, v9) != 3)
  {
    swift_unknownObjectRelease(v8);
    sub_1000288A8((uint64_t)v4);
    return 0LL;
  }

  if (*v4 >= 4uLL)
  {
    uint64_t v6 = v8;
    goto LABEL_3;
  }

  return v8;
}

uint64_t XPCMessage.description.getter(void *a1, char a2)
{
  uint64_t v45 = type metadata accessor for XPCObject(0LL);
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100009FDC((uint64_t *)&unk_100097140);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[0] = 0LL;
  v47[1] = 0xE000000000000000LL;
  LOBYTE(v46) = a2;
  _print_unlocked<A, B>(_:_:)( &v46,  v47,  &type metadata for XPCMessage.MessageType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._uint64_t countAndFlagsBits = 2683LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  uint64_t v44 = a1;
  uint64_t v11 = XPCDictionary.keys.getter(a1);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v42 = v11;
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(v11 + 40);
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
    uint64_t v43 = v9;
    while (1)
    {
      uint64_t v17 = *(v13 - 1);
      uint64_t v16 = *v13;
      swift_bridgeObjectRetain(*v13);
      XPCDictionary.subscript.getter(v17, v16, v44, (uint64_t)v9);
      uint64_t v18 = v4;
      uint64_t v19 = (uint64_t)v9;
      uint64_t v20 = (uint64_t)v6;
      sub_100028820(v19, (uint64_t)v6);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      id v46 = v14;
      unint64_t v23 = sub_100010540(v17, v16);
      uint64_t v24 = v14[2];
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }

      char v27 = v22;
      if (v14[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100073790();
        }
      }

      else
      {
        sub_100073428(v26, isUniquelyReferenced_nonNull_native);
        unint64_t v28 = sub_100010540(v17, v16);
        if ((v27 & 1) != (v29 & 1)) {
          goto LABEL_20;
        }
        unint64_t v23 = v28;
      }

      uint64_t v4 = v18;
      uint64_t v14 = v46;
      if ((v27 & 1) != 0)
      {
        uint64_t v15 = v46[7] + *(void *)(v18 + 72) * v23;
        uint64_t v6 = (char *)v20;
        sub_100073A0C(v20, v15);
      }

      else
      {
        v46[(v23 >> 6) + 8] |= 1LL << v23;
        uint64_t v30 = (uint64_t *)(v14[6] + 16 * v23);
        *uint64_t v30 = v17;
        v30[1] = v16;
        uint64_t v31 = v14[7] + *(void *)(v18 + 72) * v23;
        uint64_t v6 = (char *)v20;
        sub_100028820(v20, v31);
        uint64_t v32 = v14[2];
        BOOL v33 = __OFADD__(v32, 1LL);
        uint64_t v34 = v32 + 1;
        if (v33) {
          goto LABEL_18;
        }
        void v14[2] = v34;
        swift_bridgeObjectRetain(v16);
      }

      v13 += 2;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      --v12;
      uint64_t v9 = v43;
      if (!v12) {
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_20:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
LABEL_16:
    swift_bridgeObjectRelease(v42);
    uint64_t v35 = Dictionary.description.getter(v14, &type metadata for String, v45, &protocol witness table for String);
    xpc_activity_state_t v37 = v36;
    swift_bridgeObjectRelease(v14);
    v38._uint64_t countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v37);
    v39._uint64_t countAndFlagsBits = 125LL;
    v39._object = (void *)0xE100000000000000LL;
    String.append(_:)(v39);
    return v47[0];
  }

  return result;
}

uint64_t sub_10007341C()
{
  return XPCMessage.description.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

Swift::Int sub_100073428(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for XPCObject(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100009FDC(&qword_100098998);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  xpc_object_t v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    uint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

void sub_100073790()
{
  Swift::UInt64 v1 = v0;
  uint64_t v2 = type metadata accessor for XPCObject(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100009FDC(&qword_100098998);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *Swift::UInt64 v1 = v7;
    return;
  }

  uint64_t v28 = v1;
  uint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

unint64_t _s20CloudTelemetryShared10XPCMessageV11MessageTypeO8rawValueAESgs5Int64V_tcfC_0( unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

uint64_t sub_1000739CC(uint64_t a1)
{
  uint64_t v2 = sub_100009FDC((uint64_t *)&unk_100097140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100073A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100073A54()
{
  unint64_t result = qword_100098990;
  if (!qword_100098990)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for XPCMessage.MessageType,  &type metadata for XPCMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_100098990);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t destroy for XPCMessage(void *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *assignWithCopy for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCMessage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCMessage()
{
  return &type metadata for XPCMessage;
}

uint64_t storeEnumTagSinglePayload for XPCMessage.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100073C40 + 4 * byte_100079A25[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100073C74 + 4 * asc_100079A20[v4]))();
}

uint64_t sub_100073C74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100073C7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100073C84LL);
  }
  return result;
}

uint64_t sub_100073C90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100073C98LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100073C9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100073CA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage.MessageType()
{
  return &type metadata for XPCMessage.MessageType;
}

void sub_100073CC4()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getCKCurrentUserDefaultName(void)"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  16,  @"%s",  dlerror());

  __break(1u);
}

void sub_100073D38()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getCKOperationConfigurationClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  11,  @"Unable to find class %s",  "CKOperationConfiguration");

  __break(1u);
}

void sub_100073DB0(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *CloudKitLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"CKSoftLinkAssetFetch.m",  9,  @"%s",  *a1);

  __break(1u);
}

void sub_100073E2C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getCKContainerClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  10,  @"Unable to find class %s",  "CKContainer");

  __break(1u);
}

void sub_100073EA4()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getCKRecordZoneIDClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  13,  @"Unable to find class %s",  "CKRecordZoneID");

  __break(1u);
}

void sub_100073F1C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getCKRecordIDClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  14,  @"Unable to find class %s",  "CKRecordID");

  __break(1u);
}

void sub_100073F94()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getCKFetchRecordsOperationClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"CKSoftLinkAssetFetch.m",  15,  @"Unable to find class %s",  "CKFetchRecordsOperation");

  __break(1u);
  CocoaError._nsError.getter();
}

id objc_msgSend__allowsExpensiveAccess(void *a1, const char *a2, ...)
{
  return _[a1 _allowsExpensiveAccess];
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_allowsCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellularAccess];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assetContent(void *a1, const char *a2, ...)
{
  return _[a1 assetContent];
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_publicCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 publicCloudDatabase];
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsExpensiveNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveNetworkAccess:");
}

id objc_msgSend_setApplicationBundleIdentifierOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverride:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setDropInMemoryAssetContentASAP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDropInMemoryAssetContentASAP:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setPreferAnonymousRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferAnonymousRequests:");
}

id objc_msgSend_setShouldFetchAssetContentInMemory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContentInMemory:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}