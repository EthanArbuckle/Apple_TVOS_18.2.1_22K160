void sub_18601E36C(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

_DWORD *skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 1:
    case 6:
    case 14:
    case 19:
    case 23:
    case 28:
    case 29:
    case 31:
    case 40:
    case 44:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      int v2 = 4;
      goto LABEL_9;
    case 3:
      result = operator new(8uLL);
      v3 = off_189DF7150;
      goto LABEL_17;
    case 4:
      result = operator new(8uLL);
      v3 = off_189DF71A0;
      goto LABEL_17;
    case 5:
    case 18:
    case 38:
    case 42:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      int v2 = 2;
      goto LABEL_9;
    case 7:
    case 20:
    case 32:
    case 36:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      int v2 = 8;
      goto LABEL_9;
    case 8:
      result = operator new(8uLL);
      v3 = off_189DF71F0;
      goto LABEL_17;
    case 9:
    case 24:
      result = operator new(8uLL);
      v3 = off_189DF7240;
      goto LABEL_17;
    case 10:
      result = operator new(8uLL);
      v3 = off_189DF7100;
      goto LABEL_17;
    case 11:
    case 12:
    case 17:
    case 37:
    case 41:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      int v2 = 1;
      goto LABEL_9;
    case 13:
    case 15:
    case 21:
    case 26:
    case 27:
    case 34:
    case 35:
      result = operator new(8uLL);
      v3 = off_189DF7290;
      goto LABEL_17;
    case 16:
      result = operator new(8uLL);
      v3 = off_189DF70B0;
LABEL_17:
      *(void *)result = v3;
      break;
    case 22:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"DW_FORM_indirect not handled yet... ",  36LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v6);
    case 25:
    case 33:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      result[2] = 0;
      break;
    case 30:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      result[2] = 16;
      break;
    case 39:
    case 43:
      result = operator new(0x10uLL);
      *(void *)result = off_189DF7060;
      int v2 = 3;
LABEL_9:
      result[2] = v2;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Unhandled dwarf attribute ",  26LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      v5 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v5, (uint64_t)v6);
  }

  return result;
}

void sub_18601E60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  switch(a1)
  {
    case 5:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7330;
      goto LABEL_10;
    case 6:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7380;
      goto LABEL_10;
    case 7:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF73D0;
      goto LABEL_10;
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
      goto LABEL_11;
    case 11:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF72E0;
      goto LABEL_10;
    case 13:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF74C0;
      goto LABEL_10;
    case 15:
      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7470;
      goto LABEL_10;
    default:
      if (a1 != 23)
      {
LABEL_11:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read data binding ",  36LL);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
        Exception::Exception(v10, &v11);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v10);
      }

      result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7420;
LABEL_10:
      void *result = v8;
      result[1] = a4;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      return result;
  }

void sub_18601E7DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  if (a1 > 36)
  {
    if ((a1 - 37) < 4)
    {
LABEL_3:
      result = operator new(0x30uLL);
      void *result = off_189DF7600;
      result[1] = a4;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      result[4] = a5;
      *((_DWORD *)result + 10) = a1;
      return result;
    }

void sub_18601E968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_ref_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5)
{
  switch(a1)
  {
    case 16:
      result = operator new(0x20uLL);
      void *result = off_189DF7650;
      result[1] = a5;
      result[2] = a2;
      *((_WORD *)result + 12) = a4 | a3;
      return result;
    case 17:
      result = operator new(0x20uLL);
      v10 = off_189DF76A0;
      goto LABEL_8;
    case 18:
      result = operator new(0x20uLL);
      v10 = off_189DF76F0;
      goto LABEL_8;
    case 19:
      result = operator new(0x20uLL);
      v10 = off_189DF7740;
      goto LABEL_8;
    case 20:
      result = operator new(0x20uLL);
      v10 = off_189DF7790;
      goto LABEL_8;
    case 21:
      result = operator new(0x20uLL);
      v10 = off_189DF77E0;
LABEL_8:
      void *result = v10;
      result[1] = a5;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Unhandled form in read ref binding ",  35LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
  }

void sub_18601EB24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_flag_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (a1 == 25)
  {
    result = operator new(0x20uLL);
    uint64_t v8 = off_189DF78D0;
  }

  else
  {
    if (a1 != 12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read flag binding ",  36LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    result = operator new(0x20uLL);
    uint64_t v8 = off_189DF7880;
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_18601EC60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSymbolAbbrev(CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 1LL;
}

uint64_t TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t CSCppDwarfAttributeAction::is_skip_constant(CSCppDwarfAttributeAction *this)
{
  return 0LL;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read dwarf_address",  46LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_18601EDF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 84LL))
  {
    _WORD *v4 = v6 | v5;
    uint64_t v8 = v3[8];
    uint64_t v9 = *(void *)(v8 + 16);
    __int128 v13 = *(_OWORD *)v8;
    uint64_t v14 = v9;
    int v10 = *(_DWORD *)(a1 + 48);
    switch(v10)
    {
      case ')':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(v3);
        goto LABEL_12;
      case '*':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16((uint64_t)v3);
        goto LABEL_12;
      case '+':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes((uint64_t)v3);
        goto LABEL_12;
      case ',':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32((uint64_t)v3);
LABEL_12:
        unsigned int v12 = v11;
        break;
      default:
        if (v10 == 27) {
          unsigned int v12 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
        }
        else {
          unsigned int v12 = 0;
        }
        break;
    }

    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index( (uint64_t)&v13,  *(_DWORD *)(*(void *)(a1 + 32) + 84LL),  v12);
    **(_DWORD **)(a1 + 8) = result;
  }

  else
  {
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
    *(void *)(a1 + 40) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action_stage2( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(_WORD **)(result + 16);
  int v3 = (unsigned __int16)*v2;
  int v4 = *(unsigned __int16 *)(result + 24);
  if ((v4 & v3) == 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a2;
    *uint64_t v2 = v4 | v3;
    uint64_t v7 = *(__int128 **)(v6 + 64);
    uint64_t v8 = *((void *)v7 + 2);
    __int128 v9 = *v7;
    uint64_t v10 = v8;
    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index( (uint64_t)&v9,  *(_DWORD *)(*(void *)(result + 32) + 84LL),  *(_DWORD *)(result + 40));
    **(_DWORD **)(v5 + 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(uint64_t result)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = *(unsigned int *)(result + 8);
  LODWORD(v3) = *(_DWORD *)(result + 16);
  else {
    uint64_t v3 = v3;
  }
  uint64_t v4 = v3 - v2;
  do
  {
    if (v4 == v1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Cursor overflow, attempt to skip ULEB",  37LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
      Exception::Exception(v7, &v8);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v7);
    }

    int v5 = *(char *)(*(void *)result + v2 + v1++);
  }

  while (v5 < 0);
  *(_DWORD *)(result + 8) = v2 + v1;
  return result;
}

void sub_18601F090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index( uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::length_from_header(a1, a2);
  if (a3 >> 30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Base relative index overflow in TDwarfAddressTableStream",  56LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v12);
  }

  int v7 = 4 * a3;
  if (4 * a3 > v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Base relative index not in bounds of current address table in TDwarfAddressTableStream",  86LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    uint64_t v10 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v10, (uint64_t)v12);
  }

  if (*(_DWORD *)(a1 + 16) < v7 + a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Offset not in bounds of TDwarfAddressTableStream",  48LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    unsigned int v11 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v11, (uint64_t)v12);
  }

  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, v7 + a2);
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(a1);
}

void sub_18601F28C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 2 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint16",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned __int16 *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 2;
  return v2;
}

void sub_18601F3C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 3 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read three bytes",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(_DWORD *)(*(void *)a1 + v1) & 0xFFFFFF;
  *(_DWORD *)(a1 + 8) = v1 + 3;
  return v2;
}

void sub_18601F4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint32",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_18601F5DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::length_from_header( uint64_t a1, unsigned int a2)
{
  if (a2 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Overflow calculating start of header in TDwarfAddressTableStream",  64LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v7);
  }

  unsigned int v3 = a2 - 8;
  if (*(_DWORD *)(a1 + 16) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Invalid offset to address table header in TDwarfAddressTableStream",  66LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    __int128 v6 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v6, (uint64_t)v7);
  }

  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, v3);
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
}

void sub_18601F754( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 8LL) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 8LL) += 4;
}

uint64_t TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block1(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block1(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((v1 - v2) < 0x100)
  {
    if (v1 == (_DWORD)v2 || v1 - (int)v2 < (*(_BYTE *)(*(void *)result + v2) + 1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block1",  44LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }

    int v3 = (*(_BYTE *)(*(void *)result + v2) + 1);
  }

  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)result + v2) + 1;
  }

  *(_DWORD *)(result + 8) = v3 + v2;
  return result;
}

void sub_18601F8EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block2(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block2(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
  unsigned int v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block2",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_18601FA00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block4(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block4(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
  unsigned int v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block4",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_18601FB14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

size_t TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(*a2);
}

size_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 16) - v2;
  size_t result = strlen((const char *)(*(void *)a1 + v2));
  if ((int)result + 1 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Cursor overflow, attempt to skip FORM_string",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }

  *(_DWORD *)(a1 + 8) = result + 1 + v2;
  return result;
}

void sub_18601FC38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
  unsigned int v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block",  43LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_18601FD4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(*a2);
}

uint64_t TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 8 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint64",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(void *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_18601FFE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read dwarf_offset",  45LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_186020154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  unsigned int v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

uint64_t TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(uint64_t a1)
{
  unsigned int v1 = 0;
  uint64_t v2 = 0LL;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  do
  {
    if (*(_DWORD *)(a1 + 16) == v3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Cursor overflow, attempt to read LEB",  36LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    int v4 = *(char *)(*(void *)a1 + v3);
    unsigned int v5 = v3 + 1;
    v2 |= (unint64_t)(*(_BYTE *)(*(void *)a1 + v3) & 0x7F) << v1;
    v1 += 7;
    ++v3;
  }

  while (v4 < 0);
  BOOL v6 = (v4 & 0x40) == 0 || v1 > 0x3F;
  uint64_t v7 = -1LL << v1;
  if (v6) {
    uint64_t v7 = 0LL;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return v7 | v2;
}

void sub_186020354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (a3 == 5)
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf5_ranges(a1, (uint64_t)a2, 5);
  }

  else if (a3 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a3;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "Unexpected DWARF version parsing DW_AT_ranges: %d\n",  (uint8_t *)v4,  8u);
    }
  }

  else
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf4_ranges(a1, a2, a3);
  }

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf5_ranges( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (!v3) {
    return;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v3, 0);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
  int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
  v61 = 0LL;
  v62 = 0LL;
  v63 = 0LL;
  if (v6)
  {
    int v7 = v6;
    for (int i = 0; i != v7; ++i)
    {
      int v9 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
      int v10 = v9;
      __int128 v11 = v62;
      if (v62 >= v63)
      {
        uint64_t v13 = v61;
        uint64_t v14 = (v62 - v61) >> 2;
        unint64_t v15 = v14 + 1;
        uint64_t v16 = v63 - v61;
        if ((v63 - v61) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)&v63,  v17);
          uint64_t v13 = v61;
          __int128 v11 = v62;
        }

        else
        {
          v18 = 0LL;
        }

        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }

        v61 = v19;
        v62 = v12;
        v63 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }

      else
      {
        *(_DWORD *)v62 = v9;
        uint64_t v12 = v11 + 4;
      }

      v62 = v12;
    }
  }

  v21 = *(uint64_t **)a2;
  if (!v21) {
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 16) == 35)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v21);
    if (v23 >= (v62 - v61) >> 2) {
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = *(_DWORD *)(v22 + 92) + *(_DWORD *)&v61[4 * v23];
  }

  else
  {
    int v24 = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges(a1, (uint64_t)v21, a3);
  }

  if (v24 == -1) {
    goto LABEL_56;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v3, 0);
  *(_DWORD *)(v3 + 8) += v24;
  uint64_t v25 = v21[8];
  uint64_t v26 = *(void *)(v25 + 16);
  __int128 v59 = *(_OWORD *)v25;
  uint64_t v60 = v26;
  if (!*(void *)v3)
  {
    **(void **)(a1 + 8) = 0xFFFFFFFFLL;
    goto LABEL_56;
  }

  uint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  unint64_t v29 = -1LL;
  while (1)
  {
    int v30 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
    char v31 = v30;
    if (v30 != 1) {
      break;
    }
    unsigned int v38 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3);
    uint64_t v27 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index( (uint64_t)&v59,  *(_DWORD *)(*(void *)(a1 + 8) + 84LL),  v38);
LABEL_49:
    if (!*(void *)v3) {
      goto LABEL_53;
    }
  }

  if (v30 == 4)
  {
    unint64_t v32 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    unint64_t v33 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    v34 = *(void **)(a1 + 8);
    v35 = (_DWORD *)v34[13];
    unint64_t v36 = v34[14];
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v39 = v34[12];
      uint64_t v40 = ((uint64_t)v35 - v39) >> 3;
      unint64_t v41 = v40 + 1;
      uint64_t v42 = v36 - v39;
      if (v42 >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      else {
        unint64_t v43 = v41;
      }
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v34 + 14), v43);
      v46 = &v44[8 * v40];
      *(_DWORD *)v46 = v32;
      *((_DWORD *)v46 + 1) = v33;
      v48 = (char *)v34[12];
      v47 = (char *)v34[13];
      v49 = v46;
      if (v47 != v48)
      {
        do
        {
          uint64_t v50 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v49 - 1) = v50;
          v49 -= 8;
        }

        while (v47 != v48);
        v47 = (char *)v34[12];
      }

      v37 = v46 + 8;
      v34[12] = v49;
      v34[13] = v46 + 8;
      v34[14] = &v44[8 * v45];
      if (v47) {
        operator delete(v47);
      }
    }

    else
    {
      _DWORD *v35 = v32;
      v35[1] = v33;
      v37 = v35 + 2;
    }

    v34[13] = v37;
    if (v32 < v29) {
      unint64_t v29 = v32;
    }
    if (v28 <= v33) {
      unint64_t v28 = v33;
    }
    goto LABEL_49;
  }

  if (v30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v57);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v57,  (uint64_t)"Unimplemented range list entry kind",  35LL);
    LOBYTE(v55[0]) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v55, 1LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v58, &v56);
    Exception::Exception(v55, &v56);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v55);
  }

LABEL_53:
  uint64_t v51 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v51 = v29;
  *(_DWORD *)(v51 + 4) = v28;
  if (v29 != -1LL && v28) {
    *(_WORD *)(v51 + 68) |= 3u;
  }
LABEL_56:
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }

              v105 = 0LL;
              goto LABEL_54;
            }
          }

          v108 = 0LL;
          if (v12) {
            goto LABEL_46;
          }
          goto LABEL_53;
        }

        v18 = a1[2];
        if (v9) {
          v107 = v18 + *((unsigned int *)v9 + 12);
        }
        else {
          v107 = 0LL;
        }
        v19 = v116;
        if (v10)
        {
          v110 = v18 + *((unsigned int *)v10 + 12);
          if (v11)
          {
LABEL_50:
            v108 = v18 + *((unsigned int *)v11 + 12);
            goto LABEL_58;
          }
        }

        else
        {
          v110 = 0LL;
          if (v11) {
            goto LABEL_50;
          }
        }

        v108 = 0LL;
LABEL_58:
        if (v12)
        {
          v105 = v18 + *((unsigned int *)v12 + 12);
          if (v13)
          {
LABEL_60:
            v106 = v18 + *((unsigned int *)v13 + 12);
LABEL_67:
            int v20 = v18 + *((unsigned int *)v7 + 12);
            v117 = v18 + *((unsigned int *)v8 + 12);
            if (v19)
            {
              v102 = v18 + *((unsigned int *)v19 + 12);
              if (!v14)
              {
LABEL_81:
                v109 = 0LL;
                if (!v9)
                {
LABEL_82:
                  v103 = 0LL;
                  if (!v10)
                  {
LABEL_83:
                    uint64_t v22 = 0LL;
                    if (!v11)
                    {
LABEL_84:
                      unint64_t v23 = 0LL;
                      if (!v12)
                      {
LABEL_85:
                        v104 = 0LL;
                        if (!v13)
                        {
LABEL_86:
                          v101 = 0LL;
                          if (!v19) {
                            goto LABEL_87;
                          }
                          goto LABEL_80;
                        }

  uint64_t v50 = *(void *)(a1 + 8);
  *(void *)uint64_t v50 = v29;
  *(void *)(v50 + 8) = v28;
  if (v29 != -1LL && v28) {
    *(_WORD *)(v50 + 76) |= 3u;
  }
LABEL_56:
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }

  uint64_t result = strlcat(__dst, "Dwarf, ", __size);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_29:
    if ((a3 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }

void sub_1860208B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  unint64_t v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf4_ranges( uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges(result, v4, a3);
    if ((_DWORD)result != -1)
    {
      uint64_t v6 = a2[5];
      if (v6)
      {
        *(_DWORD *)(v6 + 8) += result;
        int v7 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
        int v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
        unsigned int v9 = 0;
        if (v7 | v8)
        {
          int v10 = *(_DWORD *)(*(void *)(v5 + 8) + 76LL);
          unsigned int v11 = -1;
          do
          {
            if (v7 == -1)
            {
              int v10 = v8;
            }

            else
            {
              unsigned int v12 = v7 + v10;
              unsigned int v13 = v10 + v8;
              uint64_t v14 = *(void **)(v5 + 8);
              unint64_t v15 = (unsigned int *)v14[13];
              unint64_t v16 = v14[14];
              if ((unint64_t)v15 >= v16)
              {
                uint64_t v18 = v14[12];
                uint64_t v19 = ((uint64_t)v15 - v18) >> 3;
                unint64_t v20 = v19 + 1;
                uint64_t v21 = v16 - v18;
                if (v21 >> 2 > v20) {
                  unint64_t v20 = v21 >> 2;
                }
                else {
                  unint64_t v22 = v20;
                }
                int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)(v14 + 14),  v22);
                uint64_t v25 = (unsigned int *)&v24[8 * v19];
                *uint64_t v25 = v12;
                v25[1] = v13;
                uint64_t v27 = (char *)v14[12];
                uint64_t v26 = (char *)v14[13];
                unint64_t v28 = v25;
                if (v26 != v27)
                {
                  do
                  {
                    uint64_t v29 = *((void *)v26 - 1);
                    v26 -= 8;
                    *((void *)v28 - 1) = v29;
                    v28 -= 2;
                  }

                  while (v26 != v27);
                  uint64_t v26 = (char *)v14[12];
                }

                unint64_t v17 = v25 + 2;
                v14[12] = v28;
                v14[13] = v25 + 2;
                v14[14] = &v24[8 * v23];
                if (v26) {
                  operator delete(v26);
                }
              }

              else
              {
                *unint64_t v15 = v12;
                v15[1] = v13;
                unint64_t v17 = v15 + 2;
              }

              v14[13] = v17;
              if (v12 < v11) {
                unsigned int v11 = v12;
              }
              if (v9 <= v13) {
                unsigned int v9 = v13;
              }
            }

            int v7 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
            int v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
          }

          while (v7 | v8);
        }

        else
        {
          unsigned int v11 = -1;
        }

        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v6, 0);
        uint64_t v30 = *(void *)(v5 + 8);
        *(_DWORD *)uint64_t v30 = v11;
        *(_DWORD *)(v30 + 4) = v9;
        if (v11 != -1)
        {
          if (v9) {
            *(_WORD *)(v30 + 68) |= 3u;
          }
        }
      }
    }
  }

  return result;
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v3 = *(_DWORD *)(a1 + 16);
  switch(v3)
  {
    case 6:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a2);
    case 7:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(a2);
    case 23:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(a2);
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    int v8 = a3;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n",  buf,  0xEu);
    int v3 = *(_DWORD *)(a1 + 16);
  }

  fprintf((FILE *)*MEMORY[0x1895F89D0], "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", a3, v3);
  return 0xFFFFFFFFLL;
}

uint64_t TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    uint64_t v4 = *(void *)(result + 32);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v5);
    uint64_t v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *uint64_t v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }

  return result;
}

const char *TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return (const char *)TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(v3);
  **(void **)(a1 + 8) = result;
  return result;
}

const char *TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 16) - v2;
  uint64_t v4 = (const char *)(*(void *)a1 + v2);
  unsigned int v5 = strlen(v4) + 1;
  if (v5 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Cursor overflow, attempt to read FORM_string",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
    Exception::Exception(v8, &v9);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v8);
  }

  *(_DWORD *)(a1 + 8) = v5 + v2;
  return v4;
}

void sub_186020E20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if ((*(_WORD *)(result + 24) & **(_WORD **)(result + 16)) != 0)
  {
    *((_DWORD *)v2 + 2) += 4;
  }

  else
  {
    uint64_t v3 = result;
    uint64_t v4 = v2[7];
    int v5 = *(_DWORD *)(result + 40);
    switch(v5)
    {
      case '%':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(*a2);
        goto LABEL_11;
      case '&':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16((uint64_t)*a2);
        goto LABEL_11;
      case '\'':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes((uint64_t)*a2);
        goto LABEL_11;
      case '(':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32((uint64_t)*a2);
        goto LABEL_11;
      default:
        if (v5 == 26)
        {
          int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(*a2);
LABEL_11:
          if ((v6 & 0xC0000000) != 0)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"FORM_strx index overflow",  24LL);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
            Exception::Exception(v12, &v13);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v12);
          }
        }

        else
        {
          int v6 = 0;
        }

        int v7 = **(_DWORD **)(v3 + 32);
        if (__CFADD__(v7, 4 * v6))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"FORM_strx offset overflow",  25LL);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
          Exception::Exception(v12, &v13);
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(v10, (uint64_t)v12);
        }

        TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v7 + 4 * v6);
        unsigned int v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(v4);
        uint64_t v9 = v2[4];
        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v9, v8);
        **(_WORD **)(v3 + 16) |= *(_WORD *)(v3 + 24);
        **(void **)(v3 + 8) = *(void *)v9 + *(unsigned int *)(v9 + 8);
        break;
    }
  }

  return result;
}

void sub_18602107C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result = *a2;
  int v5 = *(_WORD **)(a1 + 16);
  int v6 = (unsigned __int16)*v5;
  int v7 = *(unsigned __int16 *)(a1 + 24);
  if ((v7 & v6) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v5 = v7 | v6;
    if (a3 > 2) {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    }
    else {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(result);
    }
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

uint64_t TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t result)
{
  unsigned int v1 = *(_BYTE **)(result + 8);
  **(_WORD **)(result + 16) |= *(_WORD *)(result + 24);
  _BYTE *v1 = 1;
  return result;
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSourceInfoAbbrev( uint64_t a1, int a2, char a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 16) = *a4;
  *a4 = 0LL;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a4[1];
  a4[1] = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(void *)a1 = off_189DF7920;
  *(void *)(a1 + 64) = a5;
  unsigned int v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    uint64_t v9 = (char **)(a1 + 40);
    uint64_t v10 = (void *)(a1 + 56);
    do
    {
      unsigned int v11 = *v8;
      if (v11 <= 0x51)
      {
        if (*v8 > 0x11u)
        {
          if (v11 != 18)
          {
            if (v11 != 27)
            {
LABEL_42:
              int v15 = v8[1];
LABEL_43:
              action_for_string = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v15);
              goto LABEL_44;
            }

            uint64_t v13 = *(void *)(a1 + 64);
            uint64_t v14 = v13 + 32;
            __int16 v12 = 32;
LABEL_21:
            action_for_string = read_action_for_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( v8[1],  v13 + 68,  v12,  v14,  v13 + 88);
            goto LABEL_44;
          }

          int v22 = v8[1];
          if ((v22 - 41) < 4 || v22 == 27)
          {
            unint64_t v17 = operator new(0x38uLL);
            uint64_t v28 = *(void *)(a1 + 64);
            int v29 = v8[1];
            *unint64_t v17 = off_189DF7010;
            v17[1] = v28 + 4;
            v17[2] = v28 + 68;
            *((_WORD *)v17 + 12) = 2;
LABEL_39:
            v17[4] = v28;
            v17[5] = 0LL;
            *((_DWORD *)v17 + 12) = v29;
            goto LABEL_45;
          }

          if (v22 != 1)
          {
            uint64_t v51 = *(void *)(a1 + 64);
            uint64_t v24 = v51 + 68;
            uint64_t v25 = v51 + 72;
            __int16 v21 = -32766;
LABEL_41:
            action_for_string = read_action_for_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v22, v24, v21, v25);
LABEL_44:
            unint64_t v17 = action_for_string;
            goto LABEL_45;
          }

          v46 = operator new(0x20uLL);
          unint64_t v17 = v46;
          uint64_t v49 = *(void *)(a1 + 64);
          void *v46 = off_189DF6FB0;
          v46[1] = v49 + 4;
          v46[2] = v49 + 68;
          __int16 v48 = 2;
        }

        else
        {
          if (v11 == 16)
          {
            int v22 = v8[1];
            uint64_t v26 = *(void *)(a1 + 64);
            uint64_t v24 = v26 + 68;
            uint64_t v25 = v26 + 44;
            __int16 v21 = 64;
            goto LABEL_41;
          }

          if (v11 != 17) {
            goto LABEL_42;
          }
          int v15 = v8[1];
          if ((v15 - 41) < 4 || v15 == 27)
          {
            unint64_t v17 = operator new(0x38uLL);
            uint64_t v18 = *(void *)(a1 + 64);
            int v19 = v8[1];
            *unint64_t v17 = off_189DF7010;
            v17[1] = v18;
            v17[2] = v18 + 68;
            *((_WORD *)v17 + 12) = 1;
            v17[4] = v18;
            v17[5] = 0LL;
            *((_DWORD *)v17 + 12) = v19;
            goto LABEL_45;
          }

          if (v15 != 1) {
            goto LABEL_43;
          }
          v46 = operator new(0x20uLL);
          unint64_t v17 = v46;
          uint64_t v47 = *(void *)(a1 + 64);
          void *v46 = off_189DF6FB0;
          v46[1] = v47;
          v46[2] = v47 + 68;
          __int16 v48 = 1;
        }

        *((_WORD *)v46 + 12) = v48;
      }

      else
      {
        if (*v8 > 0x72u)
        {
          if (v11 == 115)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v30 = *(void *)(a1 + 64);
            uint64_t v24 = v30 + 68;
            uint64_t v25 = v30 + 84;
            goto LABEL_41;
          }

          if (v11 == 116)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v32 = *(void *)(a1 + 64);
            uint64_t v24 = v32 + 68;
            uint64_t v25 = v32 + 92;
            goto LABEL_41;
          }

          if (v11 != 16368) {
            goto LABEL_42;
          }
          __int16 v12 = 0;
          uint64_t v13 = *(void *)(a1 + 64);
          uint64_t v14 = v13 + 120;
          goto LABEL_21;
        }

        if (v11 != 82)
        {
          if (v11 == 114)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v23 = *(void *)(a1 + 64);
            uint64_t v24 = v23 + 68;
            uint64_t v25 = v23 + 88;
            goto LABEL_41;
          }

          goto LABEL_42;
        }

        int v15 = v8[1];
        if ((v15 - 41) < 4 || v15 == 27)
        {
          unint64_t v17 = operator new(0x38uLL);
          uint64_t v28 = *(void *)(a1 + 64);
          int v29 = v8[1];
          *unint64_t v17 = off_189DF7010;
          v17[1] = v28 + 8;
          v17[2] = v28 + 68;
          *((_WORD *)v17 + 12) = 0;
          goto LABEL_39;
        }

        if (v15 != 1) {
          goto LABEL_43;
        }
        unint64_t v17 = operator new(0x20uLL);
        uint64_t v50 = *(void *)(a1 + 64);
        *unint64_t v17 = off_189DF6FB0;
        v17[1] = v50 + 8;
        v17[2] = v50 + 68;
        *((_WORD *)v17 + 12) = 0;
      }

LABEL_45:
      unint64_t v33 = *(void **)(a1 + 40);
      if (v33 != *(void **)(a1 + 48)
        && (v34 = (*(uint64_t (**)(void *))(*v17 + 32LL))(v17), unint64_t v33 = *(void **)(a1 + 48), v34)
        && (int v35 = (*(uint64_t (**)(void))(*(void *)*(v33 - 1) + 32LL))(*(v33 - 1)),
            unint64_t v33 = *(void **)(a1 + 48),
            v35))
      {
        *(_DWORD *)(*(v33 - 1) + 8LL) += *((_DWORD *)v17 + 2);
        (*(void (**)(void *))(*v17 + 8LL))(v17);
      }

      else
      {
        if ((unint64_t)v33 >= *v10)
        {
          uint64_t v37 = ((char *)v33 - *v9) >> 3;
          uint64_t v38 = *v10 - (void)*v9;
          uint64_t v39 = v38 >> 2;
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v40);
          }
          else {
            unint64_t v41 = 0LL;
          }
          uint64_t v42 = &v41[8 * v37];
          *(void *)uint64_t v42 = v17;
          unint64_t v36 = v42 + 8;
          v44 = *(char **)(a1 + 40);
          unint64_t v43 = *(char **)(a1 + 48);
          if (v43 != v44)
          {
            do
            {
              uint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v42 - 1) = v45;
              v42 -= 8;
            }

            while (v43 != v44);
            unint64_t v43 = *v9;
          }

          *(void *)(a1 + 40) = v42;
          *(void *)(a1 + 48) = v36;
          *(void *)(a1 + 56) = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }

        else
        {
          *unint64_t v33 = v17;
          unint64_t v36 = v33 + 1;
        }

        *(void *)(a1 + 48) = v36;
      }

      v8 += 2;
    }

    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }

  return a1;
}

      unint64_t v33 = *(void **)(a1 + 40);
      if (v33 != *(void **)(a1 + 48)
        && (v34 = (*(uint64_t (**)(void *))(*v17 + 32LL))(v17), unint64_t v33 = *(void **)(a1 + 48), v34)
        && (int v35 = (*(uint64_t (**)(void))(*(void *)*(v33 - 1) + 32LL))(*(v33 - 1)),
            unint64_t v33 = *(void **)(a1 + 48),
            v35))
      {
        *(_DWORD *)(*(v33 - 1) + 8LL) += *((_DWORD *)v17 + 2);
        (*(void (**)(void *))(*v17 + 8LL))(v17);
      }

      else
      {
        if ((unint64_t)v33 >= *v10)
        {
          uint64_t v37 = ((char *)v33 - *v9) >> 3;
          uint64_t v38 = *v10 - (void)*v9;
          uint64_t v39 = v38 >> 2;
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v40);
          }
          else {
            unint64_t v41 = 0LL;
          }
          uint64_t v42 = &v41[8 * v37];
          *(void *)uint64_t v42 = v17;
          unint64_t v36 = v42 + 8;
          v44 = *(char **)(a1 + 40);
          unint64_t v43 = *(char **)(a1 + 48);
          if (v43 != v44)
          {
            do
            {
              uint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v42 - 1) = v45;
              v42 -= 8;
            }

            while (v43 != v44);
            unint64_t v43 = *v9;
          }

          *(void *)(a1 + 40) = v42;
          *(void *)(a1 + 48) = v36;
          *(void *)(a1 + 56) = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }

        else
        {
          *unint64_t v33 = v17;
          unint64_t v36 = v33 + 1;
        }

        *(void *)(a1 + 48) = v36;
      }

      v8 += 2;
    }

    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }

  return a1;
}

  uint64_t result = strlcat(__dst, "NameAllocated, ", __size);
  if ((a3 & 0x80000) == 0)
  {
LABEL_21:
    if ((a3 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }

void sub_186021884(_Unwind_Exception *a1)
{
}

void TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSourceInfoAbbrev( CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 2LL;
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSkipAbbrev( uint64_t a1, int a2, char a3, void *a4)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 16) = *a4;
  *a4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a4[1];
  a4[1] = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a4[2];
  a4[2] = v6;
  *(void *)a1 = off_189DF7968;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 != *(void *)(a1 + 24))
  {
    unsigned int v8 = (char **)(a1 + 40);
    uint64_t v9 = (void *)(a1 + 56);
    do
    {
      uint64_t v10 = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(*(unsigned __int16 *)(v7 + 2));
      unsigned int v11 = v10;
      __int16 v12 = *(void **)(a1 + 40);
      if (v12 != *(void **)(a1 + 48)
        && (v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v10 + 32LL))(v10), __int16 v12 = *(void **)(a1 + 48), v13)
        && (int v14 = (*(uint64_t (**)(void))(*(void *)*(v12 - 1) + 32LL))(*(v12 - 1)),
            __int16 v12 = *(void **)(a1 + 48),
            v14))
      {
        *(_DWORD *)(*(v12 - 1) + 8LL) += v11[2];
        (*(void (**)(_DWORD *))(*(void *)v11 + 8LL))(v11);
      }

      else
      {
        if ((unint64_t)v12 >= *v9)
        {
          uint64_t v16 = ((char *)v12 - *v8) >> 3;
          uint64_t v17 = *v9 - (void)*v8;
          uint64_t v18 = v17 >> 2;
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v19);
          }
          else {
            unint64_t v20 = 0LL;
          }
          __int16 v21 = &v20[8 * v16];
          *(void *)__int16 v21 = v11;
          int v15 = v21 + 8;
          uint64_t v23 = *(char **)(a1 + 40);
          int v22 = *(char **)(a1 + 48);
          if (v22 != v23)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v21 - 1) = v24;
              v21 -= 8;
            }

            while (v22 != v23);
            int v22 = *v8;
          }

          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v15;
          *(void *)(a1 + 56) = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *__int16 v12 = v11;
          int v15 = v12 + 1;
        }

        *(void *)(a1 + 48) = v15;
      }

      v7 += 4LL;
    }

    while (v7 != *(void *)(a1 + 24));
  }

  return a1;
}

void sub_186021A88(_Unwind_Exception *a1)
{
}

void TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipAbbrev(CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 0LL;
}

void std::vector<CSCppDwarfAbbrev *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }

  else
  {
    std::vector<CSCppDwarfAbbrev *>::__append((void **)a1, a2 - v2);
  }

void std::vector<CSCppDwarfAbbrev *>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }

    a1[1] = v7;
  }

  else
  {
    uint64_t v8 = v7 - (_BYTE *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      int v13 = 0LL;
    }
    int v14 = &v13[8 * v10];
    int v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }

      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17) {
      operator delete(v17);
    }
  }

uint64_t std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100]((void **)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 72);
    operator delete(v2);
  }

uint64_t parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>( uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  int v6 = *(unsigned __int16 *)(a1 + 68);
  if ((v6 & 0x10) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 40) & (v6 << 18 >> 31);
    if ((v6 & 0x2000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 40);
    }
    __int16 v9 = -8209;
  }

  else
  {
    if ((v6 & 0x200) == 0) {
      return 0LL;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 52) & (v6 << 17 >> 31);
    if ((v6 & 0x4000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 52);
    }
    __int16 v9 = -16897;
  }

  *(_WORD *)(a1 + 68) = v6 & v9;
  int v10 = (*a4)++;
  if (v10 < 10)
  {
    if (v8) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v7 == 0;
    }
    if (v14) {
      goto LABEL_26;
    }
    int v15 = *a3;
    uint64_t v16 = a3[1];
    if (v16 != *a3)
    {
      unint64_t v17 = v16 - *a3;
      do
      {
        unint64_t v18 = v17 >> 1;
        uint64_t v19 = &v15[v17 >> 1];
        uint64_t v21 = *v19;
        unint64_t v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (*(_DWORD *)(v21 + 16) + *(_DWORD *)(v21 + 12) > v7) {
          unint64_t v17 = v18;
        }
        else {
          int v15 = v20;
        }
      }

      while (v17);
    }

    if (v15 == v16 || (a2 = *v15, unsigned int v8 = v7 - *(_DWORD *)(*v15 + 12), v8 >= *(_DWORD *)(*v15 + 16)))
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        unint64_t v12 = "Ref addr is not within the bounds of any compile unit";
        int v13 = buf;
        goto LABEL_31;
      }
    }

    else
    {
LABEL_26:
      if (*(_DWORD *)(a2 + 16) >= v8)
      {
        read_specification_abbrev_at<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8, a2);
        return a2;
      }

      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        __int16 v23 = 0;
        uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        unint64_t v12 = "Out-of-bounds abstract origin or specification offset";
        int v13 = (uint8_t *)&v23;
        goto LABEL_31;
      }
    }
  }

  else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    __int16 v25 = 0;
    uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    unint64_t v12 = "Possible reference cycle in DIE";
    int v13 = (uint8_t *)&v25;
LABEL_31:
    _os_log_impl(&dword_185FC0000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
  }

  return 0LL;
}

uint64_t resolve_parsed_data_names<Dwarf<Dwarf32,Pointer32,LittleEndian>>(uint64_t a1, void *a2, void *a3)
{
  __int16 v3 = *(_WORD *)(a1 + 68);
  uint64_t v4 = (void *)(a1 + 16);
  if ((v3 & 0xC) == 8) {
    uint64_t v5 = (uint64_t *)(a1 + 24);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 16);
  }
  uint64_t v6 = *v5;
  if ((v3 & 0xC) == 8) {
    int v7 = 67141633;
  }
  else {
    int v7 = 67174401;
  }
  *a2 = v6;
  if ((v3 & 4) != 0) {
    int v8 = 0x200000;
  }
  else {
    int v8 = 0x100000;
  }
  int v9 = v7 | v8;
  if ((v3 & 4) == 0) {
    uint64_t v4 = (void *)(a1 + 24);
  }
  *a3 = *v4;
  if (*(_BYTE *)(a1 + 48) == 1 && (v3 & 0x80u) != 0) {
    unsigned int v11 = v9 | 0x40;
  }
  else {
    unsigned int v11 = v9;
  }
  if (*(_BYTE *)(a1 + 49) == 1) {
    unsigned int v12 = v11 | 0x80;
  }
  else {
    unsigned int v12 = v11;
  }
  if ((v3 & 0x100) != 0) {
    return v12;
  }
  else {
    return v11;
  }
}

uint64_t TAddressRelocator<Pointer32>::relocate(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int16 v3 = (_DWORD *)a1[3];
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 2);
    uint64_t v6 = (_DWORD *)*a1;
    do
    {
      unint64_t v7 = v5 >> 1;
      int v8 = &v6[3 * (v5 >> 1)];
      unsigned int v10 = *v8;
      int v9 = v8 + 3;
      v5 += ~(v5 >> 1);
      else {
        uint64_t v6 = v9;
      }
    }

    while (v5);
    if (v6 != (_DWORD *)*a1)
    {
      int v11 = *(v6 - 3);
      unsigned int v12 = *(v6 - 2);
      __int16 v3 = v6 - 3;
      if ((int)a2 - v11 < v12)
      {
        a1[3] = v3;
        return (v3[2] + a2);
      }
    }
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    uint64_t v15 = v2;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Attempt to relocate address [0x%llx], which is outside segment deltas\n",  (uint8_t *)&v14,  0xCu);
  }

  return v2;
}

uint64_t TDwarfAbbrevData<Dwarf<Dwarf32,Pointer32,LittleEndian>>::has_inlined_info( uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 68);
  if (a2 >= 5)
  {
    int v3 = (v2 >> 10) & 1;
LABEL_8:
    uint64_t result = 1LL;
    if ((v3 & 1) == 0 && (v2 & 0x800) == 0) {
      return (v2 >> 12) & 1;
    }
    return result;
  }

  if ((v2 & 0x400) != 0)
  {
    LOBYTE(v3) = *(_DWORD *)(a1 + 56) != 0;
    goto LABEL_8;
  }

  if ((v2 & 0x800) == 0) {
    return (v2 >> 12) & 1;
  }
  return 1LL;
}

const char *path_from_file_index<Pointer32>( void *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unint64_t v5 = (__PAIR64__(a2, a5) - 5) >> 32;
  if ((path_from_file_index<Pointer32>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer32> &,unsigned int)::suppress_error & 1) == 0)
  {
    path_from_file_index<Pointer32>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer32> &,unsigned int)::suppress_error = 1;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 232LL))(__p, a4);
      int v9 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v15 = 2048;
      uint64_t v16 = a3;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n",  buf,  0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    unsigned int v10 = (FILE *)*MEMORY[0x1895F89D0];
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a4 + 232LL))(buf, a4);
    if (v17 >= 0) {
      int v11 = buf;
    }
    else {
      int v11 = *(const char **)buf;
    }
    fprintf( v10,  "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n",  v11,  a3,  v5);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)buf);
    }
  }

  return "<Bad file name in .debug_info>";
}

void record_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>( _DWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  if (*(_DWORD *)(a3 + 8) == 29) {
    record_inlined_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>>( a1,  a2,  a3,  a5);
  }
  else {
    record_concrete_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>( (uint64_t)a1,  a2,  a3,  a4,  (void **)a5);
  }
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_compilation_unit_pc_ranges( uint64_t result)
{
  unsigned int v1 = *(int **)(result + 64);
  __int16 v2 = *((_WORD *)v1 + 34);
  if ((v2 & 1) != 0)
  {
    int v3 = *v1;
LABEL_6:
    v1[19] = v3;
    if ((v2 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  int v3 = v1[2];
  if (v3 != -1) {
    goto LABEL_6;
  }
  if ((v1[17] & 2) == 0) {
    return result;
  }
LABEL_7:
  if (v2 < 0) {
    int v4 = v1[18] + *v1;
  }
  else {
    int v4 = v1[1];
  }
  v1[20] = v4;
  return result;
}

void parse_line_numbers<Dwarf<Dwarf32,Pointer32,LittleEndian>>( uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, const char *a5, int a6, uint64_t a7, void *a8, uint64_t (***a9)(void, std::vector<std::string>::pointer), uint64_t a10, void *a11)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, a3);
  int v17 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
  unsigned int v18 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
  if (v18 - 6 >= 0xFFFFFFFC)
  {
    unsigned int v19 = v18;
    if (v18 == 5)
    {
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    }

    v52 = (CSCppStringCache *)(a7 + 96);
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(a1);
    int v54 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    if (v19 >= 4) {
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    }
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    char v53 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    unsigned int v20 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    uint64_t v21 = *(unsigned int *)(a1 + 8);
    uint64_t v57 = (unsigned __int8 *)(*(void *)a1 + v21);
    unsigned int v22 = *v57;
    *(_DWORD *)(a1 + 8) = v21 + v22;
    __p = 0LL;
    v63 = 0LL;
    uint64_t v64 = 0LL;
    if (v19 == 5)
    {
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>( (uint64_t *)a1,  a2,  5u,  a9,  v52,  a4,  (uint64_t)&__p,  (char **)&__p);
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>( (uint64_t *)a1,  a2,  5u,  a9,  v52,  a4,  (uint64_t)&__p,  (char **)a10);
    }

    else
    {
      parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>( (uint64_t *)a1,  a5,  (uint64_t (***)(void, char *))a9,  v52,  &__p,  (void **)a10);
    }

    unsigned int v60 = 0;
    int v61 = 1;
    unsigned int v23 = a3 + v17 + 4;
    if (*(_DWORD *)(a1 + 8) < v23)
    {
      int v24 = 0;
      unsigned int v25 = 1;
      do
      {
        unsigned int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
        if (v26 >= v22)
        {
          v24 += (v26 - v22) / v20 * v54;
          v61 += v53 + (v26 - v22) % v20;
          uint64_t v36 = (v24 + a6);
          if (a8) {
            LODWORD(v36) = TAddressRelocator<Pointer32>::relocate(a8, v36);
          }
LABEL_22:
          LODWORD(v58) = v36;
          *(void *)__s1 = path_from_file_index<Pointer32>((void *)a10, v25, *(unsigned int *)(a1 + 8), a7, v19);
          int v59 = 0;
          std::deque<TRawSourceInfo<Pointer32>>::emplace_back<unsigned int &,int,char const*&,int &,unsigned int &>( a11,  &v58,  &v59,  (uint64_t *)__s1,  &v61,  &v60);
        }

        else
        {
          uint64_t v27 = v26;
          switch(v26)
          {
            case 0u:
              int v28 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              if (!v28) {
                goto LABEL_62;
              }
              int v29 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
              switch(v29)
              {
                case 1:
                  int v24 = 0;
                  unsigned int v25 = 1;
                  unsigned int v60 = 0;
                  int v61 = 1;
                  break;
                case 2:
                  int v24 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(a1);
                  break;
                case 3:
                  uint64_t v30 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(a1);
                  unsigned int v31 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  if (*v30 == 47)
                  {
                    uint64_t v32 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                    uint64_t v33 = v32;
                    int v35 = *(uint64_t **)(a10 + 8);
                    unint64_t v34 = *(void *)(a10 + 16);
                    if ((unint64_t)v35 >= v34)
                    {
                      uint64_t v41 = ((uint64_t)v35 - *(void *)a10) >> 3;
                      unint64_t v42 = v41 + 1;
                      uint64_t v43 = v34 - *(void *)a10;
                      if (v43 >> 2 > v42) {
                        unint64_t v42 = v43 >> 2;
                      }
                      else {
                        unint64_t v44 = v42;
                      }
                      if (v44) {
                        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( a10 + 16,  v44);
                      }
                      else {
                        uint64_t v45 = 0LL;
                      }
                      v46 = (uint64_t *)&v45[8 * v41];
                      uint64_t *v46 = v33;
                      uint64_t v47 = v46 + 1;
                      uint64_t v49 = *(char **)a10;
                      __int16 v48 = *(char **)(a10 + 8);
                      if (v48 == *(char **)a10)
                      {
                        uint64_t v51 = (uint64_t **)a10;
                      }

                      else
                      {
                        do
                        {
                          uint64_t v50 = *((void *)v48 - 1);
                          v48 -= 8;
                          *--v46 = v50;
                        }

                        while (v48 != v49);
                        uint64_t v51 = (uint64_t **)a10;
                        __int16 v48 = *(char **)a10;
                      }

                      *uint64_t v51 = v46;
                      v51[1] = v47;
                      v51[2] = (uint64_t *)&v45[8 * v44];
                      if (v48) {
                        operator delete(v48);
                      }
                      *(void *)(a10 + 8) = v47;
                    }

                    else
                    {
                      uint64_t *v35 = v32;
                      *(void *)(a10 + 8) = v35 + 1;
                    }
                  }

                  else
                  {
                    uint64_t v39 = (const char *)*((void *)__p + v31);
                    if (v39)
                    {
                      stringByAppendingPathComponents(__s1, 0x400uLL, v39, v30);
                      unint64_t v40 = (char *)(**a9)(a9, (std::vector<std::string>::pointer)__s1);
                      uint64_t v58 = CSCppStringCache::intern(v52, v40);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, &v58);
                    }

                    else
                    {
                      *(void *)__s1 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, __s1);
                    }
                  }

                  break;
                default:
                  *(_DWORD *)(a1 + 8) = v28 + *(_DWORD *)(a1 + 8) - 1;
                  break;
              }

              break;
            case 1u:
              uint64_t v36 = (v24 + a6);
              if (a8) {
                LODWORD(v36) = TAddressRelocator<Pointer32>::relocate(a8, v36);
              }
              goto LABEL_22;
            case 2u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1) * v54;
              break;
            case 3u:
              int v37 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(a1);
              v61 += v37;
              break;
            case 4u:
              unsigned int v25 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 5u:
              unsigned int v60 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
              break;
            case 8u:
              v24 += (v22 ^ 0xFF) / v20 * v54;
              break;
            case 9u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
              break;
            case 0xCu:
              TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
              break;
            default:
              if (v57[v26])
              {
                unsigned int v38 = 0;
                do
                {
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  ++v38;
                }

                while (v38 < v57[v27]);
              }

              break;
          }
        }
      }

      while (*(_DWORD *)(a1 + 8) < v23);
    }

LABEL_62:
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
  }

    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
  }

void sub_186022828( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*&>( void *a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[1];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  unint64_t v13 = v12 + v11;
  if (v10 == v12 + v11)
  {
    std::deque<TRangeValue<Pointer32,char const*>>::__add_back_capacity(a1);
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    uint64_t v8 = a1[1];
    unint64_t v13 = v11 + v12;
  }

  uint64_t v14 = *(void *)(v8 + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v13;
  int v15 = *a3;
  uint64_t v16 = *a4;
  *(_DWORD *)uint64_t v14 = *a2;
  *(_DWORD *)(v14 + 4) = v15;
  *(void *)(v14 + 8) = v16;
  uint64_t v17 = v12 + 1;
  a1[5] = v17;
  unint64_t v18 = v11 + v17;
  unsigned int v19 = (void *)(v8 + 8 * (v18 >> 8));
  if ((_BYTE)v18) {
    uint64_t v20 = *v19 + 16LL * v18;
  }
  else {
    uint64_t v20 = *(v19 - 1) + 4096LL;
  }
  return v20 - 16;
}

void read_specification_abbrev_at<Dwarf<Dwarf32,Pointer32,LittleEndian>>(unsigned int a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a2, a1);
  unsigned int v4 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a2);
  uint64_t v6 = *(CSCppDwarfAbbrevTable **)(a2 + 72);
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 80);
  unsigned int v26 = v6;
  uint64_t v27 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  if (!v4 || (unint64_t v9 = v4, v4 >= (unint64_t)((uint64_t)(*((void *)v6 + 2) - *((void *)v6 + 1)) >> 3)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Invalid specification abbrev index in DWARF: ",  45LL);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
    Exception::Exception(v22, &v23);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v22);
  }

  uint64_t v10 = *((void *)v6 + 7);
  uint64_t v11 = (void *)CSCppDwarfAbbrevTable::specification_abbrev_at(v6, v4);
  if (!v11)
  {
    uint64_t v12 = *(void *)(*((void *)v6 + 1) + 8 * v9);
    if (!v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Null abbrev discovered in DWARF at index ",  41LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      unsigned int v19 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v19, (uint64_t)v22);
    }

    unsigned int v13 = *(_DWORD *)(v12 + 8);
    if (v13 > 0x2E || ((1LL << v13) & 0x400020000008LL) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Invalid abbrev tag ",  19LL);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for symbol entry.", 18LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      uint64_t v21 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v21, (uint64_t)v22);
    }

    v25[0] = 0uLL;
    __p = 0LL;
    std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>( &__p,  *(const void **)(v12 + 16),  *(void *)(v12 + 24),  (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 2);
    uint64_t v11 = operator new(0x50uLL);
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSymbolAbbrev( (uint64_t)v11,  *(_DWORD *)(v12 + 8),  *(_BYTE *)(v12 + 12),  &__p,  v10);
    uint64_t v15 = *((void *)v6 + 4);
    if (v9 >= (*((void *)v6 + 5) - v15) >> 3) {
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    }
    *(void *)(v15 + 8 * v9) = v11;
    if (__p)
    {
      *(void *)&v25[0] = __p;
      operator delete(__p);
    }
  }

  memset(v25, 0, 48);
  __p = (void *)a2;
  (*(void (**)(void *, void **, void))(*(void *)v11 + 16LL))(v11, &__p, *(unsigned __int16 *)(a2 + 24));
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a2, v3);
  if (v5)
  {
    uint64_t v16 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_186022C7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

uint64_t CSCppDwarfAbbrevTable::specification_abbrev_at(CSCppDwarfAbbrevTable *this, unsigned int a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *((void *)this + 4);
  unint64_t v4 = (*((void *)this + 5) - v3) >> 3;
  if (v4 <= a2)
  {
    std::vector<CSCppDwarfAbbrev *>::resize((uint64_t)this + 32, a2 + 1);
    uint64_t v3 = *((void *)this + 4);
    unint64_t v4 = (*((void *)this + 5) - v3) >> 3;
  }

  if (v4 <= v2) {
    std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v3 + 8 * v2);
}

void *std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186022E08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)(a1 + 2),  a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void record_concrete_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  if (a2)
  {
    uint64_t v9 = 0LL;
    uint64_t v25 = (uint64_t)(a5 + 2);
    int v10 = *(unsigned __int8 *)(a3 + 12);
    do
    {
      std::deque<TRawSymbol<Pointer32>>::push_back(a4, a1 + 96 * v9);
      if (v10)
      {
        unint64_t v11 = a4[5] + a4[4] - 1LL;
        unint64_t v12 = *(void *)(a4[1] + 8 * (v11 / 0x2A)) + 96 * (v11 % 0x2A);
        uint64_t v14 = (unint64_t *)a5[1];
        unint64_t v13 = (unint64_t)a5[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
          uint64_t v17 = v13 - (void)*a5;
          uint64_t v18 = v17 >> 2;
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25, v19);
          }
          else {
            uint64_t v20 = 0LL;
          }
          uint64_t v21 = (unint64_t *)&v20[8 * v16];
          unint64_t *v21 = v12;
          uint64_t v15 = v21 + 1;
          __int128 v23 = (char *)*a5;
          unsigned int v22 = (char *)a5[1];
          if (v22 != *a5)
          {
            do
            {
              unint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *--uint64_t v21 = v24;
            }

            while (v22 != v23);
            unsigned int v22 = (char *)*a5;
          }

          *a5 = v21;
          a5[1] = v15;
          a5[2] = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *uint64_t v14 = v12;
          uint64_t v15 = v14 + 1;
        }

        a5[1] = v15;
      }

      ++v9;
    }

    while (v9 != a2);
  }

void record_inlined_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>>( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v5 = a1;
  int v6 = *(unsigned __int8 *)(a3 + 12);
  __p = 0LL;
  int v61 = 0LL;
  v62 = 0LL;
  uint64_t v7 = &a1[24 * a2];
  uint64_t v9 = (char *)*a4;
  size_t v8 = (char *)a4[1];
  do
  {
    if (v8 == v9)
    {
      unint64_t v11 = (char *)*a4;
      if (a2) {
        goto LABEL_10;
      }
      goto LABEL_60;
    }

    uint64_t v10 = *((void *)v8 - 1);
    v8 -= 8;
  }

  while (!v10);
  unint64_t v11 = v8 + 8;
  while (v8 != v9)
  {
    unint64_t v12 = v8;
    uint64_t v14 = *((void *)v8 - 1);
    v8 -= 8;
    uint64_t v13 = v14;
    if (!v14 || !*(_BYTE *)(v13 + 80))
    {
      uint64_t v9 = v12;
      break;
    }
  }

  if (!a2)
  {
LABEL_60:
    v46 = 0LL;
    if (!v6) {
      goto LABEL_81;
    }
    goto LABEL_61;
  }

void sub_1860233C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRawSymbol<Pointer32>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 42 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0LL;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<TRawSymbol<Pointer32>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }

  if (v5 == v4)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  }

  *(void *)(v8 + 88) = 0LL;
  *(void *)(v8 + 8) = 0LL;
  *(void *)(v8 + 16) = 0LL;
  *(void *)uint64_t v8 = 0LL;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 65) = 0u;
  uint64_t result = TRawSymbol<Pointer32>::operator=(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<TRawSymbol<Pointer32>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0xFC0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0xFC0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0xFD8uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0xFD8uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      if (v24 >= v23) {
        return result;
      }
    }

    uint64_t v15 = (char *)v10 + v13;
    while (1)
    {
      if (!v22) {
        goto LABEL_20;
      }
      uint64_t v16 = v22 + 12 * v14;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 4);
      if (v17 == 100)
      {
        if (!*(_DWORD *)(v16 + 8)) {
          goto LABEL_30;
        }
      }

      else if (v17 == 46)
      {
        NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
LABEL_20:
        uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
        if (*((_BYTE *)result + 4) == 36)
        {
          uint64_t v21 = result[2] + v8;
          do
          {
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            uint64_t v18 = *((unsigned __int8 *)result + 4);
          }

          while (v18 == 132);
          if (v18 == 36)
          {
            int64_t v20 = result[2];
            if (v24 >= v23) {
              goto LABEL_30;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            if (*((_BYTE *)result + 4) == 78)
            {
              unint64_t v19 = CSCppStringCache::intern(v12, v15);
              uint64_t result = (unsigned int *)std::vector<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*>( v11,  &v21,  (int *)&v20,  (uint64_t *)&v19);
            }
          }
        }

        goto LABEL_29;
      }

      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
LABEL_29:
      BOOL v14 = v24;
    }
  }

  return result;
}

    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }

  uint64_t v8 = (_DWORD *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = CSCppStringCache::intern( *(CSCppStringCache **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  uint64_t v10 = *(void ***)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  uint64_t v11 = v8[1];
  uint64_t v12 = *(_DWORD *)(a1 + 48) + *v8;
  uint64_t v13 = v8[4];
  BOOL v14 = v8[5] & 0x7FFFFFFF;
  uint64_t v15 = (char *)v10[1];
  uint64_t v16 = (char *)v10[2];
  if (v15 >= v16)
  {
    uint64_t v28 = (v15 - (_BYTE *)*v10) >> 5;
    uint64_t v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 59))
    {
      __int128 v30 = v16 - (_BYTE *)*v10;
      if (v30 >> 4 > v29) {
        uint64_t v29 = v30 >> 4;
      }
      else {
        __int128 v31 = v29;
      }
      __int128 v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v10 + 2), v31);
      unint64_t v33 = &v32[32 * v28];
      uint64_t v35 = &v32[32 * v34];
      *(_DWORD *)unint64_t v33 = v12;
      *((_DWORD *)v33 + 1) = v11;
      *((void *)v33 + 1) = v9;
      *((_DWORD *)v33 + 4) = v13;
      *((_DWORD *)v33 + 5) = v14;
      *((_DWORD *)v33 + 6) = 0;
      uint64_t v27 = v33 + 32;
      int v37 = (char *)*v10;
      uint64_t v36 = (char *)v10[1];
      if (v36 == *v10) {
        goto LABEL_26;
      }
      do
      {
        uint64_t v38 = *((_OWORD *)v36 - 2);
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v36 - 20);
        *((_OWORD *)v33 - 2) = v38;
        v33 -= 32;
        v36 -= 32;
      }

      while (v36 != v37);
LABEL_25:
      uint64_t v36 = (char *)*v10;
LABEL_26:
      *uint64_t v10 = v33;
      v10[1] = v27;
      v10[2] = v35;
      if (v36) {
        operator delete(v36);
      }
      goto LABEL_28;
    }

    goto LABEL_30;
  }

  *(_DWORD *)uint64_t v15 = v12;
  *((_DWORD *)v15 + 1) = v11;
  *((void *)v15 + 1) = v9;
  *((_DWORD *)v15 + 4) = v13;
LABEL_7:
  *((_DWORD *)v15 + 5) = v14;
  *((_DWORD *)v15 + 6) = 0;
  uint64_t v27 = v15 + 32;
LABEL_28:
  v10[1] = v27;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFD8uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      if (v25 >= v24) {
        return result;
      }
    }

    uint64_t v16 = (char *)v11 + v14;
    while (1)
    {
      if (!v23) {
        goto LABEL_20;
      }
      uint64_t v17 = v23 + 16 * v15;
      uint64_t v18 = *(unsigned __int8 *)(v17 + 4);
      if (v18 == 100)
      {
        if (!*(void *)(v17 + 8)) {
          goto LABEL_30;
        }
      }

      else if (v18 == 46)
      {
        NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_20:
        uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
        if (*((_BYTE *)result + 4) == 36)
        {
          unint64_t v22 = *((void *)result + 1) + v9;
          do
          {
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            unint64_t v19 = *((unsigned __int8 *)result + 4);
          }

          while (v19 == 132);
          if (v19 == 36)
          {
            uint64_t v21 = *((void *)result + 1);
            if (v25 >= v24) {
              goto LABEL_30;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((_BYTE *)result + 4) == 78)
            {
              int64_t v20 = CSCppStringCache::intern(v13, v16);
              uint64_t result = (unsigned int *)std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>( v12,  &v22,  &v21,  (uint64_t *)&v20);
            }
          }
        }

        goto LABEL_29;
      }

      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_29:
      uint64_t v15 = v25;
    }
  }

  return result;
}

    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }

  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = CSCppStringCache::intern( *(CSCppStringCache **)(*(void *)(a1[4] + 8LL) + 24LL),  *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
  uint64_t v10 = a1[6];
  uint64_t v11 = *(void ***)(*(void *)(a1[5] + 8LL) + 24LL);
  uint64_t v12 = *(void *)(v8 + 8);
  uint64_t v13 = v10 + *(void *)v8;
  BOOL v14 = *(_DWORD *)(v8 + 24);
  uint64_t v15 = *(_DWORD *)(v8 + 28) & 0x7FFFFFFF;
  uint64_t v16 = (char *)v11[1];
  uint64_t v17 = (char *)v11[2];
  if (v16 >= v17)
  {
    __int128 v31 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*v11) >> 3);
    __int128 v32 = v31 + 1;
    if (v31 + 1 <= 0x666666666666666LL)
    {
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (_BYTE *)*v11) >> 3);
      if (2 * v33 > v32) {
        __int128 v32 = 2 * v33;
      }
      if (v33 >= 0x333333333333333LL) {
        unint64_t v34 = 0x666666666666666LL;
      }
      else {
        unint64_t v34 = v32;
      }
      uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)(v11 + 2),  v34);
      uint64_t v36 = &v35[40 * v31];
      uint64_t v38 = &v35[40 * v37];
      *(void *)uint64_t v36 = v13;
      *((void *)v36 + 1) = v12;
      *((void *)v36 + 2) = v9;
      *((_DWORD *)v36 + 6) = v14;
      *((_DWORD *)v36 + 7) = v15;
      *((_DWORD *)v36 + 8) = 0;
      __int128 v30 = v36 + 40;
      uint64_t v40 = (char *)*v11;
      uint64_t v39 = (char *)v11[1];
      if (v39 == *v11) {
        goto LABEL_26;
      }
      do
      {
        uint64_t v41 = *(_OWORD *)(v39 - 40);
        uint64_t v42 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v42;
        *(_OWORD *)(v36 - 40) = v41;
        v36 -= 40;
        v39 -= 40;
      }

      while (v39 != v40);
LABEL_25:
      uint64_t v39 = (char *)*v11;
LABEL_26:
      *uint64_t v11 = v36;
      v11[1] = v30;
      v11[2] = v38;
      if (v39) {
        operator delete(v39);
      }
      goto LABEL_28;
    }

    goto LABEL_30;
  }

  *(void *)uint64_t v16 = v13;
  *((void *)v16 + 1) = v12;
  *((void *)v16 + 2) = v9;
  *((_DWORD *)v16 + 6) = v14;
  *((_DWORD *)v16 + 7) = v15;
LABEL_7:
  __int128 v30 = v16 + 40;
  *((_DWORD *)v16 + 8) = 0;
LABEL_28:
  v11[1] = v30;
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_186023790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back( void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front( uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back( void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front( uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__emplace_back_slow_path<TRawSymbol<Pointer32>::dwarf_ranges_tag,unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>( uint64_t *a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t *a5, uint64_t *a6, int *a7, _OWORD **a8)
{
  uint64_t v9 = *a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (uint64_t)(a1 + 2);
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v9) >> 5);
  if (2 * v19 > v11) {
    unint64_t v11 = 2 * v19;
  }
  if (v19 >= 0x155555555555555LL) {
    unint64_t v20 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v20 = v11;
  }
  v31[4] = a1 + 2;
  if (v20) {
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v18, v20);
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v22 = &v21[96 * v10];
  v31[0] = v21;
  v31[1] = v22;
  v31[3] = &v21[96 * v20];
  int v23 = *a4;
  uint64_t v24 = *a5;
  uint64_t v25 = *a6;
  int v26 = *a7;
  uint64_t v27 = *a8;
  *(_DWORD *)uint64_t v22 = *a3;
  *((_DWORD *)v22 + 1) = v23;
  *((void *)v22 + 1) = 0LL;
  *((void *)v22 + 2) = 0LL;
  *((void *)v22 + 3) = v24;
  *((void *)v22 + 4) = v25;
  *(_OWORD *)(v22 + 40) = 0u;
  *((void *)v22 + 11) = 0LL;
  *(_OWORD *)(v22 + 65) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  if (v27)
  {
    *(_OWORD *)(v22 + 40) = *v27;
    v26 |= 0x80000000;
  }

  uint64_t v28 = &v21[96 * v10];
  *((_DWORD *)v28 + 5) = v26;
  v28[80] = 1;
  v31[2] = v22 + 96;
  std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v31);
  uint64_t v29 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v31);
  return v29;
}

void sub_186023D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>( uint64_t *a1, unint64_t a2, unsigned __int16 a3, uint64_t (***a4)(void, std::vector<std::string>::pointer), CSCppStringCache *a5, uint64_t a6, uint64_t a7, char **a8)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  size_t v13 = *(void *)(a7 + 8) - *(void *)a7;
  BOOL v82 = v13 == a8[1] - *a8 && memcmp(*(const void **)a7, *a8, v13) == 0;
  __int16 v92 = 0;
  unsigned int v91 = 0;
  __s = 0LL;
  unsigned int v14 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(a1);
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(&v88, v14);
  uint64_t v15 = v88;
  for (uint64_t i = v89; v15 != i; ++v15)
  {
    int v17 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    int v18 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    if (v17 <= 2)
    {
      if (v17 == 1)
      {
        action_for_line_string = read_action_for_line_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( v18,  (uint64_t)&v92,  1,  (uint64_t)&__s);
        goto LABEL_14;
      }

      if (v17 != 2)
      {
LABEL_12:
        action_for_line_string = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18);
        goto LABEL_14;
      }

      action_for_line_string = read_action_for_line_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( v18,  (uint64_t)&v92,  2,  (uint64_t)&v91);
    }

    else
    {
      action_for_line_string = skip_action_for_line_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18);
    }

LABEL_112:
          *a8 = (char *)v71;
          a8[1] = v67;
          a8[2] = &v59[8 * v58];
          if (v72) {
            operator delete(v72);
          }
          goto LABEL_114;
        }
      }

      else
      {
        LOBYTE(buf[0].__first_) = 0;
        while (v50 != v49)
        {
          unsigned int v60 = (const char *)v50;
          stringByAppendingPathComponents((char *)buf, 0x400uLL, (const char *)buf, v60);
          ++v50;
        }

        v65 = (char *)(**a4)(a4, buf);
        uint64_t v52 = CSCppStringCache::intern(a5, v65);
        __int128 v54 = (unsigned __int8 **)a8[1];
        unint64_t v66 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v66)
        {
          uint64_t v68 = ((char *)v54 - *a8) >> 3;
          uint64_t v69 = v66 - (void)*a8;
          uint64_t v70 = v69 >> 2;
          else {
            unint64_t v58 = v70;
          }
          if (v58) {
            uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          }
          else {
            uint64_t v59 = 0LL;
          }
          v71 = (unsigned __int8 **)&v59[8 * v68];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v77 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v78 = (unsigned __int8 *)*((void *)v72 - 1);
              v72 -= 8;
              *--v71 = v78;
            }

            while (v72 != v77);
            goto LABEL_111;
          }

          goto LABEL_112;
        }
      }

      *__int128 v54 = v52;
      v67 = (char *)(v54 + 1);
LABEL_114:
      a8[1] = v67;
      buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v22;
      unint64_t v21 = v25;
    }

    while (v22 != v25);
  }

  buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v88;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

          *a8 = (char *)v71;
          a8[1] = v67;
          a8[2] = &v59[8 * v58];
          if (v72) {
            operator delete(v72);
          }
          goto LABEL_114;
        }
      }

      else
      {
        LOBYTE(buf[0].__first_) = 0;
        while (v50 != v49)
        {
          unsigned int v60 = (const char *)v50;
          stringByAppendingPathComponents((char *)buf, 0x400uLL, (const char *)buf, v60);
          ++v50;
        }

        v65 = (char *)(**a4)(a4, buf);
        uint64_t v52 = CSCppStringCache::intern(a5, v65);
        __int128 v54 = (unsigned __int8 **)a8[1];
        unint64_t v66 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v66)
        {
          uint64_t v68 = ((char *)v54 - *a8) >> 3;
          uint64_t v69 = v66 - (void)*a8;
          uint64_t v70 = v69 >> 2;
          else {
            unint64_t v58 = v70;
          }
          if (v58) {
            uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          }
          else {
            uint64_t v59 = 0LL;
          }
          v71 = (unsigned __int8 **)&v59[8 * v68];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v77 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v78 = (unsigned __int8 *)*((void *)v72 - 1);
              v72 -= 8;
              *--v71 = v78;
            }

            while (v72 != v77);
            goto LABEL_111;
          }

          goto LABEL_112;
        }
      }

      *__int128 v54 = v52;
      v67 = (char *)(v54 + 1);
LABEL_114:
      a8[1] = v67;
      buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v22;
      unint64_t v21 = v25;
    }

    while (v22 != v25);
  }

  buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v88;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_186024598( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, std::__split_buffer<std::string> *a34)
{
}

const char *parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>( uint64_t *a1, const char *a2, uint64_t (***a3)(void, char *), CSCppStringCache *a4, void **a5, void **a6)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  uint64_t v13 = (uint64_t)(a5 + 2);
  unint64_t v12 = (unint64_t)a5[2];
  unsigned int v14 = (const char **)a5[1];
  if ((unint64_t)v14 >= v12)
  {
    uint64_t v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
    uint64_t v17 = v12 - (void)*a5;
    uint64_t v18 = v17 >> 2;
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v19);
    }
    else {
      uint64_t v20 = 0LL;
    }
    unint64_t v21 = (const char **)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    char *v21 = a2;
    uint64_t v15 = v21 + 1;
    uint64_t v24 = (char *)*a5;
    int v23 = (char *)a5[1];
    if (v23 != *a5)
    {
      do
      {
        unint64_t v25 = (const char *)*((void *)v23 - 1);
        v23 -= 8;
        *--unint64_t v21 = v25;
      }

      while (v23 != v24);
      int v23 = (char *)*a5;
    }

    *a5 = v21;
    a5[1] = v15;
    a5[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }

  else
  {
    *unsigned int v14 = a2;
    uint64_t v15 = v14 + 1;
  }

  a5[1] = v15;
  int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
  if (*v26)
  {
    uint64_t v27 = v26;
    do
    {
      if (isAbsolutePath(v27))
      {
        __int128 v29 = (const char **)a5[1];
        unint64_t v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v30 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          uint64_t v31 = v28 - (void)*a5;
          uint64_t v32 = v31 >> 2;
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0LL;
          }
          __int128 v41 = (const char **)&v34[8 * v30];
          *__int128 v41 = v27;
          int v37 = v41 + 1;
          unint64_t v43 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v44 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--__int128 v41 = v44;
            }

            while (v42 != v43);
            goto LABEL_46;
          }

          goto LABEL_47;
        }
      }

      else
      {
        stringByAppendingPathComponents(v76, 0x400uLL, a2, v27);
        unint64_t v35 = (char *)(**a3)(a3, v76);
        uint64_t v27 = (const char *)CSCppStringCache::intern(a4, v35);
        __int128 v29 = (const char **)a5[1];
        unint64_t v36 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v36)
        {
          uint64_t v38 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          uint64_t v39 = v36 - (void)*a5;
          uint64_t v40 = v39 >> 2;
          else {
            unint64_t v33 = v40;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0LL;
          }
          __int128 v41 = (const char **)&v34[8 * v38];
          *__int128 v41 = v27;
          int v37 = v41 + 1;
          uint64_t v45 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v46 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--__int128 v41 = v46;
            }

            while (v42 != v45);
LABEL_46:
            unint64_t v42 = (char *)*a5;
          }

LABEL_93:
        *a6 = v68;
        a6[1] = v64;
        a6[2] = &v57[8 * v56];
        if (v69) {
          operator delete(v69);
        }
        goto LABEL_95;
      }
    }

    else
    {
      stringByAppendingPathComponents(v76, 0x400uLL, *((const char **)*a5 + v49), i);
      unint64_t v58 = (char *)(**a3)(a3, v76);
      std::vector<std::string>::pointer v50 = CSCppStringCache::intern(a4, v58);
      uint64_t v52 = (unsigned __int8 **)a6[1];
      unint64_t v59 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v59)
      {
        uint64_t v60 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        uint64_t v61 = v59 - (void)*a6;
        uint64_t v62 = v61 >> 2;
        else {
          unint64_t v56 = v62;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        }
        else {
          uint64_t v57 = 0LL;
        }
        uint64_t v68 = (unsigned __int8 **)&v57[8 * v60];
        *uint64_t v68 = v50;
        uint64_t v64 = v68 + 1;
        v74 = (char *)*a6;
        uint64_t v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v75 = (unsigned __int8 *)*((void *)v69 - 1);
            v69 -= 8;
            *--uint64_t v68 = v75;
          }

          while (v69 != v74);
          goto LABEL_92;
        }

        goto LABEL_93;
      }
    }

    unsigned __int8 *v52 = v50;
    uint64_t v64 = v52 + 1;
LABEL_95:
    a6[1] = v64;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
  }

  return result;
}

        *a6 = v68;
        a6[1] = v64;
        a6[2] = &v57[8 * v56];
        if (v69) {
          operator delete(v69);
        }
        goto LABEL_95;
      }
    }

    else
    {
      stringByAppendingPathComponents(v76, 0x400uLL, *((const char **)*a5 + v49), i);
      unint64_t v58 = (char *)(**a3)(a3, v76);
      std::vector<std::string>::pointer v50 = CSCppStringCache::intern(a4, v58);
      uint64_t v52 = (unsigned __int8 **)a6[1];
      unint64_t v59 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v59)
      {
        uint64_t v60 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        uint64_t v61 = v59 - (void)*a6;
        uint64_t v62 = v61 >> 2;
        else {
          unint64_t v56 = v62;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        }
        else {
          uint64_t v57 = 0LL;
        }
        uint64_t v68 = (unsigned __int8 **)&v57[8 * v60];
        *uint64_t v68 = v50;
        uint64_t v64 = v68 + 1;
        v74 = (char *)*a6;
        uint64_t v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v75 = (unsigned __int8 *)*((void *)v69 - 1);
            v69 -= 8;
            *--uint64_t v68 = v75;
          }

          while (v69 != v74);
          goto LABEL_92;
        }

        goto LABEL_93;
      }
    }

    unsigned __int8 *v52 = v50;
    uint64_t v64 = v52 + 1;
LABEL_95:
    a6[1] = v64;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  }

  return result;
}

  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL) = v3;
  return result;
}

uint64_t std::deque<TRawSourceInfo<Pointer32>>::emplace_back<unsigned int &,int,char const*&,int &,unsigned int &>( void *a1, _DWORD *a2, int *a3, uint64_t *a4, int *a5, unsigned int *a6)
{
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[1];
  if (v12 == v13) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = 16 * (v12 - v13) - 1;
  }
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  unint64_t v17 = v16 + v15;
  if (v14 == v16 + v15)
  {
    std::deque<TRawSourceInfo<Pointer32>>::__add_back_capacity(a1);
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    uint64_t v13 = a1[1];
    unint64_t v17 = v15 + v16;
  }

  int v18 = *a3;
  uint64_t v19 = *(void *)(v13 + ((v17 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v17 & 0x7F);
  uint64_t v20 = *a4;
  int v21 = *a5;
  unsigned int v22 = *a6;
  *(_DWORD *)uint64_t v19 = *a2;
  *(_DWORD *)(v19 + 4) = v18;
  *(void *)(v19 + 8) = v20;
  *(_DWORD *)(v19 + 16) = v21;
  *(void *)(v19 + 20) = v22;
  uint64_t v23 = v16 + 1;
  a1[5] = v23;
  unint64_t v24 = v15 + v23;
  unint64_t v25 = (void *)(v13 + 8 * (v24 >> 7));
  uint64_t v26 = v24 & 0x7F;
  if (v26) {
    uint64_t v27 = *v25 + 32 * v26;
  }
  else {
    uint64_t v27 = *(v25 - 1) + 4096LL;
  }
  return v27 - 32;
}

void std::vector<char const*>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 8;
    unint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }

  a1[1] = v8;
}

void *read_action_for_line_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (a1 == 8)
  {
    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF75B0;
  }

  else
  {
    if (a1 != 31 && a1 != 14)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read string binding ",  38LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF79B0;
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_186024E90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_line_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  switch(a1)
  {
    case 5:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7A50;
      break;
    case 6:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7AA0;
      break;
    case 7:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7AF0;
      break;
    case 11:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7A00;
      break;
    case 15:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF7B40;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read data binding ",  36LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_18602501C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_DWORD *skip_action_for_line_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 5:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF7C30;
      int v3 = 2;
      goto LABEL_9;
    case 6:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF7C30;
      int v3 = 4;
      goto LABEL_9;
    case 7:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF7C30;
      int v3 = 8;
      goto LABEL_9;
    case 8:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF7BE0;
      goto LABEL_12;
    case 9:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF7C80;
      goto LABEL_12;
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_15;
    case 11:
      goto LABEL_4;
    case 14:
    case 23:
    case 31:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF7B90;
      goto LABEL_12;
    case 15:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF7CD0;
LABEL_12:
      *(void *)uint64_t result = v2;
      break;
    case 30:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF7C30;
      result[2] = 16;
      break;
    default:
      if (a1 != 37)
      {
LABEL_15:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Unhandled dwarf attribute in Debug Line Table ",  46LL);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
        Exception::Exception(v5, &v6);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v5);
      }

LABEL_4:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF7C30;
      int v3 = 1;
LABEL_9:
      result[2] = v3;
      break;
  }

  return result;
}

      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8CF8;
      int v3 = 1;
LABEL_9:
      result[2] = v3;
      break;
  }

  return result;
}

void sub_18602521C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::insert( std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  uint64_t i = (std::string *)__position.__i_;
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  uint64_t v8 = value;
  if (end >= value)
  {
    std::vector<std::string>::pointer begin = this->__begin_;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    unint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16) {
      unint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)p_end_cap,  v16);
    }
    else {
      unint64_t v17 = 0LL;
    }
    __v.__first_ = v17;
    __v.__begin_ = v17 + v13;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v17[v16];
    std::__split_buffer<std::string>::push_back(&__v, __x);
    uint64_t i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }

  else if (__position.__i_ == end)
  {
    __int128 v18 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__l.__cap_ = __x->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v18;
    __x->__r_.__value_.__l.__size_ = 0LL;
    __x->__r_.__value_.__l.__cap_ = 0LL;
    __x->__r_.__value_.__r.__words[0] = 0LL;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }

  else
  {
    std::vector<std::string>::__move_range( this,  (std::vector<std::string>::pointer)__position.__i_,  end,  (std::vector<std::string>::pointer)&__position.__i_[1]);
    __int128 v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    i->__r_.__value_.__l.__cap_ = __x->__r_.__value_.__l.__cap_;
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v10;
    __x->__r_.__value_.__s.__size_ = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }

  return (std::vector<std::string>::iterator)i;
}

void sub_1860253DC( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_186025458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100]( void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v5);
    __int128 v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *__int128 v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8LL) += 4;
}

uint64_t TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

size_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(*(void *)(a2 + 16));
}

uint64_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8LL) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

uint64_t TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(*(void *)(a2 + 16));
}

uint64_t TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(*(void *)(a2 + 16));
}

void std::vector<std::string>::__move_range( std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      __int128 v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__l.__cap_ = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0LL;
      *(void *)(v9 + 16) = 0LL;
      *(void *)unint64_t v9 = 0LL;
      v9 += 24LL;
    }

    while (v9 < (unint64_t)__from_e);
  }

  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>( (uint64_t)&v11,  (uint64_t)__from_s,  (uint64_t)v7,  (uint64_t)end);
}

void std::__split_buffer<std::string>::push_back( std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::vector<std::string>::pointer begin = (__int128 *)this->__begin_;
    if ((std::__split_buffer<std::string>::pointer)begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v10 = 1LL;
      }
      else {
        unint64_t v10 = 0x5555555555555556LL * (((char *)end - (char *)this->__first_) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      value = this->__end_cap_.__value_;
      v26.__end_cap_.__value_ = this->__end_cap_.__value_;
      unint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)value,  v10);
      unint64_t v15 = &v13[v11];
      std::__split_buffer<std::string>::pointer v16 = this->__begin_;
      int64_t v17 = (char *)this->__end_ - (char *)v16;
      if (v17)
      {
        uint64_t v18 = v17 / 24;
        uint64_t v19 = &v15[v18];
        uint64_t v20 = 24 * v18;
        int v21 = &v13[v11];
        do
        {
          __int128 v22 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v21->__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          ++v21;
          v16->__r_.__value_.__l.__size_ = 0LL;
          v16->__r_.__value_.__l.__cap_ = 0LL;
          v16->__r_.__value_.__r.__words[0] = 0LL;
          ++v16;
          v20 -= 24LL;
        }

        while (v20);
        int64x2_t v23 = *(int64x2_t *)&this->__begin_;
      }

      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v16);
        uint64_t v19 = &v13[v11];
      }

      v26.__first_ = this->__first_;
      this->__first_ = v13;
      this->__begin_ = v15;
      *(int64x2_t *)&v26.__begin_ = v23;
      unint64_t v24 = this->__end_cap_.__value_;
      this->__end_ = v19;
      this->__end_cap_.__value_ = &v13[v14];
      v26.__end_cap_.__value_ = v24;
      std::__split_buffer<std::string>::~__split_buffer(&v26);
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }

    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>( (uint64_t)&v26,  begin,  (__int128 *)end,  (uint64_t)begin - 24 * (v7 >> 1));
      std::__split_buffer<std::string>::pointer end = v9;
      this->__begin_ = (std::__split_buffer<std::string>::pointer)((char *)this->__begin_ + 8 * v8);
      this->__end_ = v9;
    }
  }

  __int128 v25 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__l.__cap_ = __x->__r_.__value_.__l.__cap_;
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
  __x->__r_.__value_.__l.__size_ = 0LL;
  __x->__r_.__value_.__l.__cap_ = 0LL;
  __x->__r_.__value_.__r.__words[0] = 0LL;
  ++this->__end_;
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer( std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>( (uint64_t)&this->__end_cap_,  (uint64_t)__p,  (uint64_t)__p,  (uint64_t)this->__begin_,  (uint64_t)this->__begin_,  (uint64_t)begin,  (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( (uint64_t)p_end_cap,  (__int128 *)__p,  (__int128 *)this->__end_,  (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      __int128 v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24LL;
    }

    while (v6 != a2);
  }

  return a3;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24LL;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)int v5 = 0;
      int v5 = (__int128 *)((char *)v5 + 24);
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      __int128 v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24LL;
      *((void *)a2 + 1) = 0LL;
      *((void *)a2 + 2) = 0LL;
      *(void *)a2 = 0LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    while (a2 != a3);
    uint64_t v10 = v4;
  }

  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::deque<TRawSourceInfo<Pointer32>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    __int128 v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_186025E58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<TRangeValue<Pointer32,char const*>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    __int128 v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18602616C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>>>( void *a1, _OWORD *a2, _OWORD **a3, _OWORD *a4, void ***a5)
{
  char v8 = *a5;
  if (a1 == a3)
  {
    uint64_t v15 = a2;
  }

  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = *a1 + 4096LL;
    uint64_t v11 = a2;
    for (uint64_t i = (_OWORD *)v10; ; uint64_t i = v14 + 256)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>( v11,  i,  v8);
      char v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      BOOL v14 = (_OWORD *)*v9++;
      uint64_t v11 = v14;
    }

    uint64_t v15 = *a3;
  }

  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>( v15,  a4,  v8);
  *a5 = v17;
  return result;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>( _OWORD *a1, _OWORD *a2, void **a3)
{
  BOOL v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 2;
  }

  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>::operator=[abi:ne180100]( void ***a1, _OWORD *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = ((char *)v5 - (_BYTE *)*v4) >> 5;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v8 - (void)*v4;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[32 * v12];
    uint64_t v18 = &v16[32 * v15];
    __int128 v19 = a2[1];
    *(_OWORD *)uint64_t v17 = *a2;
    *((_OWORD *)v17 + 1) = v19;
    uint64_t v11 = v17 + 32;
    uint64_t v21 = (char *)*v4;
    int64_t v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        __int128 v22 = *((_OWORD *)v20 - 2);
        *(_OWORD *)(v17 - 20) = *(_OWORD *)(v20 - 20);
        *((_OWORD *)v17 - 2) = v22;
        v17 -= 32;
        v20 -= 32;
      }

      while (v20 != v21);
      int64_t v20 = (char *)*v4;
    }

    _OWORD *v4 = v17;
    v4[1] = v11;
    _DWORD v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }

  else
  {
    __int128 v10 = a2[1];
    _OWORD *v5 = *a2;
    v5[1] = v10;
    uint64_t v11 = v5 + 2;
  }

  v4[1] = v11;
  return a1;
}

_OWORD *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>>>( void *a1, _OWORD *a2, _OWORD **a3, _OWORD *a4, void ***a5)
{
  unint64_t v8 = *a5;
  if (a1 == a3)
  {
    unint64_t v15 = a2;
  }

  else
  {
    unint64_t v9 = a1 + 1;
    uint64_t v10 = *a1 + 4096LL;
    uint64_t v11 = a2;
    for (uint64_t i = (_OWORD *)v10; ; uint64_t i = v14 + 256)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>( v11,  i,  v8);
      unint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      uint64_t v14 = (_OWORD *)*v9++;
      uint64_t v11 = v14;
    }

    unint64_t v15 = *a3;
  }

  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>( v15,  a4,  v8);
  *a5 = v17;
  return result;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>( _OWORD *a1, _OWORD *a2, void **a3)
{
  BOOL v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>::operator=[abi:ne180100]( void ***a1, _OWORD *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    unint64_t v12 = v11 + 1;
    uint64_t v13 = v8 - (void)*v4;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v7, v14);
    }
    else {
      unint64_t v15 = 0LL;
    }
    uint64_t v16 = &v15[16 * v11];
    uint64_t v17 = &v15[16 * v14];
    *(_OWORD *)uint64_t v16 = *a2;
    uint64_t v10 = v16 + 16;
    __int128 v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }

      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }

    _OWORD *v4 = v16;
    v4[1] = v10;
    _DWORD v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    _OWORD *v5 = *a2;
    uint64_t v10 = v5 + 1;
  }

  v4[1] = v10;
  return a1;
}

uint64_t std::deque<TRangeValue<Pointer32,char const*>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<TRawSymbol<Pointer32>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x2A];
    unint64_t v7 = (unint64_t)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        unint64_t v15 = (void **)(v7 + 56);
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 96LL;
        if (v7 - (void)*v6 == 4032)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }

  void *v4 = 0LL;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSourceInfo<Pointer32>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 128LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100](--v4, 0LL);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
}

const char *CSCppNullPathTransformer::transform(CSCppNullPathTransformer *this, const char *a2)
{
  return a2;
}

void extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, unint64_t a5)
{
  unint64_t v8 = HIDWORD(a5);
  int v17 = *(_DWORD *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v18 + 32LL))( v18,  a5,  HIDWORD(a5));
  uint64_t v9 = a4;
  TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a2, a4);
  if (a4)
  {
    unint64_t v10 = 0LL;
    unint64_t v11 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v12 = *v11;
      BOOL v13 = v12 <= 0x1F && (v12 & 0xE) == 14;
      if (!v13 || !v11[1]) {
        goto LABEL_21;
      }
      unint64_t v14 = "$$$bad-name-in-nlist$$$";
      if (*((_DWORD *)v11 - 1) < v8)
      {
        if (!TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v18))
        {
          unint64_t v14 = "$$$bad-name-in-nlist$$$";
          if (v10) {
            goto LABEL_16;
          }
          goto LABEL_13;
        }

        unint64_t v14 = (const char *)(v16 + *((unsigned int *)v11 - 1));
      }

      if (v10) {
        goto LABEL_16;
      }
LABEL_13:
      if (!strcmp(v14, "<redacted>")) {
        unint64_t v10 = v14;
      }
      else {
        unint64_t v10 = 0LL;
      }
LABEL_16:
      if (v14 == v10)
      {
        unint64_t v10 = v14;
      }

      else
      {
        int v15 = 38289424;
        if ((v12 & 1) == 0) {
          int v15 = 38289408;
        }
        TRawSymbolOwnerData<Pointer32>::emplace_symbol( a2,  *((_DWORD *)v11 + 1) + v17,  0,  (uint64_t)v14,  (uint64_t)v14,  v15 | (2 * v12) & 0x20 | (8 * *((unsigned __int16 *)v11 + 1)) & 0x40,  0LL,  0);
      }

void extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  int v6 = *((_DWORD *)a3 + 2);
  int v5 = *((_DWORD *)a3 + 3);
  if (v5 != v6)
  {
    int v10 = *(_DWORD *)(a4 + 32);
    uint64_t v11 = *a3;
    TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a5, (v5 - v6));
    unint64_t v13 = *((unsigned int *)a3 + 2);
    unint64_t v12 = *((unsigned int *)a3 + 3);
    if (v13 < v12)
    {
      unint64_t v14 = (_DWORD *)(v11 + a1 + 12LL * v13 + 8);
      do
      {
        unsigned int v15 = *((unsigned __int8 *)v14 - 4);
        BOOL v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
        if (v16 && *((_BYTE *)v14 - 3))
        {
          int v17 = 38289440;
          if ((v15 & 0x10) == 0) {
            int v17 = 38289408;
          }
          uint64_t v18 = *(v14 - 2);
          TRawSymbolOwnerData<Pointer32>::emplace_symbol( a5,  *v14 + v10,  0,  (uint64_t)v19,  (uint64_t)v19,  v17 | (8 * *((unsigned __int16 *)v14 - 1)) & 0x40,  0LL,  0);
          unint64_t v12 = *((unsigned int *)a3 + 3);
        }

        ++v13;
        v14 += 3;
      }

      while (v13 < v12);
    }
  }

void extract_direct_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, void *a6)
{
  unint64_t v11 = HIDWORD(a5);
  int v21 = *(_DWORD *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v23 + 32LL))( v23,  a5,  HIDWORD(a5));
  uint64_t v12 = a4;
  __int128 v22 = (uint64_t *)a2;
  TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by(a2, a4);
  if (a4)
  {
    unint64_t v13 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v14 = *v13;
      BOOL v15 = v14 <= 0x1F && (v14 & 0xE) == 14;
      if (v15 && v13[1])
      {
        if ((v14 & 1) != 0) {
          int v16 = 38289424;
        }
        else {
          int v16 = 38289408;
        }
        int v17 = *((unsigned __int16 *)v13 + 1);
        uint64_t v18 = "$$$bad-name-in-nlist$$$";
        if (*((_DWORD *)v13 - 1) < v11
          && TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v23))
        {
          uint64_t v18 = (const char *)(v20 + *((unsigned int *)v13 - 1));
        }

        if (*(_DWORD *)(*(void *)(a1 + 24) + 12LL) != 1 || strncmp(v18, "ltmp", 4uLL))
        {
          uint64_t v19 = (*((_DWORD *)v13 + 1) + v21);
          if (a6) {
            LODWORD(v19) = TAddressRelocator<Pointer32>::relocate(a6, v19);
          }
          TRawSymbolOwnerData<Pointer32>::emplace_symbol( v22,  v19,  0,  (uint64_t)v18,  (uint64_t)v18,  v16 | (2 * v14) & 0x20 | (8 * v17) & 0x40,  0LL,  0);
        }
      }

      v13 += 12;
      --v12;
    }

    while (v12);
  }

void extract_indirect_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unint64_t a8, void *a9)
{
  unsigned int v9 = a3[16];
  unsigned int v10 = a3[9];
  if (v9 <= v10)
  {
    int v11 = a3[8];
    if (v11)
    {
      uint64_t v15 = a3[15];
      int v16 = *(_DWORD *)(a1 + 32);
      uint64_t v32 = *(void *)(a1 + 8);
      unint64_t v29 = HIDWORD(a8);
      uint64_t v17 = v10 / v9;
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)v32 + 32LL))( v32,  a8,  HIDWORD(a8));
      TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a2, v17);
      else {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v17 = v17;
      }
      uint64_t v19 = (v16 + v11);
      uint64_t v20 = (unsigned int *)(a4 + 4 * v15);
      unsigned int v21 = a7;
      while (1)
      {
        if (!v18) {
          return;
        }
        unsigned int v22 = *v20;
        uint64_t v23 = "$$$indirect-absolute-symbol$$$";
        if ((*v20 & 0x40000000) != 0) {
          goto LABEL_21;
        }
        if ((v22 & 0x80000000) != 0) {
          break;
        }
        if (v22 < v21)
        {
          uint64_t v24 = (_DWORD *)(a6 + 12LL * v22);
          unint64_t v25 = "$$$bad-name-in-nlist$$$";
          if (*v24 < v29
            && TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v32))
          {
            unint64_t v25 = (const char *)(v28 + *v24);
          }

          unsigned int v26 = v19;
          if (a9) {
            unsigned int v26 = TAddressRelocator<Pointer32>::relocate(a9, v19);
          }
          TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v26, v9, (uint64_t)v25, (uint64_t)v25, 34095362, 0LL, 0);
          unsigned int v21 = a7;
        }

LABEL_24:
        --v18;
        uint64_t v19 = v19 + v9;
        ++v20;
        if (!--v17) {
          return;
        }
      }

      uint64_t v23 = "$$$indirect-local-symbol$$$";
LABEL_21:
      unsigned int v27 = v19;
      if (a9) {
        unsigned int v27 = TAddressRelocator<Pointer32>::relocate(a9, v19);
      }
      TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v27, v9, (uint64_t)v23, (uint64_t)v23, 34095362, 0LL, 0);
      goto LABEL_24;
    }
  }

        --v21;
        v20 += v11;
        ++v22;
        if (!--v19) {
          return;
        }
      }

      unint64_t v25 = "$$$indirect-local-symbol$$$";
LABEL_21:
      if (a11) {
        uint64_t v24 = TAddressRelocator<Pointer64>::relocate(a11, v18 + v20);
      }
LABEL_23:
      TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v24, v11, (uint64_t)v25, (uint64_t)v25, 34095362, 0LL, 0);
      goto LABEL_24;
    }
  }

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 28 + v1;
  uint64_t v6 = a1 + 28;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 2);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::dysymtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 28 + v1;
  uint64_t v6 = a1 + 28;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 11);
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at(uint64_t a1)
{
  for (uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32LL); ; uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32LL))
  {
    uint64_t result = i();
    if (!result) {
      break;
    }
    uint64_t v5 = 0LL;
    while (v4 != (_DWORD)v5)
    {
    }
  }

  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::function_starts(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 28 + v1;
  uint64_t v6 = a1 + 28;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 38);
  return result;
}

void extract_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  int v9 = *(_DWORD *)(a1 + 32);
  v37[0] = 0LL;
  v37[1] = v37;
  v37[2] = 0x2000000000LL;
  v37[3] = a2 + 208;
  v36[0] = 0LL;
  v36[1] = v36;
  v36[2] = 0x2000000000LL;
  v36[3] = a2 + 96;
  uint64_t v10 = (*(uint64_t (**)(void, void, unint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  a5,  HIDWORD(a5));
  uint64_t v28 = 0LL;
  unint64_t v29 = &v28;
  uint64_t v30 = 0x3802000000LL;
  __int128 v31 = __Block_byref_object_copy__151;
  uint64_t v32 = __Block_byref_object_dispose__152;
  uint64_t v33 = a3;
  int v34 = a4;
  int v35 = 0;
  if (!a4) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = &v28;
  while (1)
  {
    uint64_t v24 = 0LL;
    unint64_t v25 = &v24;
    uint64_t v26 = 0x2000000000LL;
    uint64_t v27 = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(v12 + 5);
    uint64_t v13 = v25[3];
    if (*(_BYTE *)(v13 + 4) != 100 || *(_DWORD *)(v13 + 8)) {
      goto LABEL_15;
    }
    unsigned int v14 = *((_DWORD *)v29 + 13);
    if (v14 >= *((_DWORD *)v29 + 12)) {
      break;
    }
    uint64_t v15 = v29 + 5;
    uint64_t v16 = v29[5];
    uint64_t v17 = v16 + 12LL * v14;
    v25[3] = v17;
    if (!v16) {
      goto LABEL_18;
    }
    if (*(_BYTE *)(v17 + 4) == 102 && *(_WORD *)(v17 + 6) == 1)
    {
      uint64_t v18 = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(v15);
      v25[3] = (uint64_t)v18;
      uint64_t v19 = (char *)(v11 + *v18);
      if (!*v19)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = *(void *)(a1 + 40);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v20;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Empty object_file_path in mach-o header: %s\n",  (uint8_t *)&buf,  0xCu);
        }

        fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Empty object_file_path in mach-o header: %s\n",  *(const char **)(a1 + 40));
      }

      if (!deny_nfs_mount_lookup(v19))
      {
        *(void *)&__int128 buf = CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification( v19,  (void **)(*(unsigned int *)(*(void *)(a1 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 24) + 8LL) & 0xFFFFFF) << 32)),  537657344LL,  0LL);
        *((void *)&buf + 1) = v21;
        v22[0] = MEMORY[0x1895F87A8];
        v22[1] = 0x40000000LL;
        v22[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke;
        v22[3] = &unk_189DF7DF0;
        void v22[4] = &v24;
        v22[5] = &v28;
        int v23 = v9;
        v22[8] = v11;
        v22[9] = a1;
        v22[10] = a2;
        v22[6] = v36;
        v22[7] = v37;
        CSSymbolicatorForeachSymbolOwnerAtTime(buf, v21, 0x8000000000000000LL, (uint64_t)v22);
        CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)&buf);
      }
    }

void sub_186027434( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

unsigned int *extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5)
{
  int v8 = *(_DWORD *)(a1 + 32);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, void, unint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  a5,  HIDWORD(a5));
  uint64_t v22 = a3;
  unsigned int v23 = a4;
  unsigned int v24 = 0;
  if (a4)
  {
    uint64_t v10 = result;
    uint64_t v11 = (void **)(a2 + 488);
    uint64_t v12 = (CSCppStringCache *)(a2 + 96);
    while (1)
    {
      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
      if (*((_BYTE *)result + 4) == 100 && !result[2])
      {
        if (v24 >= v23 || !v22) {
          return result;
        }
        if (*(_BYTE *)(v22 + 12LL * v24 + 4) == 104)
        {
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
          if (v24 >= v23) {
            return result;
          }
          uint64_t v13 = *result;
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
          if (*((_BYTE *)result + 4) == 100)
          {
            if (v24 >= v23) {
              return result;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            if (*((_BYTE *)result + 4) == 100)
            {
              if (v24 >= v23) {
                return result;
              }
              uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
              if (*((_BYTE *)result + 4) == 102)
              {
                uint64_t v14 = v24;
              }
            }
          }
        }
      }

__n128 __Block_byref_object_copy__151(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(uint64_t *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 3);
  if (v1 >= *((_DWORD *)a1 + 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"out of range index into nlist array",  35LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 3) = v1 + 1;
  return v2 + 12LL * v1;
}

void sub_186027768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 8LL);
  uint64_t result = CSSymbolOwnerGetLastModifiedTimestamp(a2, a3);
  unsigned int v8 = result - v6;
  if (v6) {
    BOOL v9 = v8 > 5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    uint64_t v10 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v11 = MEMORY[0x1895F87A8];
    while (1)
    {
      while (1)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
        int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL);
        if (v12 == 46) {
          break;
        }
        if (v12 == 100) {
          return result;
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
      uint64_t v13 = *(unsigned int **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (*((_BYTE *)v13 + 4) != 36) {
        break;
      }
      unsigned int v14 = v13[2];
      int v15 = *(_DWORD *)(a1 + 88);
      uint64_t v16 = (_BYTE *)(*(void *)(a1 + 64) + *v13);
      if (!*v16)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 40LL);
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v25 = v17;
          _os_log_impl( &dword_185FC0000,  v10,  OS_LOG_TYPE_ERROR,  "Empty function_name in mach-o header: %s\n",  buf,  0xCu);
        }

        fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Empty function_name in mach-o header: %s\n",  *(const char **)(*(void *)(a1 + 72) + 40LL));
      }

      int v18 = v15 + v14;
      do
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
        int v19 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL);
      }

      while (v19 == 132);
      if (v19 != 36) {
        break;
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
      if (*(_BYTE *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL) != 78) {
        break;
      }
      v20[0] = v11;
      v20[1] = 0x40000000LL;
      v20[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_155;
      v20[3] = &unk_189DF7DC8;
      int v23 = v18;
      uint64_t v22 = *(void *)(a1 + 80);
      __int128 v21 = *(_OWORD *)(a1 + 48);
      CSSymbolOwnerForeachSymbolWithMangledName(a2, a3, (uint64_t)v16, (uint64_t)v20);
    }
  }

  return result;
}

unint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_155( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(_DWORD *)(a1 + 56) - CSSymbolGetRange(a2, a3);
  else {
    int v7 = 0;
  }
  else {
    int v8 = v7;
  }
  uint64_t v9 = MEMORY[0x1895F87A8];
  if (!v8) {
    goto LABEL_60;
  }
  uint64_t v57 = 0LL;
  *(void *)__int128 buf = off_189DF7E20;
  __int16 v48 = (uint8_t *)v56;
  uint64_t v50 = buf;
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( buf,  v56);
  uint64_t v10 = v50;
  if (v50 == buf)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = buf;
  }

  else
  {
    if (!v50) {
      goto LABEL_13;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*(void *)v10 + 8 * v11))();
LABEL_13:
  uint64_t v12 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  if ((v13 - 1) < 2)
  {
    unint64_t v14 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int v15 = *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 40);
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v17 = CSCppStringCache::intern(*(CSCppStringCache **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v15);
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v16 = 0LL;
    }

    v58[0] = v17;
    v58[1] = v16;
    unsigned int v23 = atomic_load((unsigned int *)(v14 + 20));
    if ((v23 & 0x80000000) != 0)
    {
      unsigned int v24 = (__int128 *)v58;
      if (!*(void *)(v14 + 40)) {
        unsigned int v24 = 0LL;
      }
    }

    else
    {
      unsigned int v24 = 0LL;
    }

    *(void *)__int128 buf = *(void *)v14;
    __int16 v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = (uint8_t *)"$$$debug-map-fake-name$$$";
    unint64_t v51 = (void (*)(uint64_t))"$$$debug-map-fake-mangled-name$$$";
    *(void *)&v53[32] = 0LL;
    __int128 v52 = 0u;
    memset(v53, 0, 25);
    if (v24)
    {
      __int128 v52 = *v24;
      unsigned int v25 = v8 | 0x88000000;
    }

    else
    {
      unsigned int v25 = v8 | 0x8000000;
    }

    HIDWORD(v49) = v25;
    uint64_t v26 = *(void *)(v14 + 56);
    for (uint64_t i = *(void *)(v14 + 64); v26 != i; v26 += 96LL)
    {
      if (!v57) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, uint64_t, _BYTE *, void))(*v57 + 48LL))( v57,  v26,  v53,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    }

    slideSymbolsByOffset<Pointer32>((uint64_t)buf, v6);
    TRawSymbolOwnerData<Pointer32>::add_symbol(*(uint64_t **)(a1 + 48), (uint64_t)buf);
    v45[0] = v53;
    uint64_t v28 = (void ***)v45;
    goto LABEL_54;
  }

  if (v13 == 4)
  {
    int v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
    unint64_t v41 = 0LL;
    if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address( v18,  *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL),  &v41) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps",  buf,  2u);
      }

      fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
      goto LABEL_55;
    }

    *(void *)__int128 buf = 0LL;
    __int16 v48 = buf;
    uint64_t v49 = 0x8802000000LL;
    uint64_t v50 = (uint8_t *)__Block_byref_object_copy__159;
    unint64_t v51 = __Block_byref_object_dispose__160;
    int v19 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    LODWORD(v52) = v6 + v41;
    DWORD1(v52) = v19;
    *((void *)&v52 + 1) = 0LL;
    *(_DWORD *)uint64_t v53 = 0;
    *(void *)&v53[8] = "$$$debug-map-fake-name$$$";
    *(void *)&v53[16] = "$$$debug-map-fake-mangled-name$$$";
    uint64_t v55 = 0LL;
    *(_OWORD *)&v53[24] = 0u;
    memset(v54, 0, 25);
    *(_DWORD *)&v53[4] = v8 | 0x8000000;
    unint64_t v46 = 0LL;
    unsigned int v20 = operator new(0x20uLL);
    *unsigned int v20 = off_189DF7F00;
    v20[1] = v45;
    v20[2] = v18;
    *((_DWORD *)v20 + 6) = v6;
    unint64_t v59 = v20;
    std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( v58,  v45);
    __int128 v21 = v59;
    if (v59 == v58)
    {
      uint64_t v22 = 4LL;
      __int128 v21 = v58;
    }

    else
    {
      if (!v59) {
        goto LABEL_38;
      }
      uint64_t v22 = 5LL;
    }

    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_38:
    v42[0] = v9;
    v42[1] = 1174405120LL;
    v42[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_161;
    v42[3] = &unk_189DF7D68;
    unint64_t v29 = v43;
    uint64_t v30 = (uint64_t)v46;
    if (v46)
    {
      if (v46 == v45)
      {
        unint64_t v44 = v43;
        (*(void (**)(void *, _BYTE *))(v45[0] + 24LL))(v45, v43);
LABEL_43:
        uint64_t v31 = *(void *)(a1 + 32);
        v42[4] = buf;
        v42[5] = v31;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol( (uint64_t)v18,  a3 & 0xFFFFFFFFFFFFFFFCLL,  (uint64_t)v42);
        TRawSymbolOwnerData<Pointer32>::add_symbol(*(uint64_t **)(a1 + 48), (uint64_t)(v48 + 40));
        if (v44 == v43)
        {
          uint64_t v32 = 4LL;
        }

        else
        {
          if (!v44) {
            goto LABEL_48;
          }
          uint64_t v32 = 5LL;
          unint64_t v29 = v44;
        }

        (*(void (**)(void *))(*v29 + 8 * v32))(v29);
LABEL_48:
        uint64_t v33 = v46;
        if (v46 == v45)
        {
          uint64_t v34 = 4LL;
          uint64_t v33 = v45;
        }

        else
        {
          if (!v46)
          {
LABEL_53:
            _Block_object_dispose(buf, 8);
            v58[0] = v54;
            uint64_t v28 = (void ***)v58;
LABEL_54:
            std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v28);
            goto LABEL_55;
          }

          uint64_t v34 = 5LL;
        }

        (*(void (**)(void))(*v33 + 8 * v34))();
        goto LABEL_53;
      }

      uint64_t v30 = (*(uint64_t (**)(void))(*v46 + 16LL))();
    }

    unint64_t v44 = (_BYTE *)v30;
    goto LABEL_43;
  }

LABEL_60:
  v38[0] = v9;
  v38[1] = 0x40000000LL;
  v38[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_164;
  v38[3] = &unk_189DF7DA0;
  __int128 v39 = *(_OWORD *)(a1 + 32);
  int v40 = v6;
  return CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v38);
}

  v38[0] = v9;
  v38[1] = 0x40000000LL;
  v38[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_243;
  v38[3] = &unk_189DF8E18;
  __int128 v39 = *(_OWORD *)(a1 + 32);
  int v40 = v6;
  return CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v38);
}

void sub_186027F94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t *a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  uint64_t v45 = a30;
  if (a30 == &a27)
  {
    uint64_t v46 = 4LL;
    uint64_t v45 = &a27;
  }

  else
  {
    if (!a30) {
      goto LABEL_6;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  _Block_object_dispose(&a31, 8);
  *(void *)(v43 - 120) = &a43;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  uint64_t v47 = *(void **)(v43 - 128);
  if (v47 == (void *)(v43 - 152))
  {
    uint64_t v48 = 4LL;
    uint64_t v47 = (void *)(v43 - 152);
  }

  else
  {
    if (!v47) {
      goto LABEL_11;
    }
    uint64_t v48 = 5LL;
  }

  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t slideSymbolsByOffset<Pointer32>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result += a2;
  uint64_t v2 = *(void *)(result + 56);
  for (uint64_t i = *(void *)(result + 64); v2 != i; v2 += 96LL)
    uint64_t result = slideSymbolsByOffset<Pointer32>(v2, a2);
  return result;
}

uint64_t __Block_byref_object_copy__159(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0LL;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 8_Block_object_dispose((const void *)(v30 - 160), 8) = 0LL;
  *(void *)(v2 + _Block_object_dispose((const void *)(v30 - 160), 8) = 0LL;
  *(void *)(v2 + 16) = 0LL;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 65) = 0u;
  return TRawSymbol<Pointer32>::operator=(v2, a2 + 40);
}

void __Block_byref_object_dispose__160(uint64_t a1)
{
  unsigned int v1 = (void **)(a1 + 96);
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_161( void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[4] + 8LL);
  uint64_t v3 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  uint64_t v6 = a2;
  uint64_t v4 = a1[9];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v2 + 96, v3);
}

uint64_t __copy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 48,  a2 + 48);
}

void *__destroy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  unsigned int v1 = (void *)(a1 + 48);
  uint64_t result = *(void **)(a1 + 72);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_164( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  if ((v7 - 1) >= 2)
  {
    if (v7 != 4) {
      return;
    }
    uint64_t v17 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v5);
    int v18 = (CSCppMMapSourceInfo *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    int v19 = (_DWORD *)*((void *)v17 + 11);
    unsigned int v20 = *(CSCppStringCache **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    __int128 v21 = (char *)CSCppMMapSourceInfo::path( v18,  (uint64_t)v19 + 32 * v19[2] + 24 * v19[3] + (24 * v19[4])
                  + (unint64_t)(4 * v19[4])
                  + (36 * v19[5])
                  + (20 * v19[6])
                  + v19[22]
                  + v19[20]
                  + 96);
    uint64_t v22 = CSCppStringCache::intern(v20, v21);
    unint64_t v47 = 0LL;
    TMMapSymbolOwnerData::convert_archive_address_to_real_address(v17, *(unsigned int *)v18, &v47);
    uint64_t v10 = *(void ***)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v23 = v47 + *(_DWORD *)(a1 + 48);
    unsigned int v24 = *((_DWORD *)v18 + 1);
    unsigned int v25 = *((_DWORD *)v18 + 3);
    int v14 = *((_DWORD *)v18 + 4);
    int v15 = (char *)v10[1];
    uint64_t v26 = (char *)v10[2];
    if (v15 < v26)
    {
      *(_DWORD *)int v15 = v23;
      *((_DWORD *)v15 + 1) = v24;
      *((void *)v15 + 1) = v22;
      *((_DWORD *)v15 + 4) = v25;
      goto LABEL_7;
    }

    uint64_t v39 = (v15 - (_BYTE *)*v10) >> 5;
    unint64_t v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 59))
    {
      uint64_t v41 = v26 - (_BYTE *)*v10;
      if (v41 >> 4 > v40) {
        unint64_t v40 = v41 >> 4;
      }
      else {
        unint64_t v42 = v40;
      }
      uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v10 + 2), v42);
      uint64_t v33 = &v43[32 * v39];
      int v35 = &v43[32 * v44];
      *(_DWORD *)uint64_t v33 = v23;
      *((_DWORD *)v33 + 1) = v24;
      *((void *)v33 + 1) = v22;
      *((_DWORD *)v33 + 4) = v25;
      *((_DWORD *)v33 + 5) = v14;
      *((_DWORD *)v33 + 6) = 0;
      uint64_t v27 = v33 + 32;
      uint64_t v45 = (char *)*v10;
      uint64_t v36 = (char *)v10[1];
      if (v36 == *v10) {
        goto LABEL_26;
      }
      do
      {
        __int128 v46 = *((_OWORD *)v36 - 2);
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v36 - 20);
        *((_OWORD *)v33 - 2) = v46;
        v33 -= 32;
        v36 -= 32;
      }

      while (v36 != v45);
      goto LABEL_25;
    }

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEv( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF7E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v30 - 160), 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEPNS0_6__baseISX_EE( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF7E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v30 - 160), 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EEclESN_SS_SU_( uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  int v8 = *(char **)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = CSCppStringCache::intern(this, v8);
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
  }

  unsigned int v11 = atomic_load((unsigned int *)(a2 + 20));
  unsigned int v12 = v11 & 0xF77BFFFF;
  unsigned int v13 = v11 & 0xF77BFFFF | 0x8000000;
  uint64_t v14 = *(void *)a2;
  int v15 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a2);
  uint64_t v16 = CSCppStringCache::intern(this, v15);
  uint64_t v17 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a2);
  int v18 = CSCppStringCache::intern(this, v17);
  unsigned int v19 = atomic_load((unsigned int *)(a2 + 20));
  uint64_t v20 = *(void *)(a2 + 40);
  v26[0] = v14;
  v26[1] = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = v16;
  unint64_t v29 = v18;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  memset(v31, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    *(void *)&__int128 v30 = v10;
    *((void *)&v30 + 1) = v9;
    unsigned int v13 = v12 | 0x88000000;
  }

  HIDWORD(v27) = v13;
  uint64_t v21 = *(void *)(a2 + 56);
  for (uint64_t i = *(void *)(a2 + 64); v21 != i; v21 += 96LL)
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 24LL);
    if (!v23) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v23 + 48LL))( v23,  v21,  v31,  this);
  }

  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v25 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v26);
  }

  else
  {
    *(void *)(v24 + 8_Block_object_dispose((const void *)(v30 - 160), 8) = 0LL;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 160), 8) = 0LL;
    *(void *)(v24 + 16) = 0LL;
    *(void *)unint64_t v24 = 0LL;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v24, (uint64_t)v26);
    uint64_t v25 = v24 + 96;
  }

  a3[1] = v25;
  uint64_t v33 = (void **)v31;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1860286CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void **a22)
{
  a22 = (void **)&a17;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE6targetERKSt9type_info( uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100]( a2,  (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_;
}

uint64_t TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>( uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 20);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 20));
  if ((v3 & 0x400000) == 0)
  {
    uint64_t v10 = 0LL;
    unsigned int v11 = &v10;
    uint64_t v12 = 0x2000000000LL;
    uint64_t v4 = operator new(0x10uLL);
    CSCppBitLock::CSCppBitLock((uint64_t)v4, v2, 0x2000);
    unsigned int v13 = v4;
    void v8[4] = &v10;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke;
    v9[3] = &unk_189DF7E98;
    v9[4] = &v10;
    v9[5] = a1;
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    v8[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2;
    v8[3] = &unk_189DF7EC0;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v9, (uint64_t)v8);
    uint64_t v5 = (CSCppBitLock *)v11[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      operator delete(v6);
      v11[3] = 0LL;
    }

    _Block_object_dispose(&v10, 8);
  }

  return *(void *)(a1 + 32);
}

void sub_186028828(_Unwind_Exception *a1)
{
}

unsigned int **___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke( unsigned int **result)
{
  uint64_t v1 = result[5];
  uint64_t v2 = v1 + 5;
  unsigned int v3 = atomic_load(v1 + 5);
  if ((v3 & 0x400000) == 0)
  {
    uint64_t v4 = result;
    unsigned int v5 = atomic_load(v2);
    unsigned int v6 = atomic_load(v2);
    if ((v5 & 0x80000) != 0)
    {
      int v8 = 0x400000;
      if ((v6 & 2) == 0) {
        return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
      }
      uint64_t v9 = "DYLD-STUB$$";
    }

    else
    {
      if ((v6 & 0x100000) == 0)
      {
        unsigned int v7 = atomic_load(v1 + 5);
        if ((v7 & 0x200000) == 0)
        {
          int v8 = 0x400000;
          return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
        }
      }

      int is_objc_method_internal = TRawSymbol<Pointer32>::is_objc_method_internal((int)result[5], *((char **)v1 + 4));
      int v8 = is_objc_method_internal | 0x400000;
      uint64_t v9 = "_";
    }

    *((void *)v1 + 11) = v9;
    return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
  }

  return result;
}

void ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2( uint64_t a1)
{
  uint64_t v2 = *(CSCppBitLock **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2)
  {
    CSCppBitLock::~CSCppBitLock(v2);
    operator delete(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void *std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    unsigned int v3 = result;
    uint64_t v4 = (void *)result[3];
    unsigned int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_186028A94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEv( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189DF7F00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEPNS0_6__baseISY_EE( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF7F00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EEclEOSM_ST_SV_( uint64_t a1, uint64_t *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v7 = (__int128 *)*a2;
  int v8 = *(TMMapSymbolOwnerData **)(a1 + 16);
  uint64_t v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*(_DWORD *)(*a2 + 8) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)v7 + 6), v10 + v11))
  {
    uint64_t v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)v7 + 2) & 0x80000000) != 0) {
      uint64_t v24 = *(void *)((char *)v7 + 28);
    }
    else {
      uint64_t v24 = 0LL;
    }
    *((void *)&v30 + 1) = v24;
    int v8 = *(TMMapSymbolOwnerData **)(a1 + 16);
  }

  else
  {
    uint64_t v12 = 0LL;
    *((void *)&v30 + 1) = 0LL;
  }

  __int128 v13 = *v7;
  uint64_t v48 = *((void *)v7 + 2);
  __int128 v47 = v13;
  unint64_t v46 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v13, &v46) & 1) != 0)
  {
    *(void *)&__int128 v30 = v12;
    uint64_t v14 = (char *)(v10 + v48);
    int v15 = DWORD1(v47);
    int v16 = DWORD2(v47);
    if (HIDWORD(v47)) {
      unsigned int v17 = DWORD2(v47);
    }
    else {
      unsigned int v17 = DWORD2(v47) & 0xF779FFFF;
    }
    if (HIDWORD(v47)) {
      int v18 = (char *)(v10 + HIDWORD(v47));
    }
    else {
      int v18 = (char *)(v10 + v48);
    }
    unsigned int v19 = v17 & 0xF77BFFFF;
    int v35 = __Block_byref_object_copy__159;
    uint64_t v36 = __Block_byref_object_dispose__160;
    int v20 = *(_DWORD *)(a1 + 24) + v46;
    *(void *)__int128 buf = 0LL;
    uint64_t v33 = buf;
    uint64_t v34 = 0x8802000000LL;
    uint64_t v21 = CSCppStringCache::intern(this, v18);
    uint64_t v22 = CSCppStringCache::intern(this, v14);
    int v37 = v20;
    int v38 = v15;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = v21;
    unint64_t v42 = v22;
    uint64_t v45 = 0LL;
    __int128 v43 = 0u;
    memset(v44, 0, 25);
    if (v16 < 0)
    {
      __int128 v43 = v30;
      unsigned int v23 = v19 | 0x88000000;
    }

    else
    {
      unsigned int v23 = v19 | 0x8000000;
    }

    HIDWORD(v40) = v23;
    v31[0] = MEMORY[0x1895F87A8];
    v31[1] = 0x40000000LL;
    _OWORD v31[2] = ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke;
    v31[3] = &unk_189DF7F78;
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v25 = *(void *)(a1 + 16);
    v31[4] = buf;
    v31[5] = v26;
    v31[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v25, (uint64_t)&v47, (uint64_t)v31);
    uint64_t v27 = (uint64_t)(v33 + 40);
    unint64_t v28 = a3[1];
    if (v28 >= a3[2])
    {
      uint64_t v29 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, v27);
    }

    else
    {
      *(void *)(v28 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v28 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v28 + 16) = 0LL;
      *(void *)unint64_t v28 = 0LL;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 56) = 0u;
      *(_OWORD *)(v28 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v28, v27);
      uint64_t v29 = v28 + 96;
    }

    a3[1] = v29;
    _Block_object_dispose(buf, 8);
    uint64_t v49 = (void **)v44;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v49);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps inline enumeration",  buf,  2u);
    }

    fwrite( "Could not remap archive address to real in debug maps inline enumeration",  0x48uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
  }

void sub_186028E1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  *(void *)(v33 - 104) = &a33;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 104));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE6targetERKSt9type_info( uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100]( a2,  (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_;
}

uint64_t ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(a1[4] + 8LL);
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v2 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v3 + 96, v4);
}

void *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_186029040(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void CSCppTypeRefMark::~CSCppTypeRefMark(CSCppTypeRefMark *this)
{
}

char *std::vector<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*>( void **a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    uint64_t v15 = (uint64_t)(v11 - (void)*a1) >> 4;
    unint64_t v16 = v15 + 1;
    uint64_t v17 = v9 - (_BYTE *)*a1;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    else {
      unint64_t v18 = v16;
    }
    unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v8, v18);
    int v20 = &v19[16 * v15];
    uint64_t v22 = &v19[16 * v21];
    int v23 = *a3;
    uint64_t v24 = *a4;
    *(_DWORD *)int v20 = *a2;
    *((_DWORD *)v20 + 1) = v23;
    *((void *)v20 + 1) = v24;
    uint64_t v14 = v20 + 16;
    uint64_t v26 = (char *)*a1;
    uint64_t v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v25 - 1);
        v20 -= 16;
        v25 -= 16;
      }

      while (v25 != v26);
      uint64_t v25 = (char *)*a1;
    }

    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v25) {
      operator delete(v25);
    }
  }

  else
  {
    int v12 = *a3;
    uint64_t v13 = *a4;
    *(_DWORD *)unint64_t v11 = *a2;
    *(_DWORD *)(v11 + 4) = v12;
    *(void *)(v11 + _Block_object_dispose((const void *)(v1 - 64), 8) = v13;
    uint64_t v14 = (char *)(v11 + 16);
  }

  a1[1] = v14;
  return v14 - 16;
}

void sort_inlined_functions<Pointer32>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 56);
  uint64_t v3 = *(unsigned int **)(a1 + 64);
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 5));
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>( v2,  v3,  (uint64_t)&v8,  v5,  1);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  while (v6 != v7)
  {
    sort_inlined_functions<Pointer32>(v6);
    v6 += 96LL;
  }

uint64_t std::vector<TRawSymbol<Pointer32>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>( a3,  *(void *)(a1 + 8),  a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 96;
        unint64_t v10 = (void **)(v7 - 40);
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v10);
        uint64_t v7 = v8;
      }

      while (v8 != v6);
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v6;
  }

  return a2;
}

void **std::vector<TRawSymbol<Pointer32>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 96 * v6;
    std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v7);
  }

  return result;
}

void sub_186029388(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::vector<TRangeValue<Pointer32,char const*>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0LL];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }

      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t std::vector<TRawSymbol<Pointer32>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 5)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 5)) >= a5)
      {
        uint64_t v21 = a3 + 96 * a5;
      }

      else
      {
        uint64_t v21 = a3 + 32 * ((uint64_t)(v12 - a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>( (uint64_t)v9,  v21,  a4,  *(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }

      std::vector<TRawSymbol<Pointer32>>::__move_range((uint64_t)a1, v5, v12, v5 + 96 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          TRawSymbol<Pointer32>::operator=(v22, v7);
          v7 += 96LL;
          v22 += 96LL;
        }

        while (v7 != v21);
      }
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555LL * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 5);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x155555555555555LL) {
        unint64_t v18 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      v28[4] = v9;
      if (v18) {
        unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)v9, v18);
      }
      else {
        unsigned int v19 = 0LL;
      }
      int v23 = &v19[96 * v15];
      v28[0] = v19;
      v28[1] = v23;
      v28[3] = &v19[96 * v18];
      uint64_t v24 = 3 * a5;
      uint64_t v25 = &v23[96 * a5];
      uint64_t v26 = 32 * v24;
      do
      {
        *((void *)v23 + 11) = 0LL;
        *((void *)v23 + 1) = 0LL;
        *((void *)v23 + 2) = 0LL;
        *(void *)int v23 = 0LL;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=((uint64_t)v23, v7);
        v23 += 96;
        v7 += 96LL;
        v26 -= 96LL;
      }

      while (v26);
      v28[2] = v25;
      uint64_t v5 = std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v28, v5);
      std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v28);
    }
  }

  return v5;
}

void sub_18602962C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__move_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)(v8 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v8 + 16) = 0LL;
      *(void *)uint64_t v8 = 0LL;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v8, v10);
      v10 += 96LL;
      v8 += 96LL;
    }

    while (v10 < a3);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>( a2,  v7,  v6);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>>( (uint64_t)(a1 + 2),  a3,  a3,  *a1,  *a1,  v6,  v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>( v7,  a3,  a1[1],  a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v4 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v4 + 16) = 0LL;
      *(void *)uint64_t v4 = 0LL;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v4, v6);
      v6 += 96LL;
      uint64_t v4 = v11 + 96;
      v11 += 96LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 96LL;
      a3 -= 96LL;
      TRawSymbol<Pointer32>::operator=(a3, v6);
    }

    while (v6 != a1);
  }

  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer32>::operator=(a3, v4);
      v4 += 96LL;
      a3 += 96LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t *std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>>( _DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v10 = a5;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v10, (uint64_t)v8);
        v8 += 24;
      }

      else
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v10, (uint64_t)a3);
        a3 += 24;
      }

      if (v8 == a2)
      {
        a5 = v10;
        goto LABEL_9;
      }
    }

    uint64_t v11 = v10;
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v11, (uint64_t)v8);
      v8 += 24;
    }

    while (v8 != a2);
    return v11;
  }

LABEL_9:
  uint64_t v11 = a5;
  if (a3 != a4)
  {
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v11, (uint64_t)a3);
      a3 += 24;
    }

    while (a3 != a4);
    return v11;
  }

  return a5;
}

  uint64_t v11 = a5;
  if (a3 != a4)
  {
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)a3);
      a3 += 13;
    }

    while (a3 != a4);
    return v11;
  }

  return a5;
}

uint64_t **std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100]( uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(*a1, a2);
  }

  else
  {
    *(void *)(v4 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(v4 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(v4 + 16) = 0LL;
    *(void *)unint64_t v4 = 0LL;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v4, a2);
    uint64_t v5 = v4 + 96;
  }

  v3[1] = v5;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer32>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if (a1 >= 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1896146B8];
  while (1)
  {
    __n128 result = operator new(32 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( _OWORD *a1, _OWORD *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      char v9 = a2 - 2;
      if (*((_DWORD *)a2 - 8) < *(_DWORD *)a1)
      {
        *(_OWORD *)uint64_t v20 = *a1;
        a7 = *(__n128 *)a1;
        *(_OWORD *)&v20[16] = a1[1];
        __int128 v10 = *(_OWORD *)((char *)a2 - 20);
        *a1 = *v9;
        *(_OWORD *)((char *)a1 + 12) = v10;
        *char v9 = a7;
        a7.n128_u64[0] = *(void *)&v20[12];
        *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v20[12];
      }
    }

    else if ((uint64_t)a4 > 128)
    {
      unint64_t v15 = a4 >> 1;
      unint64_t v16 = &a1[2 * (a4 >> 1)];
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( a1,  v16,  a3,  v17,  (uint64_t)a5,  a7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( &a1[2 * (a4 >> 1)],  a2,  a3,  a4 - (a4 >> 1),  (uint64_t)&a5[32 * v15],  v18);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( (uint64_t)a5,  (uint64_t)&a5[32 * v15],  (uint64_t)&a5[32 * v15],  (uint64_t)&a5[32 * a4],  (uint64_t)a1).n128_u64[0];
      }

      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( a1,  v16,  a3,  v17,  a5,  a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( &a1[2 * (a4 >> 1)],  a2,  a3,  a4 - (a4 >> 1),  a5,  a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( (char *)a1,  (char *)&a1[2 * (a4 >> 1)],  (char *)a2,  a3,  a4 >> 1,  a4 - (a4 >> 1),  a5,  a6).n128_u64[0];
      }
    }

    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( (uint64_t)a1,  (unsigned int *)a2);
    }
  }

  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( uint64_t result, unsigned int *a2)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v2 = (unsigned int *)(result + 32);
    if ((unsigned int *)(result + 32) != a2)
    {
      uint64_t v3 = 0LL;
      BOOL v4 = (unsigned int *)result;
      do
      {
        uint64_t v5 = v2;
        unsigned int v6 = *v2;
        if (v6 < *v4)
        {
          *(_OWORD *)__int128 v10 = *(_OWORD *)(v4 + 9);
          *(_OWORD *)&v10[12] = *((_OWORD *)v4 + 3);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 44) = *(_OWORD *)(result + v7 + 12);
            if (!v7) {
              break;
            }
            v7 -= 32LL;
            if (v6 >= *(_DWORD *)(v8 - 32))
            {
              uint64_t v9 = result + v7 + 32;
              goto LABEL_10;
            }
          }

          uint64_t v9 = result;
LABEL_10:
          *(_DWORD *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + 4) = *(_OWORD *)v10;
          *(void *)(v9 + 20) = *(void *)&v10[16];
        }

        uint64_t v2 = v5 + 8;
        v3 += 32LL;
        BOOL v4 = v5;
      }

      while (v5 + 8 != a2);
    }
  }

  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( _OWORD *a1, _OWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v11 = (__n128 *)(a2 - 2);
      if (*((_DWORD *)a2 - 8) >= *(_DWORD *)a1)
      {
        __int128 v15 = a1[1];
        *(_OWORD *)a5 = *a1;
        *(_OWORD *)(a5 + 16) = v15;
        a6 = *v11;
        __int128 v13 = *(a2 - 1);
      }

      else
      {
        __int128 v12 = *(a2 - 1);
        *(__n128 *)a5 = *v11;
        *(_OWORD *)(a5 + 16) = v12;
        a6 = *(__n128 *)a1;
        __int128 v13 = a1[1];
      }

      *(__n128 *)(a5 + 32) = a6;
      *(_OWORD *)(a5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v13;
    }

    else if (a4 == 1)
    {
      a6 = *(__n128 *)a1;
      __int128 v10 = a1[1];
      *(_OWORD *)a5 = *a1;
      *(_OWORD *)(a5 + 16) = v10;
    }

    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( a1,  &a1[2 * (a4 >> 1)],  a3,  a4 >> 1,  a5,  a4 >> 1);
      v16.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( &a1[2 * (a4 >> 1)],  a2,  a3,  a4 - (a4 >> 1),  a5 + 32 * (a4 >> 1),  a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( (uint64_t)a1,  (uint64_t)&a1[2 * (a4 >> 1)],  (uint64_t)&a1[2 * (a4 >> 1)],  (uint64_t)a2,  a5,  v16).n128_u64[0];
    }

    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( a1,  a2,  (_OWORD *)a5);
    }
  }

  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)(a5 + 12) = *(_OWORD *)(a3 + 12);
        *(__n128 *)a5 = result;
        a5 += 32LL;
        a3 += 32LL;
      }

      return result;
    }

    if (a3 == a4) {
      break;
    }
    if (*(_DWORD *)a3 >= *(_DWORD *)a1)
    {
      __n128 result = *(__n128 *)a1;
      *(_OWORD *)(a5 + 12) = *(_OWORD *)(a1 + 12);
      *(__n128 *)a5 = result;
      a1 += 32LL;
    }

    else
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)(a5 + 12) = *(_OWORD *)(a3 + 12);
      *(__n128 *)a5 = result;
      a3 += 32LL;
    }

    a5 += 32LL;
  }

  if (a1 != a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = a5 + v6;
      __n128 result = *(__n128 *)(a1 + v6);
      *(_OWORD *)(v7 + 12) = *(_OWORD *)(a1 + v6 + 12);
      *(__n128 *)uint64_t v7 = result;
      v6 += 32LL;
    }

    while (a1 + v6 != a2);
  }

  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( a1,  a2,  a3,  a4,  a5,  v9,  a7);
        return result;
      }

      if (!a5) {
        return result;
      }
      uint64_t v12 = 0LL;
      uint64_t v13 = -a5;
      while (*(_DWORD *)a2 >= *(_DWORD *)&a1[v12])
      {
        v12 += 32LL;
        if (__CFADD__(v13++, 1LL)) {
          return result;
        }
      }

      uint64_t v15 = -v13;
      unint64_t v42 = a3;
      uint64_t v43 = a8;
      uint64_t v41 = &a1[v12];
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          uint64_t v39 = &a1[v12];
          *(_OWORD *)unint64_t v46 = *(_OWORD *)&a1[v12];
          *(_OWORD *)&v46[16] = *(_OWORD *)&a1[v12 + 16];
          __int128 v40 = *(_OWORD *)a2;
          *(_OWORD *)(v39 + 12) = *(_OWORD *)(a2 + 12);
          *(_OWORD *)uint64_t v39 = v40;
          *(_OWORD *)a2 = *(_OWORD *)v46;
          __n128 result = *(__n128 *)&v46[12];
          *(_OWORD *)(a2 + 12) = *(_OWORD *)&v46[12];
          return result;
        }

        if (v13 > 0) {
          uint64_t v15 = 1 - v13;
        }
        uint64_t v25 = v15 >> 1;
        unsigned int v19 = &a1[32 * (v15 >> 1) + v12];
        __n128 v18 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = (a3 - a2) >> 5;
          __n128 v18 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            unint64_t v28 = &v18[32 * (v26 >> 1)];
            unsigned int v30 = *(_DWORD *)v28;
            uint64_t v29 = v28 + 32;
            v26 += ~(v26 >> 1);
            if (v30 < *(_DWORD *)v19) {
              __n128 v18 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }

          while (v26);
        }

        uint64_t v17 = (v18 - a2) >> 5;
      }

      else
      {
        if (v9 >= 0) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v9 + 1;
        }
        uint64_t v17 = v16 >> 1;
        __n128 v18 = &a2[32 * (v16 >> 1)];
        unsigned int v19 = a2;
        if (a2 - a1 != v12)
        {
          unint64_t v20 = (a2 - a1 - v12) >> 5;
          unsigned int v19 = &a1[v12];
          do
          {
            unint64_t v21 = v20 >> 1;
            uint64_t v22 = &v19[32 * (v20 >> 1)];
            unsigned int v24 = *(_DWORD *)v22;
            int v23 = v22 + 32;
            v20 += ~(v20 >> 1);
            if (*(_DWORD *)v18 < v24) {
              unint64_t v20 = v21;
            }
            else {
              unsigned int v19 = v23;
            }
          }

          while (v20);
        }

        uint64_t v25 = (v19 - a1 - v12) >> 5;
      }

      a5 = -(v25 + v13);
      uint64_t v31 = v9 - v17;
      uint64_t v32 = v25;
      uint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( v19,  a2,  v18);
      uint64_t v34 = v32;
      int v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        uint64_t v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( v33,  v18,  v42,  a4,  a5,  v9 - v17,  a7,  v43);
        a2 = v19;
        uint64_t v31 = v17;
        a8 = v43;
        a5 = v38;
        a3 = v35;
        a1 = v41;
      }

      else
      {
        uint64_t v36 = v17;
        a8 = v43;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( &a1[v12],  v19,  v33,  a4,  v34,  v36,  a7,  v43);
        a1 = v35;
        a2 = v18;
        a3 = v42;
      }

      uint64_t v9 = v31;
    }

    while (v31);
  }

  return result;
}

_OWORD *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( _OWORD *result, _OWORD *a2, _OWORD *a3)
{
  if (result != a2)
  {
    __int128 v3 = result[1];
    *a3 = *result;
    a3[1] = v3;
    BOOL v4 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = a3;
      uint64_t v7 = a3;
      do
      {
        unsigned int v8 = *(_DWORD *)v7;
        v7 += 2;
        if (*(_DWORD *)v4 >= v8)
        {
          __int128 v13 = v4[1];
          *uint64_t v7 = *v4;
          v7[1] = v13;
        }

        else
        {
          __int128 v9 = v6[1];
          *uint64_t v7 = *v6;
          v7[1] = v9;
          __int128 v10 = a3;
          if (v6 != a3)
          {
            uint64_t v11 = v5;
            while (1)
            {
              __int128 v10 = (_OWORD *)((char *)a3 + v11);
              *__int128 v10 = *(_OWORD *)((char *)a3 + v11 - 32);
              *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)a3 + v11 - 20);
              v11 -= 32LL;
              if (!v11)
              {
                __int128 v10 = a3;
                break;
              }
            }
          }

          __int128 v12 = *v4;
          *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v4 + 12);
          *__int128 v10 = v12;
        }

        v4 += 2;
        v5 += 32LL;
        uint64_t v6 = v7;
      }

      while (v4 != a2);
    }
  }

  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        __int128 v7 = *(_OWORD *)(a3 + 16);
        a3 += 32LL;
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v7;
        a5 += 32LL;
      }

      return result;
    }

    if (a3 == a4) {
      break;
    }
    if (*(_DWORD *)a3 >= *(_DWORD *)a1)
    {
      __n128 result = *(__n128 *)a1;
      __int128 v6 = *(_OWORD *)(a1 + 16);
      a1 += 32LL;
    }

    else
    {
      __n128 result = *(__n128 *)a3;
      __int128 v6 = *(_OWORD *)(a3 + 16);
      a3 += 32LL;
    }

    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v6;
    a5 += 32LL;
  }

  if (a1 != a2)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = a5 + v8;
      __n128 result = *(__n128 *)(a1 + v8);
      __int128 v10 = *(_OWORD *)(a1 + v8 + 16);
      *(__n128 *)uint64_t v9 = result;
      *(_OWORD *)(v9 + 16) = v10;
      v8 += 32LL;
    }

    while (a1 + v8 != a2);
  }

  return result;
}

_OWORD *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( _OWORD *result, _OWORD *a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      uint64_t v17 = 0LL;
      do
      {
        __n128 v18 = &__src[v17 * 16];
        __int128 v19 = result[v17 + 1];
        *(_OWORD *)__n128 v18 = result[v17];
        *((_OWORD *)v18 + 1) = v19;
        v17 += 2LL;
      }

      while (&result[v17] != a2);
      if (v17 * 16)
      {
        unint64_t v20 = __src;
        while (a2 != a3)
        {
          if (*(_DWORD *)a2 >= *(_DWORD *)v20)
          {
            __int128 v22 = *(_OWORD *)v20;
            *(_OWORD *)((char *)result + 12) = *(_OWORD *)(v20 + 12);
            void *result = v22;
            v20 += 32;
          }

          else
          {
            __int128 v21 = *a2;
            *(_OWORD *)((char *)result + 12) = *(_OWORD *)((char *)a2 + 12);
            void *result = v21;
            a2 += 2;
          }

          result += 2;
          if (&__src[v17 * 16] == v20) {
            return result;
          }
        }

        return memmove(result, v20, __src - v20 + v17 * 16 - 4);
      }
    }
  }

  else if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = &__src[v7 * 16];
      __int128 v9 = a2[v7 + 1];
      *(_OWORD *)uint64_t v8 = a2[v7];
      *((_OWORD *)v8 + 1) = v9;
      v7 += 2LL;
    }

    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      __int128 v10 = &__src[v7 * 16];
      uint64_t v11 = a3 - 2;
      while (a2 != result)
      {
        unsigned int v12 = *((_DWORD *)v10 - 8);
        unsigned int v13 = *((_DWORD *)a2 - 8);
        BOOL v14 = v12 >= v13;
        if (v12 >= v13) {
          uint64_t v15 = v10 - 32;
        }
        else {
          uint64_t v15 = (char *)(a2 - 2);
        }
        if (!v14) {
          a2 -= 2;
        }
        __int128 v16 = *(_OWORD *)v15;
        if (v14) {
          v10 -= 32;
        }
        *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(v15 + 12);
        *uint64_t v11 = v16;
        v11 -= 2;
        if (v10 == __src) {
          return result;
        }
      }

      unint64_t v23 = 0LL;
      do
      {
        unsigned int v24 = &v11[v23 / 0x10];
        __int128 v25 = *(_OWORD *)&v10[v23 - 32];
        *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)&v10[v23 - 20];
        *unsigned int v24 = v25;
        v23 -= 32LL;
      }

      while (&v10[v23] != __src);
    }
  }

  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( char *__src, char *a2, char *a3)
{
  __int128 v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }

    else if (__src + 32 == a2)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)__src;
      *(_OWORD *)&v7[16] = *((_OWORD *)__src + 1);
      int64_t v5 = a3 - a2;
      memmove(__src, a2, a3 - a2 - 4);
      __int128 v3 = &__src[v5];
      *(_OWORD *)__int128 v3 = *(_OWORD *)v7;
      *(_OWORD *)(v3 + 12) = *(_OWORD *)&v7[12];
    }

    else if (a2 + 32 == a3)
    {
      __int128 v3 = __src + 32;
      *(_OWORD *)uint64_t v8 = *((_OWORD *)a3 - 2);
      *(_OWORD *)&v8[16] = *((_OWORD *)a3 - 1);
      if (a3 - 32 != __src) {
        memmove(__src + 32, __src, a3 - 32 - __src - 4);
      }
      *(_OWORD *)__src = *(_OWORD *)v8;
      *(_OWORD *)(__src + 12) = *(_OWORD *)&v8[12];
    }

    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( __src,  a2,  a3);
    }
  }

  return v3;
}

char *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>( char *a1, char *a2, char *a3)
{
  uint64_t v3 = (a2 - a1) >> 5;
  if (v3 == (a3 - a2) >> 5)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 32;
      int64_t v5 = a2 + 32;
      do
      {
        *(_OWORD *)unsigned int v24 = *((_OWORD *)v4 - 2);
        *(_OWORD *)&v24[16] = *((_OWORD *)v4 - 1);
        __int128 v6 = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v4 - 2) = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v4 - 20) = v6;
        *((_OWORD *)v5 - 2) = *(_OWORD *)v24;
        *(_OWORD *)(v5 - 20) = *(_OWORD *)&v24[12];
        if (v4 == a2) {
          break;
        }
        v4 += 32;
        BOOL v7 = v5 == a3;
        v5 += 32;
      }

      while (!v7);
    }
  }

  else
  {
    uint64_t v8 = (a3 - a2) >> 5;
    uint64_t v9 = (a2 - a1) >> 5;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }

    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[32 * v9];
      do
      {
        __int128 v12 = *((_OWORD *)v11 - 2);
        __int128 v13 = *((_OWORD *)v11 - 1);
        v11 -= 32;
        *(_OWORD *)__int128 v25 = v12;
        *(_OWORD *)&_OWORD v25[16] = v13;
        BOOL v14 = &v11[32 * v3];
        uint64_t v15 = v11;
        do
        {
          __int128 v16 = v14;
          __int128 v17 = *(_OWORD *)v14;
          *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)(v14 + 12);
          *uint64_t v15 = v17;
          uint64_t v18 = a3 - v14;
          v14 += 32 * v3;
          BOOL v19 = __OFSUB__(v3, v18 >> 5);
          uint64_t v21 = v3 - (v18 >> 5);
          char v20 = (v21 < 0) ^ v19;
          __int128 v22 = &a1[32 * v21];
          if (!v20) {
            BOOL v14 = v22;
          }
          uint64_t v15 = v16;
        }

        while (v14 != v11);
        *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)&v25[12];
        *__int128 v16 = *(_OWORD *)v25;
      }

      while (v11 != a1);
    }

    return &a1[32 * ((a3 - a2) >> 5)];
  }

  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,false>( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unsigned int v20 = *(a2 - 4);
        BOOL v19 = (__int128 *)(a2 - 4);
        if (v20 < *v9)
        {
          __int128 v27 = *(_OWORD *)v9;
          *(_OWORD *)uint64_t v9 = *v19;
          __int128 *v19 = v27;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9,  v9 + 4,  a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9,  v9 + 4,  v9 + 8,  (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9,  v9 + 4,  v9 + 8,  (__n128 *)v9 + 3,  (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *>( v9,  a2,  a2,  a3);
            }
            return;
          }

          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)&v9[4 * (v13 >> 1)],  v9,  a2 - 4);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9,  &v9[4 * (v13 >> 1)],  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9 + 1,  v15 - 4,  a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v9 + 2,  &v9[4 * v14 + 4],  a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)v15 - 1,  v15,  &v9[4 * v14 + 4]);
            __int128 v26 = *(_OWORD *)v9;
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v15;
            *(_OWORD *)uint64_t v15 = v26;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(v9 - 4) >= *v9)
          {
            uint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>( v9,  a2);
            goto LABEL_16;
          }

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unsigned int v6 = *(_DWORD *)(v4 + 16);
        if (v6 < *(_DWORD *)v4)
        {
          uint64_t v10 = *(void *)(v4 + 20);
          int v11 = *(_DWORD *)(v4 + 28);
          uint64_t v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7) {
              break;
            }
            unsigned int v8 = *(_DWORD *)(result + v7 - 16);
            v7 -= 16LL;
            if (v6 >= v8)
            {
              uint64_t v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }

          uint64_t v9 = result;
LABEL_10:
          *(_DWORD *)uint64_t v9 = v6;
          *(void *)(v9 + 4) = v10;
          *(_DWORD *)(v9 + 12) = v11;
        }

        uint64_t v2 = v5 + 16;
        v3 += 16LL;
        uint64_t v4 = v5;
      }

      while (v5 + 16 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( __int128 *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      __int128 v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1LL;
    }

    __int128 v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2) {
      return 1LL;
    }
    __int128 v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2LL;
  }

  if (v4 < v3)
  {
    __int128 v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_DWORD *)a1) {
      return 1LL;
    }
    __int128 v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2LL;
  }

  return 0LL;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>( unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  uint64_t v11 = *(void *)(a1 + 1);
  unsigned int v12 = a1[3];
  if (*a1 >= *(a2 - 4))
  {
    __int128 v5 = a1 + 4;
    do
    {
      unsigned int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 4;
    }

    while (v2 >= *v3);
  }

  else
  {
    unsigned int v3 = a1;
    do
    {
      unsigned int v4 = v3[4];
      v3 += 4;
    }

    while (v2 >= v4);
  }

  if (v3 < a2)
  {
    do
    {
      unsigned int v6 = *(a2 - 4);
      a2 -= 4;
    }

    while (v2 < v6);
  }

  while (v3 < a2)
  {
    __int128 v10 = *(_OWORD *)v3;
    *(_OWORD *)unsigned int v3 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v10;
    do
    {
      unsigned int v7 = v3[4];
      v3 += 4;
    }

    while (v2 >= v7);
    do
    {
      unsigned int v8 = *(a2 - 4);
      a2 -= 4;
    }

    while (v2 < v8);
  }

  if (v3 - 4 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
  }
  *(v3 - 4) = v2;
  *(v3 - 1) = v12;
  *(void *)(v3 - 3) = v11;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>( int *a1, _OWORD *a2)
{
  uint64_t v2 = 0LL;
  unsigned int v3 = *a1;
  uint64_t v14 = *(void *)(a1 + 1);
  int v15 = a1[3];
  do
  {
    unsigned int v4 = a1[v2 + 4];
    v2 += 4LL;
  }

  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    do
    {
      unsigned int v7 = *((_DWORD *)a2-- - 4);
    }

    while (v7 >= v3);
  }

  else
  {
    do
      unsigned int v6 = *((_DWORD *)a2-- - 4);
    while (v6 >= v3);
  }

  unint64_t v8 = (unint64_t)&a1[v2];
  if (v5 < (unint64_t)a2)
  {
    __int128 v9 = a2;
    do
    {
      __int128 v10 = *(_OWORD *)v8;
      *(_OWORD *)unint64_t v8 = *v9;
      *__int128 v9 = v10;
      do
      {
        unsigned int v11 = *(_DWORD *)(v8 + 16);
        v8 += 16LL;
      }

      while (v11 < v3);
      do
        unsigned int v12 = *((_DWORD *)v9-- - 4);
      while (v12 >= v3);
    }

    while (v8 < (unint64_t)v9);
  }

  *(_DWORD *)(v8 - 16) = v3;
  *(_DWORD *)(v8 - 4) = v15;
  *(void *)(v8 - 12) = v14;
  return v8 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      unsigned int v6 = (__int128 *)(a2 - 16);
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)a1)
      {
        __int128 v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unsigned int v6 = v7;
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)a1,  (unsigned int *)(a1 + 16),  (unsigned int *)(a2 - 16));
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)a1,  (unsigned int *)(a1 + 16),  (unsigned int *)(a1 + 32),  (_OWORD *)(a2 - 16));
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)a1,  (unsigned int *)(a1 + 16),  (unsigned int *)(a1 + 32),  (__n128 *)(a1 + 48),  (__n128 *)(a2 - 16));
      return 1LL;
    default:
      unint64_t v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (__int128 *)a1,  (unsigned int *)(a1 + 16),  (unsigned int *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    unsigned int v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 < *v8)
    {
      uint64_t v16 = *(void *)(v9 + 4);
      int v17 = *(_DWORD *)(v9 + 12);
      uint64_t v13 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v13 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)(a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(a1 + v13 + 16);
        v13 -= 16LL;
        if (v12 >= v14)
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }

      uint64_t v15 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v15 = v12;
      *(void *)(v15 + 4) = v16;
      *(_DWORD *)(v15 + 12) = v17;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }

    unint64_t v8 = (_DWORD *)v9;
    v10 += 16LL;
    v9 += 16LL;
    if (v9 == a2) {
      return 1LL;
    }
  }

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( __int128 *a1, unsigned int *a2, unsigned int *a3, _OWORD *a4)
{
  if (*(_DWORD *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( __int128 *a1, unsigned int *a2, unsigned int *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( a1,  a2,  a3,  a4).n128_u64[0];
  if (a5->n128_u32[0] < a4->n128_u32[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_DWORD *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }

  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *>( unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 4;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned int v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          __int128 v15 = *(_OWORD *)v14;
          *(_OWORD *)unsigned int v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (uint64_t)a1,  a4,  v9,  a1);
        }

        v14 += 4;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0LL;
        __int128 v24 = *(_OWORD *)a1;
        BOOL v18 = a1;
        do
        {
          BOOL v19 = &v18[4 * v17 + 4];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[4])
          {
            v19 += 4;
            uint64_t v20 = v21;
          }

          *(_OWORD *)BOOL v18 = *(_OWORD *)v19;
          BOOL v18 = v19;
          uint64_t v17 = v20;
        }

        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 4;
        if (v19 == v6)
        {
          *(_OWORD *)BOOL v19 = v24;
        }

        else
        {
          *(_OWORD *)BOOL v19 = *(_OWORD *)v6;
          *(_OWORD *)unsigned int v6 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( (uint64_t)a1,  (uint64_t)(v19 + 4),  a4,  ((char *)(v19 + 4) - (char *)a1) >> 4);
        }
      }

      while (v16-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unsigned int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = *v8;
      }

      else
      {
        unsigned int v10 = *v8;
        unsigned int v11 = v8[4];
        if (*v8 <= v11) {
          unsigned int v10 = v8[4];
        }
        if (*v8 < v11)
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }

      unsigned int v12 = *a4;
      if (v10 >= *a4)
      {
        uint64_t v17 = *(void *)(a4 + 1);
        unsigned int v18 = a4[3];
        do
        {
          uint64_t v13 = a4;
          a4 = v8;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int *)(result + 16 * v14);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v15 = *v8;
            uint64_t v7 = v14;
          }

          else
          {
            unsigned int v15 = *v8;
            unsigned int v16 = v8[4];
            if (*v8 <= v16) {
              unsigned int v15 = v8[4];
            }
            if (*v8 >= v16) {
              uint64_t v7 = v14;
            }
            else {
              v8 += 4;
            }
          }
        }

        while (v15 >= v12);
        *a4 = v12;
        a4[3] = v18;
        *(void *)(a4 + 1) = v17;
      }
    }
  }

  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (_OWORD *)(a2 - 16);
    unsigned int v8 = *(_DWORD *)(a2 - 16);
    if (*(_DWORD *)v6 < v8)
    {
      uint64_t v10 = *(void *)(a2 - 12);
      int v11 = *(_DWORD *)(a2 - 4);
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = v6;
        *uint64_t v9 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }

      while (*(_DWORD *)v6 < v8);
      *(_DWORD *)uint64_t v7 = v8;
      *(void *)((char *)v7 + 4) = v10;
      *((_DWORD *)v7 + 3) = v11;
    }
  }

  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer32>(char **result, void *a2)
{
  unsigned int v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    unint64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unsigned int v8 = *(_DWORD *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      uint64_t v10 = (_DWORD *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        unsigned int v12 = &v10[3 * (v9 >> 1)];
        unsigned int v14 = *v12;
        uint64_t v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32) {
          __n128 result = (char **)memmove(v3, v3 + 32, v2 - (v3 + 32));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(void *)unsigned int v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }

    while (v3 != v2);
  }

  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer32>(char **result, void *a2)
{
  unsigned int v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    unint64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unsigned int v8 = *(_DWORD *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      uint64_t v10 = (_DWORD *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        unsigned int v12 = &v10[3 * (v9 >> 1)];
        unsigned int v14 = *v12;
        uint64_t v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 24);
        if (v2 != v3 + 24) {
          __n128 result = (char **)memmove(v3, v3 + 24, v2 - (v3 + 24));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(void *)unsigned int v3 = *(v10 - 1) + v8;
        v3 += 24;
      }
    }

    while (v3 != v2);
  }

  return result;
}

void adjustSymbolsToMatchSegmentDeltas<Pointer32>(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_11;
      }
      unsigned int v8 = *v2;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      uint64_t v10 = (_DWORD *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        unsigned int v12 = &v10[3 * (v9 >> 1)];
        unsigned int v14 = *v12;
        uint64_t v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_11:
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>( (uint64_t)(v2 + 24),  v3,  (uint64_t)v2);
        uint64_t v3 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        if (v16 != v15)
        {
          do
          {
            uint64_t v17 = v16 - 96;
            unsigned int v18 = (void **)(v16 - 40);
            std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v18);
            uint64_t v16 = v17;
          }

          while (v17 != v3);
        }

        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v3;
      }

      else
      {
        slideSymbolsByOffset<Pointer32>((uint64_t)v2, *(v10 - 1));
        v2 += 24;
        uint64_t v3 = *(void *)(a1 + 8);
      }
    }

    while (v2 != (unsigned int *)v3);
  }

char **adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer32>,Pointer32>(char **result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    unint64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unsigned int v8 = *(_DWORD *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      uint64_t v10 = (_DWORD *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        unsigned int v12 = &v10[3 * (v9 >> 1)];
        unsigned int v14 = *v12;
        uint64_t v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32) {
          __n128 result = (char **)memmove(v3, v3 + 32, v15 - 4);
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(_DWORD *)uint64_t v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }

    while (v3 != v2);
  }

  return result;
}

char *std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned int v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  unsigned int v12 = (void **)(result + 8);
  unsigned int v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned int v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,false>( unint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t)a2 - v9;
    unint64_t v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unsigned int v21 = *((_DWORD *)a2 - 8);
        uint64_t v20 = a2 - 2;
        if (v21 < *(_DWORD *)v9)
        {
          *(_OWORD *)unsigned int v29 = *(_OWORD *)v9;
          *(_OWORD *)&v29[16] = *(_OWORD *)(v9 + 16);
          __int128 v22 = *v20;
          *(_OWORD *)(v9 + 12) = *(__int128 *)((char *)v20 + 12);
          *(_OWORD *)unint64_t v9 = v22;
          *uint64_t v20 = *(_OWORD *)v29;
          *(__int128 *)((char *)v20 + 12) = *(_OWORD *)&v29[12];
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)v9,  (int *)(v9 + 32),  (int *)a2 - 8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)v9,  (__int128 *)(v9 + 32),  (__int128 *)(v9 + 64),  a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (__int128 *)v9,  (__int128 *)(v9 + 32),  (__int128 *)(v9 + 64),  (__int128 *)(v9 + 96),  a2 - 2);
        return;
      default:
        if (v12 > 767)
        {
          if (v11 == 1)
          {
            if ((_OWORD *)v9 != a2) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>( v9,  a2,  a2,  a3);
            }
            return;
          }

          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v9 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)(v9 + 32 * (v13 >> 1)),  (int *)v9,  (int *)a2 - 8);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)v9,  (int *)(v9 + 32 * (v13 >> 1)),  (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)(v9 + 32),  (int *)(v15 - 32),  (int *)a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)(v9 + 64),  (int *)(v9 + 32 + 32 * v14),  (int *)a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)(v15 - 32),  (int *)v15,  (int *)(v9 + 32 + 32 * v14));
            *(_OWORD *)uint64_t v28 = *(_OWORD *)v9;
            *(_OWORD *)&v28[16] = *(_OWORD *)(v9 + 16);
            __int128 v16 = *(_OWORD *)v15;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v15 + 12);
            *(_OWORD *)unint64_t v9 = v16;
            *(_OWORD *)(v15 + 12) = *(_OWORD *)&v28[12];
            *(_OWORD *)unint64_t v15 = *(_OWORD *)v28;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(_DWORD *)(v9 - 32) >= *(_DWORD *)v9)
          {
            unint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>( v9,  a2);
            goto LABEL_16;
          }

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 32;
    if (result + 32 != a2)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unsigned int v6 = *(_DWORD *)(v4 + 32);
        if (v6 < *(_DWORD *)v4)
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(v4 + 36);
          *(_OWORD *)&v10[12] = *(_OWORD *)(v4 + 48);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 44) = *(_OWORD *)(result + v7 + 12);
            if (!v7) {
              break;
            }
            v7 -= 32LL;
            if (v6 >= *(_DWORD *)(v8 - 32))
            {
              uint64_t v9 = result + v7 + 32;
              goto LABEL_10;
            }
          }

          uint64_t v9 = result;
LABEL_10:
          *(_DWORD *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + 4) = *(_OWORD *)v10;
          *(void *)(v9 + 20) = *(void *)&v10[16];
        }

        uint64_t v2 = v5 + 32;
        v3 += 32LL;
        uint64_t v4 = v5;
      }

      while (v5 + 32 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( _OWORD *a1, int *a2, int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      *(_OWORD *)__int128 v16 = *a1;
      __int128 v5 = *a1;
      *(_OWORD *)&v16[16] = a1[1];
      __int128 v6 = *(_OWORD *)(a3 + 3);
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a1 + 12) = v6;
      *(_OWORD *)a3 = v5;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v16[12];
      return 1LL;
    }

    *(_OWORD *)BOOL v19 = *a1;
    __int128 v11 = *a1;
    *(_OWORD *)&v19[16] = a1[1];
    __int128 v12 = *(_OWORD *)(a2 + 3);
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 12) = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v19[12];
    *(_OWORD *)uint64_t v20 = *(_OWORD *)a2;
    __int128 v13 = *(_OWORD *)a2;
    *(_OWORD *)&v20[16] = *((_OWORD *)a2 + 1);
    __int128 v14 = *(_OWORD *)(a3 + 3);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v14;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v20[12];
    return 2LL;
  }

  if (v4 < v3)
  {
    *(_OWORD *)unint64_t v17 = *(_OWORD *)a2;
    __int128 v7 = *(_OWORD *)a2;
    *(_OWORD *)&v17[16] = *((_OWORD *)a2 + 1);
    __int128 v8 = *(_OWORD *)(a3 + 3);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v8;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v17[12];
    *(_OWORD *)char v18 = *a1;
    __int128 v9 = *a1;
    *(_OWORD *)&v18[16] = a1[1];
    __int128 v10 = *(_OWORD *)(a2 + 3);
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 12) = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v18[12];
    return 2LL;
  }

  return 0LL;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>( unint64_t a1, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  *(_OWORD *)__int128 v13 = *(_OWORD *)(a1 + 4);
  *(_OWORD *)&v13[12] = *(_OWORD *)(a1 + 16);
  if (*(_DWORD *)a1 >= *((_DWORD *)a2 - 8))
  {
    unint64_t v5 = a1 + 32;
    do
    {
      unint64_t v3 = v5;
      v5 += 32LL;
    }

    while (v2 >= *(_DWORD *)v3);
  }

  else
  {
    unint64_t v3 = a1;
    do
    {
      unsigned int v4 = *(_DWORD *)(v3 + 32);
      v3 += 32LL;
    }

    while (v2 >= v4);
  }

  if (v3 < (unint64_t)a2)
  {
    do
    {
      unsigned int v6 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }

    while (v2 < v6);
  }

  while (v3 < (unint64_t)a2)
  {
    *(_OWORD *)__int128 v12 = *(_OWORD *)v3;
    *(_OWORD *)&v12[16] = *(_OWORD *)(v3 + 16);
    __int128 v7 = *a2;
    *(_OWORD *)(v3 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)unint64_t v3 = v7;
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v12[12];
    *a2 = *(_OWORD *)v12;
    do
    {
      unsigned int v8 = *(_DWORD *)(v3 + 32);
      v3 += 32LL;
    }

    while (v2 >= v8);
    do
    {
      unsigned int v9 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }

    while (v2 < v9);
  }

  if (v3 - 32 != a1)
  {
    __int128 v10 = *(_OWORD *)(v3 - 32);
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(v3 - 20);
    *(_OWORD *)a1 = v10;
  }

  *(_DWORD *)(v3 - 32) = v2;
  *(void *)(v3 - 12) = *(void *)&v13[16];
  *(_OWORD *)(v3 - 2_Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v13;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>( int *a1, _OWORD *a2)
{
  uint64_t v2 = 0LL;
  unsigned int v3 = *a1;
  *(_OWORD *)unint64_t v17 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v17[12] = *((_OWORD *)a1 + 1);
  do
  {
    unsigned int v4 = a1[v2 + 8];
    v2 += 8LL;
  }

  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 8)
  {
    do
    {
      unsigned int v7 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }

    while (v7 >= v3);
  }

  else
  {
    do
    {
      unsigned int v6 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }

    while (v6 >= v3);
  }

  unint64_t v8 = (unint64_t)&a1[v2];
  if (v5 < (unint64_t)a2)
  {
    unsigned int v9 = a2;
    do
    {
      *(_OWORD *)__int128 v16 = *(_OWORD *)v8;
      __int128 v10 = *(_OWORD *)v8;
      *(_OWORD *)&v16[16] = *(_OWORD *)(v8 + 16);
      __int128 v11 = *(_OWORD *)((char *)v9 + 12);
      *(_OWORD *)unint64_t v8 = *v9;
      *(_OWORD *)(v8 + 12) = v11;
      *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v16[12];
      *unsigned int v9 = v10;
      do
      {
        unsigned int v12 = *(_DWORD *)(v8 + 32);
        v8 += 32LL;
      }

      while (v12 < v3);
      do
      {
        unsigned int v13 = *((_DWORD *)v9 - 8);
        v9 -= 2;
      }

      while (v13 >= v3);
    }

    while (v8 < (unint64_t)v9);
  }

  if ((int *)(v8 - 32) != a1)
  {
    __int128 v14 = *(_OWORD *)(v8 - 32);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v8 - 20);
    *(_OWORD *)a1 = v14;
  }

  *(_DWORD *)(v8 - 32) = v3;
  *(void *)(v8 - 12) = *(void *)&v17[16];
  *(_OWORD *)(v8 - 2_Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v17;
  return v8 - 32;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      unsigned int v6 = (_OWORD *)(a2 - 32);
      if (*(_DWORD *)(a2 - 32) < *(_DWORD *)a1)
      {
        *(_OWORD *)unint64_t v17 = *(_OWORD *)a1;
        __int128 v7 = *(_OWORD *)a1;
        *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 16);
        __int128 v8 = *(_OWORD *)(a2 - 20);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 12) = v8;
        *unsigned int v6 = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v17[12];
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)a1,  (int *)(a1 + 32),  (int *)(a2 - 32));
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)a1,  (__int128 *)(a1 + 32),  (__int128 *)(a1 + 64),  (__int128 *)(a2 - 32));
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (__int128 *)a1,  (__int128 *)(a1 + 32),  (__int128 *)(a1 + 64),  (__int128 *)(a1 + 96),  (__int128 *)(a2 - 32));
      return 1LL;
    default:
      unsigned int v9 = (_DWORD *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( (_OWORD *)a1,  (int *)(a1 + 32),  (int *)(a1 + 64));
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    unsigned int v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *v9)
    {
      *(_OWORD *)char v18 = *(_OWORD *)(v10 + 4);
      *(_OWORD *)&v18[12] = *(_OWORD *)(v10 + 16);
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 96) = *(_OWORD *)(a1 + v14 + 64);
        *(_OWORD *)(v15 + 10_Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)(a1 + v14 + 76);
        if (v14 == -64) {
          break;
        }
        v14 -= 32LL;
        if (v13 >= *(_DWORD *)(v15 + 32))
        {
          uint64_t v16 = a1 + v14 + 96;
          goto LABEL_12;
        }
      }

      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v13;
      *(_OWORD *)(v16 + 4) = *(_OWORD *)v18;
      *(void *)(v16 + 20) = *(void *)&v18[16];
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }

    unsigned int v9 = (_DWORD *)v10;
    v11 += 32LL;
    v10 += 32LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( _OWORD *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_OWORD *)uint64_t v15 = *a3;
    __int128 v9 = *a3;
    *(_OWORD *)&v15[16] = a3[1];
    __int128 v10 = *(__int128 *)((char *)a4 + 12);
    *a3 = *a4;
    *(__int128 *)((char *)a3 + 12) = v10;
    *a4 = v9;
    __n128 result = *(__n128 *)&v15[12];
    *(__int128 *)((char *)a4 + 12) = *(_OWORD *)&v15[12];
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_OWORD *)uint64_t v16 = *a2;
      __int128 v11 = *a2;
      *(_OWORD *)&v16[16] = a2[1];
      __int128 v12 = *(__int128 *)((char *)a3 + 12);
      *a2 = *a3;
      *(__int128 *)((char *)a2 + 12) = v12;
      *a3 = v11;
      __n128 result = *(__n128 *)&v16[12];
      *(__int128 *)((char *)a3 + 12) = *(_OWORD *)&v16[12];
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_OWORD *)unint64_t v17 = *a1;
        __int128 v13 = *a1;
        *(_OWORD *)&v17[16] = a1[1];
        __int128 v14 = *(__int128 *)((char *)a2 + 12);
        *a1 = *a2;
        *(_OWORD *)((char *)a1 + 12) = v14;
        *a2 = v13;
        __n128 result = *(__n128 *)&v17[12];
        *(__int128 *)((char *)a2 + 12) = *(_OWORD *)&v17[12];
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( __int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( a1,  a2,  a3,  a4).n128_u64[0];
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *(_OWORD *)BOOL v19 = *a4;
    __int128 v11 = *a4;
    *(_OWORD *)&v19[16] = a4[1];
    __int128 v12 = *(__int128 *)((char *)a5 + 12);
    *a4 = *a5;
    *(__int128 *)((char *)a4 + 12) = v12;
    *a5 = v11;
    __n128 result = *(__n128 *)&v19[12];
    *(__int128 *)((char *)a5 + 12) = *(_OWORD *)&v19[12];
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(_OWORD *)uint64_t v20 = *a3;
      __int128 v13 = *a3;
      *(_OWORD *)&v20[16] = a3[1];
      __int128 v14 = *(__int128 *)((char *)a4 + 12);
      *a3 = *a4;
      *(__int128 *)((char *)a3 + 12) = v14;
      *a4 = v13;
      __n128 result = *(__n128 *)&v20[12];
      *(__int128 *)((char *)a4 + 12) = *(_OWORD *)&v20[12];
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_OWORD *)unsigned int v21 = *a2;
        __int128 v15 = *a2;
        *(_OWORD *)&v21[16] = a2[1];
        __int128 v16 = *(__int128 *)((char *)a3 + 12);
        *a2 = *a3;
        *(__int128 *)((char *)a2 + 12) = v16;
        *a3 = v15;
        __n128 result = *(__n128 *)&v21[12];
        *(__int128 *)((char *)a3 + 12) = *(_OWORD *)&v21[12];
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_OWORD *)__int128 v22 = *a1;
          __int128 v17 = *a1;
          *(_OWORD *)&v22[16] = a1[1];
          __int128 v18 = *(__int128 *)((char *)a2 + 12);
          *a1 = *a2;
          *(__int128 *)((char *)a1 + 12) = v18;
          *a2 = v17;
          __n128 result = *(__n128 *)&v22[12];
          *(__int128 *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
        }
      }
    }
  }

  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>( uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  if ((_OWORD *)a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __int128 v12 = (unsigned int *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( a1,  a4,  v9,  v12);
        v12 -= 8;
        --v11;
      }

      while (v11);
    }

    __int128 v13 = v6;
    if (v6 != a3)
    {
      __int128 v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          *(_OWORD *)unsigned int v27 = *v14;
          __int128 v15 = *v14;
          *(_OWORD *)&v27[16] = v14[1];
          __int128 v16 = *(_OWORD *)(a1 + 12);
          *__int128 v14 = *(_OWORD *)a1;
          *(_OWORD *)((char *)v14 + 12) = v16;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)&v27[12];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( a1,  a4,  v9,  (unsigned int *)a1);
        }

        v14 += 2;
      }

      while (v14 != a3);
      __int128 v13 = a3;
    }

    if (v8 >= 33)
    {
      uint64_t v17 = (unint64_t)v8 >> 5;
      do
      {
        uint64_t v18 = 0LL;
        *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
        *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 16);
        BOOL v19 = (_OWORD *)a1;
        do
        {
          uint64_t v20 = (uint64_t)&v19[2 * v18 + 2];
          uint64_t v21 = (2 * v18) | 1;
          uint64_t v22 = 2 * v18 + 2;
          if (v22 < v17 && *(_DWORD *)v20 < *(_DWORD *)(v20 + 32))
          {
            v20 += 32LL;
            uint64_t v21 = v22;
          }

          __int128 v23 = *(_OWORD *)v20;
          *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(v20 + 12);
          _OWORD *v19 = v23;
          BOOL v19 = (_OWORD *)v20;
          uint64_t v18 = v21;
        }

        while (v21 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        v6 -= 2;
        if ((_OWORD *)v20 == v6)
        {
          *(_OWORD *)(v20 + 12) = *(_OWORD *)&v28[12];
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v28;
        }

        else
        {
          __int128 v24 = *v6;
          *(_OWORD *)(v20 + 12) = *(_OWORD *)((char *)v6 + 12);
          *(_OWORD *)uint64_t v20 = v24;
          *unsigned int v6 = *(_OWORD *)v28;
          *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)&v28[12];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( a1,  v20 + 32,  a4,  (v20 + 32 - a1) >> 5);
        }
      }

      while (v17-- > 2);
    }

    return v13;
  }

  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - a1;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (unsigned int *)(a1 + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = *v8;
      }

      else
      {
        unsigned int v10 = *v8;
        unsigned int v11 = v8[8];
        if (*v8 <= v11) {
          unsigned int v10 = v8[8];
        }
        if (*v8 < v11)
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }

      unsigned int v12 = *a4;
      if (v10 >= *a4)
      {
        *(_OWORD *)BOOL v19 = *(_OWORD *)(a4 + 1);
        *(_OWORD *)&v19[12] = *((_OWORD *)a4 + 1);
        do
        {
          __int128 v13 = a4;
          a4 = v8;
          __int128 v14 = *(_OWORD *)v8;
          *(_OWORD *)(v13 + 3) = *(_OWORD *)(v8 + 3);
          *(_OWORD *)__int128 v13 = v14;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int *)(a1 + 32 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v16 = *v8;
            uint64_t v7 = v15;
          }

          else
          {
            unsigned int v16 = *v8;
            unsigned int v17 = v8[8];
            if (*v8 <= v17) {
              unsigned int v16 = v8[8];
            }
            if (*v8 >= v17) {
              uint64_t v7 = v15;
            }
            else {
              v8 += 8;
            }
          }
        }

        while (v16 >= v12);
        *a4 = v12;
        __n128 result = *(__n128 *)v19;
        *(void *)(a4 + 5) = *(void *)&v19[16];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)v19;
      }
    }
  }

  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(a1 + 32 * (v4 >> 1));
    uint64_t v7 = (_OWORD *)(a2 - 32);
    unsigned int v8 = *(_DWORD *)(a2 - 32);
    if (*(_DWORD *)v6 < v8)
    {
      *(_OWORD *)unsigned int v12 = *(_OWORD *)(a2 - 28);
      *(_OWORD *)&v12[12] = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = v6;
        __int128 v10 = *v6;
        *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v6 + 12);
        *uint64_t v9 = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(a1 + 32 * v5);
      }

      while (*(_DWORD *)v6 < v8);
      *(_DWORD *)uint64_t v7 = v8;
      __n128 result = *(__n128 *)v12;
      *(_OWORD *)((char *)v7 + 4) = *(_OWORD *)v12;
      *(void *)((char *)v7 + 20) = *(void *)&v12[16];
    }
  }

  return result;
}

BOOL _do_traw_segments_overlap(uint64_t a1)
{
  unint64_t v1 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)a1 == v2) {
    return 0LL;
  }
  __int128 v13 = 0LL;
  __int128 v14 = 0LL;
  uint64_t v15 = 0LL;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( &v13,  v1,  v2,  (v2 - (uint64_t)v1) >> 5);
  unint64_t v3 = 126 - 2 * __clz((v14 - v13) >> 5);
  if (v14 == v13) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,false>( (unint64_t)v13,  (__int128 *)v14,  (uint64_t)&v16,  v4,  1);
  int64_t v5 = (v14 - v13) >> 5;
  uint64_t v6 = 1LL;
  uint64_t v7 = v13;
  while (v5 != v6)
  {
    unint64_t v8 = *((void *)v7 + 1) + *(void *)v7;
    unint64_t v9 = *((void *)v7 + 4);
    v7 += 32;
    ++v6;
    if (v8 > v9)
    {
      BOOL v10 = v6 - 2 < (unint64_t)(v5 - 1);
      goto LABEL_11;
    }
  }

  BOOL v10 = 0LL;
  uint64_t v11 = 0LL;
  if (!v13) {
    return v11;
  }
LABEL_11:
  __int128 v14 = v13;
  operator delete(v13);
  return v10;
}

void sub_18602CB30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t intern_symbol_names_and_path<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( uint64_t a1, CSCppMMapStringTable *a2, DemanglingUtilities::CSCppReusableDemanglingBuffer *a3, void *a4, void *a5, int a6)
{
  unsigned int v12 = atomic_load((unsigned int *)(a1 + 20));
  if ((v12 & 0x400000) != 0)
  {
    __int128 v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(a1);
    __int128 v14 = "";
  }

  else
  {
    __int128 v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a1);
    __int128 v14 = *(const char **)(a1 + 88);
  }

  *(void *)&__int128 v36 = v14;
  *((void *)&v36 + 1) = v13;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>( a4,  &v36);
  if (result)
  {
    unsigned int v16 = *(_DWORD *)(result + 32);
    LODWORD(v17) = *(_DWORD *)(result + 36);
    goto LABEL_30;
  }

  unsigned int v16 = CSCppMMapStringTable::intern_with_prefix(a2, v14, v13);
  uint64_t v18 = (const char *)atomic_load((unsigned int *)(a1 + 20));
  if (DemanglingUtilities::is_simple_mangled_name((DemanglingUtilities *)v13, v18))
  {
    BOOL v19 = (const char *)atomic_load((unsigned int *)(a1 + 20));
    uint64_t v20 = DemanglingUtilities::simple_demangle(v13, v19);
  }

  else
  {
    if (a6)
    {
      uint64_t v21 = DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(a3);
      uint64_t v22 = CSCppAddressSet::sort(a3);
      uint64_t v23 = a1;
      uint64_t v24 = v21;
    }

    else
    {
      unsigned int v25 = atomic_load((unsigned int *)(a1 + 20));
      if ((v25 & 0x20000) == 0) {
        goto LABEL_17;
      }
      uint64_t v23 = a1;
      uint64_t v24 = 0LL;
      uint64_t v22 = 0LL;
    }

    uint64_t v20 = (const char *)TRawSymbol<Pointer32>::_resolve_name(v23, v24, v22);
  }

  __int128 v26 = (char *)v20;
  if (v20)
  {
    if (v20 == v13 + 1 || v20 == v13)
    {
      BOOL v27 = v20 != v13;
      unsigned int v28 = atomic_load((unsigned int *)(a1 + 20));
      if ((v28 & 0x80000) != 0)
      {
        int v31 = 0;
      }

      else
      {
        __int16 v29 = atomic_load((unsigned int *)(a1 + 20));
        if (v29 < 0)
        {
          int v31 = 1;
        }

        else
        {
          unsigned int v30 = atomic_load((unsigned int *)(a1 + 20));
          int v31 = HIWORD(v30) & 1;
        }
      }

      char is_objc_method = TRawSymbol<Pointer32>::is_objc_method(a1);
      if (v26 == v13) {
        int v33 = v31;
      }
      else {
        int v33 = 1;
      }
      if ((is_objc_method & 1) != 0) {
        int v33 = v27;
      }
      uint64_t v17 = v16 + v33;
    }

    else
    {
      uint64_t v17 = CSCppMMapStringTable::intern_with_prefix(a2, 0LL, v20);
    }

    goto LABEL_29;
  }

uint64_t write_symbols_and_inlined_functions<Pointer32>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  int v45 = 0;
  uint64_t v44 = *a5;
  __int128 v43 = 0u;
  memset(v42, 0, sizeof(v42));
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    BOOL v10 = a5;
    do
    {
      if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v8, HIDWORD(*(void *)v8)))
      {
        int v12 = children_index_for_symbol<Pointer32>(v8, &v45, a6);
        if (*(void *)(v8 + 64) != *(void *)(v8 + 56))
        {
          uint64_t v41 = v8;
          std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(v42, &v41);
        }

        if (*v10 == v10[1])
        {
          int v13 = *(_DWORD *)v8;
        }

        else
        {
          advance_delta_iterator_to_containing_range<Pointer32>((unsigned int *)v8, (uint64_t)v10, &v44);
          int v13 = *(_DWORD *)v8 + *((_DWORD *)v44 + 4);
        }

        int v14 = *(_DWORD *)(v8 + 4);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)(a2 + 4) = v14;
        TRawSymbol<Pointer32>::is_objc_method(v8);
        unsigned int v15 = atomic_load((unsigned int *)(v8 + 20));
        *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v15;
        *(_DWORD *)(a2 + 20) = v12;
        *(void *)(a2 + 12) = *(void *)(v8 + 8);
        a2 += 24LL;
      }

      v8 += 96LL;
    }

    while (v8 != v7);
    uint64_t v16 = *((void *)&v43 + 1);
    if (*((void *)&v43 + 1))
    {
      unint64_t v17 = v43;
      unint64_t v35 = v10;
      do
      {
        uint64_t v18 = *(void *)(*(void *)(*((void *)&v42[0] + 1) + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v17 & 0x1FF));
        uint64_t v44 = *v10;
        uint64_t v19 = *(void *)(v18 + 64) - *(void *)(v18 + 56);
        if (v19)
        {
          unint64_t v20 = 0LL;
          unint64_t v21 = v19 / 96;
          else {
            uint64_t v22 = v19 / 96;
          }
          uint64_t v38 = v22;
          uint64_t v23 = 96LL;
          uint64_t v24 = a3;
          do
          {
            uint64_t v25 = *(void *)(v18 + 56);
            __int128 v26 = (unsigned int *)(v25 + 96 * v20);
            if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v26, HIDWORD(*(void *)v26)))
            {
              int v27 = children_index_for_symbol<Pointer32>(v25 + 96 * v20, &v45, a6);
              if (*(void *)(v25 + 96 * v20 + 64) != *(void *)(v25 + 96 * v20 + 56))
              {
                uint64_t v41 = v25 + 96 * v20;
                std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(v42, &v41);
              }

              uint64_t v40 = v24;
              if (a6)
              {
                uint64_t v28 = v23;
                unint64_t v29 = v20;
                do
                {
                  BOOL v30 = ++v29 >= v21;
                  if (v29 >= v21) {
                    break;
                  }
                  BOOL v31 = CSCppAddressSet::_intersects_range( a6,  *(void *)(*(void *)(v18 + 56) + v28),  HIDWORD(*(void *)(*(void *)(v18 + 56) + v28)));
                  v28 += 96LL;
                }

                while (!v31);
              }

              else
              {
                BOOL v30 = v20 + 1 >= v21;
              }

              BOOL v10 = v35;
              if (*v35 == v35[1])
              {
                LODWORD(v33) = 0;
                uint64_t v32 = v40;
              }

              else
              {
                advance_delta_iterator_to_containing_range<Pointer32>(v26, (uint64_t)v35, &v44);
                uint64_t v32 = v40;
                unint64_t v33 = v44[2];
              }

              CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer32>(v32, v33, a7, (uint64_t)v26, a4, v27, v30);
              uint64_t v24 = v32 + 36;
            }

            ++v20;
            v23 += 96LL;
          }

          while (v20 != v38);
          uint64_t v16 = *((void *)&v43 + 1);
          unint64_t v17 = v43;
        }

        else
        {
          uint64_t v24 = a3;
        }

        --v16;
        *(void *)&__int128 v43 = ++v17;
        *((void *)&v43 + 1) = v16;
        a3 = v24;
        if (v17 >= 0x400)
        {
          operator delete(**((void ***)&v42[0] + 1));
          unint64_t v17 = v43 - 512;
          *((void *)&v42[0] + 1) += 8LL;
          *(void *)&__int128 v43 = v43 - 512;
          uint64_t v16 = *((void *)&v43 + 1);
        }
      }

      while (v16);
    }
  }

  return std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](v42);
}

void sub_18602D054( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void MMapArchiveNameBuffer::MMapArchiveNameBuffer(MMapArchiveNameBuffer *this)
{
  uint64_t v2 = 0LL;
  *((_OWORD *)this + 1) = 0u;
  unint64_t v3 = (void *)((char *)this + 16);
  *(void *)((char *)this + 29) = 0LL;
  *(_OWORD *)this = 0u;
  int v4 = 32;
  do
  {
    int64_t v5 = operator new[](0x1000uLL);
    uint64_t v6 = v5;
    if ((unint64_t)v2 >= *v3)
    {
      uint64_t v7 = ((uint64_t)v2 - *(void *)this) >> 3;
      uint64_t v8 = *v3 - *(void *)this;
      uint64_t v9 = v8 >> 2;
      else {
        unint64_t v10 = v9;
      }
      void v13[4] = v3;
      if (v10) {
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v10);
      }
      else {
        uint64_t v11 = 0LL;
      }
      int v12 = &v11[8 * v7];
      v13[0] = v11;
      v13[1] = v12;
      v13[3] = &v11[8 * v10];
      *(void *)int v12 = v6;
      v13[2] = v12 + 8;
      std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer((uint64_t *)this, v13);
      uint64_t v2 = (void *)*((void *)this + 1);
      std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)v13);
    }

    else
    {
      *v2++ = v5;
      *((void *)this + 1) = v2;
    }

    *((void *)this + 1) = v2;
    --v4;
  }

  while (v4);
}

void sub_18602D19C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
}

uint64_t std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0LL;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8LL;
      uint64_t v8 = v9;
    }

    while (a3 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100]( uint64_t a1)
{
  unint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    unint64_t v3 = *v1;
    const void *v1 = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    ++v1;
  }

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void **)(i - 8);
    *(void *)(i - _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    if (v5) {
      operator delete[](v5);
    }
  }

void std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<char []>>::__clear[abi:ne180100](v2);
    operator delete(**a1);
  }

void std::vector<std::unique_ptr<char []>>::__clear[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = (void *)a1[1];
  while (v3 != v2)
  {
    uint64_t v5 = (void *)*--v3;
    int v4 = v5;
    void *v3 = 0LL;
    if (v5) {
      operator delete[](v4);
    }
  }

  a1[1] = v2;
}

uint64_t intern_string<std::unordered_map<unsigned long,unsigned int>>( const char *a1, CSCppMMapStringTable *a2, void *a3)
{
  uint64_t v9 = a1;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>( a3,  (unint64_t *)&v9);
  if (v6) {
    return *((unsigned int *)v6 + 6);
  }
  unsigned int v8 = CSCppMMapStringTable::intern_with_prefix(a2, 0LL, a1);
  uint64_t v9 = a1;
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned int>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned int>>>::__emplace_unique_key_args<unsigned long,unsigned long,unsigned int &>( (uint64_t)a3,  (unint64_t *)&v9,  &v9,  &v8);
  return v8;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned int>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned int>>>::__emplace_unique_key_args<unsigned long,unsigned long,unsigned int &>( uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          int v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  int v12 = operator new(0x20uLL);
  *int v12 = 0LL;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *int v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }

  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_18602D6EC(_Unwind_Exception *a1)
{
}

uint64_t CSCppMMapStringTable::intern_with_prefix(CSCppMMapStringTable *this, const char *a2, const char *a3)
{
  else {
    unint64_t v4 = "<unknown>";
  }
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = "";
  }
  unsigned int v6 = strlen(v5);
  unsigned int v7 = strlen(v4);
  unint64_t v8 = (char *)this + 8;
  uint64_t v9 = *((unsigned int *)this + 10);
  MMapArchiveNameBuffer::stream_string_parts<std::string_view,std::string_view>((uint64_t)v8, v5, v6, v4, v7);
  return v9;
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = a2[1];
  unint64_t v4 = (*a2 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = (*a2 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
    if (v4 >= *(void *)&v2) {
      uint64_t v6 = v4 % *(void *)&v2;
    }
  }

  else
  {
    uint64_t v6 = v4 & (*(void *)&v2 - 1LL);
  }

  unsigned int v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0LL;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }

      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }

        else
        {
          v9 &= *(void *)&v2 - 1LL;
        }

        if (v9 != v6) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t MMapArchiveNameBuffer::stream_string_parts<std::string_view,std::string_view>( uint64_t a1, const char *a2, unsigned int a3, const char *a4, unsigned int a5)
{
  return MMapArchiveNameBuffer::_stream_string_with_length(a1, "", 1u);
}

uint64_t MMapArchiveNameBuffer::_stream_string_with_length(uint64_t this, const char *a2, unsigned int a3)
{
  if (!*(_BYTE *)(this + 36))
  {
    unsigned int v3 = a3;
    unint64_t v4 = a2;
    uint64_t v5 = this;
    uint64_t v6 = *(unsigned int *)(this + 28);
    size_t v7 = 4096 - (int)v6 >= a3 ? a3 : (4096 - v6);
    memcpy((void *)(*(void *)(*(void *)this + 8LL * *(unsigned int *)(this + 24)) + v6), a2, v7);
    this = MMapArchiveNameBuffer::_updateBufferIndexes(v5, v7);
    unsigned int v8 = v3 - v7;
    if (v3 != (_DWORD)v7)
    {
      do
      {
        if (*(_BYTE *)(v5 + 36)) {
          break;
        }
        v4 += v3 - v8;
        uint64_t v9 = *(unsigned int *)(v5 + 28);
        size_t v10 = 4096 - (int)v9 >= v8 ? v8 : (4096 - v9);
        memcpy((void *)(*(void *)(*(void *)v5 + 8LL * *(unsigned int *)(v5 + 24)) + v9), v4, v10);
        this = MMapArchiveNameBuffer::_updateBufferIndexes(v5, v10);
        unsigned int v3 = v8;
        v8 -= v10;
      }

      while (v8);
    }
  }

  return this;
}

uint64_t MMapArchiveNameBuffer::_updateBufferIndexes(uint64_t this, int a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 28) += a2;
  if (__CFADD__(v3, a2))
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Mmap string table has reached its maximum size of 4G. Mmap archive will not be created\n",  (uint8_t *)v17,  2u);
    }

    this = fwrite( "Mmap string table has reached its maximum size of 4G. Mmap archive will not be created\n",  0x57uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
    *(_BYTE *)(v2 + 36) = 1;
  }

  else if (!*(_BYTE *)(this + 36))
  {
    *(_DWORD *)(this + 32) = v3 + a2;
  }

  unsigned int v4 = *(_DWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 28) == 4096) {
    *(void *)(v2 + 24) = ++v4;
  }
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)v2;
  uint64_t v6 = *(void **)(v2 + 8);
  if (v4 == ((uint64_t)v6 - *(void *)v2) >> 3)
  {
    unsigned int v8 = operator new[](0x1000uLL);
    this = v2 + 16;
    unint64_t v9 = *(void *)(v2 + 16);
    if ((unint64_t)v6 >= v9)
    {
      v17[4] = v2 + 16;
      uint64_t v11 = v9 - v7;
      uint64_t v12 = v11 >> 2;
      else {
        unint64_t v13 = v12;
      }
      float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(this, v13);
      float v15 = &v14[8 * v5];
      v17[0] = v14;
      v17[1] = v15;
      v17[3] = &v14[8 * v16];
      *(void *)float v15 = v8;
      v17[2] = v15 + 8;
      std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer((uint64_t *)v2, v17);
      size_t v10 = *(void **)(v2 + 8);
      this = std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)v17);
    }

    else
    {
      *uint64_t v6 = v8;
      size_t v10 = v6 + 1;
      *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
    }

    *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
  }

  return this;
}

void sub_18602DAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>( uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a2[1];
  unint64_t v9 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v4 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
    }

    else
    {
      uint64_t v4 = v9 & (v10 - 1);
    }

    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == v8) {
            return i;
          }
        }

        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }

          else
          {
            v14 &= v10 - 1;
          }

          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0LL;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
      else {
        uint64_t v4 = v9;
      }
    }

    else
    {
      uint64_t v4 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }

    else
    {
      v24 &= v10 - 1;
    }

    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }

void sub_18602DD18(_Unwind_Exception *a1)
{
}

uint64_t recursive_intern_inlined_function_names_with_name_cache<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( uint64_t a1, CSCppMMapStringTable *a2, uint64_t a3, DemanglingUtilities::CSCppReusableDemanglingBuffer *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v7 = *(void **)(a1 + 56);
  unint64_t v8 = *(void **)(a1 + 64);
  if (v7 == v8) {
    return 0LL;
  }
  uint64_t v15 = 0LL;
  do
  {
    if (!a3 || CSCppAddressSet::_intersects_range(a3, *v7, HIDWORD(*v7)))
    {
      intern_symbol_names_and_path<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( (uint64_t)v7,  a2,  a4,  a5,  a6,  a7);
      uint64_t v15 = v15
          + recursive_intern_inlined_function_names_with_name_cache<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( v7,  a2,  a3,  a4,  a5,  a6,  a7)
          + 1;
    }

    v7 += 12;
  }

  while (v7 != v8);
  return v15;
}

uint64_t children_index_for_symbol<Pointer32>(uint64_t a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(unint64_t **)(a1 + 56);
    uint64_t v5 = *(unint64_t **)(a1 + 64);
    if (v4 == v5)
    {
      int v7 = 0;
LABEL_10:
      unint64_t v9 = &CSCppMMapSymbol::kNoChildren;
      goto LABEL_11;
    }

    int v7 = 0;
    do
    {
      unint64_t v8 = *v4;
      v4 += 12;
      v7 += CSCppAddressSet::_intersects_range(a3, v8, HIDWORD(v8));
    }

    while (v4 != v5);
  }

  else
  {
    int v7 = -1431655765 * ((*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 5);
  }

  unint64_t v9 = a2;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = *v9;
  *a2 += v7;
  return result;
}

unsigned int *advance_delta_iterator_to_containing_range<Pointer32>( unsigned int *result, uint64_t a2, unint64_t **a3)
{
  int v3 = result;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *result;
  uint64_t v5 = *a3;
  unint64_t v6 = *(void *)(a2 + 8);
  while (*v5 > v4 || v5[1] + *v5 < result[1] + v4)
  {
    v5 += 3;
    *a3 = v5;
    if ((unint64_t)v5 >= v6)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        unsigned int v7 = atomic_load(v3 + 5);
        if ((v7 & 0x1C000) != 0) {
          unint64_t v8 = (const char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v3, 0LL, 0LL);
        }
        else {
          unint64_t v8 = "UNNAMED";
        }
        uint64_t v9 = *v3;
        uint64_t v10 = v3[1];
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v15 = v8;
        __int16 v16 = 2048;
        uint64_t v17 = v9;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n",  buf,  0x20u);
      }

      uint8x8_t v11 = (FILE *)*MEMORY[0x1895F89D0];
      unsigned int v12 = atomic_load(v3 + 5);
      if ((v12 & 0x1C000) != 0) {
        unint64_t v13 = (const char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v3, 0LL, 0LL);
      }
      else {
        unint64_t v13 = "UNNAMED";
      }
      return (unsigned int *)fprintf( v11,  "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n",  v13,  *v3,  v3[1]);
    }
  }

  return result;
}

void std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back( void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::__add_back_capacity( void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18602E36C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer32>( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v11 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a4 + a2;
  *(_DWORD *)(a1 + 4) = v11;
  TRawSymbol<Pointer32>::is_objc_method(a4);
  uint64_t v12 = (unsigned int *)(a4 + 20);
  unsigned int v13 = atomic_load((unsigned int *)(a4 + 20));
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v13;
  *(_DWORD *)(a1 + 20) = a6;
  *(void *)(a1 + 12) = *(void *)(a4 + 8);
  if (a7) {
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v13 | 0x40000000;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 16);
  int v14 = atomic_load(v12);
  if (*(void *)(a4 + 40)) {
    BOOL v15 = v14 < 0;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = *(_DWORD *)(a4 + 48);
  if (!v15) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
  int v17 = atomic_load(v12);
  if (*(void *)(a4 + 40)) {
    BOOL v18 = v17 < 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = *(_DWORD *)(a4 + 52);
  if (!v18) {
    int v19 = 0;
  }
  *(_DWORD *)(a1 + 32) = v19;
  return a1;
}

uint64_t std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100]( void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    unint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v20 = *(a2 - 1);
        uint64_t v21 = *v9;
        uint64_t result = strcmp( (const char *)(*a3 + *(unsigned int *)(v20 + 12)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *uint64_t v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          BOOL v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *BOOL v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if ((strcmp( (const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 12)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 12))) & 0x80000000) == 0)
          {
            uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( v9,  a2,  a3);
            uint64_t v9 = (uint64_t *)result;
            goto LABEL_17;
          }

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    unint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = *a3;
      unint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        unint64_t v8 = v5;
        uint64_t v11 = (const char *)(v7 + *(unsigned int *)(v9 + 12));
        uint64_t result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 12)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v12 = v6;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
            if (!v12) {
              break;
            }
            uint64_t v10 = *(uint64_t *)((char *)v4 + v12 - 8);
            uint64_t result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 12)));
            v12 -= 8LL;
            if ((result & 0x80000000) == 0)
            {
              unint64_t v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }

          unint64_t v13 = v4;
LABEL_10:
          *unint64_t v13 = v9;
        }

        unint64_t v5 = v8 + 1;
        v6 += 8LL;
      }

      while (v8 + 1 != a2);
    }
  }

  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( void *result, void *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    unint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = *a3;
      do
      {
        uint64_t v8 = *v4;
        uint64_t v7 = v4[1];
        unint64_t v4 = v5;
        uint64_t v9 = (const char *)(v6 + *(unsigned int *)(v7 + 12));
        uint64_t result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 12)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v10 = v4;
          do
          {
            *uint64_t v10 = v8;
            uint64_t v8 = *(v10 - 2);
            uint64_t result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 12)));
            --v10;
          }

          while ((result & 0x80000000) != 0);
          *uint64_t v10 = v7;
        }

        unint64_t v5 = v4 + 1;
      }

      while (v4 + 1 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a1;
  uint64_t v9 = *a4;
  uint64_t v10 = (const char *)(*a4 + *(unsigned int *)(*a2 + 12));
  uint64_t v11 = (const char *)(*a4 + *(unsigned int *)(*a1 + 12));
  int v12 = strcmp(v10, v11);
  uint64_t v13 = *a3;
  int v14 = strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 12)), v10);
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *a1 = v13;
      *a3 = v8;
      return 1LL;
    }

    *a1 = v7;
    *a2 = v8;
    uint64_t v17 = *a3;
    *a2 = v17;
    *a3 = v8;
    return 2LL;
  }

  if (v14 < 0)
  {
    *a2 = v13;
    *a3 = v7;
    uint64_t v15 = *a2;
    uint64_t v16 = *a1;
    *a1 = v15;
    *a2 = v16;
    return 2LL;
  }

  return 0LL;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a3;
  uint64_t v7 = (const char *)(*a3 + *(unsigned int *)(*a1 + 12));
  if (strcmp(v7, (const char *)(*a3 + *(unsigned int *)(*(a2 - 1) + 12))) < 0)
  {
    uint64_t v8 = a1;
    do
    {
      uint64_t v9 = v8[1];
      ++v8;
    }

    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v9 + 12))) & 0x80000000) == 0);
  }

  else
  {
    uint64_t v10 = a1 + 1;
    do
    {
      uint64_t v8 = v10;
      if (v10 >= v3) {
        break;
      }
      ++v10;
    }

    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(*v8 + 12))) & 0x80000000) == 0);
  }

  if (v8 < v3)
  {
    do
      uint64_t v11 = *--v3;
    while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v11 + 12))) < 0);
  }

  if (v8 < v3)
  {
    uint64_t v12 = *v8;
    uint64_t v13 = *v3;
    do
    {
      *uint64_t v8 = v13;
      uint64_t *v3 = v12;
      do
      {
        uint64_t v14 = v8[1];
        ++v8;
        uint64_t v12 = v14;
      }

      while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v14 + 12))) & 0x80000000) == 0);
      do
      {
        uint64_t v15 = *--v3;
        uint64_t v13 = v15;
      }

      while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v15 + 12))) < 0);
    }

    while (v8 < v3);
  }

  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v5;
  return v8;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( void *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  uint64_t v8 = (const char *)(*a3 + *(unsigned int *)(*a1 + 12LL));
  do
    uint64_t v9 = a1[++v5];
  while (strcmp((const char *)(v7 + *(unsigned int *)(v9 + 12)), v8) < 0);
  unint64_t v10 = (unint64_t)&a1[v5];
  uint64_t v11 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      uint64_t v13 = *--a2;
    }

    while ((strcmp((const char *)(v7 + *(unsigned int *)(v13 + 12)), v8) & 0x80000000) == 0);
  }

  else
  {
    do
      uint64_t v12 = *--a2;
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v12 + 12)), v8) & 0x80000000) == 0);
  }

  if (v10 < (unint64_t)a2)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = &a1[v5];
    uint64_t v16 = a2;
    do
    {
      *uint64_t v15 = v14;
      *uint64_t v16 = v9;
      do
      {
        uint64_t v17 = v15[1];
        ++v15;
        uint64_t v9 = v17;
      }

      while (strcmp((const char *)(v7 + *(unsigned int *)(v17 + 12)), v8) < 0);
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v14 = v18;
      }

      while ((strcmp((const char *)(v7 + *(unsigned int *)(v18 + 12)), v8) & 0x80000000) == 0);
    }

    while (v15 < v16);
    uint64_t v11 = v15 - 1;
  }

  if (v11 != a1) {
    *a1 = *v11;
  }
  *uint64_t v11 = v6;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 12)), (const char *)(*a3 + *(unsigned int *)(*a1 + 12))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      unint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24LL;
      break;
  }

  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    uint64_t v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 12));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v1_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }

      uint64_t v21 = a1;
LABEL_12:
      uint64_t *v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }

    unint64_t v10 = v11;
    v14 += 8LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  uint64_t result = strcmp((const char *)(v12 + *(unsigned int *)(*a4 + 12)), (const char *)(v12 + *(unsigned int *)(*a3 + 12)));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    uint64_t result = strcmp( (const char *)(v12 + *(unsigned int *)(*a3 + 12)),  (const char *)(v12 + *(unsigned int *)(*a2 + 12)));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      uint64_t result = strcmp( (const char *)(v12 + *(unsigned int *)(*a2 + 12)),  (const char *)(v12 + *(unsigned int *)(*a1 + 12)));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }

  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = *a5;
  uint64_t v13 = *a4;
  uint64_t v14 = *a6;
  uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 12)), (const char *)(v14 + *(unsigned int *)(*a4 + 12)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a4 + 12)),  (const char *)(v14 + *(unsigned int *)(*a3 + 12)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a3 + 12)),  (const char *)(v14 + *(unsigned int *)(*a2 + 12)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a2 + 12)),  (const char *)(v14 + *(unsigned int *)(*a1 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }

  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>( char *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 8;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)a1;
        if (strcmp( (const char *)(*a4 + *(unsigned int *)(*(void *)v14 + 12LL)),  (const char *)(*a4 + *(unsigned int *)(*(void *)a1 + 12LL))) < 0)
        {
          *(void *)uint64_t v14 = v16;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  a4,  v9,  a1);
        }

        v14 += 8;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      uint64_t v18 = a2 - 8;
      do
      {
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a4,  v17);
        if (v18 == v20)
        {
          *(void *)uint64_t v20 = v19;
        }

        else
        {
          *(void *)uint64_t v20 = *(void *)v18;
          *(void *)uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  (uint64_t)(v20 + 8),  a4,  (v20 + 8 - a1) >> 3);
        }

        v18 -= 8;
      }

      while (v17-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t result, uint64_t *a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    unint64_t v4 = a4;
    uint64_t v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      unint64_t v22 = (unint64_t)(a3 - 2) >> 1;
      uint64_t v7 = ((uint64_t)a4 - result) >> 2;
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (void *)(result + 8 * (v7 + 1));
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v9;
      if (v7 + 2 >= a3)
      {
        uint64_t v13 = *a2;
      }

      else
      {
        uint64_t v12 = v9[1];
        uint64_t v13 = *a2;
        if (strcmp( (const char *)(*a2 + *(unsigned int *)(v11 + 12)),  (const char *)(*a2 + *(unsigned int *)(v12 + 12))) < 0)
        {
          uint64_t v11 = v12;
          ++v9;
          uint64_t v8 = v10;
        }
      }

      uint64_t v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 12LL));
      uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
      int64_t v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        uint64_t v21 = v14;
        do
        {
          uint64_t v16 = v9;
          void *v4 = v11;
          if (v15 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = (void *)(v5 + 8 * v17);
          uint64_t v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            uint64_t v18 = v5;
            uint64_t v19 = v9[1];
            int v20 = strcmp( (const char *)(v13 + *(unsigned int *)(v11 + 12)),  (const char *)(v13 + *(unsigned int *)(v19 + 12)));
            if (v20 < 0) {
              uint64_t v11 = v19;
            }
            uint64_t v5 = v18;
            int64_t v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              uint64_t v17 = 2 * v8 + 2;
            }
          }

          uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
          unint64_t v4 = v16;
          uint64_t v8 = v17;
        }

        while ((result & 0x80000000) == 0);
        *uint64_t v16 = v21;
      }
    }
  }

  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = *a2;
  do
  {
    uint64_t v9 = &a1[v5];
    uint64_t v12 = v9[1];
    uint64_t v10 = v9 + 1;
    uint64_t v11 = v12;
    uint64_t v13 = (2 * v5) | 1;
    uint64_t v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      uint64_t v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 12)), (const char *)(v8 + *(unsigned int *)(v15 + 12))) < 0)
      {
        uint64_t v11 = v15;
        ++v10;
        uint64_t v13 = v14;
      }
    }

    *a1 = v11;
    a1 = v10;
    uint64_t v5 = v13;
  }

  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v8 = (void *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v10 = *v7;
    uint64_t v11 = *a3;
    uint64_t v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 12));
    uint64_t result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 12LL)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        uint64_t v13 = v7;
        *uint64_t v8 = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (void *)(v5 + 8 * v6);
        uint64_t v10 = *v7;
        uint64_t result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 12LL)), v12);
        uint64_t v8 = v13;
      }

      while ((result & 0x80000000) != 0);
      *uint64_t v13 = v9;
    }
  }

  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v20 = *(a2 - 1);
        uint64_t v21 = *v9;
        uint64_t result = strcmp( (const char *)(*a3 + *(unsigned int *)(v20 + 16)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *uint64_t v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *uint64_t v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if ((strcmp( (const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 16)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 16))) & 0x80000000) == 0)
          {
            uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( v9,  a2,  a3);
            uint64_t v9 = (uint64_t *)result;
            goto LABEL_17;
          }

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    uint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = *a3;
      uint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t v11 = (const char *)(v7 + *(unsigned int *)(v9 + 16));
        uint64_t result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v12 = v6;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
            if (!v12) {
              break;
            }
            uint64_t v10 = *(uint64_t *)((char *)v4 + v12 - 8);
            uint64_t result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
            v12 -= 8LL;
            if ((result & 0x80000000) == 0)
            {
              unint64_t v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }

          unint64_t v13 = v4;
LABEL_10:
          *unint64_t v13 = v9;
        }

        uint64_t v5 = v8 + 1;
        v6 += 8LL;
      }

      while (v8 + 1 != a2);
    }
  }

  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( void *result, void *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v4 = result;
    uint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = *a3;
      do
      {
        uint64_t v8 = *v4;
        uint64_t v7 = v4[1];
        unint64_t v4 = v5;
        uint64_t v9 = (const char *)(v6 + *(unsigned int *)(v7 + 16));
        uint64_t result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v10 = v4;
          do
          {
            *uint64_t v10 = v8;
            uint64_t v8 = *(v10 - 2);
            uint64_t result = (void *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
            --v10;
          }

          while ((result & 0x80000000) != 0);
          *uint64_t v10 = v7;
        }

        uint64_t v5 = v4 + 1;
      }

      while (v4 + 1 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *a1;
  uint64_t v9 = *a4;
  uint64_t v10 = (const char *)(*a4 + *(unsigned int *)(*a2 + 16));
  uint64_t v11 = (const char *)(*a4 + *(unsigned int *)(*a1 + 16));
  int v12 = strcmp(v10, v11);
  uint64_t v13 = *a3;
  int v14 = strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 16)), v10);
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *a1 = v13;
      *a3 = v8;
      return 1LL;
    }

    *a1 = v7;
    *a2 = v8;
    uint64_t v17 = *a3;
    *a2 = v17;
    *a3 = v8;
    return 2LL;
  }

  if (v14 < 0)
  {
    *a2 = v13;
    *a3 = v7;
    uint64_t v15 = *a2;
    uint64_t v16 = *a1;
    *a1 = v15;
    *a2 = v16;
    return 2LL;
  }

  return 0LL;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a3;
  uint64_t v7 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16));
  if (strcmp(v7, (const char *)(*a3 + *(unsigned int *)(*(a2 - 1) + 16))) < 0)
  {
    uint64_t v8 = a1;
    do
    {
      uint64_t v9 = v8[1];
      ++v8;
    }

    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v9 + 16))) & 0x80000000) == 0);
  }

  else
  {
    uint64_t v10 = a1 + 1;
    do
    {
      uint64_t v8 = v10;
      if (v10 >= v3) {
        break;
      }
      ++v10;
    }

    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(*v8 + 16))) & 0x80000000) == 0);
  }

  if (v8 < v3)
  {
    do
      uint64_t v11 = *--v3;
    while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v11 + 16))) < 0);
  }

  if (v8 < v3)
  {
    uint64_t v12 = *v8;
    uint64_t v13 = *v3;
    do
    {
      *uint64_t v8 = v13;
      uint64_t *v3 = v12;
      do
      {
        uint64_t v14 = v8[1];
        ++v8;
        uint64_t v12 = v14;
      }

      while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v14 + 16))) & 0x80000000) == 0);
      do
      {
        uint64_t v15 = *--v3;
        uint64_t v13 = v15;
      }

      while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v15 + 16))) < 0);
    }

    while (v8 < v3);
  }

  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v5;
  return v8;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( void *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  uint64_t v8 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16LL));
  do
    uint64_t v9 = a1[++v5];
  while (strcmp((const char *)(v7 + *(unsigned int *)(v9 + 16)), v8) < 0);
  unint64_t v10 = (unint64_t)&a1[v5];
  uint64_t v11 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      uint64_t v13 = *--a2;
    }

    while ((strcmp((const char *)(v7 + *(unsigned int *)(v13 + 16)), v8) & 0x80000000) == 0);
  }

  else
  {
    do
      uint64_t v12 = *--a2;
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v12 + 16)), v8) & 0x80000000) == 0);
  }

  if (v10 < (unint64_t)a2)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = &a1[v5];
    uint64_t v16 = a2;
    do
    {
      *uint64_t v15 = v14;
      *uint64_t v16 = v9;
      do
      {
        uint64_t v17 = v15[1];
        ++v15;
        uint64_t v9 = v17;
      }

      while (strcmp((const char *)(v7 + *(unsigned int *)(v17 + 16)), v8) < 0);
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v14 = v18;
      }

      while ((strcmp((const char *)(v7 + *(unsigned int *)(v18 + 16)), v8) & 0x80000000) == 0);
    }

    while (v15 < v16);
    uint64_t v11 = v15 - 1;
  }

  if (v11 != a1) {
    *a1 = *v11;
  }
  *uint64_t v11 = v6;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      unint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24LL;
      break;
  }

  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    uint64_t v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v1_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }

      uint64_t v21 = a1;
LABEL_12:
      uint64_t *v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }

    unint64_t v10 = v11;
    v14 += 8LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  uint64_t result = strcmp((const char *)(v12 + *(unsigned int *)(*a4 + 16)), (const char *)(v12 + *(unsigned int *)(*a3 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    uint64_t result = strcmp( (const char *)(v12 + *(unsigned int *)(*a3 + 16)),  (const char *)(v12 + *(unsigned int *)(*a2 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      uint64_t result = strcmp( (const char *)(v12 + *(unsigned int *)(*a2 + 16)),  (const char *)(v12 + *(unsigned int *)(*a1 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }

  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = *a5;
  uint64_t v13 = *a4;
  uint64_t v14 = *a6;
  uint64_t result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 16)), (const char *)(v14 + *(unsigned int *)(*a4 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a4 + 16)),  (const char *)(v14 + *(unsigned int *)(*a3 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a3 + 16)),  (const char *)(v14 + *(unsigned int *)(*a2 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        uint64_t result = strcmp( (const char *)(v14 + *(unsigned int *)(*a2 + 16)),  (const char *)(v14 + *(unsigned int *)(*a1 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }

  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>( char *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 8;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)a1;
        if (strcmp( (const char *)(*a4 + *(unsigned int *)(*(void *)v14 + 16LL)),  (const char *)(*a4 + *(unsigned int *)(*(void *)a1 + 16LL))) < 0)
        {
          *(void *)uint64_t v14 = v16;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  a4,  v9,  a1);
        }

        v14 += 8;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      uint64_t v18 = a2 - 8;
      do
      {
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a4,  v17);
        if (v18 == v20)
        {
          *(void *)uint64_t v20 = v19;
        }

        else
        {
          *(void *)uint64_t v20 = *(void *)v18;
          *(void *)uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( (uint64_t)a1,  (uint64_t)(v20 + 8),  a4,  (v20 + 8 - a1) >> 3);
        }

        v18 -= 8;
      }

      while (v17-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t result, uint64_t *a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    unint64_t v4 = a4;
    uint64_t v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      unint64_t v22 = (unint64_t)(a3 - 2) >> 1;
      uint64_t v7 = ((uint64_t)a4 - result) >> 2;
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (void *)(result + 8 * (v7 + 1));
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v9;
      if (v7 + 2 >= a3)
      {
        uint64_t v13 = *a2;
      }

      else
      {
        uint64_t v12 = v9[1];
        uint64_t v13 = *a2;
        if (strcmp( (const char *)(*a2 + *(unsigned int *)(v11 + 16)),  (const char *)(*a2 + *(unsigned int *)(v12 + 16))) < 0)
        {
          uint64_t v11 = v12;
          ++v9;
          uint64_t v8 = v10;
        }
      }

      uint64_t v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 16LL));
      uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
      int64_t v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        uint64_t v21 = v14;
        do
        {
          uint64_t v16 = v9;
          void *v4 = v11;
          if (v15 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = (void *)(v5 + 8 * v17);
          uint64_t v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            uint64_t v18 = v5;
            uint64_t v19 = v9[1];
            int v20 = strcmp( (const char *)(v13 + *(unsigned int *)(v11 + 16)),  (const char *)(v13 + *(unsigned int *)(v19 + 16)));
            if (v20 < 0) {
              uint64_t v11 = v19;
            }
            uint64_t v5 = v18;
            int64_t v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              uint64_t v17 = 2 * v8 + 2;
            }
          }

          uint64_t result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
          unint64_t v4 = v16;
          uint64_t v8 = v17;
        }

        while ((result & 0x80000000) == 0);
        *uint64_t v16 = v21;
      }
    }
  }

  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = *a2;
  do
  {
    uint64_t v9 = &a1[v5];
    uint64_t v12 = v9[1];
    uint64_t v10 = v9 + 1;
    uint64_t v11 = v12;
    uint64_t v13 = (2 * v5) | 1;
    uint64_t v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      uint64_t v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 16)), (const char *)(v8 + *(unsigned int *)(v15 + 16))) < 0)
      {
        uint64_t v11 = v15;
        ++v10;
        uint64_t v13 = v14;
      }
    }

    *a1 = v11;
    a1 = v10;
    uint64_t v5 = v13;
  }

  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v8 = (void *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v10 = *v7;
    uint64_t v11 = *a3;
    uint64_t v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 16));
    uint64_t result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 16LL)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        uint64_t v13 = v7;
        *uint64_t v8 = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (void *)(v5 + 8 * v6);
        uint64_t v10 = *v7;
        uint64_t result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 16LL)), v12);
        uint64_t v8 = v13;
      }

      while ((result & 0x80000000) != 0);
      *uint64_t v13 = v9;
    }
  }

  return result;
}

uint64_t CSCppTRawSymbolNameGuard<Pointer32>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  if (!*(_BYTE *)a1)
  {
    BOOL v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v4);
        v4 += 96LL;
      }
    }
  }

  return a1;
}

uint64_t TRawSymbol<Pointer32>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(result + 64);
  while (v2 != v3)
  {
    uint64_t result = TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v2);
    v2 += 96LL;
  }

  uint64_t v4 = (unsigned int *)(v1 + 20);
  unsigned int v5 = atomic_load((unsigned int *)(v1 + 20));
  unsigned int v6 = atomic_load((unsigned int *)(v1 + 20));
  if ((v6 & 0x40000) == 0)
  {
    v5 &= ~0x20000u;
    *(void *)(v1 + 24) = *(void *)(v1 + 32);
  }

  unsigned int v7 = atomic_load(v4);
  if ((v7 & 0x800000) == 0) {
    v5 &= 0xFEBFFFFB;
  }
  atomic_store(v5, v4);
  return result;
}

uint64_t create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, void **a2)
{
  v85[5] = *MEMORY[0x1895F89C0];
  v83 = a2;
  uint64_t v3 = (char *)operator new(0x208uLL);
  uint64_t v4 = (uint64_t)v3;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 1_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  *((_OWORD *)v3 + 27) = 0u;
  *((_OWORD *)v3 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *((_OWORD *)v3 + 29) = 0u;
  *((_OWORD *)v3 + 30) = 0u;
  *((void *)v3 + 1) = 1LL;
  *((void *)v3 + 2) = 850045863LL;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(void *)uint64_t v3 = off_189DF5DB8;
  *(_OWORD *)(v3 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((void *)v3 + 15) = 0LL;
  *((_DWORD *)v3 + 32) = 1065353216;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 16_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *((void *)v3 + 31) = 0LL;
  *((_DWORD *)v3 + 7_Block_object_dispose((const void *)(v1 - 64), 8) = 1065353216;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_DWORD *)v3 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 1065353216;
  *((_OWORD *)v3 + 26) = 0u;
  *((_OWORD *)v3 + 27) = 0u;
  v3[408] = 0;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_OWORD *)(v3 + 360) = 0u;
  *((_DWORD *)v3 + 112) = 1065353216;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 472) = 0u;
  *((_DWORD *)v3 + 122) = 1065353216;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *((void *)v3 + 63) = 0LL;
  *((void *)v3 + 64) = 0LL;
  *((void *)v3 + 62) = 0LL;
  if (v6 - v5 == 32)
  {
    unsigned int v7 = atomic_load((unsigned int *)v3 + 3);
    atomic_store(v7 | 0x100, (unsigned int *)v3 + 3);
  }

  int v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  uint64_t v82 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( a1,  (void *)v4,  &v79,  (uint64_t)&v77,  &buf);
  uint64_t v9 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v10 = v82;
  uint64_t v82 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v9 = v82;
  }

  if (v9) {
    goto LABEL_8;
  }
  sod_header_from_on_disk_binary<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, &buf);
  uint64_t v9 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v14 = v82;
  uint64_t v82 = v9;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    uint64_t v15 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    uint64_t v9 = v82;
  }

  if (v9)
  {
    int v13 = 0;
LABEL_18:
    v76 = 0LL;
LABEL_19:
    v75 = 0LL;
    goto LABEL_20;
  }

  sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( a1,  v4,  &v79,  (uint64_t)&v77,  &buf);
  uint64_t v9 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v28 = v82;
  uint64_t v82 = v9;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    uint64_t v29 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    uint64_t v9 = v82;
  }

  if (v9)
  {
LABEL_8:
    BOOL v12 = 0;
    if (v79 == __PAIR128__(-1LL, -1LL) && v80 == -1) {
      BOOL v12 = v81 == -1;
    }
    int v13 = !v12;
    goto LABEL_18;
  }

  v76 = 0LL;
  sod_header_from_colocated_dsym<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( a1,  v4,  (void ***)&v76,  &v83,  &buf);
  uint64_t v9 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v30 = v82;
  uint64_t v82 = v9;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    uint64_t v31 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    uint64_t v9 = v82;
  }

  if (v9)
  {
    int v13 = 0;
    goto LABEL_19;
  }

  sod_header_from_debug_symbols<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( a1,  v4,  (void ***)&v76,  (CSCppDsymData **)&v83,  &buf);
  uint64_t v9 = buf;
  *(void *)&__int128 buf = 0LL;
  uint64_t v57 = v82;
  uint64_t v82 = v9;
  if (v57)
  {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
    uint64_t v58 = buf;
    *(void *)&__int128 buf = 0LL;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
    }
    uint64_t v9 = v82;
  }

  v75 = 0LL;
  if (!v9)
  {
    sod_header_from_task_fault<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, (void **)&v75, &buf);
    uint64_t v9 = buf;
    *(void *)&__int128 buf = 0LL;
    uint64_t v59 = v82;
    uint64_t v82 = v9;
    if (v59)
    {
      (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
      uint64_t v60 = buf;
      *(void *)&__int128 buf = 0LL;
      if (v60) {
        (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
      }
      uint64_t v9 = v82;
    }

    if (!v9)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v4 = 0LL;
      goto LABEL_124;
    }
  }

  int v13 = 0;
LABEL_20:
  v72 = 0LL;
  v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v16 = *(char **)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  if ((char *)v17 == v16)
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(v9, &v72, v4 + 160);
  }

  else
  {
    if (v4 + 160 != a1 + 56)
    {
      std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>( (char *)(v4 + 160),  v16,  v17,  0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v16) >> 3));
      uint64_t v9 = v82;
    }

    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(v9, &v72, 0LL);
  }

  record_sod_header_version<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(&v82, v4);
  dsym_header_for_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( a1,  (void *)v4,  (void ***)&v76,  &v83,  &v71);
  if (!v71)
  {
    if ((v8 & 0x10000) != 0) {
      goto LABEL_80;
    }
    if (!v13)
    {
      char v24 = 3;
LABEL_78:
      extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( v24,  0LL,  0LL,  0LL,  v82,  (uint64_t *)v4,  0LL);
      goto LABEL_80;
    }

    goto LABEL_79;
  }

  uint64_t v70 = 0LL;
  char v18 = atomic_load((unsigned int *)(v4 + 12));
  if ((v18 & 4) != 0
    || (char v19 = atomic_load((unsigned int *)(v4 + 12)), (v19 & 8) != 0)
    || (char v20 = atomic_load((unsigned int *)(v4 + 12)), (v20 & 2) != 0) && (*(_BYTE *)(a1 + 109) & 4) != 0
    || *(_BYTE *)(v82 + 60))
  {
    uint64_t v67 = 0LL;
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections( (uint64_t)v71,  &v67,  0LL);
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v66 = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( &v64,  v67,  (uint64_t)v68,  (v68 - (_BYTE *)v67) >> 5);
    __p = 0LL;
    uint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( &__p,  v72,  (uint64_t)v73,  (v73 - (_BYTE *)v72) >> 5);
    uint64_t v21 = v83;
    unint64_t v22 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>( (uint64_t)v64,  (uint64_t)v65);
    uint64_t v23 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>( (uint64_t)__p,  (uint64_t)v62);
    if (v65 != v22) {
      uint64_t v65 = v22;
    }
    if (v62 != v23) {
      uint64_t v62 = v23;
    }
    if ((char *)v22 - (_BYTE *)v64 != (char *)v23 - (_BYTE *)__p)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21 + 9;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Segments in dSYM [%s] could not be matched to task header\n",  (uint8_t *)&buf,  0xCu);
      }

      int v27 = 0LL;
      goto LABEL_58;
    }

    create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>( (uint64_t)&v64,  (uint64_t)&__p,  0,  (void **)&buf);
    uint64_t v26 = *((void *)&buf + 1);
    unint64_t v25 = (void *)buf;
    if ((void)buf == *((void *)&buf + 1))
    {
      int v27 = 0LL;
      if (!(void)buf)
      {
LABEL_58:
        __int128 v32 = (void **)v70;
        uint64_t v70 = v27;
        if (v32) {
          std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100]((int)&v70, v32);
        }
        if (__p)
        {
          uint64_t v62 = __p;
          operator delete(__p);
        }

        if (v64)
        {
          uint64_t v65 = v64;
          operator delete(v64);
        }

        if (v67)
        {
          uint64_t v68 = v67;
          operator delete(v67);
        }

        goto LABEL_66;
      }
    }

    else
    {
      int v27 = operator new(0x20uLL);
      *int v27 = 0LL;
      v27[1] = 0LL;
      v27[2] = 0LL;
      std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>( v27,  v25,  v26,  0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v25) >> 3));
      v27[3] = *v27;
      unint64_t v25 = (void *)buf;
      if (!(void)buf) {
        goto LABEL_58;
      }
    }

    *((void *)&buf + 1) = v25;
    operator delete(v25);
    goto LABEL_58;
  }

void sub_1860310AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p, uint64_t a21, uint64_t a22, uint64_t a23, void **a24)
{
  if (a24)
  {
    CSCppDsymData::~CSCppDsymData(a24);
    operator delete(v27);
  }

  uint64_t v28 = *(void *)(v25 - 160);
  *(void *)(v25 - 160) = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  _Unwind_Resume(a1);
}

mach_vm_address_t CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>( uint64_t a1, void *a2, CSCppAddressSet *a3, int a4)
{
  uint64_t v281 = *MEMORY[0x1895F89C0];
  unsigned int v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if (a3) {
    CSCppAddressSet::sort(a3);
  }
  uint64_t v243 = (uint64_t)(a2 + 48);
  v246 = a2;
  int v237 = a4;
  v265 = 0LL;
  uint64_t v240 = a1;
  MMapArchiveNameBuffer::MMapArchiveNameBuffer((MMapArchiveNameBuffer *)v266);
  __p = 0LL;
  v263 = 0LL;
  v264 = 0LL;
  memset(v260, 0, sizeof(v260));
  int v261 = 1065353216;
  uint64_t v10 = a2[20];
  for (uint64_t i = a2[21]; v10 != i; v10 += 24LL)
  {
    if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v10, *(void *)(v10 + 8)))
    {
      int v12 = intern_string<std::unordered_map<unsigned long,unsigned int>>( *(const char **)(v10 + 16),  (CSCppMMapStringTable *)&v265,  v260);
      int v13 = v12;
      uint64_t v14 = v263;
      if (v263 >= v264)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v263 - (_BYTE *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = v264 - (_BYTE *)__p;
        if ((v264 - (_BYTE *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)&v264,  v20);
          uint64_t v16 = (char *)__p;
          uint64_t v14 = v263;
        }

        else
        {
          uint64_t v21 = 0LL;
        }

        unint64_t v22 = &v21[4 * v17];
        *(_DWORD *)unint64_t v22 = v13;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }

        __p = v22;
        v263 = v15;
        v264 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }

      else
      {
        *(_DWORD *)v263 = v12;
        uint64_t v15 = v14 + 4;
      }

      v263 = v15;
    }
  }

  memset(v258, 0, sizeof(v258));
  float v259 = 1.0;
  memset(v256, 0, sizeof(v256));
  int v257 = 1065353216;
  DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer((DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255);
  uint64_t v24 = (uint64_t *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v246);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( (uint64_t)v258,  vcvtps_u32_f32((float)(0x9D89D89D89D89D8ALL * ((v24[1] - *v24) >> 3)) / v259));
  v253[0] = 0;
  v254 = v24;
  __src = v24;
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = (v8 >> 5) & 1;
  if (v26 != v25)
  {
    unsigned int v28 = 0;
    unsigned int v29 = 0;
    while (1)
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v26, *(void *)(v26 + 8)))
      {
        if (v270)
        {
LABEL_53:
          mach_vm_address_t v9 = 0LL;
          goto LABEL_322;
        }

        intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( v26,  (CSCppMMapStringTable *)&v265,  (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255,  v258,  v256,  v27);
        ++v28;
        if (*(_DWORD *)(v26 + 16)) {
          ++v29;
        }
      }

      v26 += 104LL;
      if (v26 == v25) {
        goto LABEL_36;
      }
    }
  }

  unsigned int v29 = 0;
  unsigned int v28 = 0;
LABEL_36:
  uint64_t v30 = (uint64_t *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v246);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  if (*v30 == v31)
  {
    int v33 = 0;
  }

  else
  {
    int v33 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v32, *(void *)(v32 + 8)))
      {
        if (v270) {
          break;
        }
        v33 += recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( v32,  (CSCppMMapStringTable *)&v265,  (uint64_t)a3,  (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255,  v258,  v256,  v27);
      }

      v32 += 104LL;
    }

    while (v32 != v31);
  }

  uint64_t v34 = v246[26];
  uint64_t v35 = v246[27];
  if (v34 == v35)
  {
    int v36 = 0;
  }

  else
  {
    int v36 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v34, *(void *)(v34 + 8)))
      {
        if (v270) {
          goto LABEL_53;
        }
        *(_DWORD *)(v34 + 32) = intern_string<std::unordered_map<unsigned long,unsigned int>>( *(const char **)(v34 + 16),  (CSCppMMapStringTable *)&v265,  v256);
        ++v36;
      }

      v34 += 40LL;
    }

    while (v34 != v35);
  }

  if ((*(uint64_t (**)(void *))(*v246 + 64LL))(v246))
  {
    char v37 = (const char *)(*(uint64_t (**)(void *))(*v246 + 64LL))(v246);
    int v232 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v265, 0LL, v37);
  }

  else
  {
    int v232 = 0;
  }

  if ((*(uint64_t (**)(void *))(*v246 + 40LL))(v246))
  {
    uint64_t v38 = (const char *)(*(uint64_t (**)(void *))(*v246 + 40LL))(v246);
    int v231 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v265, 0LL, v38);
  }

  else
  {
    int v231 = 0;
  }

  v251[0] = 0LL;
  v251[1] = 0LL;
  uint64_t v252 = 0LL;
  v249[0] = 0LL;
  v249[1] = 0LL;
  uint64_t v250 = 0LL;
  v271[0] = 0LL;
  v271[1] = 0LL;
  uint64_t v272 = 0LL;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( v271,  (const void *)v246[48],  v246[49],  (uint64_t)(v246[49] - v246[48]) >> 5);
  unsigned int v239 = v29;
  memset(buf, 0, sizeof(buf));
  std::vector<CSCppSymbolOwner *>::reserve((void **)buf, (uint64_t)(v246[49] - v246[48]) >> 5);
  int v234 = v33;
  unsigned int v236 = v28;
  uint64_t v40 = (unint64_t *)v271[0];
  unsigned __int8 v39 = (unint64_t *)v271[1];
  if (v271[0] == v271[1])
  {
    char v41 = *(unint64_t ***)&buf[8];
  }

  else
  {
    char v41 = *(unint64_t ***)&buf[8];
    do
    {
      if ((unint64_t)v41 >= *(void *)&buf[16])
      {
        uint64_t v42 = ((uint64_t)v41 - *(void *)buf) >> 3;
        unint64_t v43 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v44);
        }
        else {
          unint64_t v45 = 0LL;
        }
        unint64_t v46 = (unint64_t **)&v45[8 * v42];
        _DWORD *v46 = v40;
        char v41 = v46 + 1;
        uint64_t v47 = *(char **)&buf[8];
        uint64_t v48 = *(char **)buf;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          do
          {
            uint64_t v49 = (unint64_t *)*((void *)v47 - 1);
            v47 -= 8;
            *--unint64_t v46 = v49;
          }

          while (v47 != v48);
          uint64_t v47 = *(char **)buf;
        }

        *(void *)__int128 buf = v46;
        *(void *)&uint8_t buf[8] = v41;
        *(void *)&buf[16] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }

      else
      {
        *v41++ = v40;
      }

      *(void *)&uint8_t buf[8] = v41;
      v40 += 4;
    }

    while (v40 != v39);
  }

  unint64_t v50 = 126 - 2 * __clz(((uint64_t)v41 - *(void *)buf) >> 3);
  else {
    uint64_t v51 = v50;
  }
  std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>( *(unint64_t ***)buf,  v41,  v51,  1);
  LOBYTE(address[0]) = 0;
  std::vector<BOOL>::vector(__s, ((char *)v271[1] - (char *)v271[0]) >> 5, (unsigned __int8 *)address);
  uint64_t v52 = *(void ***)buf;
  uint64_t v53 = *(void ***)&buf[8];
  if (*(void *)buf == *(void *)&buf[8])
  {
    uint64_t v54 = 0LL;
  }

  else
  {
    uint64_t v54 = 0LL;
    int v55 = 0;
    unint64_t v56 = *(uint64_t **)__s;
    do
    {
      uint64_t v57 = *v52;
      if ((*(uint64_t (**)(void *, void, void, void, void))(*v246 + 128LL))( v246,  0LL,  **v52,  (*v52)[1],  0LL))
      {
        goto LABEL_88;
      }

      uint64_t v59 = (const char *)v57[3];
      if (!v59) {
        uint64_t v59 = (const char *)v57[2];
      }
      if (!strncmp(v59, "__TEXT", 7uLL))
      {
LABEL_88:
        *uint64_t v57 = v54;
        v54 += v57[1];
        uint64_t v58 = *v56 | (1LL << v55);
      }

      else
      {
        uint64_t v58 = *v56 & ~(1LL << v55);
      }

      *unint64_t v56 = v58;
      ++v52;
      v56 += v55 == 63;
      if (v55 == 63) {
        int v55 = 0;
      }
      else {
        ++v55;
      }
    }

    while (v52 != v53);
  }

  uint64_t v60 = v279;
  if (v279)
  {
    unint64_t v61 = 0LL;
    uint64_t v62 = *(uint64_t **)__s;
    uint64_t v63 = -1LL;
    uint64_t v64 = *(void *)buf;
    do
    {
      if (((*(unint64_t *)((char *)v62 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v61) & 1) == 0)
      {
        uint64_t v65 = *(void **)(v64 + 8 * v61);
        uint64_t v66 = (const char *)v65[3];
        if (!v66) {
          uint64_t v66 = (const char *)v65[2];
        }
        if (!strncmp(v66, "__LINKEDIT", 0xAuLL))
        {
          uint64_t v63 = v61;
        }

        else
        {
          void *v65 = v54;
          v54 += v65[1];
        }
      }

      ++v61;
    }

    while ((unint64_t)v60 > v61);
    if (v63 != -1) {
      **(void **)(v64 + 8 * v63) = v54;
    }
  }

  if (*(void *)__s) {
    operator delete(*(void **)__s);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v251[0])
  {
    v251[1] = v251[0];
    operator delete(v251[0]);
  }

  *(_OWORD *)v251 = *(_OWORD *)v271;
  uint64_t v252 = v272;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(v243, (uint64_t)v251, 0, (void **)buf);
  if (v249[0])
  {
    v249[1] = v249[0];
    operator delete(v249[0]);
  }

  *(_OWORD *)v249 = *(_OWORD *)buf;
  uint64_t v250 = *(void *)&buf[16];
  uint64_t v67 = v246[30];
  if (v237) {
    uint64_t v68 = v246[29];
  }
  else {
    uint64_t v68 = 0LL;
  }
  if (v237) {
    size_t v69 = v246[30];
  }
  else {
    size_t v69 = 0LL;
  }
  unsigned int v70 = 4 * v236
      + 4 * v239
      + __n_4
      + v69
      + 36 * v234
      + 20 * v36
      + ((LODWORD(v251[1]) - LODWORD(v251[0]) + 24 * (((unint64_t)(v263 - (_BYTE *)__p) >> 2) + v236) + 96) & 0xFFFFFFF8);
  if (*((_BYTE *)v246 + 412)) {
    mach_vm_size_t v71 = v70 + 24;
  }
  else {
    mach_vm_size_t v71 = v70;
  }
  size_t v230 = v69;
  int v229 = *((unsigned __int8 *)v246 + 412);
  uint64_t v233 = v68;
  if (!v69 || (__int16 v72 = atomic_load((unsigned int *)v246 + 3), (v72 & 0x1000) == 0))
  {
    LODWORD(v73) = 0;
    LODWORD(v67) = 0;
    goto LABEL_130;
  }

  __int16 v92 = (unint64_t *)v249[0];
  if (v249[0] == v249[1])
  {
    LODWORD(v73) = v68;
LABEL_130:
    address[0] = 0LL;
    address[1] = v71;
    uint64_t v74 = (vm_map_t *)MEMORY[0x1895FBBE0];
    mach_vm_allocate(*MEMORY[0x1895FBBE0], address, v71, 3);
    mach_vm_address_t v75 = address[0];
    if (!address[0])
    {
      mach_vm_address_t v91 = 0LL;
LABEL_316:
      mach_vm_protect(*v74, v91, v71, 1, 1);
      mach_vm_address_t v9 = address[0];
      address[0] = 0LL;
      __int16 v92 = (unint64_t *)v249[0];
      goto LABEL_317;
    }

    unsigned int v244 = 4 * v236;
    mach_vm_size_t v238 = v71;
    uint64_t v227 = *(void *)(v240 + 112);
    int v228 = v73;
    v76 = v251[0];
    uint64_t v77 = v251[1];
    __int128 v79 = __p;
    uint64_t v78 = v263;
    unsigned int v80 = atomic_load((unsigned int *)v246 + 3);
    unsigned int v226 = v80;
    int v81 = (*(uint64_t (**)(void *))(*v246 + 48LL))(v246);
    int v82 = (*(uint64_t (**)(void *))(*v246 + 56LL))(v246);
    unint64_t v83 = (unint64_t)(v78 - v79) >> 2;
    *(_DWORD *)mach_vm_address_t v75 = 7;
    *(_DWORD *)(v75 + 4) = v238;
    *(_DWORD *)(v75 + _Block_object_dispose((const void *)(v1 - 64), 8) = (unint64_t)(v77 - v76) >> 5;
    *(_DWORD *)(v75 + 12) = v83;
    *(_DWORD *)(v75 + 16) = v236;
    *(_DWORD *)(v75 + 20) = v234;
    *(_DWORD *)(v75 + 24) = v36;
    *(_DWORD *)(v75 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v226;
    *(_DWORD *)(v75 + 32) = v81;
    *(_DWORD *)(v75 + 36) = v82;
    *(_OWORD *)(v75 + 52) = *(_OWORD *)(v240 + 16);
    *(void *)(v75 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = v227;
    *(_DWORD *)(v75 + 76) = v228;
    *(_DWORD *)(v75 + 80) = v67;
    *(_DWORD *)(v75 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 4 * v239;
    unint64_t v84 = 24 * v236
        + (unint64_t)(4 * v239)
        + v244
        + (36 * v234)
    mach_vm_address_t v245 = v75 + 96;
    std::vector<std::string> v85 = (char *)(v84 + v75 + 96 + ((_DWORD)v77 - (_DWORD)v76) + (24 * v83));
    v265 = v85;
    uint64_t v86 = v267;
    uint64_t v87 = v266[0];
    if (v267)
    {
      v88 = (const void **)v266[0];
      uint64_t v89 = v267;
      do
      {
        v90 = *v88++;
        memcpy(v85, v90, 0x1000uLL);
        v85 += 4096;
        --v89;
      }

      while (v89);
    }

    else
    {
      uint64_t v86 = 0LL;
    }

    memcpy(v85, *(const void **)(v87 + 8 * v86), __n);
    *(_DWORD *)(v75 + 84) = (_DWORD)v85
                          + __n
                          - (*(_DWORD *)(v75 + 88)
                           + *(_DWORD *)(v75 + 80))
                          - (v245
                           + 32 * *(_DWORD *)(v75 + 8)
                           + 24 * *(_DWORD *)(v75 + 12)
                           + 24 * *(_DWORD *)(v75 + 16)
                           + 4 * *(_DWORD *)(v75 + 16)
                           + 36 * *(_DWORD *)(v75 + 20)
                           + 20 * *(_DWORD *)(v75 + 24));
    *(_DWORD *)(v75 + 40) = v231;
    *(_DWORD *)(v75 + 44) = v232;
    *(_DWORD *)(v75 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = TMMapArchive::calculate_checksum((int32x4_t *)v75);
    unint64_t v95 = (32 * *(_DWORD *)(v75 + 8))
        + v245
        + (24 * *(_DWORD *)(v75 + 12))
        + (24 * *(_DWORD *)(v75 + 16))
        + (unint64_t)(4 * *(_DWORD *)(v75 + 16))
        + (36 * *(_DWORD *)(v75 + 20))
    uint64_t v96 = *(unsigned int *)(v75 + 80);
    v97 = (char *)v251[0];
    v98 = (char *)v251[1];
    if (v251[0] != v251[1])
    {
      v99 = (char *)(v75 + 112);
      do
      {
        v100 = (const char *)*((void *)v97 + 3);
        if (!v100) {
          v100 = (const char *)*((void *)v97 + 2);
        }
        __int128 v101 = *(_OWORD *)v97;
        v97 += 32;
        *((_OWORD *)v99 - 1) = v101;
        v99 = strncpy(v99, v100, 0x10uLL) + 32;
      }

      while (v97 != v98);
    }

    uint64_t v102 = v95 + v96;
    __int16 v92 = (unint64_t *)v249[0];
    v103 = (unint64_t *)v249[1];
    uint64_t v235 = v95 + v96;
    if (v249[0] == v249[1])
    {
      mach_vm_address_t v130 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      uint64_t v131 = v246[20];
      uint64_t v132 = v246[21];
      if (v131 != v132)
      {
        v133 = (int *)__p;
        do
        {
          if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v131, *(void *)(v131 + 8)))
          {
            int v134 = *v133++;
            *(_OWORD *)mach_vm_address_t v130 = *(_OWORD *)v131;
            *(_DWORD *)(v130 + 16) = v134;
            v130 += 24LL;
          }

          v131 += 24LL;
        }

        while (v131 != v132);
        mach_vm_address_t v130 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      }

      uint64_t v135 = v130 + (24 * *(_DWORD *)(v75 + 12));
      write_symbols_and_inlined_functions<Pointer64>( __src,  v135,  v135 + (24 * *(_DWORD *)(v75 + 16)),  (uint64_t)&v265,  (unint64_t **)v249,  (uint64_t)a3,  v102);
      v136 = (int64x2_t *)v246[26];
      v137 = (int64x2_t *)v246[27];
      if (v136 != v137)
      {
        do
        {
          if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, v136->i64[0], v136->i64[1]))
          {
            int32x2_t *v138 = vmovn_s64(*v136);
            v138[1].i32[0] = v136[2].i32[0];
            v138[1].i32[1] = v136[1].i32[2];
            v138[2].i32[0] = v136[1].i32[3] & 0x7FFFFFFF;
            v138 = (int32x2_t *)((char *)v138 + 20);
          }

          v136 = (int64x2_t *)((char *)v136 + 40);
        }

        while (v136 != v137);
      }
    }

    else
    {
      *(void *)__s = 0LL;
      v279 = 0LL;
      uint64_t v280 = 0LL;
      std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve( (void **)__s,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246[21] - v246[20]) >> 3));
      uint64_t v104 = v246[20];
      uint64_t v105 = v246[21];
      *(void *)__int128 buf = __s;
      while (v104 != v105)
      {
        if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v104, *(void *)(v104 + 8))) {
          std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100]( (void ***)buf,  (__int128 *)v104);
        }
        v104 += 24LL;
      }

      unint64_t v106 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v279 - *(void *)__s) >> 3));
      else {
        uint64_t v107 = v106;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>( *(uint64_t *)__s,  v279,  (uint64_t)buf,  v107,  1);
      v108 = *(uint64_t **)__s;
      v109 = v279;
      v110 = *(unint64_t **)__s;
      if (*(unint64_t **)__s != v279)
      {
        v111 = *(unint64_t **)__s;
        v112 = v92;
        while (2)
        {
          unint64_t v113 = *v111;
          while (v113 < *v112 || v111[1] + v113 > v112[1] + *v112)
          {
            v112 += 3;
            if (v112 >= v103)
            {
              BOOL v127 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR);
              unint64_t v128 = v111[1];
              if (v127)
              {
                unint64_t v129 = v111[2];
                *(_DWORD *)__int128 buf = 136315650;
                *(void *)&uint8_t buf[4] = v129;
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v113;
                *(_WORD *)&buf[22] = 2048;
                unint64_t v274 = v128 + v113;
                _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n",  buf,  0x20u);
              }

              fprintf((FILE *)*MEMORY[0x1895F89D0], "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n");
              goto LABEL_205;
            }
          }

          unint64_t *v111 = v112[2] + v113;
          v111 += 3;
          if (v111 != v109) {
            continue;
          }
          break;
        }

        v110 = v109;
      }

      std::sort[abi:ne180100]<std::__wrap_iter<CSCppSectionRange *>>((uint64_t)v108, v110);
      mach_vm_address_t v114 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      v115 = *(const char ***)__s;
      v116 = v279;
      if (*(unint64_t **)__s != v279)
      {
        do
        {
          int v117 = intern_string<std::unordered_map<unsigned long,unsigned int>>(v115[2], 0LL, v260);
          __int128 v118 = *(_OWORD *)v115;
          v115 += 3;
          *(_OWORD *)mach_vm_address_t v114 = v118;
          *(_DWORD *)(v114 + 16) = v117;
          v114 += 24LL;
        }

        while (v115 != (const char **)v116);
        mach_vm_address_t v114 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      }

      uint64_t v119 = v114 + (24 * *(_DWORD *)(v75 + 12));
      write_symbols_and_inlined_functions<Pointer64>( __src,  v119,  v119 + (24 * *(_DWORD *)(v75 + 16)),  (uint64_t)&v265,  (unint64_t **)v249,  (uint64_t)a3,  v102);
      uint64_t v120 = v246[26];
      uint64_t v121 = v246[27];
      if (v120 == v121)
      {
        char v126 = 1;
      }

      else
      {
        v123 = v92;
        while (a3 && !CSCppAddressSet::_intersects_range((uint64_t)a3, *(void *)v120, *(void *)(v120 + 8)))
        {
LABEL_181:
          v120 += 40LL;
          char v126 = 1;
          if (v120 == v121) {
            goto LABEL_206;
          }
        }

        unint64_t v124 = *(void *)v120;
        do
        {
          if (v124 >= *v123)
          {
            uint64_t v125 = *(void *)(v120 + 8);
            if (v125 + v124 <= v123[1] + *v123)
            {
              _DWORD *v122 = *((_DWORD *)v123 + 4) + v124;
              v122[1] = v125;
              v122[2] = *(_DWORD *)(v120 + 32);
              v122[3] = *(_DWORD *)(v120 + 24);
              v122[4] = *(_DWORD *)(v120 + 28) & 0x7FFFFFFF;
              v122 += 5;
              goto LABEL_181;
            }
          }

          v123 += 3;
        }

        while (v123 < v103);
        BOOL v139 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR);
        unint64_t v140 = *(void *)(v120 + 8);
        if (v139)
        {
          uint64_t v141 = *(void *)(v120 + 16);
          *(_DWORD *)__int128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v141;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v124;
          *(_WORD *)&buf[22] = 2048;
          unint64_t v274 = v140;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n",  buf,  0x20u);
        }

        fprintf((FILE *)*MEMORY[0x1895F89D0], "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n");
LABEL_205:
        char v126 = 0;
      }

LABEL_206:
      if (*(void *)__s)
      {
        v279 = *(unint64_t **)__s;
        operator delete(*(void **)__s);
      }

      if ((v126 & 1) == 0)
      {
        mach_vm_address_t v9 = 0LL;
LABEL_317:
        MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(address);
        goto LABEL_318;
      }
    }

    v142 = __src;
    if (v239)
    {
      memset(buf, 0, sizeof(buf));
      std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v239);
      uint64_t v143 = *__src;
      if (__src[1] != *__src)
      {
        uint64_t v144 = 0LL;
        unsigned int v145 = 0;
        unsigned int v146 = 0;
        do
        {
          if (!a3
            || CSCppAddressSet::_intersects_range( (uint64_t)a3,  *(void *)(v143 + 104 * v144),  *(void *)(v143 + 104 * v144 + 8)))
          {
            uint64_t v147 = (32 * *(_DWORD *)(v75 + 8))
                 + v245
            if (*(_DWORD *)(v147 + 12))
            {
              uint64_t v148 = *(void *)&buf[8];
              if (*(void *)&buf[8] >= *(void *)&buf[16])
              {
                uint64_t v150 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
                unint64_t v151 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
                if (v151 <= v150 + 1) {
                  unint64_t v151 = v150 + 1;
                }
                if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
                  unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v152 = v151;
                }
                if (v152) {
                  v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)&buf[16],  v152);
                }
                else {
                  v153 = 0LL;
                }
                v154 = (uint64_t *)&v153[8 * v150];
                uint64_t *v154 = v147;
                v149 = v154 + 1;
                v155 = *(char **)&buf[8];
                v156 = *(char **)buf;
                if (*(void *)&buf[8] != *(void *)buf)
                {
                  do
                  {
                    uint64_t v157 = *((void *)v155 - 1);
                    v155 -= 8;
                    *--v154 = v157;
                  }

                  while (v155 != v156);
                  v155 = *(char **)buf;
                }

                *(void *)__int128 buf = v154;
                *(void *)&uint8_t buf[8] = v149;
                *(void *)&buf[16] = &v153[8 * v152];
                if (v155) {
                  operator delete(v155);
                }
              }

              else
              {
                **(void **)&uint8_t buf[8] = v147;
                v149 = (void *)(v148 + 8);
              }

              *(void *)&uint8_t buf[8] = v149;
              v142 = __src;
            }

            ++v145;
          }

          uint64_t v143 = *v142;
          uint64_t v144 = ++v146;
        }

        while (0x4EC4EC4EC4EC4EC5LL * ((v142[1] - *v142) >> 3) > (unint64_t)v146);
      }

      unint64_t v158 = 126 - 2 * __clz((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
      *(void *)__s = v235;
      if (*(void *)&buf[8] == *(void *)buf) {
        uint64_t v159 = 0LL;
      }
      else {
        uint64_t v159 = v158;
      }
      std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( *(uint64_t *)buf,  *(uint64_t **)&buf[8],  (uint64_t *)__s,  v159,  1);
      v160 = *(void **)buf;
      if (*(void *)&buf[8] == *(void *)buf)
      {
        if (!*(void *)buf) {
          goto LABEL_246;
        }
      }

      else
      {
        int v161 = 32 * *(_DWORD *)(v75 + 8)
             + v245
             + 24 * *(_DWORD *)(v75 + 12)
             + 24 * *(_DWORD *)(v75 + 16)
             + 36 * *(_DWORD *)(v75 + 20)
             + 20 * *(_DWORD *)(v75 + 24);
        unint64_t v162 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
        if (v162 <= 1) {
          unint64_t v162 = 1LL;
        }
        v163 = *(int **)buf;
        v164 = (_DWORD *)((32 * *(_DWORD *)(v75 + 8))
                        + v245
                        + (24 * *(_DWORD *)(v75 + 12))
                        + (24 * *(_DWORD *)(v75 + 16))
        do
        {
          int v165 = *v163;
          v163 += 2;
          *v164++ = v161 - v165;
          v161 += 4;
          --v162;
        }

        while (v162);
      }

      *(void *)&uint8_t buf[8] = v160;
      operator delete(v160);
    }

LABEL_246:
    memset(buf, 0, sizeof(buf));
    std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v236);
    uint64_t v166 = *v142;
    if (v142[1] != *v142)
    {
      uint64_t v167 = 0LL;
      unsigned int v168 = 0;
      unsigned int v169 = 0;
      do
      {
        if (!a3
          || CSCppAddressSet::_intersects_range( (uint64_t)a3,  *(void *)(v166 + 104 * v167),  *(void *)(v166 + 104 * v167 + 8)))
        {
          uint64_t v170 = (32 * *(_DWORD *)(v75 + 8))
               + v245
          uint64_t v171 = *(void *)&buf[8];
          if (*(void *)&buf[8] >= *(void *)&buf[16])
          {
            uint64_t v173 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
            unint64_t v174 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
            if (v174 <= v173 + 1) {
              unint64_t v174 = v173 + 1;
            }
            if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v175 = v174;
            }
            if (v175) {
              v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)&buf[16],  v175);
            }
            else {
              v176 = 0LL;
            }
            v177 = (uint64_t *)&v176[8 * v173];
            uint64_t *v177 = v170;
            v172 = v177 + 1;
            v178 = *(char **)&buf[8];
            v179 = *(char **)buf;
            if (*(void *)&buf[8] != *(void *)buf)
            {
              do
              {
                uint64_t v180 = *((void *)v178 - 1);
                v178 -= 8;
                *--v177 = v180;
              }

              while (v178 != v179);
              v178 = *(char **)buf;
            }

            *(void *)__int128 buf = v177;
            *(void *)&uint8_t buf[8] = v172;
            *(void *)&buf[16] = &v176[8 * v175];
            if (v178) {
              operator delete(v178);
            }
          }

          else
          {
            **(void **)&uint8_t buf[8] = v170;
            v172 = (void *)(v171 + 8);
          }

          *(void *)&uint8_t buf[8] = v172;
          ++v169;
          v142 = __src;
        }

        uint64_t v166 = *v142;
        uint64_t v167 = ++v168;
      }

      while (0x4EC4EC4EC4EC4EC5LL * ((v142[1] - *v142) >> 3) > (unint64_t)v168);
    }

    unint64_t v181 = 126 - 2 * __clz((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    *(void *)__s = v235;
    if (*(void *)&buf[8] == *(void *)buf) {
      uint64_t v182 = 0LL;
    }
    else {
      uint64_t v182 = v181;
    }
    std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( *(uint64_t *)buf,  *(uint64_t **)&buf[8],  (uint64_t *)__s,  v182,  1);
    v183 = *(void **)buf;
    mach_vm_size_t v71 = v238;
    uint64_t v74 = (vm_map_t *)MEMORY[0x1895FBBE0];
    if (*(void *)&buf[8] == *(void *)buf)
    {
      if (!*(void *)buf)
      {
LABEL_279:
        if (v230)
        {
          int v189 = *(_DWORD *)(v75 + 8);
          int v190 = *(_DWORD *)(v75 + 12);
          int v192 = *(_DWORD *)(v75 + 16);
          int v191 = *(_DWORD *)(v75 + 20);
          int v193 = *(_DWORD *)(v75 + 24);
          uint64_t v194 = *(unsigned int *)(v75 + 88);
          __srca = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, size_t))(*v246 + 192LL))( v246,  v240,  v233,  v230);
          CFUUIDBytesToString((const CFUUIDBytes *)(v240 + 16), __s, 0x28uLL);
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)"create_mmap_archive_arch_specific (TEXT_text) -- UUID: ",  55LL);
          size_t v196 = strlen(__s);
          v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)__s, v196);
          v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v197,  (uint64_t)", Path: ",  8LL);
          if (v240) {
            v199 = *(const char **)(v240 + 120);
          }
          else {
            v199 = "<none>";
          }
          size_t v200 = strlen(v199);
          v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)v199, v200);
          v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v201,  (uint64_t)", is_dyld_shared_cache: ",  24LL);
          v203 = "No";
          if (v240 && (*(_DWORD *)(v240 + 108) & 0x200) != 0) {
            v203 = "Yes";
          }
          size_t v204 = strlen(v203);
          v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)v203, v204);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v205,  (uint64_t)", archive_TEXT_text: ",  21LL);
          v206 = (void *)((32 * v189)
                        + v245
                        + (24 * v190)
                        + (24 * v192)
                        + (unint64_t)(4 * v192)
                        + (36 * v191)
          v207 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v207,  (uint64_t)", raw_bytes_for_text: ",  22LL);
          v208 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)", text_len: ", 12LL);
          v209 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v209,  (uint64_t)", raw_TEXT_text_section: (",  26LL);
          v210 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)", ", 2LL);
          v211 = (void *)std::ostream::operator<<();
          v212 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)") ", 2LL);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v212,  (uint64_t)", max_TEXT_text_section: (",  26LL);
          v213 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)", ", 2LL);
          v214 = (void *)std::ostream::operator<<();
          v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)") ", 2LL);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v215,  (uint64_t)", TEXT_text_section.value(): ",  29LL);
          v216 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)", flags:", 8LL);
          char v217 = atomic_load((unsigned int *)v246 + 3);
          if ((v217 & 4) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFaultedFromSelfDyldSharedCache",  49LL);
          }
          if ((v217 & 1) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFaultedFromDisk",  34LL);
          }
          if ((v217 & 8) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFaultedFromDiskDyldSharedCache",  49LL);
          }
          if ((v217 & 0x20) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFoundBinaryNextToDsym",  40LL);
          }
          if ((v217 & 0x40) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFoundBinaryViaDsymPlist",  42LL);
          }
          if ((v217 & 2) != 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataFaultedFromTask",  34LL);
          }
          if (v217 < 0) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( buf,  (uint64_t)" kCSSymbolOwnerDataEmpty",  24LL);
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v271);
          if (v272 >= 0) {
            v218 = v271;
          }
          else {
            v218 = (void **)v271[0];
          }
          CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( (CSCppCrashReporterInfoSetter *)v247,  (const char *)v218);
          memcpy(v206, __srca, v230);
          CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v247);
          if (SHIBYTE(v272) < 0) {
            operator delete(v271[0]);
          }
          *(void *)__int128 buf = *MEMORY[0x189614738];
          *(void *)&buf[*(void *)(*(void *)buf - 24LL)] = *(void *)(MEMORY[0x189614738] + 24LL);
          *(void *)&uint8_t buf[8] = MEMORY[0x189614750] + 16LL;
          uint64_t v74 = (vm_map_t *)MEMORY[0x1895FBBE0];
          if (v276 < 0) {
            operator delete(v275);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x186E30F0C](&v277);
          mach_vm_size_t v71 = v238;
        }

        if (v229)
        {
          int v219 = *((_DWORD *)v246 + 102);
          unint64_t v220 = TMMapArchive::strtab_end((TMMapArchive *)v75);
          unint64_t v221 = v75 + *(unsigned int *)(v75 + 4);
          BOOL v222 = v221 > v220;
          unint64_t v223 = v221 - v220;
          if (v222 && v223 >= 0x18)
          {
            *(void *)unint64_t v220 = 0x100C0FFEELL;
            *(_DWORD *)(v220 + _Block_object_dispose((const void *)(v1 - 64), 8) = 24;
            *(_DWORD *)(v220 + 12) = v219;
            *(_DWORD *)(v220 + 16) = v219;
          }
        }

        v253[0] = 1;
        mach_vm_address_t v91 = address[0];
        goto LABEL_316;
      }
    }

    else
    {
      int v184 = 32 * *(_DWORD *)(v75 + 8)
           + v245
           + 24 * *(_DWORD *)(v75 + 12)
           + 24 * *(_DWORD *)(v75 + 16)
           + 36 * *(_DWORD *)(v75 + 20)
           + 20 * *(_DWORD *)(v75 + 24)
           + *(_DWORD *)(v75 + 88);
      unint64_t v185 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      if (v185 <= 1) {
        unint64_t v185 = 1LL;
      }
      v186 = *(int **)buf;
      v187 = (_DWORD *)((32 * *(_DWORD *)(v75 + 8))
                      + v245
                      + (24 * *(_DWORD *)(v75 + 12))
                      + (24 * *(_DWORD *)(v75 + 16))
                      + (unint64_t)(36 * *(_DWORD *)(v75 + 20))
      do
      {
        int v188 = *v186;
        v186 += 2;
        *v187++ = v184 - v188;
        v184 += 4;
        --v185;
      }

      while (v185);
    }

    *(void *)&uint8_t buf[8] = v183;
    operator delete(v183);
    goto LABEL_279;
  }

  v93 = (char *)v249[0] + 16;
  do
  {
    uint64_t v94 = v93 - 2;
    if ((unint64_t)(v68 - *(v93 - 2)) < *(v93 - 1))
    {
      uint64_t v73 = *v93 + v68;
      LODWORD(v67) = v69;
      goto LABEL_130;
    }

    v93 += 3;
  }

  while (v94 + 3 < v249[1]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = v68;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "TEXT_text_location %llx outside of relocations in mmap SOD\n",  buf,  0xCu);
  }

  fprintf((FILE *)*MEMORY[0x1895F89D0], "TEXT_text_location %llx outside of relocations in mmap SOD\n", v68);
  mach_vm_address_t v9 = 0LL;
LABEL_318:
  if (v92)
  {
    v249[1] = v92;
    operator delete(v92);
  }

  if (v251[0])
  {
    v251[1] = v251[0];
    operator delete(v251[0]);
  }

LABEL_322:
  CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard((uint64_t)v253);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(v255);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v256);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v258);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v260);
  if (__p)
  {
    v263 = (char *)__p;
    operator delete(__p);
  }

  *(void *)__int128 buf = v266;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v9;
}

void sub_186032B7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, mach_vm_address_t a31, uint64_t a32, void *__p, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, void *a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v65 = *(void **)(v63 - 144);
  if (v65)
  {
    *(void *)(v63 - 136) = v65;
    operator delete(v65);
  }

  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(&a31);
  if (__p) {
    operator delete(__p);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }

  CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard((uint64_t)&a41);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(&a43);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a51);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a57);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }

  a57 = a24;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

_DWORD *record_sod_header_version<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_source_version_load_command( *a1,  (uint64_t)v6);
  if (v7) {
    *(void *)(a2 + 272) = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v6);
  }
  uint64_t result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::id_dylib(*(void *)(*a1 + 24));
  if (result)
  {
    *(_DWORD *)(a2 + 264) = result[4];
    *(_DWORD *)(a2 + 26_Block_object_dispose((const void *)(v1 - 64), 8) = result[5];
    if (!v7)
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_id_dylib_load_command( *a1,  (uint64_t)v5);
      if (!v5[32]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t result = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v5);
      *(void *)(a2 + 272) = result;
    }
  }

  return result;
}

void dsym_header_for_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>( uint64_t a1@<X0>, void *a2@<X1>, void ***a3@<X2>, void ***a4@<X3>, void *a5@<X8>)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x80000) != 0
    || (*(_BYTE *)(a1 + 109) & 0x40) != 0
    || (uint64_t v10 = *a4) == 0LL
    && (uint64_t v11 = dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0LL, 0LL, 0LL, 0LL),
        std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, (void **)v11),
        uint64_t v10 = *a3,
        *a4 = *a3,
        !v10)
    || (uint64_t v12 = new_file_memory_for_uuid_and_arch((char *)v10 + 72, a1 + 16, *(void *)(a1 + 112), 2)) == 0)
  {
    *a5 = 0LL;
    return;
  }

  int v13 = (_DWORD *)v12;
  unint64_t v14 = 32LL;
  do
  {
    uint64_t v15 = (_DWORD *)(*(uint64_t (**)(_DWORD *, void, unint64_t))(*(void *)v13 + 32LL))( v13,  0LL,  v14);
    uint64_t v17 = (uint64_t)v15;
    if (!v15 || *v15 != -17958193)
    {
      *a5 = 0LL;
LABEL_17:
      (*(void (**)(_DWORD *))(*(void *)v13 + 8LL))(v13);
      return;
    }

    unint64_t v14 = v15[5] + 32LL;
  }

  while (v14 > v16);
  unint64_t v18 = *a4;
  int v19 = v13[14];
  unint64_t v20 = operator new(0x58uLL);
  buf[0] = 0;
  BYTE2(v27) = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader( (uint64_t)v20,  (uint64_t)v13,  0LL,  v17,  (uint64_t)(v18 + 9),  v19,  0,  (__int128 *)buf);
  if (!uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v20, a1))
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (uint64_t)(*a4 + 9);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v25 = v22;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Provided dSYM: [%s] does not match symbol owner %p\n",  buf,  0x16u);
    }

    *a5 = 0LL;
    (*(void (**)(void *))(*(void *)v20 + 8LL))(v20);
    goto LABEL_17;
  }

  int v23 = v13;
  TRawSymbolOwnerData<Pointer32>::add_memory(a2, (uint64_t *)&v23);
  uint64_t v21 = (uint64_t)v23;
  int v23 = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  *a5 = v20;
}

void sub_186033040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  _Unwind_Resume(a1);
}

void extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( void *a1, uint64_t a2, char a3, void *a4, uint64_t (***a5)(void, std::vector<std::string>::pointer))
{
  uint64_t v179 = *MEMORY[0x1895F89C0];
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARF");
  if (v5
    || (unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARFA")) != 0
    || (unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "")) != 0)
  {
    uint64_t v6 = *(unsigned int *)(v5 + 64);
    if ((_DWORD)v6)
    {
      char v7 = 0LL;
      uint64_t v8 = 0LL;
      mach_vm_address_t v9 = 0LL;
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      int v13 = 0LL;
      v116 = 0LL;
      unint64_t v14 = 0LL;
      uint64_t v15 = (const char *)(v5 + 72);
      do
      {
        if (!v7 && !strcmp(v15, "__debug_info"))
        {
          char v7 = v15;
        }

        else if (!v8 && !strcmp(v15, "__debug_abbrev"))
        {
          uint64_t v8 = v15;
        }

        else if (!v9 && !strcmp(v15, "__debug_line"))
        {
          mach_vm_address_t v9 = v15;
        }

        else if (!v10 && !strcmp(v15, "__debug_str"))
        {
          uint64_t v10 = v15;
        }

        else if (!v11 && !strncmp(v15, "__debug_line_str", 0x10uLL))
        {
          uint64_t v11 = v15;
        }

        else if (!v12 && !strcmp(v15, "__debug_ranges"))
        {
          uint64_t v12 = v15;
        }

        else if (!v13 && !strncmp(v15, "__debug_rnglists", 0x10uLL))
        {
          int v13 = v15;
        }

        else if (!strcmp(v15, "__debug_addr"))
        {
          v116 = v15;
        }

        else if (!strncmp(v15, "__debug_str_offs", 0x10uLL))
        {
          unint64_t v14 = v15;
        }

        v15 += 80;
        --v6;
      }

      while (v6);
      if (v7 && v8 && *((void *)v7 + 5) && *((void *)v8 + 5))
      {
        uint64_t v16 = a1[1];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16LL))(v16))
        {
          uint64_t v17 = a1[4];
          if (v9) {
            uint64_t v107 = *((void *)v9 + 4) + v17;
          }
          else {
            uint64_t v107 = 0LL;
          }
          int v19 = v116;
          if (v10)
          {
            uint64_t v110 = *((void *)v10 + 4) + v17;
            if (v11) {
              goto LABEL_45;
            }
          }

          else
          {
            uint64_t v110 = 0LL;
            if (v11)
            {
LABEL_45:
              uint64_t v108 = *((void *)v11 + 4) + v17;
              if (v12)
              {
LABEL_46:
                uint64_t v105 = *((void *)v12 + 4) + v17;
LABEL_54:
                if (v13) {
                  uint64_t v106 = *((void *)v13 + 4) + v17;
                }
                else {
                  uint64_t v106 = 0LL;
                }
                uint64_t v20 = v17 + *((void *)v7 + 4);
                uint64_t v117 = *((void *)v8 + 4) + v17;
                if (v19)
                {
                  uint64_t v102 = *((void *)v19 + 4) + v17;
                  if (!v14) {
                    goto LABEL_81;
                  }
                }

                else
                {
                  uint64_t v102 = 0LL;
                  if (!v14) {
                    goto LABEL_81;
                  }
                }

                uint64_t v21 = *((void *)v14 + 4) + v17;
                goto LABEL_74;
              }

void sub_186033E94()
{
}

uint64_t extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, void *a7)
{
  unint64_t v14 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a5 + 24), "__LINKEDIT");
  uint64_t v15 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(void *)(a5 + 24));
  uint64_t v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(*(void *)(a5 + 24));
  if (!v15) {
    return 0LL;
  }
  uint64_t v17 = v16;
  uint64_t v48 = a2;
  uint64_t v46 = a3;
  uint64_t v18 = *(void *)(a5 + 8);
  uint64_t v19 = v15[3];
  uint64_t v47 = a4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16LL))(v18))
  {
    uint64_t v20 = v15[2];
    uint64_t v21 = *(void *)(a5 + 32) + *(void *)(v14 + 24) - *(void *)(v14 + 40);
  }

  else
  {
    if ((*(_BYTE *)(a5 + 58) & 8) != 0)
    {
      uint64_t v23 = *(void *)(a5 + 64);
      if (!*(_BYTE *)(a5 + 80)) {
        uint64_t v23 = 0LL;
      }
      uint64_t v21 = *(void *)(a5 + 16) - v23;
      uint64_t v22 = v21 + v15[2];
      if (!(_DWORD)v19) {
        return 1LL;
      }
      goto LABEL_11;
    }

    uint64_t v21 = *(void *)(a5 + 16);
    uint64_t v20 = v15[2];
  }

  uint64_t v22 = v21 + v20;
  if (!(_DWORD)v19) {
    return 1LL;
  }
LABEL_11:
  if (!v15[5]) {
    return 1LL;
  }
  char v45 = a1;
  size_t v24 = v17;
  uint64_t v25 = a6;
  size_t v26 = a7;
  uint64_t v27 = v15[4];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32LL))(v18, v22, 16 * v19);
  if (result)
  {
    uint64_t v44 = v21 + v27;
    unint64_t v29 = v15[5];
    uint64_t v30 = v25;
    uint64_t v31 = result;
    if ((v45 & 1) != 0)
    {
      if (v48 && v47)
      {
        extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>( a5,  v30,  result,  v19,  v44,  v29);
        extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>( v48,  v46,  v47,  a5,  v30);
      }

      else
      {
        extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( (void *)a5,  (uint64_t)v30,  result,  v19,  v44,  v29,  v26);
      }
    }

    uint64_t result = 1LL;
    if (v14)
    {
      if (v24 && v24[14] && (v45 & 2) != 0 && v24[15])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16LL))(v18))
        {
          uint64_t v32 = *(void *)(v14 + 24) - *(void *)(v14 + 40);
          uint64_t v33 = v24[14] + *(void *)(a5 + 32);
        }

        else
        {
          if ((*(_BYTE *)(a5 + 58) & 8) != 0)
          {
            uint64_t v35 = *(void *)(a5 + 64);
            if (!*(_BYTE *)(a5 + 80)) {
              uint64_t v35 = 0LL;
            }
            uint64_t v34 = *(void *)(a5 + 16) - v35 + v24[14];
LABEL_31:
            uint64_t v36 = v24[15];
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32LL))(v18, v34, 4 * v36);
            uint64_t v38 = v37;
            if (!(_DWORD)v36 || v37)
            {
              uint64_t v39 = *(void *)(a5 + 24);
              uint64_t v40 = *(unsigned int *)(v39 + 20);
              int v49 = *(_DWORD *)(v39 + 16);
              uint64_t v50 = v39;
              uint64_t v51 = v39 + 32 + v40;
              uint64_t v53 = 0LL;
              uint64_t v54 = 0LL;
              uint64_t v52 = v39 + 32;
              unint64_t v41 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
              if (v41)
              {
                unint64_t v43 = v41;
                do
                {
                  if (*(_BYTE *)(v43 + 64) == 8) {
                    extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( a5,  v30,  v43,  v38,  v36,  v31,  v19,  v42,  v44,  v29,  v26);
                  }
                  unint64_t v43 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
                }

                while (v43);
              }

              return 1LL;
            }

            return 0LL;
          }

          uint64_t v32 = *(void *)(a5 + 16);
          uint64_t v33 = v24[14];
        }

        uint64_t v34 = v32 + v33;
        goto LABEL_31;
      }
    }
  }

  return result;
}

void extract_function_starts_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(*(void *)(a1 + 24));
  if (v6)
  {
    char v7 = v6;
    if (v6[3])
    {
      unint64_t v8 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__LINKEDIT");
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = *(void *)(a1 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16LL))(v10))
        {
          uint64_t v11 = *(void *)(v9 + 24) - *(void *)(v9 + 40) + v7[2] + *(void *)(a1 + 32);
        }

        else if ((*(_BYTE *)(a1 + 58) & 8) != 0)
        {
          uint64_t v12 = *(void *)(a1 + 64);
          if (!*(_BYTE *)(a1 + 80)) {
            uint64_t v12 = 0LL;
          }
          uint64_t v11 = *(void *)(a1 + 16) - v12 + v7[2];
        }

        else
        {
          uint64_t v11 = *(void *)(a1 + 16) + v7[2];
        }

        uint64_t v13 = v7[3];
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 32LL))(v10, v11, v13);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v23 = v14;
          unsigned int v24 = 0;
          uint64_t v25 = v11;
          uint64_t v26 = v13;
          unint64_t v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__TEXT");
          if (v16)
          {
            unint64_t v17 = *(void *)(a1 + 32) + *(void *)(v16 + 24);
            if (CSCppArchitecture::matches((CSCppArchitecture *)&v22, 0xCuLL))
            {
              unsigned int v18 = 0;
              goto LABEL_16;
            }

            BOOL v19 = CSCppArchitecture::matches((CSCppArchitecture *)&v21, 0x100000CuLL);
            uint64_t v15 = v23;
            unsigned int v18 = v24;
            if (v19)
            {
LABEL_16:
              if (*(_BYTE *)(v15 + v18))
              {
                do
                {
                  v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
                  if ((v17 & 1) != 0) {
                    int v20 = 272629824;
                  }
                  else {
                    int v20 = 272629760;
                  }
                  TRawSymbolOwnerData<Pointer64>::emplace_symbol( a2,  v17 & 0xFFFFFFFFFFFFFFFELL,  0LL,  (uint64_t)"$$$function-starts-fake-name$$$",  (uint64_t)"$$$function-starts-fake-mangled-name$$$",  v20,  0LL,  a3);
                }

                while (*(_BYTE *)(v23 + v24));
              }

              return;
            }

            while (*(_BYTE *)(v23 + v24))
            {
              v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
              TRawSymbolOwnerData<Pointer64>::emplace_symbol( a2,  v17,  0LL,  (uint64_t)"$$$function-starts-fake-name$$$",  (uint64_t)"$$$function-starts-fake-mangled-name$$$",  272629760,  0LL,  a3);
            }
          }
        }
      }
    }
  }

unsigned int *extract_debug_map_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a1 + 24), "__LINKEDIT");
  uint64_t result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(void *)(a1 + 24));
  if (!result || *(_DWORD *)(*(void *)(a1 + 24) + 12LL) == 9) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = result[3];
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
  if ((_DWORD)result)
  {
    uint64_t v9 = v6[2];
    uint64_t v10 = *(void *)(a1 + 32) + *(void *)(v4 + 24) - *(void *)(v4 + 40);
    goto LABEL_7;
  }

  if ((*(_BYTE *)(a1 + 58) & 8) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = v6[2];
LABEL_7:
    uint64_t v11 = v10 + v9;
    if (!(_DWORD)v8) {
      return result;
    }
    goto LABEL_12;
  }

  uint64_t v12 = *(void *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 80)) {
    uint64_t v12 = 0LL;
  }
  uint64_t v10 = *(void *)(a1 + 16) - v12;
  uint64_t v11 = v10 + v6[2];
  if ((_DWORD)v8)
  {
LABEL_12:
    if (v6[5])
    {
      uint64_t v13 = v6[4];
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32LL))( v7,  v11,  16 * v8);
      if (result)
      {
        uint64_t v14 = (uint64_t)result;
        uint64_t v15 = v10 + v13;
        uint64_t v16 = v6[5];
        extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, (uint64_t)result, v8, v15, v16);
        return extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( a1,  a2,  v14,  v8,  v15,  v16);
      }
    }
  }

  return result;
}

unint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::gc_support_flags( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(v2 + 20);
  int v11 = *(_DWORD *)(v2 + 16);
  uint64_t v12 = v2;
  uint64_t v13 = v2 + 32 + v3;
  uint64_t v14 = v2 + 32;
  unint64_t result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (result)
  {
    unint64_t v5 = result;
    while (1)
    {
      if (*(_DWORD *)v5 == 25
        && (!strcmp("__OBJC", (const char *)(v5 + 8)) || !strcmp("__DATA", (const char *)(v5 + 8))))
      {
        uint64_t v6 = *(unsigned int *)(v5 + 64);
        if ((_DWORD)v6) {
          break;
        }
      }

void sort_and_filter_extracted_data<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols(a2);
  int v159 = 0LL;
  uint64_t v160 = 0LL;
  uint64_t v158 = 0LL;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(_DWORD *)(v4 + 12);
  if (v6 == 9 || v6 == 10 && (*(_DWORD *)(a1 + 56) & 0x38000000) != 0x10000000)
  {
    uint64_t v28 = 0LL;
    unint64_t v29 = (void *)a2;
  }

  else
  {
    uint64_t v7 = *(unsigned int *)(v4 + 20);
    LODWORD(v152) = *(_DWORD *)(v4 + 16);
    uint64_t v153 = (void *)v4;
    uint64_t v154 = v4 + 32 + v7;
    uint64_t v156 = 0LL;
    uint64_t v157 = 0LL;
    uint64_t v155 = v4 + 32;
    while (1)
    {
      unint64_t v8 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v152);
      unint64_t v9 = v8;
      if (!v8) {
        break;
      }
      uint64_t v10 = *(void *)(v8 + 40);
      if (v10)
      {
        int v11 = *(_DWORD *)(v8 + 64);
        BOOL v27 = 0;
        if (!strcmp((const char *)(v8 + 16), "__TEXT"))
        {
          BOOL v12 = v11 == 11 || v11 == 0;
          if (v12 && (v11 & 0x80000400) != 0) {
            BOOL v27 = 1;
          }
        }

        if (!strstr((const char *)(v9 + 16), "__LINKINFO"))
        {
          uint64_t v14 = *(void *)(v9 + 32) + v5;
          uint64_t v15 = v159;
          if (v159 >= (__int128 *)v160)
          {
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v158) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556LL * ((v160 - v158) >> 3) > v18) {
              unint64_t v18 = 0x5555555555555556LL * ((v160 - v158) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v160 - v158) >> 3) >= 0x555555555555555LL) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v18;
            }
            int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v160, v19);
            unint64_t v22 = &v20[24 * v17];
            *(void *)unint64_t v22 = v14;
            *((void *)v22 + 1) = v10;
            *((_DWORD *)v22 + 4) = v27;
            unsigned int v24 = v158;
            uint64_t v23 = (char *)v159;
            uint64_t v25 = v22;
            if (v159 != (__int128 *)v158)
            {
              do
              {
                __int128 v26 = *(_OWORD *)(v23 - 24);
                *((_DWORD *)v25 - 2) = *((_DWORD *)v23 - 2);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                v23 -= 24;
              }

              while (v23 != v24);
              uint64_t v23 = v158;
            }

            uint64_t v16 = (__int128 *)(v22 + 24);
            uint64_t v158 = v25;
            int v159 = (__int128 *)(v22 + 24);
            uint64_t v160 = &v20[24 * v21];
            if (v23) {
              operator delete(v23);
            }
          }

          else
          {
            *(void *)int v159 = v14;
            *((void *)v15 + 1) = v10;
            uint64_t v16 = (__int128 *)((char *)v15 + 24);
            *((_DWORD *)v15 + 4) = v27;
          }

          int v159 = v16;
        }
      }
    }

    uint64_t v28 = (__int128 *)v158;
    uint64_t v30 = v159;
    unint64_t v29 = (void *)a2;
  }

  uint64_t v31 = (uint64_t *)v29[20];
  uint64_t v32 = (uint64_t *)v29[21];
  if (v31 == v32) {
    goto LABEL_194;
  }
  do
  {
    uint64_t v34 = *v31;
    uint64_t v33 = v31[1];
    if (v28 >= (__int128 *)v160)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - v158) >> 3);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556LL * ((v160 - v158) >> 3) > v36) {
        unint64_t v36 = 0x5555555555555556LL * ((v160 - v158) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v160 - v158) >> 3) >= 0x555555555555555LL) {
        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v37 = v36;
      }
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v160, v37);
      uint64_t v40 = &v38[24 * v35];
      *(void *)uint64_t v40 = v34;
      *((void *)v40 + 1) = v33;
      *((_DWORD *)v40 + 4) = 0;
      uint64_t v42 = v158;
      unint64_t v41 = (char *)v159;
      unint64_t v43 = v40;
      if (v159 != (__int128 *)v158)
      {
        do
        {
          __int128 v44 = *(_OWORD *)(v41 - 24);
          *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
          *(_OWORD *)(v43 - 24) = v44;
          v43 -= 24;
          v41 -= 24;
        }

        while (v41 != v42);
        unint64_t v41 = v158;
      }

      uint64_t v28 = (__int128 *)(v40 + 24);
      uint64_t v158 = v43;
      int v159 = (__int128 *)(v40 + 24);
      uint64_t v160 = &v38[24 * v39];
      if (v41) {
        operator delete(v41);
      }
    }

    else
    {
      *(void *)uint64_t v28 = v34;
      *((void *)v28 + 1) = v33;
      *((_DWORD *)v28 + 4) = 0;
      uint64_t v28 = (__int128 *)((char *)v28 + 24);
    }

    int v159 = v28;
    v31 += 3;
  }

  while (v31 != v32);
  uint64_t v30 = v28;
  uint64_t v28 = (__int128 *)v158;
LABEL_50:
  if (v28 == v30)
  {
    uint64_t v28 = v30;
    goto LABEL_194;
  }

  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>( (uint64_t)v28,  v30,  (uint64_t)&v152,  126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v28) >> 3)),  1);
  uint64_t v46 = *(uint64_t **)v3;
  uint64_t v153 = 0LL;
  uint64_t v154 = 0LL;
  uint64_t v152 = 0LL;
  if ((unint64_t)v46 < *(void *)(v3 + 8))
  {
    char v47 = 0;
    int v148 = 0;
    unint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    do
    {
      unint64_t v50 = (unint64_t)v46;
      while (1)
      {
        uint64_t v51 = (uint64_t *)(v50 + 104);
        while (1)
        {
          char v52 = atomic_load((unsigned int *)(v50 + 28));
          if ((v52 & 2) == 0) {
            break;
          }
          v50 += 104LL;
          unint64_t v53 = *(void *)(v3 + 8);
          v51 += 13;
          if (v50 >= v53) {
            goto LABEL_88;
          }
        }

        uint64_t v54 = (unsigned int *)(v50 + 28);
        unint64_t v55 = *(void *)v50;
        if (*(void *)v50 - v49 < v48) {
          break;
        }
        if (v159 != (__int128 *)v158)
        {
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v158) >> 3);
          uint64_t v57 = v158;
          do
          {
            unint64_t v58 = v56 >> 1;
            uint64_t v59 = (unint64_t *)&v57[24 * (v56 >> 1)];
            unint64_t v61 = *v59;
            unint64_t v60 = (char *)(v59 + 3);
            v56 += ~(v56 >> 1);
            if (v55 < v61) {
              unint64_t v56 = v58;
            }
            else {
              uint64_t v57 = v60;
            }
          }

          while (v56);
          if (v57 != v158 && v55 - *((void *)v57 - 3) < *((void *)v57 - 2))
          {
            int v148 = *((_DWORD *)v57 - 2);
            uint64_t v49 = *((void *)v57 - 3);
            unint64_t v48 = *((void *)v57 - 2);
            break;
          }
        }

        do
          unsigned int v62 = __ldxr(v54);
        while (__stxr(v62 | 0x1000, v54));
        v50 += 104LL;
        unint64_t v53 = *(void *)(v3 + 8);
        char v47 = 1;
        if (v50 >= v53)
        {
          unint64_t v29 = (void *)a2;
          goto LABEL_89;
        }
      }

      sort_inlined_functions<Pointer64>(v50);
      uint64_t v46 = *(uint64_t **)(v3 + 8);
      while (v51 != v46)
      {
        uint64_t v63 = *v51;
        v51 += 13;
        if (v63 != *(void *)v50)
        {
          uint64_t v46 = v51 - 13;
          break;
        }
      }

      __int128 v64 = (unsigned int *)(v50 + 28);
      __int16 v65 = atomic_load((unsigned int *)(v50 + 28));
      if ((v65 & 0x100) == 0)
      {
        unint64_t v66 = v48 + v49 - *(void *)v50;
        else {
          unint64_t v67 = *v46 - *(void *)v50;
        }
        if (v67 < v66) {
          unint64_t v66 = v67;
        }
        unint64_t v68 = *(void *)(v50 + 8);
        if (v68 >= v66) {
          unint64_t v69 = v66;
        }
        else {
          unint64_t v69 = *(void *)(v50 + 8);
        }
        if (v68) {
          unint64_t v66 = v69;
        }
        *(void *)(v50 + _Block_object_dispose((const void *)(v1 - 64), 8) = v66;
      }

      unsigned int v70 = atomic_load(v64);
      atomic_store(v70 | v148, v64);
      TRawSymbolOwnerData<Pointer64>::aliases_for_symbol(a2, (unint64_t *)v50, (uint64_t *)__p);
      std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>( (uint64_t *)&v152,  (uint64_t)v153,  (uint64_t)__p[0],  (uint64_t)__p[1],  0x4EC4EC4EC4EC4EC5LL * (((char *)__p[1] - (char *)__p[0]) >> 3));
      uint64_t v161 = __p;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v161);
      unint64_t v53 = *(void *)(v3 + 8);
    }

    while ((unint64_t)v46 < v53);
LABEL_88:
    unint64_t v29 = (void *)a2;
    if ((v47 & 1) == 0) {
      goto LABEL_102;
    }
LABEL_89:
    for (uint64_t i = *(void *)v3; ; i += 104LL)
    {
      if (i == v53) {
        goto LABEL_100;
      }
      __int16 v72 = atomic_load((unsigned int *)(i + 28));
      if ((v72 & 0x1000) != 0) {
        break;
      }
    }

    if (i == v53)
    {
LABEL_100:
      uint64_t i = v53;
      goto LABEL_101;
    }

    for (uint64_t j = i + 104; j != v53; j += 104LL)
    {
      __int16 v74 = atomic_load((unsigned int *)(j + 28));
      if ((v74 & 0x1000) == 0)
      {
        TRawSymbol<Pointer64>::operator=(i, j);
        i += 104LL;
      }
    }

LABEL_101:
    std::vector<TRawSymbol<Pointer64>>::erase(v3, i, *(void *)(v3 + 8));
  }

LABEL_146:
  uint64_t v106 = v29[62];
  uint64_t v107 = (unint64_t *)v29[63];
  if ((unint64_t *)v106 != v107)
  {
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>( v106,  v107,  (uint64_t)&v161,  126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v107 - v106) >> 3)),  1);
    __p[0] = 0LL;
    __p[1] = 0LL;
    int v151 = 0LL;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve( __p,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[63] - v29[62]) >> 3));
    uint64_t v109 = (uint64_t *)v29[62];
    uint64_t v108 = (uint64_t *)v29[63];
    if (v109 == v108)
    {
      uint64_t v108 = (uint64_t *)v29[62];
    }

    else
    {
      uint64_t v110 = 0LL;
      v111 = 0LL;
      uint64_t v112 = 0LL;
      char v113 = 1;
      do
      {
        mach_vm_address_t v114 = (const char *)v109[2];
        if ((v113 & 1) != 0)
        {
          char v113 = 0;
          uint64_t v112 = *v109;
          uint64_t v115 = v109[1];
          v109 += 3;
          uint64_t v110 = v115 + v112;
          v111 = v114;
        }

        else
        {
          size_t v116 = strlen(v111);
          if (!strncmp(v111, v114, v116))
          {
            char v113 = 0;
            uint64_t v120 = *v109;
            uint64_t v121 = v109[1];
            v109 += 3;
            uint64_t v110 = v121 + v120;
          }

          else
          {
            uint64_t v117 = v110 - v112;
            __int128 v118 = __p[1];
            if (__p[1] >= v151)
            {
              unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
              unint64_t v123 = v122 + 1;
              if (v122 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              else {
                unint64_t v124 = v123;
              }
              __int128 v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)&v151,  v124);
              __int128 v127 = &v125[24 * v122];
              *(void *)__int128 v127 = v112;
              *((void *)v127 + 1) = v117;
              *((void *)v127 + 2) = v111;
              int64x2_t v129 = (char *)__p[0];
              __int128 v128 = (char *)__p[1];
              mach_vm_address_t v130 = v127;
              if (__p[1] != __p[0])
              {
                do
                {
                  __int128 v131 = *(_OWORD *)(v128 - 24);
                  *((void *)v130 - 1) = *((void *)v128 - 1);
                  *(_OWORD *)(v130 - 24) = v131;
                  v130 -= 24;
                  v128 -= 24;
                }

                while (v128 != v129);
                __int128 v128 = (char *)__p[0];
              }

              unsigned int v119 = v127 + 24;
              __p[0] = v130;
              __p[1] = v127 + 24;
              int v151 = &v125[24 * v126];
              if (v128) {
                operator delete(v128);
              }
            }

            else
            {
              *(void *)__p[1] = v112;
              v118[1] = v117;
              unsigned int v119 = v118 + 3;
              v118[2] = v111;
            }

            uint64_t v112 = 0LL;
            v111 = 0LL;
            uint64_t v110 = 0LL;
            __p[1] = v119;
            uint64_t v108 = *(uint64_t **)(a2 + 504);
            char v113 = 1;
          }
        }
      }

      while (v109 != v108);
      if (v111 && v112 && v110)
      {
        uint64_t v132 = v110 - v112;
        uint64_t v133 = __p[1];
        if (__p[1] >= v151)
        {
          unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          unint64_t v137 = v136 + 1;
          if (v136 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          else {
            unint64_t v138 = v137;
          }
          uint64_t v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v151, v138);
          uint64_t v140 = &v139[24 * v136];
          int v142 = &v139[24 * v141];
          *(void *)uint64_t v140 = v112;
          *((void *)v140 + 1) = v132;
          *((void *)v140 + 2) = v111;
          int v134 = v140 + 24;
          uint64_t v144 = (char *)__p[0];
          uint64_t v143 = (char *)__p[1];
          if (__p[1] == __p[0])
          {
            uint64_t v135 = a2;
          }

          else
          {
            uint64_t v135 = a2;
            do
            {
              __int128 v145 = *(_OWORD *)(v143 - 24);
              *((void *)v140 - 1) = *((void *)v143 - 1);
              *(_OWORD *)(v140 - 24) = v145;
              v140 -= 24;
              v143 -= 24;
            }

            while (v143 != v144);
            uint64_t v143 = (char *)__p[0];
          }

          __p[0] = v140;
          __p[1] = v134;
          int v151 = v142;
          if (v143) {
            operator delete(v143);
          }
        }

        else
        {
          *(void *)__p[1] = v112;
          v133[1] = v132;
          int v134 = v133 + 3;
          v133[2] = v111;
          uint64_t v135 = a2;
        }

        __p[1] = v134;
        uint64_t v108 = *(uint64_t **)(v135 + 504);
        goto LABEL_189;
      }
    }

    int v134 = __p[1];
    uint64_t v135 = a2;
LABEL_189:
    int v146 = (__int128 *)__p[0];
    uint64_t v147 = *(void *)(v135 + 496);
    if (0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v134 - (unint64_t)__p[0]) >> 3) < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v147) >> 3))
    {
      *(void *)(v135 + 504) = v147;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>( v146,  (__int128 *)v134,  (void **)(v135 + 496));
      int v146 = (__int128 *)__p[0];
    }

    if (v146)
    {
      __p[1] = v146;
      operator delete(v146);
    }
  }

  __p[0] = &v152;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v28 = (__int128 *)v158;
LABEL_194:
  if (v28)
  {
    int v159 = v28;
    operator delete(v28);
  }

void sub_186035410( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  *(void *)(v21 - 8_Block_object_dispose((const void *)(v1 - 64), 8) = &a11;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a11 = &a14;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::slide_to_segment_addresses(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 + 384 != a2 && *(void *)(a1 + 384) == *(void *)(a1 + 392)) {
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( (char *)(a1 + 384),  *(char **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  uint64_t v7 = __p;
  if (__p == v25) {
    goto LABEL_22;
  }
  adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>((char **)(a1 + 384), &__p);
  if ((a4 & 1) == 0)
  {
    adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>((char **)(a1 + 160), &__p);
    uint64_t v8 = *(void *)(a1 + 160);
    unint64_t v9 = *(unint64_t **)(a1 + 168);
    unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
    else {
      uint64_t v11 = v10;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>( v8,  v9,  (uint64_t)&v26,  v11,  1);
  }

  adjustSymbolsToMatchSegmentDeltas<Pointer64>(a1 + 184, &__p);
  BOOL v12 = *(__n128 **)(a1 + 184);
  uint64_t v13 = *(__n128 **)(a1 + 192);
  unint64_t v14 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5LL * (((char *)v13 - (char *)v12) >> 3));
  uint64_t v15 = v13 == v12 ? 0LL : v14;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>( v12,  v13,  (uint64_t)&v26,  v15,  1);
  adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>((char **)(a1 + 208), &__p);
  uint64_t v16 = *(void *)(a1 + 208);
  unint64_t v17 = *(__int128 **)(a1 + 216);
  unint64_t v18 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v17 - v16) >> 3));
  uint64_t v19 = v17 == (__int128 *)v16 ? 0LL : v18;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>( v16,  v17,  (uint64_t)&v26,  v19,  1);
  uint64_t v20 = *(void *)(a1 + 240);
  uint64_t v7 = __p;
  if (!v20 || __p >= v25)
  {
LABEL_22:
    if (!v7) {
      return;
    }
    goto LABEL_23;
  }

  unint64_t v21 = *(void *)(a1 + 232);
  unint64_t v22 = v21 + v20;
  uint64_t v23 = (unint64_t *)__p;
  while (v21 < *v23 || v22 > v23[1] + *v23)
  {
    v23 += 3;
    if (v23 >= v25) {
      goto LABEL_22;
    }
  }

  *(void *)(a1 + 232) = v23[2] + v21;
  if (v7)
  {
LABEL_23:
    uint64_t v25 = v7;
    operator delete(v7);
  }

void sub_186035690( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  uint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    char v47 = 0LL;
    unint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>( &v47,  v7,  v8,  v9 >> 5);
    uint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    __n128 v45 = 0LL;
    uint64_t v46 = 0LL;
    __int128 __p = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>( &__p,  v11,  v12,  v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32LL)
    {
      unint64_t v15 = 126 - 2 * __clz((v48 - (_BYTE *)v47) >> 5);
      if (v48 == v47) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>( (unint64_t *)v47,  (unint64_t *)v48,  (uint64_t)&v50,  v16,  1);
      unint64_t v17 = 126 - 2 * __clz((v45 - (_BYTE *)__p) >> 5);
      if (v45 == __p) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>( (unint64_t *)__p,  (unint64_t *)v45,  (uint64_t)&v50,  v18,  1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }

    uint64_t v19 = (unint64_t *)v47;
    uint64_t v20 = (CSCppSegmentRange *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    if (v19 != (unint64_t *)v48 && v20 != (CSCppSegmentRange *)v45)
    {
      do
      {
        unint64_t v21 = (const char *)*((void *)v20 + 3);
        if (!v21) {
          unint64_t v21 = (const char *)*((void *)v20 + 2);
        }
        unint64_t v22 = (const char *)v19[3];
        if (!v22) {
          unint64_t v22 = (const char *)v19[2];
        }
        if (!strncmp(v21, v22, 0x10uLL)) {
          goto LABEL_24;
        }
        if (CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v19))
        {
          v19 += 4;
          continue;
        }

        if (!CSCppSegmentRange::is_skippable(v20))
        {
LABEL_24:
          uint64_t v23 = *(void *)v20;
          unint64_t v25 = *v19;
          unint64_t v24 = v19[1];
          unint64_t v26 = *(void *)v20 - *v19;
          uint64_t v28 = (unint64_t *)a4[1];
          unint64_t v27 = (unint64_t)a4[2];
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (_BYTE *)*a4) >> 3);
            unint64_t v31 = v30 + 1;
            if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)*a4) >> 3);
            if (2 * v32 > v31) {
              unint64_t v31 = 2 * v32;
            }
            if (v32 >= 0x555555555555555LL) {
              unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v33 = v31;
            }
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)(a4 + 2),  v33);
            unint64_t v36 = (unint64_t *)&v34[24 * v30];
            *unint64_t v36 = v25;
            v36[1] = v24;
            v36[2] = v26;
            uint64_t v38 = (char *)*a4;
            unint64_t v37 = (char *)a4[1];
            uint64_t v39 = v36;
            if (v37 != *a4)
            {
              do
              {
                __int128 v40 = *(_OWORD *)(v37 - 24);
                *(v39 - 1) = *((void *)v37 - 1);
                *(_OWORD *)(v39 - 3) = v40;
                v39 -= 3;
                v37 -= 24;
              }

              while (v37 != v38);
              unint64_t v37 = (char *)*a4;
            }

            unint64_t v29 = (char *)(v36 + 3);
            *a4 = v39;
            a4[1] = v36 + 3;
            a4[2] = &v34[24 * v35];
            if (v37) {
              operator delete(v37);
            }
          }

          else
          {
            *uint64_t v28 = v25;
            v28[1] = v24;
            unint64_t v29 = (char *)(v28 + 3);
            v28[2] = v26;
          }

          a4[1] = v29;
          a3 |= v23 != v25;
          v19 += 4;
        }

        uint64_t v20 = (CSCppSegmentRange *)((char *)v20 + 32);
      }

      while (v20 != (CSCppSegmentRange *)v45);
    }

    if ((a3 & 1) != 0)
    {
      unint64_t v41 = (unint64_t *)a4[1];
      unint64_t v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (_BYTE *)*a4) >> 3));
      if (v41 == *a4) {
        uint64_t v43 = 0LL;
      }
      else {
        uint64_t v43 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>( (uint64_t)*a4,  v41,  (uint64_t)&v50,  v43,  1);
    }

    else
    {
      a4[1] = *a4;
    }

    if (__p)
    {
      __n128 v45 = (char *)__p;
      operator delete(__p);
    }

    if (v47)
    {
      unint64_t v48 = (char *)v47;
      operator delete(v47);
    }
  }

void sub_1860359E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 64), 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1)) {
          unint64_t v24 = (const char *)*(a2 - 1);
        }
        else {
          unint64_t v24 = (const char *)*(a2 - 2);
        }
        if (v9[3]) {
          unint64_t v25 = (const char *)v9[3];
        }
        else {
          unint64_t v25 = (const char *)v9[2];
        }
        int v26 = strncmp(v24, v25, 0x10uLL);
        unint64_t v28 = *(a2 - 4);
        unint64_t v27 = a2 - 4;
        BOOL v29 = v28 < *v9;
        if (v26) {
          BOOL v29 = v26 < 0;
        }
        if (v29)
        {
          __int128 v32 = *(_OWORD *)v9;
          __int128 v34 = *((_OWORD *)v9 + 1);
          __int128 v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)unint64_t v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  v9 + 12,  a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( &v9[4 * (v13 >> 1)],  v9,  a2 - 4);
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  &v9[4 * (v13 >> 1)],  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 4,  v15 - 4,  a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 8,  &v9[4 * v14 + 4],  a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v15 - 4,  v15,  &v9[4 * v14 + 4]);
            __int128 v31 = *(_OWORD *)v9;
            __int128 v33 = *((_OWORD *)v9 + 1);
            __int128 v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)unint64_t v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          if (*(v9 - 1)) {
            unint64_t v17 = (const char *)*(v9 - 1);
          }
          else {
            unint64_t v17 = (const char *)*(v9 - 2);
          }
          if (v9[3]) {
            uint64_t v18 = (const char *)v9[3];
          }
          else {
            uint64_t v18 = (const char *)v9[2];
          }
          int v19 = strncmp(v17, v18, 0x10uLL);
          BOOL v20 = *(v9 - 4) < *v9;
          if (v19) {
            BOOL v20 = v19 < 0;
          }
          if (!v20)
          {
            uint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( v9,  a2);
            goto LABEL_24;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(a2 - 1)) {
        int v6 = (const char *)*(a2 - 1);
      }
      else {
        int v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        uint64_t v7 = (const char *)a1[3];
      }
      else {
        uint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      uint64_t v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        __int128 v13 = *(_OWORD *)a1;
        __int128 v12 = *((_OWORD *)a1 + 1);
        __int128 v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)uint64_t v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a2 - 4);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a2 - 4);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a1 + 12,  a2 - 4);
      return 1LL;
    default:
      unint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8);
      __int128 v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1LL;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      __int128 v33 = v2;
      break;
  }

  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      unint64_t v21 = (const char *)v16[3];
    }
    else {
      unint64_t v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      char v22 = (const char *)v15[3];
    }
    else {
      char v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        unint64_t v27 = (char *)a1 + v26;
        __int128 v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          BOOL v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          BOOL v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32LL;
        if (!v31)
        {
          __int128 v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }

      __int128 v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      *__int128 v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }

    unint64_t v15 = v16;
    v17 += 32LL;
    v16 += 4;
    if (v16 == v2) {
      return 1LL;
    }
  }

unsigned int *TDwarfInfoStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf32_compile_unit(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 24);
  BOOL result = (unsigned int *)(*(void *)a1 + v1);
  unsigned int v8 = result[1];
  uint64_t v9 = *result;
  if ((_DWORD)v9 == -1) {
    return 0LL;
  }
  unint64_t v10 = 11LL;
  if (v9 + 4 < v10) {
    return 0LL;
  }
  unint64_t v11 = (v1 + v9 + 4);
  if (v11 > v1 && v2 >= v11)
  {
    uint64_t v13 = 7LL;
    if (*((_BYTE *)result + v13) != 8)
    {
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        return 0LL;
      }
      __int16 v16 = 0;
      uint64_t v3 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v4 = "Compile unit with bad address_size\n";
      uint64_t v5 = (uint8_t *)&v16;
      goto LABEL_4;
    }

    if ((unsigned __int16)v8 < 5u || (v8 & 0xFF0000) == 0x10000)
    {
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
      return result;
    }

    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = 0;
      uint64_t v3 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v4 = "Unsupported compile unit type\n";
      uint64_t v5 = (uint8_t *)&v15;
      goto LABEL_4;
    }
  }

  else
  {
LABEL_29:
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = 0;
      uint64_t v3 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v4 = "Out of bounds compile unit\n";
      uint64_t v5 = (uint8_t *)&v14;
LABEL_4:
      _os_log_impl(&dword_185FC0000, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }

  return 0LL;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(uint64_t result, unsigned int a2)
{
  if (*(void *)(result + 24) < (unint64_t)a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v5,  (uint64_t)"Attempt to set cursor outside bounds",  36LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v6, &v4);
    Exception::Exception(v3, &v4);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v3);
  }

  *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 64), 8) = a2;
  return result;
}

void sub_18603624C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev_table@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  __int128 v4 = a1 + 4;
  uint64_t v5 = operator new(0x58uLL);
  v5[1] = 0LL;
  v5[2] = 0LL;
  void *v5 = off_189DF7FB8;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  v5[10] = v4;
  v5[3] = off_189DF8008;
  uint64_t v6 = (CSCppDwarfAbbrevTable *)(v5 + 3);
  *a2 = v5 + 3;
  a2[1] = v5;
  while (1)
  {
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    unsigned int v8 = result;
    if (!(_DWORD)result) {
      break;
    }
    uint64_t v9 = (CSCppDwarfAbbrev *)TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(a1);
    CSCppDwarfAbbrevTable::set_abbrev_at(v6, v8, v9);
  }

  return result;
}

void sub_186036330(_Unwind_Exception *a1)
{
}

void parse_dies<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>( uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t (***a8)(void, std::vector<std::string>::pointer), void *a9, void *a10, void *a11)
{
  unint64_t v11 = a8;
  char v13 = a6;
  uint64_t v14 = a4;
  unint64_t v108 = *(void *)(a2 + 56);
  uint64_t v109 = *(_OWORD **)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 80);
  int v18 = *(std::__shared_weak_count **)(a2 + 88);
  uint64_t v135 = v17;
  unint64_t v136 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }

  uint64_t v21 = *(void *)(v17 + 56);
  uint64_t v132 = 0LL;
  uint64_t v133 = 0LL;
  uint64_t v134 = 0LL;
  int64x2_t v129 = 0LL;
  mach_vm_address_t v130 = 0LL;
  __int128 v131 = 0LL;
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 24))
  {
    while (1)
    {
      unint64_t v22 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
      if (!v22)
      {
        unint64_t v27 = v130;
        if (v129 != v130)
        {
          --v130;
          if (v129 != v27 - 1)
          {
            uint64_t v28 = *(v27 - 2);
            if (v28)
            {
              BOOL v29 = v27 - 3;
              do
              {
                if (!*(_BYTE *)(v28 + 88)) {
                  break;
                }
                mach_vm_address_t v130 = v29 + 1;
                if (v29 + 1 == v129) {
                  break;
                }
                uint64_t v30 = *v29--;
                uint64_t v28 = v30;
              }

              while (v30);
            }
          }
        }

        goto LABEL_163;
      }

      uint64_t v23 = *(void *)(v135 + 8);
      if (v22 >= (*(void *)(v135 + 16) - v23) >> 3 || (uint64_t v24 = *(void *)(v23 + 8 * v22)) == 0)
      {
LABEL_167:
        if (v129)
        {
          mach_vm_address_t v130 = v129;
          operator delete(v129);
        }

        break;
      }

      int v25 = *(unsigned __int8 *)(v24 + 12);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 24LL))(v24) == 1)
      {
        *(_WORD *)(v21 + 76) = 0;
        *(void *)(v21 + 12_Block_object_dispose((const void *)(v1 - 64), 8) = *(void *)(v21 + 120);
        *(void *)(v21 + 16) = -1LL;
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 16LL))( v24,  v14,  *(unsigned __int16 *)(a2 + 36));
        LODWORD(v116) = 0;
        for (uint64_t i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>( v21,  a2,  a3,  &v116);
              i;
              uint64_t i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>( v21,  i,  a3,  &v116))
        {
          ;
        }

        if ((*(_BYTE *)(v21 + 76) & 0xC) == 0 || (*(_BYTE *)(v21 + 76) & 1) == 0)
        {
          if (v25)
          {
            unint64_t v34 = v130;
            uint64_t v35 = v130 - v129;
            unint64_t v36 = (v131 - (char *)v129) >> 2;
            if (v36 <= v35 + 1) {
              unint64_t v36 = v35 + 1;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v37) {
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
            }
            else {
              uint64_t v38 = 0LL;
            }
            unint64_t v55 = (uint64_t *)&v38[8 * v35];
            uint64_t *v55 = 0LL;
            uint64_t v39 = v55 + 1;
            __int16 v72 = v129;
            unint64_t v56 = v130;
            if (v130 != v129)
            {
              do
              {
                uint64_t v73 = *--v56;
                *--unint64_t v55 = v73;
              }

              while (v56 != v72);
              goto LABEL_159;
            }

            goto LABEL_160;
          }
        }

        else
        {
          uint64_t v127 = 0LL;
          uint64_t v128 = 0LL;
          int v40 = resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v21, &v128, &v127);
          int v126 = v40;
          if ((*(_WORD *)(v21 + 76) & 2) != 0)
          {
            if ((*(_WORD *)(v21 + 76) & 0x8000) != 0)
            {
              uint64_t v41 = *(void *)v21;
              uint64_t v42 = *(void *)v21 + *(unsigned int *)(v21 + 80);
            }

            else
            {
              uint64_t v41 = *(void *)v21;
              uint64_t v42 = *(void *)(v21 + 8);
            }

            uint64_t v49 = (void *)(v42 - v41);
            if (v49)
            {
              __int128 v104 = v49;
              int v126 = v40 | 0x100;
LABEL_66:
              char v50 = (void *)(*(void *)v21 + a1);
              if (a7) {
                char v50 = (void *)TAddressRelocator<Pointer64>::relocate(a7, *(void *)v21 + a1);
              }
              __int128 v125 = 0uLL;
              if (*(_DWORD *)(v24 + 8) == 29)
              {
                int v51 = 0;
                if (TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info( v21,  *(unsigned __int16 *)(a2 + 36))
                  && (v13 & 1) == 0)
                {
                  unsigned int v52 = *(unsigned __int16 *)(a2 + 36);
                  unsigned int v53 = *(unsigned __int16 *)(v21 + 76);
                  if (v52 < 5)
                  {
                    if ((v53 & 0x400) != 0 && *(_DWORD *)(v21 + 64)) {
                      goto LABEL_117;
                    }
LABEL_118:
                    uint64_t v77 = 0LL;
                  }

                  else
                  {
                    if ((v53 & 0x400) == 0) {
                      goto LABEL_118;
                    }
LABEL_117:
                    uint64_t v77 = path_from_file_index<Pointer64>( &v132,  *(_DWORD *)(v21 + 64),  *(unsigned int *)(a2 + 8),  a5,  v52);
                    unsigned int v53 = *(unsigned __int16 *)(v21 + 76);
                  }

                  *(void *)&__int128 v125 = v77;
                  *((int8x8_t *)&v125 + 1) = vbic_s8( *(int8x8_t *)(v21 + 68),  (int8x8_t)vceqz_s32((int32x2_t)vand_s8( (int8x8_t)vdup_n_s32(v53),  (int8x8_t)0x100000000800LL)));
                  int v51 = 1;
                }
              }

              else
              {
                int v51 = 0;
              }

              uint64_t v78 = *(void **)(v21 + 120);
              uint64_t v79 = *(void **)(v21 + 128);
              if (v78 == v79)
              {
                unsigned int v90 = v126;
                size_t v116 = v50;
                uint64_t v117 = v104;
                unint64_t v118 = 0LL;
                uint64_t v119 = 0LL;
                uint64_t v120 = v128;
                uint64_t v121 = v127;
                uint64_t v124 = 0LL;
                __int128 v122 = 0u;
                memset(v123, 0, 25);
                if (v51)
                {
                  __int128 v122 = v125;
                  unsigned int v90 = v126 | 0x80000000;
                }

                HIDWORD(v119) = v90;
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>( &v116,  1LL,  v24,  a9,  &v129);
                unint64_t v11 = a8;
                char v13 = a6;
                v137[0] = (void **)v123;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v137);
                uint64_t v14 = a4;
              }

              else
              {
                size_t v116 = 0LL;
                uint64_t v117 = 0LL;
                unint64_t v118 = 0LL;
                if (v51) {
                  uint64_t v80 = &v125;
                }
                else {
                  uint64_t v80 = 0LL;
                }
                do
                {
                  uint64_t v81 = (void **)(*v78 + a1);
                  if (a7) {
                    uint64_t v81 = (void **)TAddressRelocator<Pointer64>::relocate(a7, (unint64_t)v81);
                  }
                  v137[0] = v81;
                  uint64_t v82 = v78[1] - *v78;
                  uint64_t v115 = v82;
                  if (v82)
                  {
                    char v113 = v80;
                    unint64_t v83 = v117;
                    if ((unint64_t)v117 >= v118)
                    {
                      uint64_t v87 = std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>( (uint64_t *)&v116,  (uint64_t)&v114,  v137,  &v115,  &v128,  &v127,  &v126,  &v113);
                    }

                    else
                    {
                      uint64_t v85 = v127;
                      uint64_t v84 = v128;
                      int v86 = v126;
                      *uint64_t v117 = v81;
                      v83[1] = v82;
                      v83[2] = 0LL;
                      v83[3] = 0LL;
                      v83[4] = v84;
                      v83[5] = v85;
                      *((_OWORD *)v83 + 3) = 0u;
                      v83[12] = 0LL;
                      *((_OWORD *)v83 + 4) = 0u;
                      *(_OWORD *)((char *)v83 + 73) = 0u;
                      if (v51)
                      {
                        *((_OWORD *)v83 + 3) = v125;
                        v86 |= 0x80000000;
                      }

                      *((_DWORD *)v83 + 7) = v86;
                      *((_BYTE *)v83 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 1;
                      uint64_t v87 = (uint64_t)(v83 + 13);
                    }

                    uint64_t v117 = (void *)v87;
                  }

                  v78 += 2;
                }

                while (v78 != v79);
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>( v116,  0x4EC4EC4EC4EC4EC5LL * (v117 - v116),  v24,  a9,  &v129);
                unint64_t v11 = a8;
                char v13 = a6;
                uint64_t v14 = a4;
                if (v25)
                {
                  v88 = v130;
                  if (v130 >= (uint64_t *)v131)
                  {
                    uint64_t v91 = v130 - v129;
                    unint64_t v92 = (v131 - (char *)v129) >> 2;
                    if (v92 <= v91 + 1) {
                      unint64_t v92 = v91 + 1;
                    }
                    else {
                      unint64_t v93 = v92;
                    }
                    if (v93) {
                      uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)&v131,  v93);
                    }
                    else {
                      uint64_t v94 = 0LL;
                    }
                    unint64_t v95 = (uint64_t *)&v94[8 * v91];
                    *unint64_t v95 = 0LL;
                    uint64_t v89 = v95 + 1;
                    uint64_t v97 = v129;
                    unint64_t v96 = v130;
                    if (v130 != v129)
                    {
                      do
                      {
                        uint64_t v98 = *--v96;
                        *--unint64_t v95 = v98;
                      }

                      while (v96 != v97);
                      unint64_t v96 = v129;
                    }

                    int64x2_t v129 = v95;
                    mach_vm_address_t v130 = v89;
                    __int128 v131 = &v94[8 * v93];
                    if (v96) {
                      operator delete(v96);
                    }
                  }

                  else
                  {
                    *mach_vm_address_t v130 = 0LL;
                    uint64_t v89 = v88 + 1;
                  }

                  mach_vm_address_t v130 = v89;
                }

                v137[0] = (void **)&v116;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v137);
              }

              goto LABEL_163;
            }
          }

          else if (*(void *)(v21 + 120) != *(void *)(v21 + 128))
          {
            __int128 v104 = 0LL;
            goto LABEL_66;
          }

          if (v25)
          {
            uint64_t v54 = v130;
            if (v130 >= (uint64_t *)v131)
            {
              uint64_t v74 = v130 - v129;
              unint64_t v75 = v74 + 1;
              uint64_t v76 = v131 - (char *)v129;
              else {
                unint64_t v37 = v75;
              }
              if (v37) {
                uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
              }
              else {
                uint64_t v38 = 0LL;
              }
              unint64_t v55 = (uint64_t *)&v38[8 * v74];
              uint64_t *v55 = 0LL;
              uint64_t v39 = v55 + 1;
              unint64_t v99 = v129;
              unint64_t v56 = v130;
              if (v130 != v129)
              {
                do
                {
                  uint64_t v100 = *--v56;
                  *--unint64_t v55 = v100;
                }

                while (v56 != v99);
                goto LABEL_159;
              }

              goto LABEL_160;
            }

            *mach_vm_address_t v130 = 0LL;
            mach_vm_address_t v130 = v54 + 1;
          }
        }
      }

      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 24LL))(v24) == 2)
        {
          *(_WORD *)(v21 + 76) = 0;
          *(void *)(v21 + 12_Block_object_dispose((const void *)(v1 - 64), 8) = *(void *)(v21 + 120);
          *(void *)(v21 + 16) = -1LL;
          *(void *)(v21 + 104) = 0LL;
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 16LL))( v24,  v14,  *(unsigned __int16 *)(a2 + 36));
          TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges(v24);
          if (v25)
          {
            BOOL v31 = v130;
            if (v130 >= (uint64_t *)v131)
            {
              uint64_t v45 = v130 - v129;
              unint64_t v46 = (v131 - (char *)v129) >> 2;
              if (v46 <= v45 + 1) {
                unint64_t v46 = v45 + 1;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47) {
                unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v47);
              }
              else {
                unint64_t v48 = 0LL;
              }
              uint64_t v59 = (uint64_t *)&v48[8 * v45];
              *uint64_t v59 = 0LL;
              __int128 v32 = v59 + 1;
              unint64_t v61 = v129;
              unint64_t v60 = v130;
              if (v130 != v129)
              {
                do
                {
                  uint64_t v62 = *--v60;
                  *--uint64_t v59 = v62;
                }

                while (v60 != v61);
                unint64_t v60 = v129;
              }

              int64x2_t v129 = v59;
              mach_vm_address_t v130 = v32;
              __int128 v131 = &v48[8 * v47];
              if (v60) {
                operator delete(v60);
              }
            }

            else
            {
              *mach_vm_address_t v130 = 0LL;
              __int128 v32 = v31 + 1;
            }

            mach_vm_address_t v130 = v32;
          }

          if ((v13 & 1) == 0)
          {
            uint64_t v133 = v132;
            __int128 v63 = v109[1];
            v112[0] = *v109;
            v112[1] = v63;
            __int128 v64 = "";
            if ((*(_BYTE *)(v21 + 76) & 0x20) != 0) {
              __int128 v64 = *(const char **)(v21 + 40);
            }
            parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>( (uint64_t)v112,  v108,  *(_DWORD *)(v21 + 52),  v21 + 108,  v64,  a1,  a5,  a7,  v11,  (uint64_t)&v132,  a10);
            if (*(void *)(v21 + 144))
            {
              size_t v116 = *(void **)(v21 + 144);
              __int16 v65 = *(void **)(v21 + 120);
              unint64_t v66 = *(void **)(v21 + 128);
              if (v65 == v66)
              {
                int v68 = *(unsigned __int16 *)(v21 + 76);
                if ((~v68 & 3) == 0)
                {
                  unint64_t v69 = *(void *)v21 + a1;
                  if (a7)
                  {
                    unint64_t v69 = TAddressRelocator<Pointer64>::relocate(a7, v69);
                    LOWORD(v6_Block_object_dispose((const void *)(v1 - 64), 8) = *(_WORD *)(v21 + 76);
                  }

                  *(void *)&__int128 v125 = v69;
                  if ((v68 & 0x8000) != 0)
                  {
                    uint64_t v70 = *(void *)v21;
                    uint64_t v71 = *(void *)v21 + *(unsigned int *)(v21 + 80);
                  }

                  else
                  {
                    uint64_t v70 = *(void *)v21;
                    uint64_t v71 = *(void *)(v21 + 8);
                  }

                  v137[0] = (void **)(v71 - v70);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>( a11,  &v125,  (uint64_t *)v137,  (uint64_t *)&v116);
                }
              }

              else
              {
                do
                {
                  unint64_t v67 = *v65 + a1;
                  if (a7) {
                    unint64_t v67 = TAddressRelocator<Pointer64>::relocate(a7, v67);
                  }
                  *(void *)&__int128 v125 = v67;
                  v137[0] = (void **)(v65[1] - *v65);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>( a11,  &v125,  (uint64_t *)v137,  (uint64_t *)&v116);
                  v65 += 2;
                }

                while (v65 != v66);
              }
            }
          }

          goto LABEL_163;
        }

        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 16LL))( v24,  v14,  *(unsigned __int16 *)(a2 + 36));
        if (v25)
        {
          unint64_t v34 = v130;
          if (v130 < (uint64_t *)v131)
          {
LABEL_41:
            uint64_t *v34 = 0LL;
            uint64_t v39 = v34 + 1;
LABEL_162:
            mach_vm_address_t v130 = v39;
            goto LABEL_163;
          }

          uint64_t v43 = v130 - v129;
          unint64_t v44 = (v131 - (char *)v129) >> 2;
          if (v44 <= v43 + 1) {
            unint64_t v44 = v43 + 1;
          }
          else {
            unint64_t v37 = v44;
          }
          if (v37) {
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
          }
          else {
            uint64_t v38 = 0LL;
          }
          unint64_t v55 = (uint64_t *)&v38[8 * v43];
          uint64_t *v55 = 0LL;
          uint64_t v39 = v55 + 1;
          uint64_t v57 = v129;
          unint64_t v56 = v130;
          if (v130 != v129)
          {
            do
            {
              uint64_t v58 = *--v56;
              *--unint64_t v55 = v58;
            }

            while (v56 != v57);
LABEL_159:
            unint64_t v56 = v129;
          }

void sub_186036D84(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 16_Block_object_dispose((const void *)(v1 - 64), 8) = v3;
    operator delete(v3);
  }

  __int128 v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void std::vector<TRawSourceInfo<Pointer64>>::reserve(void **a1, unint64_t a2)
{
  __int128 v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667LL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( v3,  a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[40 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    __int128 v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *(_OWORD *)(v10 - 40);
        __int128 v14 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }

      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  __int128 v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *__int128 v14 = 0LL;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0LL;
  v14[4] = 0LL;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100]( (uint64_t)v24,  0LL);
  return i;
}

void sub_186037150(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 2);
  uint64_t v2 = a1[3];
  if (v2 <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v15,  (uint64_t)"Cursor overflow, attempt to read ULEB",  37LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }

  uint64_t v3 = *a1;
  unint64_t v4 = (char *)(*a1 + v1);
  int v6 = *v4;
  int64_t v5 = v4 + 1;
  uint64_t v7 = v6;
  if (v6 < 0)
  {
    unint64_t v8 = v3 + v2;
    v7 &= 0x7Fu;
    int v9 = 7;
    do
    {
      char v10 = *v5++;
      v7 |= (unint64_t)(v10 & 0x7F) << v9;
      v9 += 7;
    }

    while (v10 < 0);
  }

  *((_DWORD *)a1 + 2) = (_DWORD)v5 - v3;
  return v7;
}

void sub_186037258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(uint64_t *a1)
{
  int v2 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  char v3 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  __int128 __p = 0LL;
  char v25 = 0LL;
  uint64_t v26 = 0LL;
  do
  {
    int v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v6 = v5;
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    char v8 = !v7;
    if (!v7)
    {
      int v9 = v25;
      if (v25 >= v26)
      {
        uint64_t v11 = (v25 - (_BYTE *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        uint64_t v13 = v26 - (_BYTE *)__p;
        if ((v26 - (_BYTE *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        else {
          unint64_t v14 = v12;
        }
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)&v26,  v14);
        BOOL v17 = &v15[4 * v11];
        *(_WORD *)BOOL v17 = v4;
        *((_WORD *)v17 + 1) = v6;
        unint64_t v19 = (char *)__p;
        unint64_t v18 = v25;
        size_t v20 = v17;
        if (v25 != __p)
        {
          do
          {
            int v21 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }

          while (v18 != v19);
          unint64_t v18 = (char *)__p;
        }

        char v10 = v17 + 4;
        __int128 __p = v20;
        char v25 = v17 + 4;
        uint64_t v26 = &v15[4 * v16];
        if (v18) {
          operator delete(v18);
        }
      }

      else
      {
        *(_WORD *)char v25 = v4;
        *((_WORD *)v9 + 1) = v5;
        char v10 = v9 + 4;
      }

      char v25 = v10;
    }

    if (v6 == 33) {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    }
  }

  while ((v8 & 1) != 0);
  if (v2 <= 28)
  {
    if (v2 != 3)
    {
      if (v2 == 17 && has_minimum_source_info_attributes(&__p))
      {
        unint64_t v22 = operator new(0x48uLL);
        TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSourceInfoAbbrev( (uint64_t)v22,  17,  v3,  &__p,  (uint64_t)(a1 + 4));
        goto LABEL_35;
      }

      goto LABEL_34;
    }

void sub_1860374B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189DF7FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189DF7FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::__on_zero_shared( uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfAbbrevTable(CSCppDwarfAbbrevTable *a1)
{
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(uint64_t *a1)
{
  unint64_t v1 = *((unsigned int *)a1 + 2);
  if (a1[3] <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint8",  38LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 2) = v1 + 1;
  return *(unsigned __int8 *)(v2 + v1);
}

void sub_1860375F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev( uint64_t a1, int a2, char a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(void *)(a1 + 16) = *a4;
  *a4 = 0LL;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a4[1];
  a4[1] = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(void *)a1 = off_189DF8040;
  *(void *)(a1 + 64) = a5;
  *(_WORD *)(a1 + 72) = 0;
  uint64_t v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    int v9 = (char **)(a1 + 40);
    char v10 = (void *)(a1 + 56);
    do
    {
      unsigned int v11 = *v8;
      if (v11 <= 0x54)
      {
        if (*v8 <= 0x11u)
        {
          if (v11 != 3)
          {
            if (v11 == 17)
            {
              *(_WORD *)(a1 + 72) |= 1u;
              int v23 = v8[1];
              if ((v23 - 41) < 4 || v23 == 27)
              {
                unint64_t v12 = operator new(0x38uLL);
                uint64_t v25 = *(void *)(a1 + 64);
                int v26 = v8[1];
                *unint64_t v12 = off_189DF80D8;
                v12[1] = v25;
                v12[2] = v25 + 76;
                *((_WORD *)v12 + 12) = 1;
                void v12[4] = v25;
                v12[5] = 0LL;
                *((_DWORD *)v12 + 12) = v26;
                goto LABEL_49;
              }

              if (v23 == 1)
              {
                unint64_t v12 = operator new(0x20uLL);
                uint64_t v54 = *(void *)(a1 + 64);
                *unint64_t v12 = off_189DF8088;
                v12[1] = v54;
                v12[2] = v54 + 76;
                __int16 v36 = 1;
                goto LABEL_37;
              }
            }

            else
            {
LABEL_46:
              int v23 = v8[1];
            }

            action_for_data = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v23);
            goto LABEL_48;
          }

          *(_WORD *)(a1 + 72) |= 8u;
          uint64_t v20 = *(void *)(a1 + 64);
          uint64_t v21 = v20 + 32;
          __int16 v22 = 8;
          goto LABEL_35;
        }

        if (v11 == 18)
        {
          __int16 v37 = *(_WORD *)(a1 + 72);
          *(_WORD *)(a1 + 72) = v37 | 2;
          int v28 = v8[1];
          if ((v28 - 41) < 4 || v28 == 27)
          {
            unint64_t v12 = operator new(0x38uLL);
            uint64_t v39 = *(void *)(a1 + 64);
            int v40 = v8[1];
            *unint64_t v12 = off_189DF80D8;
            v12[1] = v39 + 8;
            v12[2] = v39 + 76;
            *((_WORD *)v12 + 12) = 2;
            void v12[4] = v39;
            v12[5] = 0LL;
            *((_DWORD *)v12 + 12) = v40;
            goto LABEL_49;
          }

          if (v28 == 1)
          {
            unint64_t v12 = operator new(0x20uLL);
            uint64_t v55 = *(void *)(a1 + 64);
            *unint64_t v12 = off_189DF8088;
            v12[1] = v55 + 8;
            v12[2] = v55 + 76;
            __int16 v36 = 2;
            goto LABEL_37;
          }

          __int16 v32 = -32766;
          *(_WORD *)(a1 + 72) = v37 | 0x8002;
          uint64_t v56 = *(void *)(a1 + 64);
          uint64_t v30 = v56 + 76;
          uint64_t v31 = v56 + 80;
LABEL_33:
          action_for_data = read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v28, v30, v32, v31);
        }

        else
        {
          if (v11 == 49)
          {
            *(_WORD *)(a1 + 72) |= 0x200u;
            uint64_t v15 = *(void *)(a1 + 64);
            uint64_t v16 = v15 + 60;
            __int16 v17 = 0x4000;
            __int16 v18 = 512;
          }

          else
          {
            if (v11 != 71) {
              goto LABEL_46;
            }
            *(_WORD *)(a1 + 72) |= 0x10u;
            uint64_t v15 = *(void *)(a1 + 64);
            uint64_t v16 = v15 + 48;
            __int16 v17 = 0x2000;
            __int16 v18 = 16;
          }

          action_for_data = read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v8[1],  v15 + 76,  v18,  v17,  v16);
        }
      }

      else
      {
        if (*v8 <= 0x6Du)
        {
          switch(*v8)
          {
            case 'U':
              unint64_t v12 = operator new(0x18uLL);
              uint64_t v13 = *(void *)(a1 + 64);
              int v14 = v8[1];
              *unint64_t v12 = off_189DF85D8;
              v12[1] = v13;
              *((_DWORD *)v12 + 4) = v14;
              break;
            case 'W':
              *(_WORD *)(a1 + 72) |= 0x1000u;
              int v28 = v8[1];
              uint64_t v34 = *(void *)(a1 + 64);
              uint64_t v30 = v34 + 76;
              uint64_t v31 = v34 + 72;
              __int16 v32 = 4096;
              goto LABEL_33;
            case 'X':
              *(_WORD *)(a1 + 72) |= 0x400u;
              int v28 = v8[1];
              uint64_t v33 = *(void *)(a1 + 64);
              uint64_t v30 = v33 + 76;
              uint64_t v31 = v33 + 64;
              __int16 v32 = 1024;
              goto LABEL_33;
            case 'Y':
              *(_WORD *)(a1 + 72) |= 0x800u;
              int v28 = v8[1];
              uint64_t v29 = *(void *)(a1 + 64);
              uint64_t v30 = v29 + 76;
              uint64_t v31 = v29 + 68;
              __int16 v32 = 2048;
              goto LABEL_33;
            default:
              goto LABEL_46;
          }

          goto LABEL_49;
        }

        if (*v8 <= 0x3FE2u)
        {
          if (v11 != 110 && v11 != 8199) {
            goto LABEL_46;
          }
          *(_WORD *)(a1 + 72) |= 4u;
          uint64_t v20 = *(void *)(a1 + 64);
          uint64_t v21 = v20 + 24;
          __int16 v22 = 4;
LABEL_35:
          action_for_data = read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v8[1],  v20 + 76,  v22,  v21,  v20 + 108);
          goto LABEL_48;
        }

        if (v11 == 16355)
        {
          *(_WORD *)(a1 + 72) |= 0x80u;
          unint64_t v12 = operator new(0x20uLL);
          uint64_t v35 = *(void *)(a1 + 64);
          *unint64_t v12 = off_189DF88F8;
          v12[1] = v35 + 56;
          v12[2] = v35 + 76;
          __int16 v36 = 128;
LABEL_37:
          *((_WORD *)v12 + 12) = v36;
          goto LABEL_49;
        }

        if (v11 != 16359) {
          goto LABEL_46;
        }
        action_for_data = read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v8[1],  *(void *)(a1 + 64) + 76LL,  256,  *(void *)(a1 + 64) + 57LL);
      }

void sub_186037B90(_Unwind_Exception *a1)
{
}

_DWORD *skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 1:
    case 7:
    case 20:
    case 32:
    case 36:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      int v2 = 8;
      goto LABEL_9;
    case 3:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF8218;
      goto LABEL_17;
    case 4:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF8268;
      goto LABEL_17;
    case 5:
    case 18:
    case 38:
    case 42:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      int v2 = 2;
      goto LABEL_9;
    case 6:
    case 14:
    case 19:
    case 23:
    case 28:
    case 29:
    case 31:
    case 40:
    case 44:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      int v2 = 4;
      goto LABEL_9;
    case 8:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF82B8;
      goto LABEL_17;
    case 9:
    case 24:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF8308;
      goto LABEL_17;
    case 10:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF81C8;
      goto LABEL_17;
    case 11:
    case 12:
    case 17:
    case 37:
    case 41:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      int v2 = 1;
      goto LABEL_9;
    case 13:
    case 15:
    case 21:
    case 26:
    case 27:
    case 34:
    case 35:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF8358;
      goto LABEL_17;
    case 16:
      uint64_t result = operator new(8uLL);
      char v3 = off_189DF8178;
LABEL_17:
      *(void *)uint64_t result = v3;
      break;
    case 22:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"DW_FORM_indirect not handled yet... ",  36LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v6);
    case 25:
    case 33:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      result[2] = 0;
      break;
    case 30:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      result[2] = 16;
      break;
    case 39:
    case 43:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8128;
      int v2 = 3;
LABEL_9:
      result[2] = v2;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Unhandled dwarf attribute ",  26LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      int v5 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v5, (uint64_t)v6);
  }

  return result;
}

void sub_186037E30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  switch(a1)
  {
    case 5:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF83F8;
      goto LABEL_10;
    case 6:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8448;
      goto LABEL_10;
    case 7:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8498;
      goto LABEL_10;
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
      goto LABEL_11;
    case 11:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF83A8;
      goto LABEL_10;
    case 13:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8588;
      goto LABEL_10;
    case 15:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8538;
      goto LABEL_10;
    default:
      if (a1 != 23)
      {
LABEL_11:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read data binding ",  36LL);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
        Exception::Exception(v10, &v11);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v10);
      }

      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF84E8;
LABEL_10:
      void *result = v8;
      result[1] = a4;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      return result;
  }

void sub_186038000( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  if (a1 > 36)
  {
    if ((a1 - 37) < 4)
    {
LABEL_3:
      uint64_t result = operator new(0x30uLL);
      void *result = off_189DF86C8;
      result[1] = a4;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      result[4] = a5;
      *((_DWORD *)result + 10) = a1;
      return result;
    }

void sub_18603818C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5)
{
  switch(a1)
  {
    case 16:
      uint64_t result = operator new(0x20uLL);
      void *result = off_189DF8718;
      result[1] = a5;
      result[2] = a2;
      *((_WORD *)result + 12) = a4 | a3;
      return result;
    case 17:
      uint64_t result = operator new(0x20uLL);
      char v10 = off_189DF8768;
      goto LABEL_8;
    case 18:
      uint64_t result = operator new(0x20uLL);
      char v10 = off_189DF87B8;
      goto LABEL_8;
    case 19:
      uint64_t result = operator new(0x20uLL);
      char v10 = off_189DF8808;
      goto LABEL_8;
    case 20:
      uint64_t result = operator new(0x20uLL);
      char v10 = off_189DF8858;
      goto LABEL_8;
    case 21:
      uint64_t result = operator new(0x20uLL);
      char v10 = off_189DF88A8;
LABEL_8:
      void *result = v10;
      result[1] = a5;
      result[2] = a2;
      *((_WORD *)result + 12) = a3;
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Unhandled form in read ref binding ",  35LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
  }

void sub_186038348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (a1 == 25)
  {
    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF8998;
  }

  else
  {
    if (a1 != 12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read flag binding ",  36LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF8948;
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_186038484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSymbolAbbrev(CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 1LL;
}

uint64_t TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    **(void **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read dwarf_address",  46LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(void *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 8;
  return v2;
}

void sub_186038610( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  char v3 = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 104LL))
  {
    _WORD *v4 = v6 | v5;
    uint64_t v8 = (_OWORD *)v3[9];
    __int128 v9 = v8[1];
    v13[0] = *v8;
    v13[1] = v9;
    int v10 = *(_DWORD *)(a1 + 48);
    switch(v10)
    {
      case ')':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(v3);
        goto LABEL_12;
      case '*':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)v3);
        goto LABEL_12;
      case '+':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)v3);
        goto LABEL_12;
      case ',':
        unsigned int v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)v3);
LABEL_12:
        unsigned int v12 = v11;
        break;
      default:
        if (v10 == 27) {
          unsigned int v12 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
        }
        else {
          unsigned int v12 = 0;
        }
        break;
    }

    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index( (uint64_t)v13,  *(_DWORD *)(*(void *)(a1 + 32) + 104LL),  v12);
    **(void **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  else
  {
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    *(void *)(a1 + 40) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action_stage2( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(_WORD **)(result + 16);
  int v3 = (unsigned __int16)*v2;
  int v4 = *(unsigned __int16 *)(result + 24);
  if ((v4 & v3) == 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a2;
    *uint64_t v2 = v4 | v3;
    uint64_t v7 = *(_OWORD **)(v6 + 72);
    __int128 v8 = v7[1];
    v9[0] = *v7;
    v9[1] = v8;
    uint64_t result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index( (uint64_t)v9,  *(_DWORD *)(*(void *)(result + 32) + 104LL),  *(_DWORD *)(result + 40));
    **(void **)(v5 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8);
  do
  {
    if (*(void *)(result + 24) <= (unint64_t)v1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v6,  (uint64_t)"Cursor overflow, attempt to skip ULEB",  37LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v7, &v5);
      Exception::Exception(v4, &v5);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v4);
    }

    uint64_t v2 = v1++;
  }

  while (*(char *)(*(void *)result + v2) < 0);
  *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 64), 8) = v1;
  return result;
}

void sub_186038884( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index( uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header(a1, a2);
  if (a3 >> 29)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Base relative index overflow in TDwarfAddressTableStream",  56LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v12);
  }

  if (8 * a3 > v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Base relative index not in bounds of current address table in TDwarfAddressTableStream",  86LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    int v10 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v10, (uint64_t)v12);
  }

  unint64_t v7 = 8 * a3 + a2;
  if (*(void *)(a1 + 24) < v7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Offset not in bounds of TDwarfAddressTableStream",  48LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    unsigned int v11 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v11, (uint64_t)v12);
  }

  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v7);
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
}

void sub_186038A80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 2) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint16",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned __int16 *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 2;
  return v2;
}

void sub_186038BB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 3) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read three bytes",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(_DWORD *)(*(void *)a1 + v1) & 0xFFFFFF;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 3;
  return v2;
}

void sub_186038CC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint32",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 4;
  return v2;
}

void sub_186038DD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header( uint64_t a1, unsigned int a2)
{
  if (a2 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Overflow calculating start of header in TDwarfAddressTableStream",  64LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v7);
  }

  unsigned int v3 = a2 - 8;
  if (*(void *)(a1 + 24) < (unint64_t)v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Invalid offset to address table header in TDwarfAddressTableStream",  66LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    __int128 v6 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v6, (uint64_t)v7);
  }

  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v3);
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
}

void sub_186038F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 8LL) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 3) {
    int v3 = 4;
  }
  else {
    int v3 = 8;
  }
  *(_DWORD *)(*(void *)a2 + 8LL) += v3;
}

uint64_t TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((v1 - v2) < 0x100)
  {
    if (v1 == (_DWORD)v2 || v1 - (int)v2 < (*(_BYTE *)(*(void *)result + v2) + 1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block1",  44LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }

    int v3 = (*(_BYTE *)(*(void *)result + v2) + 1);
  }

  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)result + v2) + 1;
  }

  *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 64), 8) = v3 + v2;
  return result;
}

void sub_1860390F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block2",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v3;
  return result;
}

void sub_186039204( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block4",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v3;
  return result;
}

void sub_186039318( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

size_t TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*a2);
}

size_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24) - v2;
  size_t result = strlen((const char *)(*(void *)a1 + v2));
  if ((int)result + 1 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Cursor overflow, attempt to skip FORM_string",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }

  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result + 1 + v2;
  return result;
}

void sub_18603943C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(uint64_t a1)
{
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
  unint64_t v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(void *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to skip FORM_block",  43LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v3;
  return result;
}

void sub_186039550( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*a2);
}

uint64_t TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read uint64",  39LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(void *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 8;
  return v2;
}

void sub_1860397EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(void *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Cursor overflow, attempt to read dwarf_offset",  45LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *(unsigned int *)(*(void *)a1 + v1);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v1 + 4;
  return v2;
}

void sub_186039958( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  unint64_t v3 = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

uint64_t TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(v3);
  **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(uint64_t a1)
{
  unsigned int v1 = 0;
  uint64_t v2 = 0LL;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  do
  {
    if (*(_DWORD *)(a1 + 24) == v3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Cursor overflow, attempt to read LEB",  36LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    int v4 = *(char *)(*(void *)a1 + v3);
    unsigned int v5 = v3 + 1;
    v2 |= (unint64_t)(*(_BYTE *)(*(void *)a1 + v3) & 0x7F) << v1;
    v1 += 7;
    ++v3;
  }

  while (v4 < 0);
  BOOL v6 = (v4 & 0x40) == 0 || v1 > 0x3F;
  uint64_t v7 = -1LL << v1;
  if (v6) {
    uint64_t v7 = 0LL;
  }
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v5;
  return v7 | v2;
}

void sub_186039B58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (a3 == 5)
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges(a1, (uint64_t)a2, 5);
  }

  else if (a3 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a3;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "Unexpected DWARF version parsing DW_AT_ranges: %d\n",  (uint8_t *)v4,  8u);
    }
  }

  else
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges(a1, a2, a3);
  }

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (!v3) {
    return;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  uint64_t v59 = 0LL;
  unint64_t v60 = 0LL;
  unint64_t v61 = 0LL;
  if (v6)
  {
    int v7 = v6;
    for (int i = 0; i != v7; ++i)
    {
      int v9 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
      int v10 = v9;
      __int128 v11 = v60;
      if (v60 >= v61)
      {
        uint64_t v13 = v59;
        uint64_t v14 = (v60 - v59) >> 2;
        unint64_t v15 = v14 + 1;
        uint64_t v16 = v61 - v59;
        if ((v61 - v59) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          __int16 v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)&v61,  v17);
          uint64_t v13 = v59;
          __int128 v11 = v60;
        }

        else
        {
          __int16 v18 = 0LL;
        }

        unint64_t v19 = &v18[4 * v14];
        *(_DWORD *)unint64_t v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }

        uint64_t v59 = v19;
        unint64_t v60 = v12;
        unint64_t v61 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }

      else
      {
        *(_DWORD *)unint64_t v60 = v9;
        uint64_t v12 = v11 + 4;
      }

      unint64_t v60 = v12;
    }
  }

  uint64_t v21 = *(uint64_t **)a2;
  if (!v21) {
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 16) == 35)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v21);
    if (v23 >= (v60 - v59) >> 2) {
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = *(_DWORD *)(v22 + 112) + *(_DWORD *)&v59[4 * v23];
  }

  else
  {
    int v24 = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(a1, (uint64_t)v21, a3);
  }

  if (v24 == -1) {
    goto LABEL_56;
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  *(_DWORD *)(v3 + 8) += v24;
  uint64_t v25 = (_OWORD *)v21[9];
  __int128 v26 = v25[1];
  v58[0] = *v25;
  v58[1] = v26;
  if (!*(void *)v3)
  {
    *(_OWORD *)*(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = xmmword_1860A02F0;
    goto LABEL_56;
  }

  uint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  unint64_t v29 = -1LL;
  while (1)
  {
    int v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
    char v31 = v30;
    if (v30 != 1) {
      break;
    }
    unsigned int v38 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3);
    uint64_t v27 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index( (uint64_t)v58,  *(_DWORD *)(*(void *)(a1 + 8) + 104LL),  v38);
LABEL_49:
    if (!*(void *)v3) {
      goto LABEL_53;
    }
  }

  if (v30 == 4)
  {
    unint64_t v32 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    unint64_t v33 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    uint64_t v34 = *(void **)(a1 + 8);
    uint64_t v35 = (unint64_t *)v34[16];
    unint64_t v36 = v34[17];
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v39 = v34[15];
      uint64_t v40 = ((uint64_t)v35 - v39) >> 4;
      unint64_t v41 = v40 + 1;
      uint64_t v42 = v36 - v39;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      else {
        unint64_t v43 = v41;
      }
      unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)(v34 + 17),  v43);
      uint64_t v46 = (unint64_t *)&v44[16 * v40];
      unint64_t *v46 = v32;
      v46[1] = v33;
      unint64_t v48 = (char *)v34[15];
      uint64_t v47 = (char *)v34[16];
      uint64_t v49 = v46;
      if (v47 != v48)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v47 - 1);
          v49 -= 2;
          v47 -= 16;
        }

        while (v47 != v48);
        uint64_t v47 = (char *)v34[15];
      }

      __int16 v37 = v46 + 2;
      v34[15] = v49;
      v34[16] = v46 + 2;
      v34[17] = &v44[16 * v45];
      if (v47) {
        operator delete(v47);
      }
    }

    else
    {
      unint64_t *v35 = v32;
      v35[1] = v33;
      __int16 v37 = v35 + 2;
    }

    v34[16] = v37;
    if (v32 < v29) {
      unint64_t v29 = v32;
    }
    if (v28 <= v33) {
      unint64_t v28 = v33;
    }
    goto LABEL_49;
  }

  if (v30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v56);
    int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v56,  (uint64_t)"Unimplemented range list entry kind",  35LL);
    LOBYTE(v54[0]) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v54, 1LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v57, &v55);
    Exception::Exception(v54, &v55);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v54);
  }

void sub_18603A0C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  unint64_t v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges( uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(result, v4, a3);
    if ((_DWORD)result != -1)
    {
      uint64_t v6 = a2[5];
      if (v6)
      {
        *(_DWORD *)(v6 + 8) += result;
        uint64_t v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        uint64_t v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        unint64_t v9 = 0LL;
        if (v7 | v8)
        {
          uint64_t v10 = *(void *)(*(void *)(v5 + 8) + 88LL);
          unint64_t v11 = -1LL;
          do
          {
            if (v7 == -1)
            {
              uint64_t v10 = v8;
            }

            else
            {
              unint64_t v12 = v7 + v10;
              unint64_t v13 = v10 + v8;
              uint64_t v14 = *(void **)(v5 + 8);
              unint64_t v15 = (unint64_t *)v14[16];
              unint64_t v16 = v14[17];
              if ((unint64_t)v15 >= v16)
              {
                uint64_t v18 = v14[15];
                uint64_t v19 = ((uint64_t)v15 - v18) >> 4;
                unint64_t v20 = v19 + 1;
                uint64_t v21 = v16 - v18;
                if (v21 >> 3 > v20) {
                  unint64_t v20 = v21 >> 3;
                }
                else {
                  unint64_t v22 = v20;
                }
                int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)(v14 + 17),  v22);
                uint64_t v25 = (unint64_t *)&v24[16 * v19];
                *uint64_t v25 = v12;
                v25[1] = v13;
                uint64_t v27 = (char *)v14[15];
                __int128 v26 = (char *)v14[16];
                unint64_t v28 = v25;
                if (v26 != v27)
                {
                  do
                  {
                    *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
                    v28 -= 2;
                    v26 -= 16;
                  }

                  while (v26 != v27);
                  __int128 v26 = (char *)v14[15];
                }

                unint64_t v17 = v25 + 2;
                v14[15] = v28;
                v14[16] = v25 + 2;
                v14[17] = &v24[16 * v23];
                if (v26) {
                  operator delete(v26);
                }
              }

              else
              {
                *unint64_t v15 = v12;
                v15[1] = v13;
                unint64_t v17 = v15 + 2;
              }

              v14[16] = v17;
              if (v12 < v11) {
                unint64_t v11 = v12;
              }
              if (v9 <= v13) {
                unint64_t v9 = v13;
              }
            }

            uint64_t v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
            uint64_t v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
          }

          while (v7 | v8);
        }

        else
        {
          unint64_t v11 = -1LL;
        }

        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v6, 0);
        uint64_t v29 = *(void *)(v5 + 8);
        *(void *)uint64_t v29 = v11;
        *(void *)(v29 + _Block_object_dispose((const void *)(v1 - 64), 8) = v9;
        if (v11 != -1LL)
        {
          if (v9) {
            *(_WORD *)(v29 + 76) |= 3u;
          }
        }
      }
    }
  }

  return result;
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v3 = *(_DWORD *)(a1 + 16);
  switch(v3)
  {
    case 6:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a2);
    case 7:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(a2);
    case 23:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a2);
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v8 = a3;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n",  buf,  0xEu);
    int v3 = *(_DWORD *)(a1 + 16);
  }

  fprintf((FILE *)*MEMORY[0x1895F89D0], "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", a3, v3);
  return 0xFFFFFFFFLL;
}

uint64_t TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    uint64_t v4 = *(void *)(result + 40);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    uint64_t v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *uint64_t v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }

  return result;
}

const char *TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return (const char *)TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(v3);
  **(void **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

const char *TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 24) - v2;
  uint64_t v4 = (const char *)(*(void *)a1 + v2);
  unsigned int v5 = strlen(v4) + 1;
  if (v5 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Cursor overflow, attempt to read FORM_string",  44LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
    Exception::Exception(v8, &v9);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v8);
  }

  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v5 + v2;
  return v4;
}

void sub_18603A638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if ((*(_WORD *)(result + 24) & **(_WORD **)(result + 16)) != 0)
  {
    *((_DWORD *)v2 + 2) += 4;
  }

  else
  {
    uint64_t v3 = result;
    uint64_t v4 = v2[8];
    int v5 = *(_DWORD *)(result + 40);
    switch(v5)
    {
      case '%':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(*a2);
        goto LABEL_11;
      case '&':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)*a2);
        goto LABEL_11;
      case '\'':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)*a2);
        goto LABEL_11;
      case '(':
        int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)*a2);
        goto LABEL_11;
      default:
        if (v5 == 26)
        {
          int v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(*a2);
LABEL_11:
          if ((v6 & 0xC0000000) != 0)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"FORM_strx index overflow",  24LL);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
            Exception::Exception(v12, &v13);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v12);
          }
        }

        else
        {
          int v6 = 0;
        }

        int v7 = **(_DWORD **)(v3 + 32);
        if (__CFADD__(v7, 4 * v6))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"FORM_strx offset overflow",  25LL);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
          Exception::Exception(v12, &v13);
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(v10, (uint64_t)v12);
        }

        TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v7 + 4 * v6);
        unsigned int v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(v4);
        uint64_t v9 = v2[5];
        uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v9, v8);
        **(_WORD **)(v3 + 16) |= *(_WORD *)(v3 + 24);
        **(void **)(v3 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(void *)v9 + *(unsigned int *)(v9 + 8);
        break;
    }
  }

  return result;
}

void sub_18603A894( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result = *a2;
  int v5 = *(_WORD **)(a1 + 16);
  int v6 = (unsigned __int16)*v5;
  int v7 = *(unsigned __int16 *)(a1 + 24);
  if ((v7 & v6) != 0)
  {
    if (a3 >= 3) {
      int v8 = 4;
    }
    else {
      int v8 = 8;
    }
    *(_DWORD *)(result + 8) += v8;
  }

  else
  {
    _WORD *v5 = v7 | v6;
    if (a3 > 2) {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    }
    else {
      uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    }
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

uint64_t TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t result)
{
  unsigned int v1 = *(_BYTE **)(result + 8);
  **(_WORD **)(result + 16) |= *(_WORD *)(result + 24);
  _BYTE *v1 = 1;
  return result;
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSourceInfoAbbrev( uint64_t a1, int a2, char a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(void *)(a1 + 16) = *a4;
  *a4 = 0LL;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a4[1];
  a4[1] = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(void *)a1 = off_189DF89E8;
  *(void *)(a1 + 64) = a5;
  int v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    uint64_t v9 = (char **)(a1 + 40);
    uint64_t v10 = (void *)(a1 + 56);
    do
    {
      unsigned int v11 = *v8;
      if (v11 <= 0x51)
      {
        if (*v8 > 0x11u)
        {
          if (v11 != 18)
          {
            if (v11 != 27)
            {
LABEL_42:
              int v15 = v8[1];
LABEL_43:
              action_for_string = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v15);
              goto LABEL_44;
            }

            uint64_t v13 = *(void *)(a1 + 64);
            uint64_t v14 = v13 + 40;
            __int16 v12 = 32;
LABEL_21:
            action_for_string = read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v8[1],  v13 + 76,  v12,  v14,  v13 + 108);
            goto LABEL_44;
          }

          int v22 = v8[1];
          if ((v22 - 41) < 4 || v22 == 27)
          {
            unint64_t v17 = operator new(0x38uLL);
            uint64_t v28 = *(void *)(a1 + 64);
            int v29 = v8[1];
            *unint64_t v17 = off_189DF80D8;
            v17[1] = v28 + 8;
            v17[2] = v28 + 76;
            *((_WORD *)v17 + 12) = 2;
LABEL_39:
            v17[4] = v28;
            v17[5] = 0LL;
            *((_DWORD *)v17 + 12) = v29;
            goto LABEL_45;
          }

          if (v22 != 1)
          {
            uint64_t v51 = *(void *)(a1 + 64);
            uint64_t v24 = v51 + 76;
            uint64_t v25 = v51 + 80;
            __int16 v21 = -32766;
LABEL_41:
            action_for_string = read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v22, v24, v21, v25);
LABEL_44:
            unint64_t v17 = action_for_string;
            goto LABEL_45;
          }

          uint64_t v46 = operator new(0x20uLL);
          unint64_t v17 = v46;
          uint64_t v49 = *(void *)(a1 + 64);
          void *v46 = off_189DF8088;
          v46[1] = v49 + 8;
          v46[2] = v49 + 76;
          __int16 v48 = 2;
        }

        else
        {
          if (v11 == 16)
          {
            int v22 = v8[1];
            uint64_t v26 = *(void *)(a1 + 64);
            uint64_t v24 = v26 + 76;
            uint64_t v25 = v26 + 52;
            __int16 v21 = 64;
            goto LABEL_41;
          }

          if (v11 != 17) {
            goto LABEL_42;
          }
          int v15 = v8[1];
          if ((v15 - 41) < 4 || v15 == 27)
          {
            unint64_t v17 = operator new(0x38uLL);
            uint64_t v18 = *(void *)(a1 + 64);
            int v19 = v8[1];
            *unint64_t v17 = off_189DF80D8;
            v17[1] = v18;
            v17[2] = v18 + 76;
            *((_WORD *)v17 + 12) = 1;
            v17[4] = v18;
            v17[5] = 0LL;
            *((_DWORD *)v17 + 12) = v19;
            goto LABEL_45;
          }

          if (v15 != 1) {
            goto LABEL_43;
          }
          uint64_t v46 = operator new(0x20uLL);
          unint64_t v17 = v46;
          uint64_t v47 = *(void *)(a1 + 64);
          void *v46 = off_189DF8088;
          v46[1] = v47;
          v46[2] = v47 + 76;
          __int16 v48 = 1;
        }

        *((_WORD *)v46 + 12) = v48;
      }

      else
      {
        if (*v8 > 0x72u)
        {
          if (v11 == 115)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v30 = *(void *)(a1 + 64);
            uint64_t v24 = v30 + 76;
            uint64_t v25 = v30 + 104;
            goto LABEL_41;
          }

          if (v11 == 116)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v32 = *(void *)(a1 + 64);
            uint64_t v24 = v32 + 76;
            uint64_t v25 = v32 + 112;
            goto LABEL_41;
          }

          if (v11 != 16368) {
            goto LABEL_42;
          }
          __int16 v12 = 0;
          uint64_t v13 = *(void *)(a1 + 64);
          uint64_t v14 = v13 + 144;
          goto LABEL_21;
        }

        if (v11 != 82)
        {
          if (v11 == 114)
          {
            __int16 v21 = 0;
            int v22 = v8[1];
            uint64_t v23 = *(void *)(a1 + 64);
            uint64_t v24 = v23 + 76;
            uint64_t v25 = v23 + 108;
            goto LABEL_41;
          }

          goto LABEL_42;
        }

        int v15 = v8[1];
        if ((v15 - 41) < 4 || v15 == 27)
        {
          unint64_t v17 = operator new(0x38uLL);
          uint64_t v28 = *(void *)(a1 + 64);
          int v29 = v8[1];
          *unint64_t v17 = off_189DF80D8;
          v17[1] = v28 + 16;
          v17[2] = v28 + 76;
          *((_WORD *)v17 + 12) = 0;
          goto LABEL_39;
        }

        if (v15 != 1) {
          goto LABEL_43;
        }
        unint64_t v17 = operator new(0x20uLL);
        uint64_t v50 = *(void *)(a1 + 64);
        *unint64_t v17 = off_189DF8088;
        v17[1] = v50 + 16;
        v17[2] = v50 + 76;
        *((_WORD *)v17 + 12) = 0;
      }

void sub_18603B0AC(_Unwind_Exception *a1)
{
}

void TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSourceInfoAbbrev( CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 2LL;
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSkipAbbrev( uint64_t a1, int a2, char a3, void *a4)
{
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(void *)(a1 + 16) = *a4;
  *a4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a4[1];
  a4[1] = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a4[2];
  a4[2] = v6;
  *(void *)a1 = off_189DF8A30;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 != *(void *)(a1 + 24))
  {
    int v8 = (char **)(a1 + 40);
    uint64_t v9 = (void *)(a1 + 56);
    do
    {
      uint64_t v10 = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(*(unsigned __int16 *)(v7 + 2));
      unsigned int v11 = v10;
      __int16 v12 = *(void **)(a1 + 40);
      if (v12 != *(void **)(a1 + 48)
        && (v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v10 + 32LL))(v10), __int16 v12 = *(void **)(a1 + 48), v13)
        && (int v14 = (*(uint64_t (**)(void))(*(void *)*(v12 - 1) + 32LL))(*(v12 - 1)),
            __int16 v12 = *(void **)(a1 + 48),
            v14))
      {
        *(_DWORD *)(*(v12 - 1) + 8LL) += v11[2];
        (*(void (**)(_DWORD *))(*(void *)v11 + 8LL))(v11);
      }

      else
      {
        if ((unint64_t)v12 >= *v9)
        {
          uint64_t v16 = ((char *)v12 - *v8) >> 3;
          uint64_t v17 = *v9 - (void)*v8;
          uint64_t v18 = v17 >> 2;
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v19);
          }
          else {
            unint64_t v20 = 0LL;
          }
          __int16 v21 = &v20[8 * v16];
          *(void *)__int16 v21 = v11;
          int v15 = v21 + 8;
          uint64_t v23 = *(char **)(a1 + 40);
          int v22 = *(char **)(a1 + 48);
          if (v22 != v23)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v21 - 1) = v24;
              v21 -= 8;
            }

            while (v22 != v23);
            int v22 = *v8;
          }

          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v15;
          *(void *)(a1 + 56) = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *__int16 v12 = v11;
          int v15 = v12 + 1;
        }

        *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v15;
      }

      v7 += 4LL;
    }

    while (v7 != *(void *)(a1 + 24));
  }

  return a1;
}

void sub_18603B2B0(_Unwind_Exception *a1)
{
}

void TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipAbbrev(CSCppDwarfAbbrev *a1)
{
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 0LL;
}

uint64_t std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100]((void **)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 80);
    operator delete(v2);
  }

uint64_t parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>( uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  uint64_t v4 = a2;
  int v6 = *(unsigned __int16 *)(a1 + 76);
  if ((v6 & 0x10) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 48) & (v6 << 18 >> 31);
    if ((v6 & 0x2000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 48);
    }
    __int16 v9 = -8209;
  }

  else
  {
    if ((v6 & 0x200) == 0) {
      return 0LL;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 60) & (v6 << 17 >> 31);
    if ((v6 & 0x4000) != 0) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 60);
    }
    __int16 v9 = -16897;
  }

  *(_WORD *)(a1 + 76) = v6 & v9;
  int v10 = (*a4)++;
  if (v10 < 10)
  {
    if (v8) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v7 == 0;
    }
    if (v14)
    {
      unint64_t v15 = *(void *)(a2 + 24);
    }

    else
    {
      uint64_t v16 = *a3;
      uint64_t v17 = a3[1];
      if (v17 != *a3)
      {
        unint64_t v18 = v17 - *a3;
        do
        {
          unint64_t v19 = v18 >> 1;
          unint64_t v20 = &v16[v18 >> 1];
          uint64_t v22 = *v20;
          __int16 v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          else {
            uint64_t v16 = v21;
          }
        }

        while (v18);
      }

      if (v16 == v17
        || (v4 = *v16, v23 = *(void *)(*v16 + 16), unint64_t v15 = *(void *)(*v16 + 24), (unint64_t)v7 - v23 >= v15))
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          unsigned int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
          __int16 v12 = "Ref addr is not within the bounds of any compile unit";
          int v13 = buf;
          goto LABEL_34;
        }

        return 0LL;
      }

      unsigned int v8 = v7 - v23;
    }

    if (v15 >= v8)
    {
      read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8, v4);
      return v4;
    }

    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v25 = 0;
      unsigned int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int16 v12 = "Out-of-bounds abstract origin or specification offset";
      int v13 = (uint8_t *)&v25;
      goto LABEL_34;
    }
  }

  else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    __int16 v27 = 0;
    unsigned int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int16 v12 = "Possible reference cycle in DIE";
    int v13 = (uint8_t *)&v27;
LABEL_34:
    _os_log_impl(&dword_185FC0000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
  }

  return 0LL;
}

uint64_t resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t a1, void *a2, void *a3)
{
  __int16 v3 = *(_WORD *)(a1 + 76);
  uint64_t v4 = (void *)(a1 + 24);
  if ((v3 & 0xC) == 8) {
    uint64_t v5 = (uint64_t *)(a1 + 32);
  }
  else {
    uint64_t v5 = (uint64_t *)(a1 + 24);
  }
  uint64_t v6 = *v5;
  if ((v3 & 0xC) == 8) {
    int v7 = 67141633;
  }
  else {
    int v7 = 67174401;
  }
  *a2 = v6;
  if ((v3 & 4) != 0) {
    int v8 = 0x200000;
  }
  else {
    int v8 = 0x100000;
  }
  int v9 = v7 | v8;
  if ((v3 & 4) == 0) {
    uint64_t v4 = (void *)(a1 + 32);
  }
  *a3 = *v4;
  if (*(_BYTE *)(a1 + 56) == 1 && (v3 & 0x80u) != 0) {
    unsigned int v11 = v9 | 0x40;
  }
  else {
    unsigned int v11 = v9;
  }
  if (*(_BYTE *)(a1 + 57) == 1) {
    unsigned int v12 = v11 | 0x80;
  }
  else {
    unsigned int v12 = v11;
  }
  if ((v3 & 0x100) != 0) {
    return v12;
  }
  else {
    return v11;
  }
}

unint64_t TAddressRelocator<Pointer64>::relocate(void *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int16 v3 = (void *)a1[3];
  if (a2 - *v3 < v3[1]) {
    return v3[2] + a2;
  }
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    uint64_t v6 = (void *)*a1;
    do
    {
      unint64_t v7 = v5 >> 1;
      int v8 = &v6[3 * (v5 >> 1)];
      unint64_t v10 = *v8;
      int v9 = v8 + 3;
      v5 += ~(v5 >> 1);
      if (v10 > a2) {
        unint64_t v5 = v7;
      }
      else {
        uint64_t v6 = v9;
      }
    }

    while (v5);
    if (v6 != (void *)*a1)
    {
      uint64_t v11 = *(v6 - 3);
      unint64_t v12 = *(v6 - 2);
      __int16 v3 = v6 - 3;
      if (a2 - v11 < v12)
      {
        a1[3] = v3;
        return v3[2] + a2;
      }
    }
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    unint64_t v15 = v2;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Attempt to relocate address [0x%llx], which is outside segment deltas\n",  (uint8_t *)&v14,  0xCu);
  }

  return v2;
}

uint64_t TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info( uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 76);
  if (a2 >= 5)
  {
    int v3 = (v2 >> 10) & 1;
LABEL_8:
    uint64_t result = 1LL;
    if ((v3 & 1) == 0 && (v2 & 0x800) == 0) {
      return (v2 >> 12) & 1;
    }
    return result;
  }

  if ((v2 & 0x400) != 0)
  {
    LOBYTE(v3) = *(_DWORD *)(a1 + 64) != 0;
    goto LABEL_8;
  }

  if ((v2 & 0x800) == 0) {
    return (v2 >> 12) & 1;
  }
  return 1LL;
}

const char *path_from_file_index<Pointer64>( void *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unint64_t v5 = (__PAIR64__(a2, a5) - 5) >> 32;
  if ((path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error & 1) == 0)
  {
    path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error = 1;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 232LL))(__p, a4);
      int v9 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v15 = 2048;
      uint64_t v16 = a3;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n",  buf,  0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v10 = (FILE *)*MEMORY[0x1895F89D0];
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a4 + 232LL))(buf, a4);
    if (v17 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(const char **)buf;
    }
    fprintf( v10,  "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n",  v11,  a3,  v5);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)buf);
    }
  }

  return "<Bad file name in .debug_info>";
}

void record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>( void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  if (*(_DWORD *)(a3 + 8) == 29) {
    record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>( a1,  a2,  a3,  a5);
  }
  else {
    record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>( (uint64_t)a1,  a2,  a3,  a4,  (void **)a5);
  }
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges( uint64_t result)
{
  unsigned int v1 = *(uint64_t **)(result + 64);
  __int16 v2 = *((_WORD *)v1 + 38);
  if ((v2 & 1) != 0)
  {
    uint64_t v3 = *v1;
LABEL_6:
    v1[11] = v3;
    if ((v2 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t v3 = v1[2];
  if (v3 != -1) {
    goto LABEL_6;
  }
  if ((*((_WORD *)v1 + 38) & 2) == 0) {
    return result;
  }
LABEL_7:
  if (v2 < 0) {
    uint64_t v4 = *v1 + *((unsigned int *)v1 + 20);
  }
  else {
    uint64_t v4 = v1[1];
  }
  v1[12] = v4;
  return result;
}

void parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>( uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (***a9)(void, std::vector<std::string>::pointer), uint64_t a10, void *a11)
{
  uint64_t v68 = *MEMORY[0x1895F89C0];
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, a3);
  int v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  unsigned int v18 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  if (v18 - 6 >= 0xFFFFFFFC)
  {
    unsigned int v19 = v18;
    if (v18 == 5)
    {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    }

    uint64_t v54 = (CSCppStringCache *)(a7 + 96);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a1);
    unsigned int v52 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    if (v19 >= 4) {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    }
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    char v55 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    unsigned int v20 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    uint64_t v21 = *(unsigned int *)(a1 + 8);
    uint64_t v59 = (unsigned __int8 *)(*(void *)a1 + v21);
    unsigned int v22 = *v59;
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v21 + v22;
    __int128 __p = 0LL;
    __int16 v65 = 0LL;
    uint64_t v66 = 0LL;
    if (v19 == 5)
    {
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>( (uint64_t *)a1,  a2,  5u,  a9,  v54,  a4,  (uint64_t)&__p,  (char **)&__p);
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>( (uint64_t *)a1,  a2,  5u,  a9,  v54,  a4,  (uint64_t)&__p,  (char **)a10);
    }

    else
    {
      parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>( (uint64_t *)a1,  a5,  (uint64_t (***)(void, char *))a9,  v54,  &__p,  (void **)a10);
    }

    unsigned int v62 = 0;
    int v63 = 1;
    unsigned int v23 = a3 + v17 + 4;
    if (*(_DWORD *)(a1 + 8) < v23)
    {
      uint64_t v24 = 0LL;
      uint64_t v56 = v52;
      unsigned int v25 = 1;
      uint64_t v53 = (v22 ^ 0xFF) / v20 * v52;
      do
      {
        unsigned int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
        if (v26 >= v22)
        {
          v24 += v56 * (unint64_t)((v26 - v22) / v20);
          v63 += v55 + (v26 - v22) % v20;
          unint64_t v36 = v24 + a6;
          if (a8) {
            unint64_t v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
          }
LABEL_22:
          *(void *)__s1 = v36;
          unint64_t v61 = (void *)path_from_file_index<Pointer64>((void *)a10, v25, *(unsigned int *)(a1 + 8), a7, v19);
          int v60 = 0;
          std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>( a11,  __s1,  &v60,  (uint64_t *)&v61,  &v63,  &v62);
        }

        else
        {
          uint64_t v27 = v26;
          switch(v26)
          {
            case 0u:
              int v28 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              if (!v28) {
                goto LABEL_62;
              }
              int v29 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
              switch(v29)
              {
                case 1:
                  uint64_t v24 = 0LL;
                  unsigned int v25 = 1;
                  unsigned int v62 = 0;
                  int v63 = 1;
                  break;
                case 2:
                  uint64_t v24 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
                  break;
                case 3:
                  uint64_t v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(a1);
                  unsigned int v31 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  if (*v30 == 47)
                  {
                    uint64_t v32 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                    uint64_t v33 = v32;
                    int v35 = *(uint64_t **)(a10 + 8);
                    unint64_t v34 = *(void *)(a10 + 16);
                    if ((unint64_t)v35 >= v34)
                    {
                      uint64_t v41 = ((uint64_t)v35 - *(void *)a10) >> 3;
                      unint64_t v42 = v41 + 1;
                      uint64_t v43 = v34 - *(void *)a10;
                      if (v43 >> 2 > v42) {
                        unint64_t v42 = v43 >> 2;
                      }
                      else {
                        unint64_t v44 = v42;
                      }
                      if (v44) {
                        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( a10 + 16,  v44);
                      }
                      else {
                        uint64_t v45 = 0LL;
                      }
                      uint64_t v46 = (uint64_t *)&v45[8 * v41];
                      uint64_t *v46 = v33;
                      uint64_t v47 = v46 + 1;
                      uint64_t v49 = *(char **)a10;
                      __int16 v48 = *(char **)(a10 + 8);
                      if (v48 == *(char **)a10)
                      {
                        uint64_t v51 = (uint64_t **)a10;
                      }

                      else
                      {
                        do
                        {
                          uint64_t v50 = *((void *)v48 - 1);
                          v48 -= 8;
                          *--uint64_t v46 = v50;
                        }

                        while (v48 != v49);
                        uint64_t v51 = (uint64_t **)a10;
                        __int16 v48 = *(char **)a10;
                      }

                      *uint64_t v51 = v46;
                      v51[1] = v47;
                      v51[2] = (uint64_t *)&v45[8 * v44];
                      if (v48) {
                        operator delete(v48);
                      }
                      *(void *)(a10 + _Block_object_dispose((const void *)(v1 - 64), 8) = v47;
                    }

                    else
                    {
                      uint64_t *v35 = v32;
                      *(void *)(a10 + _Block_object_dispose((const void *)(v1 - 64), 8) = v35 + 1;
                    }
                  }

                  else
                  {
                    uint64_t v39 = (const char *)*((void *)__p + v31);
                    if (v39)
                    {
                      stringByAppendingPathComponents(__s1, 0x400uLL, v39, v30);
                      unint64_t v40 = (char *)(**a9)(a9, (std::vector<std::string>::pointer)__s1);
                      unint64_t v61 = CSCppStringCache::intern(v54, v40);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, &v61);
                    }

                    else
                    {
                      *(void *)__s1 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, __s1);
                    }
                  }

                  break;
                default:
                  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v28 + *(_DWORD *)(a1 + 8) - 1;
                  break;
              }

              break;
            case 1u:
              unint64_t v36 = v24 + a6;
              if (a8) {
                unint64_t v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
              }
              goto LABEL_22;
            case 2u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1) * v56;
              break;
            case 3u:
              int v37 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(a1);
              v63 += v37;
              break;
            case 4u:
              unsigned int v25 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 5u:
              unsigned int v62 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
              break;
            case 8u:
              v24 += v53;
              break;
            case 9u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
              break;
            case 0xCu:
              TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
              break;
            default:
              if (v59[v26])
              {
                unsigned int v38 = 0;
                do
                {
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  ++v38;
                }

                while (v38 < v59[v27]);
              }

              break;
          }
        }
      }

      while (*(_DWORD *)(a1 + 8) < v23);
    }

void sub_18603BF30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>( void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[1];
  if (v8 == v9) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 170 * ((v8 - v9) >> 3) - 1;
  }
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  unint64_t v13 = v12 + v11;
  if (v10 == v12 + v11)
  {
    std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(a1);
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    uint64_t v9 = a1[1];
    unint64_t v13 = v11 + v12;
  }

  int v14 = (void *)(*(void *)(v9 + 8 * (v13 / 0xAA)) + 24 * (v13 % 0xAA));
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  *int v14 = *a2;
  v14[1] = v15;
  v14[2] = v16;
  uint64_t v17 = v12 + 1;
  a1[5] = v17;
  unint64_t v18 = v11 + v17;
  unsigned int v19 = (void *)(v9 + 8 * (v18 / 0xAA));
  unint64_t v20 = v18 % 0xAA;
  if (v20) {
    uint64_t v21 = *v19 + 24 * v20;
  }
  else {
    uint64_t v21 = *(v19 - 1) + 4080LL;
  }
  return v21 - 24;
}

void read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(unsigned int a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, a1);
  unsigned int v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
  uint64_t v6 = *(CSCppDwarfAbbrevTable **)(a2 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 88);
  unsigned int v26 = v6;
  uint64_t v27 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  if (!v4 || (unint64_t v9 = v4, v4 >= (unint64_t)((uint64_t)(*((void *)v6 + 2) - *((void *)v6 + 1)) >> 3)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Invalid specification abbrev index in DWARF: ",  45LL);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
    Exception::Exception(v22, &v23);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v22);
  }

  uint64_t v10 = *((void *)v6 + 7);
  uint64_t v11 = (void *)CSCppDwarfAbbrevTable::specification_abbrev_at(v6, v4);
  if (!v11)
  {
    uint64_t v12 = *(void *)(*((void *)v6 + 1) + 8 * v9);
    if (!v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Null abbrev discovered in DWARF at index ",  41LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      unsigned int v19 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v19, (uint64_t)v22);
    }

    unsigned int v13 = *(_DWORD *)(v12 + 8);
    if (v13 > 0x2E || ((1LL << v13) & 0x400020000008LL) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &__p,  (uint64_t)"Invalid abbrev tag ",  19LL);
      unint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for symbol entry.", 18LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      uint64_t v21 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v21, (uint64_t)v22);
    }

    v25[0] = 0uLL;
    __int128 __p = 0LL;
    std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>( &__p,  *(const void **)(v12 + 16),  *(void *)(v12 + 24),  (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 2);
    uint64_t v11 = operator new(0x50uLL);
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev( (uint64_t)v11,  *(_DWORD *)(v12 + 8),  *(_BYTE *)(v12 + 12),  &__p,  v10);
    uint64_t v15 = *((void *)v6 + 4);
    if (v9 >= (*((void *)v6 + 5) - v15) >> 3) {
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    }
    *(void *)(v15 + 8 * v9) = v11;
    if (__p)
    {
      *(void *)&v25[0] = __p;
      operator delete(__p);
    }
  }

  memset(v25, 0, 48);
  __int128 __p = (void *)a2;
  (*(void (**)(void *, void **, void))(*(void *)v11 + 16LL))(v11, &__p, *(unsigned __int16 *)(a2 + 36));
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, v3);
  if (v5)
  {
    uint64_t v16 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_18603C3A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

void record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  if (a2)
  {
    uint64_t v9 = 0LL;
    uint64_t v25 = (uint64_t)(a5 + 2);
    int v10 = *(unsigned __int8 *)(a3 + 12);
    do
    {
      std::deque<TRawSymbol<Pointer64>>::push_back(a4, a1 + 104 * v9);
      if (v10)
      {
        unint64_t v11 = a4[5] + a4[4] - 1LL;
        unint64_t v12 = *(void *)(a4[1] + 8 * (v11 / 0x27)) + 104 * (v11 % 0x27);
        int v14 = (unint64_t *)a5[1];
        unint64_t v13 = (unint64_t)a5[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
          uint64_t v17 = v13 - (void)*a5;
          uint64_t v18 = v17 >> 2;
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25, v19);
          }
          else {
            uint64_t v20 = 0LL;
          }
          uint64_t v21 = (unint64_t *)&v20[8 * v16];
          unint64_t *v21 = v12;
          uint64_t v15 = v21 + 1;
          __int128 v23 = (char *)*a5;
          unsigned int v22 = (char *)a5[1];
          if (v22 != *a5)
          {
            do
            {
              unint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *--uint64_t v21 = v24;
            }

            while (v22 != v23);
            unsigned int v22 = (char *)*a5;
          }

          *a5 = v21;
          a5[1] = v15;
          a5[2] = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          *int v14 = v12;
          uint64_t v15 = v14 + 1;
        }

        a5[1] = v15;
      }

      ++v9;
    }

    while (v9 != a2);
  }

void record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>( void *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v5 = a1;
  int v6 = *(unsigned __int8 *)(a3 + 12);
  __int128 __p = 0LL;
  unint64_t v61 = 0LL;
  unsigned int v62 = 0LL;
  unint64_t v7 = &a1[13 * a2];
  uint64_t v9 = (char *)*a4;
  unint64_t v8 = (char *)a4[1];
  do
  {
    if (v8 == v9)
    {
      unint64_t v11 = (char *)*a4;
      if (a2) {
        goto LABEL_10;
      }
      goto LABEL_60;
    }

    uint64_t v10 = *((void *)v8 - 1);
    v8 -= 8;
  }

  while (!v10);
  unint64_t v11 = v8 + 8;
  while (v8 != v9)
  {
    unint64_t v12 = v8;
    uint64_t v14 = *((void *)v8 - 1);
    v8 -= 8;
    uint64_t v13 = v14;
    if (!v14 || !*(_BYTE *)(v13 + 88))
    {
      uint64_t v9 = v12;
      break;
    }
  }

  if (!a2)
  {
LABEL_60:
    uint64_t v46 = 0LL;
    if (!v6) {
      goto LABEL_81;
    }
    goto LABEL_61;
  }

void sub_18603C9C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 39 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0LL;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }

  if (v5 == v4)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  }

  *(void *)(v8 + 96) = 0LL;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 73) = 0u;
  uint64_t result = TRawSymbol<Pointer64>::operator=(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18603CD94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>( uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, _OWORD **a8)
{
  uint64_t v9 = *a1;
  uint64_t v10 = 0x4EC4EC4EC4EC4EC5LL * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  uint64_t v18 = (uint64_t)(a1 + 2);
  unint64_t v19 = 0x4EC4EC4EC4EC4EC5LL * ((a1[2] - v9) >> 3);
  if (2 * v19 > v11) {
    unint64_t v11 = 2 * v19;
  }
  if (v19 >= 0x13B13B13B13B13BLL) {
    unint64_t v20 = 0x276276276276276LL;
  }
  else {
    unint64_t v20 = v11;
  }
  v31[4] = a1 + 2;
  if (v20) {
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(v18, v20);
  }
  else {
    uint64_t v21 = 0LL;
  }
  unint64_t v22 = &v21[104 * v10];
  v31[0] = v21;
  v31[1] = v22;
  v31[3] = &v21[104 * v20];
  uint64_t v23 = *a4;
  uint64_t v24 = *a5;
  uint64_t v25 = *a6;
  int v26 = *a7;
  uint64_t v27 = *a8;
  *(void *)unint64_t v22 = *a3;
  *((void *)v22 + 1) = v23;
  *((void *)v22 + 2) = 0LL;
  *((void *)v22 + 3) = 0LL;
  *((void *)v22 + 4) = v24;
  *((void *)v22 + 5) = v25;
  *((_OWORD *)v22 + 3) = 0u;
  *((void *)v22 + 12) = 0LL;
  *(_OWORD *)(v22 + 73) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  if (v27)
  {
    *((_OWORD *)v22 + 3) = *v27;
    v26 |= 0x80000000;
  }

  uint64_t v28 = &v21[104 * v10];
  *((_DWORD *)v28 + 7) = v26;
  v28[88] = 1;
  _OWORD v31[2] = v22 + 104;
  std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v31);
  uint64_t v29 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v31);
  return v29;
}

void sub_18603CF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>( uint64_t *a1, unint64_t a2, unsigned __int16 a3, uint64_t (***a4)(void, std::vector<std::string>::pointer), CSCppStringCache *a5, uint64_t a6, uint64_t a7, char **a8)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  size_t v13 = *(void *)(a7 + 8) - *(void *)a7;
  BOOL v82 = v13 == a8[1] - *a8 && memcmp(*(const void **)a7, *a8, v13) == 0;
  __int16 v92 = 0;
  unsigned int v91 = 0;
  __s = 0LL;
  unsigned int v14 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(&v88, v14);
  uint64_t v15 = v88;
  for (uint64_t i = v89; v15 != i; ++v15)
  {
    int v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    int v18 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    if (v17 <= 2)
    {
      if (v17 == 1)
      {
        action_for_line_string = read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v18,  (uint64_t)&v92,  1,  (uint64_t)&__s);
        goto LABEL_14;
      }

      if (v17 != 2)
      {
LABEL_12:
        action_for_line_string = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18);
        goto LABEL_14;
      }

      action_for_line_string = read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( v18,  (uint64_t)&v92,  2,  (uint64_t)&v91);
    }

    else
    {
      action_for_line_string = skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18);
    }

void sub_18603D758( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, std::__split_buffer<std::string> *a34)
{
}

const char *parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>( uint64_t *a1, const char *a2, uint64_t (***a3)(void, char *), CSCppStringCache *a4, void **a5, void **a6)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  uint64_t v13 = (uint64_t)(a5 + 2);
  unint64_t v12 = (unint64_t)a5[2];
  unsigned int v14 = (const char **)a5[1];
  if ((unint64_t)v14 >= v12)
  {
    uint64_t v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
    uint64_t v17 = v12 - (void)*a5;
    uint64_t v18 = v17 >> 2;
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v19);
    }
    else {
      uint64_t v20 = 0LL;
    }
    unint64_t v21 = (const char **)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    char *v21 = a2;
    uint64_t v15 = v21 + 1;
    uint64_t v24 = (char *)*a5;
    uint64_t v23 = (char *)a5[1];
    if (v23 != *a5)
    {
      do
      {
        unint64_t v25 = (const char *)*((void *)v23 - 1);
        v23 -= 8;
        *--unint64_t v21 = v25;
      }

      while (v23 != v24);
      uint64_t v23 = (char *)*a5;
    }

    *a5 = v21;
    a5[1] = v15;
    a5[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }

  else
  {
    *unsigned int v14 = a2;
    uint64_t v15 = v14 + 1;
  }

  a5[1] = v15;
  int v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  if (*v26)
  {
    uint64_t v27 = v26;
    do
    {
      if (isAbsolutePath(v27))
      {
        __int128 v29 = (const char **)a5[1];
        unint64_t v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v30 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          uint64_t v31 = v28 - (void)*a5;
          uint64_t v32 = v31 >> 2;
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0LL;
          }
          __int128 v41 = (const char **)&v34[8 * v30];
          *__int128 v41 = v27;
          int v37 = v41 + 1;
          unint64_t v43 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v44 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--__int128 v41 = v44;
            }

            while (v42 != v43);
            goto LABEL_46;
          }

          goto LABEL_47;
        }
      }

      else
      {
        stringByAppendingPathComponents(v76, 0x400uLL, a2, v27);
        unint64_t v35 = (char *)(**a3)(a3, v76);
        uint64_t v27 = (const char *)CSCppStringCache::intern(a4, v35);
        __int128 v29 = (const char **)a5[1];
        unint64_t v36 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v36)
        {
          uint64_t v38 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          uint64_t v39 = v36 - (void)*a5;
          uint64_t v40 = v39 >> 2;
          else {
            unint64_t v33 = v40;
          }
          if (v33) {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          }
          else {
            unint64_t v34 = 0LL;
          }
          __int128 v41 = (const char **)&v34[8 * v38];
          *__int128 v41 = v27;
          int v37 = v41 + 1;
          uint64_t v45 = (char *)*a5;
          unint64_t v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              unint64_t v46 = (const char *)*((void *)v42 - 1);
              v42 -= 8;
              *--__int128 v41 = v46;
            }

            while (v42 != v45);
LABEL_46:
            unint64_t v42 = (char *)*a5;
          }

uint64_t std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>( void *a1, void *a2, int *a3, uint64_t *a4, int *a5, unsigned int *a6)
{
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[1];
  if (v12 == v13) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = 102 * ((v12 - v13) >> 3) - 1;
  }
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  unint64_t v17 = v16 + v15;
  if (v14 == v16 + v15)
  {
    std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(a1);
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    uint64_t v13 = a1[1];
    unint64_t v17 = v15 + v16;
  }

  unint64_t v18 = *(void *)(v13 + 8 * (v17 / 0x66)) + 40 * (v17 % 0x66);
  uint64_t v19 = *a3;
  uint64_t v20 = *a4;
  int v21 = *a5;
  unsigned int v22 = *a6;
  *(void *)unint64_t v18 = *a2;
  *(void *)(v18 + _Block_object_dispose((const void *)(v1 - 64), 8) = v19;
  *(void *)(v18 + 16) = v20;
  *(_DWORD *)(v18 + 24) = v21;
  *(void *)(v18 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v22;
  uint64_t v23 = v16 + 1;
  a1[5] = v23;
  unint64_t v24 = v15 + v23;
  unint64_t v25 = (void *)(v13 + 8 * (v24 / 0x66));
  unint64_t v26 = v24 % 0x66;
  if (v26) {
    uint64_t v27 = *v25 + 40 * v26;
  }
  else {
    uint64_t v27 = *(v25 - 1) + 4080LL;
  }
  return v27 - 40;
}

void *read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (a1 == 8)
  {
    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF8678;
  }

  else
  {
    if (a1 != 31 && a1 != 14)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read string binding ",  38LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }

    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = off_189DF8A78;
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_18603DF98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>( int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  switch(a1)
  {
    case 5:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8B18;
      break;
    case 6:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8B68;
      break;
    case 7:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8BB8;
      break;
    case 11:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8AC8;
      break;
    case 15:
      uint64_t result = operator new(0x20uLL);
      uint64_t v8 = off_189DF8C08;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Unhandled form in read data binding ",  36LL);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
  }

  void *result = v8;
  result[1] = a4;
  result[2] = a2;
  *((_WORD *)result + 12) = a3;
  return result;
}

void sub_18603E124( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_DWORD *skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  switch(a1)
  {
    case 5:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8CF8;
      int v3 = 2;
      goto LABEL_9;
    case 6:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8CF8;
      int v3 = 4;
      goto LABEL_9;
    case 7:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8CF8;
      int v3 = 8;
      goto LABEL_9;
    case 8:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF8CA8;
      goto LABEL_12;
    case 9:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF8D48;
      goto LABEL_12;
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_15;
    case 11:
      goto LABEL_4;
    case 14:
    case 23:
    case 31:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF8C58;
      goto LABEL_12;
    case 15:
      uint64_t result = operator new(8uLL);
      unint64_t v2 = off_189DF8D98;
LABEL_12:
      *(void *)uint64_t result = v2;
      break;
    case 30:
      uint64_t result = operator new(0x10uLL);
      *(void *)uint64_t result = off_189DF8CF8;
      result[2] = 16;
      break;
    default:
      if (a1 != 37)
      {
LABEL_15:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Unhandled dwarf attribute in Debug Line Table ",  46LL);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
        Exception::Exception(v5, &v6);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v5);
      }

void sub_18603E324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    unsigned int v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    __int128 v6 = *(void **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *__int128 v6 = *(void *)v4 + *(unsigned int *)(v4 + 8);
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }

  else
  {
    _WORD *v4 = v6 | v5;
    uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  }

  return result;
}

uint64_t TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  int v5 = (unsigned __int16)*v4;
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0) {
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  }
  _WORD *v4 = v6 | v5;
  uint64_t result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8LL) += 4;
}

uint64_t TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

size_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*(void *)(a2 + 16));
}

uint64_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a2 + 16) + 8LL) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1LL;
}

uint64_t TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*(void *)(a2 + 16));
}

uint64_t TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action( uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*(void *)(a2 + 16));
}

void std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18603E920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18603EC34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__int128 *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>>>( __int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, void ***a5)
{
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    uint64_t v15 = a2;
  }

  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = (uint64_t)(*a1 + 255);
    uint64_t v11 = a2;
    for (uint64_t i = (__int128 *)v10; ; uint64_t i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>( v11,  i,  v8);
      uint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      BOOL v14 = *v9++;
      uint64_t v11 = v14;
    }

    uint64_t v15 = *a3;
  }

  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>( v15,  a4,  v8);
  *a5 = v17;
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>( __int128 *a1, __int128 *a2, void **a3)
{
  BOOL v3 = a1;
  int v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100](&v6, v3);
    BOOL v3 = (__int128 *)((char *)v3 + 40);
  }

  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100]( void ***a1, __int128 *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  int v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  uint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666LL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333LL) {
      unint64_t v16 = 0x666666666666666LL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( v7,  v16);
    }
    else {
      uint64_t v17 = 0LL;
    }
    uint64_t v18 = &v17[40 * v13];
    uint64_t v19 = &v17[40 * v16];
    __int128 v20 = *a2;
    __int128 v21 = a2[1];
    *((void *)v18 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    uint64_t v12 = v18 + 40;
    uint64_t v23 = (char *)*v4;
    unint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        __int128 v24 = *(_OWORD *)(v22 - 40);
        __int128 v25 = *(_OWORD *)(v22 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v22 - 2);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }

      while (v22 != v23);
      unint64_t v22 = (char *)*v4;
    }

    __int128 *v4 = v18;
    v4[1] = v12;
    _DWORD v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    __int128 v10 = *a2;
    __int128 v11 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    uint64_t v12 = v5 + 40;
  }

  v4[1] = v12;
  return a1;
}

__int128 *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>>>( __int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, void ***a5)
{
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    unint64_t v15 = a2;
  }

  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = (uint64_t)(*a1 + 255);
    __int128 v11 = a2;
    for (uint64_t i = (__int128 *)v10; ; uint64_t i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>( v11,  i,  v8);
      uint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      unint64_t v14 = *v9++;
      __int128 v11 = v14;
    }

    unint64_t v15 = *a3;
  }

  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>( v15,  a4,  v8);
  *a5 = v17;
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>( __int128 *a1, __int128 *a2, void **a3)
{
  BOOL v3 = a1;
  int v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100](&v6, v3);
    BOOL v3 = (__int128 *)((char *)v3 + 24);
  }

  while (v3 != v4);
  return v4;
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    BOOL v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x27];
    unint64_t v7 = (unint64_t)*v6 + 104 * (v5 % 0x27);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x27] + 104 * ((a1[5] + v5) % 0x27);
    if (v7 != v8)
    {
      do
      {
        unint64_t v15 = (void **)(v7 + 64);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 104LL;
        if (v7 - (void)*v6 == 4056)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      unint64_t v2 = (void **)a1[1];
      BOOL v3 = (void **)a1[2];
    }
  }

  void *v4 = 0LL;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 19LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 39LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSourceInfo<Pointer64>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 102LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  unsigned int v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100](--v4, 0LL);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 32LL))(v19, a5, a6);
  uint64_t v11 = a4;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, a4);
  if (a4)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v14 = *v13;
      BOOL v15 = v14 <= 0x1F && (v14 & 0xE) == 14;
      if (v15 && v13[1])
      {
        unint64_t v16 = "$$$bad-name-in-nlist$$$";
        if (a6 > *((unsigned int *)v13 - 1)
          && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v19))
        {
          unint64_t v16 = (const char *)(v18 + *((unsigned int *)v13 - 1));
        }

        if (!v12)
        {
          if (!strcmp(v16, "<redacted>")) {
            uint64_t v12 = v16;
          }
          else {
            uint64_t v12 = 0LL;
          }
        }

        if (v16 == v12)
        {
          uint64_t v12 = v16;
        }

        else
        {
          int v17 = 38289424;
          if ((v14 & 1) == 0) {
            int v17 = 38289408;
          }
          TRawSymbolOwnerData<Pointer64>::emplace_symbol( a2,  *(void *)(v13 + 4) + v10,  0LL,  (uint64_t)v16,  (uint64_t)v16,  v17 | (2 * v14) & 0x20 | (8 * *((unsigned __int16 *)v13 + 1)) & 0x40,  0LL,  0);
        }
      }

      v13 += 16;
      --v11;
    }

    while (v11);
  }

void extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  int v6 = *((_DWORD *)a3 + 2);
  int v5 = *((_DWORD *)a3 + 3);
  if (v5 != v6)
  {
    uint64_t v10 = *(void *)(a4 + 32);
    uint64_t v11 = *a3;
    TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a5, (v5 - v6));
    unint64_t v13 = *((unsigned int *)a3 + 2);
    unint64_t v12 = *((unsigned int *)a3 + 3);
    if (v13 < v12)
    {
      unsigned int v14 = (void *)(v11 + a1 + 16 * v13 + 8);
      do
      {
        unsigned int v15 = *((unsigned __int8 *)v14 - 4);
        BOOL v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
        if (v16 && *((_BYTE *)v14 - 3))
        {
          int v17 = 38289440;
          if ((v15 & 0x10) == 0) {
            int v17 = 38289408;
          }
          uint64_t v18 = *((unsigned int *)v14 - 2);
          TRawSymbolOwnerData<Pointer64>::emplace_symbol( a5,  *v14 + v10,  0LL,  (uint64_t)v19,  (uint64_t)v19,  v17 | (8 * *((unsigned __int16 *)v14 - 1)) & 0x40,  0LL,  0);
          unint64_t v12 = *((unsigned int *)a3 + 3);
        }

        ++v13;
        v14 += 2;
      }

      while (v13 < v12);
    }
  }

void extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v22 = a1[4];
  uint64_t v24 = a1[1];
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 32LL))(v24, a5, a6);
  uint64_t v13 = a4;
  uint64_t v23 = (uint64_t *)a2;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(a2, a4);
  if (a4)
  {
    unsigned int v14 = (unsigned __int8 *)(a3 + 4);
    do
    {
      unsigned int v15 = *v14;
      BOOL v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
      if (v16 && v14[1])
      {
        if ((v15 & 1) != 0) {
          int v17 = 38289424;
        }
        else {
          int v17 = 38289408;
        }
        int v18 = *((unsigned __int16 *)v14 + 1);
        uint64_t v19 = "$$$bad-name-in-nlist$$$";
        if (a6 > *((unsigned int *)v14 - 1)
          && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v24))
        {
          uint64_t v19 = (const char *)(v21 + *((unsigned int *)v14 - 1));
        }

        if (*(_DWORD *)(a1[3] + 12LL) != 1 || strncmp(v19, "ltmp", 4uLL))
        {
          unint64_t v20 = *(void *)(v14 + 4) + v22;
          if (a7) {
            unint64_t v20 = TAddressRelocator<Pointer64>::relocate(a7, v20);
          }
          TRawSymbolOwnerData<Pointer64>::emplace_symbol( v23,  v20,  0LL,  (uint64_t)v19,  (uint64_t)v19,  v17 | (2 * v15) & 0x20 | (8 * v18) & 0x40,  0LL,  0);
        }
      }

      v14 += 16;
      --v13;
    }

    while (v13);
  }

void extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11)
{
  unint64_t v11 = *(unsigned int *)(a3 + 72);
  unsigned int v12 = *(_DWORD *)(a3 + 40);
  if (v11 <= v12)
  {
    uint64_t v13 = *(void *)(a3 + 32);
    if (v13)
    {
      uint64_t v17 = *(unsigned int *)(a3 + 68);
      uint64_t v18 = *(void *)(a1 + 32) + v13;
      uint64_t v31 = *(void *)(a1 + 8);
      uint64_t v19 = v12 / v11;
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 32LL))(v31);
      TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, v19);
      unsigned int v20 = 0;
      else {
        uint64_t v21 = 0LL;
      }
      else {
        uint64_t v19 = v19;
      }
      uint64_t v22 = (unsigned int *)(a4 + 4 * v17);
      unsigned int v28 = a7;
      while (1)
      {
        if (!v21) {
          return;
        }
        uint64_t v23 = *v22;
        unint64_t v24 = v18 + v20;
        __int128 v25 = "$$$indirect-absolute-symbol$$$";
        if ((v23 & 0x40000000) != 0) {
          goto LABEL_21;
        }
        if ((v23 & 0x80000000) != 0) {
          break;
        }
        if (v23 < a7)
        {
          uint64_t v26 = (unsigned int *)(a6 + 16 * v23);
          __int128 v25 = "$$$bad-name-in-nlist$$$";
          if (a11) {
            unint64_t v24 = TAddressRelocator<Pointer64>::relocate(a11, v18 + v20);
          }
          a7 = v28;
          goto LABEL_23;
        }

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 2);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 11);
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at(uint64_t a1)
{
  for (uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32LL); ; uint64_t i = *(uint64_t (**)(void))(**(void **)a1 + 32LL))
  {
    uint64_t result = i();
    if (!result) {
      break;
    }
    uint64_t v5 = 0LL;
    while (v4 != (_DWORD)v5)
    {
    }
  }

  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 32 + v1;
  uint64_t v6 = a1 + 32;
  do
    uint64_t result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 38);
  return result;
}

void extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a1 + 32);
  v37[0] = 0LL;
  v37[1] = v37;
  v37[2] = 0x2000000000LL;
  v37[3] = a2 + 208;
  v36[0] = 0LL;
  v36[1] = v36;
  v36[2] = 0x2000000000LL;
  v36[3] = a2 + 96;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  a5,  a6);
  uint64_t v28 = 0LL;
  __int128 v29 = &v28;
  uint64_t v30 = 0x3802000000LL;
  uint64_t v31 = __Block_byref_object_copy__232;
  __int128 v32 = __Block_byref_object_dispose__233;
  uint64_t v33 = a3;
  int v34 = a4;
  int v35 = 0;
  if (!a4) {
    goto LABEL_19;
  }
  uint64_t v12 = v11;
  uint64_t v13 = &v28;
  while (1)
  {
    uint64_t v24 = 0LL;
    __int128 v25 = &v24;
    uint64_t v26 = 0x2000000000LL;
    uint64_t v27 = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v13 + 5);
    uint64_t v14 = v25[3];
    if (*(_BYTE *)(v14 + 4) != 100 || *(void *)(v14 + 8)) {
      goto LABEL_15;
    }
    uint64_t v15 = *((unsigned int *)v29 + 13);
    BOOL v16 = v29 + 5;
    uint64_t v17 = v29[5];
    uint64_t v18 = v17 + 16 * v15;
    v25[3] = v18;
    if (!v17) {
      goto LABEL_18;
    }
    if (*(_BYTE *)(v18 + 4) == 102 && *(_WORD *)(v18 + 6) == 1)
    {
      uint64_t v19 = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v16);
      v25[3] = (uint64_t)v19;
      unsigned int v20 = (char *)(v12 + *v19);
      if (!*v20)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *(void *)(a1 + 48);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v21;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Empty object_file_path in mach-o header: %s\n",  (uint8_t *)&buf,  0xCu);
        }

        fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Empty object_file_path in mach-o header: %s\n",  *(const char **)(a1 + 48));
      }

      if (!deny_nfs_mount_lookup(v20))
      {
        *(void *)&__int128 buf = CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification( v20,  (void **)(*(unsigned int *)(*(void *)(a1 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 24) + 8LL) & 0xFFFFFF) << 32)),  537657344LL,  0LL);
        *((void *)&buf + 1) = v22;
        v23[0] = MEMORY[0x1895F87A8];
        v23[1] = 0x40000000LL;
        v23[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke;
        v23[3] = &unk_189DF8E68;
        v23[4] = &v24;
        v23[5] = &v28;
        v23[8] = v10;
        v23[9] = v12;
        v23[10] = a1;
        v23[11] = a2;
        v23[6] = v36;
        v23[7] = v37;
        CSSymbolicatorForeachSymbolOwnerAtTime(buf, v22, 0x8000000000000000LL, (uint64_t)v23);
        CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)&buf);
      }
    }

void sub_18603FC60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

unsigned int *extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  a5,  a6);
  uint64_t v23 = a3;
  unsigned int v24 = a4;
  unsigned int v25 = 0;
  if (a4)
  {
    uint64_t v11 = result;
    uint64_t v12 = (void **)(a2 + 496);
    uint64_t v13 = (CSCppStringCache *)(a2 + 96);
    while (1)
    {
      uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
      if (*((_BYTE *)result + 4) == 100 && !*((void *)result + 1))
      {
        if (v25 >= v24 || !v23) {
          return result;
        }
        if (*(_BYTE *)(v23 + 16LL * v25 + 4) == 104)
        {
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (v25 >= v24) {
            return result;
          }
          uint64_t v14 = *result;
          uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (*((_BYTE *)result + 4) == 100)
          {
            if (v25 >= v24) {
              return result;
            }
            uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((_BYTE *)result + 4) == 100)
            {
              if (v25 >= v24) {
                return result;
              }
              uint64_t result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
              if (*((_BYTE *)result + 4) == 102)
              {
                uint64_t v15 = v25;
              }
            }
          }
        }
      }

__n128 __Block_byref_object_copy__232(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 3);
  if (v1 >= *((_DWORD *)a1 + 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"out of range index into nlist array",  35LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }

  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 3) = v1 + 1;
  return v2 + 16 * v1;
}

void sub_18603FF8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 8LL);
  uint64_t result = CSSymbolOwnerGetLastModifiedTimestamp(a2, a3);
  unint64_t v8 = result - v6;
  if (v6) {
    BOOL v9 = v8 > 5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    uint64_t v10 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v11 = MEMORY[0x1895F87A8];
    while (1)
    {
      while (1)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
        int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL);
        if (v12 == 46) {
          break;
        }
        if (v12 == 100) {
          return result;
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
      uint64_t v13 = *(unsigned int **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (*((_BYTE *)v13 + 4) != 36) {
        break;
      }
      uint64_t v14 = *((void *)v13 + 1);
      uint64_t v15 = *(void *)(a1 + 64);
      BOOL v16 = (_BYTE *)(*(void *)(a1 + 72) + *v13);
      if (!*v16)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 80) + 48LL);
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v26 = v17;
          _os_log_impl( &dword_185FC0000,  v10,  OS_LOG_TYPE_ERROR,  "Empty function_name in mach-o header: %s\n",  buf,  0xCu);
        }

        fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Empty function_name in mach-o header: %s\n",  *(const char **)(*(void *)(a1 + 80) + 48LL));
      }

      uint64_t v18 = v15 + v14;
      do
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
        int v19 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL);
      }

      while (v19 == 132);
      if (v19 != 36) {
        break;
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
      if (*(_BYTE *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 4LL) != 78) {
        break;
      }
      v21[0] = v11;
      v21[1] = 0x40000000LL;
      v21[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_236;
      v21[3] = &unk_189DF8E40;
      uint64_t v20 = *(void *)(a1 + 88);
      uint64_t v23 = v18;
      uint64_t v24 = v20;
      __int128 v22 = *(_OWORD *)(a1 + 48);
      CSSymbolOwnerForeachSymbolWithMangledName(a2, a3, (uint64_t)v16, (uint64_t)v21);
    }
  }

  return result;
}

unint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_236( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void *)(a1 + 48) - CSSymbolGetRange(a2, a3);
  else {
    int v7 = 0;
  }
  else {
    int v8 = v7;
  }
  uint64_t v9 = MEMORY[0x1895F87A8];
  if (!v8) {
    goto LABEL_60;
  }
  uint64_t v57 = 0LL;
  *(void *)__int128 buf = off_189DF8E98;
  *(void *)&uint8_t buf[8] = v56;
  uint64_t v49 = buf;
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( buf,  v56);
  uint64_t v10 = v49;
  if (v49 == buf)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = buf;
  }

  else
  {
    if (!v49) {
      goto LABEL_13;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*(void *)v10 + 8 * v11))();
LABEL_13:
  uint64_t v12 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  if ((v13 - 1) < 2)
  {
    unint64_t v14 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v15 = *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v17 = CSCppStringCache::intern(*(CSCppStringCache **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v15);
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v16 = 0LL;
    }

    v58[0] = v17;
    v58[1] = v16;
    unsigned int v23 = atomic_load((unsigned int *)(v14 + 28));
    if ((v23 & 0x80000000) != 0)
    {
      uint64_t v24 = (__int128 *)v58;
      if (!*(void *)(v14 + 48)) {
        uint64_t v24 = 0LL;
      }
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    *(_OWORD *)__int128 buf = *(_OWORD *)v14;
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = (void (*)(uint64_t))"$$$debug-map-fake-name$$$";
    unint64_t v51 = "$$$debug-map-fake-mangled-name$$$";
    *(void *)&v53[32] = 0LL;
    __int128 v52 = 0u;
    memset(v53, 0, 25);
    if (v24)
    {
      __int128 v52 = *v24;
      unsigned int v25 = v8 | 0x88000000;
    }

    else
    {
      unsigned int v25 = v8 | 0x8000000;
    }

    HIDWORD(v49) = v25;
    uint64_t v26 = *(void *)(v14 + 64);
    for (uint64_t i = *(void *)(v14 + 72); v26 != i; v26 += 104LL)
    {
      if (!v57) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, uint64_t, _BYTE *, void))(*v57 + 48LL))( v57,  v26,  v53,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    }

    slideSymbolsByOffset<Pointer64>(buf, v6);
    TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)buf);
    v45[0] = v53;
    uint64_t v28 = (void ***)v45;
    goto LABEL_54;
  }

  if (v13 == 4)
  {
    uint64_t v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
    unint64_t v41 = 0LL;
    if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address( v18,  *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL),  &v41) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps",  buf,  2u);
      }

      fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
      goto LABEL_55;
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    uint64_t v48 = 0x9002000000LL;
    uint64_t v49 = (uint8_t *)__Block_byref_object_copy__239;
    uint64_t v50 = __Block_byref_object_dispose__240;
    unint64_t v19 = *(unsigned int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    unint64_t v51 = (const char *)(v41 + v6);
    __int128 v52 = v19;
    *(_DWORD *)uint64_t v53 = 0;
    *(void *)&v53[8] = "$$$debug-map-fake-name$$$";
    *(void *)&v53[16] = "$$$debug-map-fake-mangled-name$$$";
    uint64_t v55 = 0LL;
    *(_OWORD *)&v53[24] = 0u;
    memset(v54, 0, 25);
    *(_DWORD *)&v53[4] = v8 | 0x8000000;
    unint64_t v46 = 0LL;
    uint64_t v20 = operator new(0x20uLL);
    *uint64_t v20 = off_189DF8F78;
    v20[1] = v45;
    v20[2] = v18;
    v20[3] = v6;
    unint64_t v59 = v20;
    std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( v58,  v45);
    uint64_t v21 = v59;
    if (v59 == v58)
    {
      uint64_t v22 = 4LL;
      uint64_t v21 = v58;
    }

    else
    {
      if (!v59) {
        goto LABEL_38;
      }
      uint64_t v22 = 5LL;
    }

    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_38:
    v42[0] = v9;
    v42[1] = 1174405120LL;
    _OWORD v42[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_241;
    v42[3] = &unk_189DF8DE0;
    __int128 v29 = v43;
    uint64_t v30 = (uint64_t)v46;
    if (v46)
    {
      if (v46 == v45)
      {
        unint64_t v44 = v43;
        (*(void (**)(void *, _BYTE *))(v45[0] + 24LL))(v45, v43);
LABEL_43:
        uint64_t v31 = *(void *)(a1 + 32);
        v42[4] = buf;
        v42[5] = v31;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol( (uint64_t)v18,  a3 & 0xFFFFFFFFFFFFFFFCLL,  (uint64_t)v42);
        TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)(*(void *)&buf[8] + 40LL));
        if (v44 == v43)
        {
          uint64_t v32 = 4LL;
        }

        else
        {
          if (!v44) {
            goto LABEL_48;
          }
          uint64_t v32 = 5LL;
          __int128 v29 = v44;
        }

        (*(void (**)(void *))(*v29 + 8 * v32))(v29);
LABEL_48:
        uint64_t v33 = v46;
        if (v46 == v45)
        {
          uint64_t v34 = 4LL;
          uint64_t v33 = v45;
        }

        else
        {
          if (!v46)
          {
LABEL_53:
            _Block_object_dispose(buf, 8);
            v58[0] = v54;
            uint64_t v28 = (void ***)v58;
LABEL_54:
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v28);
            goto LABEL_55;
          }

          uint64_t v34 = 5LL;
        }

        (*(void (**)(void))(*v33 + 8 * v34))();
        goto LABEL_53;
      }

      uint64_t v30 = (*(uint64_t (**)(void))(*v46 + 16LL))();
    }

    unint64_t v44 = (_BYTE *)v30;
    goto LABEL_43;
  }

void sub_1860407B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t *a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44)
{
  unint64_t v46 = a30;
  if (a30 == &a27)
  {
    uint64_t v47 = 4LL;
    unint64_t v46 = &a27;
  }

  else
  {
    if (!a30) {
      goto LABEL_6;
    }
    uint64_t v47 = 5LL;
  }

  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_6:
  _Block_object_dispose(&a31, 8);
  *(void *)(v44 - 120) = &a44;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 120));
  uint64_t v48 = *(void **)(v44 - 128);
  if (v48 == (void *)(v44 - 152))
  {
    uint64_t v49 = 4LL;
    uint64_t v48 = (void *)(v44 - 152);
  }

  else
  {
    if (!v48) {
      goto LABEL_11;
    }
    uint64_t v49 = 5LL;
  }

  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_11:
  _Unwind_Resume(a1);
}

void *slideSymbolsByOffset<Pointer64>(void *result, uint64_t a2)
{
  *result += a2;
  uint64_t v2 = result[8];
  for (uint64_t i = result[9]; v2 != i; v2 += 104LL)
    uint64_t result = (void *)slideSymbolsByOffset<Pointer64>(v2, a2);
  return result;
}

uint64_t __Block_byref_object_copy__239(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 96) = 0LL;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 4_Block_object_dispose((const void *)(v30 - 160), 8) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  return TRawSymbol<Pointer64>::operator=(v2, a2 + 40);
}

void __Block_byref_object_dispose__240(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 104);
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_241( void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[4] + 8LL);
  uint64_t v3 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  uint64_t v6 = a2;
  uint64_t v4 = a1[9];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v2 + 104, v3);
}

uint64_t __copy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 48,  a2 + 48);
}

void *__destroy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 48);
  uint64_t result = *(void **)(a1 + 72);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_243( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8LL));
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  if ((v7 - 1) >= 2)
  {
    if (v7 != 4) {
      return;
    }
    uint64_t v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v5);
    unint64_t v19 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = (_DWORD *)*((void *)v18 + 11);
    uint64_t v21 = *(CSCppStringCache **)(*(void *)(a1[4] + 8LL) + 24LL);
    uint64_t v22 = (char *)CSCppMMapSourceInfo::path( (CSCppMMapSourceInfo *)v19,  (uint64_t)v20 + 32 * v20[2] + 24 * v20[3] + (24 * v20[4])
                  + (unint64_t)(4 * v20[4])
                  + (36 * v20[5])
                  + (20 * v20[6])
                  + v20[22]
                  + v20[20]
                  + 96);
    unsigned int v23 = CSCppStringCache::intern(v21, v22);
    unint64_t v52 = 0LL;
    TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *v19, &v52);
    uint64_t v24 = a1[6];
    uint64_t v11 = *(void ***)(*(void *)(a1[5] + 8LL) + 24LL);
    uint64_t v25 = v24 + v52;
    uint64_t v26 = v19[1];
    unsigned int v28 = v19[3];
    unsigned int v27 = v19[4];
    uint64_t v16 = (char *)v11[1];
    __int128 v29 = (char *)v11[2];
    if (v16 < v29)
    {
      *(void *)uint64_t v16 = v25;
      *((void *)v16 + 1) = v26;
      *((void *)v16 + 2) = v23;
      *((_DWORD *)v16 + 6) = v28;
      *((_DWORD *)v16 + 7) = v27;
      goto LABEL_7;
    }

    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*v11) >> 3);
    unint64_t v44 = v43 + 1;
    if (v43 + 1 <= 0x666666666666666LL)
    {
      unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)*v11) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x333333333333333LL) {
        unint64_t v46 = 0x666666666666666LL;
      }
      else {
        unint64_t v46 = v44;
      }
      uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)(v11 + 2),  v46);
      uint64_t v36 = &v47[40 * v43];
      uint64_t v38 = &v47[40 * v48];
      *(void *)uint64_t v36 = v25;
      *((void *)v36 + 1) = v26;
      *((void *)v36 + 2) = v23;
      *((_DWORD *)v36 + 6) = v28;
      *((_DWORD *)v36 + 7) = v27;
      *((_DWORD *)v36 + _Block_object_dispose((const void *)(v30 - 160), 8) = 0;
      uint64_t v30 = v36 + 40;
      uint64_t v49 = (char *)*v11;
      __int128 v39 = (char *)v11[1];
      if (v39 == *v11) {
        goto LABEL_26;
      }
      do
      {
        __int128 v50 = *(_OWORD *)(v39 - 40);
        __int128 v51 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v51;
        *(_OWORD *)(v36 - 40) = v50;
        v36 -= 40;
        v39 -= 40;
      }

      while (v39 != v49);
      goto LABEL_25;
    }

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEv( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF8E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v30 - 160), 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEPNS0_6__baseISX_EE( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF8E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v30 - 160), 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EEclESN_SS_SU_( uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unint64_t v8 = *(char **)(a2 + 48);
  if (v8)
  {
    *((void *)&v25 + 1) = *(void *)(a2 + 56);
    *(void *)&__int128 v25 = CSCppStringCache::intern(this, v8);
  }

  else
  {
    __int128 v25 = 0uLL;
  }

  unsigned int v9 = atomic_load((unsigned int *)(a2 + 28));
  unsigned int v10 = v9 & 0xF77BFFFF;
  unsigned int v11 = v9 & 0xF77BFFFF | 0x8000000;
  uint64_t v13 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int v14 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  int v15 = CSCppStringCache::intern(this, v14);
  uint64_t v16 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  uint64_t v17 = CSCppStringCache::intern(this, v16);
  unsigned int v18 = atomic_load((unsigned int *)(a2 + 28));
  uint64_t v19 = *(void *)(a2 + 48);
  v26[0] = v13;
  v26[1] = v12;
  void v26[2] = 0LL;
  uint64_t v27 = 0LL;
  unsigned int v28 = v15;
  __int128 v29 = v17;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  memset(v31, 0, 25);
  if ((v18 & 0x80000000) != 0 && v19)
  {
    __int128 v30 = v25;
    unsigned int v11 = v10 | 0x88000000;
  }

  HIDWORD(v27) = v11;
  uint64_t v20 = *(void *)(a2 + 64);
  for (uint64_t i = *(void *)(a2 + 72); v20 != i; v20 += 104LL)
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 8) + 24LL);
    if (!v22) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v22 + 48LL))( v22,  v20,  v31,  this);
  }

  unint64_t v23 = a3[1];
  if (v23 >= a3[2])
  {
    uint64_t v24 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v26);
  }

  else
  {
    *(void *)(v23 + 96) = 0LL;
    *(_OWORD *)unint64_t v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 4_Block_object_dispose((const void *)(v30 - 160), 8) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(_OWORD *)(v23 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v23, (uint64_t)v26);
    uint64_t v24 = v23 + 104;
  }

  a3[1] = v24;
  unint64_t v33 = (void **)v31;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_186040F24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v19 - 8_Block_object_dispose((const void *)(v30 - 160), 8) = &a19;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE6targetERKSt9type_info( uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100]( a2,  (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_;
}

uint64_t TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>( uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 28);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 28));
  if ((v3 & 0x400000) == 0)
  {
    uint64_t v10 = 0LL;
    unsigned int v11 = &v10;
    uint64_t v12 = 0x2000000000LL;
    uint64_t v4 = operator new(0x10uLL);
    CSCppBitLock::CSCppBitLock((uint64_t)v4, v2, 0x2000);
    uint64_t v13 = v4;
    void v8[4] = &v10;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    _OWORD v9[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke;
    v9[3] = &unk_189DF8F10;
    v9[4] = &v10;
    v9[5] = a1;
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    v8[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2;
    void v8[3] = &unk_189DF8F38;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v9, (uint64_t)v8);
    uint64_t v5 = (CSCppBitLock *)v11[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      operator delete(v6);
      v11[3] = 0LL;
    }

    _Block_object_dispose(&v10, 8);
  }

  return *(void *)(a1 + 40);
}

void sub_186041080(_Unwind_Exception *a1)
{
}

unsigned int **___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke( unsigned int **result)
{
  uint64_t v1 = result[5];
  uint64_t v2 = v1 + 7;
  unsigned int v3 = atomic_load(v1 + 7);
  if ((v3 & 0x400000) == 0)
  {
    uint64_t v4 = result;
    unsigned int v5 = atomic_load(v2);
    unsigned int v6 = atomic_load(v2);
    if ((v5 & 0x80000) != 0)
    {
      int v8 = 0x400000;
      if ((v6 & 2) == 0) {
        return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
      }
      unsigned int v9 = "DYLD-STUB$$";
    }

    else
    {
      if ((v6 & 0x100000) == 0)
      {
        unsigned int v7 = atomic_load(v1 + 7);
        if ((v7 & 0x200000) == 0)
        {
          int v8 = 0x400000;
          return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
        }
      }

      int is_objc_method_internal = TRawSymbol<Pointer32>::is_objc_method_internal((int)result[5], *((char **)v1 + 5));
      int v8 = is_objc_method_internal | 0x400000;
      unsigned int v9 = "_";
    }

    *((void *)v1 + 12) = v9;
    return CSCppBitLock::set_bits(*(unsigned int ***)(*((void *)v4[4] + 1) + 24LL), v8);
  }

  return result;
}

void ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2( uint64_t a1)
{
  uint64_t v2 = *(CSCppBitLock **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2)
  {
    CSCppBitLock::~CSCppBitLock(v2);
    operator delete(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void *std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    unsigned int v3 = result;
    uint64_t v4 = (void *)result[3];
    unsigned int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1860412EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEv( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189DF8F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEPNS0_6__baseISY_EE( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF8F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EEclEOSM_ST_SV_( void *a1, uint64_t *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v7 = (__int128 *)*a2;
  int v8 = (TMMapSymbolOwnerData *)a1[2];
  unsigned int v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*(_DWORD *)(*a2 + 8) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)v7 + 6), v10 + v11))
  {
    uint64_t v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)v7 + 2) & 0x80000000) != 0) {
      uint64_t v24 = *(void *)((char *)v7 + 28);
    }
    else {
      uint64_t v24 = 0LL;
    }
    *((void *)&v30 + 1) = v24;
    int v8 = (TMMapSymbolOwnerData *)a1[2];
  }

  else
  {
    uint64_t v12 = 0LL;
    *((void *)&v30 + 1) = 0LL;
  }

  __int128 v13 = *v7;
  uint64_t v48 = *((void *)v7 + 2);
  __int128 v47 = v13;
  unint64_t v46 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v13, &v46) & 1) != 0)
  {
    *(void *)&__int128 v30 = v12;
    int v14 = (char *)(v10 + v48);
    uint64_t v15 = DWORD1(v47);
    int v16 = DWORD2(v47);
    if (HIDWORD(v47)) {
      unsigned int v17 = DWORD2(v47);
    }
    else {
      unsigned int v17 = DWORD2(v47) & 0xF779FFFF;
    }
    if (HIDWORD(v47)) {
      unsigned int v18 = (char *)(v10 + HIDWORD(v47));
    }
    else {
      unsigned int v18 = (char *)(v10 + v48);
    }
    unsigned int v19 = v17 & 0xF77BFFFF;
    int v35 = __Block_byref_object_copy__239;
    uint64_t v36 = __Block_byref_object_dispose__240;
    unint64_t v20 = a1[3] + v46;
    *(void *)__int128 buf = 0LL;
    unint64_t v33 = buf;
    uint64_t v34 = 0x9002000000LL;
    uint64_t v21 = CSCppStringCache::intern(this, v18);
    uint64_t v22 = CSCppStringCache::intern(this, v14);
    unint64_t v37 = v20;
    uint64_t v38 = v15;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    __int128 v41 = v21;
    __int128 v42 = v22;
    uint64_t v45 = 0LL;
    __int128 v43 = 0u;
    memset(v44, 0, 25);
    if (v16 < 0)
    {
      __int128 v43 = v30;
      unsigned int v23 = v19 | 0x88000000;
    }

    else
    {
      unsigned int v23 = v19 | 0x8000000;
    }

    HIDWORD(v40) = v23;
    v31[0] = MEMORY[0x1895F87A8];
    v31[1] = 0x40000000LL;
    _OWORD v31[2] = ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke;
    v31[3] = &unk_189DF8FF0;
    uint64_t v26 = a1[1];
    uint64_t v25 = a1[2];
    v31[4] = buf;
    v31[5] = v26;
    v31[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v25, (uint64_t)&v47, (uint64_t)v31);
    uint64_t v27 = (uint64_t)(v33 + 40);
    unint64_t v28 = a3[1];
    if (v28 >= a3[2])
    {
      uint64_t v29 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, v27);
    }

    else
    {
      *(void *)(v28 + 96) = 0LL;
      *(_OWORD *)unint64_t v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v28, v27);
      uint64_t v29 = v28 + 104;
    }

    a3[1] = v29;
    _Block_object_dispose(buf, 8);
    uint64_t v49 = (void **)v44;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v49);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps inline enumeration",  buf,  2u);
    }

    fwrite( "Could not remap archive address to real in debug maps inline enumeration",  0x48uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
  }

void sub_186041670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  *(void *)(v34 - 104) = &a34;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE6targetERKSt9type_info( uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100]( a2,  (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_;
}

uint64_t ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(a1[4] + 8LL);
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v2 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v3 + 104, v4);
}

void *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_186041894(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>( void **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  uint64_t v11 = *(void **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (_BYTE *)*a1) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555LL) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v18);
    unint64_t v20 = &v19[24 * v15];
    uint64_t v22 = &v19[24 * v21];
    uint64_t v23 = *a3;
    uint64_t v24 = *a4;
    *(void *)unint64_t v20 = *a2;
    *((void *)v20 + 1) = v23;
    *((void *)v20 + 2) = v24;
    int v14 = v20 + 24;
    uint64_t v26 = (char *)*a1;
    uint64_t v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        __int128 v27 = *(_OWORD *)(v25 - 24);
        *((void *)v20 - 1) = *((void *)v25 - 1);
        *(_OWORD *)(v20 - 24) = v27;
        v20 -= 24;
        v25 -= 24;
      }

      while (v25 != v26);
      uint64_t v25 = (char *)*a1;
    }

    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v25) {
      operator delete(v25);
    }
  }

  else
  {
    uint64_t v12 = *a3;
    uint64_t v13 = *a4;
    *uint64_t v11 = *a2;
    v11[1] = v12;
    v11[2] = v13;
    int v14 = v11 + 3;
  }

  a1[1] = v14;
  return v14 - 3;
}

void sort_inlined_functions<Pointer64>(uint64_t a1)
{
  uint64_t v2 = *(__n128 **)(a1 + 64);
  uint64_t v3 = *(__n128 **)(a1 + 72);
  unint64_t v4 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5LL * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>( v2,  v3,  (uint64_t)&v8,  v5,  1);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  while (v6 != v7)
  {
    sort_inlined_functions<Pointer64>(v6);
    v6 += 104LL;
  }

uint64_t std::vector<TRawSymbol<Pointer64>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>( a3,  *(void *)(a1 + 8),  a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 104;
        unint64_t v10 = (void **)(v7 - 40);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v10);
        uint64_t v7 = v8;
      }

      while (v8 != v6);
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v6;
  }

  return a2;
}

void **std::vector<TRawSymbol<Pointer64>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5LL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277LL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 104 * v6;
    std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v7);
  }

  return result;
}

void sub_186041B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = (unint64_t *)a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unint64_t v25 = *((void *)a2 - 3);
        uint64_t v24 = (char *)a2 - 24;
        if (v25 < *v9)
        {
          unint64_t v36 = v9[2];
          __int128 v33 = *(_OWORD *)v9;
          __int128 v26 = *(_OWORD *)v24;
          *((_DWORD *)v9 + 4) = *((_DWORD *)v24 + 4);
          *(_OWORD *)unint64_t v9 = v26;
          *(_OWORD *)uint64_t v24 = v33;
          *((_DWORD *)v24 + 4) = v36;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)v9,  v9 + 3,  (unint64_t *)a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (uint64_t)v9,  v9 + 3,  v9 + 6,  (uint64_t)a2 - 24);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__n128 *)v9,  v9 + 3,  v9 + 6,  (__n128 *)(v9 + 9),  (__n128 *)((char *)a2 - 24));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != (unint64_t *)a2) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,TRangeValue<Pointer64,unsigned int> *>( (uint64_t)v9,  a2,  a2,  a3);
            }
            return;
          }

          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)&v9[3 * v14],  v9,  (unint64_t *)a2 - 3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)v9,  &v9[3 * v14],  (unint64_t *)a2 - 3);
            uint64_t v16 = 3 * v14;
            unint64_t v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)(v9 + 3),  v17,  (unint64_t *)a2 - 6);
            unint64_t v18 = (__int128 *)(v9 + 6);
            unsigned int v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( v18,  v19,  (unint64_t *)a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)v17,  v15,  v19);
            uint64_t v35 = *(void *)(a1 + 16);
            __int128 v32 = *(_OWORD *)a1;
            __int128 v20 = *(_OWORD *)v15;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v15 + 4);
            *(_OWORD *)a1 = v20;
            *((_DWORD *)v15 + 4) = v35;
            *(_OWORD *)unint64_t v15 = v32;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(void *)(a1 - 24) >= *(void *)a1)
          {
            unint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>( (unint64_t *)a1,  (unint64_t)a2);
            goto LABEL_16;
          }

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *(void *)(v4 + 24);
        if (v6 < *(void *)v4)
        {
          __int128 v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24LL;
            if (v6 >= *(void *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }

          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v6;
          *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
          *(_DWORD *)(v9 + 16) = DWORD2(v10);
        }

        uint64_t v2 = v5 + 24;
        v3 += 24LL;
        uint64_t v4 = v5;
      }

      while (v5 + 24 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( __int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      __int128 v5 = *a1;
      uint64_t v6 = *((void *)a1 + 2);
      int v7 = *((_DWORD *)a3 + 4);
      *a1 = *(_OWORD *)a3;
      *((_DWORD *)a1 + 4) = v7;
      *((_DWORD *)a3 + 4) = v6;
      *(_OWORD *)a3 = v5;
      return 1LL;
    }

    __int128 v14 = *a1;
    uint64_t v15 = *((void *)a1 + 2);
    int v16 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v16;
    *((_DWORD *)a2 + 4) = v15;
    *(_OWORD *)a2 = v14;
    if (*a3 >= *a2) {
      return 1LL;
    }
    __int128 v17 = *(_OWORD *)a2;
    unint64_t v18 = a2[2];
    int v19 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v19;
    *((_DWORD *)a3 + 4) = v18;
    *(_OWORD *)a3 = v17;
    return 2LL;
  }

  if (v4 < v3)
  {
    __int128 v8 = *(_OWORD *)a2;
    unint64_t v9 = a2[2];
    int v10 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v10;
    *((_DWORD *)a3 + 4) = v9;
    *(_OWORD *)a3 = v8;
    if (*a2 >= *(void *)a1) {
      return 1LL;
    }
    __int128 v11 = *a1;
    uint64_t v12 = *((void *)a1 + 2);
    int v13 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v13;
    *((_DWORD *)a2 + 4) = v12;
    *(_OWORD *)a2 = v11;
    return 2LL;
  }

  return 0LL;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>( unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  __int128 v14 = *(_OWORD *)(a1 + 1);
  if (*a1 >= *(void *)(a2 - 24))
  {
    __int128 v5 = a1 + 3;
    do
    {
      unint64_t v3 = v5;
      v5 += 3;
    }

    while (v2 >= *v3);
  }

  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[3];
      v3 += 3;
    }

    while (v2 >= v4);
  }

  if ((unint64_t)v3 < a2)
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24LL;
    }

    while (v2 < v6);
  }

  while ((unint64_t)v3 < a2)
  {
    unint64_t v13 = v3[2];
    __int128 v12 = *(_OWORD *)v3;
    __int128 v7 = *(_OWORD *)a2;
    *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v3 = v7;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      unint64_t v8 = v3[3];
      v3 += 3;
    }

    while (v2 >= v8);
    do
    {
      unint64_t v9 = *(void *)(a2 - 24);
      a2 -= 24LL;
    }

    while (v2 < v9);
  }

  if (v3 - 3 != a1)
  {
    __int128 v10 = *(_OWORD *)(v3 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v10;
  }

  *(v3 - 3) = v2;
  *((_DWORD *)v3 - 2) = DWORD2(v14);
  *(v3 - 2) = v14;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>( uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0LL;
  unint64_t v3 = *a1;
  __int128 v17 = *(_OWORD *)(a1 + 1);
  do
  {
    unint64_t v4 = a1[v2 + 3];
    v2 += 3LL;
  }

  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v7 = *(void *)(a2 - 24);
      a2 -= 24LL;
    }

    while (v7 >= v3);
  }

  else
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24LL;
    }

    while (v6 >= v3);
  }

  unint64_t v8 = &a1[v2];
  if (v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      __int128 v10 = *(_OWORD *)v8;
      uint64_t v11 = v8[2];
      int v12 = *(_DWORD *)(v9 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *((_DWORD *)v8 + 4) = v12;
      *(_DWORD *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        unint64_t v13 = v8[3];
        v8 += 3;
      }

      while (v13 < v3);
      do
      {
        unint64_t v14 = *(void *)(v9 - 24);
        v9 -= 24LL;
      }

      while (v14 >= v3);
    }

    while ((unint64_t)v8 < v9);
  }

  if (v8 - 3 != a1)
  {
    __int128 v15 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v15;
  }

  *(v8 - 3) = v3;
  *((_DWORD *)v8 - 2) = DWORD2(v17);
  *(v8 - 2) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (__int128 *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        __int128 v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a1 + 16);
        int v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - _Block_object_dispose((const void *)(v1 - 64), 8) = v8;
        *unint64_t v6 = v7;
      }

      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a2 - 24));
      return 1LL;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48),  a2 - 24);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__n128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48),  (__n128 *)(a1 + 72),  (__n128 *)(a2 - 24));
      return 1LL;
    default:
      __int128 v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (__int128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      __int128 v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_DWORD *)(v16 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = *(_DWORD *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24LL;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }

      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(void *)(v17 + _Block_object_dispose((const void *)(v1 - 64), 8) = v18;
      *(_DWORD *)(v17 + 16) = DWORD2(v18);
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }

    __int128 v10 = (void *)v11;
    v12 += 24LL;
    v11 += 24LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    unint64_t v9 = a3[2];
    int v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 4) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      unint64_t v11 = a2[2];
      int v12 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v12;
      *((_DWORD *)a3 + 4) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        int v14 = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *((_DWORD *)a2 + 4) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( __n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( (uint64_t)a1,  a2,  a3,  (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    unint64_t v11 = a4[1].n128_u64[0];
    unsigned __int32 v12 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v12;
    a5[1].n128_u32[0] = v11;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      unint64_t v13 = a3[2];
      unsigned __int32 v14 = a4[1].n128_u32[0];
      *(__n128 *)a3 = *a4;
      *((_DWORD *)a3 + 4) = v14;
      a4[1].n128_u32[0] = v13;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        unint64_t v15 = a2[2];
        int v16 = *((_DWORD *)a3 + 4);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_DWORD *)a2 + 4) = v16;
        *((_DWORD *)a3 + 4) = v15;
        *(__n128 *)a3 = result;
        if (*a2 < a1->n128_u64[0])
        {
          __n128 result = *a1;
          unint64_t v17 = a1[1].n128_u64[0];
          unsigned __int32 v18 = *((_DWORD *)a2 + 4);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v18;
          *((_DWORD *)a2 + 4) = v17;
          *(__n128 *)a2 = result;
        }
      }
    }
  }

  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,TRangeValue<Pointer64,unsigned int> *>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  if ((__int128 *)a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned __int32 v12 = (unint64_t *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( a1,  a4,  v9,  v12);
        v12 -= 3;
        --v11;
      }

      while (v11);
    }

    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned __int32 v14 = v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          __int128 v15 = *v14;
          uint64_t v16 = *((void *)v14 + 2);
          int v17 = *(_DWORD *)(a1 + 16);
          *unsigned __int32 v14 = *(_OWORD *)a1;
          *((_DWORD *)v14 + 4) = v17;
          *(_DWORD *)(a1 + 16) = v16;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( a1,  a4,  v9,  (unint64_t *)a1);
        }

        unsigned __int32 v14 = (__int128 *)((char *)v14 + 24);
      }

      while (v14 != a3);
      unint64_t v13 = a3;
    }

    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      do
      {
        uint64_t v19 = 0LL;
        __int128 v28 = *(_OWORD *)a1;
        uint64_t v29 = *(void *)(a1 + 16);
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v20 + 24 * v19 + 24;
          uint64_t v22 = (2 * v19) | 1;
          uint64_t v23 = 2 * v19 + 2;
          if (v23 < v18 && *(void *)v21 < *(void *)(v21 + 24))
          {
            v21 += 24LL;
            uint64_t v22 = v23;
          }

          __int128 v24 = *(_OWORD *)v21;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v21 + 16);
          *(_OWORD *)uint64_t v20 = v24;
          uint64_t v20 = v21;
          uint64_t v19 = v22;
        }

        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        unint64_t v6 = (__int128 *)((char *)v6 - 24);
        if ((__int128 *)v21 == v6)
        {
          *(_DWORD *)(v21 + 16) = v29;
          *(_OWORD *)uint64_t v21 = v28;
        }

        else
        {
          __int128 v25 = *v6;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v6 + 4);
          *(_OWORD *)uint64_t v21 = v25;
          *unint64_t v6 = v28;
          *((_DWORD *)v6 + 4) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( a1,  v21 + 24,  a4,  0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556LL * (((uint64_t)a4 - result) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(result + 24 * v5);
      if (0x5555555555555556LL * (((uint64_t)a4 - result) >> 3) + 2 >= a3)
      {
        unint64_t v7 = *v6;
      }

      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[3];
        if (*v6 <= v8) {
          unint64_t v7 = v6[3];
        }
        if (*v6 < v8)
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556LL * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }

      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        __int128 v15 = *(_OWORD *)(a4 + 1);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          __int128 v11 = *(_OWORD *)v6;
          *((_DWORD *)v10 + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)unint64_t v10 = v11;
          if (v4 < v5) {
            break;
          }
          uint64_t v12 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(result + 24 * v12);
          uint64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v13 = *v6;
            uint64_t v5 = v12;
          }

          else
          {
            unint64_t v13 = *v6;
            unint64_t v14 = v6[3];
            if (*v6 <= v14) {
              unint64_t v13 = v6[3];
            }
            if (*v6 >= v14) {
              uint64_t v5 = v12;
            }
            else {
              v6 += 3;
            }
          }
        }

        while (v13 >= v9);
        *a4 = v9;
        a4[1] = v15;
        *((_DWORD *)a4 + 4) = DWORD2(v15);
      }
    }
  }

  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unint64_t v6 = (__int128 *)(result + 24 * (v4 >> 1));
    unint64_t v7 = (__int128 *)(a2 - 24);
    unint64_t v8 = *(void *)(a2 - 24);
    if (*(void *)v6 < v8)
    {
      __int128 v11 = *(_OWORD *)(a2 - 16);
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = v6;
        __int128 v10 = *v6;
        *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
        *unint64_t v9 = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = (__int128 *)(result + 24 * v5);
      }

      while (*(void *)v6 < v8);
      *(void *)unint64_t v7 = v8;
      *((void *)v7 + 1) = v11;
      *((_DWORD *)v7 + 4) = DWORD2(v11);
    }
  }

  return result;
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    unint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 104 * a5;
      }

      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>( (uint64_t)v9,  v21,  a4,  *(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }

      std::vector<TRawSymbol<Pointer64>>::__move_range((uint64_t)a1, v5, v12, v5 + 104 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          TRawSymbol<Pointer64>::operator=(v22, v7);
          v7 += 104LL;
          v22 += 104LL;
        }

        while (v7 != v21);
      }
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x4EC4EC4EC4EC4EC5LL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x276276276276276LL) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x4EC4EC4EC4EC4EC5LL * ((a2 - v13) >> 3);
      unint64_t v16 = 0x4EC4EC4EC4EC4EC5LL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x13B13B13B13B13BLL) {
        unint64_t v18 = 0x276276276276276LL;
      }
      else {
        unint64_t v18 = v17;
      }
      v27[4] = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)v9, v18);
      }
      else {
        uint64_t v19 = 0LL;
      }
      uint64_t v23 = &v19[104 * v15];
      v27[0] = v19;
      v27[1] = v23;
      v27[3] = &v19[104 * v18];
      uint64_t v24 = 104 * a5;
      __int128 v25 = &v23[104 * a5];
      do
      {
        *((void *)v23 + 12) = 0LL;
        *(_OWORD *)uint64_t v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        *(_OWORD *)(v23 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=((uint64_t)v23, v7);
        v23 += 104;
        v7 += 104LL;
        v24 -= 104LL;
      }

      while (v24);
      v27[2] = v25;
      uint64_t v5 = std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v27);
    }
  }

  return v5;
}

void sub_186042E4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__move_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)(v8 + 96) = 0LL;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v8, v10);
      v10 += 104LL;
      v8 += 104LL;
    }

    while (v10 < a3);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>( a2,  v7,  v6);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>>( (uint64_t)(a1 + 2),  a3,  a3,  *a1,  *a1,  v6,  v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>( v7,  a3,  a1[1],  a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 96) = 0LL;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v4, v6);
      v6 += 104LL;
      uint64_t v4 = v11 + 104;
      v11 += 104LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 104LL;
      a3 -= 104LL;
      TRawSymbol<Pointer64>::operator=(a3, v6);
    }

    while (v6 != a1);
  }

  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer64>::operator=(a3, v4);
      v4 += 104LL;
      a3 += 104LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t *std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>( void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = a5;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)v8);
        v8 += 13;
      }

      else
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)a3);
        a3 += 13;
      }

      if (v8 == a2)
      {
        a5 = v10;
        goto LABEL_9;
      }
    }

    uint64_t v11 = v10;
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)v8);
      v8 += 13;
    }

    while (v8 != a2);
    return v11;
  }

uint64_t **std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100]( uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(*a1, a2);
  }

  else
  {
    *(void *)(v4 + 96) = 0LL;
    *(_OWORD *)unint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v4, a2);
    uint64_t v5 = v4 + 104;
  }

  v3[1] = v5;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if (a1 >= 0x333333333333333LL) {
    unint64_t v1 = 0x333333333333333LL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1896146B8];
  while (1)
  {
    __n128 result = operator new(40 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      char v9 = (__int128 *)((char *)a2 - 40);
      if (*((void *)a2 - 5) < *(void *)a1)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        a7 = *(__n128 *)a1;
        __int128 v11 = *(_OWORD *)(a1 + 16);
        int v12 = *((_DWORD *)a2 - 2);
        __int128 v13 = *(__int128 *)((char *)a2 - 24);
        *(_OWORD *)a1 = *v9;
        *(_OWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 32) = v12;
        *char v9 = a7;
        *(__int128 *)((char *)a2 - 24) = v11;
        *((_DWORD *)a2 - 2) = v10;
      }
    }

    else if ((uint64_t)a4 > 128)
    {
      unint64_t v18 = a4 >> 1;
      uint64_t v19 = (__int128 *)(a1 + 40 * (a4 >> 1));
      unint64_t v20 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v21.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  v19,  a3,  v20,  (uint64_t)a5,  a7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1 + 40 * (a4 >> 1),  a2,  a3,  a4 - (a4 >> 1),  (uint64_t)&a5[40 * v18],  v21);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( (uint64_t)a5,  (uint64_t)&a5[40 * v18],  (uint64_t)&a5[40 * v18],  (uint64_t)&a5[40 * a4],  a1).n128_u64[0];
      }

      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  v19,  a3,  v20,  a5,  a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1 + 40 * (a4 >> 1),  a2,  a3,  a4 - (a4 >> 1),  a5,  a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( (char *)a1,  (__int128 *)(a1 + 40 * (a4 >> 1)),  a2,  a3,  a4 >> 1,  a4 - (a4 >> 1),  a5,  a6).n128_u64[0];
      }
    }

    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  (unint64_t *)a2);
    }
  }

  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( uint64_t result, unint64_t *a2)
{
  if ((unint64_t *)result != a2)
  {
    uint64_t v2 = (unint64_t *)(result + 40);
    if ((unint64_t *)(result + 40) != a2)
    {
      uint64_t v3 = 0LL;
      BOOL v4 = (unint64_t *)result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *v2;
        if (v6 < *v4)
        {
          *(_OWORD *)__int128 v11 = *((_OWORD *)v4 + 3);
          *(_OWORD *)&v11[16] = *((_OWORD *)v4 + 4);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            __int128 v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7) {
              break;
            }
            v7 -= 40LL;
            if (v6 >= *(void *)(v8 - 40))
            {
              uint64_t v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }

          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v6;
          *(_OWORD *)(v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }

        uint64_t v2 = v5 + 5;
        v3 += 40LL;
        BOOL v4 = v5;
      }

      while (v5 + 5 != a2);
    }
  }

  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      __int128 v11 = (__n128 *)((char *)a2 - 40);
      if (*((void *)a2 - 5) >= *(void *)a1)
      {
        __n128 v17 = *(__n128 *)a1;
        __int128 v18 = *(_OWORD *)(a1 + 16);
        *(void *)(a5 + 32) = *(void *)(a1 + 32);
        *(__n128 *)a5 = v17;
        *(_OWORD *)(a5 + 16) = v18;
        a6 = *v11;
        __int128 v14 = *(__int128 *)((char *)a2 - 24);
        uint64_t v15 = *((void *)a2 - 1);
      }

      else
      {
        __n128 v12 = *v11;
        __int128 v13 = *(__int128 *)((char *)a2 - 24);
        *(void *)(a5 + 32) = *((void *)a2 - 1);
        *(__n128 *)a5 = v12;
        *(_OWORD *)(a5 + 16) = v13;
        a6 = *(__n128 *)a1;
        __int128 v14 = *(_OWORD *)(a1 + 16);
        uint64_t v15 = *(void *)(a1 + 32);
      }

      *(void *)(a5 + 72) = v15;
      *(__n128 *)(a5 + 40) = a6;
      *(_OWORD *)(a5 + 56) = v14;
    }

    else if (a4 == 1)
    {
      a6 = *(__n128 *)a1;
      __int128 v10 = *(_OWORD *)(a1 + 16);
      *(void *)(a5 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a5 = a6;
      *(_OWORD *)(a5 + 16) = v10;
    }

    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  a1 + 40 * (a4 >> 1),  a3,  a4 >> 1,  a5,  a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1 + 40 * (a4 >> 1),  a2,  a3,  a4 - (a4 >> 1),  a5 + 40 * (a4 >> 1),  a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  a1 + 40 * (a4 >> 1),  a1 + 40 * (a4 >> 1),  (uint64_t)a2,  a5).n128_u64[0];
    }

    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( (__int128 *)a1,  a2,  (unint64_t *)a5);
    }
  }

  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        __int128 v8 = *(_OWORD *)(a3 + 16);
        *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40LL;
        a5 += 40LL;
      }

      return result;
    }

    if (a3 == a4) {
      break;
    }
    if (*(void *)a3 >= *(void *)a1)
    {
      __n128 result = *(__n128 *)a1;
      __int128 v7 = *(_OWORD *)(a1 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40LL;
    }

    else
    {
      __n128 result = *(__n128 *)a3;
      __int128 v6 = *(_OWORD *)(a3 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40LL;
    }

    a5 += 40LL;
  }

  if (a1 != a2)
  {
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v10 = a5 + v9;
      __n128 result = *(__n128 *)(a1 + v9);
      __int128 v11 = *(_OWORD *)(a1 + v9 + 16);
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a1 + v9 + 32);
      *(__n128 *)uint64_t v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40LL;
    }

    while (a1 + v9 != a2);
  }

  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( char *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( a1,  a2,  a3,  a4,  a5,  v9,  a7);
        return result;
      }

      if (!a5) {
        return result;
      }
      uint64_t v12 = 0LL;
      uint64_t v13 = -a5;
      while (*(void *)a2 >= *(void *)&a1[v12])
      {
        v12 += 40LL;
        if (__CFADD__(v13++, 1LL)) {
          return result;
        }
      }

      uint64_t v15 = -v13;
      __int128 v43 = a3;
      uint64_t v44 = a8;
      __int128 v42 = &a1[v12];
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          uint64_t v39 = &a1[v12];
          uint64_t v49 = *(void *)&a1[v12 + 32];
          __n128 v47 = *(__n128 *)&a1[v12];
          __int128 v48 = *(_OWORD *)&a1[v12 + 16];
          __int128 v40 = *a2;
          __int128 v41 = a2[1];
          *((_DWORD *)v39 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)a2 + 8);
          *(_OWORD *)uint64_t v39 = v40;
          *((_OWORD *)v39 + 1) = v41;
          __n128 result = v47;
          *a2 = (__int128)v47;
          a2[1] = v48;
          *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v49;
          return result;
        }

        if (v13 > 0) {
          uint64_t v15 = 1 - v13;
        }
        uint64_t v25 = v15 >> 1;
        uint64_t v19 = (__int128 *)&a1[40 * (v15 >> 1) + v12];
        __int128 v18 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
          __int128 v18 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            __int128 v28 = (void *)v18 + 5 * (v26 >> 1);
            unint64_t v30 = *v28;
            uint64_t v29 = (__int128 *)(v28 + 5);
            v26 += ~(v26 >> 1);
            if (v30 < *(void *)v19) {
              __int128 v18 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }

          while (v26);
        }

        uint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)a2) >> 3);
      }

      else
      {
        if (v9 >= 0) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v9 + 1;
        }
        uint64_t v17 = v16 >> 1;
        __int128 v18 = (__int128 *)((char *)a2 + 40 * (v16 >> 1));
        uint64_t v19 = a2;
        if ((char *)a2 - a1 != v12)
        {
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - a1 - v12) >> 3);
          uint64_t v19 = (__int128 *)&a1[v12];
          do
          {
            unint64_t v21 = v20 >> 1;
            uint64_t v22 = (void *)v19 + 5 * (v20 >> 1);
            unint64_t v24 = *v22;
            uint64_t v23 = (__int128 *)(v22 + 5);
            v20 += ~(v20 >> 1);
            if (*(void *)v18 < v24) {
              unint64_t v20 = v21;
            }
            else {
              uint64_t v19 = v23;
            }
          }

          while (v20);
        }

        uint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - a1 - v12) >> 3);
      }

      a5 = -v25 - v13;
      uint64_t v31 = v9 - v17;
      uint64_t v32 = v25;
      __int128 v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( v19,  a2,  v18);
      uint64_t v34 = v32;
      uint64_t v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        uint64_t v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( v33,  v18,  v43,  a4,  a5,  v9 - v17,  a7,  v44);
        a2 = v19;
        uint64_t v31 = v17;
        a8 = v44;
        a5 = v38;
        a3 = v35;
        a1 = v42;
      }

      else
      {
        uint64_t v36 = v17;
        a8 = v44;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( &a1[v12],  v19,  v33,  a4,  v34,  v36,  a7,  v44);
        a1 = (char *)v35;
        a2 = v18;
        a3 = v43;
      }

      uint64_t v9 = v31;
    }

    while (v31);
  }

  return result;
}

__int128 *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( __int128 *result, __int128 *a2, unint64_t *a3)
{
  if (result != a2)
  {
    __int128 v3 = *result;
    __int128 v4 = result[1];
    a3[4] = *((void *)result + 4);
    *(_OWORD *)a3 = v3;
    *((_OWORD *)a3 + 1) = v4;
    uint64_t v5 = (__int128 *)((char *)result + 40);
    if ((__int128 *)((char *)result + 40) != a2)
    {
      uint64_t v6 = 0LL;
      __int128 v7 = a3;
      __int128 v8 = a3;
      do
      {
        unint64_t v9 = *v8;
        v8 += 5;
        if (*(void *)v5 >= v9)
        {
          __int128 v16 = *v5;
          __int128 v17 = v5[1];
          void v8[4] = *((void *)v5 + 4);
          *(_OWORD *)__int128 v8 = v16;
          *((_OWORD *)v8 + 1) = v17;
        }

        else
        {
          __int128 v10 = *((_OWORD *)v7 + 1);
          *(_OWORD *)__int128 v8 = *(_OWORD *)v7;
          *((_OWORD *)v8 + 1) = v10;
          void v8[4] = v7[4];
          __int128 v11 = a3;
          if (v7 != a3)
          {
            uint64_t v12 = v6;
            while (1)
            {
              __int128 v11 = (unint64_t *)((char *)a3 + v12);
              __int128 v13 = *(_OWORD *)((char *)a3 + v12 - 24);
              *(_OWORD *)__int128 v11 = *(_OWORD *)((char *)a3 + v12 - 40);
              *((_OWORD *)v11 + 1) = v13;
              *((_DWORD *)v11 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_DWORD *)((char *)a3 + v12 - 8);
              v12 -= 40LL;
              if (!v12)
              {
                __int128 v11 = a3;
                break;
              }
            }
          }

          __int128 v14 = *v5;
          __int128 v15 = v5[1];
          *((_DWORD *)v11 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v5 + 8);
          *(_OWORD *)__int128 v11 = v14;
          *((_OWORD *)v11 + 1) = v15;
        }

        uint64_t v5 = (__int128 *)((char *)v5 + 40);
        v6 += 40LL;
        __int128 v7 = v8;
      }

      while (v5 != a2);
    }
  }

  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *(__n128 *)a3;
        __int128 v8 = *(_OWORD *)(a3 + 16);
        *(void *)(a5 + 32) = *(void *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40LL;
        a5 += 40LL;
      }

      return result;
    }

    if (a3 == a4) {
      break;
    }
    if (*(void *)a3 >= *(void *)a1)
    {
      __n128 result = *(__n128 *)a1;
      __int128 v7 = *(_OWORD *)(a1 + 16);
      *(void *)(a5 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40LL;
    }

    else
    {
      __n128 result = *(__n128 *)a3;
      __int128 v6 = *(_OWORD *)(a3 + 16);
      *(void *)(a5 + 32) = *(void *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40LL;
    }

    a5 += 40LL;
  }

  if (a1 != a2)
  {
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v10 = a5 + v9;
      __n128 result = *(__n128 *)(a1 + v9);
      __int128 v11 = *(_OWORD *)(a1 + v9 + 16);
      *(void *)(v10 + 32) = *(void *)(a1 + v9 + 32);
      *(__n128 *)uint64_t v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40LL;
    }

    while (a1 + v9 != a2);
  }

  return result;
}

_DWORD *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( _DWORD *result, _OWORD *a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != (_DWORD *)a2)
    {
      uint64_t v19 = 0LL;
      do
      {
        unint64_t v20 = &__src[v19 * 4];
        __int128 v21 = *(_OWORD *)&result[v19];
        __int128 v22 = *(_OWORD *)&result[v19 + 4];
        *((void *)v20 + 4) = *(void *)&result[v19 + 8];
        *(_OWORD *)unint64_t v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        v19 += 10LL;
      }

      while (&result[v19] != (_DWORD *)a2);
      if (v19 * 4)
      {
        uint64_t v23 = __src;
        while (a2 != a3)
        {
          if (*(void *)a2 >= *(void *)v23)
          {
            __int128 v26 = *(_OWORD *)v23;
            __int128 v27 = *((_OWORD *)v23 + 1);
            result[8] = *((_DWORD *)v23 + 8);
            *(_OWORD *)__n128 result = v26;
            *((_OWORD *)result + 1) = v27;
            v23 += 40;
          }

          else
          {
            __int128 v24 = *a2;
            __int128 v25 = a2[1];
            result[8] = *((_DWORD *)a2 + 8);
            *(_OWORD *)__n128 result = v24;
            *((_OWORD *)result + 1) = v25;
            a2 = (_OWORD *)((char *)a2 + 40);
          }

          result += 10;
          if (&__src[v19 * 4] == v23) {
            return result;
          }
        }

        return memmove(result, v23, __src - v23 + v19 * 4 - 4);
      }
    }
  }

  else if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      __int128 v8 = &__src[v7];
      __int128 v9 = *(_OWORD *)((char *)a2 + v7);
      __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 16);
      *((void *)v8 + 4) = *(void *)((char *)a2 + v7 + 32);
      *(_OWORD *)__int128 v8 = v9;
      *((_OWORD *)v8 + 1) = v10;
      v7 += 40LL;
    }

    while ((_OWORD *)((char *)a2 + v7) != a3);
    if (v7)
    {
      __int128 v11 = &__src[v7];
      uint64_t v12 = (uint64_t)a3 - 40;
      while (a2 != (_OWORD *)result)
      {
        unint64_t v13 = *((void *)v11 - 5);
        unint64_t v14 = *((void *)a2 - 5);
        BOOL v15 = v13 >= v14;
        if (v13 >= v14) {
          __int128 v16 = v11 - 40;
        }
        else {
          __int128 v16 = (char *)a2 - 40;
        }
        if (v15) {
          v11 -= 40;
        }
        else {
          a2 = (_OWORD *)((char *)a2 - 40);
        }
        __int128 v17 = *(_OWORD *)v16;
        __int128 v18 = *((_OWORD *)v16 + 1);
        *(_DWORD *)(v12 + 32) = *((_DWORD *)v16 + 8);
        *(_OWORD *)uint64_t v12 = v17;
        *(_OWORD *)(v12 + 16) = v18;
        v12 -= 40LL;
        if (v11 == __src) {
          return result;
        }
      }

      uint64_t v28 = 0LL;
      do
      {
        uint64_t v29 = v12 + v28;
        __int128 v30 = *(_OWORD *)&v11[v28 - 40];
        __int128 v31 = *(_OWORD *)&v11[v28 - 24];
        *(_DWORD *)(v29 + 32) = *(_DWORD *)&v11[v28 - 8];
        *(_OWORD *)uint64_t v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        v28 -= 40LL;
      }

      while (&v11[v28] != __src);
    }
  }

  return result;
}

__int128 *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( __int128 *__src, __int128 *a2, __int128 *a3)
{
  __int128 v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }

    else if ((__int128 *)((char *)__src + 40) == a2)
    {
      __int128 v7 = *__src;
      __int128 v9 = __src[1];
      uint64_t v11 = *((void *)__src + 4);
      int64_t v5 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2 - 4);
      __int128 v3 = (__int128 *)((char *)__src + v5);
      __int128 *v3 = v7;
      v3[1] = v9;
      *((_DWORD *)v3 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
    }

    else if ((__int128 *)((char *)a2 + 40) == a3)
    {
      __int128 v3 = (__int128 *)((char *)__src + 40);
      __int128 v8 = *(__int128 *)((char *)a3 - 40);
      __int128 v10 = *(__int128 *)((char *)a3 - 24);
      uint64_t v12 = *((void *)a3 - 1);
      uint64_t *__src = v8;
      __src[1] = v10;
      *((_DWORD *)__src + _Block_object_dispose((const void *)(v1 - 64), 8) = v12;
    }

    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( __src,  a2,  a3);
    }
  }

  return v3;
}

__int128 *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>( __int128 *a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      __int128 v4 = (__int128 *)((char *)a1 + 40);
      int64_t v5 = (__int128 *)((char *)a2 + 40);
      do
      {
        uint64_t v6 = *((void *)v4 - 1);
        __int128 v7 = *(__int128 *)((char *)v4 - 40);
        __int128 v8 = *(__int128 *)((char *)v4 - 24);
        int v9 = *((_DWORD *)v5 - 2);
        __int128 v10 = *(__int128 *)((char *)v5 - 24);
        *(__int128 *)((char *)v4 - 40) = *(__int128 *)((char *)v5 - 40);
        *(__int128 *)((char *)v4 - 24) = v10;
        *((_DWORD *)v4 - 2) = v9;
        *(__int128 *)((char *)v5 - 24) = v8;
        *(__int128 *)((char *)v5 - 40) = v7;
        *((_DWORD *)v5 - 2) = v6;
        if (v4 == a2) {
          break;
        }
        __int128 v4 = (__int128 *)((char *)v4 + 40);
        BOOL v11 = v5 == a3;
        int64_t v5 = (__int128 *)((char *)v5 + 40);
      }

      while (!v11);
    }
  }

  else
  {
    uint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      uint64_t v14 = v13;
      unint64_t v13 = v12;
      uint64_t v12 = v14 % v12;
    }

    while (v12);
    if (v13)
    {
      BOOL v15 = (__int128 *)((char *)a1 + 40 * v13);
      do
      {
        __int128 v16 = *(__int128 *)((char *)v15 - 40);
        __int128 v17 = *(__int128 *)((char *)v15 - 24);
        uint64_t v18 = *((void *)v15 - 1);
        BOOL v15 = (__int128 *)((char *)v15 - 40);
        __int128 v30 = v16;
        __int128 v31 = v17;
        int v32 = v18;
        uint64_t v19 = (__int128 *)((char *)v15 + 8 * (((char *)a2 - (char *)a1) >> 3));
        unint64_t v20 = v15;
        do
        {
          __int128 v21 = v19;
          __int128 v22 = *v19;
          __int128 v23 = v19[1];
          *((_DWORD *)v20 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v19 + 8);
          *unint64_t v20 = v22;
          v20[1] = v23;
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)v19) >> 3);
          uint64_t v19 = (__int128 *)((char *)v19 + 8 * (((char *)a2 - (char *)a1) >> 3));
          BOOL v25 = __OFSUB__(v3, v24);
          uint64_t v27 = v3 - v24;
          char v26 = (v27 < 0) ^ v25;
          uint64_t v28 = (__int128 *)((char *)a1 + 40 * v27);
          if (!v26) {
            uint64_t v19 = v28;
          }
          unint64_t v20 = v21;
        }

        while (v19 != v15);
        *((_DWORD *)v21 + _Block_object_dispose((const void *)(v1 - 64), 8) = v32;
        __int128 *v21 = v30;
        v21[1] = v31;
      }

      while (v15 != a1);
    }

    return (__int128 *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }

  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>( uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  int v9 = (unint64_t *)a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unint64_t v25 = *(a2 - 3);
        unint64_t v24 = a2 - 3;
        if (v25 < *v9)
        {
          unint64_t v36 = v9[2];
          __int128 v33 = *(_OWORD *)v9;
          __int128 v26 = *(_OWORD *)v24;
          _OWORD v9[2] = v24[2];
          *(_OWORD *)int v9 = v26;
          *(_OWORD *)unint64_t v24 = v33;
          void v24[2] = v36;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)v9,  v9 + 3,  a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (uint64_t)v9,  v9 + 3,  v9 + 6,  (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__n128 *)v9,  v9 + 3,  v9 + 6,  (__n128 *)(v9 + 9),  (__n128 *)(a2 - 3));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,TRangeValue<Pointer64,unsigned long long> *>( v9,  a2,  a2,  a3);
            }
            return;
          }

          unint64_t v14 = v13 >> 1;
          BOOL v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)&v9[3 * v14],  v9,  a2 - 3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)v9,  &v9[3 * v14],  a2 - 3);
            uint64_t v16 = 3 * v14;
            __int128 v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)(v9 + 3),  v17,  a2 - 6);
            uint64_t v18 = (__int128 *)(v9 + 6);
            uint64_t v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( v18,  v19,  a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)v17,  v15,  v19);
            unint64_t v35 = *(void *)(a1 + 16);
            __int128 v32 = *(_OWORD *)a1;
            __int128 v20 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v15[2];
            *(_OWORD *)a1 = v20;
            v15[2] = v35;
            *(_OWORD *)BOOL v15 = v32;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(void *)(a1 - 24) >= *(void *)a1)
          {
            int v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>( (unint64_t *)a1,  (unint64_t)a2);
            goto LABEL_16;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (__int128 *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        __int128 v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *uint64_t v6 = v8;
        *(void *)(a2 - _Block_object_dispose((const void *)(v1 - 64), 8) = v7;
      }

      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a2 - 24));
      return 1LL;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48),  a2 - 24);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__n128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48),  (__n128 *)(a1 + 72),  (__n128 *)(a2 - 24));
      return 1LL;
    default:
      uint64_t v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>( (__int128 *)a1,  (unint64_t *)(a1 + 24),  (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      __int128 v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24LL;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }

      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + _Block_object_dispose((const void *)(v1 - 64), 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }

    uint64_t v10 = (void *)v11;
    v12 += 24LL;
    v11 += 24LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

char **adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>(char **result, void *a2)
{
  unint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    int64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32) {
          BOOL result = (char **)memmove(v3, v3 + 32, v2 - (v3 + 32));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(void *)unint64_t v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }

    while (v3 != v2);
  }

  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>(char **result, void *a2)
{
  unint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    int64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 24);
        if (v2 != v3 + 24) {
          BOOL result = (char **)memmove(v3, v3 + 24, v2 - (v3 + 24));
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(void *)unint64_t v3 = *(v10 - 1) + v8;
        v3 += 24;
      }
    }

    while (v3 != v2);
  }

  return result;
}

void adjustSymbolsToMatchSegmentDeltas<Pointer64>(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_11;
      }
      unint64_t v8 = *v2;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_11:
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>( (uint64_t)(v2 + 13),  v3,  (uint64_t)v2);
        uint64_t v3 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        if (v16 != v15)
        {
          do
          {
            uint64_t v17 = v16 - 104;
            __int128 v18 = (void **)(v16 - 40);
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v18);
            uint64_t v16 = v17;
          }

          while (v17 != v3);
        }

        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v3;
      }

      else
      {
        slideSymbolsByOffset<Pointer64>(v2, *(v10 - 1));
        v2 += 13;
        uint64_t v3 = *(void *)(a1 + 8);
      }
    }

    while (v2 != (unint64_t *)v3);
  }

char **adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>(char **result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    int64_t v5 = result;
    do
    {
      uint64_t v6 = a2[1];
      uint64_t v7 = v6 - *a2;
      if (v6 == *a2) {
        goto LABEL_12;
      }
      unint64_t v8 = *(void *)v3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v10 = (void *)*a2;
      do
      {
        unint64_t v11 = v9 >> 1;
        uint64_t v12 = &v10[3 * (v9 >> 1)];
        unint64_t v14 = *v12;
        int v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14) {
          unint64_t v9 = v11;
        }
        else {
          uint64_t v10 = v13;
        }
      }

      while (v9);
      if (v10 == (void *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        int64_t v15 = v2 - (v3 + 40);
        if (v2 != v3 + 40) {
          BOOL result = (char **)memmove(v3, v3 + 40, v15 - 4);
        }
        uint64_t v2 = &v3[v15];
        v5[1] = &v3[v15];
      }

      else
      {
        *(void *)uint64_t v3 = *(v10 - 1) + v8;
        v3 += 40;
      }
    }

    while (v3 != v2);
  }

  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = (__int128 *)a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unint64_t v26 = *((void *)a2 - 5);
        unint64_t v25 = (char *)a2 - 40;
        if (v26 < *(void *)v9)
        {
          uint64_t v41 = *((void *)v9 + 4);
          __int128 v36 = *v9;
          __int128 v39 = v9[1];
          __int128 v27 = *(_OWORD *)v25;
          __int128 v28 = *((_OWORD *)v25 + 1);
          *((_DWORD *)v9 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v25 + 8);
          *unint64_t v9 = v27;
          v9[1] = v28;
          *(_OWORD *)unint64_t v25 = v36;
          *((_OWORD *)v25 + 1) = v39;
          *((_DWORD *)v25 + _Block_object_dispose((const void *)(v1 - 64), 8) = v41;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( v9,  (unint64_t *)v9 + 5,  (unint64_t *)a2 - 5);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (uint64_t)v9,  (uint64_t)v9 + 40,  (uint64_t)(v9 + 5),  (uint64_t)a2 - 40);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (uint64_t)v9,  (uint64_t)v9 + 40,  (uint64_t)(v9 + 5),  (uint64_t)v9 + 120,  (uint64_t)a2 - 40);
        return;
      default:
        if (v12 > 959)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>( (uint64_t)v9,  a2,  a2,  a3);
            }
            return;
          }

          unint64_t v14 = v13 >> 1;
          int64_t v15 = (__int128 *)((char *)v9 + 40 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( v15,  (unint64_t *)v9,  (unint64_t *)a2 - 5);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( v9,  (unint64_t *)v15,  (unint64_t *)a2 - 5);
            uint64_t v16 = 5 * v14;
            uint64_t v17 = (unint64_t *)v9 + 5 * v14 - 5;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (__int128 *)((char *)v9 + 40),  v17,  (unint64_t *)a2 - 10);
            __int128 v18 = v9 + 5;
            uint64_t v19 = (unint64_t *)v9 + v16 + 5;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( v18,  v19,  (unint64_t *)a2 - 15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (__int128 *)v17,  (unint64_t *)v15,  v19);
            uint64_t v40 = *(void *)(a1 + 32);
            __int128 v35 = *(_OWORD *)a1;
            __int128 v38 = *(_OWORD *)(a1 + 16);
            __int128 v20 = *v15;
            __int128 v21 = v15[1];
            *(_DWORD *)(a1 + 32) = *((_DWORD *)v15 + 8);
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            *((_DWORD *)v15 + _Block_object_dispose((const void *)(v1 - 64), 8) = v40;
            *int64_t v15 = v35;
            v15[1] = v38;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(void *)(a1 - 40) >= *(void *)a1)
          {
            unint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>( (uint64_t *)a1,  a2);
            goto LABEL_16;
          }

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 40;
    if (result + 40 != a2)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *(void *)(v4 + 40);
        if (v6 < *(void *)v4)
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)(v4 + 48);
          *(_OWORD *)&v11[16] = *(_OWORD *)(v4 + 64);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            __int128 v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7) {
              break;
            }
            v7 -= 40LL;
            if (v6 >= *(void *)(v8 - 40))
            {
              uint64_t v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }

          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v6;
          *(_OWORD *)(v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }

        uint64_t v2 = v5 + 40;
        v3 += 40LL;
        uint64_t v4 = v5;
      }

      while (v5 + 40 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( __int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)a1)
  {
    if (v4 >= v3) {
      return 0LL;
    }
    unint64_t v11 = a2[4];
    __int128 v12 = *(_OWORD *)a2;
    __int128 v13 = *((_OWORD *)a2 + 1);
    int v14 = *((_DWORD *)a3 + 8);
    __int128 v15 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v15;
    *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v14;
    *(_OWORD *)a3 = v12;
    *((_OWORD *)a3 + 1) = v13;
    *((_DWORD *)a3 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
    if (*a2 < *(void *)a1)
    {
      uint64_t v16 = *((void *)a1 + 4);
      __int128 v17 = *a1;
      __int128 v18 = a1[1];
      int v19 = *((_DWORD *)a2 + 8);
      __int128 v20 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v20;
      *((_DWORD *)a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v19;
      *(_OWORD *)a2 = v17;
      *((_OWORD *)a2 + 1) = v18;
      uint64_t result = 2LL;
      *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v16;
      return result;
    }
  }

  else
  {
    if (v4 < v3)
    {
      unint64_t v5 = *((void *)a1 + 4);
      __int128 v6 = *a1;
      __int128 v7 = a1[1];
      int v8 = *((_DWORD *)a3 + 8);
      __int128 v9 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v9;
      *((_DWORD *)a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v8;
      *(_OWORD *)a3 = v6;
      *((_OWORD *)a3 + 1) = v7;
      uint64_t result = 1LL;
LABEL_9:
      *((_DWORD *)a3 + _Block_object_dispose((const void *)(v1 - 64), 8) = v5;
      return result;
    }

    uint64_t v21 = *((void *)a1 + 4);
    __int128 v22 = *a1;
    __int128 v23 = a1[1];
    int v24 = *((_DWORD *)a2 + 8);
    __int128 v25 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v25;
    *((_DWORD *)a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v24;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v23;
    *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v21;
    if (*a3 < *a2)
    {
      unint64_t v5 = a2[4];
      __int128 v26 = *(_OWORD *)a2;
      __int128 v27 = *((_OWORD *)a2 + 1);
      int v28 = *((_DWORD *)a3 + 8);
      __int128 v29 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v29;
      *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v28;
      *(_OWORD *)a3 = v26;
      *((_OWORD *)a3 + 1) = v27;
      uint64_t result = 2LL;
      goto LABEL_9;
    }
  }

  return 1LL;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>( uint64_t *a1, __int128 *a2)
{
  unint64_t v2 = *a1;
  *(_OWORD *)__int128 v17 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 3);
  if ((unint64_t)*a1 >= *((void *)a2 - 5))
  {
    unint64_t v5 = (__int128 *)(a1 + 5);
    do
    {
      unint64_t v3 = v5;
      if (v5 >= a2) {
        break;
      }
      unint64_t v5 = (__int128 *)((char *)v5 + 40);
    }

    while (v2 >= *(void *)v3);
  }

  else
  {
    unint64_t v3 = (__int128 *)a1;
    do
    {
      unint64_t v4 = *((void *)v3 + 5);
      unint64_t v3 = (__int128 *)((char *)v3 + 40);
    }

    while (v2 >= v4);
  }

  if (v3 < a2)
  {
    do
    {
      unint64_t v6 = *((void *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }

    while (v2 < v6);
  }

  while (v3 < a2)
  {
    uint64_t v16 = *((void *)v3 + 4);
    __int128 v14 = *v3;
    __int128 v15 = v3[1];
    __int128 v7 = *a2;
    __int128 v8 = a2[1];
    *((_DWORD *)v3 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)a2 + 8);
    __int128 *v3 = v7;
    v3[1] = v8;
    *((_DWORD *)a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v16;
    *a2 = v14;
    a2[1] = v15;
    do
    {
      unint64_t v9 = *((void *)v3 + 5);
      unint64_t v3 = (__int128 *)((char *)v3 + 40);
    }

    while (v2 >= v9);
    do
    {
      unint64_t v10 = *((void *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }

    while (v2 < v10);
  }

  if ((uint64_t *)((char *)v3 - 40) != a1)
  {
    __int128 v11 = *(__int128 *)((char *)v3 - 40);
    __int128 v12 = *(__int128 *)((char *)v3 - 24);
    *((_DWORD *)a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v11;
    *((_OWORD *)a1 + 1) = v12;
  }

  *((void *)v3 - 5) = v2;
  *(__int128 *)((char *)v3 - 20) = *(_OWORD *)&v17[12];
  *(v3 - 2) = *(_OWORD *)v17;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>( uint64_t *a1, __int128 *a2)
{
  uint64_t v2 = 0LL;
  unint64_t v3 = *a1;
  *(_OWORD *)__int128 v20 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 3);
  do
  {
    unint64_t v4 = a1[v2 + 5];
    v2 += 5LL;
  }

  while (v4 < v3);
  unint64_t v5 = (unint64_t)&a1[v2];
  if (v2 == 5)
  {
    do
    {
      unint64_t v7 = *((void *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }

    while (v7 >= v3);
  }

  else
  {
    do
    {
      unint64_t v6 = *((void *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }

    while (v6 >= v3);
  }

  __int128 v8 = &a1[v2];
  if (v5 < (unint64_t)a2)
  {
    unint64_t v9 = a2;
    do
    {
      __int128 v10 = *(_OWORD *)v8;
      __int128 v19 = *((_OWORD *)v8 + 1);
      uint64_t v11 = v8[4];
      __int128 v13 = *v9;
      __int128 v12 = v9[1];
      *((_DWORD *)v8 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v9 + 8);
      *(_OWORD *)__int128 v8 = v13;
      *((_OWORD *)v8 + 1) = v12;
      *((_DWORD *)v9 + _Block_object_dispose((const void *)(v1 - 64), 8) = v11;
      *unint64_t v9 = v10;
      v9[1] = v19;
      do
      {
        unint64_t v14 = v8[5];
        v8 += 5;
      }

      while (v14 < v3);
      do
      {
        unint64_t v15 = *((void *)v9 - 5);
        unint64_t v9 = (__int128 *)((char *)v9 - 40);
      }

      while (v15 >= v3);
    }

    while (v8 < (uint64_t *)v9);
  }

  if (v8 - 5 != a1)
  {
    __int128 v16 = *(_OWORD *)(v8 - 5);
    __int128 v17 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v16;
    *((_OWORD *)a1 + 1) = v17;
  }

  *(v8 - 5) = v3;
  *(_OWORD *)((char *)v8 - 20) = *(_OWORD *)&v20[12];
  *((_OWORD *)v8 - 2) = *(_OWORD *)v20;
  return v8 - 5;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (__int128 *)(a2 - 40);
      if (*(void *)(a2 - 40) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        __int128 v8 = *(_OWORD *)a1;
        __int128 v9 = *(_OWORD *)(a1 + 16);
        int v10 = *(_DWORD *)(a2 - 8);
        __int128 v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 32) = v10;
        *unint64_t v6 = v8;
        *(_OWORD *)(a2 - 24) = v9;
        *(_DWORD *)(a2 - _Block_object_dispose((const void *)(v1 - 64), 8) = v7;
      }

      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (__int128 *)a1,  (unint64_t *)(a1 + 40),  (unint64_t *)(a2 - 40));
      return 1LL;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  a1 + 40,  a1 + 80,  a2 - 40);
      return 1LL;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  a1 + 40,  a1 + 80,  a1 + 120,  a2 - 40);
      return 1LL;
    default:
      __int128 v12 = (void *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( (__int128 *)a1,  (unint64_t *)(a1 + 40),  (unint64_t *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1LL;
      }
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    unint64_t v16 = *(void *)v13;
    if (*(void *)v13 < *v12)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)&v21[16] = *(_OWORD *)(v13 + 24);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        __int128 v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_DWORD *)(v18 + 152) = *(_DWORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40LL;
        if (v16 >= *(void *)(v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }

      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)&v21[12];
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }

    __int128 v12 = (void *)v13;
    v14 += 40LL;
    v13 += 40LL;
    if (v13 == a2) {
      return 1LL;
    }
  }

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4 < *(void *)a3)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    __n128 result = *(__n128 *)a3;
    __int128 v10 = *(_OWORD *)(a3 + 16);
    int v11 = *(_DWORD *)(a4 + 32);
    __int128 v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 32) = v11;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v10;
    *(_DWORD *)(a4 + 32) = v9;
    if (*(void *)a3 < *(void *)a2)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      __n128 result = *(__n128 *)a2;
      __int128 v14 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a3 + 32);
      __int128 v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_DWORD *)(a2 + 32) = v15;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 32) = v13;
      if (*(void *)a2 < *(void *)a1)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        __n128 result = *(__n128 *)a1;
        __int128 v18 = *(_OWORD *)(a1 + 16);
        int v19 = *(_DWORD *)(a2 + 32);
        __int128 v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 32) = v19;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v18;
        *(_DWORD *)(a2 + 32) = v17;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  a2,  a3,  a4).n128_u64[0];
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t v11 = *(void *)(a4 + 32);
    __n128 result = *(__n128 *)a4;
    __int128 v12 = *(_OWORD *)(a4 + 16);
    int v13 = *(_DWORD *)(a5 + 32);
    __int128 v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_DWORD *)(a4 + 32) = v13;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v12;
    *(_DWORD *)(a5 + 32) = v11;
    if (*(void *)a4 < *(void *)a3)
    {
      uint64_t v15 = *(void *)(a3 + 32);
      __n128 result = *(__n128 *)a3;
      __int128 v16 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a4 + 32);
      __int128 v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_DWORD *)(a3 + 32) = v17;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v16;
      *(_DWORD *)(a4 + 32) = v15;
      if (*(void *)a3 < *(void *)a2)
      {
        uint64_t v19 = *(void *)(a2 + 32);
        __n128 result = *(__n128 *)a2;
        __int128 v20 = *(_OWORD *)(a2 + 16);
        int v21 = *(_DWORD *)(a3 + 32);
        __int128 v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_DWORD *)(a2 + 32) = v21;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v20;
        *(_DWORD *)(a3 + 32) = v19;
        if (*(void *)a2 < *(void *)a1)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          __int128 v24 = *(_OWORD *)(a1 + 16);
          int v25 = *(_DWORD *)(a2 + 32);
          __int128 v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_DWORD *)(a1 + 32) = v25;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v24;
          *(_DWORD *)(a2 + 32) = v23;
        }
      }
    }
  }

  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  if ((__int128 *)a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __int128 v12 = (unint64_t *)(a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  a4,  v9,  v12);
        v12 -= 5;
        --v11;
      }

      while (v11);
    }

    int v13 = v6;
    if (v6 != a3)
    {
      __int128 v14 = v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          uint64_t v15 = *((void *)v14 + 4);
          __int128 v16 = *v14;
          __int128 v17 = v14[1];
          int v18 = *(_DWORD *)(a1 + 32);
          __int128 v19 = *(_OWORD *)(a1 + 16);
          *__int128 v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_DWORD *)v14 + _Block_object_dispose((const void *)(v1 - 64), 8) = v18;
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 32) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  a4,  v9,  (unint64_t *)a1);
        }

        __int128 v14 = (__int128 *)((char *)v14 + 40);
      }

      while (v14 != a3);
      int v13 = a3;
    }

    if (v8 >= 41)
    {
      int64_t v20 = v8 / 0x28uLL;
      do
      {
        uint64_t v21 = 0LL;
        __int128 v32 = *(_OWORD *)a1;
        __int128 v33 = *(_OWORD *)(a1 + 16);
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v22 = a1;
        do
        {
          uint64_t v23 = v22 + 40 * v21 + 40;
          uint64_t v24 = (2 * v21) | 1;
          uint64_t v25 = 2 * v21 + 2;
          if (v25 < v20 && *(void *)v23 < *(void *)(v23 + 40))
          {
            v23 += 40LL;
            uint64_t v24 = v25;
          }

          __int128 v26 = *(_OWORD *)v23;
          __int128 v27 = *(_OWORD *)(v23 + 16);
          *(_DWORD *)(v22 + 32) = *(_DWORD *)(v23 + 32);
          *(_OWORD *)uint64_t v22 = v26;
          *(_OWORD *)(v22 + 16) = v27;
          uint64_t v22 = v23;
          uint64_t v21 = v24;
        }

        while (v24 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        unint64_t v6 = (__int128 *)((char *)v6 - 40);
        if ((__int128 *)v23 == v6)
        {
          *(_DWORD *)(v23 + 32) = v34;
          *(_OWORD *)uint64_t v23 = v32;
          *(_OWORD *)(v23 + 16) = v33;
        }

        else
        {
          __int128 v28 = *v6;
          __int128 v29 = v6[1];
          *(_DWORD *)(v23 + 32) = *((_DWORD *)v6 + 8);
          *(_OWORD *)uint64_t v23 = v28;
          *(_OWORD *)(v23 + 16) = v29;
          *unint64_t v6 = v32;
          v6[1] = v33;
          *((_DWORD *)v6 + _Block_object_dispose((const void *)(v1 - 64), 8) = v34;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( a1,  v23 + 40,  a4,  0xCCCCCCCCCCCCCCCDLL * ((v23 + 40 - a1) >> 3));
        }
      }

      while (v20-- > 2);
    }

    return v13;
  }

  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(a1 + 40 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2) >= a3)
      {
        unint64_t v7 = *v6;
      }

      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[5];
        if (*v6 <= v8) {
          unint64_t v7 = v6[5];
        }
        if (*v6 < v8)
        {
          v6 += 5;
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }

      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        *(_OWORD *)__int128 v17 = *(_OWORD *)(a4 + 1);
        *(_OWORD *)&v17[16] = *(_OWORD *)(a4 + 3);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          __int128 v11 = *(_OWORD *)v6;
          __int128 v12 = *((_OWORD *)v6 + 1);
          *((_DWORD *)v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)unint64_t v10 = v11;
          *((_OWORD *)v10 + 1) = v12;
          if (v4 < v5) {
            break;
          }
          uint64_t v13 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(a1 + 40 * v13);
          int64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v14 = *v6;
            int64_t v5 = v13;
          }

          else
          {
            unint64_t v14 = *v6;
            unint64_t v15 = v6[5];
            if (*v6 <= v15) {
              unint64_t v14 = v6[5];
            }
            if (*v6 >= v15) {
              int64_t v5 = v13;
            }
            else {
              v6 += 5;
            }
          }
        }

        while (v14 >= v9);
        *a4 = v9;
        __n128 result = *(__n128 *)v17;
        *(_OWORD *)((char *)a4 + 20) = *(_OWORD *)&v17[12];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)v17;
      }
    }
  }

  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unint64_t v6 = (__int128 *)(a1 + 40 * (v4 >> 1));
    unint64_t v7 = (__int128 *)(a2 - 40);
    unint64_t v8 = *(void *)(a2 - 40);
    if (*(void *)v6 < v8)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)&v13[16] = *(_OWORD *)(a2 - 16);
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = v6;
        __int128 v10 = *v6;
        __int128 v11 = v6[1];
        *((_DWORD *)v9 + _Block_object_dispose((const void *)(v1 - 64), 8) = *((_DWORD *)v6 + 8);
        *unint64_t v9 = v10;
        v9[1] = v11;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = (__int128 *)(a1 + 40 * v5);
      }

      while (*(void *)v6 < v8);
      *(void *)unint64_t v7 = v8;
      *(__int128 *)((char *)v7 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v13;
      __n128 result = *(__n128 *)&v13[12];
      *(__int128 *)((char *)v7 + 20) = *(_OWORD *)&v13[12];
    }
  }

  return result;
}

uint64_t intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( uint64_t a1, CSCppMMapStringTable *a2, DemanglingUtilities::CSCppReusableDemanglingBuffer *a3, void *a4, void *a5, int a6)
{
  unsigned int v12 = atomic_load((unsigned int *)(a1 + 28));
  if ((v12 & 0x400000) != 0)
  {
    uint64_t v13 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a1);
    unint64_t v14 = "";
  }

  else
  {
    uint64_t v13 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a1);
    unint64_t v14 = *(const char **)(a1 + 96);
  }

  *(void *)&__int128 v36 = v14;
  *((void *)&v36 + 1) = v13;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>( a4,  &v36);
  if (result)
  {
    unsigned int v16 = *(_DWORD *)(result + 32);
    LODWORD(v17) = *(_DWORD *)(result + 36);
    goto LABEL_30;
  }

  unsigned int v16 = CSCppMMapStringTable::intern_with_prefix(a2, v14, v13);
  int v18 = (const char *)atomic_load((unsigned int *)(a1 + 28));
  if (DemanglingUtilities::is_simple_mangled_name((DemanglingUtilities *)v13, v18))
  {
    __int128 v19 = (const char *)atomic_load((unsigned int *)(a1 + 28));
    int64_t v20 = DemanglingUtilities::simple_demangle(v13, v19);
  }

  else
  {
    if (a6)
    {
      uint64_t v21 = DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(a3);
      uint64_t v22 = CSCppAddressSet::sort(a3);
      uint64_t v23 = a1;
      uint64_t v24 = v21;
    }

    else
    {
      unsigned int v25 = atomic_load((unsigned int *)(a1 + 28));
      if ((v25 & 0x20000) == 0) {
        goto LABEL_17;
      }
      uint64_t v23 = a1;
      uint64_t v24 = 0LL;
      uint64_t v22 = 0LL;
    }

    int64_t v20 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v23, v24, v22);
  }

  __int128 v26 = (char *)v20;
  if (v20)
  {
    if (v20 == v13 + 1 || v20 == v13)
    {
      BOOL v27 = v20 != v13;
      unsigned int v28 = atomic_load((unsigned int *)(a1 + 28));
      if ((v28 & 0x80000) != 0)
      {
        int v31 = 0;
      }

      else
      {
        __int16 v29 = atomic_load((unsigned int *)(a1 + 28));
        if (v29 < 0)
        {
          int v31 = 1;
        }

        else
        {
          unsigned int v30 = atomic_load((unsigned int *)(a1 + 28));
          int v31 = HIWORD(v30) & 1;
        }
      }

      char is_objc_method = TRawSymbol<Pointer64>::is_objc_method(a1);
      if (v26 == v13) {
        int v33 = v31;
      }
      else {
        int v33 = 1;
      }
      if ((is_objc_method & 1) != 0) {
        int v33 = v27;
      }
      uint64_t v17 = v16 + v33;
    }

    else
    {
      uint64_t v17 = CSCppMMapStringTable::intern_with_prefix(a2, 0LL, v20);
    }

    goto LABEL_29;
  }

uint64_t write_symbols_and_inlined_functions<Pointer64>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  int v42 = 0;
  uint64_t v41 = *a5;
  __int128 v40 = 0u;
  memset(v39, 0, sizeof(v39));
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    __int128 v10 = a5;
    do
    {
      if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v8, *(void *)(v8 + 8)))
      {
        int v12 = children_index_for_symbol<Pointer64>(v8, &v42, a6);
        if (*(void *)(v8 + 72) != *(void *)(v8 + 64))
        {
          uint64_t v38 = v8;
          std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v39, &v38);
        }

        if (*v10 == v10[1])
        {
          unint64_t v13 = *(void *)v8;
        }

        else
        {
          advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v8, (uint64_t)v10, &v41);
          unint64_t v13 = *(void *)v8 + v41[2];
        }

        uint64_t v14 = *(void *)(v8 + 8);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)(a2 + 4) = v14;
        TRawSymbol<Pointer64>::is_objc_method(v8);
        unsigned int v15 = atomic_load((unsigned int *)(v8 + 28));
        *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v15;
        *(_DWORD *)(a2 + 20) = v12;
        *(void *)(a2 + 12) = *(void *)(v8 + 16);
        a2 += 24LL;
      }

      v8 += 104LL;
    }

    while (v8 != v7);
    uint64_t v16 = *((void *)&v40 + 1);
    if (*((void *)&v40 + 1))
    {
      unint64_t v17 = v40;
      int v33 = v10;
      do
      {
        uint64_t v18 = *(void *)(*(void *)(*((void *)&v39[0] + 1) + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v17 & 0x1FF));
        uint64_t v41 = *v10;
        uint64_t v19 = *(void *)(v18 + 72) - *(void *)(v18 + 64);
        if (v19)
        {
          uint64_t v20 = 0LL;
          unint64_t v21 = 0LL;
          unint64_t v22 = v19 / 104;
          else {
            uint64_t v23 = v19 / 104;
          }
          uint64_t v36 = v23;
          do
          {
            uint64_t v24 = *(void *)(v18 + 64);
            uint64_t v25 = v24 + 104 * v21;
            if (!a6 || CSCppAddressSet::_intersects_range(a6, *(void *)v25, *(void *)(v25 + 8)))
            {
              int v26 = children_index_for_symbol<Pointer64>(v24 + 104 * v21, &v42, a6);
              if (*(void *)(v24 + 104 * v21 + 72) != *(void *)(v24 + 104 * v21 + 64))
              {
                uint64_t v38 = v24 + 104 * v21;
                std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v39, &v38);
              }

              if (a6)
              {
                uint64_t v27 = v20;
                unint64_t v28 = v21;
                do
                {
                  BOOL v29 = ++v28 >= v22;
                  if (v28 >= v22) {
                    break;
                  }
                  BOOL v30 = CSCppAddressSet::_intersects_range( a6,  *(void *)(*(void *)(v18 + 64) + v27 + 104),  *(void *)(*(void *)(v18 + 64) + v27 + 112));
                  v27 += 104LL;
                }

                while (!v30);
              }

              else
              {
                BOOL v29 = v21 + 1 >= v22;
              }

              __int128 v10 = v33;
              if (*v33 == v33[1])
              {
                LODWORD(v31) = 0;
              }

              else
              {
                advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v25, (uint64_t)v33, &v41);
                unint64_t v31 = v41[2];
              }

              CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>(a3, v31, a7, v25, a4, v26, v29);
              a3 += 36LL;
            }

            ++v21;
            v20 += 104LL;
          }

          while (v21 != v36);
          uint64_t v16 = *((void *)&v40 + 1);
          unint64_t v17 = v40;
        }

        --v16;
        *(void *)&__int128 v40 = ++v17;
        *((void *)&v40 + 1) = v16;
        if (v17 >= 0x400)
        {
          operator delete(**((void ***)&v39[0] + 1));
          unint64_t v17 = v40 - 512;
          *((void *)&v39[0] + 1) += 8LL;
          *(void *)&__int128 v40 = v40 - 512;
          uint64_t v16 = *((void *)&v40 + 1);
        }
      }

      while (v16);
    }
  }

  return std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](v39);
}

void sub_186045F48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>( uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a2[1];
  unint64_t v9 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v4 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
    }

    else
    {
      uint64_t v4 = v9 & (v10 - 1);
    }

    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == v8) {
            return i;
          }
        }

        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }

          else
          {
            v14 &= v10 - 1;
          }

          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0LL;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v4 = v9 % v10;
      }
      else {
        uint64_t v4 = v9;
      }
    }

    else
    {
      uint64_t v4 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_42:
    *uint64_t v23 = i;
    goto LABEL_43;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }

    else
    {
      v24 &= v10 - 1;
    }

    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }

void sub_1860461AC(_Unwind_Exception *a1)
{
}

uint64_t recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( uint64_t a1, CSCppMMapStringTable *a2, uint64_t a3, DemanglingUtilities::CSCppReusableDemanglingBuffer *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  if (v7 == v8) {
    return 0LL;
  }
  uint64_t v15 = 0LL;
  do
  {
    if (!a3 || CSCppAddressSet::_intersects_range(a3, *(void *)v7, *(void *)(v7 + 8)))
    {
      intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( v7,  a2,  a4,  a5,  a6,  a7);
      uint64_t v15 = v15
          + recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>( v7,  a2,  a3,  a4,  a5,  a6,  a7)
          + 1;
    }

    v7 += 104LL;
  }

  while (v7 != v8);
  return v15;
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>( unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v7 = result;
LABEL_2:
  uint64_t v8 = v7;
  while (2)
  {
    uint64_t v7 = v8;
    uint64_t v9 = (char *)a2 - (char *)v8;
    unint64_t v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v38 = *(a2 - 1);
        __int128 v39 = *v8;
        if (*v38 < **v8)
        {
          *uint64_t v8 = v38;
          *(a2 - 1) = v39;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v8,  v8 + 1,  a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v8,  v8 + 1,  v8 + 2,  a2 - 1);
      case 5uLL:
        __int128 v40 = v8 + 1;
        uint64_t v41 = v8 + 2;
        int v42 = v8 + 3;
        uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v8,  v8 + 1,  v8 + 2,  v8 + 3);
        __int128 v43 = *(a2 - 1);
        uint64_t v44 = v8[3];
        if (*v43 < *v44)
        {
          *int v42 = v43;
          *(a2 - 1) = v44;
          uint64_t v45 = *v42;
          unint64_t v46 = *v41;
          unint64_t v47 = **v42;
          if (v47 < **v41)
          {
            *uint64_t v41 = v45;
            *int v42 = v46;
            __int128 v48 = *v40;
            if (v47 < **v40)
            {
              v8[1] = v45;
              v8[2] = v48;
              uint64_t v49 = *v8;
              if (v47 < **v8)
              {
                *uint64_t v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }

        return result;
      default:
        if (v9 <= 191)
        {
          __int128 v50 = v8 + 1;
          BOOL v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              uint64_t v53 = 0LL;
              __int128 v54 = v8;
              do
              {
                unint64_t v56 = *v54;
                uint64_t v55 = v54[1];
                __int128 v54 = v50;
                unint64_t v57 = *v55;
                if (*v55 < *v56)
                {
                  uint64_t v58 = v53;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58 + _Block_object_dispose((const void *)(v1 - 64), 8) = v56;
                    if (!v58) {
                      break;
                    }
                    unint64_t v56 = *(unint64_t **)((char *)v8 + v58 - 8);
                    v58 -= 8LL;
                    if (v57 >= *v56)
                    {
                      unint64_t v59 = (unint64_t **)((char *)v8 + v58 + 8);
                      goto LABEL_79;
                    }
                  }

                  unint64_t v59 = v8;
LABEL_79:
                  *unint64_t v59 = v55;
                }

                __int128 v50 = v54 + 1;
                v53 += 8LL;
              }

              while (v54 + 1 != a2);
            }
          }

          else if (!v52)
          {
            do
            {
              unint64_t v95 = *v7;
              uint64_t v94 = v7[1];
              uint64_t v7 = v50;
              unint64_t v96 = *v94;
              if (*v94 < *v95)
              {
                do
                {
                  *__int128 v50 = v95;
                  unint64_t v95 = *(v50 - 2);
                  --v50;
                }

                while (v96 < *v95);
                *__int128 v50 = v94;
              }

              __int128 v50 = v7 + 1;
            }

            while (v7 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v60 = (v10 - 2) >> 1;
            int64_t v61 = v60;
            do
            {
              int64_t v62 = v61;
              if (v60 >= v61)
              {
                uint64_t v63 = (2 * v61) | 1;
                uint64_t v64 = &v8[v63];
                uint64_t v65 = *v64;
                if (2 * v62 + 2 >= (uint64_t)v10)
                {
                  unint64_t v67 = *v65;
                }

                else
                {
                  uint64_t v66 = v64[1];
                  unint64_t v67 = *v65;
                  BOOL v68 = *v65 >= *v66;
                  if (*v65 <= *v66) {
                    unint64_t v67 = *v66;
                  }
                  if (*v65 < *v66)
                  {
                    uint64_t v65 = v64[1];
                    ++v64;
                  }

                  if (!v68) {
                    uint64_t v63 = 2 * v62 + 2;
                  }
                }

                uint64_t result = &v8[v62];
                uint64_t v69 = *result;
                unint64_t v70 = **result;
                if (v67 >= v70)
                {
                  do
                  {
                    uint64_t v71 = v64;
                    void *result = v65;
                    if (v60 < v63) {
                      break;
                    }
                    uint64_t v72 = (2 * v63) | 1;
                    uint64_t v64 = &v8[v72];
                    uint64_t v63 = 2 * v63 + 2;
                    uint64_t v65 = *v64;
                    if (v63 >= (uint64_t)v10)
                    {
                      unint64_t v74 = *v65;
                      uint64_t v63 = v72;
                    }

                    else
                    {
                      uint64_t v73 = v64[1];
                      unint64_t v74 = *v65;
                      BOOL v75 = *v65 >= *v73;
                      if (*v65 <= *v73) {
                        unint64_t v74 = *v73;
                      }
                      if (*v65 < *v73)
                      {
                        uint64_t v65 = v64[1];
                        ++v64;
                      }

                      if (v75) {
                        uint64_t v63 = v72;
                      }
                    }

                    uint64_t result = v71;
                  }

                  while (v74 >= v70);
                  unsigned __int8 *v71 = v69;
                }
              }

              int64_t v61 = v62 - 1;
            }

            while (v62);
            uint64_t v76 = (unint64_t)v9 >> 3;
            do
            {
              uint64_t v77 = 0LL;
              uint64_t v78 = *v8;
              uint64_t v79 = v8;
              do
              {
                uint64_t v80 = &v79[v77];
                unint64_t v83 = (unint64_t ***)v80[1];
                uint64_t v81 = (unint64_t **)(v80 + 1);
                BOOL v82 = v83;
                uint64_t v84 = (2 * v77) | 1;
                uint64_t v85 = 2 * v77 + 2;
                if (v85 < v76)
                {
                  uint64_t result = *v82;
                  if ((unint64_t)*v82 < *v81[1])
                  {
                    BOOL v82 = (unint64_t ***)v81[1];
                    ++v81;
                    uint64_t v84 = v85;
                  }
                }

                *uint64_t v79 = v82;
                uint64_t v79 = v81;
                uint64_t v77 = v84;
              }

              while (v84 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              if (v81 == --a2)
              {
                *uint64_t v81 = v78;
              }

              else
              {
                *uint64_t v81 = *a2;
                *a2 = v78;
                uint64_t v86 = (char *)v81 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  unint64_t v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v8[v87];
                  uint64_t v89 = *v88;
                  unsigned int v90 = *v81;
                  unint64_t v91 = **v81;
                  if (**v88 < v91)
                  {
                    do
                    {
                      __int16 v92 = v88;
                      *uint64_t v81 = v89;
                      if (!v87) {
                        break;
                      }
                      unint64_t v87 = (v87 - 1) >> 1;
                      v88 = &v8[v87];
                      uint64_t v89 = *v88;
                      uint64_t v81 = v92;
                    }

                    while (**v88 < v91);
                    *__int16 v92 = v90;
                  }
                }
              }
            }

            while (v76-- > 2);
          }

          return result;
        }

        unint64_t v11 = v10 >> 1;
        int v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( &v7[v10 >> 1],  v7,  a2 - 1);
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v7,  &v7[v10 >> 1],  a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v7 + 1,  v12 - 1,  a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v7 + 2,  &v7[v11 + 1],  a2 - 3);
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v12 - 1,  v12,  &v7[v11 + 1]);
          unint64_t v13 = *v7;
          *uint64_t v7 = *v12;
          *int v12 = v13;
        }

        --a3;
        unint64_t v14 = *v7;
        unint64_t v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            BOOL v30 = v7 + 1;
            do
            {
              uint64_t v8 = v30;
              if (v30 >= a2) {
                break;
              }
              ++v30;
            }

            while (v15 >= **v8);
          }

          else
          {
            uint64_t v8 = v7;
            do
            {
              BOOL v29 = v8[1];
              ++v8;
            }

            while (v15 >= *v29);
          }

          unint64_t v31 = a2;
          if (v8 < a2)
          {
            unint64_t v31 = a2;
            do
              __int128 v32 = *--v31;
            while (v15 < *v32);
          }

          if (v8 < v31)
          {
            int v33 = *v8;
            unsigned int v34 = *v31;
            do
            {
              *uint64_t v8 = v34;
              *unint64_t v31 = v33;
              do
              {
                unint64_t v35 = v8[1];
                ++v8;
                int v33 = v35;
              }

              while (v15 >= *v35);
              do
              {
                uint64_t v36 = *--v31;
                unsigned int v34 = v36;
              }

              while (v15 < *v36);
            }

            while (v8 < v31);
          }

          unint64_t v37 = v8 - 1;
          if (v8 - 1 != v7) {
            *uint64_t v7 = *v37;
          }
          a4 = 0;
          char *v37 = v14;
          continue;
        }

        uint64_t v16 = 0LL;
        do
          float v17 = v7[++v16];
        while (*v17 < v15);
        BOOL v18 = &v7[v16];
        unint64_t v19 = a2;
        if (v16 == 1)
        {
          unint64_t v19 = a2;
          do
          {
            if (v18 >= v19) {
              break;
            }
            size_t v21 = *--v19;
          }

          while (*v21 >= v15);
        }

        else
        {
          do
            unint64_t v20 = *--v19;
          while (*v20 >= v15);
        }

        if (v18 >= v19)
        {
          uint64_t v27 = v18 - 1;
        }

        else
        {
          uint64_t v22 = *v19;
          uint64_t v23 = &v7[v16];
          unint64_t v24 = v19;
          do
          {
            *uint64_t v23 = v22;
            *unint64_t v24 = v17;
            do
            {
              uint64_t v25 = v23[1];
              ++v23;
              float v17 = v25;
            }

            while (*v25 < v15);
            do
            {
              int v26 = *--v24;
              uint64_t v22 = v26;
            }

            while (*v26 >= v15);
          }

          while (v23 < v24);
          uint64_t v27 = v23 - 1;
        }

        if (v27 != v7) {
          *uint64_t v7 = *v27;
        }
        *uint64_t v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          uint64_t result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>( v7,  v27,  a3,  a4 & 1);
          a4 = 0;
          uint64_t v8 = v27 + 1;
          continue;
        }

        BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v7,  v27);
        uint64_t v8 = v27 + 1;
        uint64_t result = (unint64_t **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( v27 + 1,  a2);
        if (!(_DWORD)result)
        {
          if (v28) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v27;
        if (!v28) {
          goto LABEL_2;
        }
        return result;
    }
  }

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = **a2;
  unint64_t v6 = **result;
  uint64_t v7 = *a3;
  unint64_t v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (**a2 < **result)
      {
        void *result = *a2;
        *a2 = v9;
      }
    }
  }

  else
  {
    if (v8 >= v5)
    {
      void *result = v3;
      *a2 = v4;
      if (**a3 >= v6) {
        return result;
      }
      *a2 = *a3;
    }

    else
    {
      void *result = v7;
    }

    *a3 = v4;
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      unint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( a1,  a1 + 1,  a2 - 1);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( a1,  a1 + 1,  a1 + 2,  a2 - 1);
      return 1LL;
    case 5LL:
      BOOL v18 = a1 + 1;
      unint64_t v19 = a1 + 2;
      unint64_t v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( a1,  a1 + 1,  a1 + 2,  a1 + 3);
      size_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*v21 < *v22)
      {
        *unint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        unint64_t v24 = *v19;
        unint64_t v25 = **v20;
        if (v25 < **v19)
        {
          const char *v19 = v23;
          *unint64_t v20 = v24;
          int v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }

      return 1LL;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( a1,  a1 + 1,  a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v10 = 0;
      uint64_t v11 = 24LL;
      break;
  }

  while (1)
  {
    int v12 = *v9;
    unint64_t v13 = *v8;
    unint64_t v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8LL;
        if (v14 >= *v13)
        {
          float v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }

      float v17 = a1;
LABEL_13:
      *float v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }

    unint64_t v8 = v9;
    v11 += 8LL;
    if (++v9 == a2) {
      return 1LL;
    }
  }

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>( a1,  a2,  a3);
  uint64_t v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }

  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }

    else
    {
      unint64_t v9 = v8 - 1;
    }

    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0LL;
    }
    *(void *)(*a1 + 8 * v11) = 0LL;
    goto LABEL_10;
  }

  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)(a1 + 2),  ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0LL;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1LL << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }

  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }

  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1LL << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }

  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }

uint64_t children_index_for_symbol<Pointer64>(uint64_t a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    int v4 = *(unint64_t **)(a1 + 64);
    unint64_t v5 = *(unint64_t **)(a1 + 72);
    if (v4 == v5)
    {
      int v7 = 0;
LABEL_10:
      unint64_t v10 = &CSCppMMapSymbol::kNoChildren;
      goto LABEL_11;
    }

    int v7 = 0;
    do
    {
      unint64_t v8 = *v4;
      uint64_t v9 = v4[1];
      v4 += 13;
      v7 += CSCppAddressSet::_intersects_range(a3, v8, v9);
    }

    while (v4 != v5);
  }

  else
  {
    int v7 = -991146299 * ((*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  }

  unint64_t v10 = a2;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = *v10;
  *a2 += v7;
  return result;
}

unint64_t *advance_delta_iterator_to_containing_range<Pointer64>( unint64_t *result, uint64_t a2, unint64_t **a3)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  unint64_t v6 = *(void *)(a2 + 8);
  while (v4 < *v5 || result[1] + v4 > v5[1] + *v5)
  {
    v5 += 3;
    *a3 = v5;
    if ((unint64_t)v5 >= v6)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        unsigned int v7 = atomic_load((unsigned int *)(v3 + 28));
        if ((v7 & 0x1C000) != 0) {
          unint64_t v8 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3, 0LL, 0LL);
        }
        else {
          unint64_t v8 = "UNNAMED";
        }
        uint64_t v9 = *(void *)v3;
        uint64_t v10 = *(void *)(v3 + 8);
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v15 = v8;
        __int16 v16 = 2048;
        uint64_t v17 = v9;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n",  buf,  0x20u);
      }

      unint64_t v11 = (FILE *)*MEMORY[0x1895F89D0];
      unsigned int v12 = atomic_load((unsigned int *)(v3 + 28));
      if ((v12 & 0x1C000) != 0) {
        uint64_t v13 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3, 0LL, 0LL);
      }
      else {
        uint64_t v13 = "UNNAMED";
      }
      return (unint64_t *)fprintf( v11,  "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n",  v13,  *(void *)v3,  *(void *)(v3 + 8));
    }
  }

  return result;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back( void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity( void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_186047460( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11 = *(void *)(a4 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a4 + a2;
  *(_DWORD *)(a1 + 4) = v11;
  TRawSymbol<Pointer64>::is_objc_method(a4);
  uint64_t v12 = (unsigned int *)(a4 + 28);
  unsigned int v13 = atomic_load((unsigned int *)(a4 + 28));
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v13;
  *(_DWORD *)(a1 + 20) = a6;
  *(void *)(a1 + 12) = *(void *)(a4 + 16);
  if (a7) {
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = v13 | 0x40000000;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 24);
  int v14 = atomic_load(v12);
  if (*(void *)(a4 + 48)) {
    BOOL v15 = v14 < 0;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = *(_DWORD *)(a4 + 56);
  if (!v15) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
  int v17 = atomic_load(v12);
  if (*(void *)(a4 + 48)) {
    BOOL v18 = v17 < 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = *(_DWORD *)(a4 + 60);
  if (!v18) {
    int v19 = 0;
  }
  *(_DWORD *)(a1 + 32) = v19;
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    unint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v20 = *(a2 - 1);
        uint64_t v21 = *v9;
        uint64_t result = strcmp( (const char *)(*a3 + *(unsigned int *)(v20 + 12)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *uint64_t v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          BOOL v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *BOOL v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if ((strcmp( (const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 12)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 12))) & 0x80000000) == 0)
          {
            uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( v9,  a2,  a3);
            uint64_t v9 = (uint64_t *)result;
            goto LABEL_17;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 12)), (const char *)(*a3 + *(unsigned int *)(*a1 + 12))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24LL;
      break;
  }

  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    int v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 12));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v1_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }

      uint64_t v21 = a1;
LABEL_12:
      uint64_t *v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }

    uint64_t v10 = v11;
    v14 += 8LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>( uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v20 = *(a2 - 1);
        uint64_t v21 = *v9;
        BOOL result = strcmp( (const char *)(*a3 + *(unsigned int *)(v20 + 16)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *uint64_t v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *uint64_t v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if ((strcmp( (const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 16)),  (const char *)(*a3 + *(unsigned int *)(*v9 + 16))) & 0x80000000) == 0)
          {
            BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>( v9,  a2,  a3);
            uint64_t v9 = (uint64_t *)result;
            goto LABEL_17;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24LL;
      break;
  }

  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    int v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v1_Block_object_dispose((const void *)(v1 - 64), 8) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        int v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        uint64_t v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }

      uint64_t v21 = a1;
LABEL_12:
      uint64_t *v21 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }

    uint64_t v10 = v11;
    v14 += 8LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

uint64_t CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  if (!*(_BYTE *)a1)
  {
    BOOL v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v4);
        v4 += 104LL;
      }
    }
  }

  return a1;
}

uint64_t TRawSymbol<Pointer64>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 64);
  uint64_t v3 = *(void *)(result + 72);
  while (v2 != v3)
  {
    BOOL result = TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v2);
    v2 += 104LL;
  }

  uint64_t v4 = (unsigned int *)(v1 + 28);
  unsigned int v5 = atomic_load((unsigned int *)(v1 + 28));
  unsigned int v6 = atomic_load((unsigned int *)(v1 + 28));
  if ((v6 & 0x40000) == 0)
  {
    v5 &= ~0x20000u;
    *(void *)(v1 + 32) = *(void *)(v1 + 40);
  }

  unsigned int v7 = atomic_load(v4);
  if ((v7 & 0x800000) == 0) {
    v5 &= 0xFEBFFFFB;
  }
  atomic_store(v5, v4);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      CSCppSymbolOwner::~CSCppSymbolOwner((CSCppSymbolOwner *)(v2 + 16));
    }
    operator delete((void *)v2);
  }

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v36 = 0LL;
  *(void *)&v25[0] = v35;
  std::function<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( v35,  v25);
  unint64_t v30 = a3 & 0xFFFFFFFFFFFFFFF8LL;
  __int128 v31 = &v33;
  create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>( (a3 & 0xFFFFFFFFFFFFFFF8LL) + 32,  a1 + 32,  0,  (uint64_t)&v28);
  uint64_t v9 = a2 + 96;
  v27[0] = &v30;
  v27[1] = &v31;
  v27[2] = &v32;
  v27[3] = a2 + 96;
  v27[4] = v35;
  v27[5] = &v28;
  v27[6] = &v33;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()( (uint64_t)v27,  (uint64_t)v25);
  if (*(void *)&v25[0])
  {
    v24[0] = 0LL;
    v24[1] = (void **)v24;
    void v24[2] = (void **)0x2000000000LL;
    v24[3] = (void **)(a2 + 208);
    uint64_t v10 = v33;
    uint64_t v11 = v34;
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 1174405120LL;
    v20[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    v20[3] = &unk_189DF9028;
    void v20[4] = v24;
    v20[5] = v30;
    v20[6] = v9;
    __int128 __p = 0LL;
    unint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>( &__p,  v28,  (uint64_t)v29,  0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)v28) >> 2));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v20);
    *(void *)(a5 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(a5 + 16) = 0LL;
    *(void *)a5 = 0LL;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v25);
    *(_BYTE *)(a5 + 96) = 1;
    if (__p)
    {
      unint64_t v22 = __p;
      operator delete(__p);
    }

    _Block_object_dispose(v24, 8);
  }

  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 96) = 0;
  }

  v24[0] = (void **)&v26;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v24);
  if (v28)
  {
    BOOL v29 = v28;
    operator delete(v28);
  }

  BOOL result = v36;
  if (v36 == v35)
  {
    uint64_t v19 = 4LL;
    BOOL result = v35;
  }

  else
  {
    if (!v36) {
      return result;
    }
    uint64_t v19 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v19))( result,  v12,  v13,  v14,  v15,  v16,  v17);
}

void sub_1860482C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a19, 8);
  a19 = &a30;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  char v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(void *)(v30 - 144) = v32;
    operator delete(v32);
  }

  uint64_t v33 = *(void **)(v30 - 64);
  if (v33 == (void *)(v30 - 88))
  {
    uint64_t v34 = 4LL;
    uint64_t v33 = (void *)(v30 - 88);
  }

  else
  {
    if (!v33) {
      goto LABEL_10;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_10:
  _Unwind_Resume(a1);
}

unsigned __int8 *intern_name_or_default(char *a1, const void *a2, CSCppStringCache *this)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (a1) {
    return CSCppStringCache::intern(this, a1);
  }
  snprintf(__str, 0x10uLL, "%p", a2);
  return CSCppStringCache::intern(this, __str);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void *std::function<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( void *a1, __int128 *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v6 = off_189DF9068;
  __int128 v7 = *a2;
  uint64_t v8 = &v6;
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( &v6,  a1);
  uint64_t v3 = v8;
  if (v8 == &v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = &v6;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*v3)[v4]();
  }

  return a1;
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = *MEMORY[0x1895F89C0];
  uint64_t v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  if (((_DWORD)result - 1) < 2)
  {
    uint64_t v15 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v16 = (char *)*((void *)v15 + 5);
    if (v16)
    {
      uint64_t v17 = *((void *)v15 + 6);
      uint64_t v18 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v16);
    }

    else
    {
      uint64_t v18 = 0LL;
      uint64_t v17 = 0LL;
    }

    *(void *)__int128 buf = v18;
    uint64_t v89 = v17;
    unsigned int v27 = atomic_load(v15 + 5);
    if ((v27 & 0x1C000) != 0) {
      uint64_t v28 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v15, 0LL, 0LL);
    }
    else {
      uint64_t v28 = 0LL;
    }
    unsigned int v29 = atomic_load(v15 + 5);
    if ((v29 & 0x1C000) != 0) {
      uint64_t v30 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)v15);
    }
    else {
      uint64_t v30 = 0LL;
    }
    unsigned int v31 = atomic_load(v15 + 5);
    uint64_t v74 = *(void *)v15;
    unsigned int v32 = *(void *)v15;
    uint64_t v33 = intern_name_or_default(v28, (const void *)v32, *(CSCppStringCache **)(a1 + 24));
    uint64_t v34 = intern_name_or_default(v30, (const void *)*v15, *(CSCppStringCache **)(a1 + 24));
    unsigned int v35 = atomic_load(v15 + 5);
    if ((v35 & 0x80000000) != 0)
    {
      uint64_t v36 = buf;
      if (!*((void *)v15 + 5)) {
        uint64_t v36 = 0LL;
      }
    }

    else
    {
      uint64_t v36 = 0LL;
    }

    *(void *)a2 = v74;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = v33;
    *(void *)(a2 + 32) = v34;
    *(_OWORD *)(a2 + 40) = 0u;
    *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 65) = 0u;
    if (v36)
    {
      *(_OWORD *)(a2 + 40) = *(_OWORD *)v36;
      int v37 = -2143157248;
    }

    else
    {
      int v37 = 4326400;
    }

    *(_DWORD *)(a2 + 20) = v31 & 0xFF39FBFF | v37;
    uint64_t v38 = *((void *)v15 + 7);
    uint64_t v39 = *((void *)v15 + 8);
    if (v38 != v39)
    {
      do
      {
        uint64_t v40 = *(void *)(*(void *)(a1 + 32) + 24LL);
        if (!v40) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v40 + 48LL))( v40,  v38,  a2 + 56,  *(void *)(a1 + 24));
        v38 += 96LL;
      }

      while (v38 != v39);
      unsigned int v32 = *(_DWORD *)a2;
    }

    uint64_t v41 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), v32);
    return (void *)slideSymbolsByOffset<Pointer32>(a2, v41);
  }

  if ((_DWORD)result != 4)
  {
    if ((_DWORD)result == 5)
    {
      uint64_t v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      unsigned int v90 = 0LL;
      *(void *)&__int128 v81 = buf;
      *((void *)&v81 + 1) = v6;
      BOOL v82 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( buf,  (uint64_t)&v81);
      unint64_t v75 = *(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      uint64_t v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      uint64_t v10 = v9;
      if (!v9)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
          LODWORD(v81) = 134217984;
          *(void *)((char *)&v81 + 4) = v55;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Failed to relocate address %#llx in flatbuffer SOD",  (uint8_t *)&v81,  0xCu);
        }

        unint64_t v56 = (FILE *)*MEMORY[0x1895F89D0];
        uint64_t v57 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
        fprintf(v56, "Failed to relocate address %#llx in flatbuffer SOD", v57);
        goto LABEL_63;
      }

      uint64_t v11 = (const void *)v8;
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (uint64_t v12 = (unsigned __int16 *)(v75 - *(int *)v75), *v12 < 9u)
        || (uint64_t v13 = v12[4]) == 0)
      {
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v14 = (char *)(v75 + v13 + *(unsigned int *)(v75 + v13) + 4);
      }

      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (uint64_t v42 = (unsigned __int16 *)(v75 - *(int *)v75), *v42 < 0xBu)
        || (uint64_t v43 = v42[5]) == 0)
      {
        uint64_t v44 = 0LL;
      }

      else
      {
        uint64_t v44 = (char *)(v75 + v43 + *(unsigned int *)(v75 + v43) + 4);
      }

      int v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v75);
      FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      int v47 = v46;
      __int128 v48 = intern_name_or_default(v44, v11, *(CSCppStringCache **)(a1 + 24));
      uint64_t v49 = intern_name_or_default(v14, v11, *(CSCppStringCache **)(a1 + 24));
      *(_DWORD *)a2 = (_DWORD)v11;
      *(_DWORD *)(a2 + 4) = v47;
      *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = v48;
      *(void *)(a2 + 32) = v49;
      *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 65) = 0u;
      *(_DWORD *)(a2 + 20) = v45 & 0xFF39FBFF | 0x420400;
      uint64_t v50 = *(uint64_t **)(a1 + 48);
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      v76[0] = MEMORY[0x1895F87A8];
      v76[1] = 1174405120LL;
      v76[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_263;
      v76[3] = &__block_descriptor_tmp_265;
      uint64_t v53 = v77;
      uint64_t v54 = (uint64_t)v90;
      if (v90)
      {
        if (v90 == buf)
        {
          uint64_t v78 = v77;
          (*(void (**)(uint8_t *, _BYTE *))(*(void *)buf + 24LL))(buf, v77);
          goto LABEL_58;
        }

        uint64_t v54 = (*(uint64_t (**)(void))(*(void *)v90 + 16LL))();
      }

      uint64_t v78 = (_BYTE *)v54;
LABEL_58:
      uint64_t v66 = *(void *)(a1 + 24);
      uint64_t v79 = a2;
      uint64_t v80 = v66;
      FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v51, v52, (uint64_t)v76);
      uint64_t v67 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), *(_DWORD *)a2);
      slideSymbolsByOffset<Pointer32>(a2, v67);
      if (v78 == v77)
      {
        uint64_t v68 = 4LL;
      }

      else
      {
        if (!v78) {
          goto LABEL_63;
        }
        uint64_t v68 = 5LL;
        uint64_t v53 = v78;
      }

      (*(void (**)(void *))(*v53 + 8 * v68))(v53);
LABEL_63:
      BOOL result = v90;
      if (v90 == buf)
      {
        uint64_t v69 = 4LL;
        BOOL result = buf;
      }

      else
      {
        if (!v90) {
          goto LABEL_68;
        }
        uint64_t v69 = 5LL;
      }

      BOOL result = (void *)(*(uint64_t (**)(void))(*result + 8 * v69))();
LABEL_68:
      if (v10) {
        return result;
      }
    }

LABEL_69:
    *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_BYTE *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    return result;
  }

  uint64_t v19 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  int v20 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v75 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v19, *v20, &v75) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps",  buf,  2u);
    }

    BOOL result = (void *)fwrite( "Could not remap archive address to real in debug maps",  0x35uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
    goto LABEL_69;
  }

  unsigned int v90 = 0LL;
  *(void *)&__int128 v81 = buf;
  *((void *)&v81 + 1) = v19;
  std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( buf,  &v81);
  unsigned int v21 = v20[2];
  if ((v21 & 0x1C000) != 0)
  {
    unint64_t v22 = (_DWORD *)*((void *)v19 + 11);
    unint64_t v23 = (unint64_t)v22
        + 32 * v22[2]
        + 24 * v22[3]
        + (24 * v22[4])
        + (unint64_t)(4 * v22[4])
        + (36 * v22[5])
        + (20 * v22[6])
        + v22[22]
        + v22[20]
        + 96;
    uint64_t v24 = v20[3];
    unint64_t v25 = (char *)(v23 + v20[4]);
    uint64_t v26 = (char *)(v23 + v24);
  }

  else
  {
    unint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    LODWORD(v24) = v20[3];
  }

  int v58 = v24 != 0;
  if ((_DWORD)v24) {
    unint64_t v59 = v26;
  }
  else {
    unint64_t v59 = v25;
  }
  int v60 = v75;
  unsigned int v61 = v20[1];
  int64_t v62 = intern_name_or_default(v59, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  uint64_t v63 = intern_name_or_default(v25, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  *(_DWORD *)a2 = v60;
  *(_DWORD *)(a2 + 4) = v61;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = v62;
  *(void *)(a2 + 32) = v63;
  *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 65) = 0u;
  *(_DWORD *)(a2 + 20) = (v21 & 0x7F39FBFF | (v58 << 17)) + 4195328;
  v83[0] = MEMORY[0x1895F87A8];
  v83[1] = 1174405120LL;
  v83[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
  v83[3] = &__block_descriptor_tmp_261;
  uint64_t v64 = v84;
  uint64_t v65 = (uint64_t)v90;
  if (!v90) {
    goto LABEL_56;
  }
  if (v90 != buf)
  {
    uint64_t v65 = (*(uint64_t (**)(void))(*(void *)v90 + 16LL))();
LABEL_56:
    uint64_t v85 = (_BYTE *)v65;
    goto LABEL_72;
  }

  uint64_t v85 = v84;
  (*(void (**)(uint8_t *, _BYTE *))(*(void *)buf + 24LL))(buf, v84);
LABEL_72:
  uint64_t v70 = *(void *)(a1 + 24);
  uint64_t v86 = a2;
  uint64_t v87 = v70;
  TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v19, (uint64_t)v20, (uint64_t)v83);
  uint64_t v71 = slide_for_remote_address<Pointer32,unsigned int>(*(void **)(a1 + 40), *(_DWORD *)a2);
  slideSymbolsByOffset<Pointer32>(a2, v71);
  if (v85 == v84)
  {
    uint64_t v72 = 4LL;
    goto LABEL_76;
  }

  if (v85)
  {
    uint64_t v72 = 5LL;
    uint64_t v64 = v85;
LABEL_76:
    (*(void (**)(void *))(*v64 + 8 * v72))(v64);
  }

  BOOL result = v90;
  if (v90 == buf)
  {
    uint64_t v73 = 4LL;
    BOOL result = buf;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v73))();
  }

  if (v90)
  {
    uint64_t v73 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v73))();
  }

  return result;
}

    *(void *)(a2 + 96) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 73) = 0u;
    *(_DWORD *)(a2 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
    return result;
  }

  uint64_t v19 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  int v20 = (unsigned int *)(*(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v75 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v19, *v20, &v75) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps",  buf,  2u);
    }

    BOOL result = (void *)fwrite( "Could not remap archive address to real in debug maps",  0x35uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
    goto LABEL_69;
  }

  unsigned int v90 = 0LL;
  *(void *)&__int128 v81 = buf;
  *((void *)&v81 + 1) = v19;
  std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( buf,  &v81);
  unsigned int v21 = v20[2];
  if ((v21 & 0x1C000) != 0)
  {
    unint64_t v22 = (_DWORD *)*((void *)v19 + 11);
    unint64_t v23 = (unint64_t)v22
        + 32 * v22[2]
        + 24 * v22[3]
        + (24 * v22[4])
        + (unint64_t)(4 * v22[4])
        + (36 * v22[5])
        + (20 * v22[6])
        + v22[22]
        + v22[20]
        + 96;
    uint64_t v24 = v20[3];
    unint64_t v25 = (char *)(v23 + v20[4]);
    uint64_t v26 = (char *)(v23 + v24);
  }

  else
  {
    unint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    LODWORD(v24) = v20[3];
  }

  unint64_t v59 = v24 != 0;
  if ((_DWORD)v24) {
    int v60 = v26;
  }
  else {
    int v60 = v25;
  }
  unsigned int v61 = v75;
  int64_t v62 = v20[1];
  uint64_t v63 = intern_name_or_default(v60, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  uint64_t v64 = intern_name_or_default(v25, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  *(void *)a2 = v61;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v62;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = v63;
  *(void *)(a2 + 40) = v64;
  *(void *)(a2 + 96) = 0LL;
  *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 73) = 0u;
  *(_DWORD *)(a2 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = (v21 & 0x7F39FBFF | (v59 << 17)) + 4195328;
  v83[0] = MEMORY[0x1895F87A8];
  v83[1] = 1174405120LL;
  v83[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
  v83[3] = &__block_descriptor_tmp_271;
  uint64_t v65 = v84;
  uint64_t v66 = (uint64_t)v90;
  if (!v90) {
    goto LABEL_56;
  }
  if (v90 != buf)
  {
    uint64_t v66 = (*(uint64_t (**)(void))(*(void *)v90 + 16LL))();
LABEL_56:
    uint64_t v85 = (_BYTE *)v66;
    goto LABEL_72;
  }

  uint64_t v85 = v84;
  (*(void (**)(uint8_t *, _BYTE *))(*(void *)buf + 24LL))(buf, v84);
LABEL_72:
  uint64_t v71 = *(void *)(a1 + 24);
  uint64_t v86 = a2;
  uint64_t v87 = v71;
  TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v19, (uint64_t)v20, (uint64_t)v83);
  uint64_t v72 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), *(void *)a2);
  slideSymbolsByOffset<Pointer64>((void *)a2, v72);
  if (v85 == v84)
  {
    uint64_t v73 = 4LL;
    goto LABEL_76;
  }

  if (v85)
  {
    uint64_t v73 = 5LL;
    uint64_t v65 = v85;
LABEL_76:
    (*(void (**)(void *))(*v65 + 8 * v73))(v65);
  }

  BOOL result = v90;
  if (v90 == buf)
  {
    uint64_t v74 = 4LL;
    BOOL result = buf;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v74))();
  }

  if (v90)
  {
    uint64_t v74 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v74))();
  }

  return result;
}

  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
}

void sub_186048D04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v38 = *(void **)(v36 - 104);
  if (v38 == (void *)(v36 - 128))
  {
    uint64_t v39 = 4LL;
    uint64_t v38 = (void *)(v36 - 128);
  }

  else
  {
    if (!v38) {
      goto LABEL_6;
    }
    uint64_t v39 = 5LL;
  }

  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  if ((v6 - 1) < 2)
  {
    unsigned int v21 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
    uint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    unsigned int v23 = *v21;
    int v24 = slide_for_remote_address<Pointer32,unsigned int>((void *)(a1 + 56), *v21) + v23;
    unsigned int v25 = v21[1];
    unsigned int v26 = v21[4];
    int v17 = v21[5] & 0x7FFFFFFF;
    uint64_t v19 = (char *)v13[1];
    unsigned int v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(_DWORD *)uint64_t v19 = v24;
      *((_DWORD *)v19 + 1) = v25;
      *((void *)v19 + 1) = v22;
      *((_DWORD *)v19 + 4) = v26;
      goto LABEL_8;
    }

    uint64_t v34 = (v19 - (_BYTE *)*v13) >> 5;
    unint64_t v35 = v34 + 1;
    if (!((unint64_t)(v34 + 1) >> 59))
    {
      uint64_t v36 = v27 - (_BYTE *)*v13;
      if (v36 >> 4 > v35) {
        unint64_t v35 = v36 >> 4;
      }
      else {
        unint64_t v37 = v35;
      }
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v37);
      uint64_t v39 = &v38[32 * v34];
      uint64_t v41 = &v38[32 * v40];
      *(_DWORD *)uint64_t v39 = v24;
      *((_DWORD *)v39 + 1) = v25;
      *((void *)v39 + 1) = v22;
      *((_DWORD *)v39 + 4) = v26;
      *((_DWORD *)v39 + 5) = v17;
      *((_DWORD *)v39 + 6) = 0;
      uint64_t v42 = v39 + 32;
      uint64_t v44 = (char *)*v13;
      uint64_t v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        __int128 v45 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v45;
        v39 -= 32;
        v43 -= 32;
      }

      while (v43 != v44);
      goto LABEL_59;
    }

uint64_t slide_for_remote_address<Pointer32,unsigned int>(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 2);
  uint64_t v4 = (_DWORD *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    int v6 = &v4[3 * (v3 >> 1)];
    unsigned int v8 = *v6;
    unint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2) {
      unint64_t v3 = v5;
    }
    else {
      uint64_t v4 = v7;
    }
  }

  while (v3);
  if (v4 != (_DWORD *)*a1 && (unsigned int v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9) {
    return *(v4 - 1);
  }
  else {
    return 0LL;
  }
}

void *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0LL;
  return std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>( v2,  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF9068;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF9068;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()( uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()( uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v8 = (char *)*((void *)a2 + 5);
  if (v8)
  {
    uint64_t v26 = *((void *)a2 + 6);
    unsigned int v9 = CSCppStringCache::intern(this, v8);
  }

  else
  {
    unsigned int v9 = 0LL;
    uint64_t v26 = 0LL;
  }

  unsigned int v10 = atomic_load(a2 + 5);
  if ((v10 & 0x1C000) != 0) {
    uint64_t v11 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)a2, 0LL, 0LL);
  }
  else {
    uint64_t v11 = 0LL;
  }
  unsigned int v12 = atomic_load(a2 + 5);
  if ((v12 & 0x1C000) != 0) {
    uint64_t v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  }
  else {
    uint64_t v13 = 0LL;
  }
  unsigned int v14 = atomic_load(a2 + 5);
  unsigned int v15 = v14 & 0xFF39FBFF;
  unsigned int v16 = v14 & 0xFF39FBFF | 0x420400;
  uint64_t v27 = *(void *)a2;
  int v17 = intern_name_or_default(v11, (const void *)*(void *)a2, this);
  unsigned int v18 = intern_name_or_default(v13, (const void *)*a2, this);
  unsigned int v19 = atomic_load(a2 + 5);
  uint64_t v20 = *((void *)a2 + 5);
  v28[0] = v27;
  v28[1] = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = v17;
  unsigned int v31 = v18;
  uint64_t v34 = 0LL;
  __int128 v32 = 0u;
  memset(v33, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    *(void *)&__int128 v32 = v9;
    *((void *)&v32 + 1) = v26;
    unsigned int v16 = v15 | 0x80420400;
  }

  HIDWORD(v29) = v16;
  uint64_t v21 = *((void *)a2 + 7);
  for (uint64_t i = *((void *)a2 + 8); v21 != i; v21 += 96LL)
  {
    uint64_t v23 = *(void *)(*(void *)a1 + 24LL);
    if (!v23) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v23 + 48LL))( v23,  v21,  v33,  this);
  }

  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v25 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v28);
  }

  else
  {
    *(void *)(v24 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(v24 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(v24 + 16) = 0LL;
    *(void *)unint64_t v24 = 0LL;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v24, (uint64_t)v28);
    uint64_t v25 = v24 + 96;
  }

  a3[1] = v25;
  unint64_t v35 = (void **)v33;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_186049650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  *(void *)(v21 - 8_Block_object_dispose((const void *)(v1 - 64), 8) = &a21;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

void *std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( void *a1, __int128 *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v6 = off_189DF9148;
  __int128 v7 = *a2;
  unsigned int v8 = &v6;
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( &v6,  a1);
  unint64_t v3 = v8;
  if (v8 == &v6)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = &v6;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*v3)[v4]();
  }

  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  uint64_t v6 = a2;
  uint64_t v4 = a1[7];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v3 + 56, v2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 32,  a2 + 32);
}

void *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  __n128 result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>( void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = off_189DF91E8;
  *(_OWORD *)(v4 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  uint64_t v9 = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( v8,  a1);
  unint64_t v5 = v9;
  if (v9 == v8)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v6 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_263( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  uint64_t v6 = a2;
  uint64_t v4 = a1[7];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v3 + 56, v2);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 32,  a2 + 32);
}

void *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  __n128 result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF9148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF9148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()( uint64_t a1, __int128 **a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()( void *a1, __int128 *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  uint64_t v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    unsigned int v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0) {
      uint64_t v19 = *(void *)((char *)a2 + 28);
    }
    else {
      uint64_t v19 = 0LL;
    }
    uint64_t v23 = v19;
    unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  }

  else
  {
    unsigned int v12 = 0LL;
    uint64_t v23 = 0LL;
  }

  __int128 v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  unint64_t v34 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34) & 1) != 0)
  {
    int v13 = DWORD2(v35);
    unsigned int v14 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    if ((DWORD2(v35) & 0x1C000) != 0) {
      unsigned int v15 = (char *)(v10 + v36);
    }
    else {
      unsigned int v15 = 0LL;
    }
    if ((DWORD2(v35) & 0x1C000) != 0) {
      unsigned int v16 = (char *)(v10 + HIDWORD(v35));
    }
    else {
      unsigned int v16 = 0LL;
    }
    if (HIDWORD(v35)) {
      int v17 = v16;
    }
    else {
      int v17 = v15;
    }
    *(_DWORD *)__int128 buf = v34;
    int v26 = DWORD1(v35);
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = intern_name_or_default(v17, (const void *)v34, this);
    uint64_t v30 = intern_name_or_default(v15, (const void *)v34, this);
    uint64_t v33 = 0LL;
    __int128 v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      *(void *)&__int128 v31 = v12;
      *((void *)&v31 + 1) = v23;
      int v18 = -2143288320;
    }

    else
    {
      int v18 = 4195328;
    }

    HIDWORD(v2_Block_object_dispose((const void *)(v1 - 64), 8) = v14 | v18;
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 0x40000000LL;
    void v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_266;
    uint64_t v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }

    else
    {
      *(void *)(v21 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v21 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v21 + 16) = 0LL;
      *(void *)unint64_t v21 = 0LL;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v21, (uint64_t)buf);
      uint64_t v22 = v21 + 96;
    }

    a3[1] = v22;
    unint64_t v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps inline enumeration",  buf,  2u);
    }

    fwrite( "Could not remap archive address to real in debug maps inline enumeration",  0x48uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
  }

void sub_186049C74(_Unwind_Exception *a1)
{
  *(void *)(v2 - 96) = v1 + 56;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v2 + 56, v4);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189DF91E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF91E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()( uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()( uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  uint64_t v53 = 0LL;
  uint64_t v54 = (int *)a2;
  unsigned int v52 = 0LL;
  unsigned int v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    uint64_t v9 = v8[6];
    if (v9)
    {
      unint64_t v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
        int v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      }
      else {
        int v13 = 0LL;
      }
      unsigned int v52 = CSCppStringCache::intern(this, v13 + 4);
      unsigned int v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      unsigned int v15 = *v14;
      if (v15 < 0xD)
      {
        unsigned int v16 = 0LL;
      }

      else
      {
        unsigned int v16 = (int *)v14[6];
        if (v14[6]) {
          unsigned int v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
        }
      }

      int v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
        int v19 = *(int *)((char *)v16 + v18);
      }
      else {
        int v19 = 0;
      }
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        uint64_t v20 = 0LL;
      }

      else
      {
        uint64_t v20 = (int *)v14[6];
        if (v20) {
          uint64_t v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
        }
      }

      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
        int v23 = *(int *)((char *)v20 + v22);
      }
      else {
        int v23 = 0;
      }
      HIDWORD(v53) = v23;
    }
  }

  unint64_t v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  unint64_t v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  uint64_t v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    uint64_t v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (uint64_t v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (uint64_t v30 = v29[4]) == 0)
    {
      __int128 v31 = 0LL;
    }

    else
    {
      __int128 v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }

    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (__int128 v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (uint64_t v33 = v32[5]) == 0)
    {
      unint64_t v34 = 0LL;
    }

    else
    {
      unint64_t v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }

    int v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    int v37 = v36;
    uint64_t v38 = intern_name_or_default(v34, v28, this);
    uint64_t v39 = intern_name_or_default(v31, v28, this);
    uint64_t v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      uint64_t v42 = 0LL;
    }

    else
    {
      BOOL v41 = v40[6] == 0;
      uint64_t v42 = &v52;
      if (v41) {
        uint64_t v42 = 0LL;
      }
    }

    *(_DWORD *)__int128 buf = (_DWORD)v28;
    *(_DWORD *)unint64_t v57 = v37;
    *(void *)&v57[4] = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v59 = v38;
    int v60 = v39;
    uint64_t v63 = 0LL;
    __int128 v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      __int128 v61 = *(_OWORD *)v42;
      int v46 = -2143288320;
    }

    else
    {
      int v46 = 4195328;
    }

    HIDWORD(v5_Block_object_dispose((const void *)(v1 - 64), 8) = v35 & 0xFF3BFBFF | v46;
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = **(void **)(a1 + 16) | 2LL;
    v51[0] = MEMORY[0x1895F87A8];
    v51[1] = 0x40000000LL;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_267;
    v51[4] = *(void *)a1;
    v51[5] = buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    unint64_t v49 = a3[1];
    if (v49 >= a3[2])
    {
      uint64_t v50 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }

    else
    {
      *(void *)(v49 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v49 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v49 + 16) = 0LL;
      *(void *)unint64_t v49 = 0LL;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(_OWORD *)(v49 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v49, (uint64_t)buf);
      uint64_t v50 = v49 + 96;
    }

    a3[1] = v50;
    unint64_t v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      *(_DWORD *)__int128 buf = 134217984;
      *(void *)unint64_t v57 = v43;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Failed to relocate address %#llx in flatbuffer SOD",  buf,  0xCu);
    }

    uint64_t v44 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }

void sub_18604A1D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a20 = (void **)&a28;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v2 + 56, v4);
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_18604A3AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL are_symbols_aliases<Pointer32>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0LL;
  }
  uint64_t v5 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a1);
  uint64_t v6 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void ***std::back_insert_iterator<std::vector<CSUserSuppliedSymbolData>>::operator=[abi:ne180100]( void ***a1, __int128 *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*v4) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555LL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v4) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555LL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>(v7, v16);
    }
    else {
      int v17 = 0LL;
    }
    uint64_t v18 = &v17[48 * v13];
    int v19 = &v17[48 * v16];
    __int128 v20 = *a2;
    __int128 v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)uint64_t v18 = v20;
    uint64_t v12 = v18 + 48;
    int v23 = (char *)*v4;
    uint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        __int128 v24 = *((_OWORD *)v22 - 3);
        __int128 v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }

      while (v22 != v23);
      uint64_t v22 = (char *)*v4;
    }

    void *v4 = v18;
    v4[1] = v12;
    _DWORD v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    __int128 v10 = *a2;
    __int128 v11 = a2[2];
    v5[1] = a2[1];
    v5[2] = v11;
    _OWORD *v5 = v10;
    uint64_t v12 = v5 + 3;
  }

  v4[1] = v12;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer32>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if (a1 >= 0x155555555555555LL) {
    unint64_t v1 = 0x155555555555555LL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1896146B8];
  while (1)
  {
    __n128 result = operator new(96 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 24) < *a1) {
        swap(a1, (int *)a2 - 24);
      }
    }

    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( (unsigned int *)a1,  a2);
    }

    else
    {
      uint64_t v12 = a4 >> 1;
      unint64_t v13 = &a1[24 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        unint64_t v18 = 0LL;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( (unsigned int *)a1,  (unsigned int *)&a1[24 * (a4 >> 1)],  a3,  a4 >> 1,  a5);
        unint64_t v18 = a4 >> 1;
        unint64_t v15 = a4 - v12;
        unint64_t v16 = (_DWORD *)(a5 + 96 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( (unsigned int *)&a1[24 * (a4 >> 1)],  a2,  a3,  v15,  (uint64_t)v16);
        unint64_t v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>( a5,  v16,  v16,  (_DWORD *)(a5 + 96 * a4),  (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v17, 0LL);
      }

      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( a1,  &a1[24 * (a4 >> 1)],  a3,  a4 >> 1,  a5,  a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( v13,  a2,  a3,  v14,  a5,  a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( (uint64_t)a1,  v13,  (char *)a2,  a3,  v12,  v14,  a5,  a6);
      }
    }
  }

void sub_18604A770(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( unsigned int *a1, unsigned int *a2)
{
  if (a1 != a2)
  {
    v17[9] = v2;
    v17[10] = v3;
    uint64_t v6 = a1 + 24;
    if (a1 + 24 != a2)
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = a1;
      do
      {
        unsigned int v9 = *v8;
        unint64_t v8 = v6;
        if (*v6 < v9)
        {
          uint64_t v16 = 0LL;
          memset(v13, 0, 24);
          __int128 v14 = 0u;
          memset(v15, 0, 25);
          TRawSymbol<Pointer32>::operator=((uint64_t)v13, (uint64_t)v6);
          uint64_t v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer32>::operator=((uint64_t)a1 + v10 + 96, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            unsigned int v11 = *(unsigned int *)((char *)a1 + v10 - 96);
            v10 -= 96LL;
            if (LODWORD(v13[0]) >= v11)
            {
              uint64_t v12 = (uint64_t)a1 + v10 + 96;
              goto LABEL_10;
            }
          }

          uint64_t v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer32>::operator=(v12, (uint64_t)v13);
          v17[0] = (void **)v15;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v17);
        }

        uint64_t v6 = v8 + 24;
        v7 += 96LL;
      }

      while (v8 + 24 != a2);
    }
  }

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    unint64_t v8 = a1;
    if (a4 == 2)
    {
      v16[1] = (uint64_t)&v17;
      uint64_t v17 = 0LL;
      unsigned int v10 = *(a2 - 24);
      unsigned int v9 = a2 - 24;
      unsigned int v11 = *a1;
      *(void *)(a5 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(a5 + 16) = 0LL;
      *(void *)a5 = 0LL;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      BOOL v12 = v10 >= v11;
      if (v10 >= v11) {
        uint64_t v13 = (uint64_t)a1;
      }
      else {
        uint64_t v13 = (uint64_t)(a2 - 24);
      }
      if (v12) {
        unint64_t v8 = v9;
      }
      TRawSymbol<Pointer32>::operator=(a5, v13);
      ++v17;
      *(void *)(a5 + 96) = 0LL;
      uint64_t v14 = a5 + 96;
      *(void *)(v14 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v14 + 16) = 0LL;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *(_OWORD *)(v14 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
      v16[0] = 0LL;
      std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0LL);
    }

    else if (a4 == 1)
    {
      *(void *)(a5 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(a5 + 16) = 0LL;
      *(void *)a5 = 0LL;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a1);
    }

    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( a1,  &a1[24 * (a4 >> 1)],  a3,  a4 >> 1,  a5,  a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( &v8[24 * (a4 >> 1)],  a2,  a3,  a4 - (a4 >> 1),  a5 + 96 * (a4 >> 1),  a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>( v8,  &v8[24 * (a4 >> 1)],  &v8[24 * (a4 >> 1)],  a2,  a5);
    }

    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( (uint64_t)a1,  a2,  a5);
    }
  }

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>( uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if ((_DWORD *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
      a3 += 24;
      a5 += 96LL;
    }
  }

  else
  {
    unsigned int v9 = (_DWORD *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v9);
        v9 += 24;
      }

      else
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
        a3 += 24;
      }

      a5 += 96LL;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }

    if (v9 != a2)
    {
      uint64_t v10 = 0LL;
      do
      {
        __n128 result = TRawSymbol<Pointer32>::operator=(a5 + v10 * 4, (uint64_t)&v9[v10]);
        v10 += 24LL;
      }

      while (&v9[v10] != a2);
    }
  }

  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( uint64_t a1, int *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( a1,  a2,  a3,  a4,  a5,  v8,  a7);
        return result;
      }

      if (!a5) {
        return result;
      }
      unsigned int v11 = 0LL;
      uint64_t v12 = -a5;
      while (*a2 >= *(_DWORD *)&v11[a1])
      {
        v11 += 96;
        if (__CFADD__(v12++, 1LL)) {
          return result;
        }
      }

      uint64_t v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(void *)&double result = swap((int *)&v11[a1], a2).n128_u64[0];
          return result;
        }

        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v24 = v14 >> 1;
        unint64_t v18 = (int *)&v11[96 * (v14 >> 1) + a1];
        uint64_t v17 = a2;
        if (a2 != (int *)a3)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (char *)a2) >> 5);
          uint64_t v17 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            char v27 = &v17[24 * (v25 >> 1)];
            unsigned int v29 = *v27;
            uint64_t v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 < *v18) {
              uint64_t v17 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }

          while (v25);
        }

        uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)a2) >> 5);
      }

      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[24 * (v15 >> 1)];
        unint64_t v18 = a2;
        if ((char *)a2 - a1 != v11)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - v11) >> 5);
          unint64_t v18 = (int *)&v11[a1];
          do
          {
            unint64_t v20 = v19 >> 1;
            __int128 v21 = &v18[24 * (v19 >> 1)];
            unsigned int v23 = *v21;
            uint64_t v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*v17 < v23) {
              unint64_t v19 = v20;
            }
            else {
              unint64_t v18 = v22;
            }
          }

          while (v19);
        }

        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - a1 - v11) >> 5);
      }

      uint64_t v52 = (uint64_t)&v11[a1];
      if (v18 == a2)
      {
        unint64_t v34 = v17;
      }

      else if (v17 == a2)
      {
        unint64_t v34 = v18;
      }

      else
      {
        uint64_t v50 = a7;
        uint64_t v51 = a3;
        uint64_t v30 = a4;
        uint64_t v31 = a8;
        uint64_t v32 = v24;
        uint64_t v49 = v16;
        uint64_t v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>( v18,  a2,  v17);
        uint64_t v16 = v49;
        a7 = v50;
        uint64_t v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        unint64_t v34 = v33;
      }

      a5 = -v24 - v12;
      uint64_t v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        uint64_t v43 = v17;
        uint64_t v44 = a4;
        uint64_t v45 = v24;
        uint64_t v46 = v16;
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( v34,  v43,  a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        uint64_t v35 = v46;
        a5 = v45;
        a3 = (char *)v34;
        a1 = v52;
      }

      else
      {
        int v36 = &v11[a1];
        int v37 = v18;
        uint64_t v38 = a3;
        uint64_t v39 = a4;
        uint64_t v40 = a7;
        uint64_t v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( v36,  v37,  v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }

      uint64_t v8 = v35;
    }

    while (v35);
  }

  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0LL;
    *(void *)(a3 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)a3 = 0LL;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a3, a1);
    ++v17[0];
    uint64_t v8 = (unsigned int *)(a1 + 96);
    if (v8 != a2)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = a3;
      uint64_t v11 = a3;
      do
      {
        unsigned int v12 = *v8;
        *(void *)(v11 + 96) = 0LL;
        v11 += 96LL;
        unsigned int v13 = *(_DWORD *)v10;
        *(void *)(v10 + 184) = 0LL;
        *(void *)(v10 + 104) = 0LL;
        *(void *)(v10 + 112) = 0LL;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 161) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer32>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }

        else
        {
          TRawSymbol<Pointer32>::operator=(v11, v10);
          ++v17[0];
          uint64_t v14 = a3;
          if (v10 != a3)
          {
            uint64_t v15 = v9;
            while (1)
            {
              uint64_t v14 = a3 + v15;
              if (*v8 >= *(_DWORD *)(a3 + v15 - 96)) {
                break;
              }
              TRawSymbol<Pointer32>::operator=(v14, a3 + v15 - 96);
              v15 -= 96LL;
              if (!v15)
              {
                uint64_t v14 = a3;
                break;
              }
            }
          }

          TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
        }

        v8 += 24;
        v9 += 96LL;
        uint64_t v10 = v11;
      }

      while (v8 != a2);
    }

    v16[0] = 0LL;
    std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0LL);
  }

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>( unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0LL;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(void *)(v5 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v5 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v5 + 16) = 0LL;
      *(void *)uint64_t v5 = 0LL;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
      a3 += 24;
      v5 += 96LL;
      ++v15;
    }
  }

  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      unsigned int v10 = *a3;
      unsigned int v11 = *v9;
      *(void *)(v5 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v5 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
      *(void *)(v5 + 16) = 0LL;
      *(void *)uint64_t v5 = 0LL;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)v9);
        v9 += 24;
      }

      else
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
        a3 += 24;
      }

      ++v15;
      v5 += 96LL;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }

    if (v9 != a2)
    {
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = v5 + v12 * 4;
        *(void *)(v13 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v13 + 16) = 0LL;
        *(void *)uint64_t v13 = 0LL;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v5 + v12 * 4, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 24LL;
      }

      while (&v9[v12] != a2);
    }
  }

  v14[0] = 0LL;
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0LL);
}

void std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0LL;
      uint64_t v5 = (void **)(v2 + 56);
      do
      {
        uint64_t v6 = v5;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 12;
      }

      while (v4 < *v3);
    }
  }

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>( uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0LL;
  uint64_t v11 = a7;
  if (a5 <= a6)
  {
    if ((_DWORD *)a1 != a2)
    {
      uint64_t v11 = a7;
      uint64_t v13 = a1;
      do
      {
        *(void *)(v11 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v11 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v11 + 16) = 0LL;
        *(void *)uint64_t v11 = 0LL;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v13);
        ++v15;
        v13 += 96LL;
        v11 += 96LL;
      }

      while ((_DWORD *)v13 != a2);
    }

    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>( a7,  v11,  a2,  a3,  a1);
  }

  else
  {
    if (a2 != a3)
    {
      uint64_t v11 = a7;
      uint64_t v12 = (uint64_t)a2;
      do
      {
        *(void *)(v11 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v11 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
        *(void *)(v11 + 16) = 0LL;
        *(void *)uint64_t v11 = 0LL;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v12);
        ++v15;
        v12 += 96LL;
        v11 += 96LL;
      }

      while ((_DWORD *)v12 != a3);
    }

    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>( v11,  a7,  (uint64_t)a2,  a1,  (uint64_t)a3);
  }

  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0LL);
}

void sub_18604B2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>( uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v5 = a5;
    uint64_t v9 = (_DWORD *)result;
    uint64_t v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        double result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)v9);
        v9 += 24;
      }

      else
      {
        double result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)a3);
        a3 += 24;
      }

      v10 += 96LL;
      v5 += 96LL;
      if (v9 == (_DWORD *)a2) {
        return result;
      }
    }

    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>( (uint64_t)v9,  a2,  v5);
  }

  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a5 - 96;
    while (a3 != a4)
    {
      unsigned int v10 = *(_DWORD *)(v8 - 96);
      unsigned int v11 = *(_DWORD *)(a3 - 96);
      if (v10 >= v11) {
        uint64_t v12 = v8 - 96;
      }
      else {
        uint64_t v12 = a3 - 96;
      }
      if (v10 >= v11) {
        v8 -= 96LL;
      }
      else {
        a3 -= 96LL;
      }
      double result = TRawSymbol<Pointer32>::operator=(v9, v12);
      v9 -= 96LL;
      if (v8 == a2) {
        return result;
      }
    }

    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = v9 + v13;
      v13 -= 96LL;
      double result = TRawSymbol<Pointer32>::operator=(v14, v8 + v13);
    }

    while (v8 + v13 != a2);
  }

  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      TRawSymbol<Pointer32>::operator=(v6, v4);
      v4 += 96LL;
      v6 += 96LL;
      v3 += 96LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>( int *a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  swap(a1, a2);
  uint64_t v6 = a1 + 24;
  for (uint64_t i = v4 + 24; i != a3; i += 24)
  {
    if (v6 == v4) {
      uint64_t v4 = i;
    }
    swap(v6, i);
    v6 += 24;
  }

  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        v8 += 24;
        v9 += 24;
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          uint64_t v4 = v9;
        }
      }

      uint64_t v9 = v4;
    }

    while (v8 != v4);
  }

  return v6;
}

void *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::__emplace_unique_key_args<TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  __int128 v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    __int128 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_18604B76C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  double result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      double result = (void *)*result;
    }

    while (result);
  }

  return result;
}

__int128 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__equal_to &>( __int128 *a1, __int128 *a2)
{
  double result = a2;
  if (a1 != a2)
  {
    unint64_t v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2) {
        return a2;
      }
      int v5 = *((_DWORD *)v4 + 8);
      int v6 = *((_DWORD *)v4 + 9);
      v4 += 2;
    }

    while (v5 != *((_DWORD *)v4 + 8) || v6 != *((_DWORD *)v4 + 9));
    for (uint64_t i = v4 + 4; i != a2; i += 2)
    {
      if (*(_DWORD *)v4 != *(_DWORD *)i || *((_DWORD *)v4 + 1) != *((_DWORD *)i + 1))
      {
        __int128 v10 = *i;
        *(__int128 *)((char *)v4 + 44) = *(__int128 *)((char *)i + 12);
        _DWORD v4[2] = v10;
        v4 += 2;
      }
    }

    return v4 + 2;
  }

  return result;
}

void *std::__hash_table<TRawSourceInfo<Pointer32> *,std::hash<TRawSourceInfo<Pointer32> *>,std::equal_to<TRawSourceInfo<Pointer32> *>,std::allocator<TRawSourceInfo<Pointer32> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  __int128 v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    __int128 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_18604BB24(_Unwind_Exception *a1)
{
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v30 = 0LL;
  *(void *)&v19[0] = v29;
  std::function<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( v29,  v19);
  unint64_t v24 = a3 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = &v27;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>( (a3 & 0xFFFFFFFFFFFFFFF8LL) + 32,  a1 + 32,  0,  &v22);
  uint64_t v9 = a2 + 96;
  v21[0] = &v24;
  v21[1] = &v25;
  v21[2] = &v26;
  v21[3] = a2 + 96;
  void v21[4] = v29;
  v21[5] = &v22;
  v21[6] = &v27;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()( (uint64_t)v21,  (uint64_t)v19);
  if (v19[0] == 0)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 104) = 0;
  }

  else
  {
    v18[0] = 0LL;
    v18[1] = (void **)v18;
    v18[2] = (void **)0x2000000000LL;
    v18[3] = (void **)(a2 + 208);
    uint64_t v10 = v27;
    uint64_t v11 = v28;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 1174405120LL;
    uint64_t v14[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    v14[3] = &unk_189DF9290;
    v14[4] = v18;
    v14[5] = v24;
    v14[6] = v9;
    __int128 __p = 0LL;
    BOOL v16 = 0LL;
    uint64_t v17 = 0LL;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>( &__p,  v22,  (uint64_t)v23,  0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)v22) >> 3));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v14);
    *(void *)(a5 + 96) = 0LL;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a5, (uint64_t)v19);
    *(_BYTE *)(a5 + 104) = 1;
    if (__p)
    {
      BOOL v16 = __p;
      operator delete(__p);
    }

    _Block_object_dispose(v18, 8);
  }

  v18[0] = (void **)&v20;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v18);
  if (v22)
  {
    unsigned int v23 = v22;
    operator delete(v22);
  }

  double result = v30;
  if (v30 == v29)
  {
    uint64_t v13 = 4LL;
    double result = v29;
  }

  else
  {
    if (!v30) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_18604BD54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t *a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a20, 8);
  a20 = &a32;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  unint64_t v34 = *(void **)(v32 - 152);
  if (v34)
  {
    *(void *)(v32 - 144) = v34;
    operator delete(v34);
  }

  uint64_t v35 = *(void **)(v32 - 64);
  if (v35 == (void *)(v32 - 88))
  {
    uint64_t v36 = 4LL;
    uint64_t v35 = (void *)(v32 - 88);
  }

  else
  {
    if (!v35) {
      goto LABEL_10;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_10:
  _Unwind_Resume(a1);
}

void *std::function<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( void *a1, __int128 *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  unint64_t v6 = off_189DF92D0;
  __int128 v7 = *a2;
  unint64_t v8 = &v6;
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( &v6,  a1);
  unint64_t v3 = v8;
  if (v8 == &v6)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = &v6;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*v3)[v4]();
  }

  return a1;
}

void *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = *MEMORY[0x1895F89C0];
  uint64_t v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  if (((_DWORD)result - 1) < 2)
  {
    unint64_t v15 = *(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v16 = *(char **)(v15 + 48);
    if (v16)
    {
      uint64_t v17 = *(void *)(v15 + 56);
      unint64_t v18 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v16);
    }

    else
    {
      unint64_t v18 = 0LL;
      uint64_t v17 = 0LL;
    }

    *(void *)__int128 buf = v18;
    uint64_t v89 = v17;
    unsigned int v27 = atomic_load((unsigned int *)(v15 + 28));
    if ((v27 & 0x1C000) != 0) {
      uint64_t v28 = (char *)TRawSymbol<Pointer64>::_resolve_name(v15, 0LL, 0LL);
    }
    else {
      uint64_t v28 = 0LL;
    }
    unsigned int v29 = atomic_load((unsigned int *)(v15 + 28));
    if ((v29 & 0x1C000) != 0) {
      uint64_t v30 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(v15);
    }
    else {
      uint64_t v30 = 0LL;
    }
    unsigned int v31 = atomic_load((unsigned int *)(v15 + 28));
    uint64_t v32 = *(const void **)v15;
    uint64_t v33 = *(void *)(v15 + 8);
    unint64_t v34 = intern_name_or_default(v28, *(const void **)v15, *(CSCppStringCache **)(a1 + 24));
    uint64_t v35 = intern_name_or_default(v30, *(const void **)v15, *(CSCppStringCache **)(a1 + 24));
    unsigned int v36 = atomic_load((unsigned int *)(v15 + 28));
    if ((v36 & 0x80000000) != 0)
    {
      int v37 = buf;
      if (!*(void *)(v15 + 48)) {
        int v37 = 0LL;
      }
    }

    else
    {
      int v37 = 0LL;
    }

    *(void *)a2 = v32;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v33;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 32) = v34;
    *(void *)(a2 + 40) = v35;
    *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(void *)(a2 + 96) = 0LL;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 73) = 0u;
    if (v37)
    {
      *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)v37;
      int v38 = -2143157248;
    }

    else
    {
      int v38 = 4326400;
    }

    *(_DWORD *)(a2 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v31 & 0xFF39FBFF | v38;
    uint64_t v39 = *(void *)(v15 + 64);
    uint64_t v40 = *(void *)(v15 + 72);
    if (v39 != v40)
    {
      do
      {
        uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 24LL);
        if (!v41) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v41 + 48LL))( v41,  v39,  a2 + 64,  *(void *)(a1 + 24));
        v39 += 104LL;
      }

      while (v39 != v40);
      uint64_t v32 = *(const void **)a2;
    }

    uint64_t v42 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), (unint64_t)v32);
    return slideSymbolsByOffset<Pointer64>((void *)a2, v42);
  }

  if ((_DWORD)result != 4)
  {
    if ((_DWORD)result == 5)
    {
      unint64_t v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      unsigned int v90 = 0LL;
      *(void *)&__int128 v81 = buf;
      *((void *)&v81 + 1) = v6;
      BOOL v82 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( buf,  (uint64_t)&v81);
      unint64_t v75 = *(void *)(**(void **)(a1 + 8) + 8LL) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      uint64_t v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      uint64_t v10 = v9;
      if (!v9)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
          LODWORD(v81) = 134217984;
          *(void *)((char *)&v81 + 4) = v56;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Failed to relocate address %#llx in flatbuffer SOD",  (uint8_t *)&v81,  0xCu);
        }

        unint64_t v57 = (FILE *)*MEMORY[0x1895F89D0];
        uint64_t v58 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
        fprintf(v57, "Failed to relocate address %#llx in flatbuffer SOD", v58);
        goto LABEL_63;
      }

      uint64_t v11 = (const void *)v8;
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (uint64_t v12 = (unsigned __int16 *)(v75 - *(int *)v75), *v12 < 9u)
        || (uint64_t v13 = v12[4]) == 0)
      {
        float v14 = 0LL;
      }

      else
      {
        float v14 = (char *)(v75 + v13 + *(unsigned int *)(v75 + v13) + 4);
      }

      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (uint64_t v43 = (unsigned __int16 *)(v75 - *(int *)v75), *v43 < 0xBu)
        || (uint64_t v44 = v43[5]) == 0)
      {
        uint64_t v45 = 0LL;
      }

      else
      {
        uint64_t v45 = (char *)(v75 + v44 + *(unsigned int *)(v75 + v44) + 4);
      }

      int v46 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v75);
      FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      uint64_t v48 = v47;
      uint64_t v49 = intern_name_or_default(v45, v11, *(CSCppStringCache **)(a1 + 24));
      uint64_t v50 = intern_name_or_default(v14, v11, *(CSCppStringCache **)(a1 + 24));
      *(void *)a2 = v11;
      *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = v48;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 32) = v49;
      *(void *)(a2 + 40) = v50;
      *(void *)(a2 + 96) = 0LL;
      *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 73) = 0u;
      *(_DWORD *)(a2 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v46 & 0xFF39FBFF | 0x420400;
      uint64_t v51 = *(uint64_t **)(a1 + 48);
      uint64_t v52 = *v51;
      uint64_t v53 = v51[1];
      v76[0] = MEMORY[0x1895F87A8];
      v76[1] = 1174405120LL;
      v76[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_273;
      v76[3] = &__block_descriptor_tmp_274;
      uint64_t v54 = v77;
      uint64_t v55 = (uint64_t)v90;
      if (v90)
      {
        if (v90 == buf)
        {
          uint64_t v78 = v77;
          (*(void (**)(uint8_t *, _BYTE *))(*(void *)buf + 24LL))(buf, v77);
          goto LABEL_58;
        }

        uint64_t v55 = (*(uint64_t (**)(void))(*(void *)v90 + 16LL))();
      }

      uint64_t v78 = (_BYTE *)v55;
LABEL_58:
      uint64_t v67 = *(void *)(a1 + 24);
      uint64_t v79 = a2;
      uint64_t v80 = v67;
      FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v52, v53, (uint64_t)v76);
      uint64_t v68 = slide_for_remote_address<Pointer64,unsigned long long>(*(void **)(a1 + 40), *(void *)a2);
      slideSymbolsByOffset<Pointer64>((void *)a2, v68);
      if (v78 == v77)
      {
        uint64_t v69 = 4LL;
      }

      else
      {
        if (!v78) {
          goto LABEL_63;
        }
        uint64_t v69 = 5LL;
        uint64_t v54 = v78;
      }

      (*(void (**)(void *))(*v54 + 8 * v69))(v54);
LABEL_63:
      double result = v90;
      if (v90 == buf)
      {
        uint64_t v70 = 4LL;
        double result = buf;
      }

      else
      {
        if (!v90) {
          goto LABEL_68;
        }
        uint64_t v70 = 5LL;
      }

      double result = (void *)(*(uint64_t (**)(void))(*result + 8 * v70))();
LABEL_68:
      if (v10) {
        return result;
      }
    }

void sub_18604C690( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  unint64_t v34 = *(void **)(v32 - 104);
  if (v34 == (void *)(v32 - 128))
  {
    uint64_t v35 = 4LL;
    unint64_t v34 = (void *)(v32 - 128);
  }

  else
  {
    if (!v34) {
      goto LABEL_6;
    }
    uint64_t v35 = 5LL;
  }

  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  if ((v6 - 1) < 2)
  {
    unint64_t v21 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
    uint64_t v13 = *(void ***)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    unint64_t v23 = *(void *)v21;
    unint64_t v24 = slide_for_remote_address<Pointer64,unsigned long long>((void *)(a1 + 56), *(void *)v21) + v23;
    uint64_t v25 = *(void *)(v21 + 8);
    int v26 = *(_DWORD *)(v21 + 24);
    int v17 = *(_DWORD *)(v21 + 28) & 0x7FFFFFFF;
    size_t v19 = (char *)v13[1];
    unsigned int v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(void *)size_t v19 = v24;
      *((void *)v19 + 1) = v25;
      *((void *)v19 + 2) = v22;
      *((_DWORD *)v19 + 6) = v26;
      goto LABEL_8;
    }

    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*v13) >> 3);
    unint64_t v35 = v34 + 1;
    if (v34 + 1 <= 0x666666666666666LL)
    {
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - (_BYTE *)*v13) >> 3);
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x333333333333333LL) {
        unint64_t v37 = 0x666666666666666LL;
      }
      else {
        unint64_t v37 = v35;
      }
      int v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)(v13 + 2),  v37);
      uint64_t v39 = &v38[40 * v34];
      uint64_t v41 = &v38[40 * v40];
      *(void *)uint64_t v39 = v24;
      *((void *)v39 + 1) = v25;
      *((void *)v39 + 2) = v22;
      *((_DWORD *)v39 + 6) = v26;
      *((_DWORD *)v39 + 7) = v17;
      *((_DWORD *)v39 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0;
      uint64_t v42 = v39 + 40;
      uint64_t v44 = (char *)*v13;
      uint64_t v43 = (char *)v13[1];
      if (v43 == *v13) {
        goto LABEL_60;
      }
      do
      {
        __int128 v45 = *(_OWORD *)(v43 - 40);
        __int128 v46 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v46;
        *(_OWORD *)(v39 - 40) = v45;
        v39 -= 40;
        v43 -= 40;
      }

      while (v43 != v44);
      goto LABEL_59;
    }

uint64_t slide_for_remote_address<Pointer64,unsigned long long>(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  uint64_t v4 = (void *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    int v6 = &v4[3 * (v3 >> 1)];
    unint64_t v8 = *v6;
    unint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2) {
      unint64_t v3 = v5;
    }
    else {
      uint64_t v4 = v7;
    }
  }

  while (v3);
  if (v4 != (void *)*a1 && (unint64_t v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9) {
    return *(v4 - 1);
  }
  else {
    return 0LL;
  }
}

void *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0LL;
  return std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>( v2,  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF92D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF92D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()( uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()( uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unint64_t v7 = *(char **)(a2 + 48);
  if (v7)
  {
    *((void *)&v26 + 1) = *(void *)(a2 + 56);
    *(void *)&__int128 v26 = CSCppStringCache::intern(this, v7);
  }

  else
  {
    __int128 v26 = 0uLL;
  }

  unsigned int v8 = atomic_load((unsigned int *)(a2 + 28));
  if ((v8 & 0x1C000) != 0) {
    unint64_t v9 = (char *)TRawSymbol<Pointer64>::_resolve_name(a2, 0LL, 0LL);
  }
  else {
    unint64_t v9 = 0LL;
  }
  unsigned int v10 = atomic_load((unsigned int *)(a2 + 28));
  if ((v10 & 0x1C000) != 0) {
    uint64_t v11 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a2);
  }
  else {
    uint64_t v11 = 0LL;
  }
  unsigned int v12 = atomic_load((unsigned int *)(a2 + 28));
  unsigned int v13 = v12 & 0xFF39FBFF;
  unsigned int v14 = v12 & 0xFF39FBFF | 0x420400;
  uint64_t v16 = *(const void **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  int v17 = intern_name_or_default(v9, *(const void **)a2, this);
  unsigned int v18 = intern_name_or_default(v11, *(const void **)a2, this);
  unsigned int v19 = atomic_load((unsigned int *)(a2 + 28));
  uint64_t v20 = *(void *)(a2 + 48);
  v28[0] = v16;
  v28[1] = v15;
  void v28[2] = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = v17;
  unsigned int v31 = v18;
  uint64_t v34 = 0LL;
  __int128 v32 = 0u;
  memset(v33, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    __int128 v32 = v26;
    unsigned int v14 = v13 | 0x80420400;
  }

  HIDWORD(v29) = v14;
  uint64_t v21 = *(void *)(a2 + 64);
  for (uint64_t i = *(void *)(a2 + 72); v21 != i; v21 += 104LL)
  {
    uint64_t v23 = *(void *)(*(void *)a1 + 24LL);
    if (!v23) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(void *)v23 + 48LL))( v23,  v21,  v33,  this);
  }

  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v25 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v28);
  }

  else
  {
    *(void *)(v24 + 96) = 0LL;
    *(_OWORD *)unint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v24, (uint64_t)v28);
    uint64_t v25 = v24 + 104;
  }

  a3[1] = v25;
  unint64_t v35 = (void **)v33;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_18604D04C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  *(void *)(v21 - 8_Block_object_dispose((const void *)(v1 - 64), 8) = &a21;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

void *std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( void *a1, __int128 *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v6 = off_189DF93B0;
  __int128 v7 = *a2;
  unsigned int v8 = &v6;
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( &v6,  a1);
  unint64_t v3 = v8;
  if (v8 == &v6)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = &v6;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*v3)[v4]();
  }

  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  uint64_t v6 = a2;
  uint64_t v4 = a1[7];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v3 + 64, v2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 32,  a2 + 32);
}

void *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  unint64_t v1 = (void *)(a1 + 32);
  __n128 result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>( void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = off_189DF9450;
  *(_OWORD *)(v4 + _Block_object_dispose((const void *)(v1 - 64), 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  uint64_t v9 = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( v8,  a1);
  unint64_t v5 = v9;
  if (v9 == v8)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v6 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_273( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  uint64_t v6 = a2;
  uint64_t v4 = a1[7];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, &v6, v3 + 64, v2);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE( uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100]( a1 + 32,  a2 + 32);
}

void *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE( uint64_t a1)
{
  unint64_t v1 = (void *)(a1 + 32);
  __n128 result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_189DF93B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF93B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()( uint64_t a1, __int128 **a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()( void *a1, __int128 *a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  uint64_t v9 = (_DWORD *)*((void *)v8 + 11);
  unint64_t v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (uint64_t v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    unsigned int v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0) {
      uint64_t v19 = *(void *)((char *)a2 + 28);
    }
    else {
      uint64_t v19 = 0LL;
    }
    *((void *)&v23 + 1) = v19;
    unsigned int v8 = (TMMapSymbolOwnerData *)a1[1];
  }

  else
  {
    unsigned int v12 = 0LL;
    *((void *)&v23 + 1) = 0LL;
  }

  __int128 v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  unint64_t v34 = 0LL;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34) & 1) != 0)
  {
    *(void *)&__int128 v23 = v12;
    int v13 = DWORD2(v35);
    unsigned int v14 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    if ((DWORD2(v35) & 0x1C000) != 0) {
      uint64_t v15 = (char *)(v10 + v36);
    }
    else {
      uint64_t v15 = 0LL;
    }
    if ((DWORD2(v35) & 0x1C000) != 0) {
      uint64_t v16 = (char *)(v10 + HIDWORD(v35));
    }
    else {
      uint64_t v16 = 0LL;
    }
    if (HIDWORD(v35)) {
      int v17 = v16;
    }
    else {
      int v17 = v15;
    }
    *(void *)__int128 buf = v34;
    uint64_t v26 = DWORD1(v35);
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = intern_name_or_default(v17, (const void *)v34, this);
    uint64_t v30 = intern_name_or_default(v15, (const void *)v34, this);
    uint64_t v33 = 0LL;
    __int128 v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      __int128 v31 = v23;
      int v18 = -2143288320;
    }

    else
    {
      int v18 = 4195328;
    }

    HIDWORD(v2_Block_object_dispose((const void *)(v1 - 64), 8) = v14 | v18;
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 0x40000000LL;
    void v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_276;
    uint64_t v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)buf);
    }

    else
    {
      *(void *)(v21 + 96) = 0LL;
      *(_OWORD *)unint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v21, (uint64_t)buf);
      uint64_t v22 = v21 + 104;
    }

    a3[1] = v22;
    unint64_t v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Could not remap archive address to real in debug maps inline enumeration",  buf,  2u);
    }

    fwrite( "Could not remap archive address to real in debug maps inline enumeration",  0x48uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
  }

void sub_18604D674(_Unwind_Exception *a1)
{
  *(void *)(v2 - 104) = v1 + 64;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v2 + 64, v4);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189DF9450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF9450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()( uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()( uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  uint64_t v53 = 0LL;
  unint64_t v54 = (int *)a2;
  unsigned int v52 = 0LL;
  unsigned int v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    uint64_t v9 = v8[6];
    if (v9)
    {
      unint64_t v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
        int v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      }
      else {
        int v13 = 0LL;
      }
      unsigned int v52 = CSCppStringCache::intern(this, v13 + 4);
      unsigned int v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      unsigned int v15 = *v14;
      if (v15 < 0xD)
      {
        uint64_t v16 = 0LL;
      }

      else
      {
        uint64_t v16 = (int *)v14[6];
        if (v14[6]) {
          uint64_t v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
        }
      }

      int v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
        int v19 = *(int *)((char *)v16 + v18);
      }
      else {
        int v19 = 0;
      }
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        uint64_t v20 = 0LL;
      }

      else
      {
        uint64_t v20 = (int *)v14[6];
        if (v20) {
          uint64_t v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
        }
      }

      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
        int v23 = *(int *)((char *)v20 + v22);
      }
      else {
        int v23 = 0;
      }
      HIDWORD(v53) = v23;
    }
  }

  unint64_t v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  unint64_t v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  uint64_t v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    uint64_t v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (uint64_t v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (uint64_t v30 = v29[4]) == 0)
    {
      __int128 v31 = 0LL;
    }

    else
    {
      __int128 v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }

    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (__int128 v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (uint64_t v33 = v32[5]) == 0)
    {
      unint64_t v34 = 0LL;
    }

    else
    {
      unint64_t v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }

    int v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    uint64_t v37 = v36;
    int v38 = intern_name_or_default(v34, v28, this);
    uint64_t v39 = intern_name_or_default(v31, v28, this);
    uint64_t v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      uint64_t v42 = 0LL;
    }

    else
    {
      BOOL v41 = v40[6] == 0;
      uint64_t v42 = &v52;
      if (v41) {
        uint64_t v42 = 0LL;
      }
    }

    *(void *)&__int128 buf = v28;
    *((void *)&buf + 1) = v37;
    uint64_t v57 = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v59 = v38;
    int v60 = v39;
    uint64_t v63 = 0LL;
    __int128 v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      __int128 v61 = *(_OWORD *)v42;
      int v46 = -2143288320;
    }

    else
    {
      int v46 = 4195328;
    }

    HIDWORD(v5_Block_object_dispose((const void *)(v1 - 64), 8) = v35 & 0xFF3BFBFF | v46;
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = **(void **)(a1 + 16) | 2LL;
    v51[0] = MEMORY[0x1895F87A8];
    v51[1] = 0x40000000LL;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_278;
    v51[4] = *(void *)a1;
    v51[5] = &buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    unint64_t v49 = a3[1];
    if (v49 >= a3[2])
    {
      uint64_t v50 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)&buf);
    }

    else
    {
      *(void *)(v49 + 96) = 0LL;
      *(_OWORD *)unint64_t v49 = 0u;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v49, (uint64_t)&buf);
      uint64_t v50 = v49 + 104;
    }

    a3[1] = v50;
    unint64_t v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v43;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Failed to relocate address %#llx in flatbuffer SOD",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v44 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }

void sub_18604DBCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  a20 = (void **)&a29;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke( void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, &v7, v2 + 64, v4);
}

void *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_18604DDA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL are_symbols_aliases<Pointer64>(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0LL;
  }
  uint64_t v5 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a1);
  uint64_t v6 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer64>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if (a1 >= 0x13B13B13B13B13BLL) {
    unint64_t v1 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1896146B8];
  while (1)
  {
    __n128 result = operator new(104 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( __n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (a2[-7].n128_u64[1] < a1->n128_u64[0]) {
        swap(a1, (__n128 *)((char *)a2 - 104));
      }
    }

    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a1->n128_u64,  a2->n128_u64);
    }

    else
    {
      uint64_t v12 = a4 >> 1;
      int v13 = (__n128 *)((char *)a1 + 104 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        unint64_t v18 = 0LL;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a1->n128_u64,  &a1->n128_u64[13 * (a4 >> 1)],  a3,  a4 >> 1,  a5);
        unint64_t v18 = a4 >> 1;
        unint64_t v15 = a4 - v12;
        uint64_t v16 = (void *)(a5 + 104 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( &a1->n128_u64[13 * (a4 >> 1)],  a2->n128_u64,  a3,  v15,  (uint64_t)v16);
        unint64_t v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a5,  v16,  v16,  (void *)(a5 + 104 * a4),  (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0LL);
      }

      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a1,  (char *)a1 + 104 * (a4 >> 1),  a3,  a4 >> 1,  a5,  a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( v13,  a2,  a3,  v14,  a5,  a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( (uint64_t)a1,  v13,  a2,  a3,  v12,  v14,  a5,  a6);
      }
    }
  }

void sub_18604E044(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    v16[9] = v2;
    v16[10] = v3;
    uint64_t v6 = a1 + 13;
    if (a1 + 13 != a2)
    {
      uint64_t v7 = 0LL;
      unsigned int v8 = a1;
      do
      {
        unint64_t v9 = *v8;
        unsigned int v8 = v6;
        if (*v6 < v9)
        {
          uint64_t v15 = 0LL;
          memset(v13, 0, 32);
          void v13[3] = 0u;
          memset(v14, 0, 25);
          TRawSymbol<Pointer64>::operator=((uint64_t)v13, (uint64_t)v6);
          uint64_t v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer64>::operator=((uint64_t)a1 + v10 + 104, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            unint64_t v11 = *(unint64_t *)((char *)a1 + v10 - 104);
            v10 -= 104LL;
            if (*(void *)&v13[0] >= v11)
            {
              uint64_t v12 = (uint64_t)a1 + v10 + 104;
              goto LABEL_10;
            }
          }

          uint64_t v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer64>::operator=(v12, (uint64_t)v13);
          v16[0] = (void **)v14;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v16);
        }

        uint64_t v6 = v8 + 13;
        v7 += 104LL;
      }

      while (v8 + 13 != a2);
    }
  }

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    unsigned int v8 = a1;
    if (a4 == 2)
    {
      v17[1] = (uint64_t)&v18;
      uint64_t v18 = 0LL;
      uint64_t v10 = a2 - 13;
      unint64_t v9 = *(a2 - 13);
      unint64_t v11 = *a1;
      *(void *)(a5 + 96) = 0LL;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      if (v9 >= v11) {
        uint64_t v12 = (uint64_t)a1;
      }
      else {
        uint64_t v12 = (uint64_t)(a2 - 13);
      }
      if (v9 >= v11) {
        unsigned int v8 = v10;
      }
      TRawSymbol<Pointer64>::operator=(a5, v12);
      uint64_t v13 = v18 + 1;
      *(_OWORD *)(a5 + 104) = 0u;
      uint64_t v14 = a5 + 104;
      uint64_t v18 = v13;
      *(void *)(v14 + 96) = 0LL;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
      v17[0] = 0LL;
      std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0LL);
    }

    else if (a4 == 1)
    {
      *(void *)(a5 + 96) = 0LL;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a1);
    }

    else if ((uint64_t)a4 > 8)
    {
      uint64_t v16 = 13 * (a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a1,  &a1[v16],  a3,  a4 >> 1,  a5,  a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( &v8[v16],  a2,  a3,  a4 - (a4 >> 1),  a5 + v16 * 8,  a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>( v8,  &v8[v16],  &v8[v16],  a2,  a5);
    }

    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( (uint64_t)a1,  a2,  a5);
    }
  }

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>( uint64_t result, void *a2, void *a3, void *a4, uint64_t a5)
{
  if ((void *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
      a3 += 13;
      a5 += 104LL;
    }
  }

  else
  {
    unint64_t v9 = (void *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)v9);
        v9 += 13;
      }

      else
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
        a3 += 13;
      }

      a5 += 104LL;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }

    if (v9 != a2)
    {
      uint64_t v10 = 0LL;
      do
      {
        __n128 result = TRawSymbol<Pointer64>::operator=(a5 + v10 * 8, (uint64_t)&v9[v10]);
        v10 += 13LL;
      }

      while (&v9[v10] != a2);
    }
  }

  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a1,  a2,  a3,  a4,  a5,  v8,  a7);
        return result;
      }

      if (!a5) {
        return result;
      }
      unint64_t v11 = 0LL;
      uint64_t v12 = -a5;
      while (a2->n128_u64[0] >= *(unint64_t *)((char *)v11->n128_u64 + a1))
      {
        unint64_t v11 = (__n128 *)((char *)v11 + 104);
        if (__CFADD__(v12++, 1LL)) {
          return result;
        }
      }

      uint64_t v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(void *)&double result = swap((__n128 *)((char *)v11 + a1), a2).n128_u64[0];
          return result;
        }

        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v24 = v14 >> 1;
        uint64_t v18 = (__n128 *)((char *)v11 + 104 * (v14 >> 1) + a1);
        int v17 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = 0x4EC4EC4EC4EC4EC5LL * (((char *)a3 - (char *)a2) >> 3);
          int v17 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            char v27 = &v17->n128_u64[13 * (v25 >> 1)];
            unint64_t v29 = *v27;
            uint64_t v28 = (__n128 *)(v27 + 13);
            v25 += ~(v25 >> 1);
            if (v29 < v18->n128_u64[0]) {
              int v17 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }

          while (v25);
        }

        uint64_t v16 = 0x4EC4EC4EC4EC4EC5LL * (((char *)v17 - (char *)a2) >> 3);
      }

      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        int v17 = (__n128 *)((char *)a2 + 104 * (v15 >> 1));
        uint64_t v18 = a2;
        if ((__n128 *)((char *)a2 - a1) != v11)
        {
          unint64_t v19 = 0x4EC4EC4EC4EC4EC5LL * (((char *)a2 - a1 - (char *)v11) >> 3);
          uint64_t v18 = (__n128 *)((char *)v11 + a1);
          do
          {
            unint64_t v20 = v19 >> 1;
            unint64_t v21 = &v18->n128_u64[13 * (v19 >> 1)];
            unint64_t v23 = *v21;
            uint64_t v22 = (__n128 *)(v21 + 13);
            v19 += ~(v19 >> 1);
            if (v17->n128_u64[0] < v23) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }

          while (v19);
        }

        uint64_t v24 = 0x4EC4EC4EC4EC4EC5LL * (((char *)v18 - a1 - (char *)v11) >> 3);
      }

      uint64_t v52 = (uint64_t)v11 + a1;
      if (v18 == a2)
      {
        unint64_t v34 = v17;
      }

      else if (v17 == a2)
      {
        unint64_t v34 = v18;
      }

      else
      {
        uint64_t v50 = a7;
        uint64_t v51 = a3;
        uint64_t v30 = a4;
        uint64_t v31 = a8;
        uint64_t v32 = v24;
        uint64_t v49 = v16;
        uint64_t v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>( v18,  a2,  v17);
        uint64_t v16 = v49;
        a7 = v50;
        uint64_t v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        unint64_t v34 = v33;
      }

      a5 = -v24 - v12;
      uint64_t v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        uint64_t v43 = v17;
        uint64_t v44 = a4;
        uint64_t v45 = v24;
        uint64_t v46 = v16;
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( v34,  v43,  a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        uint64_t v35 = v46;
        a5 = v45;
        a3 = v34;
        a1 = v52;
      }

      else
      {
        uint64_t v36 = (char *)v11 + a1;
        uint64_t v37 = v18;
        int v38 = a3;
        uint64_t v39 = a4;
        uint64_t v40 = a7;
        uint64_t v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( v36,  v37,  v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }

      uint64_t v8 = v35;
    }

    while (v35);
  }

  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if ((unint64_t *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0LL;
    *(void *)(a3 + 96) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a3, a1);
    ++v17[0];
    uint64_t v8 = (unint64_t *)(a1 + 104);
    if (v8 != a2)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = a3;
      uint64_t v11 = a3;
      do
      {
        unint64_t v12 = *v8;
        *(_OWORD *)(v11 + 104) = 0u;
        v11 += 104LL;
        unint64_t v13 = *(void *)v10;
        *(void *)(v10 + 200) = 0LL;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 16_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
        *(_OWORD *)(v10 + 177) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer64>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }

        else
        {
          TRawSymbol<Pointer64>::operator=(v11, v10);
          ++v17[0];
          uint64_t v14 = a3;
          if (v10 != a3)
          {
            uint64_t v15 = v9;
            while (1)
            {
              uint64_t v14 = a3 + v15;
              if (*v8 >= *(void *)(a3 + v15 - 104)) {
                break;
              }
              TRawSymbol<Pointer64>::operator=(v14, a3 + v15 - 104);
              v15 -= 104LL;
              if (!v15)
              {
                uint64_t v14 = a3;
                break;
              }
            }
          }

          TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
        }

        v8 += 13;
        v9 += 104LL;
        uint64_t v10 = v11;
      }

      while (v8 != a2);
    }

    v16[0] = 0LL;
    std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v16, 0LL);
  }

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0LL;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(void *)(v5 + 96) = 0LL;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
      a3 += 13;
      v5 += 104LL;
      ++v15;
    }
  }

  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      unint64_t v10 = *a3;
      unint64_t v11 = *v9;
      *(void *)(v5 + 96) = 0LL;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)v9);
        v9 += 13;
      }

      else
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
        a3 += 13;
      }

      ++v15;
      v5 += 104LL;
      if (v9 == a2) {
        goto LABEL_10;
      }
    }

    if (v9 != a2)
    {
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = v5 + v12 * 8;
        *(void *)(v13 + 96) = 0LL;
        *(_OWORD *)uint64_t v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v5 + v12 * 8, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 13LL;
      }

      while (&v9[v12] != a2);
    }
  }

  v14[0] = 0LL;
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0LL);
}

void std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0LL;
      uint64_t v5 = (void **)(v2 + 64);
      do
      {
        uint64_t v6 = v5;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 13;
      }

      while (v4 < *v3);
    }
  }

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  uint64_t v15 = 0LL;
  uint64_t v11 = a7;
  if (a5 <= a6)
  {
    if ((void *)a1 != a2)
    {
      uint64_t v11 = a7;
      uint64_t v13 = a1;
      do
      {
        *(void *)(v11 + 96) = 0LL;
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v13);
        ++v15;
        v13 += 104LL;
        v11 += 104LL;
      }

      while ((void *)v13 != a2);
    }

    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>( a7,  v11,  a2,  a3,  a1);
  }

  else
  {
    if (a2 != a3)
    {
      uint64_t v11 = a7;
      uint64_t v12 = (uint64_t)a2;
      do
      {
        *(void *)(v11 + 96) = 0LL;
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v12);
        ++v15;
        v12 += 104LL;
        v11 += 104LL;
      }

      while ((void *)v12 != a3);
    }

    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>( v11,  a7,  (uint64_t)a2,  a1,  (uint64_t)a3);
  }

  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0LL);
}

void sub_18604EB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>( uint64_t result, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v5 = a5;
    uint64_t v9 = (void *)result;
    uint64_t v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        double result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)v9);
        v9 += 13;
      }

      else
      {
        double result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)a3);
        a3 += 13;
      }

      v10 += 104LL;
      v5 += 104LL;
      if (v9 == (void *)a2) {
        return result;
      }
    }

    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>( (uint64_t)v9,  a2,  v5);
  }

  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a5 - 104;
    while (a3 != a4)
    {
      unint64_t v10 = *(void *)(v8 - 104);
      unint64_t v11 = *(void *)(a3 - 104);
      if (v10 >= v11) {
        uint64_t v12 = v8 - 104;
      }
      else {
        uint64_t v12 = a3 - 104;
      }
      if (v10 >= v11) {
        v8 -= 104LL;
      }
      else {
        a3 -= 104LL;
      }
      double result = TRawSymbol<Pointer64>::operator=(v9, v12);
      v9 -= 104LL;
      if (v8 == a2) {
        return result;
      }
    }

    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = v9 + v13;
      v13 -= 104LL;
      double result = TRawSymbol<Pointer64>::operator=(v14, v8 + v13);
    }

    while (v8 + v13 != a2);
  }

  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      TRawSymbol<Pointer64>::operator=(v6, v4);
      v4 += 104LL;
      v6 += 104LL;
      v3 += 104LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

__n128 *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>( __n128 *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = a2;
  swap(a1, a2);
  uint64_t v6 = (__n128 *)((char *)a1 + 104);
  for (uint64_t i = (__n128 *)((char *)v4 + 104); i != a3; uint64_t i = (__n128 *)((char *)i + 104))
  {
    if (v6 == v4) {
      uint64_t v4 = i;
    }
    swap(v6, i);
    uint64_t v6 = (__n128 *)((char *)v6 + 104);
  }

  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        uint64_t v8 = (__n128 *)((char *)v8 + 104);
        uint64_t v9 = (__n128 *)((char *)v9 + 104);
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          uint64_t v4 = v9;
        }
      }

      uint64_t v9 = v4;
    }

    while (v8 != v4);
  }

  return v6;
}

void *std::__hash_table<TRawSymbol<Pointer64> *,std::hash<TRawSymbol<Pointer64> *>,std::equal_to<TRawSymbol<Pointer64> *>,std::allocator<TRawSymbol<Pointer64> *>>::__emplace_unique_key_args<TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_18604F010(_Unwind_Exception *a1)
{
}

__int128 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__equal_to &>( __int128 *a1, __int128 *a2)
{
  double result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = (uint64_t)a1 - 40;
    do
    {
      uint64_t v5 = *(void *)(v4 + 40);
      uint64_t v6 = *(void *)(v4 + 48);
      v4 += 40LL;
    }

    while (v5 != *(void *)(v4 + 40) || v6 != *(void *)(v4 + 48));
    for (uint64_t i = (__int128 *)(v4 + 80); i != a2; uint64_t i = (__int128 *)((char *)i + 40))
    {
      if (*(void *)v4 != *(void *)i || *(void *)(v4 + 8) != *((void *)i + 1))
      {
        __int128 v10 = *i;
        __int128 v11 = i[1];
        *(_DWORD *)(v4 + 72) = *((_DWORD *)i + 8);
        *(_OWORD *)(v4 + 56) = v11;
        *(_OWORD *)(v4 + 40) = v10;
        v4 += 40LL;
      }
    }

    return (__int128 *)(v4 + 40);
  }

  return result;
}

void *std::__hash_table<TRawSourceInfo<Pointer64> *,std::hash<TRawSourceInfo<Pointer64> *>,std::equal_to<TRawSourceInfo<Pointer64> *>,std::allocator<TRawSourceInfo<Pointer64> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    __int128 v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_18604F2E4(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>( void *a1, uint64_t a2)
{
  unint64_t v4 = CSCppSymbolOwnerHashFunctor::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  __int128 v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      __int128 v11 = (void *)*v11;
    }

    while (v11);
  }

  return v11;
}

unint64_t CSCppSymbolOwnerHashFunctor::operator()(uint64_t a1, uint64_t a2)
{
  if (!UUID::is_null((UUID *)(a2 + 16))) {
    return **(void **)(a2 + 32) + (*(void *)(a2 + 24) ^ *(void *)(a2 + 16));
  }
  unint64_t v3 = *(void *)(a2 + 32);
  unint64_t v4 = *(void *)(a2 + 40);
  if (v3 >= v4)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    int v6 = 0;
    uint8x8_t v7 = *(uint64_t **)(a2 + 32);
    do
    {
      uint64_t v8 = *v7;
      v7 += 4;
      uint64_t v9 = v8 << v6;
      if (v6 <= 15) {
        ++v6;
      }
      else {
        int v6 = 0;
      }
      uint64_t v10 = v9 * v5;
      v5 += v9;
      if ((v6 & 1) != 0) {
        uint64_t v5 = v10;
      }
    }

    while ((unint64_t)v7 < v4);
  }

  return (v5 + ((uint64_t)(v4 - v3) >> 5)) ^ ((unint64_t)*(unsigned int *)(a2 + 104) << 32);
}

BOOL CSCppSymbolOwnerEqualsFunctor::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 108);
  if ((*(_DWORD *)(a2 + 108) & 0x80000000) != 0)
  {
    if ((v5 & 0x80000000) == 0) {
      return 0LL;
    }
    uint64_t v7 = *(void *)(a2 + 144);
    if (!v7) {
      return 0LL;
    }
    return v7 == *(void *)(a3 + 144);
  }

  else
  {
    if (v5 < 0) {
      return 0LL;
    }
    int v6 = (void *)(a2 + 16);
    if (UUID::is_null((UUID *)(a2 + 16)))
    {
      if (*(_DWORD *)(a2 + 104) != *(_DWORD *)(a3 + 104)
        || strcmp(*(const char **)(a2 + 120), *(const char **)(a3 + 120))
        || *(void *)(a2 + 112) != *(void *)(a3 + 112))
      {
        return 0LL;
      }
    }

    else if (*v6 != *(void *)(a3 + 16) || *(void *)(a2 + 24) != *(void *)(a3 + 24))
    {
      return 0LL;
    }

    uint64_t v10 = *(char **)(a2 + 32);
    __int128 v11 = *(char **)(a2 + 40);
    uint64_t v12 = *(_OWORD **)(a3 + 32);
    if (v11 - v10 != *(void *)(a3 + 40) - (void)v12) {
      return 0LL;
    }
    if (v10 != v11)
    {
      while (1)
      {
        __int128 v13 = *((_OWORD *)v10 + 1);
        v17[0] = *(_OWORD *)v10;
        v17[1] = v13;
        __int128 v14 = v12[1];
        v16[0] = *v12;
        v16[1] = v14;
        if (v17[0] != v16[0]
          && (!CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v17)
           || !CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v16)))
        {
          break;
        }

        v10 += 32;
        v12 += 2;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
    }

    return v12 == *(_OWORD **)(a3 + 40);
  }

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>( uint64_t a1, uint64_t a2, const CSCppSymbolOwner *a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }

    float v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      BOOL v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v11)
          {
          }

          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }

            else
            {
              v17 &= v12 - 1;
            }

            if (v17 != v4) {
              break;
            }
          }

          BOOL v16 = (void *)*v16;
        }

        while (v16);
      }
    }
  }

  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>( a1,  v11,  a3,  a4,  (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1LL;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }

  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }

      else
      {
        v25 &= v12 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }

  BOOL v16 = (void *)v27[0];
  v27[0] = 0LL;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]( v27,  0LL);
  return v16;
}

void sub_18604F854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0xE8uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 64), 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *unint64_t v10 = 0LL;
  v10[1] = a2;
  double result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v10 + 2), a3);
  _BYTE v10[28] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_18604F8DC(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>( uint64_t a1, uint64_t a2, uint64_t a3, const CSCppSymbolOwner **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      float v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
          }

          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }

            else
            {
              v16 &= v11 - 1;
            }

            if (v16 != v4) {
              break;
            }
          }

          float v15 = (void *)*v15;
        }

        while (v15);
      }
    }
  }

  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>( a1,  v10,  a4,  (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  float v15 = (void *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]( v26,  0LL);
  return v15;
}

void sub_18604FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xE8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 64), 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  double result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v8 + 2), *a3);
  v8[28] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_18604FBF0(_Unwind_Exception *a1)
{
}

void CSCppDsymData::CSCppDsymData(CSCppDsymData *this, const CSCppDsymData *a2)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( (std::string *)this,  *(__int128 **)a2,  *((__int128 **)a2 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0LL;
  *((void *)this + 5) = 0LL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( (std::string *)this + 1,  *((__int128 **)a2 + 3),  *((__int128 **)a2 + 4),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  unint64_t v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v5 = *((_OWORD *)a2 + 3);
    *((void *)this + _Block_object_dispose((const void *)(v1 - 64), 8) = *((void *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }

  memcpy((char *)this + 72, (char *)a2 + 72, 0x400uLL);
}

void sub_18604FCC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( (uint64_t)&v6->__r_.__value_.__l.__cap_,  a2,  a3,  (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }

  return result;
}

void sub_18604FD54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 64), 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint8x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        v4->__r_.__value_.__l.__cap_ = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }

      int v6 = (__int128 *)((char *)v6 + 24);
      uint8x8_t v12 = ++v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_18604FE1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OUTLINED_FUNCTION_0()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

  ;
}

void OUTLINED_FUNCTION_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void *OUTLINED_FUNCTION_4(void *a1)
{
  return __cxa_begin_catch(a1);
}

__CFString *CSSymbolCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t i = (__CFString *)(a1 & 7 | (8 * (a2 & 3)));
  if (i)
  {
    int v6 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8LL));
    switch((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24LL))(v7))
    {
      case 1u:
        uint64_t v8 = TRawSymbol<Pointer32>::description(a2 & 0xFFFFFFFFFFFFFFFCLL);
        break;
      case 2u:
        uint64_t v8 = TRawSymbol<Pointer64>::description(a2 & 0xFFFFFFFFFFFFFFFCLL);
        break;
      case 4u:
        uint64_t v9 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v6);
        uint64_t v8 = CSCppMMapSymbol::description<TMMapSymbolOwnerData>((unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v9);
        break;
      case 5u:
        unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFFCLL;
        if (i == (__CFString *)10) {
          uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(&v16);
        }
        else {
          uint64_t v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(&v16);
        }
        break;
      default:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v16,  (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ",  40LL);
        uint64_t v12 = CSCppSymbolOwner::data(v6);
        (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
        Exception::Exception(v14, &v15);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v14);
    }

    char v10 = v8;
    for (uint64_t i = CFStringCreateMutable(0LL, 0LL); a3; --a3)
      CFStringAppendCString(i, "\t", 0x8000100u);
    CFStringAppendFormat(i, 0LL, @"<CSSymbol: %p> %s", a2 & 0xFFFFFFFFFFFFFFFCLL, v10);
    free(v10);
  }

  return i;
}

void sub_186050054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *TRawSymbol<Pointer32>::description(uint64_t a1)
{
  int v2 = atomic_load((unsigned int *)(a1 + 20));
  unint64_t v3 = (const char *)TRawSymbol<Pointer32>::_resolve_name(a1, 0LL, 0LL);
  return TRawSymbol<Pointer32>::description((int *)a1, v2, v3);
}

char *TRawSymbol<Pointer32>::description(int *a1, int a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unint64_t v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2) {
    __dst[v5 - 2] = 0;
  }
  int v6 = *a1;
  int v7 = a1[1] + *a1;
  uint64_t v9 = 0LL;
  asprintf(&v9, "[0x%08x -> 0x%08x) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *TRawSymbol<Pointer64>::description(uint64_t a1)
{
  int v2 = atomic_load((unsigned int *)(a1 + 28));
  unint64_t v3 = (const char *)TRawSymbol<Pointer64>::_resolve_name(a1, 0LL, 0LL);
  return TRawSymbol<Pointer64>::description((uint64_t *)a1, v2, v3);
}

char *TRawSymbol<Pointer64>::description(uint64_t *a1, int a2, const char *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unint64_t v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2) {
    __dst[v5 - 2] = 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] + *a1;
  uint64_t v9 = 0LL;
  asprintf(&v9, "[0x%016llx -> 0x%016llx) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *CSCppMMapSymbol::description<TMMapSymbolOwnerData>(unsigned int *a1, TMMapSymbolOwnerData *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  unint64_t v4 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a1[2]);
  if (v4 >= 2) {
    __dst[v4 - 2] = 0;
  }
  unint64_t v5 = (_DWORD *)*((void *)a2 + 11);
  unint64_t v6 = (unint64_t)v5
     + 32 * v5[2]
     + 24 * v5[3]
     + (24 * v5[4])
     + (unint64_t)(4 * v5[4])
     + (36 * v5[5])
     + (20 * v5[6])
     + v5[22]
     + v5[20]
     + a1[3]
     + 96;
  int v7 = (*(uint64_t (**)(TMMapSymbolOwnerData *, unint64_t))(*(void *)a2 + 72LL))(a2, v6);
  uint64_t v8 = "<Invalid symbol name>";
  if (v7) {
    uint64_t v8 = (const char *)v6;
  }
  asprintf(&v11, "[0x%016llx -> 0x%016llx) %s [%s]", v10, v10 + a1[1], v8, __dst);
  return v11;
}

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(void *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(a1);
  unint64_t v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2) {
    __dst[v3 - 2] = 0;
  }
  unint64_t v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  unsigned int v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  unsigned int v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    unsigned int v6 = v4[4];
    if (v4[4]) {
      goto LABEL_8;
    }
LABEL_9:
    int v7 = 0LL;
    goto LABEL_10;
  }

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(void *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(a1);
  unint64_t v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2) {
    __dst[v3 - 2] = 0;
  }
  unint64_t v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  unsigned int v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  unsigned int v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    unsigned int v6 = v4[4];
    if (v4[4]) {
      goto LABEL_8;
    }
LABEL_9:
    int v7 = 0LL;
    goto LABEL_10;
  }

uint64_t CSSetDebugLoggingLevel(uint64_t result)
{
  CSDebugLoggingLevel = result;
  return result;
}

uint64_t CSGetDebugLoggingLevel()
{
  return CSDebugLoggingLevel;
}

void CSSymbolicatorPrintTimeline(char a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v19);
    unint64_t v3 = v19;
    for (uint64_t i = v20; v3 != i; v3 += 2)
    {
      uint64_t v4 = *v3;
      unsigned int v5 = (std::__shared_weak_count *)v3[1];
      uint64_t v17 = *v3;
      float v18 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }

      uint64_t v8 = printf("SYMBOL OWNER: %s\n", *(const char **)(v4 + 136));
      MEMORY[0x1895F8858](v8);
      CFUUIDBytesToString((const CFUUIDBytes *)(v4 + 16), v13, 0x28uLL);
      printf("\tUUID: %s\n", v13);
      printf("\tPath: %s\n", *(const char **)(v4 + 120));
      _printTimestamp("Load Timestamp", *(void *)(v4 + 88));
      _printTimestamp("Unload Timestamp", *(void *)(v4 + 96));
      puts("\tSegments:");
      uint64_t v14 = 0LL;
      __int128 v15 = 0LL;
      uint64_t v16 = 0LL;
      std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>( &v14,  *(const void **)(v4 + 32),  *(void *)(v4 + 40),  (uint64_t)(*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 5);
      uint64_t v10 = v14;
      uint64_t v9 = v15;
      if (v14 != v15)
      {
        do
        {
          printf("\t\t%s 0x%llx - 0x%llx\n", (const char *)v10[2], *v10, (char *)*v10 + (void)v10[1]);
          v10 += 4;
        }

        while (v10 != v9);
        uint64_t v10 = v14;
      }

      if (v10)
      {
        __int128 v15 = v10;
        operator delete(v10);
      }

      if (v5)
      {
        uint64_t v11 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }

    uint64_t v14 = (void **)&v19;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }

void sub_186050828(_Unwind_Exception *exception_object)
{
}

uint64_t _printTimestamp(const char *a1, int64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    if (!a2 || a2 == 0x7FFFFFFFFFFFFFFFLL) {
      return printf("\t%s: %s (%llu)\n");
    }
    return printf("\t%s: %llu\n");
  }

  return printf("\t%s: %s (%llu)\n");
}

uint64_t CSSymbolicatorCreateWithTaskPidFlagsAndNotification(unsigned int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (CSCppMachTask *)operator new(0x1888uLL);
  CSCppMachTask::CSCppMachTask(v8, a1, a2, a3 & 1);
  uint64_t v11 = v8;
  uint64_t v9 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v11, a3, a4);
  if (v11) {
    (*(void (**)(CSCppMachTask *))(*(void *)v11 + 8LL))(v11);
  }
  return v9;
}

void sub_186050980( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x186050960LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification( CSCppMachTask **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  CSCppMachTask::symbol_owners(*a1, a2, &v16);
  unsigned int v6 = v16;
  uint64_t v8 = *v16;
  uint64_t v7 = v16[1];
  if (v7 != *v16)
  {
    uint64_t v9 = *a1;
    *a1 = 0LL;
    __int128 v15 = v9;
    a3 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v6, (uint64_t *)&v15, a2, a3);
    uint64_t v10 = (uint64_t)v15;
    __int128 v15 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  uint64_t v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v7 == v8) {
    return 0LL;
  }
  return a3;
}

#error "186050BC4: call analysis failed (funcsize=52)"
uint64_t CSSymbolicatorCreateWithTaskFlagsAndNotification(unsigned int a1, uint64_t a2, uint64_t a3)
{
  CSCppMachTask *v6;
  uint64_t v7;
  CSCppMachTask *v9;
  unsigned int v6 = (CSCppMachTask *)operator new(0x1888uLL);
  CSCppMachTask::CSCppMachTask(v6, a1, a2 & 1);
  uint64_t v9 = v6;
  uint64_t v7 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v9, a2, a3);
  if (v9) {
    (*(void (**)(CSCppMachTask *))(*(void *)v9 + 8LL))(v9);
  }
  return v7;
}

void sub_186050C60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x186050C44LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithPidFlagsAndNotification(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (CSCppMachTask *)operator new(0x1888uLL);
  CSCppMachTask::CSCppMachTask(v6, a1, a2 & 1);
  uint64_t v9 = v6;
  uint64_t v7 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v9, a2, a3);
  if (v9) {
    (*(void (**)(CSCppMachTask *))(*(void *)v9 + 8LL))(v9);
  }
  return v7;
}

void sub_186050D44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x186050D28LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorSubscribeToTaskMainNotification(uint64_t result, uint64_t a2)
{
  if (result & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 120LL))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  }
  return result;
}

CFDataRef CSSymbolicatorCreateWithSignatureAndNotification(const __CFData *a1, uint64_t a2)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, -2147475454, 0, a2, 0LL);
}

CFDataRef CSSymbolicatorCreateWithSignatureFlagsAndNotification( const __CFData *a1, int a2, unsigned int a3, uint64_t a4)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, a2, a3, a4, 0LL);
}

uint64_t CSSymbolicatorCreateWithSignature(uint64_t a1)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 2147491842LL, 0LL, 0LL, 0LL);
}

CFDataRef CSSymbolicatorCreateWithSignatureAndAdditionalSymbolOwners( const __CFData *a1, uint64_t a2, uint64_t a3)
{
  return _CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>( a1,  -1,  0,  a2,  a3,  0LL);
}

__CFData *CSSymbolicatorCreateSignature(char a1, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0) {
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, 0LL, 0LL);
  }
  else {
    return _CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>(a1, a2, a3, 0, 0LL);
  }
}

__CFData *CSSymbolicatorCreateSignatureWithProcessTimeRange( char a1, uint64_t a2, char a3, unint64_t a4, unint64_t a5)
{
  if ((a3 & 8) != 0) {
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, a4, a5);
  }
  else {
    return 0LL;
  }
}

__CFData *CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlock(uint64_t a1, uint64_t a2)
{
  return _CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>( a1,  0LL,  0LL,  a2);
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification( const __CFURL *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v12 = 0LL;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024LL))
  {
    unint64_t v11 = -1LL;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    _OWORD v9[2] = __CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification_block_invoke;
    void v9[3] = &unk_189DF94F8;
    int v10 = a2;
    v9[5] = a4;
    void v9[6] = &v12;
    v9[4] = a3;
    iterate_symbol_owners_from_path((char *)buffer, (a2 & 0x20000000) == 0, 0, &v11, 0, (uint64_t)v9);
  }

  uint64_t v7 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v7;
}

void __CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification_block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3 = (CSCppFakeTask *)operator new(0x60uLL);
  CSCppFakeTask::CSCppFakeTask(v3, -1, 0);
  uint64_t v9 = v3;
  uint64_t v4 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask( v10,  (uint64_t *)&v9,  *(unsigned int *)(a1 + 56),  *(void *)(a1 + 32));
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)v9;
  uint64_t v9 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(v8 + 16))(v8, v4, v6);
  }
  CSRelease(v4, v6);
  unint64_t v11 = (void **)v10;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_186051080( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification( const __CFURL *a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024LL)) {
    return CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification((char *)buffer, a2, a3, a4);
  }
  else {
    return 0LL;
  }
}

unsigned int *CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(char a1, uint64_t a2, int a3)
{
  SharedCacheUUID = CSSymbolicatorGetSharedCacheUUID(a1, a2);
  if (SharedCacheUUID)
  {
    uint64_t v7 = (unsigned int *)CSSymbolicatorCreateWithSharedCacheUUID((uint64_t)SharedCacheUUID, a3);
    uint64_t v9 = v8;
    if (!CSIsNull((char)v7, v8))
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2000000000LL;
      char v18 = 0;
      v14[0] = 0LL;
      v14[1] = v14;
      uint64_t v14[2] = 0x2000000000LL;
      v14[3] = 0LL;
      uint64_t v10 = MEMORY[0x1895F87A8];
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 0x40000000LL;
      _OWORD v13[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke;
      void v13[3] = &unk_189DF9548;
      void v13[6] = v7;
      v13[7] = v9;
      _OWORD v13[4] = &v15;
      void v13[5] = v14;
      CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000000LL, (uint64_t)v13);
      if (*((_BYTE *)v16 + 24))
      {
        v12[0] = v10;
        v12[1] = 0x40000000LL;
        v12[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_2;
        v12[3] = &unk_189DF95C0;
        v12[5] = v7;
        v12[6] = v9;
        void v12[4] = v14;
        if ((CSSymbolicatorApplyMutableContextBlock((char)v7, v9, (uint64_t)v12) & 1) != 0)
        {
LABEL_9:
          _Block_object_dispose(v14, 8);
          _Block_object_dispose(&v15, 8);
          return v7;
        }

        CSRelease(v7, v9);
      }

      else
      {
        CSRelease(v7, v9);
      }

      uint64_t v7 = 0LL;
      goto LABEL_9;
    }
  }

  return 0LL;
}

void sub_1860512D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t CSSymbolicatorCreateWithSharedCacheUUID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  shared_cache_search_directories(&v22);
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3802000000LL;
  char v18 = __Block_byref_object_copy__8;
  BOOL v19 = __Block_byref_object_dispose__8;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v4 = v23;
  if (v22 == v23)
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v5 = (char *)v22 + 16;
    uint64_t v6 = MEMORY[0x1895F87A8];
    do
    {
      uint64_t v7 = (char *)*((void *)v5 - 2);
      uint64_t v8 = (CSCppDyldSplitSharedCacheMemory *)operator new(0x68uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v8, __p, a1);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      v13[0] = v6;
      v13[1] = 0x40000000LL;
      _OWORD v13[2] = __CSSymbolicatorCreateWithSharedCacheUUID_block_invoke;
      void v13[3] = &unk_189DF95E8;
      _OWORD v13[4] = &v15;
      int v14 = a2;
      process_all_shared_cache_libraries(v8, -1LL, a2, (uint64_t)v13);
      BOOL v9 = CSIsNull(v16[5], v16[6]);
      (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(void *)v8 + 8LL))(v8);
      BOOL v10 = v5 != v4 && v9;
      v5 += 16;
    }

    while (v10);
    uint64_t v11 = v16[5];
  }

  _Block_object_dispose(&v15, 8);
  if (v22)
  {
    size_t v23 = (char *)v22;
    operator delete(v22);
  }

  return v11;
}

void sub_18605148C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  operator delete(v30);
  _Block_object_dispose(&a15, 8);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke( void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) && CSSymbolOwnerIsDyldSharedCache(a2, a3))
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = &v12;
    uint64_t v14 = 0x3802000000LL;
    uint64_t v15 = __Block_byref_object_copy__8;
    uint64_t v16 = __Block_byref_object_dispose__8;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(a2, a3);
    uint64_t v7 = a1[6];
    uint64_t v8 = a1[7];
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 0x40000000LL;
    v11[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_8;
    v11[3] = &unk_189DF9520;
    v11[5] = a2;
    v11[6] = a3;
    v11[4] = &v12;
    _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>( v7,  v8,  (uint64_t)CFUUIDBytes,  0x8000000000000000LL,  (uint64_t)v11);
    if (!CSIsNull(v13[5], v13[6]))
    {
      uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress(a2, a3);
      uint64_t v10 = CSSymbolOwnerGetBaseAddress(v13[5], v13[6]);
      *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = BaseAddress - v10;
    }

    _Block_object_dispose(&v12, 8);
  }

void sub_186051620( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>( a2 & 0xFFFFFFFFFFFFFFFCLL,  a4,  a3,  &v11);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  if (v11 == v12)
  {
    uint64_t v8 = v11;
  }

  else
  {
    do
    {
      if (a5) {
        (*(void (**)(uint64_t, uint64_t, void))(a5 + 16))(a5, 3LL, *v6);
      }
      ++v6;
    }

    while (v6 != v7);
    uint64_t v6 = v11;
    uint64_t v8 = v12;
  }

  uint64_t v9 = v8 - v6;
  if (v6)
  {
    uint64_t v12 = v6;
    operator delete(v6);
  }

  return v9;
}

void sub_1860516FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_8( void *a1, uint64_t a2, uint64_t a3)
{
  Name = (const char *)CSSymbolOwnerGetName(a1[5], a1[6]);
  uint64_t result = CSSymbolOwnerGetName(a2, a3);
  if (Name) {
    BOOL v8 = result == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t result = strcmp(Name, (const char *)result);
    if (!(_DWORD)result)
    {
      uint64_t v9 = *(void *)(a1[4] + 8LL);
      *(void *)(v9 + 40) = a2;
      *(void *)(v9 + 4_Block_object_dispose(va, 8) = a3;
    }
  }

  return result;
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_2( void *a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_3;
  v5[3] = &unk_189DF9598;
  uint64_t v3 = a1[5];
  uint64_t v2 = a1[6];
  void v5[4] = a1[4];
  v5[5] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v3, v2, 0x8000000000000000LL, (uint64_t)v5);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_3( uint64_t a1, char a2, uint64_t a3)
{
  char MutableInContext = CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 40));
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 0x40000000LL;
  v7[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_4;
  void v7[3] = &unk_189DF9570;
  void v7[4] = *(void *)(a1 + 32);
  return CSSymbolOwnerEditRelocations(MutableInContext, v5, (uint64_t)v7);
}

uint64_t __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_4( uint64_t result, void *a2)
{
  *a2 += *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL);
  return result;
}

uint64_t __CSSymbolicatorCreateWithSharedCacheUUID_block_invoke( uint64_t a1, uint64_t a2, const UUID *a3, uint64_t **a4)
{
  uint64_t result = _createSymbolicatorFromSharedCacheSymbolOwners(*(unsigned int *)(a1 + 40), 0LL, a2, a3, a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  *(void *)(v6 + 40) = result;
  *(void *)(v6 + 4_Block_object_dispose(va, 8) = v7;
  return result;
}

uint64_t _createSymbolicatorFromSharedCacheSymbolOwners( uint64_t a1, uint64_t a2, uint64_t a3, const UUID *a4, uint64_t **a5)
{
  int v45 = 1065353216;
  memset(v43, 0, sizeof(v43));
  uint64_t v5 = *a5;
  uint64_t v6 = a5[1];
  if (v6 == *a5)
  {
    uint64_t v36 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v10 = *v5;
      uint64_t v11 = v5[1];
      *(void *)&__int128 v42 = *v5;
      *((void *)&v42 + 1) = v11;
      if (v11)
      {
        uint64_t v12 = (unint64_t *)(v11 + 8);
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }

      uint64_t v14 = (_OWORD *)(v10 + 16);
      uint64_t v15 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__equal_range_multi<UUID>( v44,  (void *)(v10 + 16));
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      BOOL v19 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      __int128 v41 = v42;
      if (*((void *)&v42 + 1))
      {
        uint64_t v20 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
        do
          unint64_t v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }

      if (v15 != v16)
      {
        while (1)
        {
          size_t v22 = (const CSCppSymbolOwner *)v17[4];
          size_t v23 = (std::__shared_weak_count *)v17[5];
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }

          BOOL v26 = check_if_segments_match((const CSCppSymbolOwner *)v41, v22);
          if (v23)
          {
            char v27 = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }

          if (v26) {
            break;
          }
          uint64_t v17 = (void *)*v17;
          if (v17 == v18)
          {
            uint64_t v17 = v18;
            break;
          }
        }

        BOOL v19 = (std::__shared_weak_count *)*((void *)&v41 + 1);
      }

      if (v19)
      {
        unint64_t v29 = (unint64_t *)&v19->__shared_owners_;
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      if (v17 == v18)
      {
        std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>( v44,  v14,  &v42);
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v43, &v42);
      }

      uint64_t v31 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      if (*((void *)&v42 + 1))
      {
        uint64_t v32 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
        do
          unint64_t v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      v5 += 2;
    }

    while (v5 != v6);
    unint64_t v34 = (UUID *)operator new(0x60uLL);
    uint64_t v35 = UUID::null_uuid(v34);
    CSCppFakeTask::CSCppFakeTask((CSCppFakeTask *)v34, -1, 0, a4, a3, (const UUID *)v35, 0LL);
    uint64_t v40 = v34;
    uint64_t v36 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v43, (uint64_t *)&v40, a1, a2);
    uint64_t v37 = (uint64_t)v40;
    uint64_t v40 = 0LL;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    }
  }

  *(void *)&__int128 v42 = v43;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)v44);
  return v36;
}

void sub_186051B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void **);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8LL))(a4);
  }
  va_copy((va_list)v7, va1);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification()
{
  uint64_t v2 = 0LL;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2000000000LL;
  uint64_t v5 = 0LL;
  iterate_symbol_owners_from_disk_dsc(0LL);
  uint64_t v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

unsigned int *__CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification_block_invoke( uint64_t a1, uint64_t a2, const UUID *a3, uint64_t **a4)
{
  SymbolicatorFromSharedCacheSymbolOwners = (unsigned int *)_createSymbolicatorFromSharedCacheSymbolOwners( *(unsigned int *)(a1 + 56),  *(void *)(a1 + 32),  a2,  a3,  a4);
  uint64_t v7 = v6;
  uint64_t result = (unsigned int *)CSIsNull((char)SymbolicatorFromSharedCacheSymbolOwners, v6);
  if ((result & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(v9 + 16))( v9,  SymbolicatorFromSharedCacheSymbolOwners,  v7);
    }
    uint64_t result = CSRelease(SymbolicatorFromSharedCacheSymbolOwners, v7);
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  }

  return result;
}

uint64_t CSSymbolicatorForEachAotImage()
{
  return 0LL;
}

uint64_t CSSymbolicatorGetAotSharedCacheAddress()
{
  return 0LL;
}

uint64_t CSSymbolicatorGetAotSharedCacheUUID()
{
  return 0LL;
}

uint64_t CSSymbolicatorCreateWithMachKernelFlagsAndNotification(unsigned int a1)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(0LL, 0LL, a1);
}

uint64_t _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification( char **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v91 = *MEMORY[0x1895F89C0];
  memset(v57, 0, sizeof(v57));
  int v58 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = 0LL;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = 0LL;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = 0LL;
  if (__p.d_name[2] < 0)
  {
    operator delete((void *)__p.d_ino);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }

  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }

  *(void *)__str = 0LL;
  *(void *)&__int128 buf = 8LL;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      BOOL v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "Unable to determine kernel slide.";
LABEL_76:
      _os_log_impl(&dword_185FC0000, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&__p, 2u);
      goto LABEL_77;
    }

    goto LABEL_77;
  }

  uint64_t v14 = *(void *)__str;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = v14;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  values = 0LL;
  *(void *)&__int128 v62 = 8LL;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      BOOL v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "Unable to determine a special slide 1.";
      goto LABEL_76;
    }

    goto LABEL_77;
  }

  BOOL v26 = values;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = v26;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
  *(void *)&__int128 v65 = 0LL;
  *(void *)&__int128 v59 = 8LL;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      BOOL v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "Unable to determine special slide 2.";
      goto LABEL_76;
    }

    goto LABEL_77;
  }

  uint64_t v47 = v65;
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( (uint64_t)v57,  (unsigned __int8 *)&__p,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v75)
  + 5) = v47;
  if (__p.d_name[2] < 0) {
    operator delete((void *)__p.d_ino);
  }
LABEL_9:
  Current = (UUID *)CSArchitectureGetCurrent();
  if (!Current)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      BOOL v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "Unable to determine architecture of the kernel";
      goto LABEL_76;
    }

LABEL_85:
        int v29 = *(unsigned __int8 *)(*((void *)&v62 + 1) + 24LL);
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
        _Block_object_dispose(&v62, 8);
        if (v29) {
          uint64_t v7 = __str;
        }
        else {
          uint64_t v7 = "/mach_kernel";
        }
        goto LABEL_88;
      }
    }

    else
    {
      int v19 = 0;
      while (1)
      {
        uint64_t v20 = (const char *)v17;
        unint64_t v21 = opendir(v20);
        if (v21)
        {
          if (!*(_BYTE *)(*((void *)&v62 + 1) + 24LL))
          {
            while (1)
            {
              int v19 = readdir_r(v21, &__p, &v61);
              if (v19 || !v61) {
                break;
              }
              if (v61->d_type == 8)
              {
                if (!strcmp(v20, "/")) {
                  snprintf(__str, 0x400uLL, "/%s");
                }
                else {
                  snprintf(__str, 0x400uLL, "%s/%s");
                }
                if ((CSFileIsSuitableForCS(__str) & 1) != 0)
                {
                  values = (void *)MEMORY[0x1895F87A8];
                  uint64_t v81 = 0x40000000LL;
                  BOOL v82 = ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke;
                  unint64_t v83 = (const __CFString *)&unk_189DF9678;
                  uint64_t v84 = (const __CFString *)&v62;
                  uint64_t v85 = v73;
                  iterate_symbol_owners_from_path(__str, 0, 0, (unint64_t *)&v56, 1, (uint64_t)&values);
                }
              }

              if (*(_BYTE *)(*((void *)&v62 + 1) + 24LL))
              {
                int v19 = 0;
                break;
              }
            }
          }

          closedir(v21);
          if (*(_BYTE *)(*((void *)&v62 + 1) + 24LL)) {
            break;
          }
        }

        v17 += 24LL;
        if (v17 == v18)
        {
          if (*(_BYTE *)(*((void *)&v62 + 1) + 24LL)) {
            break;
          }
          if (!v19)
          {
            uint64_t v49 = *((void *)&v59 + 1);
            uint64_t v48 = v59;
            memset(&v75, 0, sizeof(v75));
            if ((void)v59 != *((void *)&v59 + 1))
            {
              do
              {
                int v50 = *(char *)(v48 + 23);
                if (v50 >= 0) {
                  uint64_t v51 = (const std::string::value_type *)v48;
                }
                else {
                  uint64_t v51 = *(const std::string::value_type **)v48;
                }
                if (v50 >= 0) {
                  std::string::size_type v52 = *(unsigned __int8 *)(v48 + 23);
                }
                else {
                  std::string::size_type v52 = *(void *)(v48 + 8);
                }
                std::string::append(&v75, v51, v52);
                std::string::append(&v75, ", ", 2uLL);
                v48 += 24LL;
              }

              while (v48 != v49);
            }

            goto LABEL_79;
          }

          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_85;
          }
          size_t v22 = strerror(v19);
          LODWORD(v75.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          size_t v23 = (os_log_s *)MEMORY[0x1895F8DA0];
          unint64_t v24 = "Error reading kernels directory: %s\n";
          os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_70;
        }
      }
    }

    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LODWORD(v75.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)__str;
      size_t v23 = (os_log_s *)MEMORY[0x1895F8DA0];
      unint64_t v24 = "Found matching kernel in %s\n";
      os_log_type_t v25 = OS_LOG_TYPE_INFO;
LABEL_70:
      _os_log_impl(&dword_185FC0000, v23, v25, v24, (uint8_t *)&v75, 0xCu);
    }

    goto LABEL_85;
  }

  _Block_object_dispose(&v62, 8);
  uint64_t v7 = "/mach_kernel";
LABEL_88:
  if (!UUID::is_null((UUID *)v73))
  {
    v70[0] = MEMORY[0x1895F87A8];
    v70[1] = 0x40000000LL;
    v70[2] = ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke;
    v70[3] = &__block_descriptor_tmp_40;
    __int128 v71 = *(_OWORD *)v73;
    iterate_symbol_owners_from_path(v7, 0, 0, (unint64_t *)&v56, 1, (uint64_t)v70);
  }

  __int128 v62 = 0uLL;
  uint64_t v63 = 0LL;
  pthread_mutex_lock(&kext_lock);
  std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)v55, (uint64_t)v57);
  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v87 = 0x4002000000LL;
  v88[0] = __Block_byref_object_copy__51;
  v88[1] = __Block_byref_object_dispose__52;
  __int128 v90 = 0uLL;
  uint64_t v89 = 0LL;
  values = @"OSBundleLoadAddress";
  uint64_t v81 = (uint64_t)@"OSBundleMachOHeaders";
  BOOL v82 = (uint64_t (*)(uint64_t, uint64_t))@"OSBundleExecutablePath";
  unint64_t v83 = @"OSBundlePath";
  unint64_t v30 = (uint8_t *)*MEMORY[0x189604E00];
  uint64_t v84 = @"OSBundleUUID";
  uint64_t v85 = v30;
  CFArrayRef v31 = CFArrayCreate(0LL, (const void **)&values, 6LL, MEMORY[0x189605228]);
  uint64_t v32 = (const __CFDictionary *)OSKextCopyLoadedKextInfo();
  v75.__r_.__value_.__r.__words[0] = 0LL;
  v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v75;
  v75.__r_.__value_.__l.__cap_ = 0x5002000000LL;
  __int128 v76 = __Block_byref_object_copy__63;
  unint64_t v77 = __Block_byref_object_dispose__64;
  memset(v78, 0, sizeof(v78));
  int v79 = 1065353216;
  __p.d_ino = MEMORY[0x1895F87A8];
  __p.d_seekoff = 1174405120LL;
  *(void *)&__p.d_reclen = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke;
  *(void *)&__p.d_name[3] = &unk_189DF96C8;
  std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)&__p.d_name[27], (uint64_t)v55);
  *(void *)&__p.d_name[67] = v7;
  *(void *)&__p.d_name[11] = &v75;
  *(void *)&__p.d_name[19] = &buf;
  if (v32)
  {
    CFDictionaryApplyFunction(v32, (CFDictionaryApplierFunction)CFDictionaryBlockApplierCallback, &__p);
    CFRelease(v32);
  }

  CFRelease(v31);
  unint64_t v66 = 0LL;
  __int128 v65 = 0uLL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)&v65,  *(void **)(*((void *)&buf + 1) + 40LL),  *(void **)(*((void *)&buf + 1) + 48LL),  (uint64_t)(*(void *)(*((void *)&buf + 1) + 48LL) - *(void *)(*((void *)&buf + 1) + 40LL)) >> 4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p.d_name[27]);
  _Block_object_dispose(&v75, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v78);
  _Block_object_dispose(&buf, 8);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)&v62);
  __int128 v62 = v65;
  uint64_t v63 = v66;
  unint64_t v66 = 0LL;
  __int128 v65 = 0uLL;
  __p.d_ino = (__uint64_t)&v65;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v55);
  pthread_mutex_unlock(&kext_lock);
  unint64_t v34 = (uint64_t *)*((void *)&v62 + 1);
  unint64_t v33 = (uint64_t *)v62;
  if ((void)v62 == *((void *)&v62 + 1)) {
    goto LABEL_134;
  }
  do
  {
    uint64_t v36 = *v33;
    uint64_t v35 = (std::__shared_weak_count *)v33[1];
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        unint64_t v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }

    unsigned int v39 = *(_DWORD *)(v36 + 108);
    if ((v39 & 0x200) != 0)
    {
      unsigned int v39 = v39 & 0xFEFFEDFF | 0x1000;
      *(_DWORD *)(v36 + 10_Block_object_dispose(va, 8) = v39;
    }

    if ((v39 & 0x3000) == 0x2000)
    {
      int v40 = v39 | 0x1000000;
      *(_DWORD *)(v36 + 10_Block_object_dispose(va, 8) = v39 | 0x1000000;
      __int128 v41 = *(const char **)(v36 + 136);
      if (!strstr(v41, "mach") && !strstr(v41, "kernel") && (strstr(v41, "sptm") || strstr(v41, "txm")))
      {
        v40 &= ~0x10u;
        *(_DWORD *)(v36 + 10_Block_object_dispose(va, 8) = v40;
      }

      *(_DWORD *)(v36 + 10_Block_object_dispose(va, 8) = v40 & 0xFEFFEFFF | 0x1000;
    }

    if (v35)
    {
      __int128 v42 = (unint64_t *)&v35->__shared_owners_;
      do
        unint64_t v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }

    v33 += 2;
  }

  while (v33 != v34);
  if ((void)v62 == *((void *)&v62 + 1))
  {
LABEL_134:
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.d_ino) = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unable to create any kext symbol owners.\n",  (uint8_t *)&__p,  2u);
    }

    uint64_t v27 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "Succesfully created kext symbol owners.\n",  (uint8_t *)&__p,  2u);
    }

    uint64_t v44 = (CSCppFakeTask *)operator new(0x60uLL);
    CSCppFakeTask::CSCppFakeTask(v44, -1, 1);
    unint64_t v54 = v44;
    uint64_t v27 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v62, (uint64_t *)&v54, v53, 0LL);
    uint64_t v45 = (uint64_t)v54;
    unint64_t v54 = 0LL;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
    }
  }

  __p.d_ino = (__uint64_t)&v62;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_120:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v57);
  return v27;
}

void sub_186052AEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  STACK[0x960] = (unint64_t)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x960]);
  _Block_object_dispose(&a29, 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithMachKernelExcludingSearchPaths(char **a1, uint64_t a2)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(a1, a2, 0);
}

void CSSymbolicatorResymbolicate( char a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v10);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v10, a3, a4, a5, a6);
    uint64_t v11 = (void **)v10;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }

void sub_186052DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void CSSymbolicatorResymbolicateFail(char a1, uint64_t a2, const __CFArray *a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v4);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v4, a3);
    uint64_t v5 = (void **)v4;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }

void sub_186052E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void CSSymbolicatorResymbolicateFromDebugSymbolsInfo(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    int FlagsForNonFaultingBehavior = CSSymbolicatorGetFlagsForNonFaultingBehavior();
    uint64_t v4 = (os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    uint32_t v5 = CSCppSymbolicator::flags(v4) & ~FlagsForNonFaultingBehavior;
    os_unfair_lock_lock(v4 + 3);
    v4[16]._os_unfair_lock_opaque = v5;
    os_unfair_lock_unlock(v4 + 3);
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)v4, v6);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v6);
    uint64_t v7 = (void **)v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v7);
  }

void sub_186052ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__CFString *CSSymbolicatorCopyDescriptionWithIndent(char a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  Mutable = CFStringCreateMutable(0LL, 0LL);
  if (a3)
  {
    int v7 = a3;
    do
    {
      CFStringAppendCString(Mutable, "\t", 0x8000100u);
      --v7;
    }

    while (v7);
  }

  uint64_t Architecture = CSSymbolicatorGetArchitecture(a1, a2);
  FamilyName = CSArchitectureGetFamilyName(Architecture);
  uint64_t Pid = CSSymbolicatorGetPid(a1, a2);
  int IsTaskValid = CSSymbolicatorIsTaskValid(a1, a2);
  uint64_t v12 = "";
  if (IsTaskValid) {
    uint64_t v12 = " LIVE";
  }
  CFStringAppendFormat( Mutable,  0LL,  @"<CSSymbolicator: %p> %s (pid:%d%s) {\n",  a2 & 0xFFFFFFFFFFFFFFFCLL,  FamilyName,  Pid,  v12);
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 0x40000000LL;
  uint64_t v14[2] = __CSSymbolicatorCopyDescriptionWithIndent_block_invoke;
  v14[3] = &__block_descriptor_tmp_26_0;
  int v15 = a3;
  void v14[4] = Mutable;
  CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000001LL, (uint64_t)v14);
  for (; a3; --a3)
    CFStringAppendCString(Mutable, "\t", 0x8000100u);
  CFStringAppendCString(Mutable, "}", 0x8000100u);
  return Mutable;
}

void __CSSymbolicatorCopyDescriptionWithIndent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const void *)CSCopyDescriptionWithIndent(a2, a3, (*(_DWORD *)(a1 + 40) + 1));
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0LL, @"%@\n", v4);
  CFRelease(v4);
}

__n128 ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke( __n128 *a1, __n128 **a2)
{
  __n128 result = a1[2];
  (*a2)[1] = result;
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>( uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  BOOL v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0LL;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  __int128 v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0LL;
  *((void *)v18 + 2) = 0LL;
  *(void *)uint64_t v18 = 0LL;
  *((void *)i + 5) = 0LL;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1LL;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }

  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }

    else
    {
      v28 &= v11 - 1;
    }

    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }

void sub_186053348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 40);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v4 == *(void *)(*(void *)a2 + 16LL) && v3 == *(void *)(*(void *)a2 + 24LL)) {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_186053488( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::unordered_set<std::string>::unordered_set<char const**>(uint64_t a1, char **a2, char **a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_impl<char const*&>( (void *)a1,  v5++);
    while (v5 != a3);
  }

  return a1;
}

void sub_1860534FC(_Unwind_Exception *a1)
{
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]( uint64_t **a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }

  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }

  v3[1] = v7;
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>( uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( *(std::string **)(a1 + 8),  *(const std::string::value_type **)a2,  *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v3 + 24;
}

void sub_1860535B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }

  else
  {
    __int128 v12 = *a2;
    end->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }

  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1860536C8( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__n128 __Block_byref_object_copy__51(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table( a1 + 40,  (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__64(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 40);
}

void ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke( uint64_t a1, int a2, CFDictionaryRef theDict)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"OSBundleLoadAddress");
  uint64_t valuePtr = 0LL;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr) && valuePtr)
  {
    uint64_t v6 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x189604E00]);
    CFComparisonResult v7 = CFStringCompare(@"__kernel__", v6, 0LL);
    CFComparisonResult v8 = CFStringCompare(@"com.apple.sptm", v6, 0LL);
    CFComparisonResult v9 = CFStringCompare(@"com.apple.txm", v6, 0LL);
    if (v7)
    {
      if (v8)
      {
        if (v9)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>( (void *)(a1 + 48),  (unsigned __int8 *)__p);
          if (!v10) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
        }

        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "txm");
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>( (void *)(a1 + 48),  (unsigned __int8 *)__p);
          if (!v10) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
        }
      }

      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sptm");
        unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>( (void *)(a1 + 48),  (unsigned __int8 *)__p);
        if (!v10) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
    }

    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
      unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>( (void *)(a1 + 48),  (unsigned __int8 *)__p);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
    }

    uint64_t v11 = *((void *)v10 + 5);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    __int128 v12 = CFDictionaryGetValue(theDict, @"OSBundleUUID");
    uint64_t v13 = (const __CFData *)CFDictionaryGetValue(theDict, @"OSBundleMachOHeaders");
    if (v13)
    {
      uint64_t v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"OSBundleExecutablePath");
      int v15 = v14;
      if (v14)
      {
        if ((!CFStringGetCString(v14, (char *)__p, 1024LL, 0x8000100u) || access((const char *)__p, 4))
          && CFStringGetCString(v15, (char *)__p, 1024LL, 0x8000100u)
          && *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 64LL))
        {
          bzero(buffer, 0x400uLL);
          bzero(__s, 0x400uLL);
          if (!CFStringGetCString(v6, (char *)buffer, 1024LL, 0x8000100u)
            || !CFStringGetCString(v15, __s, 1024LL, 0x8000100u))
          {
            return;
          }

          std::string::basic_string[abi:ne180100]<0>(v31, (char *)buffer);
          std::string::basic_string[abi:ne180100]<0>(v29, __s);
          unint64_t v16 = std::string::find[abi:ne180100]((uint64_t *)v29, "_development", 0LL);
          unint64_t v17 = std::string::find[abi:ne180100]((uint64_t *)v29, "_kasan", 0LL);
          uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  (unsigned __int8 *)v31);
          if (v18)
          {
            __int128 v19 = (const char *)(v18 + 40);
            int v20 = (char)v18[63];
            if (v16 == -1LL)
            {
              if (v17 == -1LL)
              {
                if (v20 < 0) {
                  __int128 v19 = *(const char **)v19;
                }
                strlcpy((char *)__p, v19, 0x400uLL);
              }

              else
              {
                if (v20 < 0) {
                  __int128 v19 = *(const char **)v19;
                }
                snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_kasan");
              }
            }

            else
            {
              if (v20 < 0) {
                __int128 v19 = *(const char **)v19;
              }
              snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_development");
            }
          }

          if (v30 < 0) {
            operator delete(v29[0]);
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
        }
      }

      else
      {
        float v21 = (const __CFString *)CFDictionaryGetValue(theDict, @"OSBundlePath");
        if (v21)
        {
          BOOL v22 = CFURLCreateWithFileSystemPath(0LL, v21, kCFURLPOSIXPathStyle, 1u);
          if (v22)
          {
            unint64_t v23 = CFBundleCreate(0LL, v22);
            unint64_t v24 = v23;
            if (v23)
            {
              size_t v25 = CFBundleCopyExecutableURL(v23);
              uint64_t v26 = v25;
              if (v25)
              {
                CFURLGetFileSystemRepresentation(v25, 1u, (UInt8 *)__p, 1024LL);
                CFRelease(v26);
              }

              CFRelease(v24);
            }

            CFRelease(v22);
          }
        }
      }

      if (v7 == kCFCompareEqualTo)
      {
        uint64_t v27 = *(const char **)(a1 + 88);
        if (v27 && !access(v27, 4)) {
          strlcpy((char *)__p, *(const char **)(a1 + 88), 0x400uLL);
        }
        else {
          strcpy((char *)__p, "__kernel__");
        }
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buffer = 0;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "Found running kernel dummy entry.\n",  buffer,  2u);
        }
      }

      CSCppCFDataMemory::CSCppCFDataMemory((CSCppCFDataMemory *)buffer, v13);
      *(void *)__s = -1LL;
      v28[0] = MEMORY[0x1895F87A8];
      v28[1] = 0x40000000LL;
      void v28[2] = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke_75;
      void v28[3] = &unk_189DF96A0;
      v28[5] = v12;
      v28[6] = v11;
      v28[4] = *(void *)(a1 + 40);
      iterate_symbol_owners_from_memory( (uint64_t)buffer,  (char *)__p,  0,  0LL,  0,  (unint64_t *)__s,  0LL,  1,  (uint64_t)v28);
      CSCppCFDataMemory::~CSCppCFDataMemory((CSCppCFDataMemory *)buffer);
    }
  }

void sub_186053C90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }

  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }

  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1LL;
  }
  int64_t v8 = v7;
  if (v7)
  {
    CFComparisonResult v9 = (const void *)(v5 + a3);
    unint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        __int128 v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        CFComparisonResult v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }

      while (v11 >= v8);
    }

    __int128 v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1LL;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }

  return a3;
}

const UInt8 *___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke_75( void *a1, __int128 *a2)
{
  __n128 result = (const UInt8 *)a1[5];
  if (result)
  {
    uint64_t v5 = *(void *)a2;
    __n128 result = CFDataGetBytePtr((CFDataRef)result);
    if (*(void *)(v5 + 16) == *(void *)result && *(void *)(v5 + 24) == *((void *)result + 1))
    {
      uint64_t v7 = *(void *)a2;
      int64_t v8 = *(void **)(*(void *)a2 + 32LL);
      uint64_t v9 = *(void *)(*(void *)a2 + 40LL) - (void)v8;
      if (v9)
      {
        unint64_t v10 = v9 >> 5;
        if (v10 <= 1) {
          unint64_t v10 = 1LL;
        }
        do
        {
          *v8 += a1[6];
          v8 += 4;
          --v10;
        }

        while (v10);
      }

      uint64_t v12 = v7 + 56;
      int64_t v11 = *(void **)(v7 + 56);
      uint64_t v13 = *(void *)(v12 + 8) - (void)v11;
      if (v13)
      {
        unint64_t v14 = v13 / 24;
        if (v14 <= 1) {
          unint64_t v14 = 1LL;
        }
        do
        {
          *v11 += a1[6];
          v11 += 3;
          --v14;
        }

        while (v14);
      }

      return (const UInt8 *)std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)(*(void *)(a1[4] + 8LL) + 40LL),  a2);
    }
  }

  return result;
}

uint64_t __copy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE( uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,unsigned long long>::unordered_map(a1 + 48, a2 + 48);
}

uint64_t __destroy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE( uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
}

uint64_t CFDictionaryBlockApplierCallback( const void *a1, const void *a2, uint64_t (**a3)(void, void, void))
{
  return ((uint64_t (**)(void, const void *, const void *))a3)[2](a3, a1, a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>( void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  int64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      int64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

uint64_t std::unordered_map<std::string,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>( a1,  i + 16,  (uint64_t)(i + 16));
  return a1;
}

void sub_18605403C(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>( uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>( a1,  v9,  a3,  (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1860542AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]( (uint64_t)&a11,  __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    void v8[4] = *(void *)(a3 + 16);
  }

  void v8[5] = *(void *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_18605435C(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = off_189DF9708;
  v8[1] = a4;
  v8[2] = a2;
  void v8[3] = a3;
  unint64_t v12 = v8;
  CSCppSymbolicator::read_timeline(a1, (uint64_t)v11);
  __n128 result = v12;
  if (v12 == v11)
  {
    uint64_t v10 = 4LL;
    __n128 result = v11;
  }

  else
  {
    if (!v12) {
      return result;
    }
    uint64_t v10 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_18605443C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  float v16 = a13;
  if (a13 == v14)
  {
    uint64_t v17 = 4LL;
    float v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  CSCppSymbolicator::get_symbol_owners_at_time(v13);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189DF9708;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DF9708;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()( uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>( (uint64_t *)(a1 + 8),  a2);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

double std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
    *(void *)uint64_t v3 = 0LL;
    *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v3 + 16) = 0LL;
  }

  double result = *(double *)&v6;
  *(_OWORD *)uint64_t v3 = v6;
  *(void *)(v3 + 16) = v7;
  return result;
}

void CSCppSymbolOwnerTimeline::symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  else {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFDLL;
  }
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  __int128 v6 = *(CSCppSymbolOwner ***)(a1 + 56);
  for (uint64_t i = *(CSCppSymbolOwner ***)(a1 + 64); v6 != i; v6 += 2)
  {
    if (a2 != 0x8000000000000001LL)
    {
      uint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v11) {
        continue;
      }
    }

    unint64_t v12 = *v6;
    if (*a3 == *((void *)*v6 + 2) && a3[1] == *((void *)*v6 + 3))
    {
      unint64_t v15 = (CSCppSymbolOwner **)a4[1];
      unint64_t v14 = (unint64_t)a4[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - (_BYTE *)*a4) >> 3;
        uint64_t v18 = v14 - (void)*a4;
        uint64_t v19 = v18 >> 2;
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          size_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v20);
        }
        else {
          size_t v21 = 0LL;
        }
        BOOL v22 = (CSCppSymbolOwner **)&v21[8 * v17];
        *BOOL v22 = v12;
        float v16 = v22 + 1;
        unint64_t v24 = (char *)*a4;
        unint64_t v23 = (char *)a4[1];
        if (v23 != *a4)
        {
          do
          {
            size_t v25 = (CSCppSymbolOwner *)*((void *)v23 - 1);
            v23 -= 8;
            *--BOOL v22 = v25;
          }

          while (v23 != v24);
          unint64_t v23 = (char *)*a4;
        }

        *a4 = v22;
        a4[1] = v16;
        a4[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }

      else
      {
        *unint64_t v15 = v12;
        float v16 = v15 + 1;
      }

      a4[1] = v16;
    }
  }

void sub_186054710(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *find_core_file_dumped_region_containing_location(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 != *(void **)a1)
  {
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(void *)a1) >> 3);
    do
    {
      unint64_t v5 = v4 >> 1;
      __int128 v6 = &v2[5 * (v4 >> 1)];
      unint64_t v7 = v6[3] + *v6;
      unint64_t v8 = v6 + 5;
      v4 += ~(v4 >> 1);
      if (v7 <= a2) {
        uint64_t v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }

    while (v4);
  }

  if (v2 == v3) {
    return 0LL;
  }
  if (a2 - *v2 >= v2[3]) {
    return 0LL;
  }
  return v2;
}

void CSCppCoreFileMetadata::~CSCppCoreFileMetadata(CSCppCoreFileMetadata *this)
{
  *(void *)this = off_189DF9788;
  close(*((_DWORD *)this + 2));
  uint64_t v2 = (CSCppCoreFileMetadata *)*((void *)this + 6);
  if (v2 != (CSCppCoreFileMetadata *)((char *)this + 56))
  {
    uint64_t v3 = (ipc_space_t *)MEMORY[0x1895FBBE0];
    do
    {
      mach_port_deallocate(*v3, *((_DWORD *)v2 + 8));
      unint64_t v4 = (CSCppCoreFileMetadata *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(CSCppCoreFileMetadata **)v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          unint64_t v5 = (CSCppCoreFileMetadata *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }

        while (!v6);
      }

      uint64_t v2 = v5;
    }

    while (v5 != (CSCppCoreFileMetadata *)((char *)this + 56));
  }

  if (*((_BYTE *)this + 112))
  {
    unint64_t v8 = (void **)((char *)this + 88);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v8);
  }

  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)this + 48,  *((void **)this + 7));
  unint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }

uint64_t CSCppCoreFileMetadata::thread_get_state( CSCppCoreFileMetadata *this, unsigned int a2, int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  unint64_t v5 = (char *)*((void *)this + 7);
  if (!v5) {
    return 4LL;
  }
  unint64_t v9 = (char *)this + 56;
  do
  {
    unsigned int v10 = *((_DWORD *)v5 + 8);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unint64_t v12 = (char **)v5;
    }
    else {
      unint64_t v12 = (char **)(v5 + 8);
    }
    if (v11) {
      unint64_t v9 = v5;
    }
    unint64_t v5 = *v12;
  }

  while (*v12);
  uint64_t v15 = *((void *)this + 5);
  uint64_t v18 = *((void *)v9 + 7);
  uint64_t v17 = (int *)(v9 + 56);
  uint64_t v16 = v18;
  if (v18)
  {
    uint64_t v19 = v17;
    do
    {
      int v20 = *(_DWORD *)(v16 + 32);
      BOOL v21 = v20 < a3;
      if (v20 >= a3) {
        BOOL v22 = (uint64_t *)v16;
      }
      else {
        BOOL v22 = (uint64_t *)(v16 + 8);
      }
      if (!v21) {
        uint64_t v19 = (int *)v16;
      }
      uint64_t v16 = *v22;
    }

    while (*v22);
    if (v19 != v17 && v19[8] <= a3)
    {
      __int128 v79 = 0uLL;
      uint64_t v80 = 0LL;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>( &v79,  *((const void **)v19 + 5),  *((void *)v19 + 6),  *((void *)v19 + 6) - *((void *)v19 + 5));
      goto LABEL_93;
    }
  }

  if (!CSArchitectureIsArm64(*((void *)this + 5)) && !CSArchitectureMatchesArchitecture(v15, 0x200000CuLL))
  {
    if (CSArchitectureIsX86_64(v15))
    {
      if (a3 == 7)
      {
        uint64_t v60 = *(void *)v17;
        if (!*(void *)v17) {
          return 4LL;
        }
        __int128 v61 = v17;
        do
        {
          int v62 = *(_DWORD *)(v60 + 32);
          BOOL v63 = v62 < 4;
          if (v62 >= 4) {
            char v64 = (uint64_t *)v60;
          }
          else {
            char v64 = (uint64_t *)(v60 + 8);
          }
          if (!v63) {
            __int128 v61 = (int *)v60;
          }
          uint64_t v60 = *v64;
        }

        while (*v64);
        if (v61 == v17) {
          return 4LL;
        }
        if (v61[8] > 4) {
          return 4LL;
        }
        unint64_t v66 = v61 + 10;
        uint64_t v65 = *((void *)v61 + 5);
        if (v66[1] - v65 != 168) {
          return 4LL;
        }
        char v37 = 0LL;
        uint64_t v67 = 0LL;
        *(void *)uint64_t v85 = 0x2A00000004LL;
        *(_OWORD *)&v85[120] = *(_OWORD *)(v65 + 112);
        *(_OWORD *)&v85[136] = *(_OWORD *)(v65 + 128);
        *(_OWORD *)&v85[152] = *(_OWORD *)(v65 + 144);
        *(void *)&v85[168] = *(void *)(v65 + 160);
        *(_OWORD *)&v85[56] = *(_OWORD *)(v65 + 48);
        *(_OWORD *)&v85[72] = *(_OWORD *)(v65 + 64);
        *(_OWORD *)&v85[88] = *(_OWORD *)(v65 + 80);
        *(_OWORD *)&v85[104] = *(_OWORD *)(v65 + 96);
        *(_OWORD *)&v85[8] = *(_OWORD *)v65;
        *(_OWORD *)&v85[24] = *(_OWORD *)(v65 + 16);
        *(_OWORD *)&v85[40] = *(_OWORD *)(v65 + 32);
        BOOL v82 = 0LL;
        unint64_t v83 = 0LL;
        uint64_t v84 = 0LL;
        do
        {
          if (v37 >= v84)
          {
            unint64_t v68 = (unint64_t)v82;
            unint64_t v69 = (_BYTE *)(v37 - v82);
            uint64_t v70 = v37 - v82 + 1;
            if (v70 < 0) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v71 = v84 - v82;
            if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v72 = v70;
            }
            if (v72) {
              UUID v73 = (char *)operator new(v72);
            }
            else {
              UUID v73 = 0LL;
            }
            uint64_t v74 = &v69[(void)v73];
            std::string v75 = &v69[(void)v73];
            _BYTE *v75 = v85[v67];
            __int128 v76 = v75 + 1;
            if (v37 != (char *)v68)
            {
              unint64_t v77 = &v37[~v68];
              do
              {
                char v78 = *--v37;
                (v77--)[(void)v73] = v78;
              }

              while (v37 != (char *)v68);
              char v37 = v82;
              uint64_t v74 = v73;
            }

            BOOL v82 = v74;
            uint64_t v84 = &v73[v72];
            if (v37) {
              operator delete(v37);
            }
            char v37 = v76;
          }

          else
          {
            *v37++ = v85[v67];
          }

          unint64_t v83 = v37;
          ++v67;
        }

        while (v67 != 176);
        goto LABEL_74;
      }

      if (a3 == 4)
      {
        uint64_t v50 = *(void *)v17;
        if (*(void *)v17)
        {
          uint64_t v51 = v17;
          do
          {
            int v52 = *(_DWORD *)(v50 + 32);
            BOOL v53 = v52 < 7;
            if (v52 >= 7) {
              unint64_t v54 = (uint64_t *)v50;
            }
            else {
              unint64_t v54 = (uint64_t *)(v50 + 8);
            }
            if (!v53) {
              uint64_t v51 = (int *)v50;
            }
            uint64_t v50 = *v54;
          }

          while (*v54);
          if (v51 != v17 && v51[8] <= 7)
          {
            uint64_t v57 = v51 + 10;
            unint64_t v56 = (_DWORD *)*((void *)v51 + 5);
            uint64_t v55 = v57[1];
            if (v55 - (void)v56 == 176 && *v56 == 4 && v55 - (void)(v56 + 2) == 168)
            {
              memset(v85, 0, 24);
              std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>( v85,  v56 + 2,  v55,  0xA8uLL);
              goto LABEL_42;
            }
          }
        }
      }
    }

    return 4LL;
  }

  if (a3 == 1)
  {
    uint64_t v31 = *(void *)v17;
    if (!*(void *)v17) {
      return 4LL;
    }
    char v32 = v17;
    do
    {
      int v33 = *(_DWORD *)(v31 + 32);
      BOOL v34 = v33 < 6;
      if (v33 >= 6) {
        uint64_t v35 = (uint64_t *)v31;
      }
      else {
        uint64_t v35 = (uint64_t *)(v31 + 8);
      }
      if (!v34) {
        char v32 = (int *)v31;
      }
      uint64_t v31 = *v35;
    }

    while (*v35);
    if (v32 == v17) {
      return 4LL;
    }
    if (v32[8] > 6) {
      return 4LL;
    }
    uint64_t v36 = (const void *)*((void *)v32 + 5);
    if (*((void *)v32 + 6) - (void)v36 != 272LL) {
      return 4LL;
    }
    *(void *)uint64_t v85 = 0x4400000006LL;
    memcpy(&v85[8], v36, 0x110uLL);
    char v37 = 0LL;
    uint64_t v38 = 0LL;
    BOOL v82 = 0LL;
    unint64_t v83 = 0LL;
    uint64_t v84 = 0LL;
    do
    {
      if (v37 >= v84)
      {
        unint64_t v39 = (unint64_t)v82;
        int v40 = (_BYTE *)(v37 - v82);
        uint64_t v41 = v37 - v82 + 1;
        if (v41 < 0) {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = v84 - v82;
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v43 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v43 = v41;
        }
        if (v43) {
          uint64_t v44 = (char *)operator new(v43);
        }
        else {
          uint64_t v44 = 0LL;
        }
        uint64_t v45 = &v40[(void)v44];
        uint64_t v46 = &v40[(void)v44];
        _BYTE *v46 = v85[v38];
        uint64_t v47 = v46 + 1;
        if (v37 != (char *)v39)
        {
          uint64_t v48 = &v37[~v39];
          do
          {
            char v49 = *--v37;
            (v48--)[(void)v44] = v49;
          }

          while (v37 != (char *)v39);
          char v37 = v82;
          uint64_t v45 = v44;
        }

        BOOL v82 = v45;
        uint64_t v84 = &v44[v43];
        if (v37) {
          operator delete(v37);
        }
        char v37 = v47;
      }

      else
      {
        *v37++ = v85[v38];
      }

      unint64_t v83 = v37;
      ++v38;
    }

    while (v38 != 280);
LABEL_74:
    *(void *)&__int128 v79 = v82;
    *((void *)&v79 + 1) = v37;
    uint64_t v80 = v84;
    goto LABEL_93;
  }

  if (a3 != 6) {
    return 4LL;
  }
  uint64_t v23 = *(void *)v17;
  if (!*(void *)v17) {
    return 4LL;
  }
  unint64_t v24 = v17;
  do
  {
    int v25 = *(_DWORD *)(v23 + 32);
    BOOL v26 = v25 < 1;
    if (v25 >= 1) {
      uint64_t v27 = (uint64_t *)v23;
    }
    else {
      uint64_t v27 = (uint64_t *)(v23 + 8);
    }
    if (!v26) {
      unint64_t v24 = (int *)v23;
    }
    uint64_t v23 = *v27;
  }

  while (*v27);
  if (v24 == v17) {
    return 4LL;
  }
  if (v24[8] > 1) {
    return 4LL;
  }
  char v30 = v24 + 10;
  int v29 = (_DWORD *)*((void *)v24 + 5);
  uint64_t v28 = v30[1];
  if (v28 - (void)v29 != 280 || *v29 != 6 || v28 - (void)(v29 + 2) != 272) {
    return 4LL;
  }
  memset(v85, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>( v85,  v29 + 2,  v28,  0x110uLL);
LABEL_42:
  __int128 v79 = *(_OWORD *)v85;
  uint64_t v80 = *(char **)&v85[16];
LABEL_93:
  char v81 = 1;
  int v58 = (void *)v79;
  unint64_t v59 = *((void *)&v79 + 1) - v79;
  if (((*((void *)&v79 + 1) - (void)v79) & 3LL) != 0)
  {
    uint64_t v13 = 5LL;
  }

  else if (v59 <= 4 * (unint64_t)*a5)
  {
    memcpy(a4, (const void *)v79, *((void *)&v79 + 1) - v79);
    uint64_t v13 = 0LL;
    *a5 = v59 >> 2;
  }

  else
  {
    uint64_t v13 = 4LL;
  }

  if (v58)
  {
    *((void *)&v79 + 1) = v58;
    operator delete(v58);
  }

  return v13;
}

void sub_186054E74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSCppCoreFileMetadata::task_threads( CSCppCoreFileMetadata *this, unsigned int **a2, unsigned int *a3)
{
  unint64_t v3 = *((void *)this + 8);
  if (!v3) {
    return 4LL;
  }
  mach_vm_address_t address = 0LL;
  unint64_t v7 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  uint64_t v8 = mach_vm_allocate(*MEMORY[0x1895FBBE0], &address, 4 * v3, 1);
  if (!(_DWORD)v8)
  {
    unint64_t v9 = (unsigned int *)address;
    unsigned int v10 = (CSCppCoreFileMetadata *)*((void *)this + 6);
    if (v10 != (CSCppCoreFileMetadata *)((char *)this + 56))
    {
      do
      {
        v9[*((unsigned int *)v10 + 10)] = *((_DWORD *)v10 + 8);
        BOOL v11 = (CSCppCoreFileMetadata *)*((void *)v10 + 1);
        if (v11)
        {
          do
          {
            unint64_t v12 = v11;
            BOOL v11 = *(CSCppCoreFileMetadata **)v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            unint64_t v12 = (CSCppCoreFileMetadata *)*((void *)v10 + 2);
            BOOL v13 = *(void *)v12 == (void)v10;
            unsigned int v10 = v12;
          }

          while (!v13);
        }

        unsigned int v10 = v12;
      }

      while (v12 != (CSCppCoreFileMetadata *)((char *)this + 56));
    }

    uint64_t v14 = 0LL;
    unsigned int v15 = 0;
    while (1)
    {
      uint64_t v16 = mach_port_mod_refs(*v7, v9[v14], 4u, 1);
      if ((_DWORD)v16) {
        break;
      }
      uint64_t v14 = ++v15;
      if (v3 <= v15)
      {
        uint64_t v8 = 0LL;
        *a2 = v9;
        *a3 = v3;
        return v8;
      }
    }

    uint64_t v8 = v16;
    if (v15)
    {
      uint64_t v18 = v15;
      do
      {
        mach_port_name_t v19 = *v9++;
        mach_port_deallocate(*v7, v19);
        --v18;
      }

      while (v18);
    }
  }

  return v8;
}

void parse_task_crashinfo_note(char *a1@<X0>, const note_command *a2@<X1>, _BYTE *a3@<X8>)
{
  BOOL v6 = (void *)CSCppFileMemory::CSCppFileMemory(v112, a1, a2->offset);
  uint64_t v7 = CSCppFileMemory::bytes_at(v6, a2->offset, a2->size);
  uint64_t v9 = v7;
  if (!v7 || v8 <= 0x28B || *(_DWORD *)v7 != 2)
  {
    *a3 = 0;
    a3[440] = 0;
    goto LABEL_25;
  }

  LOBYTE(v109) = 0;
  char v111 = 0;
  unint64_t v10 = *(void *)(v7 + 44);
  if (v10 != -1LL)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v7 + 44));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v10, &__p);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( (uint64_t)&v109,  (__n128 *)&__p);
    if (v108)
    {
    }
  }

  __p.__r_.__value_.__s.__data_[0] = 0;
  char v108 = 0;
  unint64_t v11 = *(void *)(v9 + 52);
  if (v11 != -1LL)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 52));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v11, &v105);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( (uint64_t)&__p,  (__n128 *)&v105);
    if (v106)
    {
    }
  }

  v105.__r_.__value_.__s.__data_[0] = 0;
  char v106 = 0;
  unint64_t v12 = *(void *)(v9 + 60);
  if (v12 != -1LL)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 60));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v12, &v103);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( (uint64_t)&v105,  (__n128 *)&v103);
    if (v104)
    {
    }
  }

  v103.__r_.__value_.__s.__data_[0] = 0;
  char v104 = 0;
  unint64_t v13 = *(void *)(v9 + 68);
  if (v13 != -1LL)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(void *)(v9 + 68));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v13, &v101);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( (uint64_t)&v103,  (__n128 *)&v101);
    if (v102)
    {
    }
  }

  v101.__r_.__value_.__s.__data_[0] = 0;
  char v102 = 0;
  unint64_t v14 = *(void *)(v9 + 196);
  if (!v14 || (unint64_t v15 = *(void *)(v9 + 188), v15 == -1LL))
  {
LABEL_50:
    v98.n128_u8[0] = 0;
    char v100 = 0;
    unint64_t v31 = *(void *)(v9 + 212);
    if (v31)
    {
      unint64_t v32 = *(void *)(v9 + 204);
      if (v32 != -1LL)
      {
        if (!is_mul_ok(v31, 0x38uLL))
        {
          *a3 = 0;
          a3[440] = 0;
LABEL_97:
          if (v100 && v98.n128_u64[0])
          {
            v98.n128_u64[1] = v98.n128_u64[0];
            operator delete((void *)v98.n128_u64[0]);
          }

          if (v102 && v101.__r_.__value_.__r.__words[0])
          {
            v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
            operator delete(v101.__r_.__value_.__l.__data_);
          }

          goto LABEL_103;
        }

        BOOL v63 = a3;
        unint64_t v33 = 56 * v31;
        CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, v32, 56 * v31);
        uint64_t v34 = CSCppFileMemory::bytes_at(&v65, v32, v33);
        if (v34 && v35 >= v33)
        {
          uint64_t v64 = v34;
          __n128 v96 = 0uLL;
          uint64_t v97 = 0LL;
          std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>( (uint64_t)&v98,  &v96);
          if (v96.n128_u64[0])
          {
            v96.n128_u64[1] = v96.n128_u64[0];
            operator delete((void *)v96.n128_u64[0]);
          }

          std::vector<CS_vm_object_query_data_t>::reserve((void **)&v98, *(void *)(v9 + 212));
          uint64_t v36 = v64;
          if (*(void *)(v9 + 212))
          {
            unint64_t v37 = 0LL;
            unint64_t v38 = v98.n128_u64[1];
            do
            {
              unint64_t v39 = (uint64_t *)(v36 + 56 * v37);
              uint64_t v40 = *v39;
              uint64_t v41 = v39[1];
              uint64_t v43 = v39[2];
              uint64_t v42 = v39[3];
              uint64_t v44 = v39[4];
              uint64_t v45 = v39[5];
              char v46 = v39[6] & 0x3F;
              if (v38 >= (unint64_t)v99)
              {
                uint64_t v47 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v38 - v98.n128_u64[0]) >> 3);
                unint64_t v48 = v47 + 1;
                else {
                  unint64_t v49 = v48;
                }
                if (v49) {
                  data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>( (uint64_t)&v99,  v49);
                }
                else {
                  data = 0LL;
                }
                uint64_t v51 = &data[56 * v47];
                *(void *)uint64_t v51 = v40;
                *((void *)v51 + 1) = v41;
                *((void *)v51 + 2) = v43;
                *((void *)v51 + 3) = v42;
                *((void *)v51 + 4) = v44;
                *((void *)v51 + 5) = v45;
                v51[48] = v46;
                int v52 = (char *)v98.n128_u64[1];
                unint64_t v53 = v98.n128_u64[0];
                unint64_t v54 = (unint64_t)v51;
                if (v98.n128_u64[1] != v98.n128_u64[0])
                {
                  do
                  {
                    __int128 v55 = *(_OWORD *)(v52 - 56);
                    __int128 v56 = *(_OWORD *)(v52 - 40);
                    __int128 v57 = *(_OWORD *)(v52 - 24);
                    *(void *)(v54 - _Block_object_dispose(va, 8) = *((void *)v52 - 1);
                    *(_OWORD *)(v54 - 24) = v57;
                    *(_OWORD *)(v54 - 40) = v56;
                    *(_OWORD *)(v54 - 56) = v55;
                    v54 -= 56LL;
                    v52 -= 56;
                  }

                  while (v52 != (char *)v53);
                  int v52 = (char *)v53;
                }

                unint64_t v38 = (unint64_t)(v51 + 56);
                v98.n128_u64[0] = v54;
                v98.n128_u64[1] = (unint64_t)(v51 + 56);
                unint64_t v99 = &data[56 * v49];
                if (v52) {
                  operator delete(v52);
                }
                uint64_t v36 = v64;
              }

              else
              {
                *(void *)unint64_t v38 = v40;
                *(void *)(v38 + _Block_object_dispose(va, 8) = v41;
                *(void *)(v38 + 16) = v43;
                *(void *)(v38 + 24) = v42;
                *(void *)(v38 + 32) = v44;
                *(void *)(v38 + 40) = v45;
                *(_BYTE *)(v38 + 4_Block_object_dispose(va, 8) = v46;
                v38 += 56LL;
              }

              v98.n128_u64[1] = v38;
              ++v37;
            }

            while (v37 < *(void *)(v9 + 212));
          }
        }

        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
        a3 = v63;
      }
    }

    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v65, &v109);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v67, (__int128 *)&__p);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v69, (__int128 *)&v105);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v71, (__int128 *)&v103);
    int v73 = *(_DWORD *)(v9 + 104);
    uint64_t v74 = *(void *)(v9 + 156);
    __int128 v75 = *(_OWORD *)(v9 + 172);
    uint64_t v76 = *(void *)(v9 + 12);
    __int128 v77 = *(_OWORD *)(v9 + 28);
    uint64_t v78 = *(void *)(v9 + 84);
    uint64_t v79 = *(void *)(v9 + 92);
    int v80 = *(_DWORD *)(v9 + 100);
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]( (uint64_t)v81,  (uint64_t)&v101);
    std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100]( (uint64_t)v83,  (uint64_t)&v98);
    __int128 v58 = *(_OWORD *)(v9 + 500);
    __int128 v85 = *(_OWORD *)(v9 + 484);
    __int128 v86 = v58;
    __int128 v59 = *(_OWORD *)(v9 + 532);
    __int128 v87 = *(_OWORD *)(v9 + 516);
    __int128 v88 = v59;
    __int128 v60 = *(_OWORD *)(v9 + 564);
    __int128 v89 = *(_OWORD *)(v9 + 548);
    __int128 v90 = v60;
    __int128 v61 = *(_OWORD *)(v9 + 596);
    __int128 v91 = *(_OWORD *)(v9 + 580);
    __int128 v92 = v61;
    __int128 v62 = *(_OWORD *)(v9 + 628);
    __int128 v93 = *(_OWORD *)(v9 + 612);
    __int128 v94 = v62;
    uint64_t v95 = *(void *)(v9 + 644);
    std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>( (uint64_t)a3,  (__int128 *)&v65);
    if (v84 && v83[0])
    {
      v83[1] = v83[0];
      operator delete(v83[0]);
    }

    if (v82 && v81[0])
    {
      v81[1] = v81[0];
      operator delete(v81[0]);
    }

    goto LABEL_97;
  }

  if (!(v14 >> 61))
  {
    uint64_t v16 = a3;
    unint64_t v17 = 8 * v14;
    CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, *(void *)(v9 + 188), 8 * v14);
    uint64_t v19 = CSCppFileMemory::bytes_at(&v65, v15, v17);
    if (v19 && v18 >= v17)
    {
      __n128 v98 = 0uLL;
      unint64_t v99 = 0LL;
      std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>( (uint64_t)&v101,  &v98);
      if (v98.n128_u64[0])
      {
        v98.n128_u64[1] = v98.n128_u64[0];
        operator delete((void *)v98.n128_u64[0]);
      }

      std::vector<unsigned long long>::reserve((void **)&v101.__r_.__value_.__l.__data_, *(void *)(v9 + 196));
      if (*(void *)(v9 + 196))
      {
        unint64_t v20 = 0LL;
        size = (void *)v101.__r_.__value_.__l.__size_;
        do
        {
          if ((unint64_t)size >= v101.__r_.__value_.__l.__cap_)
          {
            uint64_t v23 = (void *)v101.__r_.__value_.__r.__words[0];
            uint64_t v24 = (uint64_t)((uint64_t)size - v101.__r_.__value_.__r.__words[0]) >> 3;
            unint64_t v25 = v24 + 1;
            int64_t v26 = v101.__r_.__value_.__l.__cap_ - v101.__r_.__value_.__r.__words[0];
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)&v101.__r_.__value_.__l.__cap_,  v27);
              size = (void *)v101.__r_.__value_.__l.__size_;
              uint64_t v23 = (void *)v101.__r_.__value_.__r.__words[0];
            }

            else
            {
              uint64_t v28 = 0LL;
            }

            int v29 = &v28[8 * v24];
            *(void *)int v29 = *(void *)(v19 + 8 * v20);
            std::string::size_type v22 = (std::string::size_type)(v29 + 8);
            while (size != v23)
            {
              uint64_t v30 = *--size;
              *((void *)v29 - 1) = v30;
              v29 -= 8;
            }

            v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            v101.__r_.__value_.__l.__size_ = v22;
            v101.__r_.__value_.__l.__cap_ = (std::string::size_type)&v28[8 * v27];
            if (v23) {
              operator delete(v23);
            }
          }

          else
          {
            void *size = *(void *)(v19 + 8 * v20);
            std::string::size_type v22 = (std::string::size_type)(size + 1);
          }

          v101.__r_.__value_.__l.__size_ = v22;
          ++v20;
          size = (void *)v22;
        }

        while (v20 < *(void *)(v9 + 196));
      }
    }

    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    a3 = v16;
    goto LABEL_50;
  }

  *a3 = 0;
  a3[440] = 0;
LABEL_103:
  if (v111 && v110 < 0) {
    operator delete((void *)v109);
  }
LABEL_25:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v112);
}

void sub_186055848( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }

  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a13);
  if (LOBYTE(STACK[0x208]) && a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }

  if (LOBYTE(STACK[0x228]))
  {
    uint64_t v74 = (void *)STACK[0x210];
    if (STACK[0x210])
    {
      STACK[0x218] = (unint64_t)v74;
      operator delete(v74);
    }
  }

  if (LOBYTE(STACK[0x248]) && SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (LOBYTE(STACK[0x268]) && SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (LOBYTE(STACK[0x288]) && SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(_BYTE *)(v72 - 216))
  {
  }

  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)(v72 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>( uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1, a2);
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }

      while (v11 != v10);
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void std::vector<CS_vm_object_query_data_t>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7LL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493LL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 56;
    data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>(v3, a2);
    uint64_t v7 = &data[56 * v5];
    uint64_t v9 = &data[56 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *(_OWORD *)(v10 - 56);
        __int128 v14 = *(_OWORD *)(v10 - 40);
        __int128 v15 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }

      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t CSCppCoreFileDarwinMetadata::get_proc_name(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((_BYTE *)this + 560)) {
    return 4LL;
  }
  uint64_t result = 4LL;
  if (a2 && *((_BYTE *)this + 144))
  {
    unint64_t v4 = (char *)this + 120;
    uint64_t result = 0LL;
    *a2 = v4;
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_path(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((_BYTE *)this + 560)) {
    return 4LL;
  }
  uint64_t result = 4LL;
  if (a2 && *((_BYTE *)this + 176))
  {
    unint64_t v4 = (char *)this + 152;
    uint64_t result = 0LL;
    *a2 = v4;
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_name( CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((_BYTE *)this + 560)) {
    return 4LL;
  }
  uint64_t result = 4LL;
  if (a2 && *((_BYTE *)this + 208))
  {
    unint64_t v4 = (char *)this + 184;
    uint64_t result = 0LL;
    *a2 = v4;
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_path( CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  if (!*((_BYTE *)this + 560)) {
    return 4LL;
  }
  uint64_t result = 4LL;
  if (a2 && *((_BYTE *)this + 240))
  {
    unint64_t v4 = (char *)this + 216;
    uint64_t result = 0LL;
    *a2 = v4;
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_pid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 70);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ppid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 71);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_sec( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 36);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_usec( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 37);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_userstack(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 38);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_flags(CSCppCoreFileDarwinMetadata *this, unsigned int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 78);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_argslen(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 79);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_argc(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 80);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dirty_flags(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((_DWORD *)this + 62);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dyld_all_image_infos_addr( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 32);
    }
  }

  return result;
}

__n128 CSCppCoreFileDarwinMetadata::get_dyld_shared_cache_range(uint64_t a1, __n128 *a2)
{
  if (a2)
  {
    if (*(_BYTE *)(a1 + 560))
    {
      __n128 result = *(__n128 *)(a1 + 264);
      *a2 = result;
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_architecture(uint64_t a1, void *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 560))
    {
      uint64_t result = 0LL;
      *a2 = *(void *)(a1 + 40);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 49);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 50);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_iokit_mapped( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 51);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_accounting( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 52);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 53);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 54);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 55);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_page_table( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 56);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 57);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint_lifetime_max( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 58);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 59);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 60);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_wired_mem( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 61);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 62);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 63);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 64);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 65);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 66);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 67);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 68);
    }
  }

  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint_compressed( CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      uint64_t result = 0LL;
      *a2 = *((void *)this + 69);
    }
  }

  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_name(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_path(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_name( CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_path( CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_pid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  int v4 = *((_DWORD *)this + 32);
  if (v4 < 0) {
    int v4 = -v4;
  }
  *a2 = v4;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_flags(CSCppCoreFileExclavesMetadata *this, unsigned int *a2)
{
  uint64_t result = 4LL;
  if (a2)
  {
    *a2 = 4;
    return 0LL;
  }

  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ppid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_sec( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_usec( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_userstack( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_argslen(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_argc(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dirty_flags(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_all_image_infos_addr( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_shared_cache_range()
{
  return 5LL;
}

uint64_t CSCppCoreFileExclavesMetadata::get_architecture(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = *(void *)(a1 + 40);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_iokit_mapped( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_accounting( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_page_table( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint_lifetime_max( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_wired_mem( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint_compressed( CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  if (!a2) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t CSCppCoreFileMetadata::has_info_for_memory_analysis(CSCppCoreFileMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

BOOL CSCppCoreFileDarwinMetadata::has_info_for_memory_analysis(CSCppCoreFileDarwinMetadata *this)
{
  return *((_BYTE *)this + 112) && *((_BYTE *)this + 560) != 0;
}

uint64_t CSCppCoreFileExclavesMetadata::has_info_for_memory_analysis(CSCppCoreFileExclavesMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

void parse_vm_info_note(const char *a1@<X0>, const note_command *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6 = CSCppFileMemory::bytes_at(v92, a2->offset, a2->size);
  if (v6) {
    BOOL v8 = v7 >= 0x10;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8 || *(_DWORD *)v6 != 2) {
    goto LABEL_13;
  }
  unint64_t v9 = *(void *)(v6 + 8);
  uint64_t offset = a2->offset;
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
  if (135 * v9 + 16 > a2->size)
  {
    *a3 = 0;
    a3[24] = 0;
    return;
  }

  CSCppFileMemory::CSCppFileMemory(v92, a1, offset + 16);
  uint64_t v11 = CSCppFileMemory::bytes_at(v92, offset + 16, 135 * v9);
  uint64_t v13 = v11;
  if (v11 && v12 >= 135 * v9)
  {
    __int128 v89 = 0LL;
    __int128 v90 = 0LL;
    uint64_t v91 = 0LL;
    LOBYTE(v8_Block_object_dispose(va, 8) = 0;
    if (v9)
    {
      unsigned int v15 = v88;
      uint64_t v16 = (unsigned int *)(v11 + 16);
      char v17 = 1;
      unint64_t v18 = v9;
      do
      {
        uint64_t v19 = v16;
        if ((v17 & 1) == 0)
        {
          if (v15 >= *v16) {
            uint64_t v19 = &v88;
          }
          else {
            uint64_t v19 = v16;
          }
        }

        char v17 = 0;
        unsigned int v15 = *v19;
        unsigned int v88 = *v19;
        uint64_t v16 = (unsigned int *)((char *)v16 + 135);
        --v18;
      }

      while (v18);
      uint64_t v20 = v15 + 1;
      if (v15 != -1)
      {
        do
        {
          std::string __p = 0LL;
          __int128 v86 = 0LL;
          uint64_t v87 = 0LL;
          std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100]( (uint64_t *)&v89,  (uint64_t)&__p);
          if (__p)
          {
            __int128 v86 = __p;
            operator delete(__p);
          }

          --v20;
        }

        while (v20);
      }

      uint64_t v72 = a1;
      int v73 = a3;
      uint64_t v21 = 0LL;
      if (v9 <= 1) {
        uint64_t v22 = 1LL;
      }
      else {
        uint64_t v22 = v9;
      }
      do
      {
        uint64_t v23 = v13 + 135 * v21;
        uint64_t v24 = &v89[3 * *(unsigned int *)(v23 + 16)];
        int64_t v26 = (void **)(v24 + 1);
        unint64_t v25 = (uint64_t *)v24[1];
        uint64_t v28 = v24 + 2;
        unint64_t v27 = v24[2];
        if ((unint64_t)v25 >= v27)
        {
          uint64_t v30 = (uint64_t)((uint64_t)v25 - *v24) >> 3;
          uint64_t v31 = v27 - *v24;
          uint64_t v32 = v31 >> 2;
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v28, v33);
          }
          else {
            uint64_t v34 = 0LL;
          }
          unint64_t v35 = &v34[8 * v30];
          *(void *)unint64_t v35 = v23;
          int v29 = v35 + 8;
          uint64_t v36 = (char *)*v26;
          unint64_t v37 = (char *)*v24;
          if (*v26 != (void *)*v24)
          {
            do
            {
              uint64_t v38 = *((void *)v36 - 1);
              v36 -= 8;
              *((void *)v35 - 1) = v38;
              v35 -= 8;
            }

            while (v36 != v37);
            uint64_t v36 = (char *)*v24;
          }

          *uint64_t v24 = (unint64_t)v35;
          *int64_t v26 = v29;
          *uint64_t v28 = &v34[8 * v33];
          if (v36) {
            operator delete(v36);
          }
        }

        else
        {
          *unint64_t v25 = v23;
          int v29 = v25 + 1;
        }

        *int64_t v26 = v29;
        ++v21;
      }

      while (v21 != v22);
      uint64_t v40 = v89;
      unint64_t v39 = v90;
      if (v89 == v90) {
        goto LABEL_60;
      }
      do
      {
        unint64_t v41 = *v40;
        uint64_t v42 = (unint64_t **)v40[1];
        v40 += 3;
        unint64_t v43 = 126 - 2 * __clz((uint64_t)((uint64_t)v42 - v41) >> 3);
        else {
          uint64_t v44 = v43;
        }
        std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>( v41,  v42,  v44,  1);
      }

      while (v40 != v39);
      uint64_t v45 = v89;
      uint64_t v40 = v90;
      if (v89 == v90)
      {
LABEL_60:
        unint64_t v49 = v40;
LABEL_61:
        std::string __p = 0LL;
        __int128 v86 = 0LL;
        uint64_t v87 = 0LL;
        p_p = 0LL;
        unint64_t v83 = 0LL;
        char v84 = 0LL;
        uint64_t v79 = 0LL;
        int v80 = 0LL;
        for (uint64_t i = 0LL; v49 != v40; v49 += 3)
        {
          unint64_t v50 = *v49;
          uint64_t v51 = v83;
          if (v83 >= v84)
          {
            uint64_t v53 = (v83 - (_BYTE *)p_p) >> 3;
            unint64_t v54 = (v84 - (_BYTE *)p_p) >> 2;
            if (v54 <= v53 + 1) {
              unint64_t v54 = v53 + 1;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55) {
              __int128 v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v84, v55);
            }
            else {
              __int128 v56 = 0LL;
            }
            __int128 v57 = &v56[8 * v53];
            *(void *)__int128 v57 = v50;
            int v52 = v57 + 8;
            __int128 v59 = (char *)p_p;
            __int128 v58 = v83;
            if (v83 != p_p)
            {
              do
              {
                uint64_t v60 = *((void *)v58 - 1);
                v58 -= 8;
                *((void *)v57 - 1) = v60;
                v57 -= 8;
              }

              while (v58 != v59);
              __int128 v58 = (char *)p_p;
            }

            p_p = v57;
            unint64_t v83 = v52;
            char v84 = &v56[8 * v55];
            if (v58) {
              operator delete(v58);
            }
          }

          else
          {
            *(void *)unint64_t v83 = v50;
            int v52 = v51 + 8;
          }

          unint64_t v83 = v52;
          unint64_t v61 = v49[1];
          __int128 v62 = v80;
          if (v80 >= i)
          {
            uint64_t v64 = (v80 - (_BYTE *)v79) >> 3;
            unint64_t v65 = (i - (_BYTE *)v79) >> 2;
            if (v65 <= v64 + 1) {
              unint64_t v65 = v64 + 1;
            }
            else {
              unint64_t v66 = v65;
            }
            if (v66) {
              std::string v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&i, v66);
            }
            else {
              std::string v67 = 0LL;
            }
            char v68 = &v67[8 * v64];
            *(void *)char v68 = v61;
            BOOL v63 = v68 + 8;
            char v70 = (char *)v79;
            std::string v69 = v80;
            if (v80 != v79)
            {
              do
              {
                uint64_t v71 = *((void *)v69 - 1);
                v69 -= 8;
                *((void *)v68 - 1) = v71;
                v68 -= 8;
              }

              while (v69 != v70);
              std::string v69 = (char *)v79;
            }

            uint64_t v79 = v68;
            int v80 = v63;
            uint64_t i = &v67[8 * v66];
            if (v69) {
              operator delete(v69);
            }
          }

          else
          {
            *(void *)int v80 = v61;
            BOOL v63 = v62 + 8;
          }

          int v80 = v63;
        }

        if (recursively_create_region_tree((uint64_t *)&p_p, &v79, 0, (uint64_t *)&__p, 0LL, -1LL, (uint64_t)v72))
        {
          uint64_t v75 = 0LL;
          uint64_t v76 = 0LL;
          uint64_t v74 = 0LL;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( &v74,  (uint64_t)__p,  (uint64_t)v86,  0x6DB6DB6DB6DB6DB7LL * ((v86 - (_BYTE *)__p) >> 5));
          __int128 v77 = 0uLL;
          uint64_t v78 = 0LL;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( &v77,  v74,  v75,  0x6DB6DB6DB6DB6DB7LL * ((v75 - v74) >> 5));
          *(_OWORD *)int v73 = v77;
          *((void *)v73 + 2) = v78;
          uint64_t v78 = 0LL;
          __int128 v77 = 0uLL;
          v73[24] = 1;
          v93[0] = (void **)&v77;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
          v93[0] = (void **)&v74;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
        }

        else
        {
          _BYTE *v73 = 0;
          v73[24] = 0;
        }

        if (v79)
        {
          int v80 = (char *)v79;
          operator delete(v79);
        }

        if (p_p)
        {
          unint64_t v83 = (char *)p_p;
          operator delete(p_p);
        }

        p_p = &__p;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      }

      else
      {
        while (1)
        {
          char v46 = (unint64_t **)v45[1];
          uint64_t v47 = (unint64_t **)(*v45 + 8);
LABEL_58:
          v45 += 3;
          if (v45 == v40)
          {
            unint64_t v49 = v89;
            uint64_t v40 = v90;
            goto LABEL_61;
          }
        }

        while (!CSRangeIntersectsRange(**(v47 - 1), (*(v47 - 1))[1], **v47, (*v47)[1]))
        {
        }

        _BYTE *v73 = 0;
        v73[24] = 0;
      }
    }

    else
    {
      *a3 = 0;
      a3[24] = 0;
    }

    std::string __p = &v89;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }

  else
  {
LABEL_13:
    *a3 = 0;
    a3[24] = 0;
  }

  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
}

void sub_186056BB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char **a22, char **a23, uint64_t a24, char *a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, char a32)
{
  *(void *)(v32 - 96) = &a12;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a22)
  {
    a23 = a22;
    operator delete(a22);
  }

  a22 = &a25;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a25 = &a29;
  std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(result, v12);
    __int128 v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0LL;
    *((void *)v14 + 2) = 0LL;
    *(void *)__int128 v14 = 0LL;
    *(_OWORD *)__int128 v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    _OWORD v16[2] = v14 + 24;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer(a1, v16);
    BOOL v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer((uint64_t)v16);
  }

  else
  {
    *unint64_t v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = 0LL;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    BOOL v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }

  a1[1] = (uint64_t)v8;
  return result;
}

void sub_186056D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL recursively_create_region_tree( uint64_t *a1, void *a2, unsigned int a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = *a1;
  unint64_t v7 = *(unint64_t ***)(*a1 + 8LL * a3);
  BOOL result = 1LL;
  if (v7 != *(unint64_t ***)(*a2 + 8LL * a3))
  {
    unsigned int v21 = a3 + 1;
    unint64_t v11 = a3;
    while (1)
    {
      unint64_t v12 = *v7;
      unint64_t v14 = **v7;
      uint64_t v13 = (*v7)[1];
      if (!CSRangeContainsRange(a5, a6, v14, v13)) {
        break;
      }
      unint64_t v15 = v12[1];
      if (!v15)
      {
        LOBYTE(v27[0]) = 0;
        char v40 = 0;
LABEL_45:
        std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
        return 0LL;
      }

      unint64_t v16 = a5;
      unint64_t v17 = *v12;
      LOBYTE(v63) = 0;
      char v65 = 0;
      uint64_t v18 = *(unint64_t *)((char *)v12 + 95);
      if (v18 != -1)
      {
        CSCppFileMemory::CSCppFileMemory(&v41, a7, v18);
        read_path_from_offset_in_cpp_memory((uint64_t)&v41, *(unint64_t *)((char *)v12 + 95), &v61);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( (uint64_t)&v63,  (__n128 *)&v61);
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v41);
      }

      v60[0] = a7;
      v60[1] = v17;
      v60[2] = v15;
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()( (uint64_t)v60,  *(unint64_t *)((char *)v12 + 111),  *(unint64_t *)((char *)v12 + 103),  (uint64_t)&v61);
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()( (uint64_t)v60,  *(unint64_t *)((char *)v12 + 127),  *(unint64_t *)((char *)v12 + 119),  (uint64_t)v58);
      *(void *)&__int128 v41 = v17;
      *((void *)&v41 + 1) = v15;
      __int128 v42 = *((_OWORD *)v12 + 1);
      *(void *)unint64_t v43 = v12[4];
      *(_OWORD *)&v43[8] = *(_OWORD *)(v12 + 5);
      *(void *)&_BYTE v43[24] = v12[7];
      LOWORD(v44) = *((_WORD *)v12 + 32);
      BYTE2(v44) = *((_BYTE *)v12 + 66);
      *(_WORD *)((char *)&v44 + 3) = *(_WORD *)((char *)v12 + 67);
      *((void *)&v44 + 1) = *(unint64_t *)((char *)v12 + 69);
      LOWORD(v45) = *(_WORD *)((char *)v12 + 77);
      DWORD1(v45) = *(_DWORD *)((char *)v12 + 79);
      *((void *)&v45 + 1) = *(unint64_t *)((char *)v12 + 83);
      uint64_t v46 = *(unsigned int *)((char *)v12 + 91);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v47, &v63);
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]( (uint64_t)&v49,  (uint64_t)&v61);
      a5 = v16;
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]( (uint64_t)&__p,  (uint64_t)v58);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      uint64_t v57 = 0LL;
      v27[4] = v44;
      v27[5] = v45;
      uint64_t v28 = v46;
      v27[0] = v41;
      v27[1] = v42;
      v27[2] = *(_OWORD *)v43;
      uint64_t v27[3] = *(_OWORD *)&v43[16];
      v29.__r_.__value_.__s.__data_[0] = 0;
      char v30 = 0;
      if (v48)
      {
        std::string v29 = v47;
        memset(&v47, 0, sizeof(v47));
        char v30 = 1;
      }

      LOBYTE(v31) = 0;
      char v33 = 0;
      if (v51)
      {
        __int128 v31 = v49;
        uint64_t v32 = v50;
        uint64_t v50 = 0LL;
        __int128 v49 = 0uLL;
        char v33 = 1;
      }

      LOBYTE(v34) = 0;
      char v36 = 0;
      if (v54)
      {
        __int128 v34 = __p;
        uint64_t v35 = v53;
        uint64_t v53 = 0LL;
        __int128 __p = 0uLL;
        char v36 = 1;
      }

      uint64_t v37 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      uint64_t v56 = 0LL;
      uint64_t v57 = 0LL;
      uint64_t v55 = 0LL;
      char v40 = 1;
      unint64_t v66 = (void **)&v55;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v54 && (void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }

      if (v51 && (void)v49)
      {
        *((void *)&v49 + 1) = v49;
        operator delete((void *)v49);
      }

      if (v59 && v58[0])
      {
        v58[1] = v58[0];
        operator delete(v58[0]);
      }

      if (v62 && v61.__r_.__value_.__r.__words[0])
      {
        v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
        operator delete(v61.__r_.__value_.__l.__data_);
      }

      if (v65 && v64 < 0) {
        operator delete((void *)v63);
      }
      if (!v40) {
        goto LABEL_45;
      }
      unint64_t v19 = a4[1];
      if (v19 >= a4[2])
      {
        uint64_t v20 = std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>(a4, v27);
      }

      else
      {
        CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(a4[1], v27);
        uint64_t v20 = v19 + 224;
        a4[1] = v19 + 224;
      }

      a4[1] = v20;
      if (((a1[1] - *a1) >> 3) - 1 > v11
        && (recursively_create_region_tree(a1, a2, v21, v20 - 24, v14, v13, a7) & 1) == 0)
      {
        goto LABEL_45;
      }

      *(void *)(v22 + 8 * v11) += 8LL;
      std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
      unint64_t v7 = *(unint64_t ***)(v22 + 8 * v11);
    }

    if (v14 >= a5) {
      return !CSRangeIntersectsRange(a5, a6, v14, v13);
    }
    return 0LL;
  }

  return result;
}

void sub_186057210( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  *(void *)(v11 + _Block_object_dispose(va, 8) = v12;
  std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 - 1 == a3)
  {
    BOOL result = find_core_file_region_info_containing_or_after_location((char **)(a5 + 200), a2);
  }

  else
  {
    unint64_t v7 = *(char **)(a5 + 200);
    BOOL v8 = *(char **)(a5 + 208);
    if (v8 != v7)
    {
      unint64_t v9 = 0x6DB6DB6DB6DB6DB7LL * ((v8 - v7) >> 5);
      do
      {
        unint64_t v10 = v9 >> 1;
        uint64_t v11 = &v7[224 * (v9 >> 1)];
        uint64_t v13 = *(void *)v11;
        uint64_t v14 = *((void *)v11 + 1);
        uint64_t v12 = v11 + 224;
        v9 += ~(v9 >> 1);
        if (v14 + v13 <= a2) {
          unint64_t v7 = v12;
        }
        else {
          unint64_t v9 = v10;
        }
      }

      while (v9);
    }

    if (v7 == v8 || a2 - *(void *)v7 >= *((void *)v7 + 1)) {
      return 0LL;
    }
    else {
      return (char *)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address();
    }
  }

  return result;
}

char *find_core_file_region_info_containing_or_after_location(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  BOOL result = a1[1];
  if (result != v3)
  {
    unint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((result - v3) >> 5);
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = (uint64_t *)&v3[224 * (v4 >> 1)];
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      unint64_t v7 = (char *)(v6 + 28);
      v4 += ~(v4 >> 1);
      if (v9 + v8 <= a2) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }

    while (v4);
    return v3;
  }

  return result;
}

uint64_t CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a3 > a4) {
    return 0LL;
  }
  if (*(_BYTE *)(a5 + 68))
  {
    unint64_t v5 = *(void **)(a5 + 200);
    unint64_t v6 = *(void **)(a5 + 208);
    if (v5 == v6)
    {
      return a5 & 0xFFFFFFFFFFFFFF00LL;
    }

    else
    {
      unint64_t v10 = a3 + 1;
      while (1)
      {
        if (v5[1] + *v5 > a2)
        {
          a5 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address(a1, a2, v10, a4, v5);
          if (v11) {
            break;
          }
        }

        v5 += 28;
        if (v5 == v6) {
          return a5 & 0xFFFFFFFFFFFFFF00LL;
        }
      }
    }
  }

  return a5;
}

uint64_t CSCppCoreFileRegionsTree::get_region_at_address( char **this, unint64_t a2, unint64_t a3)
{
  core_file_region_info_containing_or_after_location = find_core_file_region_info_containing_or_after_location(this, a2);
  unint64_t v7 = this[1];
  if (v7 == core_file_region_info_containing_or_after_location) {
    return 0LL;
  }
  uint64_t v8 = (uint64_t)core_file_region_info_containing_or_after_location;
  if (a3
    && a2 - *(void *)core_file_region_info_containing_or_after_location >= *((void *)core_file_region_info_containing_or_after_location
                                                                             + 1))
  {
LABEL_4:
    while (1)
    {
      uint64_t v9 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address( (uint64_t)this,  a2,  0LL,  a3,  v8);
      if (v10) {
        break;
      }
      v8 += 224LL;
    }

    return v9;
  }

  if (a3 && core_file_region_info_containing_or_after_location[68])
  {
    uint64_t v9 = (uint64_t)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address( (uint64_t)this,  a2,  1LL,  a3,  (uint64_t)core_file_region_info_containing_or_after_location);
    if (!v11) {
      goto LABEL_4;
    }
    return v9;
  }

  return v8;
}

void CSCppCoreFileRegionsTree::get_dispositions( char **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (a2 % a4 || (unint64_t v9 = a3 % a4) != 0)
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 24) = 0;
    return;
  }

  __int128 v41 = 0LL;
  __int128 v11 = 0uLL;
  *(_OWORD *)__int128 __p = 0u;
  unint64_t v12 = a2 + a3;
  if (a2 >= a2 + a3)
  {
LABEL_49:
    *(_OWORD *)a6 = v11;
    *(void *)(a6 + 16) = v9;
    *(_BYTE *)(a6 + 24) = 1;
    return;
  }

  unint64_t v37 = a3 / a4;
  unint64_t v14 = a2;
  unint64_t v39 = a2 + a3;
  while (1)
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this, v14, 0x270FuLL);
    if (!v16) {
      break;
    }
    unint64_t v17 = (unint64_t *)region_at_address;
    if (*(_BYTE *)(region_at_address + 68)) {
      break;
    }
    unint64_t v18 = *(void *)region_at_address;
    if (v14 != a2 && v14 != v18) {
      break;
    }
    if (*(_BYTE *)(region_at_address + 67) != 3)
    {
      uint64_t v31 = region_at_address + 136;
      uint64_t v32 = 168LL;
      if (a5) {
        uint64_t v32 = 136LL;
      }
      else {
        uint64_t v31 = region_at_address + 168;
      }
      if (!*(_BYTE *)(v31 + 24)) {
        break;
      }
      char v33 = *(char **)(region_at_address + v32);
      if (v14 > v18) {
        __int128 v34 = &v33[2 * ((v14 - v18) / a4)];
      }
      else {
        __int128 v34 = v33;
      }
      unint64_t v35 = (uint64_t)(*(void *)(v31 + 8) - (void)v33) >> 1;
      if (v35 >= (v12 - v14) / a4) {
        uint64_t v36 = (v12 - v14) / a4;
      }
      else {
        uint64_t v36 = v35;
      }
      std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>( (uint64_t)__p,  (uint64_t)__p[1],  v34,  &v34[2 * v36],  v36);
      goto LABEL_46;
    }

    if (a3 >= a4)
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = (char *)__p[1];
      if (v37 <= 1) {
        uint64_t v21 = 1LL;
      }
      else {
        uint64_t v21 = v37;
      }
      do
      {
        if (v20 >= v41)
        {
          uint64_t v23 = (char *)__p[0];
          uint64_t v24 = v20 - (char *)__p[0];
          uint64_t v25 = v24 >> 1;
          else {
            uint64_t v26 = v41 - (char *)__p[0];
          }
          else {
            uint64_t v27 = v26;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v41, v27);
            uint64_t v23 = (char *)__p[0];
            uint64_t v20 = (char *)__p[1];
          }

          else
          {
            uint64_t v28 = 0LL;
          }

          std::string v29 = &v28[2 * v25];
          *(_WORD *)std::string v29 = 0;
          uint64_t v22 = v29 + 2;
          while (v20 != v23)
          {
            __int16 v30 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }

          __p[0] = v29;
          __p[1] = v22;
          __int128 v41 = &v28[2 * v27];
          if (v23) {
            operator delete(v23);
          }
        }

        else
        {
          *(_WORD *)uint64_t v20 = 0;
          uint64_t v22 = v20 + 2;
        }

        __p[1] = v22;
        ++v19;
        uint64_t v20 = (char *)v22;
      }

      while (v19 != v21);
LABEL_46:
      unint64_t v18 = *v17;
      unint64_t v12 = v39;
    }

    unint64_t v14 = v17[1] + v18;
    if (v14 >= v12)
    {
      __int128 v11 = *(_OWORD *)__p;
      unint64_t v9 = (unint64_t)v41;
      goto LABEL_49;
    }
  }

  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 24) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_18605782C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CSCppCoreFileMetadata::region_filename( char **this, unint64_t a2, char *a3, unsigned int a4)
{
  if (*((_BYTE *)this + 112))
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v8)
    {
      if (a2 - *(void *)region_at_address < *(void *)(region_at_address + 8) && *(_BYTE *)(region_at_address + 128))
      {
        unint64_t v9 = (const char *)(region_at_address + 104);
        if (*(char *)(region_at_address + 127) < 0)
        {
          unint64_t v11 = *(void *)(region_at_address + 112) + 1LL;
          if (v11 <= a4)
          {
            unint64_t v9 = *(const char **)v9;
            goto LABEL_12;
          }
        }

        else
        {
          uint64_t v10 = *(unsigned __int8 *)(region_at_address + 127);
          if (v10 < a4)
          {
            unint64_t v11 = v10 + 1;
LABEL_12:
            strcpy(a3, v9);
            return v11;
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t CSCppCoreFileDarwinMetadata::get_udata_pointers( CSCppCoreFileDarwinMetadata *this, void *__dst, unint64_t *a3)
{
  uint64_t result = 4LL;
  if (a3 && *((_BYTE *)this + 560))
  {
    if (__dst)
    {
      int64_t v6 = *((void *)this + 42) - *((void *)this + 41);
      if (*a3 < v6 >> 3) {
        return 4LL;
      }
      unint64_t v7 = (void *)((char *)this + 328);
      char v8 = (void *)((char *)this + 336);
      memcpy(__dst, *((const void **)this + 41), v6);
    }

    else
    {
      unint64_t v7 = (void *)((char *)this + 328);
      char v8 = (void *)((char *)this + 336);
    }

    uint64_t result = 0LL;
    *a3 = (uint64_t)(*v8 - *v7) >> 3;
  }

  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_udata_pointers( CSCppCoreFileExclavesMetadata *this, unint64_t *a2, unint64_t *a3)
{
  if (!a3) {
    return 4LL;
  }
  uint64_t result = 0LL;
  if (!a2) {
    *a3 = 0LL;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_owned_vm_objects(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t result = 4LL;
  if (a3 && *(_BYTE *)(a1 + 560))
  {
    uint64_t v7 = a1 + 360;
    int64_t v6 = *(const void **)(a1 + 360);
    int64_t v8 = *(void *)(v7 + 8) - (void)v6;
    unint64_t v9 = v8 + 8;
    if (a2)
    {
      if (*a3 < v9) {
        return 4LL;
      }
      *a2 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
      memcpy(a2 + 1, v6, v8);
    }

    uint64_t result = 0LL;
    *a3 = v9;
  }

  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_owned_vm_objects(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4LL;
  }
  uint64_t result = 0LL;
  *a3 = 0LL;
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_purgable_control(char **this, unint64_t a2, int a3, int *a4)
{
  uint64_t result = 4LL;
  if (a3 == 1 && a4 && *((_BYTE *)this + 112))
  {
    region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v9
      && a2 - *(void *)region_at_address < *(void *)(region_at_address + 8)
      && (int v10 = *(_DWORD *)(region_at_address + 96), v10 != 0x7FFFFFFF))
    {
      uint64_t result = 0LL;
      *a4 = v10;
    }

    else
    {
      return 5LL;
    }
  }

  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_page_range_query( CSCppCoreFileMetadata *this, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  uint64_t v6 = 4LL;
  if (!a5) {
    return v6;
  }
  uint64_t v7 = a4;
  if (!a4 || !*((_BYTE *)this + 112)) {
    return v6;
  }
  if (CSArchitectureIsArm(*((void *)this + 5)) || CSArchitectureIsArm64(*((void *)this + 5)))
  {
    unint64_t v13 = 0x4000LL;
    if (!a3) {
      return v6;
    }
  }

  else
  {
    if (!CSArchitectureIsX86_64(*((void *)this + 5))) {
      return 5LL;
    }
    unint64_t v13 = 4096LL;
    if (!a3) {
      return v6;
    }
  }

  if (((v13 - 1) & (a3 | a2)) != 0) {
    return v6;
  }
  CSCppCoreFileRegionsTree::get_dispositions((char **)this + 11, a2, a3, v13, a6, (uint64_t)&v21);
  if (!v23) {
    return 5LL;
  }
  unint64_t v14 = v21;
  unint64_t v15 = v22;
  if (*a5 >= v22 - v21)
  {
    unint64_t v16 = v22 - v21;
    *a5 = v16;
    if (v15 != v14)
    {
      if (v16 <= 1) {
        uint64_t v17 = 1LL;
      }
      else {
        uint64_t v17 = v16;
      }
      unint64_t v18 = v14;
      do
      {
        int v19 = *v18++;
        *v7++ = v19;
        --v17;
      }

      while (v17);
      uint64_t v6 = 0LL;
      goto LABEL_24;
    }

    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 5LL;
  }

  if (v14) {
LABEL_24:
  }
    operator delete(v14);
  return v6;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64( uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (!*(_BYTE *)(a1 + 112)) {
    return 4LL;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10) {
    return 1LL;
  }
  uint64_t v11 = region_at_address;
  uint64_t result = 0LL;
  int v13 = *(_DWORD *)(v11 + 28);
  int v14 = *(_DWORD *)(v11 + 40);
  int v15 = *(_DWORD *)(v11 + 60);
  __int16 v16 = *(_WORD *)(v11 + 64);
  __int16 v17 = *(_WORD *)(v11 + 66);
  int v18 = *(unsigned __int8 *)(v11 + 68);
  *(void *)(a5 + 12) = *(void *)(v11 + 32);
  __int16 v19 = *(_WORD *)(v11 + 80);
  uint64_t v20 = *(void *)(v11 + 20);
  *(_WORD *)(a5 + 2_Block_object_dispose(va, 8) = v16;
  uint64_t v21 = *(void *)(v11 + 72);
  *(void *)a5 = v20;
  *(_DWORD *)(a5 + _Block_object_dispose(va, 8) = v13;
  *(_DWORD *)(a5 + 20) = v14;
  *(_DWORD *)(a5 + 24) = v15;
  *(_WORD *)(a5 + 30) = v17;
  *(_DWORD *)(a5 + 32) = v18;
  *(void *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v19;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(void *)v11;
  *a3 = *(void *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64( uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (!*(_BYTE *)(a1 + 112)) {
    return 4LL;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10) {
    return 1LL;
  }
  uint64_t v11 = region_at_address;
  uint64_t result = 0LL;
  int v13 = *(_DWORD *)(v11 + 28);
  __int16 v14 = *(_WORD *)(v11 + 64);
  __int16 v15 = *(_WORD *)(v11 + 66);
  int v16 = *(unsigned __int8 *)(v11 + 68);
  __int16 v17 = *(_WORD *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 88);
  *(void *)(a5 + 12) = *(void *)(v11 + 32);
  int v19 = *(_DWORD *)(v11 + 84);
  __int128 v20 = *(_OWORD *)(v11 + 40);
  uint64_t v21 = *(void *)(v11 + 56);
  uint64_t v22 = *(void *)(v11 + 72);
  *(void *)a5 = *(void *)(v11 + 20);
  *(_DWORD *)(a5 + _Block_object_dispose(va, 8) = v13;
  *(_OWORD *)(a5 + 20) = v20;
  *(void *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v14;
  *(_WORD *)(a5 + 46) = v15;
  *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = v16;
  *(void *)(a5 + 52) = v22;
  *(_WORD *)(a5 + 60) = v17;
  *(_DWORD *)(a5 + 64) = v19;
  *(void *)(a5 + 6_Block_object_dispose(va, 8) = v18;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(void *)v11;
  *a3 = *(void *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_exclave_vm_flags_for_address( CSCppCoreFileExclavesMetadata *this, unint64_t a2, unsigned int *a3)
{
  if (!a3) {
    return 4LL;
  }
  if (!*((_BYTE *)this + 112)) {
    return 4LL;
  }
  region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)this + 11, a2, 0LL);
  if (!v5) {
    return 1LL;
  }
  uint64_t v6 = region_at_address;
  uint64_t result = 0LL;
  *a3 = *(_DWORD *)(v6 + 100);
  return result;
}

uint64_t parse_addrable_bits_note(const char *a1, const note_command *a2)
{
  if (a2->size >= 0x10)
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2->offset);
    char v5 = (int *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32LL))(v11, a2->offset, 16LL);
    if (v6 >= 0x10
      && ((int v7 = *v5, *v5 == 4) || v7 == 3 || v7 == 2)
      && (uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32LL))(v11, a2->offset, 16LL),
          v9 >= 0x10))
    {
      uint64_t v3 = ~(-1LL << *(_DWORD *)(v8 + 4));
      uint64_t v4 = v3 & 0x7FFFFFFFFFFFFF00LL;
    }

    else
    {
      LOBYTE(v3) = 0;
      uint64_t v4 = 0LL;
    }

    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }

  else
  {
    LOBYTE(v3) = 0;
    uint64_t v4 = 0LL;
  }

  return v4 & 0x7FFFFFFFFFFFFF00LL | v3;
}

void sub_186057F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void CSCppCoreFileDarwinMetadata::~CSCppCoreFileDarwinMetadata(CSCppCoreFileDarwinMetadata *this)
{
}

{
  *(void *)this = off_189DF98F8;
  if (*((_BYTE *)this + 560)) {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo((CSCppCoreFileDarwinMetadata *)((char *)this + 120));
  }
  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(this);
}

void CSCppCoreFileExclavesMetadata::~CSCppCoreFileExclavesMetadata(CSCppCoreFileExclavesMetadata *this)
{
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>( void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186057FE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>( void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_18605809C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>( uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    a2->n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]( std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>( a1,  a2);
  return a1;
}

void sub_1860581C8(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>( std::string *this, __int128 *a2)
{
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }

    this[1].__r_.__value_.__s.__data_[0] = 1;
  }

uint64_t std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>( (void *)a1,  a2);
  return a1;
}

void sub_186058268(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>( void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    uint64_t v2 = result;
    char *result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    __n128 result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>( result,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *((_BYTE *)v2 + 24) = 1;
  }

  return result;
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186058328(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>( (void *)a1,  a2);
  return a1;
}

void sub_186058370(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>( void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    uint64_t v2 = result;
    char *result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    __n128 result = std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>( result,  *(const void **)a2,  *(void *)(a2 + 8),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }

  return result;
}

void *std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186058444(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>( (uint64_t)(a1 + 2),  a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

__n128 std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>( uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    __int128 v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    __int128 v3 = a2[2];
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 6) = 0LL;
    *((void *)a2 + 4) = 0LL;
    *(_BYTE *)(a1 + 56) = 1;
  }

  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    __int128 v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0LL;
    *((void *)a2 + 10) = 0LL;
    *((void *)a2 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  }

  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    __int128 v5 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v5;
    *((void *)a2 + 13) = 0LL;
    *((void *)a2 + 14) = 0LL;
    *((void *)a2 + 12) = 0LL;
    *(_BYTE *)(a1 + 120) = 1;
  }

  __int128 v6 = a2[10];
  __int128 v7 = a2[11];
  __int128 v8 = *(__int128 *)((char *)a2 + 188);
  __int128 v10 = a2[8];
  __int128 v9 = a2[9];
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 18_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 216) = 0LL;
    *(void *)(a1 + 224) = 0LL;
    *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = a2[13];
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    *((void *)a2 + 26) = 0LL;
    *((void *)a2 + 27) = 0LL;
    *((void *)a2 + 2_Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(a1 + 232) = 1;
  }

  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    *(void *)(a1 + 240) = 0LL;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 256) = 0LL;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *((void *)a2 + 30) = 0LL;
    *((void *)a2 + 31) = 0LL;
    *((void *)a2 + 32) = 0LL;
    *(_BYTE *)(a1 + 264) = 1;
  }

  __int128 v11 = a2[17];
  __int128 v12 = a2[19];
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = a2[18];
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v11;
  __int128 v13 = a2[20];
  __int128 v14 = a2[21];
  __int128 v15 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v15;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  __n128 result = (__n128)a2[24];
  __int128 v17 = a2[25];
  __int128 v18 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 416) = v18;
  *(__n128 *)(a1 + 384) = result;
  *(_BYTE *)(a1 + 440) = 1;
  return result;
}

void CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(CSCppCoreFileTaskCrashinfo *this)
{
  if (*((_BYTE *)this + 264))
  {
    __int128 v2 = (void *)*((void *)this + 30);
    if (v2)
    {
      *((void *)this + 31) = v2;
      operator delete(v2);
    }
  }

  if (*((_BYTE *)this + 232))
  {
    __int128 v3 = (void *)*((void *)this + 26);
    if (v3)
    {
      *((void *)this + 27) = v3;
      operator delete(v3);
    }
  }

  if (*((_BYTE *)this + 24))
  {
  }

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - _Block_object_dispose(va, 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(va, 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    __int128 v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
      operator delete(v3);
    }

    v1 += 24LL;
  }

uint64_t std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer( uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

unint64_t std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>( unint64_t result, unint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v7 = (unint64_t **)result;
LABEL_2:
  __int128 v8 = v7;
  while (2)
  {
    uint64_t v7 = v8;
    uint64_t v9 = (char *)a2 - (char *)v8;
    unint64_t v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        char v40 = *(a2 - 1);
        __int128 v41 = *v8;
        if (*v40 < **v8)
        {
          *__int128 v8 = v40;
          *(a2 - 1) = v41;
        }

        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v8,  v8 + 1,  a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v8,  v8 + 1,  v8 + 2,  a2 - 1);
      case 5uLL:
        __int128 v42 = v8 + 1;
        unint64_t v43 = v8 + 2;
        __int128 v44 = v8 + 3;
        uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v8,  v8 + 1,  v8 + 2,  v8 + 3);
        __int128 v45 = *(a2 - 1);
        uint64_t v46 = v8[3];
        if (*v45 < *v46)
        {
          char *v44 = v45;
          *(a2 - 1) = v46;
          std::string v47 = *v44;
          char v48 = *v43;
          if (**v44 < **v43)
          {
            *unint64_t v43 = v47;
            char *v44 = v48;
            __int128 v49 = *v42;
            if (*v47 < **v42)
            {
              v8[1] = v47;
              v8[2] = v49;
              uint64_t v50 = *v8;
              if (*v47 < **v8)
              {
                *__int128 v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }

        return result;
      default:
        if (v9 <= 191)
        {
          char v51 = v8 + 1;
          BOOL v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              uint64_t v54 = 0LL;
              uint64_t v55 = v8;
              do
              {
                uint64_t v57 = *v55;
                uint64_t v56 = v55[1];
                uint64_t v55 = v51;
                if (*v56 < *v57)
                {
                  uint64_t v58 = v54;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58 + _Block_object_dispose(va, 8) = v57;
                    if (!v58) {
                      break;
                    }
                    uint64_t v57 = *(unint64_t **)((char *)v8 + v58 - 8);
                    v58 -= 8LL;
                    if (*v56 >= *v57)
                    {
                      char v59 = (unint64_t **)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }

                  char v59 = v8;
LABEL_80:
                  *char v59 = v56;
                }

                char v51 = v55 + 1;
                v54 += 8LL;
              }

              while (v55 + 1 != a2);
            }
          }

          else if (!v53)
          {
            do
            {
              __int128 v89 = *v7;
              unsigned int v88 = v7[1];
              uint64_t v7 = v51;
              if (*v88 < *v89)
              {
                do
                {
                  *char v51 = v89;
                  __int128 v89 = *(v51 - 2);
                  --v51;
                }

                while (*v88 < *v89);
                *char v51 = v88;
              }

              char v51 = v7 + 1;
            }

            while (v7 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v60 = (v10 - 2) >> 1;
            int64_t v61 = v60;
            do
            {
              int64_t v62 = v61;
              if (v60 >= v61)
              {
                uint64_t v63 = (2 * v61) | 1;
                char v64 = &v8[v63];
                char v65 = *v64;
                if (2 * v62 + 2 >= (uint64_t)v10)
                {
                  unint64_t v67 = *v65;
                }

                else
                {
                  unint64_t v66 = *v65;
                  unint64_t v67 = *v64[1];
                  BOOL v68 = v66 >= v67;
                  if (v66 > v67) {
                    unint64_t v67 = v66;
                  }
                  if (!v68)
                  {
                    ++v64;
                    uint64_t v63 = 2 * v62 + 2;
                  }
                }

                std::string v69 = &v8[v62];
                char v70 = *v69;
                if (v67 >= **v69)
                {
                  uint64_t v71 = *v64;
                  do
                  {
                    *std::string v69 = v71;
                    std::string v69 = v64;
                    if (v60 < v63) {
                      break;
                    }
                    uint64_t v72 = (2 * v63) | 1;
                    char v64 = &v8[v72];
                    uint64_t v63 = 2 * v63 + 2;
                    uint64_t v71 = *v64;
                    if (v63 >= (uint64_t)v10)
                    {
                      uint64_t result = *v71;
                      uint64_t v63 = v72;
                    }

                    else
                    {
                      int v73 = (unint64_t ***)v64[1];
                      uint64_t result = *v71;
                      BOOL v74 = *v71 >= (unint64_t)*v73;
                      if (*v71 < (unint64_t)*v73)
                      {
                        uint64_t v71 = v64[1];
                        ++v64;
                      }

                      if (v74) {
                        uint64_t v63 = v72;
                      }
                    }
                  }

                  while (result >= *v70);
                  *std::string v69 = v70;
                }
              }

              int64_t v61 = v62 - 1;
            }

            while (v62);
            uint64_t v75 = (unint64_t)v9 >> 3;
            do
            {
              uint64_t v76 = 0LL;
              __int128 v77 = *v8;
              uint64_t v78 = v8;
              do
              {
                uint64_t v79 = &v78[v76 + 1];
                uint64_t v80 = (2 * v76) | 1;
                uint64_t v81 = 2 * v76 + 2;
                if (v81 < v75 && **v79 < *v79[1])
                {
                  ++v79;
                  uint64_t v80 = v81;
                }

                _BYTE *v78 = *v79;
                uint64_t v78 = v79;
                uint64_t v76 = v80;
              }

              while (v80 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == --a2)
              {
                *uint64_t v79 = v77;
              }

              else
              {
                *uint64_t v79 = *a2;
                *a2 = v77;
                uint64_t v82 = (char *)v79 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  char v84 = &v8[v83];
                  __int128 v85 = *v84;
                  __int128 v86 = *v79;
                  if (**v84 < **v79)
                  {
                    do
                    {
                      *uint64_t v79 = v85;
                      uint64_t v79 = v84;
                      if (!v83) {
                        break;
                      }
                      unint64_t v83 = (v83 - 1) >> 1;
                      char v84 = &v8[v83];
                      __int128 v85 = *v84;
                    }

                    while (**v84 < *v86);
                    *uint64_t v79 = v86;
                  }
                }
              }
            }

            while (v75-- > 2);
          }

          return result;
        }

        unint64_t v11 = v10 >> 1;
        char v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( &v7[v10 >> 1],  v7,  a2 - 1);
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v7,  &v7[v10 >> 1],  a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v7 + 1,  v12 - 1,  a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v7 + 2,  &v7[v11 + 1],  a2 - 3);
          uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v12 - 1,  v12,  &v7[v11 + 1]);
          __int128 v13 = *v7;
          *uint64_t v7 = *v12;
          *char v12 = v13;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          __int128 v14 = *v7;
          unint64_t v15 = **v7;
          if (**(v7 - 1) < v15) {
            goto LABEL_12;
          }
          if (v15 >= **(a2 - 1))
          {
            uint64_t v31 = v7 + 1;
            do
            {
              __int128 v8 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }

            while (v15 >= **v8);
          }

          else
          {
            __int128 v8 = v7;
            do
            {
              __int16 v30 = v8[1];
              ++v8;
            }

            while (v15 >= *v30);
          }

          uint64_t v32 = a2;
          if (v8 < a2)
          {
            uint64_t v32 = a2;
            do
              char v33 = *--v32;
            while (v15 < *v33);
          }

          if (v8 < v32)
          {
            __int128 v34 = *v8;
            unint64_t v35 = *v32;
            do
            {
              *__int128 v8 = v35;
              *uint64_t v32 = v34;
              unint64_t v36 = *v14;
              do
              {
                unint64_t v37 = v8[1];
                ++v8;
                __int128 v34 = v37;
              }

              while (v36 >= *v37);
              do
              {
                uint64_t v38 = *--v32;
                unint64_t v35 = v38;
              }

              while (v36 < *v38);
            }

            while (v8 < v32);
          }

          unint64_t v39 = v8 - 1;
          if (v8 - 1 != v7) {
            *uint64_t v7 = *v39;
          }
          a4 = 0;
          *unint64_t v39 = v14;
          continue;
        }

        __int128 v14 = *v7;
        unint64_t v15 = **v7;
LABEL_12:
        uint64_t v16 = 0LL;
        do
          __int128 v17 = v7[++v16];
        while (*v17 < v15);
        __int128 v18 = &v7[v16];
        int v19 = a2;
        if (v16 == 1)
        {
          int v19 = a2;
          do
          {
            if (v18 >= v19) {
              break;
            }
            uint64_t v21 = *--v19;
          }

          while (*v21 >= v15);
        }

        else
        {
          do
            __int128 v20 = *--v19;
          while (*v20 >= v15);
        }

        if (v18 >= v19)
        {
          uint64_t v28 = v18 - 1;
        }

        else
        {
          uint64_t v22 = *v19;
          char v23 = &v7[v16];
          uint64_t v24 = v19;
          do
          {
            *char v23 = v22;
            *uint64_t v24 = v17;
            unint64_t v25 = *v14;
            do
            {
              uint64_t v26 = v23[1];
              ++v23;
              __int128 v17 = v26;
            }

            while (*v26 < v25);
            do
            {
              uint64_t v27 = *--v24;
              uint64_t v22 = v27;
            }

            while (*v27 >= v25);
          }

          while (v23 < v24);
          uint64_t v28 = v23 - 1;
        }

        if (v28 != v7) {
          *uint64_t v7 = *v28;
        }
        *uint64_t v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          uint64_t result = std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>( v7,  v28,  a3,  a4 & 1);
          a4 = 0;
          __int128 v8 = v28 + 1;
          continue;
        }

        BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v7,  v28);
        __int128 v8 = v28 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( v28 + 1,  a2);
        if (!(_DWORD)result)
        {
          if (v29) {
            continue;
          }
          goto LABEL_33;
        }

        a2 = v28;
        if (!v29) {
          goto LABEL_2;
        }
        return result;
    }
  }

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  __int128 v3 = *a2;
  __int128 v4 = *result;
  unint64_t v5 = **a2;
  uint64_t v6 = *a3;
  unint64_t v7 = **a3;
  if (v5 >= **result)
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      __int128 v8 = *result;
      if (**a2 < **result)
      {
        char *result = *a2;
        *a2 = v8;
      }
    }
  }

  else
  {
    if (v7 >= v5)
    {
      char *result = v3;
      *a2 = v4;
      if (**a3 >= *v4) {
        return result;
      }
      *a2 = *a3;
    }

    else
    {
      char *result = v6;
    }

    *a3 = v4;
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( a1,  a1 + 1,  a2 - 1);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( a1,  a1 + 1,  a1 + 2,  a2 - 1);
      return 1LL;
    case 5LL:
      uint64_t v16 = a1 + 1;
      __int128 v17 = a1 + 2;
      __int128 v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( a1,  a1 + 1,  a1 + 2,  a1 + 3);
      int v19 = *(a2 - 1);
      __int128 v20 = a1[3];
      if (*v19 < *v20)
      {
        unsigned __int16 *v18 = v19;
        *(a2 - 1) = v20;
        uint64_t v21 = *v18;
        uint64_t v22 = *v17;
        if (**v18 < **v17)
        {
          *__int128 v17 = v21;
          unsigned __int16 *v18 = v22;
          char v23 = *v16;
          if (*v21 < **v16)
          {
            a1[1] = v21;
            a1[2] = v23;
            uint64_t v24 = *a1;
            if (*v21 < **a1)
            {
              *a1 = v21;
              a1[1] = v24;
            }
          }
        }
      }

      return 1LL;
    default:
      __int128 v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( a1,  a1 + 1,  a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    char v12 = *v9;
    __int128 v13 = *v8;
    if (**v9 < **v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v14 + 24) = v13;
        if (v14 == -16) {
          break;
        }
        __int128 v13 = *(unint64_t **)((char *)a1 + v14 + 8);
        v14 -= 8LL;
        if (*v12 >= *v13)
        {
          unint64_t v15 = (unint64_t **)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }

      unint64_t v15 = a1;
LABEL_13:
      *unint64_t v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }

    __int128 v8 = v9;
    v10 += 8LL;
    if (++v9 == a2) {
      return 1LL;
    }
  }

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>( a1,  a2,  a3);
  uint64_t v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }

  return result;
}

void cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == -1LL || !a3)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }

  else
  {
    unint64_t v8 = 2 * a3;
    CSCppFileMemory::CSCppFileMemory(v26, *(void *)a1, a2);
    uint64_t v10 = CSCppFileMemory::bytes_at(v26, a2, 2 * a3);
    if (v10 && v9 >= v8)
    {
      __int128 __p = 0LL;
      uint64_t v24 = 0LL;
      unint64_t v25 = 0LL;
      std::vector<unsigned short>::reserve(&__p, a3);
      uint64_t v11 = 0LL;
      char v12 = v24;
      do
      {
        if (v12 >= v25)
        {
          __int128 v13 = (char *)__p;
          uint64_t v14 = v12 - (_BYTE *)__p;
          if (v12 - (_BYTE *)__p <= -3) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          else {
            uint64_t v16 = v25 - (_BYTE *)__p;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17)
          {
            __int128 v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v25, v17);
            __int128 v13 = (char *)__p;
            char v12 = v24;
          }

          else
          {
            __int128 v18 = 0LL;
          }

          int v19 = &v18[2 * v15];
          *(_WORD *)int v19 = *(_WORD *)(v10 + 2 * v11);
          __int128 v20 = v19 + 2;
          while (v12 != v13)
          {
            __int16 v21 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v19 - 1) = v21;
            v19 -= 2;
          }

          __int128 __p = v19;
          uint64_t v24 = v20;
          unint64_t v25 = &v18[2 * v17];
          if (v13) {
            operator delete(v13);
          }
          char v12 = v20;
        }

        else
        {
          *(_WORD *)char v12 = *(_WORD *)(v10 + 2 * v11);
          v12 += 2;
        }

        uint64_t v24 = v12;
        ++v11;
      }

      while (v11 != a3);
      uint64_t v22 = v25;
      *(void *)a4 = __p;
      *(void *)(a4 + _Block_object_dispose(va, 8) = v12;
      *(void *)(a4 + 16) = v22;
      *(_BYTE *)(a4 + 24) = 1;
    }

    else
    {
      printf( "Error mapping dispositions for region %p-%p\n",  *(const void **)(a1 + 8),  (const void *)(*(void *)(a1 + 16) + *(void *)(a1 + 8)));
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
    }

    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v26);
  }

void sub_186059518( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a14);
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000LL) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    unint64_t v9 = &v6[2 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }

      while (v11 != v10);
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

uint64_t std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>( (void *)a1,  a2);
  return a1;
}

void sub_186059638(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>( void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    uint64_t v2 = result;
    char *result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    BOOL result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>( result,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *((_BYTE *)v2 + 24) = 1;
  }

  return result;
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>( void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1860596F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>( uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7LL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492LL) {
    unint64_t v9 = 0x124924924924924LL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int16 v13 = v10;
  uint64_t v14 = &v10[224 * v4];
  uint64_t v16 = &v10[224 * v9];
  CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo((uint64_t)v14, a2);
  uint64_t v15 = v14 + 224;
  std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_186059858(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  __int128 v6 = a2[3];
  __int128 v7 = a2[4];
  __int128 v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]( (std::string *)(a1 + 104),  (__int128 *)((char *)a2 + 104));
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]( a1 + 136,  (uint64_t)a2 + 136);
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]( a1 + 168,  (uint64_t)a2 + 168);
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( (void *)(a1 + 200),  *((void *)a2 + 25),  *((void *)a2 + 26),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 5));
  return a1;
}

void sub_186059928(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 192))
  {
    __int128 v6 = *v4;
    if (*v4)
    {
      *(void *)(v1 + 176) = v6;
      operator delete(v6);
    }
  }

  if (*(_BYTE *)(v1 + 160))
  {
    __int128 v7 = *v3;
    if (*v3)
    {
      *(void *)(v1 + 144) = v7;
      operator delete(v7);
    }
  }

  if (*(_BYTE *)(v1 + 128))
  {
  }

  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  __int128 v5 = (__int128 *)*a1;
  __int128 v4 = (__int128 *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 224LL;
    v4 -= 14;
    std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v6, v4);
  }

  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a2);
}

__n128 std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>( uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v7;
    *((void *)a2 + 14) = 0LL;
    *((void *)a2 + 15) = 0LL;
    *((void *)a2 + 13) = 0LL;
    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
    *(void *)(a1 + 152) = 0LL;
    *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *((void *)a2 + 17) = 0LL;
    *((void *)a2 + 1_Block_object_dispose(va, 8) = 0LL;
    *((void *)a2 + 19) = 0LL;
    *(_BYTE *)(a1 + 160) = 1;
  }

  *(_BYTE *)(a1 + 16_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 176) = 0LL;
    *(void *)(a1 + 184) = 0LL;
    *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(__int128 *)((char *)a2 + 168);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *((void *)a2 + 21) = 0LL;
    *((void *)a2 + 22) = 0LL;
    *((void *)a2 + 23) = 0LL;
    *(_BYTE *)(a1 + 192) = 1;
  }

  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  __n128 result = *(__n128 *)((char *)a2 + 200);
  *(__n128 *)(a1 + 200) = result;
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *((void *)a2 + 25) = 0LL;
  *((void *)a2 + 26) = 0LL;
  *((void *)a2 + 27) = 0LL;
  return result;
}

void std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(uint64_t a1)
{
  __int128 v4 = (void **)(a1 + 200);
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(_BYTE *)(a1 + 192))
  {
    __int128 v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 160))
  {
    __int128 v3 = *(void **)(a1 + 136);
    if (v3)
    {
      *(void *)(a1 + 144) = v3;
      operator delete(v3);
    }
  }

  if (*(_BYTE *)(a1 + 128))
  {
  }

uint64_t std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(i - 224);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]( uint64_t a1)
{
  if (*(_BYTE *)(a1 + 224))
  {
    __int128 v5 = (void **)(a1 + 200);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*(_BYTE *)(a1 + 192))
    {
      __int128 v2 = *(void **)(a1 + 168);
      if (v2)
      {
        *(void *)(a1 + 176) = v2;
        operator delete(v2);
      }
    }

    if (*(_BYTE *)(a1 + 160))
    {
      uint64_t v3 = *(void **)(a1 + 136);
      if (v3)
      {
        *(void *)(a1 + 144) = v3;
        operator delete(v3);
      }
    }
  }

  return a1;
}

void *std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( (uint64_t)(v6 + 2),  a2,  a3,  v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_186059D10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(va, 8) = v10;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925LL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>( (uint64_t)(a1 + 2),  a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo( (CSCppCoreFileRegionInfo *)(a4 + v7),  (const CSCppCoreFileRegionInfo *)(a2 + v7));
      v7 += 224LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_186059DE0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4 + v2);
      v2 -= 224LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4);
      }

      while (v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100]( uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      __int128 v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      __int128 v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>( uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  __int128 v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    __int16 v13 = *(void **)a1;
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      __int128 v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    }
    else {
      __int128 v18 = 0LL;
    }
    uint64_t v28 = &v18[2 * v14];
    __int128 __p = v18;
    __int128 v34 = v28;
    unint64_t v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    __int16 v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)uint64_t v28 = v31;
      v28 += 2;
      v29 -= 2LL;
    }

    while (v29);
    unint64_t v35 = v30;
    __int128 v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }

  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    __int16 v21 = &__src[2 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_18:
    uint64_t v24 = &v5[2 * a5];
    unint64_t v25 = &v23[-2 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)uint64_t v26 = v27;
        v26 += 2;
      }

      while ((unint64_t)v25 < v12);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }

  __int16 v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_18605A0D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  __int128 v5 = *(char **)(a2 + 8);
  __int128 v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + _Block_object_dispose(va, 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  __int16 v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( a1,  a2[1]);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)(a2 + 6),  (void *)a2[7]);
    operator delete(a2);
  }

void std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( a1,  a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }

    operator delete(a2);
  }

void OUTLINED_FUNCTION_0_0(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + _Block_object_dispose(va, 8) = __p;
  operator delete(__p);
}

uint64_t CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(uint64_t a1, unint64_t **a2)
{
  *(void *)a1 = off_189DF9BE8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0LL;
  uint64_t v4 = *a2;
  __int128 v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      unint64_t v20 = *v4;
      __int16 v21 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        *(void *)&__int128 v19 = v6;
        *((void *)&v19 + 1) = v7;
        do
          unint64_t v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }

      else
      {
        __int128 v19 = v6;
      }

      CSCppSymbolOwnerTimeline::add_symbol_owner(a1, &v19);
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      if (*((void *)&v19 + 1))
      {
        int64_t v12 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      uint64_t v14 = v21;
      if (v21)
      {
        unint64_t v15 = (unint64_t *)&v21->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      v4 += 2;
    }

    while (v4 != v5);
    uint64_t v4 = *a2;
    for (uint64_t i = (uint64_t)a2[1];
          (unint64_t *)i != v4;
      ;
    }
  }

  a2[1] = v4;
  return a1;
}

void sub_18605A418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( v12,  *(void **)(v11 + 16));
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerTimeline::add_symbol_owner(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(CSCppSegmentRange **)(*(void *)a2 + 32LL);
  __int128 v5 = *(CSCppSegmentRange **)(*(void *)a2 + 40LL);
  if (v4 == v5)
  {
LABEL_31:
    uint64_t v24 = (char **)(a1 + 56);
    uint64_t v25 = 1LL;
    goto LABEL_34;
  }

  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  int v8 = *(_DWORD *)(*(void *)a2 + 108LL);
  do
  {
    if (!v6) {
      goto LABEL_20;
    }
    unint64_t v9 = v6 + v7;
    if (v6 + v7 != *(void *)v4)
    {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 1);
      v28[0] = *(void *)a2;
      v28[1] = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }

      char inserted = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v28);
      if (v11)
      {
        unint64_t v15 = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      if ((inserted & 1) == 0) {
        goto LABEL_33;
      }
LABEL_20:
      unint64_t v7 = *(void *)v4;
      uint64_t v6 = *((void *)v4 + 1);
      goto LABEL_21;
    }

    unint64_t v10 = *((void *)v4 + 1) + v9;
    if (v9 > v10) {
      unint64_t v10 = v6 + v7;
    }
    if (v7 >= v9) {
      v7 += v6;
    }
    uint64_t v6 = v10 - v7;
LABEL_21:
    uint64_t v4 = (CSCppSegmentRange *)((char *)v4 + 32);
  }

  while (v4 != v5);
  if (!v6) {
    goto LABEL_31;
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)a2 + 1);
  v27[0] = *(void *)a2;
  v27[1] = v17;
  if (v17)
  {
    __int128 v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  int v20 = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v27);
  char v21 = v20;
  if (!v17) {
    goto LABEL_30;
  }
  int64_t v22 = (unint64_t *)&v17->__shared_owners_;
  do
    unint64_t v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v21 & 1) != 0) {
      goto LABEL_31;
    }
  }

  else
  {
LABEL_30:
    if (v20) {
      goto LABEL_31;
    }
  }

void sub_18605A624( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline( CSCppSymbolOwnerTimeline *this, const CSCppSymbolOwnerTimeline *a2)
{
  *(void *)this = off_189DF9BE8;
  *((void *)this + 2) = 0LL;
  *((void *)this + 1) = (char *)this + 16;
  uint64_t v4 = (uint64_t **)((char *)this + 8);
  *((void *)this + 3) = 0LL;
  *((_OWORD *)this + 2) = 0u;
  __int128 v5 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)this + 56,  *((void **)a2 + 7),  *((void **)a2 + 8),  (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 4);
  *((void *)this + 10) = 0LL;
  *((void *)this + 11) = 0LL;
  *((void *)this + 12) = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)this + 80,  *((void **)a2 + 10),  *((void **)a2 + 11),  (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 4);
  if (this != a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>( v4,  *((void **)a2 + 1),  (void *)a2 + 2);
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>( (uint64_t)v5,  *((void *)a2 + 4),  *((void *)a2 + 5),  (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  }

void sub_18605A724(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t CSCppSymbolOwnerTimeline::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( a1 + 56,  *(uint64_t **)(a2 + 56),  *(uint64_t **)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( a1 + 80,  *(uint64_t **)(a2 + 80),  *(uint64_t **)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>( (uint64_t **)(a1 + 8),  *(void **)(a2 + 8),  (void *)(a2 + 16));
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>( a1 + 32,  *(void *)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  }

  return a1;
}

CSCppSymbolOwner *CSCppSymbolOwnerTimeline::symbol_owner_with_address_at_time( CSCppSymbolOwnerTimeline *this, unint64_t a2, unint64_t a3)
{
  __n128 result = 0LL;
  if (a2 == -1LL || a3 == 0x8000000000000001LL) {
    return result;
  }
  if (!*((void *)this + 3)) {
    return 0LL;
  }
  unint64_t v6 = a3 - 0x7FFFFFFFFFFFFFFFLL;
  if (a3 - 0x7FFFFFFFFFFFFFFFLL >= 2) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFDLL;
  }
  int v8 = (uint64_t *)((char *)this + 16);
  unint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    do
    {
      unint64_t v10 = v9[4];
      BOOL v11 = v10 > a2;
      if (v10 <= a2) {
        uint64_t v12 = v9 + 1;
      }
      else {
        uint64_t v12 = v9;
      }
      if (v11) {
        int v8 = v9;
      }
      unint64_t v9 = (void *)*v12;
    }

    while (*v12);
  }

  uint64_t v13 = *v8;
  if (*v8)
  {
    do
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
    }

    while (v13);
  }

  else
  {
    do
    {
      uint64_t v14 = v8[2];
      BOOL v15 = *(void *)v14 == (void)v8;
      int v8 = (uint64_t *)v14;
    }

    while (v15);
  }

  if (a2 - *(void *)(v14 + 32) >= *(void *)(v14 + 40))
  {
LABEL_22:
    if (v6 < 2) {
      return 0LL;
    }
    goto LABEL_23;
  }

  uint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)(v14 + 48));
  if (v7 - unload_timestamp_range < v17) {
    return *(CSCppSymbolOwner **)(v14 + 48);
  }
  __n128 result = 0LL;
  if (v6 >= 2 && v7 <= *(void *)(*(void *)(v14 + 48) + 88LL))
  {
LABEL_23:
    __int128 v18 = (CSCppSymbolOwner **)*((void *)this + 4);
    unint64_t v19 = (CSCppSymbolOwner **)*((void *)this + 5);
    if (v18 != v19)
    {
      for (uint64_t i = v18 + 2; ; i += 4)
      {
        char v21 = i - 2;
        if (a2 - (unint64_t)*(i - 2) < (unint64_t)*(i - 1))
        {
          uint64_t v22 = CSCppSymbolOwner::load_unload_timestamp_range(*i);
          if (v7 - v22 < v23) {
            break;
          }
        }

        if (v21 + 4 == v19) {
          return 0LL;
        }
      }

      return *i;
    }

    return 0LL;
  }

  return result;
}

uint64_t CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = *MEMORY[0x1895F89C0];
  unint64_t v7 = (void *)(a1 + 16);
  int v8 = *(void **)(a1 + 16);
  unint64_t v9 = (uint64_t **)(a1 + 8);
  if (v8)
  {
    BOOL v11 = (void *)(a1 + 16);
    do
    {
      unint64_t v12 = v8[4];
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      if (v13) {
        BOOL v11 = v8;
      }
      int v8 = (void *)*v14;
    }

    while (*v14);
    if (v11 != v7)
    {
      unint64_t v15 = v11[4];
      unint64_t v16 = a3 + a2;
      if (v15 < a3 + a2)
      {
        unint64_t v17 = v11;
        if (a2 < v11[5] + v15) {
          goto LABEL_22;
        }
      }

      __int128 v18 = (void *)v11[1];
      if (v18)
      {
        do
        {
          unint64_t v17 = v18;
          __int128 v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        unint64_t v19 = v11;
        do
        {
          unint64_t v17 = (void *)v19[2];
          BOOL v20 = *v17 == (void)v19;
          unint64_t v19 = v17;
        }

        while (!v20);
      }

      if (v17 == v7 || (unint64_t v21 = v17[4], v21 >= v16) || a2 >= v17[5] + v21)
      {
        unint64_t v7 = v11;
      }

      else
      {
LABEL_22:
        BOOL v20 = v17 == v7;
        unint64_t v7 = v11;
        if (!v20)
        {
          uint64_t v22 = (CSCppSymbolOwner *)v17[6];
          __int128 v90 = *((_OWORD *)v17 + 2);
          unint64_t v23 = (std::__shared_weak_count *)v17[7];
          uint64_t v91 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }

          unint64_t unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(v22);
          __int128 v89 = v22;
          uint64_t v28 = v27;
          unint64_t v29 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
          if (unload_timestamp_range < v30 + v29 && v29 < v28 + unload_timestamp_range)
          {
            if (v16 <= *((void *)&v90 + 1) + (void)v90) {
              uint64_t v53 = *((void *)&v90 + 1) + v90;
            }
            else {
              uint64_t v53 = a3 + a2;
            }
            else {
              unint64_t v54 = a2;
            }
            uint64_t v55 = v53 - v54;
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
            {
              uint64_t v56 = *((void *)v89 + 11);
              uint64_t v57 = *((void *)v89 + 12);
              uint64_t v58 = *((void *)v89 + 15);
              uint64_t v59 = *(void *)(*(void *)a4 + 88LL);
              uint64_t v60 = *(void *)(*(void *)a4 + 96LL);
              uint64_t v61 = *(void *)(*(void *)a4 + 120LL);
              *(_DWORD *)__int128 buf = 134221058;
              *(void *)&uint8_t buf[4] = v55;
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v90;
              *(_WORD *)&buf[22] = 2048;
              __int128 v93 = (std::__shared_weak_count *)(*((void *)&v90 + 1) + v90);
              __int16 v94 = 2048;
              uint64_t v95 = *((void *)&v90 + 1);
              __int16 v96 = 2048;
              uint64_t v97 = v56;
              __int16 v98 = 2048;
              uint64_t v99 = v57;
              __int16 v100 = 2080;
              uint64_t v101 = v58;
              __int16 v102 = 2048;
              unint64_t v103 = a2;
              __int16 v104 = 2048;
              uint64_t v105 = a3 + a2;
              __int16 v106 = 2048;
              uint64_t v107 = a3;
              __int16 v108 = 2048;
              uint64_t v109 = v59;
              __int16 v110 = 2048;
              uint64_t v111 = v60;
              __int16 v112 = 2080;
              uint64_t v113 = v61;
              _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Timeline modification failed -- dylibs overlap by 0x%llx:\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n",  buf,  0x84u);
            }

            fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Timeline modification failed -- dylibs overlap by 0x%llx:\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n",  v55,  (void)v90,  *((void *)&v90 + 1) + (void)v90,  *((void *)&v90 + 1),  *((void *)v89 + 11),  *((void *)v89 + 12),  *((void *)v89 + 15));
LABEL_67:
            uint64_t v51 = 0LL;
LABEL_87:
            if (v91)
            {
              BOOL v74 = (unint64_t *)&v91->__shared_owners_;
              do
                unint64_t v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }

            return v51;
          }

          uint64_t v32 = *(CSCppSymbolOwner **)a4;
          char v33 = (uint64_t *)(a1 + 32);
          if (*((void *)v89 + 11) >= *(void *)(*(void *)a4 + 88LL))
          {
            uint64_t v63 = *(void *)(a1 + 32);
            uint64_t v62 = *(void *)(a1 + 40);
            if (v63 != v62)
            {
              while (1)
              {
                if (*(void *)v63 < v16 && a2 < *(void *)(v63 + 8) + *(void *)v63)
                {
                  unint64_t v64 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)(v63 + 16));
                  uint64_t v66 = v65;
                  unint64_t v67 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
                  if (v64 < v68 + v67 && v67 < v66 + v64) {
                    break;
                  }
                }

                v63 += 32LL;
                if (v63 == v62)
                {
                  uint64_t v32 = *(CSCppSymbolOwner **)a4;
                  goto LABEL_78;
                }
              }

              unint64_t v76 = *(void *)v63;
              uint64_t v77 = *(void *)(v63 + 8);
              uint64_t v78 = (std::__shared_weak_count *)(v77 + *(void *)v63);
              else {
                uint64_t v79 = a3 + a2;
              }
              if (a2 >= v76) {
                unint64_t v80 = *(void *)v63;
              }
              else {
                unint64_t v80 = a2;
              }
              uint64_t v81 = v79 - v80;
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
              {
                uint64_t v82 = *(void **)(v63 + 16);
                uint64_t v83 = v82[11];
                uint64_t v84 = v82[12];
                uint64_t v85 = v82[15];
                uint64_t v86 = *(void *)(*(void *)a4 + 88LL);
                uint64_t v87 = *(void *)(*(void *)a4 + 96LL);
                uint64_t v88 = *(void *)(*(void *)a4 + 120LL);
                *(_DWORD *)__int128 buf = 134221058;
                *(void *)&uint8_t buf[4] = v81;
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v76;
                *(_WORD *)&buf[22] = 2048;
                __int128 v93 = v78;
                __int16 v94 = 2048;
                uint64_t v95 = v77;
                __int16 v96 = 2048;
                uint64_t v97 = v83;
                __int16 v98 = 2048;
                uint64_t v99 = v84;
                __int16 v100 = 2080;
                uint64_t v101 = v85;
                __int16 v102 = 2048;
                unint64_t v103 = a2;
                __int16 v104 = 2048;
                uint64_t v105 = a3 + a2;
                __int16 v106 = 2048;
                uint64_t v107 = a3;
                __int16 v108 = 2048;
                uint64_t v109 = v86;
                __int16 v110 = 2048;
                uint64_t v111 = v87;
                __int16 v112 = 2080;
                uint64_t v113 = v88;
                _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n",  buf,  0x84u);
                unint64_t v76 = *(void *)v63;
                uint64_t v77 = *(void *)(v63 + 8);
                uint64_t v78 = (std::__shared_weak_count *)(v77 + *(void *)v63);
              }

              fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n 0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n",  v81,  v76,  v78,  v77,  *(void *)(*(void *)(v63 + 16) + 88LL),  *(void *)(*(void *)(v63 + 16) + 96LL),  *(void *)(*(void *)(v63 + 16) + 120LL));
              goto LABEL_67;
            }

void sub_18605B014( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::push_back[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_OWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(result, v12);
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    _OWORD v16[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v16);
    int v8 = (_OWORD *)a1[1];
    uint64_t result = std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)v16);
  }

  else
  {
    *unint64_t v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    int v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }

  a1[1] = (uint64_t)v8;
  return result;
}

void sub_18605B140(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_OWORD *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::emplace_back<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>( uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v4, v12);
    uint64_t v14 = &v13[32 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[32 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    _OWORD v17[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v17);
    int v8 = (_OWORD *)a1[1];
    std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)v17);
  }

  else
  {
    *unint64_t v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    int v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }

  a1[1] = (uint64_t)v8;
  return v8 - 2;
}

void sub_18605B248(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t CSCppSegmentRange::is_valid_address_query_target(CSCppSegmentRange *this, __int16 a2)
{
  uint64_t v4 = (const char *)*((void *)this + 3);
  unint64_t v5 = v4;
  if (!v4) {
    unint64_t v5 = (const char *)*((void *)this + 2);
  }
  uint64_t result = strncmp(v5, "__PAGEZERO", 0xBuLL);
  if ((_DWORD)result)
  {
    if ((a2 & 0x1200) == 0) {
      return 1LL;
    }
    unint64_t v7 = v4;
    if (!v4) {
      unint64_t v7 = (const char *)*((void *)this + 2);
    }
    if (!strncmp(v7, "__LINKEDIT", 0xBuLL)) {
      return 0LL;
    }
    if (*(void *)this) {
      return 1LL;
    }
    if (!v4) {
      uint64_t v4 = (const char *)*((void *)this + 2);
    }
    return !strncmp(v4, "__TEXT", 7uLL);
  }

  return result;
}

BOOL CSCppSymbolOwnerTimeline::remove_symbol_owner(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>( *(__int128 **)(a1 + 56),  *(__int128 **)(a1 + 64),  a2);
  unint64_t v5 = v4;
  unint64_t v6 = *(__int128 **)(a1 + 64);
  if (v6 != v4)
  {
    uint64_t v7 = (uint64_t)v4;
    if (v4 + 1 == v6)
    {
      uint64_t v10 = *(void *)(a1 + 64);
    }

    else
    {
      do
      {
        uint64_t v8 = v7 + 16;
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v7, (__int128 *)(v7 + 16));
        uint64_t v9 = v7 + 32;
        v7 += 16LL;
      }

      while ((__int128 *)v9 != v6);
      uint64_t v10 = *(void *)(a1 + 64);
      uint64_t v7 = v8;
    }

    while (v10 != v7)
      uint64_t v10 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v10 - 16);
    *(void *)(a1 + 64) = v7;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(a1 + 80), a2);
    uint64_t v12 = *(void *)a2;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(uint64_t **)(a1 + 8);
    if (v15 != (uint64_t *)(a1 + 16))
    {
      do
      {
        if (v15[6] == v12)
        {
          unint64_t v17 = std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 8), v15);
          std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 6));
          operator delete(v15);
        }

        else
        {
          unint64_t v16 = (uint64_t *)v15[1];
          if (v16)
          {
            do
            {
              unint64_t v17 = v16;
              unint64_t v16 = (uint64_t *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              unint64_t v17 = (uint64_t *)v15[2];
              BOOL v18 = *v17 == (void)v15;
              uint64_t v15 = v17;
            }

            while (!v18);
          }
        }

        uint64_t v15 = v17;
      }

      while (v17 != (uint64_t *)(a1 + 16));
    }

    if (v11)
    {
      unint64_t v19 = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    unint64_t v21 = *(__int128 **)(a1 + 32);
    uint64_t v22 = *(__int128 **)(a1 + 40);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)a2;
      unint64_t v23 = (std::__shared_weak_count *)*((void *)a2 + 1);
      if (v23)
      {
        unint64_t v25 = (unint64_t *)&v23->__shared_owners_;
        do
          unint64_t v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }

      uint64_t v27 = v21 + 2;
      while (*((void *)v27 - 2) != v24)
      {
        BOOL v18 = v27 == v22;
        v27 += 2;
        if (v18)
        {
          uint64_t v28 = v22;
          goto LABEL_41;
        }
      }

      uint64_t v28 = v27 - 2;
      if (v27 - 2 != v22 && v27 != v22)
      {
        unint64_t v29 = v27 + 1;
        do
        {
          if (*(void *)v29 != v24)
          {
            *uint64_t v28 = *(v29 - 1);
            std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(v28 + 1), v29);
            v28 += 2;
          }

          uint64_t v30 = v29 + 1;
          v29 += 2;
        }

        while (v30 != v22);
      }

void sub_18605B5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

__int128 *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>( __int128 *a1, __int128 *a2, void *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    unint64_t v5 = a2;
  }

  else
  {
    unint64_t v5 = a1;
    while (*(void *)v5 != *a3)
    {
      if (++v5 == a2) {
        goto LABEL_5;
      }
    }
  }

  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      if (*(void *)i != *a3) {
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v5++, i);
      }
    }
  }

  return v5;
}

_OWORD *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::erase( uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>( a3,  *(_OWORD **)(a1 + 8),  a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v7 - 16);
        uint64_t v7 = v8;
      }

      while (v8 != v6);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }

  return a2;
}

void CSCppSymbolOwnerTimeline::~CSCppSymbolOwnerTimeline(CSCppSymbolOwnerTimeline *this)
{
}

{
  void **v2;
  *(void *)this = off_189DF9BE8;
  uint64_t v2 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( (uint64_t)this + 8,  *((void **)this + 2));
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate((void **)a1);
    if (a4 >> 59) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 4;
    if (v9 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = (uint64_t)std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v13 = *(void *)(a1 + 8);
    while (v6 != a3)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v6;
      uint64_t v14 = *(void *)(v6 + 24);
      *(void *)(v13 + 16) = *(void *)(v6 + 16);
      *(void *)(v13 + 24) = v14;
      if (v14)
      {
        uint64_t v15 = (unint64_t *)(v14 + 8);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }

      v6 += 32LL;
      v13 += 32LL;
    }

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 16));
        uint64_t v3 = v5;
      }

      while (v5 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100]((void *)(a3 + 16), (uint64_t *)(v4 + 16));
    a3 += 32LL;
    v4 += 32LL;
  }

  while (v4 != v5);
  return v5;
}

uint64_t std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = (uint64_t)std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      uint64_t v14 = v6[1];
      *uint64_t v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        uint64_t v15 = (unint64_t *)(v14 + 8);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }

      v6 += 2;
      v13 += 2;
    }

LABEL_25:
    *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
    return result;
  }

  uint64_t result = *(void *)(a1 + 8);
  unint64_t v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    uint64_t v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      uint64_t v19 = 16 * v17;
      do
      {
        uint64_t result = (uint64_t)std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16LL;
      }

      while (v19);
      uint64_t v8 = *(uint64_t **)(a1 + 8);
    }

    uint64_t v13 = v8;
    if (v18 != a3)
    {
      uint64_t v13 = v8;
      do
      {
        uint64_t v20 = v18[1];
        *uint64_t v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          unint64_t v21 = (unint64_t *)(v20 + 8);
          do
            unint64_t v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }

        v18 += 2;
        v13 += 2;
      }

      while (v18 != a3);
    }

    goto LABEL_25;
  }

  if (a2 == a3)
  {
    uint64_t v23 = v8;
  }

  else
  {
    uint64_t v23 = v8;
    do
    {
      std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }

    while (v6 != a3);
    uint64_t result = *(void *)(a1 + 8);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v23;
  return result;
}

uint64_t *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer( uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }

  else
  {
    do
    {
      uint64_t v5 = v4 - 32;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      *(void *)(v3 - 16) = 0LL;
      *(void *)(v3 - _Block_object_dispose(va, 8) = 0LL;
      v3 -= 32LL;
      v4 -= 32LL;
    }

    while (v3 != v2);
  }

  a2[1] = v5;
  uint64_t v6 = *result;
  CSCppSymbolOwner *result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>( _OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *a3 = *v4;
    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a3 + 1), v4 + 1);
    a3 += 2;
    v4 += 2;
  }

  while (v4 != v5);
  return v5;
}

void std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( a1,  a2[1]);
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    operator delete(a2);
  }

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>( uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    CSCppSymbolOwner *result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8 + 6, v9 + 6);
          std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi( v5,  v8);
          uint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    uint64_t result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>( v5,  (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_18605BE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi( uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = a1 + 1;
  }

void *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next( uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0LL;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

uint64_t std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    }

    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy( *(void *)a1,  v2);
  }

  return a1;
}

_OWORD *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>( uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = operator new(0x40uLL);
  uint64_t v6 = v5;
  v13[0] = v5;
  v13[1] = v4;
  v5[2] = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  *((void *)v5 + 6) = *(void *)(a2 + 16);
  *((void *)v5 + 7) = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  char v14 = 1;
  uint64_t v10 = *v4;
  BOOL v11 = v4;
  if (*v4)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (uint64_t **)v10;
        uint64_t v10 = (uint64_t *)*v10;
        BOOL v11 = v4;
        if (!*v4) {
          goto LABEL_10;
        }
      }

      uint64_t v10 = (uint64_t *)v10[1];
    }

    while (v10);
    BOOL v11 = v4 + 1;
  }

void std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 48);
    }
    operator delete(v2);
  }

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_hint_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>( uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>( a1,  a2,  &v14,  &v13,  a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    __int128 v9 = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
    *((_OWORD *)v7 + 3) = v9;
    *(void *)(a4 + 16) = 0LL;
    *(void *)(a4 + 24) = 0LL;
    char v12 = 1;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, v14, v8, v7);
    v11[0] = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]( (uint64_t)v11,  0LL);
  }

  return v7;
}

void *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>( void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      __int128 v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        __int128 v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }

      while (v14);
    }

    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    unint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          unint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        unint64_t v16 = (void *)v17[1];
      }

      while (v16);
    }

    else
    {
      unint64_t v17 = a1 + 1;
    }

LABEL_29:
    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unint64_t v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      unint64_t v21 = a1 + 1;
    }

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>( uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = v5[4];
        if (v9 >= v10) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }

      if (v10 >= v9) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v6;
    __int128 v12 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v11 + 3) = v12;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    char v15 = 1;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v14[0] = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]( (uint64_t)v14,  0LL);
    return (uint64_t **)v11;
  }

  return v8;
}

uint64_t CSSymbolicatorCreateWithCoreFilePathAndFlags(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v479 = *MEMORY[0x1895F89C0];
  CSCppFileMemory::CSCppFileMemory(v428, a1, 0LL);
  uint64_t v8 = (_DWORD *)(*(uint64_t (**)(void *, void, uint64_t))(v428[0] + 32LL))(v428, 0LL, 28LL);
  if (!v8 || *v8 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v452, v7, 0LL);
    unint64_t v41 = (_DWORD *)(*(uint64_t (**)(__int128 *, void, uint64_t))(v452 + 32))(&v452, 0LL, 32LL);
    if (!v41 || *v41 != -17958193)
    {
      uint64_t v74 = 0LL;
      goto LABEL_140;
    }

    CSCppFileMemory::CSCppFileMemory(v432, v7, 0LL);
    unint64_t v42 = 32LL;
    do
    {
      unint64_t v43 = (_DWORD *)(*(uint64_t (**)(void *, void, unint64_t))(v432[0] + 32LL))(v432, 0LL, v42);
      uint64_t v45 = (uint64_t)v43;
      if (!v43 || *v43 != -17958193) {
        goto LABEL_138;
      }
      unint64_t v42 = v43[5] + 32LL;
    }

    while (v42 > v44);
    if (v43[3] != 4)
    {
LABEL_138:
      uint64_t v74 = 0LL;
      goto LABEL_139;
    }

    __int128 v430 = 0u;
    *(_OWORD *)v429 = 0u;
    int v431 = 1065353216;
    if (a4)
    {
      uint64_t v46 = (uint64_t *)(a3 + 8);
      do
      {
        uint64_t v47 = *v46;
        v46 += 2;
        *(void *)&__int128 v470 = (v47 & 0xFFFFFFFFFFFFFFFCLL) + 16;
        std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( (uint64_t)v429,  (void *)v470,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v470)[4] = v47 & 0xFFFFFFFFFFFFFFFCLL;
        --a4;
      }

      while (a4);
    }

    unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = (unint64_t)create_mapped_memory_cache_for_core_file_without_exclave_metadata( v7,  "CSSymbolicator for core file");
    if (!mapped_memory_cache_for_core_file_without_exclave_metadata)
    {
      uint64_t v74 = 0LL;
      goto LABEL_451;
    }

    CSCppCoreFileMemory::CSCppCoreFileMemory(v463, mapped_memory_cache_for_core_file_without_exclave_metadata);
    release_core_file_mapped_memory_cache(mapped_memory_cache_for_core_file_without_exclave_metadata);
    *(void *)&__int128 v470 = 0LL;
    uint64_t unretained_reconstructed_core_file_memory = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
    if (!mapped_memory_core_file_get_dyld_all_image_infos_addr( unretained_reconstructed_core_file_memory,  (uint64_t)&v470))
    {
      unint64_t v178 = v470;
      LOBYTE(__p) = 0;
      char v462 = 0;
LABEL_342:
      uint64_t v261 = (*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  v178,  368LL);
      if (v262 <= 0x16F) {
        goto LABEL_370;
      }
      unsigned int v263 = *(_DWORD *)v261;
      uint64_t v264 = *(unsigned int *)(v261 + 4);
      uint64_t v265 = *(void *)(v261 + 8);
      uint64_t v266 = *(void *)(v261 + 32);
      __int128 v267 = *(_OWORD *)(v261 + 136);
      __int128 v475 = *(_OWORD *)(v261 + 120);
      __int128 v476 = v267;
      *(_OWORD *)v477 = *(_OWORD *)(v261 + 152);
      uint64_t v268 = *(void *)(v261 + 176);
      *(void *)&v477[16] = *(void *)(v261 + 168);
      __int128 v269 = *(_OWORD *)(v261 + 72);
      __int128 v471 = *(_OWORD *)(v261 + 56);
      __int128 v472 = v269;
      __int128 v270 = *(_OWORD *)(v261 + 104);
      __int128 v473 = *(_OWORD *)(v261 + 88);
      __int128 v474 = v270;
      __int128 v271 = *(_OWORD *)(v261 + 40);
      unint64_t v272 = *(void *)(v261 + 192);
      unsigned int v273 = *(_DWORD *)(v261 + 320);
      uint64_t v274 = *(void *)(v261 + 344);
      __int128 v469 = *(_OWORD *)(v261 + 352);
      __int128 v470 = v271;
      if (v263 <= 0x10) {
        goto LABEL_370;
      }
      if (v265)
      {
        unsigned int v423 = v273;
        v449 = 0LL;
        v448 = 0LL;
        v450 = 0LL;
        uint64_t v275 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  v265,  24 * v264);
        if (v275)
        {
          uint64_t v419 = v266;
          uint64_t v408 = v274;
          v427 = v7;
          if ((_DWORD)v264)
          {
            uint64_t v276 = 0LL;
            uint64_t v277 = (char *)v449;
            do
            {
              uint64_t v278 = v275 + 24 * v276;
              if (v277 >= v450)
              {
                unint64_t v280 = 0xAAAAAAAAAAAAAAABLL * ((v277 - (_BYTE *)v448) >> 3);
                unint64_t v281 = v280 + 1;
                if (v280 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556LL * ((v450 - (_BYTE *)v448) >> 3) > v281) {
                  unint64_t v281 = 0x5555555555555556LL * ((v450 - (_BYTE *)v448) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v450 - (_BYTE *)v448) >> 3) >= 0x555555555555555LL) {
                  unint64_t v282 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v282 = v281;
                }
                if (v282) {
                  v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)&v450,  v282);
                }
                else {
                  v283 = 0LL;
                }
                v284 = &v283[24 * v280];
                __int128 v285 = *(_OWORD *)v278;
                *((void *)v284 + 2) = *(void *)(v278 + 16);
                *(_OWORD *)v284 = v285;
                v286 = (char *)v449;
                v287 = (char *)v448;
                v288 = v284;
                if (v449 != v448)
                {
                  do
                  {
                    __int128 v289 = *(_OWORD *)(v286 - 24);
                    *((void *)v288 - 1) = *((void *)v286 - 1);
                    *(_OWORD *)(v288 - 24) = v289;
                    v288 -= 24;
                    v286 -= 24;
                  }

                  while (v286 != v287);
                  v286 = (char *)v448;
                }

                uint64_t v277 = v284 + 24;
                v448 = v288;
                v449 = v284 + 24;
                v450 = &v283[24 * v282];
                if (v286) {
                  operator delete(v286);
                }
              }

              else
              {
                __int128 v279 = *(_OWORD *)v278;
                *((void *)v277 + 2) = *(void *)(v278 + 16);
                *(_OWORD *)uint64_t v277 = v279;
                v277 += 24;
              }

              v449 = v277;
              ++v276;
            }

            while (v276 != v264);
          }

          *(void *)&__int128 v444 = 0LL;
          *((void *)&v444 + 1) = &v444;
          *(void *)&__int128 v445 = 0x4002000000LL;
          *((void *)&v445 + 1) = __Block_byref_object_copy__40;
          v446 = __Block_byref_object_dispose__41;
          memset(v447, 0, sizeof(v447));
          LOBYTE(v464) = 0;
          BYTE8(v465) = 0;
          if (v423 <= 0x18 && ((1 << v423) & 0x1550000) != 0) {
            std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>( (std::string *)&v464,  "/usr/lib/dyld");
          }
          create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  v272,  v419,  (std::string *)&v464,  (void ***)&v438);
          uint64_t v290 = v438;
          if ((void)v438)
          {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)(*((void *)&v444 + 1) + 40LL),  &v438);
          }

          else
          {
            LOBYTE(v457) = 0;
            char v459 = 0;
          }

          a2 = a2;
          unint64_t v7 = v427;
          v363 = (std::__shared_weak_count *)*((void *)&v438 + 1);
          if (*((void *)&v438 + 1))
          {
            v364 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
            do
              unint64_t v365 = __ldaxr(v364);
            while (__stlxr(v365 - 1, v364));
            if (!v365)
            {
              ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
              std::__shared_weak_count::__release_weak(v363);
            }
          }

          if (BYTE8(v465) && SBYTE7(v465) < 0) {
            operator delete((void *)v464);
          }
          if (v290)
          {
            *(void *)&__int128 v438 = 0LL;
            *((void *)&v438 + 1) = &v438;
            *(void *)&__int128 v439 = 0x5002000000LL;
            *((void *)&v439 + 1) = __Block_byref_object_copy__43;
            v440 = __Block_byref_object_dispose__44;
            __int128 v441 = 0u;
            __int128 v442 = 0u;
            int v443 = 1065353216;
            *(void *)&__int128 v436 = 0LL;
            *((void *)&v436 + 1) = &v436;
            *(void *)&__int128 v437 = 0x2000000000LL;
            BYTE8(v437) = 1;
            uint64_t v366 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
            *(void *)&__int128 v464 = MEMORY[0x1895F87A8];
            *((void *)&v464 + 1) = 1174405120LL;
            *(void *)&__int128 v465 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
            *((void *)&v465 + 1) = &unk_189DF9D18;
            memset(&v467[8], 0, 24);
            std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>( &v467[8],  v448,  (uint64_t)v449,  0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v449 - (_BYTE *)v448) >> 3));
            *(void *)&__int128 v466 = &v438;
            *((void *)&v466 + 1) = &v436;
            v468 = v463;
            *(void *)v467 = &v444;
            enumerate_mapped_memory_core_file_dumped_regions(v366, (uint64_t)&v464);
            if (*(_BYTE *)(*((void *)&v436 + 1) + 24LL))
            {
              v367 = (char *)operator new(0x60uLL);
              v367[16] = 0;
              *(void *)v367 = off_189DF53D0;
              *((void *)v367 + 1) = 0LL;
              CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)(v367 + 24), 0, -1);
              v367[40] = 0;
              *(_OWORD *)(v367 + 41) = *(_OWORD *)&v477[8];
              *(_OWORD *)(v367 + 57) = v469;
              *((void *)v367 + 10) = v268;
              *((void *)v367 + 11) = v408;
              uint64_t v435 = (uint64_t)v367;
              v367[16] = v408 != 0;
              std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( (uint64_t)&v433,  &v435,  (void **)(*((void *)&v444 + 1) + 40LL));
              __int128 v368 = v433;
              __int128 v433 = 0uLL;
              __int128 v457 = v368;
              __int128 v458 = v434;
              __int128 v434 = 0uLL;
              char v459 = 1;
              v451 = (void **)&v433 + 1;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v451);
              uint64_t v369 = v433;
              *(void *)&__int128 v433 = 0LL;
              if (v369) {
                (*(void (**)(uint64_t))(*(void *)v369 + 8LL))(v369);
              }
              uint64_t v370 = v435;
              uint64_t v435 = 0LL;
              if (v370) {
                (*(void (**)(uint64_t))(*(void *)v370 + 8LL))(v370);
              }
            }

            else
            {
              LOBYTE(v457) = 0;
              char v459 = 0;
            }

            if (*(void *)&v467[8])
            {
              *(void *)&v467[16] = *(void *)&v467[8];
              operator delete(*(void **)&v467[8]);
            }

            _Block_object_dispose(&v436, 8);
            _Block_object_dispose(&v438, 8);
            std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v441);
          }

          _Block_object_dispose(&v444, 8);
          *(void *)&__int128 v438 = v447;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
        }

        else
        {
          LOBYTE(v457) = 0;
          char v459 = 0;
        }

        if (v448)
        {
          v449 = v448;
          operator delete(v448);
        }
      }

      else
      {
LABEL_370:
        LOBYTE(v457) = 0;
        char v459 = 0;
      }

      std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( (void **)&__p,  (uint64_t *)&v457);
      v291 = (uint64_t *)&v457;
      goto LABEL_372;
    }

    int v417 = 0;
    uint64_t v50 = *(unsigned int *)(v45 + 20);
    LODWORD(v43_Block_object_dispose(va, 8) = *(_DWORD *)(v45 + 16);
    *((void *)&v438 + 1) = v45;
    *(void *)&__int128 v439 = v45 + 32 + v50;
    *((void *)&v439 + 1) = v45 + 32;
    while (2)
    {
      unint64_t v51 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v438);
      unint64_t v52 = v51;
      if (!v51) {
        goto LABEL_193;
      }
      if (*(_DWORD *)v51 != 49 || strncmp((const char *)(v51 + 8), "all image infos", 0x10uLL))
      {
        int v53 = 2;
        goto LABEL_85;
      }

      read_type_from_raw_core_file_bytes<CS_all_image_infos_header>( (uint64_t)v7,  *(void *)(v52 + 24),  *(void *)(v52 + 32),  1,  (uint64_t)&v444);
      int v53 = 1;
      if (!BYTE8(v445) || (_DWORD)v444 != 1)
      {
        unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = 0LL;
        int v417 = 0;
        goto LABEL_85;
      }

      uint64_t v54 = DWORD1(v444);
      if (!DWORD1(v444))
      {
        int v53 = 3;
        goto LABEL_85;
      }

      unint64_t v410 = mapped_memory_cache_for_core_file_without_exclave_metadata;
      uint64_t v55 = 0LL;
      uint64_t v56 = *((void *)&v444 + 1);
      unint64_t v57 = v445;
      uint64_t v421 = *((void *)&v444 + 1);
      v425 = v7;
      uint64_t v415 = DWORD1(v444);
      while (1)
      {
        read_type_from_raw_core_file_bytes<CS_image_entry>( (uint64_t)v7,  v56 + (v57 * v55),  v57,  1,  (uint64_t)&v464);
        if (!v467[0])
        {
          unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = 0LL;
          int v417 = 0;
          goto LABEL_134;
        }

        unint64_t v58 = v464;
        if ((void)v464 == -1LL) {
          goto LABEL_125;
        }
        uint64_t v59 = CSCppFileMemory::CSCppFileMemory(&v470, v7, v464);
        read_path_from_offset_in_cpp_memory(v59, v58, (std::string *)&__p);
        if (BYTE8(v461)) {
          break;
        }
LABEL_124:
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
LABEL_125:
        if (++v55 == v54)
        {
          int v53 = 3;
          unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = v410;
          goto LABEL_85;
        }
      }

      std::string::basic_string[abi:ne180100]<0>(&v457, "/dyld");
      int v60 = SBYTE7(v458);
      if ((SBYTE7(v458) & 0x80u) == 0) {
        size_t v61 = BYTE7(v458);
      }
      else {
        size_t v61 = *((void *)&v457 + 1);
      }
      if (SBYTE7(v461) < 0)
      {
        uint64_t v62 = *((void *)&__p + 1);
        if (v61 <= *((void *)&__p + 1))
        {
          uint64_t p_p = __p;
          goto LABEL_103;
        }
      }

      else
      {
        uint64_t v62 = BYTE7(v461);
        if (v61 <= BYTE7(v461))
        {
          uint64_t p_p = (uint64_t)&__p;
LABEL_103:
          uint64_t v65 = v62 - v61;
          if ((SBYTE7(v458) & 0x80u) == 0) {
            uint64_t v66 = &v457;
          }
          else {
            uint64_t v66 = (__int128 *)v457;
          }
          if (v61)
          {
            unint64_t v67 = (const void *)(p_p + v65);
            uint64_t v68 = (char *)(p_p + v62);
            int64_t v69 = v61;
            unsigned int v413 = a2;
            int v70 = *(char *)v66;
            do
            {
              size_t v71 = v69 - v61;
              if (v71 == -1LL) {
                break;
              }
              unint64_t v72 = (char *)memchr(v67, v70, v71 + 1);
              if (!v72) {
                break;
              }
              int v73 = v72;
              if (!memcmp(v72, v66, v61)) {
                goto LABEL_113;
              }
              unint64_t v67 = v73 + 1;
              int64_t v69 = v68 - (v73 + 1);
            }

            while (v69 >= (uint64_t)v61);
            int v73 = v68;
LABEL_113:
            a2 = v413;
            if (v73 == v68) {
              uint64_t v65 = -1LL;
            }
            else {
              uint64_t v65 = (uint64_t)&v73[-p_p];
            }
            unint64_t v7 = v425;
          }

          uint64_t v54 = v415;
          BOOL v64 = v65 != -1;
          goto LABEL_118;
        }
      }

      BOOL v64 = 0;
LABEL_118:
      if (v60 < 0) {
        operator delete((void *)v457);
      }
      if (v64)
      {
        unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata = *((void *)&v465 + 1);
        if (BYTE8(v461) && SBYTE7(v461) < 0) {
          operator delete((void *)__p);
        }
        unint64_t v407 = mapped_memory_cache_for_core_file_without_exclave_metadata >> 8;
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
        int v417 = 1;
LABEL_134:
        int v53 = 1;
LABEL_85:
        if (v53 != 2)
        {
          if (v53 != 3 && v417)
          {
            uint64_t v128 = mapped_memory_cache_for_core_file_without_exclave_metadata | (v407 << 8);
            goto LABEL_280;
          }

LABEL_193:
          *(void *)&__int128 v470 = 0LL;
          uint64_t v129 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
          if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v129, (uint64_t)&v470))
          {
            uint64_t v128 = v470;
            goto LABEL_280;
          }

          unint64_t address_from_main_bin_spec_lcnote_with_matching = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>( v45,  (uint64_t)v7,  1);
          if (v131)
          {
            uint64_t v132 = address_from_main_bin_spec_lcnote_with_matching;
LABEL_196:
            LOBYTE(__p) = 0;
            char v462 = 0;
            __int128 v438 = 0uLL;
            *(void *)&__int128 v439 = 0LL;
            create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  v132,  (uint64_t)"__kernel__",  (uint64_t)v429,  1,  &v457);
            if ((void)v457)
            {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v438, &v457);
              uint64_t v133 = (const CSCppSymbolOwner *)v457;
              __int128 v436 = v457;
              if (*((void *)&v457 + 1))
              {
                uint64_t v134 = (unint64_t *)(*((void *)&v457 + 1) + 8LL);
                do
                  unint64_t v135 = __ldxr(v134);
                while (__stxr(v135 + 1, v134));
              }

              std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>( v133,  &v444);
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v444);
              unint64_t v136 = (CSCppFakeTask *)operator new(0x60uLL);
              CSCppFakeTask::CSCppFakeTask(v136, -1, 1);
              v448 = v136;
              int FlagsForNListOnlyData = CSSymbolicatorGetFlagsForNListOnlyData();
              unint64_t v138 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask( &v470,  (uint64_t *)&v448,  FlagsForNListOnlyData | 2u,  0LL);
              uint64_t v140 = v139;
              uint64_t v141 = v448;
              v448 = 0LL;
              if (v141) {
                (*(void (**)(void *))(*(void *)v141 + 8LL))(v141);
              }
              uint64_t v142 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              release_core_file_mapped_memory_cache(*(void *)((v140 & 0xFFFFFFFFFFFFFFFCLL) + 120));
              *(void *)((v140 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v142);
              char AOutSymbolOwner = CSSymbolicatorGetAOutSymbolOwner((char)v138, v140);
              uint64_t SymbolWithMangledName = CSSymbolOwnerGetSymbolWithMangledName( AOutSymbolOwner,  v144,  (uint64_t)"_gLoadedKextSummaries");
              unint64_t Range = CSSymbolGetRange(SymbolWithMangledName, v146);
              CSRelease(v138, v140);
              *(void *)&__int128 v433 = &v470;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
              int v148 = (std::__shared_weak_count *)*((void *)&v444 + 1);
              if (*((void *)&v444 + 1))
              {
                v149 = (unint64_t *)(*((void *)&v444 + 1) + 8LL);
                do
                  unint64_t v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }

              int v151 = (std::__shared_weak_count *)*((void *)&v436 + 1);
              if (*((void *)&v436 + 1))
              {
                uint64_t v152 = (unint64_t *)(*((void *)&v436 + 1) + 8LL);
                do
                  unint64_t v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }

              if (Range)
              {
                uint64_t v154 = (void *)(*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(void *)&v463[0]
                                                                                                + 32LL))( v463,  Range,  8LL);
                if (v155 >= 8)
                {
                  uint64_t v156 = *v154;
                  uint64_t v157 = (_DWORD *)(*(uint64_t (**)(_OWORD *, void, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  *v154,  16LL);
                  if (v158 >= 0x10 && *v157 == 2)
                  {
                    uint64_t v159 = v157[2];
                    if (v157[1] == 136 && (_DWORD)v159 != 0)
                    {
                      uint64_t v161 = 0LL;
                      uint64_t v162 = v156 + 16;
                      do
                      {
                        uint64_t v163 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  v162 + 136 * v161,  136LL);
                        if (v164 >= 0x88)
                        {
                          __int128 v470 = *(_OWORD *)v163;
                          __int128 v165 = *(_OWORD *)(v163 + 16);
                          __int128 v166 = *(_OWORD *)(v163 + 32);
                          __int128 v167 = *(_OWORD *)(v163 + 64);
                          __int128 v473 = *(_OWORD *)(v163 + 48);
                          __int128 v474 = v167;
                          __int128 v471 = v165;
                          __int128 v472 = v166;
                          __int128 v168 = *(_OWORD *)(v163 + 80);
                          __int128 v169 = *(_OWORD *)(v163 + 96);
                          __int128 v170 = *(_OWORD *)(v163 + 112);
                          *(void *)&v477[16] = *(void *)(v163 + 128);
                          __int128 v476 = v169;
                          *(_OWORD *)v477 = v170;
                          __int128 v475 = v168;
                          char v478 = 1;
                          if ((void)v168)
                          {
                            create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  v168,  (uint64_t)&v470,  (uint64_t)v429,  0,  &v444);
                            if ((void)v444) {
                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)&v438,  &v444);
                            }
                            unsigned int v171 = (std::__shared_weak_count *)*((void *)&v444 + 1);
                            if (*((void *)&v444 + 1))
                            {
                              uint64_t v172 = (unint64_t *)(*((void *)&v444 + 1) + 8LL);
                              do
                                unint64_t v173 = __ldaxr(v172);
                              while (__stlxr(v173 - 1, v172));
                              if (!v173)
                              {
                                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                std::__shared_weak_count::__release_weak(v171);
                              }
                            }
                          }
                        }

                        ++v161;
                      }

                      while (v161 != v159);
                    }
                  }
                }
              }

              unint64_t v174 = (CSCppFakeTask *)operator new(0x60uLL);
              CSCppFakeTask::CSCppFakeTask(v174, -1, 1);
              *(void *)&__int128 v433 = v174;
              std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( (uint64_t)&v470,  (uint64_t *)&v433,  (void **)&v438);
              __int128 v175 = v470;
              __int128 v470 = 0uLL;
              __int128 v464 = v175;
              __int128 v465 = v471;
              __int128 v471 = 0uLL;
              LOBYTE(v466) = 1;
              *(void *)&__int128 v444 = (char *)&v470 + 8;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v444);
              uint64_t v176 = v470;
              *(void *)&__int128 v470 = 0LL;
              if (v176) {
                (*(void (**)(uint64_t))(*(void *)v176 + 8LL))(v176);
              }
              uint64_t v177 = v433;
              *(void *)&__int128 v433 = 0LL;
              if (v177) {
                (*(void (**)(uint64_t))(*(void *)v177 + 8LL))(v177);
              }
            }

            else
            {
              LOBYTE(v464) = 0;
              LOBYTE(v466) = 0;
            }

            v254 = (std::__shared_weak_count *)*((void *)&v457 + 1);
            if (*((void *)&v457 + 1))
            {
              v255 = (unint64_t *)(*((void *)&v457 + 1) + 8LL);
              do
                unint64_t v256 = __ldaxr(v255);
              while (__stlxr(v256 - 1, v255));
              if (!v256)
              {
                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                std::__shared_weak_count::__release_weak(v254);
              }
            }

            *(void *)&__int128 v470 = &v438;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v470);
            std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( (void **)&__p,  (uint64_t *)&v464);
            std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v464);
            char v257 = 0;
LABEL_374:
            if (v462)
            {
              __int128 v292 = __p;
              __int128 __p = 0uLL;
              __int128 v438 = v292;
              __int128 v439 = v461;
              __int128 v461 = 0uLL;
              if ((v257 & 1) == 0)
              {
                uint64_t v293 = *(unsigned int *)(v45 + 20);
                LODWORD(v464) = *(_DWORD *)(v45 + 16);
                *((void *)&v464 + 1) = v45;
                *(void *)&__int128 v465 = v45 + 32 + v293;
                *((void *)&v465 + 1) = v45 + 32;
                for (unint64_t i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464);
                      i;
                      unint64_t i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464))
                {
                  if (*(_DWORD *)i == 49 && !strncmp((const char *)(i + 8), "load binary", 0x10uLL))
                  {
                    read_type_from_raw_core_file_bytes<CS_load_binary_note>( (uint64_t)v7,  *(void *)(i + 24),  *(void *)(i + 32),  1,  (uint64_t)&v470);
                    if (BYTE4(v474))
                    {
                      if (*(void *)((char *)&v471 + 4)
                        && (!(DWORD1(v472) ^ 0x6D747073 | BYTE8(v472)) || DWORD1(v472) == 7174260))
                      {
                        create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  *(uint64_t *)((char *)&v471 + 4),  (uint64_t)&v472 + 4,  (uint64_t)v429,  0,  &v444);
                        if ((void)v444) {
                          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)&v438 + 1,  &v444);
                        }
                        v295 = (std::__shared_weak_count *)*((void *)&v444 + 1);
                        if (*((void *)&v444 + 1))
                        {
                          v296 = (unint64_t *)(*((void *)&v444 + 1) + 8LL);
                          do
                            unint64_t v297 = __ldaxr(v296);
                          while (__stlxr(v297 - 1, v296));
                          if (!v297)
                          {
                            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                            std::__shared_weak_count::__release_weak(v295);
                          }
                        }
                      }
                    }
                  }
                }

                a2 = a2 | 2;
              }

              CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              uint64_t v298 = v438;
              *(void *)&__int128 v438 = 0LL;
              *(void *)&__int128 v444 = v298;
              uint64_t v74 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((void *)&v438 + 1, (uint64_t *)&v444, a2, 0LL);
              uint64_t v300 = v299;
              uint64_t v301 = v444;
              *(void *)&__int128 v444 = 0LL;
              if (v301) {
                (*(void (**)(uint64_t))(*(void *)v301 + 8LL))(v301);
              }
              uint64_t v302 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              release_core_file_mapped_memory_cache(*(void *)((v300 & 0xFFFFFFFFFFFFFFFCLL) + 120));
              *(void *)((v300 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v302);
              *(void *)&__int128 v470 = MEMORY[0x1895F87A8];
              *((void *)&v470 + 1) = 0x40000000LL;
              *(void *)&__int128 v471 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
              *((void *)&v471 + 1) = &__block_descriptor_tmp_52_0;
              *(void *)&__int128 v472 = v74;
              *((void *)&v472 + 1) = v300;
              CSSymbolicatorApplyMutableContextBlock(v74, v300, (uint64_t)&v470);
              *(void *)&__int128 v464 = (char *)&v438 + 8;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
              uint64_t v303 = v438;
              *(void *)&__int128 v438 = 0LL;
              if (v303) {
                (*(void (**)(uint64_t))(*(void *)v303 + 8LL))(v303);
              }
LABEL_450:
              std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&__p);
              CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v463);
LABEL_451:
              std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v429);
LABEL_139:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v432);
LABEL_140:
              unint64_t v75 = &v452;
              goto LABEL_141;
            }

LABEL_449:
            uint64_t v74 = 0LL;
            goto LABEL_450;
          }

          for (uint64_t j = 0LL; j != 7; ++j)
          {
            size_t v204 = (void *)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  qword_1860A3FB0[j] - 16,  40LL);
            if (v205 >= 0x28)
            {
              uint64_t v132 = v204[2];
              BOOL v206 = *v204 == 0x2068736966746143LL || *v204 == 0x20206E656B61724BLL;
              if (v206 && v132 != 0) {
                goto LABEL_196;
              }
            }
          }

          *(void *)&__int128 v470 = 0LL;
          *((void *)&v470 + 1) = &v470;
          *(void *)&__int128 v471 = 0x3802000000LL;
          *((void *)&v471 + 1) = __Block_byref_object_copy__9;
          *(void *)&__int128 v472 = __Block_byref_object_dispose__9;
          BYTE8(v472) = 0;
          LOBYTE(v473) = 0;
          uint64_t v208 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
          *(void *)&__int128 v464 = MEMORY[0x1895F87A8];
          *((void *)&v464 + 1) = 0x40000000LL;
          *(void *)&__int128 v465 = ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
          *((void *)&v465 + 1) = &unk_189DF9CF0;
          *((void *)&v466 + 1) = v463;
          *(void *)&__int128 v466 = &v470;
          enumerate_mapped_memory_core_file_dumped_regions(v208, (uint64_t)&v464);
          uint64_t v128 = *(void *)(*((void *)&v470 + 1) + 40LL);
          uint64_t v209 = *(unsigned __int8 *)(*((void *)&v470 + 1) + 48LL);
          _Block_object_dispose(&v470, 8);
          if (v209)
          {
LABEL_280:
            LOBYTE(__p) = 0;
            char v462 = 0;
            *(void *)&__int128 v438 = 0LL;
            int mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  v128,  (uint64_t)"<unknown>",  (uint64_t *)&v438);
            uint64_t v211 = v438;
            if (mach_header_and_cmds_from)
            {
              LOBYTE(v212) = 0;
              uint64_t v213 = 0LL;
              unint64_t v214 = 0LL;
              goto LABEL_338;
            }

            TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v438, &v464);
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v464);
            v215 = (std::__shared_weak_count *)*((void *)&v464 + 1);
            if (*((void *)&v464 + 1))
            {
              v216 = (unint64_t *)(*((void *)&v464 + 1) + 8LL);
              do
                unint64_t v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }

            v218 = (CSCppFakeTask *)operator new(0x60uLL);
            CSCppFakeTask::CSCppFakeTask(v218, -1, 0);
            *(void *)&__int128 v444 = v218;
            int v219 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v444, 0LL, 0LL);
            uint64_t v221 = v220;
            uint64_t v222 = v444;
            *(void *)&__int128 v444 = 0LL;
            if (v222) {
              (*(void (**)(uint64_t))(*(void *)v222 + 8LL))(v222);
            }
            if (CSIsNull((char)v219, v221))
            {
LABEL_290:
              LOBYTE(v212) = 0;
              uint64_t v213 = 0LL;
              unint64_t v214 = 0LL;
LABEL_337:
              *(void *)&__int128 v464 = &v470;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
              uint64_t v211 = v438;
LABEL_338:
              if (v211) {
                (*(void (**)(uint64_t))(*(void *)v211 + 8LL))(v211);
              }
              if (v213)
              {
                unint64_t v178 = v214 & 0xFFFFFFFFFFFFFF00LL | v212;
                goto LABEL_342;
              }

LABEL_373:
              char v257 = 1;
              goto LABEL_374;
            }

            uint64_t v258 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
            release_core_file_mapped_memory_cache(*(void *)((v221 & 0xFFFFFFFFFFFFFFFCLL) + 120));
            *(void *)((v221 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v258);
            uint64_t SymbolWithMangledNameAtTime = CSSymbolicatorGetSymbolWithMangledNameAtTime( (char)v219,  v221,  (uint64_t)"_dyld_all_image_infos",  0x8000000000000000LL);
            unint64_t v212 = CSSymbolGetRange(SymbolWithMangledNameAtTime, v260);
            if (v212)
            {
LABEL_336:
              CSRelease(v219, v221);
              unint64_t v214 = v212 & 0xFFFFFFFFFFFFFF00LL;
              uint64_t v213 = 1LL;
              goto LABEL_337;
            }

            uint64_t RegionWithNameAtTime = CSSymbolicatorGetRegionWithNameAtTime( (char)v219,  v221,  (uint64_t)"__DATA_DIRTY __all_image_info",  0x8000000000000000LL);
            uint64_t v361 = v360;
            if (CSIsNull(RegionWithNameAtTime, v360))
            {
              uint64_t RegionWithNameAtTime = CSSymbolicatorGetRegionWithNameAtTime( (char)v219,  v221,  (uint64_t)"__DATA __all_image_info",  0x8000000000000000LL);
              uint64_t v361 = v362;
              if (CSIsNull(RegionWithNameAtTime, v362))
              {
                CSRelease(v219, v221);
                goto LABEL_290;
              }
            }

            __int128 v464 = 0uLL;
            *(void *)&__int128 v465 = 0LL;
            unint64_t v384 = CSRegionGetRange(RegionWithNameAtTime, v361);
            unint64_t v386 = v385 - 368 + v384;
            if (__CFADD__(v385 - 368, v384))
            {
LABEL_560:
              if (*((void *)&v464 + 1) - (void)v464 != 8LL) {
                goto LABEL_590;
              }
              unint64_t v212 = *(void *)v464;
              char v400 = 1;
            }

            else
            {
              while (1)
              {
                uint64_t v387 = (*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(void *)&v463[0] + 32LL))( v463,  v384,  368LL);
                if (v388 <= 0x16F) {
                  break;
                }
                BOOL v389 = *(void *)(v387 + 104) == v384 && *(void *)(v387 + 32) == v128;
                if (v389 && *(_DWORD *)v387 >= 0x11u)
                {
                  v390 = (char *)*((void *)&v464 + 1);
                  if (*((void *)&v464 + 1) >= (unint64_t)v465)
                  {
                    v392 = (char *)v464;
                    uint64_t v393 = (uint64_t)(*((void *)&v464 + 1) - v464) >> 3;
                    unint64_t v394 = v393 + 1;
                    uint64_t v395 = v465 - v464;
                    else {
                      unint64_t v396 = v394;
                    }
                    if (v396)
                    {
                      v397 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>( (uint64_t)&v465,  v396);
                      v390 = (char *)*((void *)&v464 + 1);
                      v392 = (char *)v464;
                    }

                    else
                    {
                      v397 = 0LL;
                    }

                    v398 = (unint64_t *)&v397[8 * v393];
                    unint64_t *v398 = v384;
                    v391 = v398 + 1;
                    while (v390 != v392)
                    {
                      unint64_t v399 = *((void *)v390 - 1);
                      v390 -= 8;
                      *--v398 = v399;
                    }

                    *(void *)&__int128 v464 = v398;
                    *((void *)&v464 + 1) = v391;
                    *(void *)&__int128 v465 = &v397[8 * v396];
                    if (v392) {
                      operator delete(v392);
                    }
                  }

                  else
                  {
                    **((void **)&v464 + 1) = v384;
                    v391 = v390 + 8;
                  }

                  *((void *)&v464 + 1) = v391;
                }

                v384 += 8LL;
                if (v384 > v386) {
                  goto LABEL_560;
                }
              }

LABEL_590:
              CSRelease(v219, v221);
              unint64_t v212 = 0LL;
              char v400 = 0;
            }

            if ((void)v464)
            {
              *((void *)&v464 + 1) = v464;
              operator delete((void *)v464);
            }

            if ((v400 & 1) == 0) {
              goto LABEL_290;
            }
            goto LABEL_336;
          }

          unint64_t v329 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>( v45,  (uint64_t)v7,  3);
          LOBYTE(__p) = 0;
          char v462 = 0;
          if (!v330) {
            goto LABEL_449;
          }
          LOBYTE(v464) = 0;
          BYTE8(v465) = 0;
          create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>( (uint64_t)v463,  0LL,  v329,  (std::string *)&v464,  (void ***)&v444);
          if (BYTE8(v465) && SBYTE7(v465) < 0) {
            operator delete((void *)v464);
          }
          uint64_t v331 = v444;
          if ((void)v444)
          {
            uint64_t v332 = *((void *)&v444 + 1);
            __int128 v457 = v444;
            if (*((void *)&v444 + 1))
            {
              v333 = (unint64_t *)(*((void *)&v444 + 1) + 8LL);
              do
                unint64_t v334 = __ldxr(v333);
              while (__stxr(v334 + 1, v333));
            }

            __int128 v438 = 0uLL;
            *(void *)&__int128 v439 = 0LL;
            *(void *)&__int128 v464 = &v438;
            BYTE8(v464) = 0;
            v335 = operator new(0x10uLL);
            *(void *)&__int128 v438 = v335;
            *(void *)&__int128 v439 = v335 + 2;
            void *v335 = v331;
            v335[1] = v332;
            if (v332)
            {
              v336 = (unint64_t *)(v332 + 8);
              do
                unint64_t v337 = __ldxr(v336);
              while (__stxr(v337 + 1, v336));
            }

            *((void *)&v438 + 1) = v335 + 2;
            std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&v457);
            v338 = (CSCppFakeTask *)operator new(0x60uLL);
            CSCppFakeTask::CSCppFakeTask(v338, -1, 0);
            *(void *)&__int128 v436 = v338;
            std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>( (uint64_t)&v464,  (uint64_t *)&v436,  (void **)&v438);
            __int128 v339 = v464;
            __int128 v464 = 0uLL;
            __int128 v470 = v339;
            __int128 v471 = v465;
            __int128 v465 = 0uLL;
            LOBYTE(v472) = 1;
            *(void *)&__int128 v457 = (char *)&v464 + 8;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);
            uint64_t v340 = v464;
            *(void *)&__int128 v464 = 0LL;
            if (v340) {
              (*(void (**)(uint64_t))(*(void *)v340 + 8LL))(v340);
            }
            uint64_t v341 = v436;
            *(void *)&__int128 v436 = 0LL;
            if (v341) {
              (*(void (**)(uint64_t))(*(void *)v341 + 8LL))(v341);
            }
            *(void *)&__int128 v464 = &v438;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
          }

          else
          {
            LOBYTE(v470) = 0;
            LOBYTE(v472) = 0;
          }

          v404 = (std::__shared_weak_count *)*((void *)&v444 + 1);
          if (*((void *)&v444 + 1))
          {
            v405 = (unint64_t *)(*((void *)&v444 + 1) + 8LL);
            do
              unint64_t v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (!v406)
            {
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v404);
            }
          }

          std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( (void **)&__p,  (uint64_t *)&v470);
          v291 = (uint64_t *)&v470;
LABEL_372:
          std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v291);
          goto LABEL_373;
        }

        continue;
      }

      break;
    }

    uint64_t v56 = v421;
    if (BYTE8(v461) && SBYTE7(v461) < 0) {
      operator delete((void *)__p);
    }
    goto LABEL_124;
  }

  CSCppFileMemory::CSCppFileMemory(v432, v7, 0LL);
  unint64_t v9 = 28LL;
  do
  {
    unint64_t v10 = (_DWORD *)(*(uint64_t (**)(void *, void, unint64_t))(v432[0] + 32LL))(v432, 0LL, v9);
    uint64_t v12 = (uint64_t)v10;
    if (!v10 || *v10 != -17958194) {
      goto LABEL_136;
    }
    unint64_t v9 = v10[5] + 28LL;
  }

  while (v9 > v11);
  if (v10[3] != 4)
  {
LABEL_136:
    uint64_t v74 = 0LL;
    goto LABEL_137;
  }

  __int128 v444 = 0u;
  __int128 v445 = 0u;
  LODWORD(v446) = 1065353216;
  if (a4)
  {
    uint64_t v13 = (uint64_t *)(a3 + 8);
    do
    {
      uint64_t v14 = *v13;
      v13 += 2;
      *(void *)&__int128 v470 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 16;
      std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( (uint64_t)&v444,  (void *)v470,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v470)[4] = v14 & 0xFFFFFFFFFFFFFFFCLL;
      --a4;
    }

    while (a4);
  }

  unint64_t v15 = (unint64_t)create_mapped_memory_cache_for_core_file_without_exclave_metadata( v7,  "CSSymbolicator for core file");
  if (!v15)
  {
    uint64_t v74 = 0LL;
    goto LABEL_533;
  }

  CSCppCoreFileMemory::CSCppCoreFileMemory(&v448, v15);
  release_core_file_mapped_memory_cache(v15);
  *(void *)&__int128 v470 = 0LL;
  uint64_t v16 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v16, (uint64_t)&v470))
  {
    unint64_t v127 = v470;
    LOBYTE(v429[0]) = 0;
    LOBYTE(v431) = 0;
    goto LABEL_298;
  }

  int v416 = 0;
  uint64_t v17 = *(unsigned int *)(v12 + 20);
  LODWORD(v464) = *(_DWORD *)(v12 + 16);
  *((void *)&v464 + 1) = v12;
  *(void *)&__int128 v465 = v12 + 28 + v17;
  *((void *)&v465 + 1) = v12 + 28;
  do
  {
    unint64_t v18 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464);
    unint64_t v19 = v18;
    if (!v18) {
      goto LABEL_147;
    }
    if (*(_DWORD *)v18 != 49 || strncmp((const char *)(v18 + 8), "all image infos", 0x10uLL))
    {
      int v20 = 2;
      continue;
    }

    read_type_from_raw_core_file_bytes<CS_all_image_infos_header>( (uint64_t)v7,  *(void *)(v19 + 24),  *(void *)(v19 + 32),  1,  (uint64_t)&v438);
    int v20 = 1;
    if (!BYTE8(v439) || (_DWORD)v438 != 1)
    {
      unint64_t v15 = 0LL;
      int v416 = 0;
      continue;
    }

    uint64_t v21 = DWORD1(v438);
    if (!DWORD1(v438))
    {
      int v20 = 3;
      continue;
    }

    unint64_t v409 = v15;
    uint64_t v22 = 0LL;
    uint64_t v23 = *((void *)&v438 + 1);
    unint64_t v24 = v439;
    uint64_t v420 = *((void *)&v438 + 1);
    v424 = v7;
    uint64_t v414 = DWORD1(v438);
    while (1)
    {
      read_type_from_raw_core_file_bytes<CS_image_entry>( (uint64_t)v7,  v23 + (v24 * v22),  v24,  1,  (uint64_t)&v452);
      if (!LOBYTE(v455[1]))
      {
        unint64_t v15 = 0LL;
        int v416 = 0;
        goto LABEL_67;
      }

      unint64_t v25 = v452;
      if ((void)v452 != -1LL) {
        break;
      }
LABEL_58:
      if (++v22 == v21)
      {
        int v20 = 3;
        unint64_t v15 = v409;
        goto LABEL_18;
      }
    }

    uint64_t v26 = CSCppFileMemory::CSCppFileMemory(&v470, v7, v452);
    read_path_from_offset_in_cpp_memory(v26, v25, (std::string *)v429);
    if (!BYTE8(v430)) {
      goto LABEL_57;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/dyld");
    int v27 = SBYTE7(v461);
    if ((SBYTE7(v461) & 0x80u) == 0) {
      size_t v28 = BYTE7(v461);
    }
    else {
      size_t v28 = *((void *)&__p + 1);
    }
    if (SBYTE7(v430) < 0)
    {
      unint64_t v29 = (char *)v429[1];
      if ((void *)v28 > v429[1])
      {
LABEL_34:
        BOOL v31 = 0;
        if ((SBYTE7(v461) & 0x80000000) == 0) {
          goto LABEL_53;
        }
LABEL_52:
        operator delete((void *)__p);
        goto LABEL_53;
      }

      uint64_t v30 = (void **)v429[0];
    }

    else
    {
      unint64_t v29 = (char *)BYTE7(v430);
      if (v28 > BYTE7(v430)) {
        goto LABEL_34;
      }
      uint64_t v30 = v429;
    }

    uint64_t v32 = (uint64_t)&v29[-v28];
    if ((SBYTE7(v461) & 0x80u) == 0) {
      char v33 = &__p;
    }
    else {
      char v33 = (__int128 *)__p;
    }
    if (v28)
    {
      __int128 v34 = (char *)v30 + v32;
      unint64_t v35 = &v29[(void)v30];
      int64_t v36 = v28;
      unsigned int v412 = a2;
      int v37 = *(char *)v33;
      do
      {
        size_t v38 = v36 - v28;
        if (v38 == -1LL) {
          break;
        }
        unint64_t v39 = (char *)memchr(v34, v37, v38 + 1);
        if (!v39) {
          break;
        }
        char v40 = v39;
        if (!memcmp(v39, v33, v28)) {
          goto LABEL_47;
        }
        __int128 v34 = v40 + 1;
        int64_t v36 = v35 - (v40 + 1);
      }

      while (v36 >= (uint64_t)v28);
      char v40 = v35;
LABEL_47:
      a2 = v412;
      if (v40 == v35) {
        uint64_t v32 = -1LL;
      }
      else {
        uint64_t v32 = v40 - (char *)v30;
      }
      unint64_t v7 = v424;
    }

    uint64_t v21 = v414;
    BOOL v31 = v32 != -1;
    if (v27 < 0) {
      goto LABEL_52;
    }
LABEL_53:
    if (!v31)
    {
      uint64_t v23 = v420;
      if (BYTE8(v430) && SBYTE7(v430) < 0) {
        operator delete(v429[0]);
      }
LABEL_57:
      CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
      goto LABEL_58;
    }

    unint64_t v15 = *((void *)&v453 + 1);
    if (BYTE8(v430) && SBYTE7(v430) < 0) {
      operator delete(v429[0]);
    }
    unint64_t v407 = v15 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
    int v416 = 1;
LABEL_67:
    int v20 = 1;
LABEL_18:
    ;
  }

  while (v20 == 2);
  if (v20 != 3 && v416)
  {
    uint64_t v77 = v15 | (v407 << 8);
    goto LABEL_250;
  }

LABEL_147:
  *(void *)&__int128 v470 = 0LL;
  uint64_t v78 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v78, (uint64_t)&v470))
  {
    uint64_t v77 = v470;
LABEL_250:
    LOBYTE(v429[0]) = 0;
    LOBYTE(v431) = 0;
    *(void *)&__int128 v464 = 0LL;
    int v186 = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  v77,  (uint64_t)"<unknown>",  (uint64_t *)&v464);
    uint64_t v187 = v464;
    if (v186)
    {
      LOBYTE(v18_Block_object_dispose(va, 8) = 0;
      uint64_t v189 = 0LL;
      unint64_t v190 = 0LL;
LABEL_294:
      if (v187) {
        (*(void (**)(uint64_t))(*(void *)v187 + 8LL))(v187);
      }
      if (!v189)
      {
LABEL_507:
        char v202 = 1;
        goto LABEL_508;
      }

      unint64_t v127 = v190 & 0xFFFFFFFFFFFFFF00LL | v188;
LABEL_298:
      uint64_t v226 = (*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v127, 224LL);
      if (v227 > 0xDF)
      {
        v426 = v7;
        unsigned int v228 = *(_DWORD *)v226;
        uint64_t v229 = *(unsigned int *)(v226 + 4);
        uint64_t v230 = *(unsigned int *)(v226 + 8);
        uint64_t v231 = *(unsigned int *)(v226 + 20);
        __int128 v232 = *(_OWORD *)(v226 + 56);
        __int128 v465 = *(_OWORD *)(v226 + 40);
        __int128 v466 = v232;
        *(_OWORD *)v467 = *(_OWORD *)(v226 + 72);
        *(_OWORD *)&v467[12] = *(_OWORD *)(v226 + 84);
        __int128 v464 = *(_OWORD *)(v226 + 24);
        uint64_t v233 = *(unsigned int *)(v226 + 100);
        unint64_t v234 = *(unsigned int *)(v226 + 112);
        unsigned int v235 = *(_DWORD *)(v226 + 176);
        uint64_t v236 = *(unsigned int *)(v226 + 200);
        v463[0] = *(_OWORD *)(v226 + 204);
        if (v228 > 0x10 && (_DWORD)v230)
        {
          unsigned int v422 = v235;
          __int128 v433 = 0uLL;
          *(void *)&__int128 v434 = 0LL;
          uint64_t v237 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v230, 12 * v229);
          if (v237)
          {
            uint64_t v418 = v231;
            uint64_t v411 = v233;
            if ((_DWORD)v229)
            {
              uint64_t v238 = 0LL;
              unint64_t v239 = *((void *)&v433 + 1);
              do
              {
                uint64_t v240 = v237 + 12 * v238;
                if (v239 >= (unint64_t)v434)
                {
                  unint64_t v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - v433) >> 2);
                  unint64_t v243 = v242 + 1;
                  if (v242 + 1 > 0x1555555555555555LL) {
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  }
                  else {
                    unint64_t v244 = v243;
                  }
                  if (v244) {
                    mach_vm_address_t v245 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>( (uint64_t)&v434,  v244);
                  }
                  else {
                    mach_vm_address_t v245 = 0LL;
                  }
                  v246 = &v245[12 * v242];
                  uint64_t v247 = *(void *)v240;
                  *((_DWORD *)v246 + 2) = *(_DWORD *)(v240 + 8);
                  *(void *)v246 = v247;
                  v248 = (_DWORD *)*((void *)&v433 + 1);
                  v249 = (_DWORD *)v433;
                  uint64_t v250 = v246;
                  if (*((void *)&v433 + 1) != (void)v433)
                  {
                    do
                    {
                      uint64_t v251 = *(void *)(v248 - 3);
                      v248 -= 3;
                      int v252 = v248[2];
                      *(void *)(v250 - 12) = v251;
                      v250 -= 12;
                      *((_DWORD *)v250 + 2) = v252;
                    }

                    while (v248 != v249);
                    v248 = (_DWORD *)v433;
                  }

                  unint64_t v239 = (unint64_t)(v246 + 12);
                  *(void *)&__int128 v433 = v250;
                  *((void *)&v433 + 1) = v246 + 12;
                  *(void *)&__int128 v434 = &v245[12 * v244];
                  if (v248) {
                    operator delete(v248);
                  }
                }

                else
                {
                  uint64_t v241 = *(void *)v240;
                  *(_DWORD *)(v239 + _Block_object_dispose(va, 8) = *(_DWORD *)(v240 + 8);
                  *(void *)unint64_t v239 = v241;
                  v239 += 12LL;
                }

                *((void *)&v433 + 1) = v239;
                ++v238;
              }

              while (v238 != v229);
            }

            *(void *)&__int128 v438 = 0LL;
            *((void *)&v438 + 1) = &v438;
            *(void *)&__int128 v439 = 0x4002000000LL;
            *((void *)&v439 + 1) = __Block_byref_object_copy__40;
            v440 = __Block_byref_object_dispose__41;
            *(void *)&__int128 v442 = 0LL;
            __int128 v441 = 0uLL;
            LOBYTE(v470) = 0;
            BYTE8(v471) = 0;
            if (v422 <= 0x18 && ((1 << v422) & 0x1550000) != 0) {
              std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>( (std::string *)&v470,  "/usr/lib/dyld");
            }
            create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  v234,  v418,  (std::string *)&v470,  (void ***)&v452);
            unint64_t v7 = v426;
            uint64_t v253 = v452;
            if ((void)v452)
            {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)(*((void *)&v438 + 1) + 40LL),  &v452);
            }

            else
            {
              LOBYTE(__p) = 0;
              char v462 = 0;
            }

            a2 = a2;
            v321 = (std::__shared_weak_count *)*((void *)&v452 + 1);
            if (*((void *)&v452 + 1))
            {
              v322 = (unint64_t *)(*((void *)&v452 + 1) + 8LL);
              do
                unint64_t v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                std::__shared_weak_count::__release_weak(v321);
              }
            }

            if (BYTE8(v471) && SBYTE7(v471) < 0) {
              operator delete((void *)v470);
            }
            if (v253)
            {
              *(void *)&__int128 v452 = 0LL;
              *((void *)&v452 + 1) = &v452;
              *(void *)&__int128 v453 = 0x5002000000LL;
              *((void *)&v453 + 1) = __Block_byref_object_copy__43;
              v454 = __Block_byref_object_dispose__44;
              memset(v455, 0, sizeof(v455));
              int v456 = 1065353216;
              *(void *)&__int128 v457 = 0LL;
              *((void *)&v457 + 1) = &v457;
              *(void *)&__int128 v458 = 0x2000000000LL;
              BYTE8(v45_Block_object_dispose(va, 8) = 1;
              uint64_t v324 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
              *(void *)&__int128 v470 = MEMORY[0x1895F87A8];
              *((void *)&v470 + 1) = 1174405120LL;
              *(void *)&__int128 v471 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
              *((void *)&v471 + 1) = &unk_189DF9C78;
              __int128 v474 = 0uLL;
              *((void *)&v473 + 1) = 0LL;
              std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>( (void *)&v473 + 1,  (const void *)v433,  *((uint64_t *)&v433 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v433 + 1) - v433) >> 2));
              *(void *)&__int128 v472 = &v452;
              *((void *)&v472 + 1) = &v457;
              *(void *)&__int128 v475 = &v448;
              *(void *)&__int128 v473 = &v438;
              enumerate_mapped_memory_core_file_dumped_regions(v324, (uint64_t)&v470);
              if (*(_BYTE *)(*((void *)&v457 + 1) + 24LL))
              {
                v325 = (char *)operator new(0x60uLL);
                v325[16] = 0;
                *(void *)v325 = off_189DF53D0;
                *((void *)v325 + 1) = 0LL;
                CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)(v325 + 24), 0, -1);
                v325[40] = 0;
                *(_OWORD *)(v325 + 41) = *(_OWORD *)&v467[12];
                *(_OWORD *)(v325 + 57) = v463[0];
                *((void *)v325 + 10) = v411;
                *((void *)v325 + 11) = v236;
                v451 = (void **)v325;
                v325[16] = (_DWORD)v236 != 0;
                std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( (uint64_t)&v436,  (uint64_t *)&v451,  (void **)(*((void *)&v438 + 1) + 40LL));
                __int128 v326 = v436;
                __int128 v436 = 0uLL;
                __int128 __p = v326;
                __int128 v461 = v437;
                __int128 v437 = 0uLL;
                char v462 = 1;
                *(void *)&__int128 v469 = (char *)&v436 + 8;
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v469);
                uint64_t v327 = v436;
                *(void *)&__int128 v436 = 0LL;
                if (v327) {
                  (*(void (**)(uint64_t))(*(void *)v327 + 8LL))(v327);
                }
                v328 = v451;
                v451 = 0LL;
                if (v328) {
                  (*((void (**)(void **))*v328 + 1))(v328);
                }
              }

              else
              {
                LOBYTE(__p) = 0;
                char v462 = 0;
              }

              if (*((void *)&v473 + 1))
              {
                *(void *)&__int128 v474 = *((void *)&v473 + 1);
                operator delete(*((void **)&v473 + 1));
              }

              _Block_object_dispose(&v457, 8);
              _Block_object_dispose(&v452, 8);
              std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v455);
            }

            _Block_object_dispose(&v438, 8);
            *(void *)&__int128 v452 = &v441;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
          }

          else
          {
            LOBYTE(__p) = 0;
            char v462 = 0;
            unint64_t v7 = v426;
          }

          if ((void)v433)
          {
            *((void *)&v433 + 1) = v433;
            operator delete((void *)v433);
          }
        }

        else
        {
          LOBYTE(__p) = 0;
          char v462 = 0;
          unint64_t v7 = v426;
        }
      }

      else
      {
        LOBYTE(__p) = 0;
        char v462 = 0;
      }

      std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( v429,  (uint64_t *)&__p);
      v371 = (uint64_t *)&__p;
LABEL_506:
      std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v371);
      goto LABEL_507;
    }

    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v464, &v452);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v452);
    int v191 = (std::__shared_weak_count *)*((void *)&v452 + 1);
    if (*((void *)&v452 + 1))
    {
      int v192 = (unint64_t *)(*((void *)&v452 + 1) + 8LL);
      do
        unint64_t v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }

    uint64_t v194 = (CSCppFakeTask *)operator new(0x60uLL);
    CSCppFakeTask::CSCppFakeTask(v194, -1, 0);
    *(void *)&__int128 v438 = v194;
    v195 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v438, 0LL, 0LL);
    uint64_t v197 = v196;
    uint64_t v198 = v438;
    *(void *)&__int128 v438 = 0LL;
    if (v198) {
      (*(void (**)(uint64_t))(*(void *)v198 + 8LL))(v198);
    }
    uint64_t v223 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(void *)((v197 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(void *)((v197 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v223);
    uint64_t v224 = CSSymbolicatorGetSymbolWithMangledNameAtTime( (char)v195,  v197,  (uint64_t)"_dyld_all_image_infos",  0x8000000000000000LL);
    unint64_t v188 = CSSymbolGetRange(v224, v225);
    if (v188)
    {
LABEL_292:
      CSRelease(v195, v197);
      unint64_t v190 = v188 & 0xFFFFFFFFFFFFFF00LL;
      uint64_t v189 = 1LL;
      goto LABEL_293;
    }

    uint64_t v317 = CSSymbolicatorGetRegionWithNameAtTime( (char)v195,  v197,  (uint64_t)"__DATA_DIRTY __all_image_info",  0x8000000000000000LL);
    uint64_t v319 = v318;
    if (CSIsNull(v317, v318))
    {
      uint64_t v317 = CSSymbolicatorGetRegionWithNameAtTime( (char)v195,  v197,  (uint64_t)"__DATA __all_image_info",  0x8000000000000000LL);
      uint64_t v319 = v320;
      if (CSIsNull(v317, v320))
      {
        CSRelease(v195, v197);
        goto LABEL_260;
      }
    }

    __int128 v452 = 0uLL;
    *(void *)&__int128 v453 = 0LL;
    unint64_t v342 = CSRegionGetRange(v317, v319);
    unint64_t v344 = v343 - 224 + v342;
    if (__CFADD__(v343 - 224, v342))
    {
LABEL_478:
      if (*((void *)&v452 + 1) - (void)v452 == 8LL)
      {
        unint64_t v188 = *(void *)v452;
        char v358 = 1;
        goto LABEL_579;
      }
    }

    else
    {
      while (1)
      {
        v345 = (_DWORD *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v342, 224LL);
        if (v346 <= 0xDF) {
          break;
        }
        BOOL v347 = v342 == v345[14] && v77 == v345[5];
        if (v347 && *v345 >= 0x11u)
        {
          v348 = (char *)*((void *)&v452 + 1);
          if (*((void *)&v452 + 1) >= (unint64_t)v453)
          {
            v350 = (char *)v452;
            uint64_t v351 = (uint64_t)(*((void *)&v452 + 1) - v452) >> 3;
            unint64_t v352 = v351 + 1;
            uint64_t v353 = v453 - v452;
            else {
              unint64_t v354 = v352;
            }
            if (v354)
            {
              v355 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v453, v354);
              v348 = (char *)*((void *)&v452 + 1);
              v350 = (char *)v452;
            }

            else
            {
              v355 = 0LL;
            }

            v356 = (unint64_t *)&v355[8 * v351];
            unint64_t *v356 = v342;
            v349 = v356 + 1;
            while (v348 != v350)
            {
              unint64_t v357 = *((void *)v348 - 1);
              v348 -= 8;
              *--v356 = v357;
            }

            *(void *)&__int128 v452 = v356;
            *((void *)&v452 + 1) = v349;
            *(void *)&__int128 v453 = &v355[8 * v354];
            if (v350) {
              operator delete(v350);
            }
          }

          else
          {
            **((void **)&v452 + 1) = v342;
            v349 = v348 + 8;
          }

          *((void *)&v452 + 1) = v349;
        }

        v342 += 8LL;
        if (v342 > v344) {
          goto LABEL_478;
        }
      }
    }

    CSRelease(v195, v197);
    unint64_t v188 = 0LL;
    char v358 = 0;
LABEL_579:
    if ((void)v452)
    {
      *((void *)&v452 + 1) = v452;
      operator delete((void *)v452);
    }

    if ((v358 & 1) != 0) {
      goto LABEL_292;
    }
LABEL_260:
    LOBYTE(v18_Block_object_dispose(va, 8) = 0;
    uint64_t v189 = 0LL;
    unint64_t v190 = 0LL;
LABEL_293:
    *(void *)&__int128 v452 = &v470;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
    uint64_t v187 = v464;
    goto LABEL_294;
  }

  unint64_t v79 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>( v12,  (uint64_t)v7,  1);
  if (v80)
  {
    uint64_t v81 = v79;
  }

  else
  {
    uint64_t v179 = 0LL;
    while (1)
    {
      uint64_t v180 = (void *)(*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))( &v448,  qword_1860A3FB0[v179] - 16,  40LL);
      if (v181 >= 0x28)
      {
        uint64_t v81 = v180[2];
        BOOL v182 = *v180 == 0x2068736966746143LL || *v180 == 0x20206E656B61724BLL;
        if (v182 && v81 != 0) {
          break;
        }
      }

      if (++v179 == 7)
      {
        *(void *)&__int128 v470 = 0LL;
        *((void *)&v470 + 1) = &v470;
        *(void *)&__int128 v471 = 0x3802000000LL;
        *((void *)&v471 + 1) = __Block_byref_object_copy__9;
        *(void *)&__int128 v472 = __Block_byref_object_dispose__9;
        BYTE8(v472) = 0;
        LOBYTE(v473) = 0;
        uint64_t v184 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
        *(void *)&__int128 v452 = MEMORY[0x1895F87A8];
        *((void *)&v452 + 1) = 0x40000000LL;
        *(void *)&__int128 v453 = ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
        *((void *)&v453 + 1) = &unk_189DF9C50;
        v455[0] = &v448;
        v454 = (uint64_t (*)(uint64_t))&v470;
        enumerate_mapped_memory_core_file_dumped_regions(v184, (uint64_t)&v452);
        uint64_t v77 = *(void *)(*((void *)&v470 + 1) + 40LL);
        uint64_t v185 = *(unsigned __int8 *)(*((void *)&v470 + 1) + 48LL);
        _Block_object_dispose(&v470, 8);
        if (v185) {
          goto LABEL_250;
        }
        unint64_t v304 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>( v12,  (uint64_t)v7,  3);
        LOBYTE(v429[0]) = 0;
        LOBYTE(v431) = 0;
        if (v305)
        {
          LOBYTE(v452) = 0;
          BYTE8(v453) = 0;
          create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  0LL,  v304,  (std::string *)&v452,  (void ***)&v438);
          if (BYTE8(v453) && SBYTE7(v453) < 0) {
            operator delete((void *)v452);
          }
          uint64_t v306 = v438;
          if ((void)v438)
          {
            uint64_t v307 = *((void *)&v438 + 1);
            __int128 __p = v438;
            if (*((void *)&v438 + 1))
            {
              v308 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
              do
                unint64_t v309 = __ldxr(v308);
              while (__stxr(v309 + 1, v308));
            }

            __int128 v464 = 0uLL;
            *(void *)&__int128 v465 = 0LL;
            *(void *)&__int128 v452 = &v464;
            BYTE8(v452) = 0;
            v310 = operator new(0x10uLL);
            *(void *)&__int128 v464 = v310;
            *(void *)&__int128 v465 = v310 + 2;
            void *v310 = v306;
            v310[1] = v307;
            if (v307)
            {
              v311 = (unint64_t *)(v307 + 8);
              do
                unint64_t v312 = __ldxr(v311);
              while (__stxr(v312 + 1, v311));
            }

            *((void *)&v464 + 1) = v310 + 2;
            std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            v313 = (CSCppFakeTask *)operator new(0x60uLL);
            CSCppFakeTask::CSCppFakeTask(v313, -1, 0);
            *(void *)&__int128 v457 = v313;
            std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>( (uint64_t)&v452,  (uint64_t *)&v457,  (void **)&v464);
            __int128 v314 = v452;
            __int128 v452 = 0uLL;
            __int128 v470 = v314;
            __int128 v471 = v453;
            __int128 v453 = 0uLL;
            LOBYTE(v472) = 1;
            *(void *)&__int128 __p = (char *)&v452 + 8;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            uint64_t v315 = v452;
            *(void *)&__int128 v452 = 0LL;
            if (v315) {
              (*(void (**)(uint64_t))(*(void *)v315 + 8LL))(v315);
            }
            uint64_t v316 = v457;
            *(void *)&__int128 v457 = 0LL;
            if (v316) {
              (*(void (**)(uint64_t))(*(void *)v316 + 8LL))(v316);
            }
            *(void *)&__int128 v452 = &v464;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
          }

          else
          {
            LOBYTE(v470) = 0;
            LOBYTE(v472) = 0;
          }

          v401 = (std::__shared_weak_count *)*((void *)&v438 + 1);
          if (*((void *)&v438 + 1))
          {
            v402 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
            do
              unint64_t v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }

          std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( v429,  (uint64_t *)&v470);
          v371 = (uint64_t *)&v470;
          goto LABEL_506;
        }

        goto LABEL_526;
      }
    }
  }

  LOBYTE(v429[0]) = 0;
  LOBYTE(v431) = 0;
  __int128 v464 = 0uLL;
  *(void *)&__int128 v465 = 0LL;
  create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  v81,  (uint64_t)"__kernel__",  (uint64_t)&v444,  1,  &__p);
  if ((void)__p)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464, &__p);
    uint64_t v82 = (const CSCppSymbolOwner *)__p;
    __int128 v457 = __p;
    if (*((void *)&__p + 1))
    {
      uint64_t v83 = (unint64_t *)(*((void *)&__p + 1) + 8LL);
      do
        unint64_t v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }

    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>( v82,  &v438);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v438);
    uint64_t v85 = (CSCppFakeTask *)operator new(0x60uLL);
    CSCppFakeTask::CSCppFakeTask(v85, -1, 1);
    *(void *)&__int128 v433 = v85;
    int v86 = CSSymbolicatorGetFlagsForNListOnlyData();
    uint64_t v87 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v433, v86 | 2u, 0LL);
    uint64_t v89 = v88;
    uint64_t v90 = v433;
    *(void *)&__int128 v433 = 0LL;
    if (v90) {
      (*(void (**)(uint64_t))(*(void *)v90 + 8LL))(v90);
    }
    uint64_t v91 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(void *)((v89 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(void *)((v89 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v91);
    char v92 = CSSymbolicatorGetAOutSymbolOwner((char)v87, v89);
    uint64_t v94 = CSSymbolOwnerGetSymbolWithMangledName(v92, v93, (uint64_t)"_gLoadedKextSummaries");
    unint64_t v96 = CSSymbolGetRange(v94, v95);
    CSRelease(v87, v89);
    *(void *)&__int128 v436 = &v470;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
    uint64_t v97 = (std::__shared_weak_count *)*((void *)&v438 + 1);
    if (*((void *)&v438 + 1))
    {
      __int16 v98 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
      do
        unint64_t v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }

    __int16 v100 = (std::__shared_weak_count *)*((void *)&v457 + 1);
    if (*((void *)&v457 + 1))
    {
      uint64_t v101 = (unint64_t *)(*((void *)&v457 + 1) + 8LL);
      do
        unint64_t v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }

    if (v96)
    {
      unint64_t v103 = (unsigned int *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v96, 4LL);
      if (v104 >= 4)
      {
        uint64_t v105 = *v103;
        __int16 v106 = (_DWORD *)(*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v105, 16LL);
        if (v107 >= 0x10 && *v106 == 2)
        {
          uint64_t v108 = v106[2];
          if (v106[1] == 136 && (_DWORD)v108 != 0)
          {
            uint64_t v110 = 0LL;
            uint64_t v111 = v105 + 16;
            do
            {
              uint64_t v112 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v111 + 136 * v110, 136LL);
              if (v113 >= 0x88)
              {
                __int128 v470 = *(_OWORD *)v112;
                __int128 v114 = *(_OWORD *)(v112 + 16);
                __int128 v115 = *(_OWORD *)(v112 + 32);
                __int128 v116 = *(_OWORD *)(v112 + 64);
                __int128 v473 = *(_OWORD *)(v112 + 48);
                __int128 v474 = v116;
                __int128 v471 = v114;
                __int128 v472 = v115;
                __int128 v117 = *(_OWORD *)(v112 + 80);
                __int128 v118 = *(_OWORD *)(v112 + 96);
                __int128 v119 = *(_OWORD *)(v112 + 112);
                *(void *)&v477[16] = *(void *)(v112 + 128);
                __int128 v476 = v118;
                *(_OWORD *)v477 = v119;
                __int128 v475 = v117;
                char v478 = 1;
                if ((void)v117)
                {
                  create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  v117,  (uint64_t)&v470,  (uint64_t)&v444,  0,  &v438);
                  if ((void)v438) {
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464, &v438);
                  }
                  uint64_t v120 = (std::__shared_weak_count *)*((void *)&v438 + 1);
                  if (*((void *)&v438 + 1))
                  {
                    uint64_t v121 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
                    do
                      unint64_t v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                }
              }

              ++v110;
            }

            while (v110 != v108);
          }
        }
      }
    }

    unint64_t v123 = (CSCppFakeTask *)operator new(0x60uLL);
    CSCppFakeTask::CSCppFakeTask(v123, -1, 1);
    *(void *)&__int128 v436 = v123;
    std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( (uint64_t)&v470,  (uint64_t *)&v436,  (void **)&v464);
    __int128 v124 = v470;
    __int128 v470 = 0uLL;
    __int128 v452 = v124;
    __int128 v453 = v471;
    __int128 v471 = 0uLL;
    LOBYTE(v454) = 1;
    *(void *)&__int128 v438 = (char *)&v470 + 8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    uint64_t v125 = v470;
    *(void *)&__int128 v470 = 0LL;
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 8LL))(v125);
    }
    uint64_t v126 = v436;
    *(void *)&__int128 v436 = 0LL;
    if (v126) {
      (*(void (**)(uint64_t))(*(void *)v126 + 8LL))(v126);
    }
  }

  else
  {
    LOBYTE(v452) = 0;
    LOBYTE(v454) = 0;
  }

  v199 = (std::__shared_weak_count *)*((void *)&__p + 1);
  if (*((void *)&__p + 1))
  {
    size_t v200 = (unint64_t *)(*((void *)&__p + 1) + 8LL);
    do
      unint64_t v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }

  *(void *)&__int128 v470 = &v464;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v470);
  std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( v429,  (uint64_t *)&v452);
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v452);
  char v202 = 0;
LABEL_508:
  if ((_BYTE)v431)
  {
    __int128 v372 = *(_OWORD *)v429;
    v429[0] = 0LL;
    v429[1] = 0LL;
    __int128 v464 = v372;
    __int128 v465 = v430;
    __int128 v430 = 0uLL;
    if ((v202 & 1) == 0)
    {
      uint64_t v373 = *(unsigned int *)(v12 + 20);
      LODWORD(v452) = *(_DWORD *)(v12 + 16);
      *((void *)&v452 + 1) = v12;
      *(void *)&__int128 v453 = v12 + 28 + v373;
      *((void *)&v453 + 1) = v12 + 28;
      for (unint64_t k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v452);
            k;
            unint64_t k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v452))
      {
        if (*(_DWORD *)k == 49 && !strncmp((const char *)(k + 8), "load binary", 0x10uLL))
        {
          read_type_from_raw_core_file_bytes<CS_load_binary_note>( (uint64_t)v7,  *(void *)(k + 24),  *(void *)(k + 32),  1,  (uint64_t)&v470);
          if (BYTE4(v474))
          {
            if (*(void *)((char *)&v471 + 4)
              && (!(DWORD1(v472) ^ 0x6D747073 | BYTE8(v472)) || DWORD1(v472) == 7174260))
            {
              create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>( (uint64_t)&v448,  *(uint64_t *)((char *)&v471 + 4),  (uint64_t)&v472 + 4,  (uint64_t)&v444,  0,  &v438);
              if ((void)v438) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464 + 1, &v438);
              }
              v375 = (std::__shared_weak_count *)*((void *)&v438 + 1);
              if (*((void *)&v438 + 1))
              {
                v376 = (unint64_t *)(*((void *)&v438 + 1) + 8LL);
                do
                  unint64_t v377 = __ldaxr(v376);
                while (__stlxr(v377 - 1, v376));
                if (!v377)
                {
                  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                  std::__shared_weak_count::__release_weak(v375);
                }
              }
            }
          }
        }
      }

      a2 = a2 | 2;
    }

    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    uint64_t v378 = v464;
    *(void *)&__int128 v464 = 0LL;
    *(void *)&__int128 v438 = v378;
    uint64_t v74 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((void *)&v464 + 1, (uint64_t *)&v438, a2, 0LL);
    uint64_t v380 = v379;
    uint64_t v381 = v438;
    *(void *)&__int128 v438 = 0LL;
    if (v381) {
      (*(void (**)(uint64_t))(*(void *)v381 + 8LL))(v381);
    }
    uint64_t v382 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(void *)((v380 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(void *)((v380 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v382);
    *(void *)&__int128 v470 = MEMORY[0x1895F87A8];
    *((void *)&v470 + 1) = 0x40000000LL;
    *(void *)&__int128 v471 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
    *((void *)&v471 + 1) = &__block_descriptor_tmp_4_2;
    *(void *)&__int128 v472 = v74;
    *((void *)&v472 + 1) = v380;
    CSSymbolicatorApplyMutableContextBlock(v74, v380, (uint64_t)&v470);
    *(void *)&__int128 v452 = (char *)&v464 + 8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
    uint64_t v383 = v464;
    *(void *)&__int128 v464 = 0LL;
    if (v383) {
      (*(void (**)(uint64_t))(*(void *)v383 + 8LL))(v383);
    }
  }

  else
  {
LABEL_526:
    uint64_t v74 = 0LL;
  }

  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)v429);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v448);
LABEL_533:
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v444);
LABEL_137:
  unint64_t v75 = (__int128 *)v432;
LABEL_141:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v75);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v428);
  return v74;
}

void sub_18605F1DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v63 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v63;
    operator delete(v63);
  }

  STACK[0x350] = v61 - 256;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  if (a61) {
    (*(void (**)(uint64_t))(*(void *)a61 + 8LL))(a61);
  }
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&STACK[0x300]);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&STACK[0x330]);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a31);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a36);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&STACK[0x250]);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a16);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = a1;
  uint64_t v13 = a1 + 28 + v5;
  uint64_t v14 = a1 + 28;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type) {
        goto LABEL_6;
      }
    }

    uint64_t type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>( a2,  *(void *)(v7 + 24),  *(void *)(v7 + 32),  1);
    unint64_t v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if ((_DWORD)type_from_raw_core_file == 2)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>( a2,  v7,  a3);
        goto LABEL_13;
      }

      if ((_DWORD)type_from_raw_core_file == 1)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>( a2,  v7,  a3);
LABEL_13:
        unint64_t v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00LL;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }

      unint64_t v8 = 0LL;
    }

    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }

LABEL_6:
  unint64_t v8 = 0LL;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

  unint64_t v8 = 0LL;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_14;
  void v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000LL, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((void *)result);
    if (result)
    {
      uint64_t v7 = (char *)result;
      char MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      char v9 = (char)MutableInContext;
      uint64_t v11 = v10;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v10, v7);
      Path = (const char *)CSSymbolOwnerGetPath(v9, v11);
      if (!Path) {
        return CSSymbolOwnerSetPath(v9, v11, v7);
      }
      uint64_t result = strcmp(Path, "<unknown>");
      if (!(_DWORD)result) {
        return CSSymbolOwnerSetPath(v9, v11, v7);
      }
    }
  }

  return result;
}

void *std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  unint64_t i = operator new(0x28uLL);
  *unint64_t i = 0LL;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_42:
    void *v21 = i;
    goto LABEL_43;
  }

  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }

void sub_18605FE4C(_Unwind_Exception *a1)
{
}

void read_type_from_raw_core_file_bytes<CS_all_image_infos_header>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x17)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
  }

  else
  {
    CSCppFileMemory::CSCppFileMemory(v10, a1, a2);
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v10[0] + 32LL))(v10, a2, 24LL);
    if (v8 > 0x17)
    {
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(void *)(a5 + 16) = *(void *)(v7 + 16);
      char v9 = 1;
    }

    else
    {
      char v9 = 0;
      *(_BYTE *)a5 = 0;
    }

    *(_BYTE *)(a5 + 24) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v10);
  }

void sub_18605FF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void read_type_from_raw_core_file_bytes<CS_image_entry>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x2F)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 4_Block_object_dispose(va, 8) = 0;
  }

  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32LL))(v11, a2, 48LL);
    if (v8 > 0x2F)
    {
      __int128 v10 = v7[1];
      *(_OWORD *)a5 = *v7;
      *(_OWORD *)(a5 + 16) = v10;
      *(_OWORD *)(a5 + 32) = v7[2];
      char v9 = 1;
    }

    else
    {
      char v9 = 0;
      *(_BYTE *)a5 = 0;
    }

    *(_BYTE *)(a5 + 4_Block_object_dispose(va, 8) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }

void sub_18605FFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>( uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 && a3 < 4)
  {
    LOBYTE(v6) = 0;
    uint64_t v7 = 0LL;
  }

  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    unint64_t v8 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v11[0] + 32LL))(v11, a2, 4LL);
    if (v9 >= 4)
    {
      unsigned int v6 = *v8;
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v7 = 0LL;
      unsigned int v6 = 0;
    }

    unsigned int v4 = v6 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }

  return (v7 << 32) | ((*(void *)&v4 & 0xFFFFFFLL) << 8) | v6;
}

void sub_186060084(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>( uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 32) < 0x24uLL) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v13[0] + 32LL))(v13, v4, 36LL);
  if (v6 < 0x24)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    uint64_t v12 = 0LL;
    unint64_t v11 = 0LL;
    return v11 | v12;
  }

  int v7 = *(_DWORD *)(v5 + 4);
  uint64_t v8 = *(void *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1) {
    goto LABEL_9;
  }
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFF00LL;
  uint64_t v12 = v8;
  return v11 | v12;
}

void sub_186060158(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>( uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 32) < 0x30uLL) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v13[0] + 32LL))(v13, v4, 48LL);
  if (v6 < 0x30)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    uint64_t v12 = 0LL;
    unint64_t v11 = 0LL;
    return v11 | v12;
  }

  int v7 = *(_DWORD *)(v5 + 4);
  uint64_t v8 = *(void *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1) {
    goto LABEL_9;
  }
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFF00LL;
  uint64_t v12 = v8;
  return v11 | v12;
}

void sub_18606022C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke( uint64_t a1, void *a2, _BYTE *a3)
{
  unint64_t v4 = (*a2 + 4095LL) & 0xFFFFFFFFFFFFF000LL;
  while (v4 < *a2 + a2[3] - 28LL)
  {
    uint64_t v12 = 0LL;
    int mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>( *(void *)(a1 + 40),  v4,  (uint64_t)"<unknown>",  (uint64_t *)&v12);
    if (mach_header_and_cmds_from)
    {
      if (mach_header_and_cmds_from == 29)
      {
        v4 += 4096LL;
        int v8 = 2;
        goto LABEL_9;
      }

      int v8 = 1;
    }

    else
    {
      uint64_t v9 = v12[3];
      if (*(_DWORD *)(v9 + 12) != 7)
      {
        unint64_t v11 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(v9, "__TEXT");
        int v8 = 0;
        if (v11) {
          unint64_t v4 = (v4 + *(unsigned int *)(v11 + 28) + 4095) & 0xFFFFFFFFFFFFF000LL;
        }
        else {
          v4 += 4096LL;
        }
        goto LABEL_9;
      }

      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(void *)(v10 + 40) = v4;
      int v8 = 1;
      *(_BYTE *)(v10 + 4_Block_object_dispose(va, 8) = 1;
    }

    *a3 = 1;
LABEL_9:
    if (v12) {
      (*(void (**)(void *))(*v12 + 8LL))(v12);
    }
    if ((v8 | 2) != 2) {
      return;
    }
  }

  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 40));
}

void sub_1860603B8(_Unwind_Exception *a1)
{
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v6 = a2;
  int v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, 28LL);
  if (!v8) {
    return 5LL;
  }
  if (*v8 == -17958194)
  {
    unint64_t v9 = 28LL;
    while (1)
    {
      uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, void, unint64_t))(*(void *)a1 + 32LL))(a1, v6, v9);
      if (!v10) {
        break;
      }
      uint64_t v12 = (uint64_t)v10;
      if (*v10 != -17958194) {
        break;
      }
      unint64_t v9 = v10[5] + 28LL;
      if (v9 <= v11)
      {
        uint64_t v13 = operator new(0x48uLL);
        TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader( (uint64_t)v13,  a1,  v6,  v12,  a3,  0,  0,  v14,  0LL,  0);
        uint64_t result = *a4;
        *a4 = (uint64_t)v13;
        if (result)
        {
          (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
          return 0LL;
        }

        return result;
      }
    }

    return 5LL;
  }

  return 29LL;
}

void sub_1860604EC(_Unwind_Exception *a1)
{
}

__n128 __Block_byref_object_copy__40(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>( std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, a2);
  }

  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }

  return a1;
}

void create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X3>, void ***a5@<X8>)
{
  if (a4[1].__r_.__value_.__s.__data_[0])
  {
    else {
      std::string v13 = *a4;
    }
    char v14 = 1;
  }

  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v13);
  }

  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v13, "<unknown>", &__p);
  uint64_t v11 = 0LL;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>( a1,  a3,  (uint64_t)p_p,  &v11))
  {
    *a5 = 0LL;
    a5[1] = 0LL;
    uint64_t v9 = v11;
  }

  else
  {
    uint64_t v9 = v11;
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v11, a5);
    if (v14)
    {
      uint64_t v10 = (v13.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v13 : (std::string *)v13.__r_.__value_.__r.__words[0];
    }
  }

  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  if (v14)
  {
  }

void sub_1860606DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table( a1 + 40,  (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__44(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke( uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unint64_t v4 = *(unsigned int **)(a1 + 56);
  uint64_t v5 = *(unsigned int **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_18:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    while (1)
    {
      if ((unint64_t)*v4 - v7 < v8)
      {
        uint64_t v9 = (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
        __p.__r_.__value_.__r.__words[0] = *v4;
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( v9,  (unint64_t *)&__p))
        {
          break;
        }

        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  v4);
        uint64_t v10 = *(void *)(a1 + 80);
        uint64_t v12 = *v4;
        unint64_t v11 = v4[1];
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v18 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>(v10, v11, v12, &__p, (void ***)&v19);
        uint64_t v13 = v19;
        if ((void)v19)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  &v19);
        }

        else
        {
          *a3 = 1;
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
        }

        char v14 = (std::__shared_weak_count *)*((void *)&v19 + 1);
        if (*((void *)&v19 + 1))
        {
          float v15 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
          do
            unint64_t v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }

        if (!v13) {
          break;
        }
      }

      v4 += 3;
      if (v4 == v5) {
        goto LABEL_18;
      }
    }
  }

void sub_1860608A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
}

void *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0LL;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>( v2,  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>( uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__l.__cap_ = *(void *)(a1 + 16);
    }
  }

  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  unsigned int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      __n128 result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>( void *a1, unsigned int *a2)
{
  uint8x8_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  v4[1] = v5;
  _DWORD v4[2] = v5;
  void *v4 = 0LL;
  char inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique( a1,  v4);
  if ((v7 & 1) == 0) {
    operator delete(v4);
  }
  return inserted;
}

void sub_186060A6C(_Unwind_Exception *a1)
{
}

void *std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    __n128 result = std::vector<TRangeValue<Pointer32,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186060ADC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)(a1 + 8),  *a3,  a3[1],  ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_186060B3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>( void **a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((_BYTE *)a1 + 32)) {
      std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100]( a1,  a2);
    }
  }

  else if (*((_BYTE *)a1 + 32))
  {
    std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100]((uint64_t)a1);
  }

  else
  {
    uint64_t v3 = (void *)*a2;
    *a2 = 0LL;
    *a1 = v3;
    a1[1] = 0LL;
    a1[2] = 0LL;
    a1[3] = 0LL;
    __n128 result = *(__n128 *)(a2 + 1);
    *(__n128 *)(a1 + 1) = result;
    a1[3] = (void *)a2[3];
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 0LL;
    *((_BYTE *)a1 + 32) = 1;
  }

  return result;
}

void **std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100]( void **a1, uint64_t *a2)
{
  uint64_t v4 = (void *)*a2;
  *a2 = 0LL;
  uint64_t v5 = (uint64_t)*a1;
  *a1 = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = (void *)a2[3];
  a2[1] = 0LL;
  a2[2] = 0LL;
  a2[3] = 0LL;
  return a1;
}

uint64_t std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100]( uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    uint64_t v1 = result;
    int8x8_t v2 = (void **)(result + 8);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
    __n128 result = *(void *)v1;
    *(void *)uint64_t v1 = 0LL;
    if (result) {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    *(_BYTE *)(v1 + 32) = 0;
  }

  return result;
}

uint64_t *std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]( uint64_t *a1)
{
  if (*((_BYTE *)a1 + 32))
  {
    uint64_t v4 = (void **)(a1 + 1);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v2 = *a1;
    *a1 = 0LL;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  return a1;
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v23 = 0LL;
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>( a1,  a2,  a3,  &v23))
  {
    *a6 = 0LL;
    a6[1] = 0LL;
    uint64_t v9 = v23;
    if (!v23) {
      return;
    }
    goto LABEL_3;
  }

  uint64_t v9 = v23;
  unint64_t v24 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(*(void *)(v23 + 24));
  uint64_t v10 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( a4,  v24,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v24)[4];
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v9, a6);
  uint64_t v11 = *a6;
  *(_DWORD *)(v11 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*a6 + 108LL) | 0x1000000;
  uint64_t v12 = *(char **)(v11 + 32);
  uint64_t v13 = *(char **)(v11 + 40);
  while (v12 != v13)
  {
    char v14 = (const char *)*((void *)v12 + 2);
    if (!strncmp(v14, "__PRELINK", 9uLL) || !strncmp(v14, "__PLK", 5uLL))
    {
      int64_t v15 = v13 - (v12 + 32);
      if (v13 != v12 + 32) {
        memmove(v12, v12 + 32, v13 - (v12 + 32));
      }
      v13 -= 32;
      *(void *)(v11 + 40) = &v12[v15];
    }

    else
    {
      v12 += 32;
    }
  }

  if (v10)
  {
    unint64_t v16 = *(const char **)(v10 + 120);
    if (v16) {
      CSCppSymbolOwner::set_path((void **)*a6, v16);
    }
    unint64_t v17 = *(const char **)(v10 + 128);
    uint64_t v18 = *a6;
    unsigned int v19 = *(_DWORD *)(*a6 + 108LL) & 0xFFF7EFFF;
    *(_DWORD *)(*a6 + 108LL) = v19;
    int v20 = *(_DWORD *)(v10 + 108);
    if ((v20 & 0x80000) != 0)
    {
      v19 |= 0x80000u;
      *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v19;
      int v20 = *(_DWORD *)(v10 + 108);
    }

    if ((v20 & 0x1000) != 0)
    {
      v19 |= 0x1000u;
      *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v19;
    }
  }

  else
  {
    uint64_t v18 = *a6;
    unsigned int v19 = *(_DWORD *)(*a6 + 108LL);
  }

  if (a5) {
    int v21 = -513;
  }
  else {
    int v21 = -529;
  }
  int v22 = v19 & v21;
  if ((v19 & 0x200) != 0 || (a5 & 1) == 0) {
    *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v22;
  }
  *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v22 & 0xFEFFFDFF;
  if (v9) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
}

void sub_186060EB0(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>( uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)(a1 + 8),  *a3,  a3[1],  ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_186060F3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>( uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)(a1 + 8),  *a3,  a3[1],  ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_186060FA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

void read_type_from_raw_core_file_bytes<CS_load_binary_note>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 && a3 <= 0x43)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 6_Block_object_dispose(va, 8) = 0;
  }

  else
  {
    CSCppFileMemory::CSCppFileMemory(v12, a1, a2);
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v12[0] + 32LL))(v12, a2, 68LL);
    if (v8 > 0x43)
    {
      __int128 v10 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a5 + 32) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a5 + 4_Block_object_dispose(va, 8) = v10;
      *(_DWORD *)(a5 + 64) = *(_DWORD *)(v7 + 64);
      __int128 v11 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(_OWORD *)(a5 + 16) = v11;
      char v9 = 1;
    }

    else
    {
      char v9 = 0;
      *(_BYTE *)a5 = 0;
    }

    *(_BYTE *)(a5 + 6_Block_object_dispose(va, 8) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v12);
  }

void sub_186061078(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = a1;
  uint64_t v13 = a1 + 32 + v5;
  uint64_t v14 = a1 + 32;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      unint64_t address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      uint64_t v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type) {
        goto LABEL_6;
      }
    }

    uint64_t type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>( a2,  *(void *)(v7 + 24),  *(void *)(v7 + 32),  1);
    unint64_t v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if ((_DWORD)type_from_raw_core_file == 2)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>( a2,  v7,  a3);
        goto LABEL_13;
      }

      if ((_DWORD)type_from_raw_core_file == 1)
      {
        unint64_t address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>( a2,  v7,  a3);
LABEL_13:
        unint64_t v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00LL;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }

      unint64_t v8 = 0LL;
    }

    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_51;
  void v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000LL, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((void *)result);
    if (result)
    {
      uint64_t v7 = (char *)result;
      char MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      char v9 = (char)MutableInContext;
      uint64_t v11 = v10;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v10, v7);
      Path = (const char *)CSSymbolOwnerGetPath(v9, v11);
      if (!Path) {
        return CSSymbolOwnerSetPath(v9, v11, v7);
      }
      uint64_t result = strcmp(Path, "<unknown>");
      if (!(_DWORD)result) {
        return CSSymbolOwnerSetPath(v9, v11, v7);
      }
    }
  }

  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke( uint64_t a1, void *a2, _BYTE *a3)
{
  unint64_t v4 = (*a2 + 4095LL) & 0xFFFFFFFFFFFFF000LL;
  while (v4 < *a2 + a2[3] - 32LL)
  {
    uint64_t v12 = 0LL;
    int mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>( *(void *)(a1 + 40),  v4,  (uint64_t)"<unknown>",  (uint64_t *)&v12);
    if (mach_header_and_cmds_from)
    {
      if (mach_header_and_cmds_from == 29)
      {
        v4 += 4096LL;
        int v8 = 2;
        goto LABEL_9;
      }

      int v8 = 1;
    }

    else
    {
      uint64_t v9 = v12[3];
      if (*(_DWORD *)(v9 + 12) != 7)
      {
        unint64_t v11 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(v9, "__TEXT");
        int v8 = 0;
        if (v11) {
          unint64_t v4 = (v4 + *(void *)(v11 + 32) + 4095) & 0xFFFFFFFFFFFFF000LL;
        }
        else {
          v4 += 4096LL;
        }
        goto LABEL_9;
      }

      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(void *)(v10 + 40) = v4;
      int v8 = 1;
      *(_BYTE *)(v10 + 4_Block_object_dispose(va, 8) = 1;
    }

    *a3 = 1;
LABEL_9:
    if (v12) {
      (*(void (**)(void *))(*v12 + 8LL))(v12);
    }
    if ((v8 | 2) != 2) {
      return;
    }
  }

  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 40));
}

void sub_186061404(_Unwind_Exception *a1)
{
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, 32LL);
  if (!v8) {
    return 5LL;
  }
  if (*v8 == -17958193)
  {
    unint64_t v9 = 32LL;
    while (1)
    {
      uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 32LL))(a1, a2, v9);
      if (!v10) {
        break;
      }
      uint64_t v12 = (uint64_t)v10;
      if (*v10 != -17958193) {
        break;
      }
      unint64_t v9 = v10[5] + 32LL;
      if (v9 <= v11)
      {
        uint64_t v13 = operator new(0x58uLL);
        LOBYTE(v15) = 0;
        char v16 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader( (uint64_t)v13,  a1,  a2,  v12,  a3,  0,  0,  &v15);
        uint64_t result = *a4;
        *a4 = (uint64_t)v13;
        if (result)
        {
          (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
          return 0LL;
        }

        return result;
      }
    }

    return 5LL;
  }

  return 29LL;
}

void sub_186061534(_Unwind_Exception *a1)
{
}

void create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X3>, void ***a5@<X8>)
{
  if (a4[1].__r_.__value_.__s.__data_[0])
  {
    else {
      std::string v13 = *a4;
    }
    char v14 = 1;
  }

  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v13);
  }

  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v13, "<unknown>", &__p);
  uint64_t v11 = 0LL;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>( a1,  a3,  (uint64_t)p_p,  &v11))
  {
    *a5 = 0LL;
    a5[1] = 0LL;
    uint64_t v9 = v11;
  }

  else
  {
    uint64_t v9 = v11;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v11, a5);
    if (v14)
    {
      uint64_t v10 = (v13.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v13 : (std::string *)v13.__r_.__value_.__r.__words[0];
    }
  }

  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  if (v14)
  {
  }

void sub_186061694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }

  _Unwind_Resume(a1);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke( uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unint64_t v4 = *(unint64_t **)(a1 + 56);
  uint64_t v5 = *(unint64_t **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_18:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    while (1)
    {
      if (*v4 - v7 < v8)
      {
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  v4))
        {
          break;
        }

        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( *(void *)(*(void *)(a1 + 32) + 8LL) + 40LL,  v4,  v4);
        uint64_t v9 = *(void *)(a1 + 80);
        uint64_t v11 = *v4;
        unint64_t v10 = v4[1];
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v17 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>(v9, v10, v11, &__p, (void ***)&v18);
        uint64_t v12 = v18;
        if ((void)v18)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]( (char **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  &v18);
        }

        else
        {
          *a3 = 1;
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
        }

        std::string v13 = (std::__shared_weak_count *)*((void *)&v18 + 1);
        if (*((void *)&v18 + 1))
        {
          char v14 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
          do
            unint64_t v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        if (!v12) {
          break;
        }
      }

      v4 += 3;
      if (v4 == v5) {
        goto LABEL_18;
      }
    }
  }

void sub_186061848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
}

void *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0LL;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>( v2,  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0LL;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  unsigned int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }

  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    unsigned int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_186061AC0(_Unwind_Exception *a1)
{
}

void *std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186061B30(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v23 = 0LL;
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>( a1,  a2,  a3,  &v23))
  {
    *a6 = 0LL;
    a6[1] = 0LL;
    uint64_t v9 = v23;
    if (!v23) {
      return;
    }
    goto LABEL_3;
  }

  uint64_t v9 = v23;
  unint64_t v24 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(*(void *)(v23 + 24));
  uint64_t v10 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( a4,  v24,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v24)[4];
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v9, a6);
  uint64_t v11 = *a6;
  *(_DWORD *)(v11 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*a6 + 108LL) | 0x1000000;
  float v12 = *(char **)(v11 + 32);
  float v13 = *(char **)(v11 + 40);
  while (v12 != v13)
  {
    BOOL v14 = (const char *)*((void *)v12 + 2);
    if (!strncmp(v14, "__PRELINK", 9uLL) || !strncmp(v14, "__PLK", 5uLL))
    {
      int64_t v15 = v13 - (v12 + 32);
      if (v13 != v12 + 32) {
        memmove(v12, v12 + 32, v13 - (v12 + 32));
      }
      v13 -= 32;
      *(void *)(v11 + 40) = &v12[v15];
    }

    else
    {
      v12 += 32;
    }
  }

  if (v10)
  {
    unint64_t v16 = *(const char **)(v10 + 120);
    if (v16) {
      CSCppSymbolOwner::set_path((void **)*a6, v16);
    }
    size_t v17 = *(const char **)(v10 + 128);
    uint64_t v18 = *a6;
    unsigned int v19 = *(_DWORD *)(*a6 + 108LL) & 0xFFF7EFFF;
    *(_DWORD *)(*a6 + 108LL) = v19;
    int v20 = *(_DWORD *)(v10 + 108);
    if ((v20 & 0x80000) != 0)
    {
      v19 |= 0x80000u;
      *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v19;
      int v20 = *(_DWORD *)(v10 + 108);
    }

    if ((v20 & 0x1000) != 0)
    {
      v19 |= 0x1000u;
      *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v19;
    }
  }

  else
  {
    uint64_t v18 = *a6;
    unsigned int v19 = *(_DWORD *)(*a6 + 108LL);
  }

  if (a5) {
    int v21 = -513;
  }
  else {
    int v21 = -529;
  }
  int v22 = v19 & v21;
  if ((v19 & 0x200) != 0 || (a5 & 1) == 0) {
    *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v22;
  }
  *(_DWORD *)(v18 + 10_Block_object_dispose(va, 8) = v22 & 0xFEFFFDFF;
  if (v9) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
}

void sub_186061D34(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(a1);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, const CSCppMachTaskContainer *a2, int a3)
{
  *(void *)this = off_189DF9D58;
  uint64_t v5 = (CSCppTaskMemory *)((char *)this + 8);
  CSCppMachTaskContainer::CSCppMachTaskContainer((uint64_t)this + 8, (uint64_t)a2);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a3) {
    task_suspend2(*((_DWORD *)this + 4), (task_suspension_token_t *)this + 28);
  }
  mach_msg_type_number_t task_info_outCnt = 5;
  if (!CSCppMachTaskContainer::is_self_task(v5))
  {
    if (CSTaskIs64Bit(*((_DWORD *)this + 4)))
    {
      if ((CSTaskIsTranslated() & 1) == 0 && !task_info(*MEMORY[0x1895FBBE0], 0x11u, task_info_out, &task_info_outCnt))
      {
        uint64_t v6 = *(void *)task_info_out;
        uint64_t shared_cache_range = _dyld_get_shared_cache_range();
        if (shared_cache_range)
        {
          uint64_t v8 = v12[1];
          if (CSCppTaskMemory::region_at_address(this, shared_cache_range, 1) == shared_cache_range)
          {
            *((void *)this + 9) = shared_cache_range;
            *((void *)this + 10) = v8;
            v12[0] = this;
            uint64_t v9 = (char *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at( v12,  shared_cache_range);
            v11[0] = MEMORY[0x1895F87A8];
            v11[1] = 0x40000000LL;
            void v11[2] = ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke;
            void v11[3] = &__block_descriptor_tmp_15;
            v11[4] = this;
            v11[5] = v6;
            CSCppDyldSharedCache::for_each_mapped_cache(v9, (uint64_t)v11);
            for (unint64_t i = (void *)*((void *)this + 11); i != *((void **)this + 12); i += 2)
            {
              if (*i) {
                return;
              }
            }

            *((void *)this + 9) = 0LL;
            *((void *)this + 10) = 0LL;
          }
        }
      }
    }
  }

void sub_186061EF4(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)v1[6];
  if (v6)
  {
    v1[7] = v6;
    operator delete(v6);
  }

  uint64_t v7 = *v3;
  if (*v3)
  {
    v1[4] = v7;
    operator delete(v7);
  }

  CSCppMachTaskContainer::~CSCppMachTaskContainer(v2);
  _Unwind_Resume(a1);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, mach_port_name_t a2, int a3, int a4)
{
}

void sub_186061F94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

mach_vm_address_t CSCppTaskMemory::region_at_address(CSCppTaskMemory *this, mach_vm_address_t a2, int a3)
{
  kern_return_t v5;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[12];
  natural_t nesting_depth;
  nesting_depth = 999999;
  mach_vm_address_t address = a2;
  size = 0LL;
  infoCnt = 12;
  uint64_t v5 = mach_vm_region_recurse(*((_DWORD *)this + 4), &address, &size, &nesting_depth, info, &infoCnt);
  uint64_t result = 0LL;
  if (!v5)
  {
    if (address > a2 || size + address <= a2)
    {
      return 0LL;
    }

    else if ((info[0] & a3) == a3)
    {
      return address;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke( uint64_t a1, CSCppDyldSharedCache *this)
{
  unint64_t v3 = *(void **)(a1 + 32);
  CSCppDyldSharedCache::data_segment_ranges(this, &v21);
  unint64_t v4 = v21;
  uint64_t v5 = v22;
  if (v21 != v22)
  {
    uint64_t v6 = (char **)(v3 + 11);
    uint64_t v7 = v3 + 13;
    uint64_t v8 = (char *)v3[12];
    do
    {
      uint64_t v9 = v4[1];
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 152LL) + *v4;
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v11 = (v8 - *v6) >> 4;
        uint64_t v12 = *v7 - (void)*v6;
        uint64_t v13 = v12 >> 3;
        else {
          unint64_t v14 = v13;
        }
        int64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)(v3 + 13),  v14);
        size_t v17 = &v15[16 * v11];
        *(void *)size_t v17 = v10;
        *((void *)v17 + 1) = v9;
        unsigned int v19 = (char *)v3[11];
        uint64_t v18 = (char *)v3[12];
        int v20 = v17;
        if (v18 != v19)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
            v20 -= 16;
            v18 -= 16;
          }

          while (v18 != v19);
          uint64_t v18 = *v6;
        }

        uint64_t v8 = v17 + 16;
        v3[11] = v20;
        v3[12] = v17 + 16;
        v3[13] = &v15[16 * v16];
        if (v18) {
          operator delete(v18);
        }
      }

      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = v9;
        v8 += 16;
      }

      v3[12] = v8;
      v4 += 2;
    }

    while (v4 != v5);
    unint64_t v4 = v21;
  }

  if (v4)
  {
    int v22 = v4;
    operator delete(v4);
  }

void sub_1860621A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CSCppTaskMemory::~CSCppTaskMemory(CSCppTaskMemory *this)
{
  *(void *)this = off_189DF9D58;
  task_suspension_token_t v2 = *((_DWORD *)this + 28);
  if (v2 + 1 >= 2)
  {
    task_resume2(v2);
    *((_DWORD *)this + 2_Block_object_dispose(va, 8) = 0;
  }

  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3 != *((void *)this + 4))
    {
      unint64_t v4 = (vm_map_t *)MEMORY[0x1895FBBE0];
      do
      {
        mach_vm_deallocate(*v4, *(void *)(v3 + 16), *(void *)(v3 + 8));
        v3 += 24LL;
      }

      while (v3 != *((void *)this + 4));
    }

    uint64_t v5 = *((void *)this + 6);
    if (v5 != *((void *)this + 7))
    {
      uint64_t v6 = (vm_map_t *)MEMORY[0x1895FBBE0];
      do
      {
        mach_vm_deallocate(*v6, *(void *)(v5 + 16), *(void *)(v5 + 8));
        v5 += 24LL;
      }

      while (v5 != *((void *)this + 7));
    }
  }

  *((void *)this + 4) = *((void *)this + 3);
  uint64_t v7 = (void *)*((void *)this + 6);
  *((void *)this + 7) = v7;
  uint64_t v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
    uint64_t v7 = (void *)*((void *)this + 6);
  }

  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }

  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }

  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppTaskMemory *)((char *)this + 8));
}

{
  void *v1;
  CSCppTaskMemory::~CSCppTaskMemory(this);
  operator delete(v1);
}

uint64_t CSCppTaskMemory::map_task_memory( uint64_t a1, mach_vm_address_t a2, mach_vm_size_t a3, mach_vm_address_t *a4, _DWORD *a5)
{
  if (CSCppMachTaskContainer::is_self_task((CSCppMachTaskContainer *)(a1 + 8)))
  {
    uint64_t result = 0LL;
    *a4 = a2;
    *a5 = a3;
  }

  else
  {
    *a4 = 0LL;
    *a5 = a3;
    vm_prot_t v12 = 1;
    vm_prot_t cur_protection = 0;
    unint64_t v11 = 0LL;
    uint64_t result = remap_memory_from_target( *MEMORY[0x1895FBBE0],  &v11,  a3,  0LL,  33,  *(_DWORD *)(a1 + 16),  a2,  1,  &cur_protection,  &v12,  1u);
    if (!(_DWORD)result) {
      *a4 = v11;
    }
  }

  return result;
}

uint64_t CSCppTaskMemory::resume(CSCppTaskMemory *this)
{
  uint64_t result = *((unsigned int *)this + 28);
  if ((result + 1) >= 2)
  {
    uint64_t result = task_resume2(result);
    *((_DWORD *)this + 2_Block_object_dispose(va, 8) = 0;
  }

  return result;
}

mach_vm_address_t CSCppTaskMemory::bytes_at( CSCppTaskMemory *this, mach_vm_address_t a2, mach_vm_address_t a3)
{
  mach_vm_address_t v3 = a3;
  mach_vm_address_t v4 = a2;
  mach_vm_address_t v6 = *((void *)this + 9);
  mach_vm_address_t v7 = a3 + a2;
  if (a2 >= v6 && v7 <= *((void *)this + 10) + v6)
  {
    for (unint64_t i = (mach_vm_address_t *)*((void *)this + 11); i != *((mach_vm_address_t **)this + 12); i += 2)
    {
      if (a2 >= *i && v7 <= i[1] + *i) {
        goto LABEL_3;
      }
    }
  }

  else
  {
LABEL_3:
    uint64_t v10 = (char *)*((void *)this + 3);
    uint64_t v9 = (char *)*((void *)this + 4);
    uint64_t v8 = (char *)this + 24;
    if (v9 != v10)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
      vm_prot_t v12 = (char *)*((void *)this + 3);
      do
      {
        unint64_t v13 = v11 >> 1;
        unint64_t v14 = (mach_vm_address_t *)&v12[24 * (v11 >> 1)];
        mach_vm_address_t v16 = *v14;
        int64_t v15 = (char *)(v14 + 3);
        v11 += ~(v11 >> 1);
        if (v16 < v7) {
          vm_prot_t v12 = v15;
        }
        else {
          unint64_t v11 = v13;
        }
      }

      while (v11);
      if (v12 != v10)
      {
        unint64_t v17 = *((void *)v12 - 3);
        if (a2 >= v17 && v7 <= *((void *)v12 - 2) + v17) {
          return a2 - v17 + *((void *)v12 - 1);
        }
      }
    }

    if (a2 >= v7)
    {
      mach_vm_address_t v19 = a2;
LABEL_22:
      if (v9 != v10)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
        uint64_t v9 = v10;
        do
        {
          unint64_t v24 = v23 >> 1;
          unint64_t v25 = (mach_vm_address_t *)&v9[24 * (v23 >> 1)];
          mach_vm_address_t v27 = *v25;
          uint64_t v26 = (char *)(v25 + 3);
          v23 += ~(v23 >> 1);
          if (v27 < v7) {
            uint64_t v9 = v26;
          }
          else {
            unint64_t v23 = v24;
          }
        }

        while (v23);
      }

      size_t v28 = v9;
      while (v28 != v10)
      {
        uint64_t v29 = *((void *)v28 - 3);
        uint64_t v30 = *((void *)v28 - 2);
        v28 -= 24;
        if (v19 >= v30 + v29)
        {
          uint64_t v10 = v28 + 24;
          break;
        }
      }

      if (v10 != v9)
      {
        BOOL v31 = (void *)((char *)this + 48);
        uint64_t v32 = (void *)((char *)this + 64);
        char v33 = (char *)*((void *)this + 7);
        __int128 v34 = v10;
        do
        {
          if ((unint64_t)v33 >= *v32)
          {
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-*v31] >> 3);
            unint64_t v37 = v36 + 1;
            if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            else {
              unint64_t v38 = v37;
            }
            if (v38) {
              unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)this + 64,  v38);
            }
            else {
              unint64_t v39 = 0LL;
            }
            char v40 = &v39[24 * v36];
            __int128 v41 = *(_OWORD *)v34;
            *((void *)v40 + 2) = *((void *)v34 + 2);
            *(_OWORD *)char v40 = v41;
            unint64_t v43 = (char *)*((void *)this + 6);
            unint64_t v42 = (char *)*((void *)this + 7);
            unint64_t v44 = v40;
            if (v42 != v43)
            {
              do
              {
                __int128 v45 = *(_OWORD *)(v42 - 24);
                *((void *)v44 - 1) = *((void *)v42 - 1);
                *(_OWORD *)(v44 - 24) = v45;
                v44 -= 24;
                v42 -= 24;
              }

              while (v42 != v43);
              unint64_t v42 = (char *)*v31;
            }

            char v33 = v40 + 24;
            *((void *)this + 6) = v44;
            *((void *)this + 7) = v40 + 24;
            *((void *)this + _Block_object_dispose(va, 8) = &v39[24 * v38];
            if (v42) {
              operator delete(v42);
            }
          }

          else
          {
            __int128 v35 = *(_OWORD *)v34;
            *((void *)v33 + 2) = *((void *)v34 + 2);
            *(_OWORD *)char v33 = v35;
            v33 += 24;
          }

          *((void *)this + 7) = v33;
          mach_vm_address_t v46 = v3 + v19;
          mach_vm_address_t v47 = *(void *)v34;
          uint64_t v48 = *((void *)v34 + 1);
          v34 += 24;
          mach_vm_address_t v49 = v48 + v47;
          if (v3 + v19 <= v49) {
            mach_vm_address_t v46 = v49;
          }
          if (v19 >= v47) {
            mach_vm_address_t v19 = v47;
          }
          mach_vm_address_t v3 = v46 - v19;
        }

        while (v34 != v9);
        uint64_t v50 = (_BYTE *)*((void *)this + 4);
        uint64_t v51 = v50 - v9;
        uint64_t v8 = (char *)this + 24;
        if (v50 != v9) {
          memmove(v10, v9, v50 - v9);
        }
        *((void *)this + 4) = &v10[v51];
      }

      if (!(*(unsigned int (**)(CSCppTaskMemory *, mach_vm_address_t, mach_vm_address_t, uint64_t *, char *))(*(void *)this + 56LL))( this,  v19,  v3,  &v57,  v56))
      {
        v54[0] = v19;
        v54[1] = v3;
        uint64_t v55 = v57;
        std::vector<TRangeValue<Pointer64,unsigned char *>>::insert((uint64_t)v8, v10, (unint64_t)v54);
        return v4 - v19 + v55;
      }
    }

    else
    {
      mach_vm_address_t v18 = a2;
      mach_vm_address_t v19 = a2;
      while (1)
      {
        mach_vm_address_t v20 = CSCppTaskMemory::region_at_address(this, v18, 1);
        if (v18 - v20 >= v21) {
          break;
        }
        mach_vm_address_t v22 = v3 + v19;
        mach_vm_address_t v18 = v21 + v20;
        if (v3 + v19 <= v21 + v20) {
          mach_vm_address_t v22 = v21 + v20;
        }
        if (v19 >= v20) {
          mach_vm_address_t v19 = v20;
        }
        mach_vm_address_t v3 = v22 - v19;
        if (v18 >= v7)
        {
          uint64_t v10 = (char *)*((void *)this + 3);
          uint64_t v9 = (char *)*((void *)this + 4);
          mach_vm_address_t v7 = v22;
          goto LABEL_22;
        }
      }
    }

    return 0LL;
  }

  return v4;
}

char *std::vector<TRangeValue<Pointer64,unsigned char *>>::insert( uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  mach_vm_address_t v4 = __src;
  mach_vm_address_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 3);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0x555555555555555LL) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      mach_vm_address_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a1 + 16, v18);
    }
    else {
      mach_vm_address_t v19 = 0LL;
    }
    mach_vm_address_t v22 = &v19[24 * v16];
    std::string __p = v19;
    uint64_t v30 = v22;
    BOOL v31 = v22;
    uint64_t v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1LL;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v24);
        mach_vm_address_t v22 = &v25[24 * (v24 >> 2)];
        std::string __p = v25;
        uint64_t v30 = v22;
        uint64_t v32 = &v25[24 * v26];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 24 * (v23 >> 1);
        uint64_t v30 = v22;
      }
    }

    __int128 v27 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)mach_vm_address_t v22 = v27;
    BOOL v31 = v22 + 24;
    mach_vm_address_t v4 = (char *)std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer( (void **)a1,  (uint64_t)&__p,  v4);
    if (v31 != v30) {
      BOOL v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    __int128 v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 24;
  }

  else
  {
    uint64_t v9 = __src + 24;
    uint64_t v10 = v6 - 24;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      __int128 v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24LL;
      v10 += 24;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(__src + 24, __src, v6 - v9);
    }
    __int128 v20 = *(_OWORD *)v3;
    *((void *)v4 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)mach_vm_address_t v4 = v20;
  }

  return v4;
}

void sub_186062A20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSCppTaskMemory::footprint(CSCppTaskMemory *this)
{
  uint64_t v2 = *((void *)this + 4) - *((void *)this + 3) + *((void *)this + 7) - *((void *)this + 6) + 120LL;
  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    for (uint64_t i = *((void *)this + 3); i != *((void *)this + 4); i += 24LL)
      v2 += *(void *)(i + 8);
    for (uint64_t j = *((void *)this + 6); j != *((void *)this + 7); j += 24LL)
      v2 += *(void *)(j + 8);
  }

  return v2;
}

uint64_t CSCppTaskMemory::to_string@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x189614738];
  *(void *)((char *)&v5[-1] + *(void *)(v4 - 24)) = *(void *)(MEMORY[0x189614738] + 24LL);
  v5[0] = MEMORY[0x189614750] + 16LL;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186E30F0C](&v7);
}

void sub_186062BB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *CSCppTaskMemory::validate(void *this)
{
  uint64_t v1 = (void *)this[3];
  uint64_t v2 = (void *)this[4];
  unint64_t v3 = v1 + 3;
  if (v1 != v2 && v3 != v2)
  {
    do
    {
      unint64_t v5 = *(v3 - 3);
      if (v5 < v3[1] + *v3 && *v3 < *(v3 - 2) + v5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v21,  (uint64_t)"CSCppTaskMemory: range values must not overlap",  46LL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
        Exception::Exception(v19, &v20);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v19);
      }

      v3 += 3;
    }

    while (v3 != v2);
  }

  char v6 = (void *)this[6];
  for (uint64_t i = (void *)this[7]; v6 != i; v6 += 3)
  {
    unint64_t v8 = v6[1] + *v6;
    uint64_t v9 = v1;
    if (v1 != v2)
    {
      uint64_t v9 = v1;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v2 - v1);
      do
      {
        unint64_t v11 = v10 >> 1;
        __int128 v12 = &v9[3 * (v10 >> 1)];
        unint64_t v14 = *v12;
        unint64_t v13 = v12 + 3;
        v10 += ~(v10 >> 1);
        if (v14 < v8) {
          uint64_t v9 = v13;
        }
        else {
          unint64_t v10 = v11;
        }
      }

      while (v10);
    }

    if (v9 == v1) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = -1LL;
    }
    int64_t v16 = &v9[3 * v15];
    this = (void *)*v16;
    if (*v6 < (unint64_t)*v16 || v8 > (unint64_t)this + v16[1])
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v21,  (uint64_t)"CSCppTaskMemory: retired memory must be contained by live memory",  64LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
      Exception::Exception(v19, &v20);
      unint64_t v17 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v17, (uint64_t)v19);
    }
  }

  return this;
}

void sub_186062DA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSCppTaskMemory::is_task(CSCppTaskMemory *this)
{
  return 1LL;
}

uint64_t CSCppTaskMemory::is_dyld_shared_cache(CSCppTaskMemory *this)
{
  return 0LL;
}

void *std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer( void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(void **)(a2 + 8);
  char v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 24);
      *(void *)(v9 - _Block_object_dispose(va, 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24LL;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + _Block_object_dispose(va, 8) = v7;
  unint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  int64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *demangle(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0LL, 0LL, a4);
}

char *CSDemangleSymbolName(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0LL, 0LL, a4);
}

char *DemanglingUtilities::demangle_with_reusable_buffer( char *this, char *a2, char **a3, unint64_t *a4)
{
  if (!this) {
    return this;
  }
  int v6 = *this;
  if (v6 != 95 && v6 != 36) {
    return 0LL;
  }
  if (this[1] == 95) {
    uint64_t v7 = (uint64_t)(this + 1);
  }
  else {
    uint64_t v7 = (uint64_t)this;
  }
  int status = -3;
  if (a3) {
    unint64_t v8 = *a3;
  }
  else {
    unint64_t v8 = 0LL;
  }
  __int128 v20 = v8;
  if (a2) {
    uint64_t v9 = *(char **)a2;
  }
  else {
    uint64_t v9 = 0LL;
  }
  unint64_t v10 = atomic_load(&call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag);
  if (v10 != -1LL)
  {
    unint64_t v24 = &v22;
    uint64_t v23 = &v24;
    std::__call_once( &call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag,  &v23,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>);
  }

  if (demanglerLibraryFunctions)
  {
    if (v9) {
      BOOL v11 = v20 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = v20;
    }
    if (v11) {
      int64_t v13 = 0LL;
    }
    else {
      int64_t v13 = v9;
    }
    unint64_t v14 = demanglerLibraryFunctions(v7, v13, v12);
    if (!v14)
    {
      int v17 = -2;
      goto LABEL_33;
    }

    uint64_t v15 = (char *)(v14 + 1);
    int64_t v16 = (char *)realloc(v9, v14 + 1);
    if (v16)
    {
      int64_t v13 = v16;
      demanglerLibraryFunctions(v7, v16, v15);
      __int128 v20 = v15;
LABEL_29:
      this = v13;
      if (!a2) {
        return this;
      }
      goto LABEL_48;
    }
  }

  int v17 = -3;
LABEL_33:
  int status = v17;
  if (*(_BYTE *)v7 != 95) {
    return 0LL;
  }
  if (*(_WORD *)v7 != 23135)
  {
    BOOL v18 = *(_WORD *)v7 == 24415 && *(_BYTE *)(v7 + 2) == 90;
    if (!v18 && *(_DWORD *)v7 != 1516199775) {
      return 0LL;
    }
  }

  if (a2) {
    mach_vm_address_t v19 = *(char **)a2;
  }
  else {
    mach_vm_address_t v19 = 0LL;
  }
  this = __cxa_demangle((const char *)v7, v19, (size_t *)&v20, &status);
  int64_t v13 = this;
  if (status) {
    this = 0LL;
  }
  if (a2 && !status)
  {
LABEL_48:
    if (v13 != *(char **)a2)
    {
      *(void *)a2 = v13;
      if (a3) {
        *a3 = v20;
      }
    }

    return v13;
  }

  return this;
}

BOOL isAbsolutePath(const char *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  return v1 == 126 || v1 == 47;
}

BOOL stringByAppendingPathComponents(char *__s1, size_t __n, const char *__source, const char *a4)
{
  if (__s1 == __source) {
    size_t v7 = strnlen(__s1, __n);
  }
  else {
    size_t v7 = strlcpy(__s1, __source, __n);
  }
  if (v7 < __n)
  {
    if (!v7 || __s1[v7 - 1] == 47) {
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    }
    if (v7 < __n - 2)
    {
      *(_WORD *)&__s1[v7++] = 47;
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    }
  }

  return 0LL;
}

const char *filename_from_path(const char *a1)
{
  int v1 = a1;
  size_t v2 = strlen(a1);
  if (v2)
  {
    while (v1[v2] != 47)
    {
      if (!--v2) {
        return v1;
      }
    }

    v1 += v2 + 1;
  }

  return v1;
}

BOOL is_root_directory(const char *a1)
{
  return strlen(a1) == 1 && strchr(a1, 47);
}

__int128 *system_dyld_shared_cache_path(void)
{
  {
    system_dyld_shared_cache_path(void)::$_0::operator()();
  }

  return &system_dyld_shared_cache_path(void)::shared_cache_dir;
}

void sub_1860632B8(_Unwind_Exception *a1)
{
}

void system_dyld_shared_cache_path(void)::$_0::operator()()
{
  unsigned __int8 v0 = (char *)dyld_shared_cache_file_path();
  if (v0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, v0);
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t p_p = &__p;
    }
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    p_std::string::size_type size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&p_p[-1].__r_.__value_.__s.__size_;
    while (size)
    {
      int v4 = p_size[size--].__size_;
      if (v4 == 47)
      {
        std::string::size_type v5 = size + 1;
        goto LABEL_12;
      }
    }

    std::string::size_type v5 = 0LL;
LABEL_12:
    std::string::basic_string( (std::string *)&system_dyld_shared_cache_path(void)::shared_cache_dir,  &__p,  0LL,  v5,  (std::allocator<char> *)&v7);
  }

  else
  {
    std::string::basic_string[abi:ne180100]<0>(&system_dyld_shared_cache_path(void)::shared_cache_dir, "");
  }

void sub_18606338C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( CSCppCrashReporterInfoSetter *this, const char *a2)
{
  __uint64_t v7 = 0LL;
  pthread_threadid_np(0LL, &v7);
  pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  uint64_t v4 = qword_18C49FAB0;
  *((void *)this + 1) = qword_18C49FAB0;
  __uint64_t v5 = v7;
  if (v4) {
    BOOL v6 = CSCppCrashReporterInfoSetter::crash_reporter_owner == v7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    qword_18C49FAB0 = (uint64_t)a2;
    *(_BYTE *)this = 1;
    CSCppCrashReporterInfoSetter::crash_reporter_owner = v5;
  }

  else
  {
    *(_BYTE *)this = 0;
  }

  pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
}

void CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter(CSCppCrashReporterInfoSetter *this)
{
  if (*(_BYTE *)this)
  {
    pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
    qword_18C49FAB0 = *((void *)this + 1);
    pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  }

uint64_t convert_symbol_flags_to_symbolic_representation(char *__dst, size_t __size, int a3)
{
  *__dst = 0;
  if ((a3 & 1) != 0)
  {
    uint64_t result = strlcat(__dst, "IsFunction, ", __size);
    if ((a3 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t result = 0LL;
  if ((a3 & 2) != 0) {
LABEL_5:
  }
    uint64_t result = strlcat(__dst, "IsDyldStub, ", __size);
LABEL_6:
  if ((a3 & 4) != 0)
  {
    uint64_t result = strlcat(__dst, "IsObjcMethod, ", __size);
    if ((a3 & 8) == 0)
    {
LABEL_8:
      if ((a3 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }

  else if ((a3 & 8) == 0)
  {
    goto LABEL_8;
  }

  uint64_t result = strlcat(__dst, "IsJavaMethod, ", __size);
  if ((a3 & 0x10) == 0)
  {
LABEL_9:
    if ((a3 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

LABEL_35:
  uint64_t result = strlcat(__dst, "IsPrivateExternal, ", __size);
  if ((a3 & 0x40) == 0)
  {
LABEL_11:
    if ((a3 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

LABEL_36:
  uint64_t result = strlcat(__dst, "IsThumb, ", __size);
  if ((a3 & 0x80) == 0)
  {
LABEL_12:
    if ((a3 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  *(_BYTE *)(a2 + 24) = v25;
  std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)&v31,  v32);
}

LABEL_37:
  uint64_t result = strlcat(__dst, "IsOmitFramePointer, ", __size);
  if ((a3 & 0x100) == 0)
  {
LABEL_13:
    if ((a3 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

LABEL_38:
  uint64_t result = strlcat(__dst, "IsKnownLength, ", __size);
  if ((a3 & 0x1000) == 0)
  {
LABEL_14:
    if ((a3 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

LABEL_40:
  uint64_t result = strlcat(__dst, "Lock, ", __size);
  if ((a3 & 0x4000) == 0)
  {
LABEL_16:
    if ((a3 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

LABEL_44:
  uint64_t result = strlcat(__dst, "NameValid, ", __size);
  if ((a3 & 0x40000) == 0)
  {
LABEL_20:
    if ((a3 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

LABEL_49:
  uint64_t result = strlcat(__dst, "MangledNameValid, ", __size);
  if ((a3 & 0x800000) == 0)
  {
LABEL_25:
    if ((a3 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }

LABEL_50:
  uint64_t result = strlcat(__dst, "MangledNameAllocated, ", __size);
  if ((a3 & 0x1000000) == 0)
  {
LABEL_26:
    if ((a3 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }

    std::__fs::filesystem::recursive_directory_iterator::__increment(&__p, 0LL);
  }

  char v22 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  cntrl = __p.__imp_.__cntrl_;
  if (__p.__imp_.__cntrl_)
  {
    uint64_t v26 = &__p.__imp_.__cntrl_->__shared_owners_;
    do
      __int128 v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }

  size_t v28 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    uint64_t v29 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      uint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

LABEL_51:
  uint64_t result = strlcat(__dst, "IsObjcMethodValid, ", __size);
  if ((a3 & 0x2000000) == 0)
  {
LABEL_27:
    if ((a3 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }

LABEL_52:
  uint64_t result = strlcat(__dst, "NList, ", __size);
  if ((a3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((a3 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }

void shared_cache_search_directories(void *a1@<X8>)
{
  *(void *)&__int128 v40 = *MEMORY[0x1895F89C0];
  system_dyld_shared_cache_path();
  std::string::basic_string[abi:ne180100]<0>(&v37, "/System/Volumes/Preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "/private/preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(v39, "/System/Cryptexes/OS");
  uint64_t v33 = 0LL;
  __int128 v34 = 0LL;
  __int128 v35 = 0LL;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  v32.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v33 = (__int128 *)operator new(0x48uLL);
  __int128 v34 = v33;
  __int128 v35 = (char *)v33 + 72;
  uint64_t v2 = 0LL;
  __int128 v34 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>( (uint64_t)&v35,  (__int128 *)&v37,  &v40,  (std::string *)v33);
  do
  {
    if (SHIBYTE(v39[v2 + 2]) < 0) {
      operator delete((void *)v39[v2]);
    }
    v2 -= 3LL;
  }

  while (v2 != -9);
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( &v37,  v33,  v34,  0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  uint64_t v30 = a1;
  if (system_dyld_shared_cache_path(void)::shared_cache_dir[23] < 0) {
    std::string::__init_copy_ctor_external( &__p,  *(const std::string::value_type **)system_dyld_shared_cache_path(void)::shared_cache_dir,  *(std::string::size_type *)&system_dyld_shared_cache_path(void)::shared_cache_dir[8]);
  }
  else {
    std::string __p = *(std::string *)system_dyld_shared_cache_path(void)::shared_cache_dir;
  }
  std::string::size_type size = v37.__r_.__value_.__l.__size_;
  std::string::size_type v3 = v37.__r_.__value_.__r.__words[0];
  if (v37.__r_.__value_.__r.__words[0] == v37.__r_.__value_.__l.__size_)
  {
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v32, "");
    unsigned __int8 v6 = __p.__r_.__value_.__s.__size_;
  }

  else
  {
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }

      else
      {
        __int128 v4 = *(_OWORD *)v3;
        v32.__r_.__value_.__l.__cap_ = *(void *)(v3 + 16);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v4;
      }

      int64_t v5 = __p.__r_.__value_.__s.__size_;
      unsigned __int8 v6 = __p.__r_.__value_.__s.__size_;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int64_t v5 = __p.__r_.__value_.__l.__size_;
      }
      int v8 = (char)v32.__r_.__value_.__s.__size_;
      uint64_t v9 = (void *)v32.__r_.__value_.__r.__words[0];
      unint64_t v10 = (v32.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v32 : (std::string *)v32.__r_.__value_.__r.__words[0];
      int64_t v11 = (v32.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v32.__r_.__value_.__s.__size_ : v32.__r_.__value_.__l.__size_;
      if (!v11) {
        break;
      }
      if (v5 >= v11)
      {
        uint64_t v12 = (char *)p_p + v5;
        int v13 = v10->__r_.__value_.__s.__data_[0];
        unint64_t v14 = p_p;
        do
        {
          int64_t v15 = v5 - v11;
          if (v15 == -1) {
            break;
          }
          int64_t v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16) {
            break;
          }
          int v17 = v16;
          if (!memcmp(v16, v10, v11))
          {
            goto LABEL_39;
          }

          unint64_t v14 = (std::string *)(v17 + 1);
          int64_t v5 = v12 - (v17 + 1);
        }

        while (v5 >= v11);
      }

      if (v8 < 0) {
        operator delete(v9);
      }
      v3 += 24LL;
      if (v3 == size) {
        goto LABEL_38;
      }
    }
  }

void sub_186063BBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a23 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t shared_cache_search_directories(void)::$_0::~$_0(uint64_t a1)
{
  std::string::size_type v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t with_primary_shared_cache_uuid_and_unslid_base_from_path(UUID *a1, uint64_t a2)
{
  __int128 v4 = UUID::null_uuid(a1);
  int v5 = open((const char *)a1, 0x1000000);
  if (v5 == -1) {
    return std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0LL);
  }
  int v6 = v5;
  if (!fstat(v5, &v10)
    && v10.st_size > 0x207uLL
    && (__uint64_t v7 = (const char *)mmap(0LL, 0x208uLL, 1, 1, v6, 0LL)) != 0LL
    && (int v8 = (uint64_t *)v7, v7 != (const char *)-1LL)
    && !strncmp(v7, "dyld_v", 6uLL))
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)(v8 + 11), v8[28]);
    close(v6);
    return munmap(v8, 0x208uLL);
  }

  else
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0LL);
    return close(v6);
  }

uint64_t std::function<void ()(UUID const*,unsigned long long)>::operator()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

uint64_t is_device_sptm_enabled(void)
{
  unint64_t v0 = atomic_load(&is_device_sptm_enabled(void)::once);
  if (v0 != -1LL)
  {
    __int128 v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once( &is_device_sptm_enabled(void)::once,  &v3,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>);
  }

  return is_device_sptm_enabled(void)::sptm_txm_enabled;
}

DemanglingUtilities::CSCppReusableDemanglingBuffer *DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer( DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  *(void *)this = 4096LL;
  *((void *)this + 1) = malloc(0x1000uLL);
  return this;
}

uint64_t DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer( DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  return (uint64_t)this + 8;
}

void DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(void **this)
{
}

char *DemanglingUtilities::create_dyld_stub_name(DemanglingUtilities *this, const char *a2)
{
  size_t v3 = strlen((const char *)this);
  __int128 v4 = (char *)malloc(v3 + 12);
  strcpy(v4, "DYLD-STUB$$");
  strcpy(v4 + 11, (const char *)this);
  return v4;
}

BOOL DemanglingUtilities::is_simple_mangled_name(DemanglingUtilities *this, const char *a2)
{
  int v2 = *(unsigned __int8 *)this;
  if (v2 != 95 && v2 != 36) {
    return 1LL;
  }
  uint64_t v3 = 0LL;
  if (*((_BYTE *)this + 1) == 95) {
    __int128 v4 = (char *)this + 1;
  }
  else {
    __int128 v4 = (const char *)this;
  }
  do
  {
    size_t v5 = strlen((&off_189DF9DD8)[v3]);
    int v6 = strncmp(v4, (&off_189DF9DD8)[v3], v5);
    BOOL result = v6 != 0;
    if (!v6) {
      break;
    }
    BOOL v8 = v3 == 12;
    v3 += 2LL;
  }

  while (!v8);
  return result;
}

_BYTE *DemanglingUtilities::simple_demangle(_BYTE *this, const char *a2)
{
  return this;
}

unsigned __int8 *std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>()
{
  BOOL result = (unsigned __int8 *)getenv("CS_DO_NOT_DEMANGLE_SWIFT");
  if (!result
    || ((v1 = *result - 48, BOOL v2 = v1 > 0x3E, v3 = (1LL << v1) & 0x4000000040000001LL, !v2) ? (v4 = v3 == 0) : (v4 = 1),
        !v4))
  {
    BOOL result = (unsigned __int8 *)dlopen("/usr/lib/swift/libswiftDemangle.dylib", 1);
    if (result
      || (BOOL result = (unsigned __int8 *)dlopen("/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib", 1)) != 0LL)
    {
      BOOL result = (unsigned __int8 *)dlsym(result, "swift_demangle_getSimplifiedDemangledName");
      demanglerLibraryFunctions = result;
    }
  }

  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>()
{
  int v4 = 0;
  size_t v3 = 4LL;
  uint64_t result = sysctlbyname("kern.page_protection_type", &v4, &v3, 0LL, 0LL);
  if ((_DWORD)result) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4 == 2;
  }
  char v2 = v1;
  is_device_sptm_enabled(void)::sptm_txm_enabled = v2;
  return result;
}

uint64_t CSSymbolicatorCreateWithTask(unsigned int a1)
{
  return CSSymbolicatorCreateWithTaskFlagsAndNotification(a1, 0LL, 0LL);
}

uint64_t CSSymbolicatorCreateWithPid(int a1)
{
  return CSSymbolicatorCreateWithPidFlagsAndNotification(a1, 0LL, 0LL);
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURL(const __CFURL *a1, uint64_t a2)
{
  return CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification(a1, 0, 0LL, a2);
}

uint64_t CSSymbolicatorCreateWithURLAndArchitecture(const __CFURL *a1, void **a2)
{
  return CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification(a1, a2, 0LL, 0LL);
}

uint64_t CSSymbolicatorForeachSharedCache()
{
  return CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification();
}

unsigned int *CSSymbolicatorCreateForTaskSharedCache(char a1, uint64_t a2)
{
  return CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(a1, a2, 0);
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return CSSymbolicatorCreateWithMachKernelFlagsAndNotification(0);
}

uint64_t CSSymbolicatorIsTaskTranslated()
{
  return 0LL;
}

uint64_t CSSymbolicatorIsKernelSymbolicator(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 24LL))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  }
  else {
    return 0LL;
  }
}

uint64_t CSSymbolicatorIsTaskValid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 32LL))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  }
  else {
    return 0LL;
  }
}

uint64_t CSSymbolicatorGetPid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
  else
  }
    return 0LL;
}

uint64_t CSSymbolicatorGetTask(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
  else
  }
    return 0LL;
}

UUID *CSSymbolicatorGetSharedCacheUUID(char a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  char v2 = (UUID *)(*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 48LL))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  if (UUID::is_null(v2)) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t CSSymbolicatorGetSharedCacheBaseAddress(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3))) {
    return (*(uint64_t (**)(void))(**(void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 64LL))(*(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  }
  else {
    return 0LL;
  }
}

uint64_t CSSymbolicatorGetTaskIsTranslated()
{
  return 0LL;
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithUUIDAtTime( uint64_t a1, uint64_t a2, CFUUIDRef uuid, uint64_t a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  CFUUIDBytes v10 = CFUUIDGetUUIDBytes(uuid);
  return CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, &v10, a4, a5);
}

uint64_t CSSymbolicatorGetSymbolOwnerWithUUIDAtTime(uint64_t a1, uint64_t a2, const __CFUUID *a3, uint64_t a4)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x3802000000LL;
  CFUUIDBytes v10 = __Block_byref_object_copy__10;
  int64_t v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithUUIDAtTime_block_invoke;
  v6[3] = &unk_189DF9E50;
  void v6[4] = &v7;
  else {
    uint64_t v4 = 0LL;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1860643DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __CSSymbolicatorGetSymbolOwnerWithUUIDAtTime_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8LL);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x3802000000LL;
  CFUUIDBytes v10 = __Block_byref_object_copy__10;
  int64_t v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime_block_invoke;
  v6[3] = &unk_189DF9E78;
  void v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, a3, a4, v6) == 1) {
    uint64_t v4 = v8[5];
  }
  else {
    uint64_t v4 = 0LL;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1860644C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t __CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime_block_invoke( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8LL);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t WriteMMapArchiveToDirectory(CSCppSymbolOwner *a1, TMMapArchive *a2, char *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  CFUUIDBytesToString((const CFUUIDBytes *)((char *)a2 + 52), __s, 0x28uLL);
  int v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v20, a3);
  std::string::size_type size = v20.__r_.__value_.__s.__size_;
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v8 = &v20;
  }
  else {
    BOOL v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (v8->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(v6, 47);
  }
  size_t v9 = strlen(__s);
  std::string::append(&v20, __s, v9);
  std::string::append(&v20, ".symbolsarchive", 0xFuLL);
  if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    CFUUIDBytes v10 = &v20;
  }
  else {
    CFUUIDBytes v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  int v11 = open((const char *)v10, 16777730, 432LL);
  int v12 = v11;
  if (v11 == -1) {
    goto LABEL_26;
  }
  if (fstat(v11, &v19) == -1) {
    goto LABEL_26;
  }
  size_t v13 = *((unsigned int *)a2 + 1);
  if (v19.st_size == v13 || a1 && v19.st_size && (*((_BYTE *)a1 + 110) & 4) == 0) {
    goto LABEL_26;
  }
  uint64_t v18 = 0LL;
  if (!*((_DWORD *)a2 + 20))
  {
    uint64_t v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( a2,  v13,  v12,  &v18);
    goto LABEL_31;
  }

  if (!TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( a2,  4uLL,  v12,  &v18)
    || (____int128 buf = *((_DWORD *)a2 + 1) - *((_DWORD *)a2 + 20),
        !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( &__buf,  4uLL,  v12,  &v18))
    || !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( (char *)a2 + 8,  0x28uLL,  v12,  &v18)
    || (int v22 = TMMapArchive::calculate_checksum((int32x4_t *)a2) - *((_DWORD *)a2 + 20),
        !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( &v22,  4uLL,  v12,  &v18))
    || !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( (char *)a2 + 52,  0x18uLL,  v12,  &v18)
    || (uint64_t v21 = 0LL,
        !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( &v21,  8uLL,  v12,  &v18))
    || (uint64_t v14 = TMMapArchive::TEXT_text(a2),
        !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( (char *)a2 + 84,  v14 - ((void)a2 + 84),  v12,  &v18)))
  {
LABEL_26:
    uint64_t v16 = 0LL;
    goto LABEL_27;
  }

  uint64_t v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( (void *)(*((unsigned int *)a2 + 20) + v14),  (size_t)a2 + v13 - *((unsigned int *)a2 + 20) - v14,  v12,  &v18);
LABEL_31:
  uint64_t v16 = v15;
LABEL_27:
  close(v12);
  return v16;
}

void sub_186064790(_Unwind_Exception *a1)
{
}

uint64_t AddMmapArchiveToDirectory(CSCppSymbolOwner *a1, char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if ((*((_BYTE *)a1 + 110) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = (const CFUUIDBytes *)((char *)a1 + 16);
  size_t v5 = (void *)CSCppSymbolOwner::data(a1);
  if ((*(unsigned int (**)(void *))(*v5 + 24LL))(v5) == 4)
  {
    int v6 = (unsigned int *)v5[11];
    if (v6)
    {
      BOOL v7 = 0;
LABEL_33:
      WriteMMapArchiveToDirectory(a1, (TMMapArchive *)v6, a2);
      goto LABEL_34;
    }

    return 0LL;
  }

  if ((*(unsigned int (**)(void *))(*v5 + 24LL))(v5) != 1)
  {
    CFUUIDBytesToString(v4, v22, 0x28uLL);
    int v11 = (void *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v5);
    if (*v11 != v11[1])
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      size_t v13 = (char *)*((void *)a1 + 4);
      int v12 = (char *)*((void *)a1 + 5);
      if (v12 - v13 == 32)
      {
        if (v13 == v12)
        {
          size_t v13 = (char *)*((void *)a1 + 5);
        }

        else
        {
          do
          {
            __int128 v21 = *(_OWORD *)v13;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>( v20,  (unint64_t *)&v21,  &v21);
            v13 += 32;
          }

          while (v13 != v12);
          size_t v13 = (char *)*((void *)a1 + 4);
          int v12 = (char *)*((void *)a1 + 5);
        }
      }

      if (v12 - v13 == 32) {
        int v17 = (CSCppAddressSet *)v19;
      }
      else {
        int v17 = 0LL;
      }
      mach_vm_address_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, v5, v17, 0);
      goto LABEL_30;
    }

void sub_186064A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void CSCppAddMmapArchivesFromSymbolicatorToDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __CSCppAddMmapArchivesFromSymbolicatorToDirectory_block_invoke;
  v3[3] = &__block_descriptor_tmp_17;
  void v3[4] = a3;
  CSCppForEachMMapArchiveInSymbolicator(a1, a2, (uint64_t)v3);
}

void CSCppForEachMMapArchiveInSymbolicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v17 = 1065353216;
  uint64_t v4 = (void *)v18[0];
  size_t v5 = (void *)v18[1];
  while (v4 != v5)
  {
    if (std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>( v16,  (void *)(*v4 + 16LL)))
    {
      goto LABEL_13;
    }

    int v6 = (std::__shared_weak_count *)v4[1];
    uint64_t v14 = *v4;
    uint64_t v15 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }

    int v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v14);
    int v10 = v9;
    int v11 = v15;
    if (!v15) {
      goto LABEL_11;
    }
    int v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (v13)
    {
LABEL_11:
      if (!v9) {
        goto LABEL_13;
      }
LABEL_12:
      std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__emplace_unique_key_args<UUID,UUID const&>( (uint64_t)v16,  (void *)(*v4 + 16LL),  (_OWORD *)(*v4 + 16LL));
      goto LABEL_13;
    }

    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v10) {
      goto LABEL_12;
    }
LABEL_13:
    v4 += 2;
  }

  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v16);
  *(void *)&v16[0] = v18;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
}

void sub_186064C08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t __CSCppAddMmapArchivesFromSymbolicatorToDirectory_block_invoke(uint64_t a1, CSCppSymbolOwner **a2)
{
  return AddMmapArchiveToDirectory(*a2, *(char **)(a1 + 32));
}

uint64_t CSCppAddMmapArchivesToDirectory(uint64_t result, uint64_t a2, char *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    size_t v5 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      __n128 result = AddMmapArchiveToDirectory((CSCppSymbolOwner *)(v6 & 0xFFFFFFFFFFFFFFFCLL), a3);
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t _findPrimarySharedCacheInFlatbufferSymbolicator(const FlatbufferSymbols::Symbolicator *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v1 < 0xBu) {
    return 0LL;
  }
  uint64_t v2 = v1[5];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  uint64_t v4 = *v3;
  if ((_DWORD)v4 == 1) {
    return (uint64_t)v3 + v3[1] + 4;
  }
  uint64_t v6 = &v3[v4 + 1];
  BOOL v7 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>( (uint64_t)&v7,  &v6,  "dyld_shared_cache",  0x11uLL,  &v8);
  if (v8 == &v3[*v3 + 1]) {
    return 0LL;
  }
  else {
    return (uint64_t)v8 + *v8;
  }
}

uint64_t _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>@<X0>( uint64_t result@<X0>, unsigned int **a2@<X1>, const char *a3@<X2>, size_t a4@<X3>, unsigned int **a5@<X8>)
{
  uint64_t v6 = *(unsigned int **)result;
  BOOL v7 = *a2;
  if (*(unsigned int **)result != *a2)
  {
    while (1)
    {
      __n128 result = FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)((char *)v6 + *v6));
      if (result)
      {
        int v10 = (unsigned __int16 *)(result - *(int *)result);
        if (*v10 >= 0x13u)
        {
          uint64_t v11 = v10[9];
          if (v11)
          {
            __n128 result = strncmp((const char *)(result + v11 + *(unsigned int *)(result + v11) + 4), a3, a4);
            if (!(_DWORD)result) {
              break;
            }
          }
        }
      }

      if (++v6 == v7)
      {
        uint64_t v6 = v7;
        break;
      }
    }
  }

  *a5 = v6;
  return result;
}

char *_findAOTSharedCacheInFlatbufferSymbolicator(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0xBu) {
    return 0LL;
  }
  uint64_t v2 = v1[5];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  size_t v5 = &v3[*v3 + 1];
  uint64_t v6 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>( (uint64_t)&v6,  &v5,  "aot_shared_cache",  0x10uLL,  &v7);
  if (v7 == &v3[*v3 + 1]) {
    return 0LL;
  }
  else {
    return (char *)v7 + *v7;
  }
}

void _assignArchivesToSymbolOwners(void *a1, TMMapArchive *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  while (v3 != v4)
  {
    uint64_t v6 = *(UUID **)v3;
    size_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }

    if (!UUID::is_null(v6 + 1)
      && std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(a1, &(*v6)[16]))
    {
      CSCppSymbolOwner::data_claim_empty((CSCppSymbolOwner *)v6);
    }

    if (v5)
    {
      int v9 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    v3 += 16LL;
  }

  for (uint64_t i = (void *)a1[2]; i; uint64_t i = (void *)*i)
    CSCppMMapArchiveCache::release_archive(i[4], a2);
}

void sub_186064F58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double CSCppSignatureEncodeSymbolicator<__CFData *>(const __CFData *a1, int a2, int a3, int a4, int a5)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 24);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(void *)&double result = 0x1FF01FF02LL;
  *(void *)MutableBytePtr = 0x1FF01FF02LL;
  *((_DWORD *)MutableBytePtr + 2) = a2;
  *((_DWORD *)MutableBytePtr + 3) = a3;
  *((_DWORD *)MutableBytePtr + 4) = a4;
  *((_DWORD *)MutableBytePtr + 5) = a5;
  return result;
}

char *CSCppSignatureEncodeSymbolOwner<__CFData *>( const __CFData *a1, _OWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, const char *a8, void *a9, uint64_t a10)
{
  int v11 = a7;
  unint64_t v17 = HIDWORD(a7);
  CFIndex Length = CFDataGetLength(a1);
  size_t v19 = strlen(a8);
  CFDataSetLength(a1, Length + (v19 & 0xFFFFFFFFFFFFFFF8LL) + ((a9[1] - *a9) & 0x1FFFFFFFE0LL) + 64);
  std::string v20 = &CFDataGetMutableBytePtr(a1)[Length];
  *(_OWORD *)std::string v20 = *a2;
  *((_DWORD *)v20 + 4) = a3;
  *((_DWORD *)v20 + 5) = a4 & 0xFFFBFFFF;
  *((void *)v20 + 3) = a5;
  *((void *)v20 + 4) = a6;
  *((_DWORD *)v20 + 10) = v11;
  *((_DWORD *)v20 + 11) = v17;
  *((_DWORD *)v20 + 12) = (a9[1] - *a9) >> 5;
  unsigned int v21 = (strlen(a8) & 0xFFFFFFF8) + 8;
  *((_DWORD *)v20 + 13) = v21;
  double result = strcpy((char *)v20 + 56, a8);
  uint64_t v23 = (void *)*a9;
  if (*a9 < a9[1])
  {
    result += v21;
    do
    {
      unint64_t v24 = (const char *)v23[3];
      if (!v24) {
        unint64_t v24 = (const char *)v23[2];
      }
      uint64_t v25 = strncpy(result, v24, 0x10uLL);
      *((void *)v25 + 2) = *v23 + a10;
      *((void *)v25 + 3) = v23[1];
      double result = v25 + 32;
      v23 += 4;
    }

    while ((unint64_t)v23 < a9[1]);
  }

  return result;
}

void *CSCppSignatureEncodeMMapArchive<__CFData *>(const __CFData *a1, _DWORD *a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + ((a2[1] + 23) & 0xFFFFFFF8));
  size_t v5 = &CFDataGetMutableBytePtr(a1)[Length];
  *(void *)size_t v5 = 0x7A1B22B1ALL;
  size_t v6 = a2[1];
  *((_DWORD *)v5 + 2) = -1582159078;
  *((_DWORD *)v5 + 3) = (v6 + 23) & 0xFFFFFFF8;
  return memcpy(v5 + 16, a2, v6);
}

UInt8 *CSCppSignatureEncodeOptionalDataHeader<__CFData *>(const __CFData *a1, uint64_t a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 8);
  double result = CFDataGetMutableBytePtr(a1);
  *(void *)&result[Length] = (a2 << 32) | 0xC0FFEE;
  return result;
}

void CSCppSignatureEncodeOptionalData<__CFData *>( const __CFData *a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  CSCppSignatureEncodeOptionalDataHeader<__CFData *>(a1, a2);
  CFIndex Length = CFDataGetLength(a1);
  __int128 v16 = *a3;
  __int128 v40 = *a5;
  __int128 v41 = v16;
  CFDataSetLength(a1, Length + 56);
  unint64_t v17 = &CFDataGetMutableBytePtr(a1)[Length];
  *(_OWORD *)unint64_t v17 = v41;
  *((void *)v17 + 2) = a4;
  *(_OWORD *)(v17 + 24) = v40;
  *((void *)v17 + 5) = a6;
  v17[48] = 0;
  *((_DWORD *)v17 + 13) = 0;
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x4002000000LL;
  __int128 v35 = __Block_byref_object_copy__11;
  unint64_t v36 = __Block_byref_object_dispose__11;
  unint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  std::string __p = 0LL;
  uint64_t v28 = 0LL;
  __int128 v29 = &v28;
  uint64_t v30 = 0x2000000000LL;
  int v31 = 0;
  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 0x40000000LL;
  void v27[2] = ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke;
  uint64_t v27[3] = &unk_189DF9EC0;
  v27[4] = &v28;
  v27[5] = &v32;
  CSSymbolicatorForeachSymbolOwnerAtTime(a7, a8, 0x8000000000000001LL, (uint64_t)v27);
  int v18 = ((*((_DWORD *)v29 + 6) - 1) | 7) + 1;
  CFDataSetLength(a1, Length + (v18 & 0xFFFFFFF8) + 60);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(_DWORD *)&MutableBytePtr[Length + 56] = v18;
  std::string v20 = &MutableBytePtr[Length + 60];
  unsigned int v21 = (const char **)v33[5];
  int v22 = (const char **)v33[6];
  while (v21 != v22)
  {
    uint64_t v23 = *v21++;
    size_t v24 = strlen(v23) + 1;
    memcpy(v20, v23, v24);
    v20 += v24;
  }

  unsigned int v25 = v18 - *((_DWORD *)v29 + 6);
  if (v25)
  {
    if (v25 <= 1) {
      size_t v26 = 1LL;
    }
    else {
      size_t v26 = v25;
    }
    bzero(v20, v26);
  }

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  if (__p)
  {
    unint64_t v38 = __p;
    operator delete(__p);
  }

void sub_186065450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

{
  void *v2;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t Version = CSSymbolOwnerGetVersion(a2, a3);
  if (Version) {
    size_t v5 = (const char *)Version;
  }
  else {
    size_t v5 = "";
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += strlen(v5) + 1;
  size_t v6 = *(void **)(*(void *)(a1 + 40) + 8LL);
  BOOL v7 = (const char **)v6[6];
  unint64_t v8 = v6[7];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = v6[5];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    uint64_t v12 = v8 - v10;
    uint64_t v13 = v12 >> 2;
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 7), v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    __int128 v16 = (const char **)&v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *__int128 v16 = v5;
    int v9 = v16 + 1;
    size_t v19 = (char *)v6[5];
    int v18 = (char *)v6[6];
    if (v18 != v19)
    {
      do
      {
        std::string v20 = (const char *)*((void *)v18 - 1);
        v18 -= 8;
        *--__int128 v16 = v20;
      }

      while (v18 != v19);
      int v18 = (char *)v6[5];
    }

    void v6[5] = v16;
    v6[6] = v9;
    v6[7] = v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *BOOL v7 = v5;
    int v9 = v7 + 1;
  }

  v6[6] = v9;
}

uint64_t CSCppSignatureDecodeSymbolicator<__CFData const*>( const __CFData *a1, unint64_t *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  unint64_t v16 = *a2 + 24;
  if (v16 > Length) {
    return 0LL;
  }
  unint64_t v17 = &BytePtr[*a2];
  unsigned int v23 = *((_DWORD *)v17 + 1);
  int v22 = *((_DWORD *)v17 + 2);
  int v21 = *((_DWORD *)v17 + 3);
  int v20 = *((_DWORD *)v17 + 4);
  int v19 = *((_DWORD *)v17 + 5);
  if (*(_DWORD *)v17 != -16646398) {
    return 0LL;
  }
  *a3 = v23;
  if (v23 > 1) {
    return 0LL;
  }
  *a4 = v22;
  *a5 = v21;
  *a6 = v20;
  *a7 = v19;
  *a2 = v16;
  return 1LL;
}

uint64_t CSCppDetermineSignatureType<__CFData const*>(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  else {
    return *(_DWORD *)BytePtr == -16646398;
  }
}

uint64_t CSCppSignatureDecodeSymbolOwner<__CFData const*>( const __CFData *a1, unint64_t *a2, const UInt8 **a3, _DWORD *a4, _DWORD *a5, void *a6, void *a7, unint64_t *a8, void *a9, void **a10)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  unint64_t v20 = *a2;
  if (*a2 + 64 > Length) {
    return 0LL;
  }
  int v21 = &BytePtr[v20];
  unint64_t v22 = *(unsigned int *)&BytePtr[v20 + 48];
  unint64_t v23 = v20 + *((unsigned int *)v21 + 13) + 32 * v22 + 56;
  if (v23 > Length) {
    return 0LL;
  }
  *a3 = v21;
  *a4 = *((_DWORD *)v21 + 4);
  *a5 = *((_DWORD *)v21 + 5);
  *a6 = *((void *)v21 + 3);
  *a7 = *((void *)v21 + 4);
  *a8 = *((unsigned int *)v21 + 10) | ((unint64_t)*((unsigned int *)v21 + 11) << 32);
  unsigned int v25 = v21 + 56;
  *a9 = v21 + 56;
  if ((*a7 & 0x8000000000000000LL) != 0) {
    *a7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *a5 &= ~0x80000000;
  uint64_t v26 = *((unsigned int *)v21 + 13);
  std::vector<CSCppSegmentRange>::reserve(a10, v22);
  if ((_DWORD)v22)
  {
    std::string::size_type v27 = (CSCppNamedRange *)&v25[v26];
    do
    {
      uint64_t v31 = *((void *)v27 + 2);
      uint64_t v28 = *((void *)v27 + 3);
      __int128 v29 = v27;
      uint64_t v30 = v28;
      std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>(a10, &v31, &v30, &v29);
      std::string::size_type v27 = (CSCppNamedRange *)((char *)v27 + 32);
      LODWORD(v22) = v22 - 1;
    }

    while ((_DWORD)v22);
  }

  *a2 = v23;
  return 1LL;
}

void *std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>( void **a1, void *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  int v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    uint64_t v13 = (uint64_t)(v11 - (void)*a1) >> 5;
    uint64_t v14 = v9 - (_BYTE *)*a1;
    uint64_t v15 = v14 >> 4;
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v8, v16);
      uint64_t v19 = v18;
    }

    else
    {
      unint64_t v17 = 0LL;
      uint64_t v19 = 0LL;
    }

    unint64_t v20 = &v17[32 * v13];
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>( v20,  a2,  a3,  a4);
    uint64_t v12 = v20 + 32;
    unint64_t v22 = (char *)*a1;
    int v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        __int128 v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v21 -= 32;
      }

      while (v21 != v22);
      int v21 = (char *)*a1;
    }

    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v17[32 * v19];
    if (v21) {
      operator delete(v21);
    }
  }

  else
  {
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>( *(void **)(v8 - 8),  a2,  a3,  a4);
    uint64_t v12 = (void *)(v11 + 32);
    a1[1] = (void *)(v11 + 32);
  }

  a1[1] = v12;
  return v12 - 4;
}

void sub_1860659B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *CSCppSignatureDecodeMMapArchive<__CFData const*>(const __CFData *a1, void *a2, BOOL *a3)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (*a2 + 16LL > Length) {
    return 0LL;
  }
  __n128 result = MMapArchiveEncoding::mmap_archive((MMapArchiveEncoding *)&BytePtr[*a2], Length - *a2, a3);
  if (result) {
    *a2 += (result->i32[1] + 23) & 0xFFFFFFF8;
  }
  return result;
}

int32x4_t *MMapArchiveEncoding::mmap_archive(MMapArchiveEncoding *this, unint64_t a2, BOOL *a3)
{
  if (*((unsigned int *)this + 3) <= a2 && *(_DWORD *)this == -1582159078)
  {
    unsigned int v5 = *((unsigned __int16 *)this + 2);
    if (v5 <= 6)
    {
      __n128 result = MMapArchiveEncoding::_migrate_legacy_archive(this);
      if (!result) {
        return result;
      }
      *a3 = 1;
LABEL_8:
      if (*((_DWORD *)this + 2) == -1582159078) {
        return result;
      }
      return 0LL;
    }

    *a3 = 0;
    if (v5 == 7)
    {
      __n128 result = (int32x4_t *)((char *)this + 16);
      goto LABEL_8;
    }
  }

  return 0LL;
}

uint64_t ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke( uint64_t a1, CSCppSymbolOwner **a2)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>( *a2,  *(const __CFData **)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>( CSCppSymbolOwner *a1, const __CFData *a2, int a3)
{
  size_t v6 = (unsigned int *)CSCppSymbolOwner::data(a1);
  char v7 = atomic_load(v6 + 3);
  if (v7 < 0) {
    return 0LL;
  }
  uint64_t v8 = v6;
  if ((*(unsigned int (**)(unsigned int *))(*(void *)v6 + 24LL))(v6) != 4)
  {
    if ((*(unsigned int (**)(unsigned int *))(*(void *)v8 + 24LL))(v8) == 1)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      unint64_t v11 = (char *)*((void *)a1 + 4);
      uint64_t v10 = (char *)*((void *)a1 + 5);
      if (v10 - v11 == 32)
      {
        if (v11 == v10)
        {
          unint64_t v11 = (char *)*((void *)a1 + 5);
        }

        else
        {
          do
          {
            __int128 v21 = *(_OWORD *)v11;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>( v20,  (unint64_t *)&v21,  &v21);
            v11 += 32;
          }

          while (v11 != v10);
          unint64_t v11 = (char *)*((void *)a1 + 4);
          uint64_t v10 = (char *)*((void *)a1 + 5);
        }
      }

      if (v10 - v11 == 32) {
        uint64_t v15 = (CSCppAddressSet *)v19;
      }
      else {
        uint64_t v15 = 0LL;
      }
      mach_vm_address_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>( (uint64_t)a1,  (uint64_t)v8,  v15,  a3);
LABEL_26:
      uint64_t v18 = (_DWORD *)mmap_archive_arch;
      CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)v19);
      if (v18)
      {
        if (v18[4]) {
          CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v18);
        }
        mach_vm_deallocate(*MEMORY[0x1895FBBE0], (mach_vm_address_t)v18, v18[1]);
      }

      return 1LL;
    }

    if ((*(unsigned int (**)(unsigned int *))(*(void *)v8 + 24LL))(v8) == 2)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      uint64_t v13 = (char *)*((void *)a1 + 4);
      uint64_t v12 = (char *)*((void *)a1 + 5);
      if (v12 - v13 == 32)
      {
        if (v13 == v12)
        {
          uint64_t v13 = (char *)*((void *)a1 + 5);
        }

        else
        {
          do
          {
            __int128 v21 = *(_OWORD *)v13;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>( v20,  (unint64_t *)&v21,  &v21);
            v13 += 32;
          }

          while (v13 != v12);
          uint64_t v13 = (char *)*((void *)a1 + 4);
          uint64_t v12 = (char *)*((void *)a1 + 5);
        }
      }

      if (v12 - v13 == 32) {
        unint64_t v17 = (CSCppAddressSet *)v19;
      }
      else {
        unint64_t v17 = 0LL;
      }
      mach_vm_address_t mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, v8, v17, a3);
      goto LABEL_26;
    }

    return 0LL;
  }

  int v9 = (_DWORD *)*((void *)v8 + 11);
  if (v9[4]) {
    CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v9);
  }
  return 1LL;
}

void sub_186065CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t CSCppAddMMapArchiveToSignatureFromSymbolOwner<__CFData *>( uint64_t a1, uint64_t a2, const __CFData *a3, int a4)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>( (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL),  a3,  a4);
}

uint64_t CSCppAddSparseMMapArchiveToSignature<__CFData *>(const __CFData *a1, CSCppAddressSet *a2)
{
  uint64_t v4 = (unsigned int *)CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, -2147475454, 0x400u, 0LL);
  uint64_t v6 = v5;
  char SymbolOwner = CSSymbolicatorGetSymbolOwner((char)v4, v5);
  uint64_t v9 = v8;
  if (CSIsNull(SymbolOwner, v8)) {
    goto LABEL_9;
  }
  uint64_t v10 = (CSCppSymbolOwner *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v11 = (unsigned int *)CSCppSymbolOwner::data(v10);
  char v12 = atomic_load(v11 + 3);
  if (v12 < 0) {
    goto LABEL_9;
  }
  uint64_t v13 = v11;
  int v14 = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 24LL))(v11);
  if (v14 == 2)
  {
    mach_vm_address_t mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>( (uint64_t)v10,  v13,  a2,  0);
  }

  else
  {
    if (v14 != 1)
    {
LABEL_9:
      uint64_t v17 = 0LL;
      goto LABEL_10;
    }

    mach_vm_address_t mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>( (uint64_t)v10,  (uint64_t)v13,  a2,  0);
  }

  mach_vm_address_t v16 = (mach_vm_address_t)mmap_archive_arch;
  if (!mmap_archive_arch) {
    goto LABEL_9;
  }
  CSCppSignatureEncodeMMapArchive<__CFData *>(a1, mmap_archive_arch);
  mach_vm_deallocate(*MEMORY[0x1895FBBE0], v16, *(unsigned int *)(v16 + 4));
  uint64_t v17 = 1LL;
LABEL_10:
  CSRelease(v4, v6);
  return v17;
}

void CSCppSignatureDecodeOptionalData<__CFData const*>( const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (!a2 || !BytePtr) {
    return;
  }
  unint64_t v8 = *a2;
  if (Length < *a2 || Length - *a2 < 8) {
    return;
  }
  unsigned int v10 = *(_DWORD *)&BytePtr[v8 + 4];
  if (*(_DWORD *)&BytePtr[v8] != 12648430 || v10 < 2) {
    return;
  }
  *a2 = v8 + 8;
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, a2, a3);
    }

    else if (v10 == 2)
    {
      char v12 = CFDataGetBytePtr(a1);
      if (v12)
      {
        uint64_t v13 = v12;
        unint64_t v14 = *a2;
        unint64_t v15 = CFDataGetLength(a1);
        if (v15 > *a2 && v15 - *a2 >= 0x18)
        {
          __int128 v39 = *(_OWORD *)&v13[v14];
          uint64_t v16 = *(void *)&v13[v14 + 16];
          __int128 v38 = v39;
          (*(void (**)(void *, __int128 *))(**((void **)a3 + 7) + 80LL))(*((void **)a3 + 7), &v38);
          (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 88LL))(*((void **)a3 + 7), v16);
          *a2 += 24LL;
        }
      }
    }

    return;
  }

  uint64_t v17 = CFDataGetBytePtr(a1);
  if (!v17) {
    return;
  }
  uint64_t v18 = v17;
  unint64_t v19 = *a2;
  unint64_t v20 = CFDataGetLength(a1);
  if (v20 <= *a2 || v20 - *a2 < 0x38) {
    return;
  }
  unint64_t v37 = *a2;
  CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, &v37, a3);
  CSCppSymbolicator::get_symbol_owners(a3, &v39);
  __int128 v21 = &v18[v19];
  uint64_t v22 = (uint64_t)&v18[v19 + 56];
  size_t v24 = (size_t *)*((void *)&v39 + 1);
  __int128 v23 = (size_t *)v39;
  if ((void)v39 == *((void *)&v39 + 1)) {
    goto LABEL_41;
  }
  unsigned int v25 = (_DWORD *)(v22 + 96LL * *((unsigned int *)v21 + 13));
  int v27 = *v25;
  uint64_t v26 = (const char *)(v25 + 1);
  uint64_t v28 = &v26[v27];
  while (1)
  {
    size_t v29 = *v23;
    uint64_t v30 = (std::__shared_weak_count *)v23[1];
    *(void *)&__int128 v38 = *v23;
    *((void *)&v38 + 1) = v30;
    if (!v30)
    {
      if (v26 == v28) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }

    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    if (v26 == v28) {
      break;
    }
LABEL_31:
    CSCppSymbolOwner::set_version(v29, v26);
    size_t v33 = strlen(v26);
    if (v30)
    {
      uint64_t v34 = (unint64_t *)&v30->__shared_owners_;
      do
        unint64_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    v26 += v33 + 1;
    v23 += 2;
    if (v23 == v24) {
      goto LABEL_41;
    }
  }

  do
    unint64_t v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }

void sub_186066130( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

unint64_t CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>( const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unint64_t result = (unint64_t)CFDataGetBytePtr(a1);
  if (a2)
  {
    unint64_t v7 = result;
    if (result)
    {
      unint64_t v8 = *a2;
      unint64_t result = CFDataGetLength(a1);
      if (result > *a2 && result - *a2 >= 0x38)
      {
        unint64_t v9 = v7 + v8;
        __int128 v10 = *(_OWORD *)(v7 + v8);
        uint64_t v11 = *(void *)(v7 + v8 + 16);
        __int128 v25 = *(_OWORD *)(v9 + 24);
        __int128 v26 = v10;
        uint64_t v12 = *(void *)(v9 + 40);
        int v13 = *(unsigned __int8 *)(v9 + 48);
        int v14 = *(_DWORD *)(v9 + 52);
        __int128 v23 = v25;
        __int128 v24 = v10;
        BOOL v15 = v13 != 0;
        (*(void (**)(void *, __int128 *))(**((void **)a3 + 7) + 80LL))(*((void **)a3 + 7), &v24);
        (*(void (**)(void *, __int128 *))(**((void **)a3 + 7) + 96LL))(*((void **)a3 + 7), &v23);
        (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 88LL))(*((void **)a3 + 7), v11);
        (*(void (**)(void *, uint64_t))(**((void **)a3 + 7) + 104LL))(*((void **)a3 + 7), v12);
        *(_BYTE *)(*((void *)a3 + 7) + 16LL) = v15;
        unint64_t result = (unint64_t)CSCppSymbolicator::initialize_aot_symbolication_session(a3);
        if (v14)
        {
          uint64_t v16 = (_OWORD *)(v9 + 56);
          int v17 = v14;
          do
          {
            __int128 v18 = v16[1];
            v22[0] = *v16;
            v22[1] = v18;
            __int128 v19 = v16[2];
            __int128 v20 = v16[3];
            __int128 v21 = v16[5];
            void v22[4] = v16[4];
            v22[5] = v21;
            v22[2] = v19;
            v22[3] = v20;
            v16 += 6;
            unint64_t result = (unint64_t)CSCppSymbolicator::add_aot_image_info((uint64_t)a3, (uint64_t)v22);
            --v17;
          }

          while (v17);
        }

        *a2 += (96 * v14 + 56);
      }
    }
  }

  return result;
}

uint64_t _createCSSymbolicatorFromFlatbuffer<__CFData const*>( FlatbufferSymbols::SymbolOwner *a1, const __CFData *a2, unsigned int a3)
{
  uint64_t v5 = a1;
  v181[1] = *MEMORY[0x1895F89C0];
  uint64_t v173 = 0LL;
  uint64_t v174 = 0LL;
  uint64_t v6 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(a1);
  unint64_t v7 = v6;
  if (v6 && (unint64_t v8 = (unsigned __int16 *)((char *)v6 - *v6), v9 = *v8, v9 >= 7))
  {
    if (v8[3]) {
      uint64_t v10 = *(void *)((char *)v6 + v8[3]);
    }
    else {
      LODWORD(std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10) = -1;
    }
    int v162 = v10;
    if (v9 >= 0xB)
    {
      uint64_t v144 = v8[5];
      if (v144) {
        CSUUIDStringToCFUUIDBytes((char *)v6 + v144 + *(unsigned int *)((char *)v6 + v144) + 4, &v173);
      }
    }
  }

  else
  {
    int v162 = -1;
  }

  uint64_t v11 = FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(v5);
  uint64_t v12 = (int *)v11;
  unsigned int v159 = a3;
  uint64_t v160 = v7;
  memset(v172, 0, sizeof(v172));
  int v13 = (unsigned __int16 *)((char *)v5 - *(int *)v5);
  if (*v13 >= 9u)
  {
    uint64_t v14 = v13[4];
    if (v14)
    {
      BOOL v15 = (unsigned int *)((char *)v5 + v14);
      uint64_t v16 = *v15;
      __int128 v18 = (unsigned int *)((char *)v15 + v16 + 4);
      uint64_t v17 = *(unsigned int *)((char *)v15 + v16);
      if ((_DWORD)v17)
      {
        uint64_t v161 = &v18[v17];
        unint64_t v158 = v5;
        uint64_t v156 = a2;
        uint64_t v157 = (int *)v11;
        while (1)
        {
          __int128 v19 = (FlatbufferSymbols::SymbolOwner *)((char *)v18 + *v18);
          __p[0] = 0LL;
          __p[1] = 0LL;
          *(void *)&__int128 v176 = 0LL;
          unint64_t ArchitectureForName = 0LL;
          unsigned int v171 = 0LL;
          __n128 v180 = 0uLL;
          uint64_t v168 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v169 = 0LL;
          uint64_t v20 = *(int *)v19;
          uint64_t v21 = -v20;
          uint64_t v22 = (unsigned __int16 *)((char *)v19 - v20);
          if (*v22 >= 9u)
          {
            uint64_t v23 = v22[4];
            if (v23)
            {
              __int128 v24 = (unsigned int *)((char *)v19 + v23);
              uint64_t v25 = *v24;
              uint64_t v27 = (unsigned int *)((char *)v24 + v25 + 4);
              uint64_t v26 = *(unsigned int *)((char *)v24 + v25);
              if ((_DWORD)v26)
              {
                uint64_t v28 = 0LL;
                size_t v29 = &v27[v26];
                do
                {
                  uint64_t v30 = (char *)v27 + *v27;
                  uint64_t v31 = (unsigned __int16 *)&v30[-*(int *)v30];
                  unsigned int v32 = *v31;
                  if (v32 >= 5)
                  {
                    uint64_t v33 = v31[2];
                    if (v31[2])
                    {
                      uint64_t v34 = &v30[v33];
                      if (!strstr(&v30[v33 + 4 + *(unsigned int *)&v30[v33]], "__LINKINFO"))
                      {
                        if (v32 < 7)
                        {
                          uint64_t v36 = 0LL;
                          uint64_t v35 = -1LL;
                        }

                        else
                        {
                          if (v31[3]) {
                            uint64_t v35 = *(void *)&v30[v31[3]];
                          }
                          else {
                            uint64_t v35 = -1LL;
                          }
                          if (v32 >= 9 && v31[4]) {
                            uint64_t v36 = *(void *)&v30[v31[4]];
                          }
                          else {
                            uint64_t v36 = 0LL;
                          }
                        }

                        unint64_t v37 = (CSCppNamedRange *)&v34[*(unsigned int *)v34 + 4];
                        if ((unint64_t)v28 >= (unint64_t)v176)
                        {
                          uint64_t v38 = ((char *)v28 - (char *)__p[0]) >> 5;
                          unint64_t v39 = (uint64_t)(v176 - (unint64_t)__p[0]) >> 4;
                          if (v39 <= v38 + 1) {
                            unint64_t v39 = v38 + 1;
                          }
                          else {
                            unint64_t v40 = v39;
                          }
                          if (v40)
                          {
                            __int128 v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>( (uint64_t)&v176,  v40);
                            uint64_t v43 = v42;
                          }

                          else
                          {
                            __int128 v41 = 0LL;
                            uint64_t v43 = 0LL;
                          }

                          CSCppSegmentRange::CSCppSegmentRange((CSCppSegmentRange *)&v41[32 * v38], v35, v36, v37, 0);
                          mach_vm_address_t v46 = (char *)__p[0];
                          __int128 v45 = (char *)__p[1];
                          mach_vm_address_t v47 = v44;
                          if (__p[1] != __p[0])
                          {
                            do
                            {
                              __int128 v48 = *((_OWORD *)v45 - 1);
                              *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
                              *((_OWORD *)v47 - 1) = v48;
                              v47 -= 32;
                              v45 -= 32;
                            }

                            while (v45 != v46);
                            __int128 v45 = v46;
                          }

                          mach_vm_address_t v49 = &v41[32 * v43];
                          uint64_t v28 = (CSCppSegmentRange *)(v44 + 32);
                          __p[0] = v47;
                          __p[1] = v44 + 32;
                          *(void *)&__int128 v176 = v49;
                          if (v45) {
                            operator delete(v45);
                          }
                        }

                        else
                        {
                          CSCppSegmentRange::CSCppSegmentRange(v28, v35, v36, v37, 0);
                          uint64_t v28 = (CSCppSegmentRange *)((char *)v28 + 32);
                        }

                        __p[1] = v28;
                      }
                    }
                  }

                  ++v27;
                }

                while (v27 != v29);
                uint64_t v21 = -(uint64_t)*(int *)v19;
                uint64_t v12 = v157;
                uint64_t v5 = v158;
                a2 = v156;
              }
            }
          }

          uint64_t v50 = (unsigned __int16 *)((char *)v19 + v21);
          unsigned int v51 = *v50;
          if (v51 >= 0x13)
          {
            if (v50[9])
            {
              unint64_t v52 = (int *)((char *)v19 + v50[9] + *(unsigned int *)((char *)v19 + v50[9]));
              int v53 = (unsigned __int16 *)((char *)v52 - *v52);
              if (*v53 >= 5u && (uint64_t v54 = v53[2]) != 0) {
                uint64_t v55 = *(void *)((char *)v52 + v54);
              }
              else {
                uint64_t v55 = 0LL;
              }
              uint64_t v169 = v55;
            }

            if (v51 >= 0x15)
            {
              uint64_t v56 = v50[10];
              if (v56)
              {
                uint64_t v57 = (int *)((char *)v19 + v56 + *(unsigned int *)((char *)v19 + v56));
                unint64_t v58 = (unsigned __int16 *)((char *)v57 - *v57);
                if (*v58 >= 5u && (uint64_t v59 = v58[2]) != 0) {
                  uint64_t v60 = *(void *)((char *)v57 + v59);
                }
                else {
                  uint64_t v60 = 0LL;
                }
                uint64_t v168 = v60;
              }
            }
          }

          uint64_t v61 = (const char *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(v19);
          uint64_t v62 = v61;
          if (!v61) {
            goto LABEL_124;
          }
          uint64_t v63 = (unsigned __int16 *)&v61[-*(int *)v61];
          unsigned int v64 = *v63;
          uint64_t v65 = "<unknown>";
          if (v64 >= 7) {
            break;
          }
LABEL_75:
          unsigned int v171 = v65;
          if (v64 >= 0xD) {
            goto LABEL_80;
          }
LABEL_93:
          uint64_t v81 = &v62[-*(int *)v62];
          if (*(unsigned __int16 *)v81 < 5u)
          {
            uint64_t v82 = 0LL;
          }

          else
          {
            uint64_t v82 = *((unsigned __int16 *)v81 + 2);
            if (v82) {
              v82 += (uint64_t)&v62[*(unsigned int *)&v62[v82]];
            }
          }

          CSUUIDStringToCFUUIDBytes(v82 + 4, &v180);
          unsigned int v167 = 1;
          uint64_t v83 = (unsigned __int16 *)((char *)v19 - *(int *)v19);
          if (*v83 >= 0xFu)
          {
            uint64_t v84 = v83[7];
            if (v84) {
              LOBYTE(v84) = *((_BYTE *)v19 + v84) != 0;
            }
            if ((v84 & 1) != 0) {
              goto LABEL_103;
            }
          }

          if (v12)
          {
LABEL_103:
            unsigned int v85 = 513;
            unsigned int v167 = 513;
            if (v12 && !ArchitectureForName)
            {
              unint64_t ArchitectureForName = 16777228LL;
              unsigned int v85 = 513;
            }
          }

          else
          {
            unsigned int v85 = 1;
          }

          BOOL v86 = v173 == v180.n128_u64[0] && v174 == v180.n128_u64[1];
          int v87 = !v86;
          if (v86 || !v162)
          {
            if (!v87) {
              v85 |= 0x10u;
            }
            if (!v162) {
              v85 |= 0x1000u;
            }
            unsigned int v167 = v85;
          }

          __int128 v165 = &v180;
          unsigned int v164 = 0;
          std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>( &v165,  &v164,  &v169,  &v168,  &v167,  &ArchitectureForName,  &v171,  v166);
          uint64_t v88 = v166[0];
          __int128 v89 = *((_OWORD *)v166[0] + 2);
          *((_OWORD *)v166[0] + 2) = *(_OWORD *)__p;
          *(_OWORD *)std::string __p = v89;
          uint64_t v90 = *((void *)v88 + 6);
          *((void *)v88 + 6) = v176;
          *(void *)&__int128 v176 = v90;
          uint64_t v91 = (FlatbufferSymbolOwnerData *)operator new(0x1A8uLL);
          FlatbufferSymbolOwnerData::FlatbufferSymbolOwnerData(v91, v88, v19, a2);
          CSCppSymbolOwner::set_data(v166[0], v91);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v172, (__int128 *)v166);
          char v92 = (std::__shared_weak_count *)v166[1];
          if (v166[1])
          {
            uint64_t v93 = (unint64_t *)((char *)v166[1] + 8);
            do
              unint64_t v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }

LABEL_129:
  uint64_t v95 = (CSCppFakeTask *)operator new(0x60uLL);
  CSCppFakeTask::CSCppFakeTask(v95, v162, v162 == 0);
  uint64_t v163 = v95;
  uint64_t v96 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v172, (uint64_t *)&v163, v159, 0LL);
  uint64_t v98 = v97;
  uint64_t v99 = (uint64_t)v163;
  uint64_t v163 = 0LL;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8LL))(v99);
  }
  unint64_t v100 = v98 & 0xFFFFFFFFFFFFFFFCLL;
  if (v12)
  {
    uint64_t v101 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v101 >= 0x15u && (uint64_t v102 = v101[10]) != 0) {
      uint64_t v103 = *(void *)((char *)v12 + v102);
    }
    else {
      uint64_t v103 = -1LL;
    }
    uint64_t v104 = 0LL;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v105 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v105 >= 5u)
    {
      uint64_t v104 = v105[2];
      if (v105[2]) {
        v104 += (uint64_t)v12 + *(unsigned int *)((char *)v12 + v104);
      }
    }

    CSUUIDStringToCFUUIDBytes(v104 + 4, __p);
    (*(void (**)(void, uint64_t))(**(void **)(v100 + 56) + 88LL))(*(void *)(v100 + 56), v103);
    (*(void (**)(void, void **))(**(void **)(v100 + 56) + 80LL))(*(void *)(v100 + 56), __p);
    goto LABEL_140;
  }

  if (!v100) {
    goto LABEL_190;
  }
  unint64_t v137 = *(_BYTE **)(v100 + 56);
  uint64_t PrimarySharedCacheInFlatbufferSymbolicator = _findPrimarySharedCacheInFlatbufferSymbolicator(v5);
  uint64_t AOTSharedCacheInFlatbufferSymbolicator = (uint64_t)_findAOTSharedCacheInFlatbufferSymbolicator((int *)v5);
  __p[0] = 0LL;
  __p[1] = 0LL;
  __n128 v180 = 0uLL;
  if (!PrimarySharedCacheInFlatbufferSymbolicator)
  {
    uint64_t v142 = 0LL;
    goto LABEL_206;
  }

  uint64_t v140 = (unsigned __int16 *)(PrimarySharedCacheInFlatbufferSymbolicator
                            - *(int *)PrimarySharedCacheInFlatbufferSymbolicator);
  if (*v140 >= 9u && (uint64_t v141 = v140[4]) != 0) {
    uint64_t v142 = *(void *)(PrimarySharedCacheInFlatbufferSymbolicator + v141);
  }
  else {
    uint64_t v142 = -1LL;
  }
  __int128 v145 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)PrimarySharedCacheInFlatbufferSymbolicator);
  uint64_t v146 = (unsigned __int16 *)((char *)v145 - *v145);
  unsigned int v147 = *v146;
  if (v147 >= 0x15)
  {
    if (v146[10]) {
      uint64_t PrimarySharedCacheInFlatbufferSymbolicator = *(void *)((char *)v145 + v146[10]);
    }
    else {
      uint64_t PrimarySharedCacheInFlatbufferSymbolicator = -1LL;
    }
LABEL_203:
    uint64_t v148 = v146[2];
    if (v148) {
      v148 += (uint64_t)v145 + *(unsigned int *)((char *)v145 + v148);
    }
    goto LABEL_205;
  }

  uint64_t PrimarySharedCacheInFlatbufferSymbolicator = -1LL;
  if (v147 >= 5) {
    goto LABEL_203;
  }
  uint64_t v148 = 0LL;
LABEL_205:
  CSUUIDStringToCFUUIDBytes(v148 + 4, __p);
LABEL_206:
  if (!AOTSharedCacheInFlatbufferSymbolicator)
  {
    uint64_t v151 = 0LL;
    goto LABEL_221;
  }

  v149 = (unsigned __int16 *)(AOTSharedCacheInFlatbufferSymbolicator - *(int *)AOTSharedCacheInFlatbufferSymbolicator);
  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
    uint64_t v151 = *(void *)(AOTSharedCacheInFlatbufferSymbolicator + v150);
  }
  else {
    uint64_t v151 = -1LL;
  }
  uint64_t v152 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)AOTSharedCacheInFlatbufferSymbolicator);
  unint64_t v153 = (unsigned __int16 *)((char *)v152 - *v152);
  unsigned int v154 = *v153;
  if (v154 >= 0x15)
  {
    if (v153[10]) {
      uint64_t AOTSharedCacheInFlatbufferSymbolicator = *(void *)((char *)v152 + v153[10]);
    }
    else {
      uint64_t AOTSharedCacheInFlatbufferSymbolicator = -1LL;
    }
LABEL_218:
    uint64_t v155 = v153[2];
    if (v155) {
      v155 += (uint64_t)v152 + *(unsigned int *)((char *)v152 + v155);
    }
    goto LABEL_220;
  }

  uint64_t AOTSharedCacheInFlatbufferSymbolicator = -1LL;
  if (v154 >= 5) {
    goto LABEL_218;
  }
  uint64_t v155 = 0LL;
LABEL_220:
  CSUUIDStringToCFUUIDBytes(v155 + 4, &v180);
LABEL_221:
  (*(void (**)(_BYTE *, void **))(*(void *)v137 + 80LL))(v137, __p);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)v137 + 88LL))( v137,  PrimarySharedCacheInFlatbufferSymbolicator + v142);
  if (AOTSharedCacheInFlatbufferSymbolicator)
  {
    v137[16] = 1;
    (*(void (**)(_BYTE *, __n128 *))(*(void *)v137 + 96LL))(v137, &v180);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)v137 + 104LL))( v137,  AOTSharedCacheInFlatbufferSymbolicator + v151);
    CSCppSymbolicator::initialize_aot_symbolication_session((CSCppSymbolicator *)(v98 & 0xFFFFFFFFFFFFFFFCLL));
  }

LABEL_140:
  if (v160)
  {
    if (v100)
    {
      __n128 v180 = 0uLL;
      v181[0] = 0LL;
      __int16 v106 = (unsigned __int16 *)((char *)v160 - *v160);
      if (*v106 >= 0xDu)
      {
        uint64_t v107 = v106[6];
        if (v107)
        {
          uint64_t v108 = (unsigned int *)((char *)v160 + v107);
          uint64_t v109 = *v108;
          uint64_t v111 = (unsigned int *)((char *)v108 + v109 + 4);
          uint64_t v110 = *(unsigned int *)((char *)v108 + v109);
          if ((_DWORD)v110)
          {
            unint64_t v112 = 0LL;
            unint64_t v113 = &v111[v110];
            while (1)
            {
              __int128 v114 = (int *)((char *)v111 + *v111);
              __int128 v115 = (unsigned __int16 *)((char *)v114 - *v114);
              unsigned int v116 = *v115;
              if (v116 < 0xB)
              {
                __int128 v117 = 0LL;
                uint64_t v118 = 0LL;
                uint64_t v119 = 0LL;
                uint64_t v120 = 0LL;
                if (v116 < 5) {
                  goto LABEL_164;
                }
              }

              else
              {
                __int128 v117 = v115[5] ? (int *)((char *)v114 + v115[5] + *(unsigned int *)((char *)v114 + v115[5])) : 0LL;
              }

              uint64_t v119 = v115[2] ? *(void *)((char *)v114 + v115[2]) : 0LL;
              if (v116 < 7) {
                break;
              }
              if (v115[3]) {
                uint64_t v118 = *(void *)((char *)v114 + v115[3]);
              }
              else {
                uint64_t v118 = 0LL;
              }
              if (v116 < 9) {
                goto LABEL_163;
              }
              uint64_t v121 = v115[4];
              if (!v121) {
                goto LABEL_163;
              }
              uint64_t v120 = *(void *)((char *)v114 + v121);
LABEL_164:
              __int128 v177 = 0u;
              __int128 v178 = 0u;
              *(_OWORD *)std::string __p = 0u;
              __int128 v176 = 0u;
              size_t v179 = *v117;
              memcpy(__p, v117 + 1, v179);
              if (v112 >= v181[0])
              {
                uint64_t v125 = (void *)v180.n128_u64[0];
                unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - v180.n128_u64[0]) >> 5);
                unint64_t v127 = v126 + 1;
                if (v126 + 1 > 0x2AAAAAAAAAAAAAALL) {
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                }
                else {
                  unint64_t v128 = v127;
                }
                if (v128)
                {
                  uint64_t v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>( (uint64_t)v181,  v128);
                  unint64_t v112 = v180.n128_u64[1];
                  uint64_t v125 = (void *)v180.n128_u64[0];
                }

                else
                {
                  uint64_t v129 = 0LL;
                }

                mach_vm_address_t v130 = &v129[96 * v126];
                *(void *)mach_vm_address_t v130 = v119;
                *((void *)v130 + 1) = v118;
                *((void *)v130 + 2) = v120;
                *(_OWORD *)(v130 + 40) = v176;
                *(_OWORD *)(v130 + 56) = v177;
                *(_OWORD *)(v130 + 72) = v178;
                *((void *)v130 + 11) = v179;
                *(_OWORD *)(v130 + 24) = *(_OWORD *)__p;
                if ((void *)v112 == v125)
                {
                  unint64_t v136 = (unint64_t)&v129[96 * v126];
                }

                else
                {
                  char v131 = &v129[96 * v126];
                  do
                  {
                    __int128 v132 = *(_OWORD *)(v112 - 80);
                    *((_OWORD *)v131 - 6) = *(_OWORD *)(v112 - 96);
                    *((_OWORD *)v131 - 5) = v132;
                    __int128 v133 = *(_OWORD *)(v112 - 64);
                    __int128 v134 = *(_OWORD *)(v112 - 48);
                    __int128 v135 = *(_OWORD *)(v112 - 16);
                    unint64_t v136 = (unint64_t)(v131 - 96);
                    *((_OWORD *)v131 - 2) = *(_OWORD *)(v112 - 32);
                    *((_OWORD *)v131 - 1) = v135;
                    *((_OWORD *)v131 - 4) = v133;
                    *((_OWORD *)v131 - 3) = v134;
                    v112 -= 96LL;
                    v131 -= 96;
                  }

                  while ((void *)v112 != v125);
                }

                unint64_t v112 = (unint64_t)(v130 + 96);
                v180.n128_u64[0] = v136;
                v180.n128_u64[1] = (unint64_t)(v130 + 96);
                v181[0] = &v129[96 * v128];
                if (v125) {
                  operator delete(v125);
                }
              }

              else
              {
                *(void *)unint64_t v112 = v119;
                *(void *)(v112 + _Block_object_dispose(va, 8) = v118;
                *(void *)(v112 + 16) = v120;
                size_t v122 = v179;
                __int128 v123 = v178;
                *(_OWORD *)(v112 + 56) = v177;
                __int128 v124 = *(_OWORD *)__p;
                *(_OWORD *)(v112 + 40) = v176;
                *(_OWORD *)(v112 + 72) = v123;
                *(void *)(v112 + 8_Block_object_dispose(va, 8) = v122;
                *(_OWORD *)(v112 + 24) = v124;
                v112 += 96LL;
              }

              v180.n128_u64[1] = v112;
              if (++v111 == v113) {
                goto LABEL_183;
              }
            }

            uint64_t v118 = 0LL;
LABEL_163:
            uint64_t v120 = 0LL;
            goto LABEL_164;
          }

LABEL_183:
          CSCppSymbolicator::set_aot_image_infos(v100, &v180);
          if (v180.n128_u64[0])
          {
            v180.n128_u64[1] = v180.n128_u64[0];
            operator delete((void *)v180.n128_u64[0]);
          }
        }
      }
    }
  }

void sub_186066F5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  size_t v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }

  a20 = (void **)&a27;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata( FlatbufferSymbols::Symbolicator *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *((_BYTE *)this + v1[2]) == 3) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0LL;
  }
}

const __CFData *_createCSSymbolicatorFromFlatbufferSignature<__CFData const*>( const __CFData *result, unsigned int a2)
{
  if (result)
  {
    BOOL v3 = result;
    BytePtr = CFDataGetBytePtr(result);
    uint64_t v5 = &BytePtr[*(unsigned int *)BytePtr];
    uint64_t v6 = &v5[-*(int *)v5];
    if (*(unsigned __int16 *)v6 >= 5u && (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) != 0)
    {
      unint64_t v8 = &v5[v7 + *(unsigned int *)&v5[v7]];
      return (const __CFData *)_createCSSymbolicatorFromFlatbuffer<__CFData const*>( (FlatbufferSymbols::SymbolOwner *)&v8[*((unsigned int *)v8 + 1) + 4],  v3,  a2);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v43[0] = 0LL;
  v43[1] = v43;
  v43[2] = 0x2000000000LL;
  v43[3] = a1;
  uint64_t v35 = 0LL;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x4002000000LL;
  uint64_t v38 = __Block_byref_object_copy__10;
  unint64_t v39 = __Block_byref_object_dispose__11;
  __int128 v41 = 0LL;
  uint64_t v42 = 0LL;
  unint64_t v40 = 0LL;
  uint64_t v18 = 0LL;
  __int128 v19 = &v18;
  uint64_t v20 = 0xD002000000LL;
  uint64_t v21 = __Block_byref_object_copy__12;
  uint64_t v22 = __Block_byref_object_dispose__13;
  uint64_t v23 = 0LL;
  char v24 = 0;
  __int128 v25 = xmmword_1860A4050;
  uint64_t v26 = 0LL;
  int v27 = 0;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  uint64_t v30 = 1LL;
  __int16 v31 = 256;
  v34[4] = 0LL;
  v32[0] = 0LL;
  *(void *)((char *)v32 + 7) = 0LL;
  __int128 v33 = 0u;
  memset(v34, 0, 27);
  v17[0] = MEMORY[0x1895F87A8];
  v17[1] = 0x40000000LL;
  _OWORD v17[2] = ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke;
  v17[3] = &unk_189DF9F08;
  v17[4] = v43;
  void v17[5] = &v35;
  void v17[6] = &v18;
  v17[7] = a2;
  v17[8] = a3;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v17);
  uint64_t v6 = (const void *)v36[5];
  uint64_t v7 = v36[6];
  unint64_t v8 = v19;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  std::string __p = 0LL;
  std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>( &__p,  v6,  v7,  (v7 - (uint64_t)v6) >> 2);
  FlatbufferEncoder::encodeSymbolicatorOffsets((uint64_t)(v8 + 5), &__p, (uint64_t)&v14);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }

  if (!v16)
  {
LABEL_12:
    Mutable = 0LL;
  }

  else
  {
    Mutable = CFDataCreateMutable(0LL, 0LL);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v14, length);
  }

  _Block_object_dispose(&v18, 8);
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v23);
  _Block_object_dispose(&v35, 8);
  if (v40)
  {
    __int128 v41 = v40;
    operator delete(v40);
  }

  _Block_object_dispose(v43, 8);
  return Mutable;
}

void sub_186067320( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  __int128 v28 = *(void **)(v26 - 88);
  if (v28)
  {
    *(void *)(v26 - 80) = v28;
    operator delete(v28);
  }

  _Block_object_dispose((const void *)(v26 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v26 - 128), 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

__n128 __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v26 - 128), 8) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v26 - 128), 8) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 16_Block_object_dispose((const void *)(v26 - 128), 8) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  __n128 result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  return result;
}

void __Block_byref_object_dispose__13(void *a1)
{
  unsigned int v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(a1 + 5));
}

void FlatbufferEncoder::~FlatbufferEncoder(FlatbufferEncoder *this)
{
  unsigned int v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(this);
}

void ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke( void *a1, char a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1[4] + 8LL) + 24LL) != (uint64_t)(*(void *)(*(void *)(a1[5] + 8LL) + 48LL)
                                                               - *(void *)(*(void *)(a1[5] + 8LL) + 40LL)) >> 2
    && (a2 & 7 | (8 * (a3 & 3))) != 0)
  {
    int v5 = FlatbufferEncoder::encodeCSSymbolicatorIntoOffset(*(void *)(a1[6] + 8LL) + 40LL, a2, a3, a1[7], a1[8]);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *(void **)(a1[5] + 8LL);
      unint64_t v8 = (char *)v7[6];
      unint64_t v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v11 = (char *)v7[5];
        uint64_t v12 = (v8 - v11) >> 2;
        unint64_t v13 = v9 - (void)v11;
        unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>( (uint64_t)(v7 + 7),  v15);
          uint64_t v11 = (char *)v7[5];
          unint64_t v8 = (char *)v7[6];
        }

        else
        {
          char v16 = 0LL;
        }

        uint64_t v17 = &v16[4 * v12];
        uint64_t v18 = &v16[4 * v15];
        *(_DWORD *)uint64_t v17 = v6;
        uint64_t v10 = v17 + 4;
        while (v8 != v11)
        {
          int v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }

        void v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11) {
          operator delete(v11);
        }
      }

      else
      {
        *(_DWORD *)unint64_t v8 = v5;
        uint64_t v10 = v8 + 4;
      }

      v7[6] = v10;
    }
  }

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignature<__CFData const*>( const __CFData *a1, unsigned int a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, a3, 0LL);
}

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>( const __CFData *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (CSCppDetermineSignatureType<__CFData const*>(a1) == 2)
    {
      BytePtr = CFDataGetBytePtr(a1);
      unint64_t v9 = &BytePtr[*(unsigned int *)BytePtr];
      uint64_t v10 = &v9[-*(int *)v9];
      if (*(unsigned __int16 *)v10 >= 5u)
      {
        uint64_t v11 = *((unsigned __int16 *)v10 + 2);
        if (v11)
        {
          uint64_t v12 = &v9[v11 + *(unsigned int *)&v9[v11]];
          if (*(_DWORD *)v12)
          {
            uint64_t v13 = 0LL;
            uint64_t v14 = 0LL;
            for (uint64_t i = (char *)(v12 + 4); ; i += 4)
            {
              uint64_t v16 = *(unsigned int *)i;
              if (a4) {
                break;
              }
              CSSymbolicatorFrom = (unsigned int *)_createCSSymbolicatorFromFlatbuffer<__CFData const*>( (FlatbufferSymbols::SymbolOwner *)&i[v16],  a1,  a2);
              uint64_t v19 = v18;
              if (!CSIsNull((char)CSSymbolicatorFrom, v18))
              {
                if (a3) {
                  (*(void (**)(uint64_t, unsigned int *, uint64_t))(a3 + 16))(a3, CSSymbolicatorFrom, v19);
                }
                CSRelease(CSSymbolicatorFrom, v19);
                goto LABEL_13;
              }

uint64_t _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>( const __CFData *a1, unsigned int a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, 0LL, a3);
}

const __CFData *_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>( const __CFData *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, a2, a3, a6);
  uint64_t v10 = v9;
  v15[0] = 0LL;
  v15[1] = v15;
  v15[2] = 0x4002000000LL;
  v15[3] = __Block_byref_object_copy__15_0;
  v15[4] = __Block_byref_object_dispose__16_0;
  v17[1] = 0LL;
  uint64_t v11 = MEMORY[0x1895F87A8];
  uint64_t v16 = v17;
  v17[0] = 0LL;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 0x40000000LL;
  void v14[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke;
  v14[3] = &unk_189DF9F30;
  void v14[4] = v15;
  CSSymbolicatorForeachSegmentAtTime((char)v8, v9, 0x8000000000000001LL, (uint64_t)v14);
  v13[0] = v11;
  v13[1] = 0x40000000LL;
  void v13[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2;
  void v13[3] = &unk_189DF9FA8;
  void v13[5] = a4;
  void v13[6] = a5;
  _OWORD v13[4] = v15;
  CSSymbolicatorApplyMutableContextBlock((char)v8, v10, (uint64_t)v13);
  _Block_object_dispose(v15, 8);
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v16, v17[0]);
  return v8;
}

void sub_186067814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27)
{
}

void *__Block_byref_object_copy__15_0(void *result, void *a2)
{
  result[5] = a2[5];
  unsigned int v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *unsigned int v2 = 0LL;
    a2[7] = 0LL;
  }

  else
  {
    result[5] = v4;
  }

  return result;
}

void __Block_byref_object_dispose__16_0(uint64_t a1)
{
}

uint64_t **___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Range = CSRegionGetRange(a2, a3);
  uint64_t v5 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  v8[0] = Range;
  v8[1] = Range;
  v8[2] = v6;
  return std::__tree<std::__value_type<unsigned long long,_CSRange>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,_CSRange>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,_CSRange>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,_CSRange>>( v5,  v8,  (uint64_t)v8);
}

uint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2( void *a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3;
  v5[3] = &unk_189DF9F80;
  uint64_t v3 = a1[5];
  uint64_t v2 = a1[6];
  void v5[4] = a1[4];
  void v5[5] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v3, v2, 0x8000000000000001LL, (uint64_t)v5);
}

void ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3( uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  unint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 0;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  v6[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4;
  v6[3] = &unk_189DF9F58;
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = &v7;
  CSSymbolOwnerForeachSegment(a2, a3, (uint64_t)v6);
  if (!*((_BYTE *)v8 + 24)) {
    CSSymbolOwnerAddInContext(a2, a3, *(char ***)(a1 + 40));
  }
  _Block_object_dispose(&v7, 8);
}

void sub_1860679F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

unint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = CSRegionGetRange(a2, a3);
  unint64_t v6 = result;
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v9 = (void *)(v8 + 48);
  char v10 = *(void **)(v8 + 48);
  if (v10)
  {
    uint64_t v11 = (void *)(v8 + 48);
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= result;
      if (v12 >= result) {
        uint64_t v14 = v10;
      }
      else {
        uint64_t v14 = v10 + 1;
      }
      if (v13) {
        uint64_t v11 = v10;
      }
      char v10 = (void *)*v14;
    }

    while (*v14);
    if (v11 != v9)
    {
      unint64_t result = CSRangeIntersectsRange(result, v5, v11[5], v11[6]);
      if ((result & 1) != 0)
      {
LABEL_19:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        return result;
      }

      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v9 = v11;
    }
  }

  if (v9 != *(void **)(v8 + 40))
  {
    unint64_t v15 = (void *)*v9;
    if (*v9)
    {
      do
      {
        uint64_t v16 = v15;
        unint64_t v15 = (void *)v15[1];
      }

      while (v15);
    }

    else
    {
      do
      {
        uint64_t v16 = (void *)v9[2];
        BOOL v17 = *v16 == (void)v9;
        uint64_t v9 = v16;
      }

      while (v17);
    }

    unint64_t result = CSRangeIntersectsRange(v6, v7, v16[5], v16[6]);
    if ((_DWORD)result) {
      goto LABEL_19;
    }
  }

  return result;
}

uint64_t _createCSSymbolicatorFromCustomSignature<__CFData const*>( const __CFData *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v44 = 0LL;
  if ((CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v44, &v45, &v49, &v48, &v47, &v46) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v43,  (uint64_t)"Error decoding symbolicator from signature",  42LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43 + 8, &v41);
    Exception::Exception(v40, &v41);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v40);
  }

  if (v45 != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v43,  (uint64_t)"ERROR, unhandled signature version",  34LL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43 + 8, &v41);
    Exception::Exception(v40, &v41);
    __int128 v28 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v28, (uint64_t)v40);
  }

  else {
    unsigned int v10 = v47 & a2 | a3;
  }
  unsigned int v47 = v10;
  __int128 v41 = 0uLL;
  uint64_t v42 = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve((char **)&v41, v46);
  if (v46)
  {
    for (unsigned int i = 0; i < v46; ++i)
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v32 = 0LL;
      if (!CSCppSignatureDecodeSymbolOwner<__CFData const*>( a1,  &v44,  &v39,  &v38,  &v37,  &v36,  &v35,  &v34,  &v33,  __p))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v43,  (uint64_t)"Error decoding symbol owner from signature",  42LL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v43 + 8, &v30);
        Exception::Exception(v40, &v30);
        uint64_t v26 = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(v26, (uint64_t)v40);
      }

      v40[0] = v39;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>( v40,  &v38,  &v36,  &v35,  &v37,  &v34,  &v33,  v43);
      uint64_t v12 = *(void *)&v43[0];
      __int128 v13 = *(_OWORD *)(*(void *)&v43[0] + 32LL);
      *(_OWORD *)(*(void *)&v43[0] + 32LL) = *(_OWORD *)__p;
      *(_OWORD *)std::string __p = v13;
      uint64_t v14 = *(void *)(v12 + 48);
      *(void *)(v12 + 4_Block_object_dispose(va, 8) = v32;
      uint64_t v32 = v14;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v41, v43);
      unint64_t v15 = (std::__shared_weak_count *)*((void *)&v43[0] + 1);
      if (*((void *)&v43[0] + 1))
      {
        uint64_t v16 = (unint64_t *)(*((void *)&v43[0] + 1) + 8LL);
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  uint64_t v18 = (CSCppFakeTask *)operator new(0x60uLL);
  CSCppFakeTask::CSCppFakeTask(v18, v49, v48 != 0);
  __int128 v29 = v18;
  uint64_t v19 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v41, (uint64_t *)&v29, v47, a4);
  uint64_t v21 = v20;
  uint64_t v22 = (uint64_t)v29;
  __int128 v29 = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v47 & 2) != 0)
  {
    *(_BYTE *)(v23 + 8_Block_object_dispose(va, 8) = *(_BYTE *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 88) | 1;
    if (!*(void *)(v23 + 80)) {
      *(void *)(v23 + 80) = a5;
    }
  }

  else if ((*(_BYTE *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 88) & 1) == 0)
  {
    char v24 = 0LL;
    goto LABEL_27;
  }

  if (*(void *)(v23 + 80)) {
    char v24 = *(TMMapArchive **)(v23 + 80);
  }
  else {
    char v24 = (TMMapArchive *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  }
LABEL_27:
  _decodeMMapArchivesFromSignature<__CFData const*>(a1, &v44, v24, a3, (uint64_t)v43);
  CSCppSignatureDecodeOptionalData<__CFData const*>(a1, &v44, (CSCppSymbolicator *)(v21 & 0xFFFFFFFFFFFFFFFCLL));
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(v21 & 0xFFFFFFFFFFFFFFFCLL), v40);
  _assignArchivesToSymbolOwners(v43, (TMMapArchive *)v40);
  __p[0] = v40;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v43);
  *(void *)&v43[0] = &v41;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
  return v19;
}

void sub_186067F00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::exception a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

int32x4_t *_decodeMMapArchivesFromSignature<__CFData const*>@<X0>( const __CFData *a1@<X0>, void *a2@<X1>, TMMapArchive *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  BOOL v12 = 0;
  if (a3) {
    int v9 = 0;
  }
  else {
    int v9 = (a4 >> 12) & 1;
  }
  while (1)
  {
    unint64_t result = CSCppSignatureDecodeMMapArchive<__CFData const*>(a1, a2, &v12);
    if (!result) {
      break;
    }
    if (v12) {
      uint64_t v11 = (uint64_t)CSCppMMapArchiveCache::add_archive((unsigned int *)result, 1, a3, 0, 0LL);
    }
    else {
      uint64_t v11 = CSCppMMapArchiveCache::add_signature_archive<__CFData const*>((uint64_t)result, a1, a3, v9);
    }
    __int128 v13 = (_OWORD *)(v11 + 52);
    std::__hash_table<std::__hash_value_type<UUID,TMMapArchive *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,TMMapArchive *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( a5,  (void *)(v11 + 52),  (uint64_t)&std::piecewise_construct,  &v13)[4] = v11;
  }

  return result;
}

void sub_186068130(_Unwind_Exception *a1)
{
}

const __CFData *create_symbolicator_signature_with_symbol_owners<__CFData const*>( uint64_t a1, uint64_t **a2, char a3)
{
  Mutable = CFDataCreateMutable(0LL, 0LL);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7) + 12);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  int v10 = CSCppSymbolicator::flags((os_unfair_lock_s *)a1);
  v11.n128_f64[0] = CSCppSignatureEncodeSymbolicator<__CFData *>( Mutable,  v8,  v9,  v10,  (unint64_t)((char *)a2[1] - (char *)*a2) >> 4);
  __int128 v13 = *a2;
  BOOL v12 = a2[1];
  while (v13 != v12)
  {
    uint64_t v14 = *v13;
    v13 += 2;
    CSCppSignatureEncodeSymbolOwner<__CFData *>( Mutable,  (_OWORD *)(v14 + 16),  *(_DWORD *)(v14 + 104),  *(_DWORD *)(v14 + 108),  *(void *)(v14 + 88),  *(void *)(v14 + 96),  *(void *)(v14 + 112),  *(const char **)(v14 + 120),  (void *)(v14 + 32),  0LL);
  }

  if ((a3 & 1) != 0)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 0x40000000LL;
    v20[2] = ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke;
    v20[3] = &__block_descriptor_tmp_7_3;
    void v20[4] = Mutable;
    BOOL v21 = (a3 & 4) != 0;
    CSCppForEachMMapArchiveInSymbolicator(2LL, a1, (uint64_t)v20);
  }

  unint64_t v15 = (__int128 *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v7 + 48LL))(v7, v11);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64LL))(v7);
  unint64_t v17 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56LL))(v7);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72LL))(v7);
  CSCppSignatureEncodeOptionalData<__CFData *>(Mutable, 4LL, v15, v16, v17, v18, 2, a1);
  return Mutable;
}

unsigned int *_CSSymbolicatorCreateWithSingleSymbolOwnerSignaturesAndFlags<__CFData const*>( uint64_t a1, unint64_t a2, unsigned int a3)
{
  std::string __p = 0LL;
  unsigned int v37 = 0LL;
  unsigned int v38 = 0LL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(v39, a2);
  std::vector<unsigned long long>::reserve(&__p, a2);
  if (a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(const __CFData **)(a1 + 8 * v6);
      v34[0] = 0LL;
      _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>(v7, v34, v32);
      if (*(void *)&v32[0])
      {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v39, v32);
        int v8 = v37;
        if (v37 >= v38)
        {
          int v10 = (char *)__p;
          uint64_t v11 = (v37 - (_BYTE *)__p) >> 3;
          unint64_t v12 = v11 + 1;
          uint64_t v13 = v38 - (_BYTE *)__p;
          if ((v38 - (_BYTE *)__p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v38, v14);
            int v10 = (char *)__p;
            int v8 = v37;
          }

          else
          {
            unint64_t v15 = 0LL;
          }

          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v34[0];
          int v9 = v16 + 8;
          while (v8 != v10)
          {
            uint64_t v17 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }

          std::string __p = v16;
          unsigned int v37 = v9;
          unsigned int v38 = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }

        else
        {
          *(void *)unsigned int v37 = v34[0];
          int v9 = v8 + 8;
        }

        unsigned int v37 = v9;
      }

      uint64_t v18 = (std::__shared_weak_count *)*((void *)&v32[0] + 1);
      if (*((void *)&v32[0] + 1))
      {
        uint64_t v19 = (unint64_t *)(*((void *)&v32[0] + 1) + 8LL);
        do
          unint64_t v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      ++v6;
    }

    while (v6 != a2);
  }

  BOOL v21 = (CSCppFakeTask *)operator new(0x60uLL);
  CSCppFakeTask::CSCppFakeTask(v21, -1, 0);
  uint64_t v35 = v21;
  uint64_t v22 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v39, (uint64_t *)&v35, a3 | 2, 0LL);
  uint64_t v24 = v23;
  uint64_t v25 = (uint64_t)v35;
  uint64_t v35 = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  *(_BYTE *)((v24 & 0xFFFFFFFFFFFFFFFCLL) + 88) |= 1u;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(v24 & 0xFFFFFFFFFFFFFFFCLL), v34);
  if (a2 == (uint64_t)(v34[1] - v34[0]) >> 4)
  {
    if (a2)
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      do
      {
        uint64_t v33 = *((void *)__p + v28);
        if (v33)
        {
          if ((*(_BYTE *)(v26 + 88) & 1) != 0)
          {
            if (*(void *)(v26 + 80)) {
              __int128 v29 = *(TMMapArchive **)(v26 + 80);
            }
            else {
              __int128 v29 = (TMMapArchive *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
            }
          }

          else
          {
            __int128 v29 = 0LL;
          }

          _decodeMMapArchivesFromSignature<__CFData const*>( *(const __CFData **)(a1 + 8 * v28),  &v33,  v29,  a3,  (uint64_t)v32);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(v31, 1uLL, (void *)(v34[0] + v27));
          _assignArchivesToSymbolOwners(v32, (TMMapArchive *)v31);
          unint64_t v40 = (void **)v31;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v40);
          std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v32);
        }

        ++v28;
        v27 += 16LL;
      }

      while (a2 != v28);
    }
  }

  else
  {
    CSRelease(v22, v24);
    uint64_t v22 = 0LL;
  }

  *(void *)&v32[0] = v34;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (__p)
  {
    unsigned int v37 = (char *)__p;
    operator delete(__p);
  }

  *(void *)&v32[0] = v39;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  return v22;
}

void sub_1860685EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  a12 = &a18;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  a12 = (char *)(v23 - 112);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>( const __CFData *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (a1
    && (unint64_t v25 = 0LL, (CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v25, &v26, &v30, &v29, &v28, &v27) & 1) != 0))
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v17 = 0LL;
    if ((CSCppSignatureDecodeSymbolOwner<__CFData const*>(a1, &v25, &v24, &v23, &v22, &v21, &v20, &v19, &v18, __p) & 1) != 0)
    {
      uint64_t v13 = v24;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>( &v13,  &v23,  &v21,  &v20,  &v22,  &v19,  &v18,  &v14);
      uint64_t v6 = v14;
      if (v14)
      {
        __int128 v7 = *(_OWORD *)(v14 + 32);
        *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
        *(_OWORD *)std::string __p = v7;
        uint64_t v8 = *(void *)(v6 + 48);
        *(void *)(v6 + 4_Block_object_dispose(va, 8) = v17;
        uint64_t v17 = v8;
        if (a2) {
          *a2 = v25;
        }
        int v9 = v15;
        *a3 = v6;
        a3[1] = v9;
      }

      else
      {
        *a3 = 0LL;
        a3[1] = 0LL;
        int v10 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
    }

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

void sub_186068810( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const __CFData *_CSSymbolicatorCreateNonFaultingWithSignatureAndGroupKey<__CFData const*>( const __CFData *a1, uint64_t a2)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 0, 0x80742u, 0LL, a2);
}

const __CFData *_CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>( const __CFData *result, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    int v9 = result;
    int v10 = CSCppDetermineSignatureType<__CFData const*>(result);
    if (v10 == 2)
    {
      return _createCSSymbolicatorFromFlatbufferSignature<__CFData const*>(v9, a3);
    }

    else
    {
      if (v10 != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Unknown symbolicator signature type.",  36LL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
        Exception::Exception(v12, &v13);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v12);
      }

      return (const __CFData *)_createCSSymbolicatorFromCustomSignature<__CFData const*>(v9, a2, a3, a4, a5);
    }
  }

  return result;
}

void sub_186068940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1860688BCLL);
  }

  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwnersWithPredicate<__CFData const*>( char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  __int128 v14 = 0uLL;
  uint64_t v15 = 0LL;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v13);
  __int128 v7 = (__int128 *)v13[0];
  uint64_t v8 = v13[1];
  while (v7 != (__int128 *)v8)
  {
    ++v7;
  }

  uint64_t v16 = v13;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  __int128 v11 = v14;
  uint64_t v12 = v15;
  __int128 v14 = 0uLL;
  uint64_t v15 = 0LL;
  symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>( v6,  (uint64_t **)&v11,  a3);
  v13[0] = (void **)&v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v14;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](v13);
  return symbolicator_signature_with_symbol;
}

void sub_186068AD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 56) = &a15;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>( char a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v16);
  if (!CSIsNull(a4, a5))
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>( (char *)v13,  (void *)v16,  *((void **)&v16 + 1),  (uint64_t)(*((void *)&v16 + 1) - v16) >> 4);
    elide_some_symbol_owners(a4, a5, v13, (uint64_t)&v14);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)&v16);
    __int128 v16 = v14;
    uint64_t v17 = v15;
    uint64_t v15 = 0LL;
    __int128 v14 = 0uLL;
    uint64_t v18 = (void **)&v14;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
    uint64_t v18 = (void **)v13;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }

  __int128 v11 = v16;
  uint64_t v12 = v17;
  uint64_t v17 = 0LL;
  __int128 v16 = 0uLL;
  symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>( v8,  (uint64_t **)&v11,  a3);
  *(void *)&__int128 v14 = &v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  *(void *)&__int128 v14 = &v16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return symbolicator_signature_with_symbol;
}

void sub_186068C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v20 - 56) = v19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  a15 = (void **)&a19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>( char a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v13 = 0LL;
  char v14 = 0;
  __int128 v15 = xmmword_1860A4050;
  uint64_t v16 = 0LL;
  if ((a3 & 0x10) != 0) {
    unsigned int v6 = a3 & 0xFFFFFFFB;
  }
  else {
    unsigned int v6 = a3;
  }
  int v17 = 0;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v20 = 1LL;
  __int16 v21 = 256;
  __p[4] = 0LL;
  v22[0] = 0LL;
  *(void *)((char *)v22 + 7) = 0LL;
  __int128 v23 = 0u;
  memset(__p, 0, 27);
  FlatbufferEncoder::encodeCSSymbolicator((uint64_t)&v13, a1, a2, v6 & 1, v6, a4, a5, &v10);
  if (v12)
  {
    Mutable = CFDataCreateMutable(0LL, 0LL);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v10, length);
  }

  else
  {
    Mutable = 0LL;
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v13);
  return Mutable;
}

void sub_186068D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignature<__CFData const*>(char a1, uint64_t a2, unsigned int a3)
{
  return _CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(a1, a2, a3, 0, 0LL);
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>( char a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v18 = 0LL;
  char v19 = 0;
  __int128 v20 = xmmword_1860A4050;
  uint64_t v21 = 0LL;
  int v22 = 0;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v25 = 1LL;
  __int16 v26 = 256;
  __p[4] = 0LL;
  v27[0] = 0LL;
  *(void *)((char *)v27 + 7) = 0LL;
  __int128 v28 = 0u;
  memset(__p, 0, 27);
  BOOL v9 = CSIsNull(a4, a5);
  if ((a3 & 0x10) != 0) {
    unsigned int v10 = a3 & 0xFFFFFFFB;
  }
  else {
    unsigned int v10 = a3;
  }
  if (v9) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  }
  FlatbufferEncoder::encodeCSSymbolOwner((uint64_t)&v18, a1, a2, v10 & 1, v11, v10, &v15);
  if (v17)
  {
    Mutable = CFDataCreateMutable(0LL, 0LL);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v15, length);
  }

  else
  {
    Mutable = 0LL;
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v18);
  return Mutable;
}

void sub_186068EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void CSCppSegmentRange::CSCppSegmentRange( CSCppSegmentRange *this, uint64_t a2, uint64_t a3, CSCppNamedRange *a4, int a5)
{
  unint64_t v8 = (CSCppNamedRange *)"SEGMENT";
  if (!a5) {
    unint64_t v8 = 0LL;
  }
  uint64_t v9 = 33LL;
  if (a5) {
    uint64_t v9 = 16LL;
  }
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  unsigned int v10 = CSCppNamedRange::unique_macho_string(a4, v8, (const char *)v9);
  unint64_t v11 = 0LL;
  *((void *)this + 2) = v10;
  if (a5) {
    unint64_t v11 = CSCppNamedRange::unique_macho_string(a4, 0LL, (const char *)0x10);
  }
  *((void *)this + 3) = v11;
}

int32x4_t *MMapArchiveEncoding::_migrate_legacy_archive(MMapArchiveEncoding *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 2);
  if (v1 <= 4) {
    return CSCppConvertLegacyPreVersion5ArchiveToModernCopy((_OWORD *)this + 1);
  }
  if (v1 == 6) {
    return (int32x4_t *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy((_OWORD *)this + 1);
  }
  if (v1 == 5) {
    return (int32x4_t *)CSCppConvertLegacyPreVersion6ArchiveToModernCopy((_OWORD *)this + 1);
  }
  return 0LL;
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1860A4050;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 1LL;
  *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 256;
  *(void *)(a1 + 96) = 0LL;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_186069000(_Unwind_Exception *a1)
{
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap( flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  unint64_t result = flatbuffers::vector_downward::swap((uint64_t *)this, a2);
  int v5 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 1_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 1_Block_object_dispose(va, 8) = v5;
  LOWORD(v5) = *((_WORD *)this + 38);
  *((_WORD *)this + 3_Block_object_dispose(va, 8) = *((_WORD *)a2 + 38);
  *((_WORD *)a2 + 3_Block_object_dispose(va, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 78);
  *((_BYTE *)this + 7_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 78);
  *((_BYTE *)a2 + 7_Block_object_dispose(va, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 79);
  *((_BYTE *)this + 79) = *((_BYTE *)a2 + 79);
  *((_BYTE *)a2 + 79) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 8_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 8_Block_object_dispose(va, 8) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *this, flatbuffers::vector_downward *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  LOBYTE(v2) = *((_BYTE *)this + 8);
  *((_BYTE *)this + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + _Block_object_dispose(va, 8) = v2;
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  uint64_t v6 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + _Block_object_dispose(va, 8) = v8;
  return this;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  if (*((_BYTE *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8LL))(*(void *)this);
  }
  *(void *)this = 0LL;
  *((_BYTE *)this + _Block_object_dispose(va, 8) = 0;
}

void flatbuffers::vector_downward::clear_buffer(flatbuffers::vector_downward *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
    }
    else {
      operator delete[](v2);
    }
  }

  *((void *)this + 6) = 0LL;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = (void **)*((void *)this + 12);
  if (v2)
  {
    std::__tree<TRange<Pointer64>>::destroy(*((void *)this + 12), v2[1]);
    operator delete(v2);
  }

  flatbuffers::vector_downward::~vector_downward(this);
}

void *std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    unint64_t result = std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_18606927C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>( void *__buf, size_t __nbyte, int __fd, void *a4)
{
  if (!__nbyte) {
    return 1LL;
  }
  size_t v6 = __nbyte;
  do
  {
    int v8 = 4;
    while (1)
    {
      ssize_t v9 = write(__fd, __buf, v6);
      if (v9 != -1) {
        break;
      }
      if (*__error() != 4 || v8-- == 0) {
        return 0LL;
      }
    }

    *a4 += v9;
    v6 -= v9;
  }

  while (v6);
  return 1LL;
}

uint64_t TMMapArchive::TEXT_text(TMMapArchive *this)
{
  return (uint64_t)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>@<X0>( void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  unint64_t result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>( v16,  a1,  a2,  a3,  a4,  a5,  a6,  a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_18606941C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>( void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_189DF5380;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_186069480(_Unwind_Exception *a1)
{
}

uint64_t **std::__tree<std::__value_type<unsigned long long,_CSRange>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,_CSRange>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,_CSRange>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,_CSRange>>( uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        size_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        size_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (char *)operator new(0x38uLL);
    *((void *)v10 + 4) = *(void *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }

  return v8;
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>@<X0>( void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xE8uLL);
  unint64_t result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>( v16,  a1,  a2,  a3,  a4,  a5,  a6,  a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1860695E0(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>( void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_189DF5380;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_186069644(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<UUID,TMMapArchive *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,TMMapArchive *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unsigned int i = *v10; i; unsigned int i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  unsigned int i = operator new(0x28uLL);
  *unsigned int i = 0LL;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unsigned int i = *v21;
LABEL_42:
    void *v21 = i;
    goto LABEL_43;
  }

  *unsigned int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }

void sub_186069870(_Unwind_Exception *a1)
{
}

uint64_t CSSymbolGetInstructionData(uint64_t a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  unint64_t v2 = a1;
  unint64_t Range = CSSymbolGetRange(a1, a2);
  uint64_t v5 = v4;
  v2 &= 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)v2);
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 192LL))( v6,  v2,  Range,  v5);
}

uint64_t CSSymbolGetModuleFlags(uint64_t a1, uint64_t a2)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  MangledName = (const char *)CSSymbolGetMangledName(a1, a2);
  if (!MangledName) {
    return 2LL;
  }
  if (!strncmp(MangledName, "_$sS", 4uLL)) {
    return 1LL;
  }
  return 2LL;
}

void XPCObject::XPCObject(XPCObject *this, xpc_object_t object, int a3)
{
  *(void *)this = object;
  if (object)
  {
    if (a3) {
      xpc_retain(object);
    }
  }

void XPCObject::XPCObject(XPCObject *this, void **a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    xpc_retain(v3);
  }
}

void *XPCObject::XPCObject(void *result, void *a2)
{
  void *result = *a2;
  *a2 = 0LL;
  return result;
}

void XPCObject::~XPCObject(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    xpc_release(v1);
  }
}

uint64_t XPCObject::operator*(uint64_t a1)
{
  return *(void *)a1;
}

BOOL XPCObject::operator BOOL(void *a1)
{
  return *a1 != 0LL;
}

uint64_t XPCObject::xpc_type(XPCObject *this)
{
  uint64_t result = *(void *)this;
  if (result) {
    JUMPOUT(0x186E3186CLL);
  }
  return result;
}

void XPCDictionary::XPCDictionary(XPCDictionary *this)
{
  *(void *)this = xpc_dictionary_create(0LL, 0LL, 0LL);
}

void XPCDictionary::set_uint64(xpc_object_t *this, const char *a2, uint64_t a3)
{
}

uint64_t XPCDictionary::get_uint64(xpc_object_t *this, const char *a2)
{
  return xpc_dictionary_get_uint64(*this, a2);
}

void XPCDictionary::set_object(xpc_object_t *this, const char *a2, void *a3)
{
}

xpc_object_t XPCDictionary::get_object@<X0>(xpc_object_t *this@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  xpc_object_t result = xpc_dictionary_get_value(*this, a2);
  *a3 = result;
  if (result) {
    return xpc_retain(result);
  }
  return result;
}

void XPCArray::XPCArray(XPCArray *this)
{
  *(void *)this = xpc_array_create(0LL, 0LL);
}

size_t XPCArray::count(xpc_object_t *this)
{
  return xpc_array_get_count(*this);
}

void XPCArray::set_uint64(xpc_object_t *this, size_t a2, uint64_t a3)
{
}

uint64_t XPCArray::get_uint64(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uint64(*this, a2);
}

void XPCArray::set_uuid(xpc_object_t *this, size_t a2, const CFUUIDBytes *a3)
{
}

const uint8_t *XPCArray::get_uuid(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uuid(*this, a2);
}

FILE *CSFileIsCoreFile(FILE *result)
{
  v9[4] = *MEMORY[0x1895F89C0];
  if (result)
  {
    xpc_object_t result = fopen((const char *)result, "re");
    unint64_t v7 = result;
    if (result)
    {
      v8[0] = off_189DF9FD8;
      v8[1] = &v7;
      unint64_t v8[3] = v8;
      void v9[3] = v9;
      v9[0] = off_189DF9FD8;
      v9[1] = &v7;
      uint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
      int v6 = 0;
      uint64_t v5 = 0LL;
      if (fread(&v3, 0x1CuLL, 1uLL, result) == 1)
      {
        unsigned int v1 = v3;
        int v2 = HIDWORD(v4);
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        if (v1 >> 1 == 2138504551) {
          return (FILE *)(v2 == 4);
        }
        else {
          return 0LL;
        }
      }

      else
      {
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        return 0LL;
      }
    }
  }

  return result;
}

BOOL CSFileIsKnownSignature(const char *a1)
{
  unint64_t type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  BOOL v3 = type_from_beginning_of == 0x1FF01FF02LL || HIDWORD(type_from_beginning_of) == 1112365395;
  return v2 && v3;
}

unint64_t read_type_from_beginning_of_file<unsigned long long>(const char *a1)
{
  v9[4] = *MEMORY[0x1895F89C0];
  if (a1 && (v1 = fopen(a1, "re"), (unint64_t v7 = v1) != 0LL))
  {
    v8[0] = off_189DFA068;
    v8[1] = &v7;
    unint64_t v8[3] = v8;
    v9[0] = off_189DFA068;
    void v9[3] = v9;
    v9[1] = &v7;
    uint64_t __ptr = 0LL;
    size_t v2 = fread(&__ptr, 8uLL, 1uLL, v1);
    if (v2 == 1) {
      unint64_t v3 = __ptr & 0xFFFFFFFFFFFFFF00LL;
    }
    else {
      unint64_t v3 = 0LL;
    }
    if (v2 == 1) {
      unsigned __int8 v4 = __ptr;
    }
    else {
      unsigned __int8 v4 = 0;
    }
    DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
  }

  else
  {
    unint64_t v3 = 0LL;
    unsigned __int8 v4 = 0;
  }

  return v3 & 0xFFFFFFFFFFFFFF00LL | v4;
}

BOOL CSFileIsFlatbuffer(const char *a1)
{
  unint64_t v1 = read_type_from_beginning_of_file<unsigned long long>(a1) >> 32;
  return v2 && v1 == 1112365395;
}

uint64_t CSFileIsSuitableForCS(const char *a1)
{
  unint64_t type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = type_from_beginning_of;
  uint64_t result = 1LL;
  if ((int)v3 > -822415875)
  {
    int v5 = -805638658;
  }

  else
  {
    int v5 = -1078264118;
  }

  if ((_DWORD)v3 != v5)
  {
    BOOL v6 = v3 == 0xA3E686372613C21LL || HIDWORD(v3) == 1112365395;
    return v3 == 0x1FF01FF02LL || v6;
  }

  return result;
}

void *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189DF9FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189DF9FD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()( uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void DeferredLambda::~DeferredLambda(DeferredLambda *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  uint64_t v3 = (DeferredLambda *)*((void *)this + 3);
  if (v3 == this)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = this;
  }

  else
  {
    if (!v3) {
      return;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
}

void *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189DFA068;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189DFA068;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()( uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

__CFString *CSRegionCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  for (unsigned int i = CFStringCreateMutable(0LL, 0LL); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  unint64_t Range = CSRegionGetRange(a1, a2);
  uint64_t v9 = v8;
  char SymbolOwner = CSRegionGetSymbolOwner(a1, a2);
  uint64_t Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  int v13 = CSArchitectureIs64Bit(Architecture);
  uint64_t v14 = Range + v9;
  Name = CSRegionGetName(a1, a2);
  if (v13) {
    CFStringAppendFormat( i,  0LL,  @"<CSRegion: %p> [0x%016llx -> 0x%016llx %s"),  a2 & 0xFFFFFFFFFFFFFFFCLL,  Range,  v14,  Name);
  }
  else {
    CFStringAppendFormat( i,  0LL,  @"<CSRegion: %p> [0x%08llx -> 0x%08llx %s"),  a2 & 0xFFFFFFFFFFFFFFFCLL,  Range,  v14,  Name);
  }
  return i;
}

__CFString *CSSourceInfoCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3)))) {
    return 0LL;
  }
  for (unsigned int i = CFStringCreateMutable(0LL, 0LL); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  unint64_t Range = CSSourceInfoGetRange(a1, a2);
  uint64_t v9 = v8;
  char SymbolOwner = CSSourceInfoGetSymbolOwner(a1, a2);
  uint64_t Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  int v13 = CSArchitectureIs64Bit(Architecture);
  uint64_t v14 = Range + v9;
  Path = CSSourceInfoGetPath(a1, a2);
  uint64_t LineNumber = CSSourceInfoGetLineNumber(a1, a2);
  if (v13) {
    CFStringAppendFormat( i,  0LL,  @"<CSSourceInfo: %p> [0x%016llx -> 0x%016llx %s:%d"),  a2 & 0xFFFFFFFFFFFFFFFCLL,  Range,  v14,  Path,  LineNumber);
  }
  else {
    CFStringAppendFormat( i,  0LL,  @"<CSSourceInfo: %p> [0x%08llx -> 0x%08llx %s:%d"),  a2 & 0xFFFFFFFFFFFFFFFCLL,  Range,  v14,  Path,  LineNumber);
  }
  return i;
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2, int a3)
{
  *((_BYTE *)this + 16) = 0;
  *(void *)this = off_189DFA0E8;
  *((void *)this + 1) = 0LL;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2, a3);
  *((void *)this + 6) = 0LL;
  *((void *)this + 781) = 0LL;
  CSCppMachTask::initialize(this);
}

void sub_18606A258(_Unwind_Exception *a1)
{
}

size_t CSCppMachTask::initialize(CSCppMachTask *this)
{
  uint64_t v1 = MEMORY[0x1895F8858](this);
  int v3 = v2;
  uint64_t v4 = v1;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(v1 + 64) = CSTaskIs64Bit(*(_DWORD *)(v1 + 32));
  IsTranslated = (UUID *)CSTaskIsTranslated();
  *(_BYTE *)(v4 + 16) = (_BYTE)IsTranslated;
  BOOL v6 = (UUID *)UUID::null_uuid(IsTranslated);
  *(_OWORD *)(v4 + 6232) = *(_OWORD *)v6;
  *(_OWORD *)(v4 + 6256) = *(_OWORD *)UUID::null_uuid(v6);
  *(void *)(v4 + 624_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v4 + 6272) = 0LL;
  *(void *)(v4 + 40) = 0LL;
  *(void *)(v4 + 56) = 0LL;
  if (v3)
  {
    unint64_t v7 = (CSCppDyldLoadUnloadNotifier *)operator new(0x48uLL);
    CSCppDyldLoadUnloadNotifier::CSCppDyldLoadUnloadNotifier( v7,  (const CSCppMachTaskContainer *)(v4 + 24),  *(_BYTE *)(v4 + 64));
    std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]((CSCppDyldLoadUnloadNotifier **)(v4 + 48), v7);
  }

  if (*(_DWORD *)(v4 + 36) == -1)
  {
    int v8 = -1;
  }

  else
  {
    CSCppMachTask::refresh_process_info((CSCppMachTask *)v4);
    int v8 = *(_DWORD *)(v4 + 36);
  }

  if (getpid() == v8)
  {
    strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for current process\n");
  }

  else
  {
    getpid();
    if (sandbox_check())
    {
      strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for remote process\n");
    }

    else
    {
      buffer[0] = 0;
      if (proc_name(v8, buffer, 0x400u) <= 0) {
        buffer[0] = 0;
      }
      v15[0] = 0;
      if (proc_pidpath(v8, v15, 0x400u) <= 0) {
        v15[0] = 0;
      }
      if (proc_pidinfo(v8, 3, 0LL, v13, 136) < 136)
      {
        snprintf( (char *)(v4 + 65),  0x1800uLL,  "CoreSymbolication target process: %s  pid: %d  path: %s\nCouldn't determine parent process ID\n");
      }

      else
      {
        int v9 = pid;
        v12[0] = 0;
        if (proc_name(pid, v12, 0x400u) <= 0) {
          v12[0] = 0;
        }
        v11[0] = 0;
        if (proc_pidpath(v9, v11, 0x400u) <= 0) {
          v11[0] = 0;
        }
        snprintf( (char *)(v4 + 65),  0x1800uLL,  "CoreSymbolication target process: %s  pid: %d  path: %s\n parent process: %s  pid: %d  path: %s\n",  buffer);
      }
    }
  }

  size_t result = strlen((const char *)(v4 + 65));
  *(void *)(v4 + 6216) = v4 + result + 65;
  *(void *)(v4 + 6224) = 6144 - result;
  return result;
}

void sub_18606A500(_Unwind_Exception *a1)
{
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, int a2)
{
  *((_BYTE *)this + 16) = 0;
  *(void *)this = off_189DFA0E8;
  *((void *)this + 1) = 0LL;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((void *)this + 6) = 0LL;
  *((void *)this + 781) = 0LL;
  CSCppMachTask::initialize(this);
}

void sub_18606A580(_Unwind_Exception *a1)
{
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2)
{
  *((_BYTE *)this + 16) = 0;
  *(void *)this = off_189DFA0E8;
  *((void *)this + 1) = 0LL;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((void *)this + 6) = 0LL;
  *((void *)this + 781) = 0LL;
  CSCppMachTask::initialize(this);
}

void sub_18606A604(_Unwind_Exception *a1)
{
}

void CSCppMachTask::~CSCppMachTask(CSCppMachTask *this)
{
  *(void *)this = off_189DFA0E8;
  if (*((void *)this + 5)) {
    _dyld_process_info_release();
  }
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]((CSCppDyldLoadUnloadNotifier **)this + 6, 0LL);
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24));
}

{
  void *v1;
  CSCppMachTask::~CSCppMachTask(this);
  operator delete(v1);
}

void CSCppMachTask::refresh_process_info(CSCppMachTask *this)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v2 = _dyld_process_info_create();
  if (v2)
  {
    if (*((void *)this + 5)) {
      _dyld_process_info_release();
    }
    *((void *)this + 5) = v2;
    _dyld_process_info_get_state();
    *((void *)this + 7) = v6;
    cache = (UUID *)_dyld_process_info_get_cache();
    *(_OWORD *)((char *)this + 6232) = *(_OWORD *)buf;
    *((void *)this + 781) = v8;
    *((_OWORD *)this + 391) = *(_OWORD *)UUID::null_uuid(cache);
    *((void *)this + 784) = 0LL;
  }

  else if (!*((void *)this + 7) {
         && !*((void *)this + 5)
  }
         && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    int v5 = *((_DWORD *)this + 8);
    int v4 = *((_DWORD *)this + 9);
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v5;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Unable to create process info for pid %d, task %d. Is dyld loaded for this binary yet?\n",  buf,  0xEu);
  }

BOOL CSCppMachTask::is_alive(CSCppMachTask *this)
{
  return CSCppMachTaskContainer::is_alive((CSCppMachTask *)((char *)this + 24));
}

uint64_t CSCppMachTask::uses_development_dsc(CSCppMachTask *this)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *((void *)this + 5);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v8, (CSCppMachTask *)((char *)this + 24), 0);
  if (*((_BYTE *)this + 64))
  {
    if (!v2) {
      goto LABEL_19;
    }
    if (_dyld_process_info_get_platform() != 10)
    {
      _dyld_process_info_get_cache();
      uint64_t v9 = v8;
      int v3 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at( &v9,  v10);
      uint64_t v2 = (uint64_t)v3;
      if (!v3) {
        goto LABEL_19;
      }
      uint64_t v4 = *((void *)v3 + 13);
      if (v4 != 2) {
        goto LABEL_15;
      }
      if (CSCppDyldSharedCache::is_universal_cache(v3))
      {
LABEL_7:
        BOOL v5 = *(_DWORD *)(v2 + 456) == 0;
        goto LABEL_16;
      }

      goto LABEL_14;
    }

void sub_18606A9CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void CSCppMachTask::begin_notifications(CSCppMachTask *this, CSCppSymbolicator *a2)
{
  int v3 = (CSCppDyldLoadUnloadNotifier *)*((void *)this + 6);
  if (v3) {
    CSCppDyldLoadUnloadNotifier::begin_processing(v3, a2, *((void *)this + 7));
  }
}

CSCppDyldLoadUnloadNotifier *CSCppMachTask::subscribe_to_task_main_notification(CSCppMachTask *this)
{
  size_t result = (CSCppDyldLoadUnloadNotifier *)*((void *)this + 6);
  if (result) {
    return (CSCppDyldLoadUnloadNotifier *)CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(result);
  }
  return result;
}

void CSCppMachTask::end_notifications(CSCppDyldLoadUnloadNotifier **this)
{
}

void std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]( CSCppDyldLoadUnloadNotifier **a1, CSCppDyldLoadUnloadNotifier *a2)
{
  int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(v3);
    operator delete(v4);
  }

void CSCppMachTask::symbol_owners(CSCppMachTask *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  unint64_t v7 = v6;
  v6->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0LL;
  v6[1].__vftable = 0LL;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_189DFA258;
  v6[1].__shared_owners_ = 0LL;
  v6[1].__shared_weak_owners_ = 0LL;
  *a3 = v6 + 1;
  a3[1] = v6;
  if (*((_BYTE *)this + 64))
  {
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    unint64_t v22 = off_189DFA198;
    __int128 v23 = &v6[1].__vftable;
    __int128 v24 = v6;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }

    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator( (uint64_t)v19,  (CSCppMachTask *)((char *)this + 24),  *((void *)this + 5),  (uint64_t)this + 65,  *((void *)this + 777),  *((void *)this + 778),  a2,  (uint64_t)&v22);
    if (v21 < 0) {
      operator delete(__p);
    }
    CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v19);
    unint64_t v22 = off_189DFA198;
    unint64_t v12 = v24;
    if (v24)
    {
      int v13 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_25:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  else
  {
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    unint64_t v22 = off_189DFA1F8;
    __int128 v23 = &v6[1].__vftable;
    __int128 v24 = v6;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }

    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator( (uint64_t)v19,  (CSCppMachTask *)((char *)this + 24),  *((void *)this + 5),  (uint64_t)this + 65,  *((void *)this + 777),  *((void *)this + 778),  a2,  (uint64_t)&v22);
    if (v21 < 0) {
      operator delete(__p);
    }
    CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v19);
    unint64_t v22 = off_189DFA1F8;
    unint64_t v12 = v24;
    if (v24)
    {
      unint64_t v18 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v18);
      while (__stlxr(v14 - 1, v18));
      goto LABEL_25;
    }
  }

void sub_18606AC68(_Unwind_Exception *a1)
{
  *(void *)(v4 - 8_Block_object_dispose(va, 8) = v3;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = off_189DFA198;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void *SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = off_189DFA1F8;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

uint64_t CSCppMachTask::mach_task_container(CSCppMachTask *this)
{
  return (uint64_t)this + 24;
}

uint64_t CSCppMachTask::is_kernel_task(CSCppMachTask *this)
{
  return 0LL;
}

uint64_t CSCppMachTask::is_mach_task(CSCppMachTask *this)
{
  return 1LL;
}

uint64_t CSCppMachTask::dsc_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6232;
}

uint64_t CSCppMachTask::aot_cache_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6256;
}

uint64_t CSCppMachTask::dsc_base_address(CSCppMachTask *this)
{
  return *((void *)this + 781);
}

uint64_t CSCppMachTask::aot_cache_base_address(CSCppMachTask *this)
{
  return *((void *)this + 784);
}

__n128 CSCppMachTask::set_dsc_uuid(CSCppMachTask *this, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    *(__n128 *)((char *)this + 6232) = *a2;
  }

  return result;
}

uint64_t CSCppMachTask::set_dsc_base_address(uint64_t this, uint64_t a2)
{
  *(void *)(this + 624_Block_object_dispose(va, 8) = a2;
  return this;
}

__n128 CSCppMachTask::set_aot_cache_uuid(__n128 *this, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    this[391] = *a2;
  }

  return result;
}

uint64_t CSCppMachTask::set_aot_cache_base_address(uint64_t this, uint64_t a2)
{
  *(void *)(this + 6272) = a2;
  return this;
}

uint64_t SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve( *(char ***)(a1 + 8),  a2 + ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8LL) - **(void **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  if ((void)v6) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v6);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_18606ADF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header( uint64_t a1, _BYTE *a2)
{
  int v13 = a2;
  if (a2 && *a2)
  {
    uint64_t v10 = 0LL;
    unint64_t v11 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>( &v11,  (unsigned int *)&v10 + 1,  &kCSBeginningOfTime,  &kCSEndOfTime,  (unsigned int *)&v10,  &kCSArchitectureUnknown,  &v13,  &v12);
    uint64_t v3 = v12;
    uint64_t v4 = (void **)(v12 + 32);
    HIDWORD(std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10) = 0;
    LODWORD(v11) = 0;
    unint64_t v5 = *(void *)(v12 + 40);
    if (v5 >= *(void *)(v12 + 48))
    {
      __int128 v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>( v4,  (int *)&v11,  (int *)&v10 + 1,  (CSCppNamedRange *)"__FAILED");
    }

    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>( (uint64_t)v4,  (int *)&v11,  (int *)&v10 + 1,  (CSCppNamedRange *)"__FAILED");
      __int128 v6 = (void *)(v5 + 32);
    }

    *(void *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v12);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      uint64_t v8 = (unint64_t *)(*((void *)&v12 + 1) + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

void sub_18606AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = off_189DFA198;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>@<X0>( void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  unint64_t v16 = operator new(0xE8uLL);
  __n128 result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>( v16,  a1,  a2,  a3,  a4,  a5,  a6,  a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_18606AFE0(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>( void *a1, void *a2, unsigned int *a3, void *a4, void *a5, unsigned int *a6, void *a7, void *a8)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_189DF5380;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_18606B044(_Unwind_Exception *a1)
{
}

const char *std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>( uint64_t a1, int *a2, int *a3, CSCppNamedRange *this)
{
  __int128 v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  *__int128 v6 = *a2;
  v6[1] = v7;
  v6[2] = CSCppNamedRange::unique_macho_string(this, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  __n128 result = CSCppNamedRange::unique_macho_string(this, 0LL, (const char *)0x10);
  v6[3] = result;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6 + 4;
  return result;
}

void sub_18606B0C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>( void **a1, int *a2, int *a3, CSCppNamedRange *a4)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  unint64_t v7 = v6 + 1;
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = (_BYTE *)a1[2] - v5;
  if (v12 >> 4 > v7) {
    unint64_t v7 = v12 >> 4;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v11, v13);
    uint64_t v16 = v15;
  }

  else
  {
    unint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  uint64_t v17 = *a3;
  unint64_t v18 = &v14[32 * v6];
  *(void *)unint64_t v18 = *a2;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  *((void *)v18 + 3) = CSCppNamedRange::unique_macho_string(a4, 0LL, (const char *)0x10);
  size_t v19 = v18 + 32;
  char v21 = (char *)*a1;
  uint64_t v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      __int128 v22 = *((_OWORD *)v20 - 1);
      *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
      *((_OWORD *)v18 - 1) = v22;
      v18 -= 32;
      v20 -= 32;
    }

    while (v20 != v21);
    uint64_t v20 = (char *)*a1;
  }

  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[32 * v16];
  if (v20) {
    operator delete(v20);
  }
  return v19;
}

void sub_18606B1F4(_Unwind_Exception *a1)
{
}

uint64_t SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve( *(char ***)(a1 + 8),  a2 + ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8LL) - **(void **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  if ((void)v6) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v6);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_18606B298( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header( uint64_t a1, _BYTE *a2)
{
  unint64_t v13 = a2;
  if (a2 && *a2)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>( &v11,  (unsigned int *)&v10 + 1,  &kCSBeginningOfTime,  &kCSEndOfTime,  (unsigned int *)&v10,  &kCSArchitectureUnknown,  &v13,  &v12);
    uint64_t v3 = v12;
    uint64_t v4 = (void **)(v12 + 32);
    HIDWORD(std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10) = 0;
    LODWORD(v11) = 0;
    unint64_t v5 = *(void *)(v12 + 40);
    if (v5 >= *(void *)(v12 + 48))
    {
      __int128 v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>( v4,  (int *)&v11,  (int *)&v10 + 1,  (CSCppNamedRange *)"__FAILED");
    }

    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>( (uint64_t)v4,  (int *)&v11,  (int *)&v10 + 1,  (CSCppNamedRange *)"__FAILED");
      __int128 v6 = (void *)(v5 + 32);
    }

    *(void *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v12);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      uint64_t v8 = (unint64_t *)(*((void *)&v12 + 1) + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

void sub_18606B3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(void *a1)
{
  *a1 = off_189DFA1F8;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::dyld_shared_cache_at( void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (const char *)(*(uint64_t (**)(void, void, uint64_t))(*(void *)*a1 + 32LL))(*a1, a2, 32LL);
  __int128 v6 = (unsigned int *)v4;
  if (v4)
  {
    unint64_t v7 = v5;
    if (!strncmp(v4, "dyld_v", 6uLL))
    {
      uint64_t v8 = v6[4];
      uint64_t v9 = v6[5];
      uint64_t v10 = v6[98];
      BOOL v11 = CSCppDyldSharedCache::uses_universal_cache_struct_layout((CSCppDyldSharedCache *)v6);
      unsigned int v12 = 24;
      if (v11) {
        unsigned int v12 = 56;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return (uint64_t)v6;
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189DFA258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189DFA258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator( uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  is_self_tasunint64_t k = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 136) = 0LL;
  uint64_t v17 = (uint64_t *)(a1 + 136);
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = a4;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = a5;
  *(void *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  if (a3)
  {
    int v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0) {
      LOBYTE(v1_Block_object_dispose(va, 8) = 0;
    }
    if ((v18 & 1) != 0)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
    }

    else
    {
      v23[0] = MEMORY[0x1895F87A8];
      v23[1] = 0x40000000LL;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_34_1;
      v23[4] = a1;
      int v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)this + 3);
          uint64_t v21 = a1 + 136;
          *(_DWORD *)__int128 buf = 67109634;
          int v25 = v20;
          __int16 v26 = 2080;
          uint64_t v27 = v21;
          __int16 v28 = 1024;
          int v29 = v19;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n",  buf,  0x18u);
        }

        uint64_t v22 = a1 + 136;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 16LL))(*(void *)(a1 + 192), v22);
      }
    }
  }

void sub_18606B6F0(_Unwind_Exception *a1)
{
  if (v1[159] < 0) {
    operator delete(*v2);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate()
{
  v1[0] = 0LL;
  v1[1] = v1;
  v1[2] = 0x5002000000LL;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  int v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_18606B7D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table( a1 + 40,  (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__12(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke( uint64_t a1, unint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v19 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  &v19))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>( *(void *)(*(void *)(a1 + 32) + 8LL) + 40LL,  &v19,  &v19);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v20);
      snprintf( *(char **)(v7 + 168),  *(void *)(v7 + 176),  "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header addres s: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n",  (const char *)&v20,  v19,  *a3,  a3[1],  a3[2],  a3[3],  a3[4],  a3[5],  a3[6],  a3[7],  a3[8],  a3[9],  a3[10],  a3[11],  a3[12],  a3[13],  a3[14],  a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( (CSCppCrashReporterInfoSetter *)v18,  *(const char **)(v7 + 160));
      _os_assert_log();
      uint64_t v15 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v15);
    }

    CFRelease(v8);
    if (a4) {
      uint64_t v9 = (char *)a4;
    }
    else {
      uint64_t v9 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, v9);
    uint64_t v10 = (void **)(v7 + 136);
    *(_OWORD *)uint64_t v10 = v20;
    *(void *)(v7 + 152) = v21;
    snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( (CSCppCrashReporterInfoSetter *)v18,  *(const char **)(v7 + 160));
    uint64_t v11 = v19;
    unint64_t v12 = 32LL;
    while (1)
    {
      unint64_t v13 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v7 + 120) + 32LL))( *(void *)(v7 + 120),  v11,  v12);
      if (!v13 || *v13 != -17958193) {
        break;
      }
      unint64_t v12 = v13[5] + 32LL;
      if (v12 <= v14)
      {
        LOBYTE(v16) = 0;
        char v17 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader( (uint64_t)&v20,  v7,  v11,  (uint64_t)v13,  (uint64_t)a4,  0,  0,  &v16);
        (*(void (**)(void, __int128 *))(**(void **)(v7 + 192) + 8LL))(*(void *)(v7 + 192), &v20);
        break;
      }
    }

    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18);
  }

void sub_18606BA58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>( uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  unsigned int i = operator new(0x18uLL);
  *unsigned int i = 0LL;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unsigned int i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }

  *unsigned int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_18606BC84(_Unwind_Exception *a1)
{
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator( uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  is_self_tasunint64_t k = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 136) = 0LL;
  size_t v17 = (uint64_t *)(a1 + 136);
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = a4;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = a5;
  *(void *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  if (a3)
  {
    int v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0) {
      LOBYTE(v1_Block_object_dispose(va, 8) = 0;
    }
    if ((v18 & 1) != 0)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
    }

    else
    {
      v23[0] = MEMORY[0x1895F87A8];
      v23[1] = 0x40000000LL;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_41;
      v23[4] = a1;
      int v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)this + 3);
          uint64_t v21 = a1 + 136;
          *(_DWORD *)__int128 buf = 67109634;
          int v25 = v20;
          __int16 v26 = 2080;
          uint64_t v27 = v21;
          __int16 v28 = 1024;
          int v29 = v19;
          _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n",  buf,  0x18u);
        }

        uint64_t v22 = a1 + 136;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 192) + 16LL))(*(void *)(a1 + 192), v22);
      }
    }
  }

void sub_18606BE60(_Unwind_Exception *a1)
{
  if (v1[159] < 0) {
    operator delete(*v2);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate()
{
  v1[0] = 0LL;
  v1[1] = v1;
  v1[2] = 0x5002000000LL;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  int v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_18606BF44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEE7iterateEv_block_invoke( uint64_t a1, unint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v19 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  &v19))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>( *(void *)(*(void *)(a1 + 32) + 8LL) + 40LL,  &v19,  &v19);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v20);
      snprintf( *(char **)(v7 + 168),  *(void *)(v7 + 176),  "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header addres s: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n",  (const char *)&v20,  v19,  *a3,  a3[1],  a3[2],  a3[3],  a3[4],  a3[5],  a3[6],  a3[7],  a3[8],  a3[9],  a3[10],  a3[11],  a3[12],  a3[13],  a3[14],  a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( (CSCppCrashReporterInfoSetter *)v18,  *(const char **)(v7 + 160));
      _os_assert_log();
      uint64_t v17 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v17);
    }

    CFRelease(v8);
    if (a4) {
      uint64_t v9 = (char *)a4;
    }
    else {
      uint64_t v9 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, v9);
    uint64_t v10 = (void **)(v7 + 136);
    *(_OWORD *)uint64_t v10 = v20;
    *(void *)(v7 + 152) = v21;
    snprintf(*(char **)(v7 + 168), *(void *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter( (CSCppCrashReporterInfoSetter *)v18,  *(const char **)(v7 + 160));
    int v11 = v19;
    uint64_t v12 = v19;
    unint64_t v13 = 28LL;
    while (1)
    {
      BOOL v14 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v7 + 120) + 32LL))( *(void *)(v7 + 120),  v12,  v13);
      if (!v14 || *v14 != -17958194) {
        break;
      }
      unint64_t v13 = v14[5] + 28LL;
      if (v13 <= v15)
      {
        TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader( (uint64_t)&v20,  v7,  v11,  (uint64_t)v14,  (uint64_t)a4,  0,  0,  v16,  0LL,  0);
        (*(void (**)(void, __int128 *))(**(void **)(v7 + 192) + 8LL))(*(void *)(v7 + 192), &v20);
        break;
      }
    }

    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18);
  }

void sub_18606C1B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t OUTLINED_FUNCTION_0_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return snprintf(v9, v10, v11);
}

  ;
}

void OUTLINED_FUNCTION_2_0(void *a1)
{
}

  ;
}

void CSCppDyldLoadUnloadNotifier::CSCppDyldLoadUnloadNotifier( CSCppDyldLoadUnloadNotifier *this, const CSCppMachTaskContainer *a2, char a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  *(void *)this = 0LL;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v6 = dispatch_queue_create("CoreSymbolication dyld load/unload notifier queue", 0LL);
  *((void *)this + 7) = v6;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 65) = a3;
  uint64_t v7 = MEMORY[0x1895F87A8];
  handler[5] = MEMORY[0x1895F87A8];
  handler[6] = 0x40000000LL;
  handler[7] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke;
  handler[8] = &__block_descriptor_tmp_4_3;
  handler[9] = this;
  handler[10] = a2;
  CFStringRef v8 = dispatch_source_create(MEMORY[0x1895F8B48], *((unsigned int *)a2 + 2), 1uLL, v6);
  *((void *)this + 6) = v8;
  handler[0] = v7;
  handler[1] = 0x40000000LL;
  handler[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_2;
  handler[3] = &__block_descriptor_tmp_6_2;
  handler[4] = this;
  dispatch_source_set_event_handler(v8, handler);
  dispatch_activate(*((dispatch_object_t *)this + 6));
  uint64_t v9 = _dyld_process_info_notify();
  *((void *)this + 1) = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      int v10 = *((_DWORD *)a2 + 3);
      *(_DWORD *)__int128 buf = 67109376;
      int v13 = v10;
      __int16 v14 = 1024;
      int v15 = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Failed to start process notifications for pid %d (%d)\n",  buf,  0xEu);
    }

    fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Failed to start process notifications for pid %d (%d)\n",  *((_DWORD *)a2 + 3),  0);
  }

void sub_18606C3E8(_Unwind_Exception *a1)
{
  *(void *)(v2 - 80) = v1;
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 80));
  _Unwind_Resume(a1);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke( uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v8 + 64) || *(void *)(v8 + 40) < a3)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = &v26;
    uint64_t v28 = 0x3802000000LL;
    int v29 = __Block_byref_object_copy__13;
    uint64_t v30 = __Block_byref_object_dispose__13;
    uint64_t v9 = *(CSCppMachTaskContainer **)(a1 + 40);
    if (*(_BYTE *)(v8 + 65)) {
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v9, a4, a6, &v31);
    }
    else {
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v9, a4, a6, &v31);
    }
    if (v27[5])
    {
      if (*(_BYTE *)(v8 + 64))
      {
        int v10 = *(void **)v8;
        if (*(void *)v8)
        {
          v20[0] = MEMORY[0x1895F87A8];
          v20[1] = 0x40000000LL;
          v20[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1;
          v20[3] = &unk_189DFA330;
          void v20[4] = &v26;
          void v20[5] = v8;
          v20[6] = a3;
          char v21 = a2;
          _thread_local_invoke_notifier(v10, (uint64_t)v20);
        }
      }

      else
      {
        int v11 = (std::__shared_weak_count *)v27[6];
        uint64_t v22 = v27[5];
        __int128 v23 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            unint64_t v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }

        unint64_t v24 = a3;
        char v25 = a2 ^ 1;
        std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100]( (uint64_t *)(v8 + 16),  (uint64_t)&v22);
        __int16 v14 = v23;
        if (v23)
        {
          int v15 = (unint64_t *)&v23->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
    }

    _Block_object_dispose(&v26, 8);
    uint64_t v17 = v32;
    if (v32)
    {
      int v18 = (unint64_t *)&v32->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

void sub_18606C5BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

__n128 __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
  return result;
}

uint64_t __Block_byref_object_dispose__13(uint64_t a1)
{
  return std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    else {
      unint64_t v12 = v10;
    }
    v15[4] = result;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(result, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    __int16 v14 = &v13[32 * v9];
    v15[0] = v13;
    v15[1] = v14;
    v15[3] = &v13[32 * v12];
    *(_OWORD *)__int16 v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    v14[24] = *(_BYTE *)(a2 + 24);
    v15[2] = v14 + 32;
    std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer( a1,  v15);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer((uint64_t)v15);
  }

  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    *(_BYTE *)(v7 + 24) = *(_BYTE *)(a2 + 24);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }

  a1[1] = v8;
  return result;
}

void sub_18606C710(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t _thread_local_invoke_notifier(void *a1, uint64_t a2)
{
  return pthread_setspecific(_notifier_in_progress_key(void)::notifier_key, 0LL);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1(uint64_t a1)
{
  CSCppSymbolicator::dyld_activity( **(void **)(a1 + 40),  (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  *(void *)(a1 + 48),  *(_BYTE *)(a1 + 56) == 0);
}

void *___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  uint64_t result = *v1;
  if (*v1)
  {
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 0x40000000LL;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_3;
    v3[3] = &__block_descriptor_tmp_5_3;
    void v3[4] = v1;
    return (void *)_thread_local_invoke_notifier(result, (uint64_t)v3);
  }

  return result;
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_3(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(void **)(a1 + 32), 4096LL, 0LL, 0LL);
}

void CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(CSCppDyldLoadUnloadNotifier *this)
{
  if (*((void *)this + 1))
  {
    MEMORY[0x186E3108C]();
    *((void *)this + 1) = 0LL;
  }

  dispatch_source_cancel(*((dispatch_source_t *)this + 6));
  if (!*((_BYTE *)this + 64)) {
    dispatch_activate(*((dispatch_object_t *)this + 7));
  }
  dispatch_release(*((dispatch_object_t *)this + 6));
  dispatch_release(*((dispatch_object_t *)this + 7));
  uint64_t v3 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); i != v3; uint64_t i = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 32))
    ;
  *((void *)this + 3) = v3;
  uint64_t v4 = (void **)((char *)this + 16);
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(CSCppDyldLoadUnloadNotifier *this)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 0x40000000LL;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_10_3;
    void v3[4] = this;
    return MEMORY[0x186E31080](result, v3);
  }

  return result;
}

void *___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  uint64_t result = *v1;
  if (*v1)
  {
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 0x40000000LL;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke_2;
    v3[3] = &__block_descriptor_tmp_9_2;
    void v3[4] = v1;
    return (void *)_thread_local_invoke_notifier(result, (uint64_t)v3);
  }

  return result;
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke_2(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(void **)(a1 + 32), 4098LL, 0LL, 0LL);
}

void CSCppDyldLoadUnloadNotifier::begin_processing( CSCppDyldLoadUnloadNotifier *this, CSCppSymbolicator *a2, uint64_t a3)
{
  uint64_t v3 = (dispatch_queue_s *)*((void *)this + 7);
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZN27CSCppDyldLoadUnloadNotifier16begin_processingER17CSCppSymbolicatory_block_invoke;
  block[3] = &__block_descriptor_tmp_11_5;
  block[4] = this;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void *___ZN27CSCppDyldLoadUnloadNotifier16begin_processingER17CSCppSymbolicatory_block_invoke( void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 64))
  {
    uint64_t v2 = result;
    *(void *)uint64_t v1 = result[5];
    *(void *)(v1 + 40) = result[6];
    *(_BYTE *)(v1 + 64) = 1;
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = *(void *)(v1 + 24);
    if (v3 != v4)
    {
      do
      {
        uint64_t v9 = 0LL;
        unint64_t v10 = 0LL;
        std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](&v9, (uint64_t *)v3);
        unint64_t v5 = *(void *)(v3 + 16);
        if (v5 > *(void *)(v1 + 40)) {
          CSCppSymbolicator::dyld_activity(v2[5], &v9, v5, *(unsigned __int8 *)(v3 + 24));
        }
        unint64_t v6 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            unint64_t v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }

        v3 += 32LL;
      }

      while (v3 != v4);
      uint64_t v3 = *(void *)(v1 + 16);
      for (uint64_t result = *(void **)(v1 + 24);
            result != (void *)v3;
        ;
      }
    }

    *(void *)(v1 + 24) = v3;
  }

  return result;
}

void sub_18606CB64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>( CSCppMachTaskContainer *a1@<X0>, unsigned int a2@<W1>, const char *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = 28LL;
  do
  {
    uint64_t v9 = (_DWORD *)(*(uint64_t (**)(void *, void, unint64_t))(v16[0] + 32LL))(v16, a2, v8);
    uint64_t v11 = (uint64_t)v9;
    if (!v9 || *v9 != -17958194) {
      goto LABEL_10;
    }
    unint64_t v8 = v9[5] + 28LL;
  }

  while (v8 > v10);
  if (!a3)
  {
LABEL_10:
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0LL;
    a4[1] = 0LL;
    goto LABEL_11;
  }

  if (stat(a3, &v15)) {
    int tv_sec = 0;
  }
  else {
    int tv_sec = v15.st_mtimespec.tv_sec;
  }
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader( (uint64_t)v14,  (uint64_t)v16,  a2,  v11,  (uint64_t)a3,  tv_sec,  0,  v12,  0LL,  0);
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner((uint64_t)v14, a4);
LABEL_11:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v16);
}

void sub_18606CC78(_Unwind_Exception *a1)
{
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>( CSCppMachTaskContainer *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = 32LL;
  do
  {
    uint64_t v9 = (_DWORD *)(*(uint64_t (**)(void *, uint64_t, unint64_t))(v17[0] + 32LL))(v17, a2, v8);
    uint64_t v11 = (uint64_t)v9;
    if (!v9 || *v9 != -17958193) {
      goto LABEL_10;
    }
    unint64_t v8 = v9[5] + 32LL;
  }

  while (v8 > v10);
  if (!a3)
  {
LABEL_10:
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0LL;
    a4[1] = 0LL;
    goto LABEL_11;
  }

  if (stat(a3, &v16)) {
    int tv_sec = 0;
  }
  else {
    int tv_sec = v16.st_mtimespec.tv_sec;
  }
  LOBYTE(v13) = 0;
  char v14 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader( (uint64_t)v15,  (uint64_t)v17,  a2,  v11,  (uint64_t)a3,  tv_sec,  0,  &v13);
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner((uint64_t)v15, a4);
LABEL_11:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v17);
}

void sub_18606CDA0(_Unwind_Exception *a1)
{
}

uint64_t *std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer( uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v7 - 32) = 0LL;
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_BYTE *)(v6 - _Block_object_dispose((const void *)(v11 - 88), 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 32LL;
    }

    while (v2 + v5 != v3);
    v4 += v5;
  }

  a2[1] = v4;
  uint64_t v8 = *result;
  void *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 32);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t ___ZL25_notifier_in_progress_keyv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_notifier_in_progress_key(void)::notifier_key, 0LL);
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  *((_WORD *)this + _Block_object_dispose((const void *)(v11 - 88), 8) = 0;
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = &a2[a3];
  *((_BYTE *)this + 16) = a4;
  *((_BYTE *)this + 17) = 0;
}

const unsigned __int8 **CSBinaryDataRef::SetData( const unsigned __int8 **this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = &a2[a3];
  if (a3) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a3) {
    uint64_t v3 = 0LL;
  }
  *this = v4;
  this[1] = v3;
  return this;
}

uint64_t CSBinaryDataRef::Get8(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0LL;
  }
  unint64_t v4 = *a2;
  uint64_t result = *(unsigned __int8 *)(v2 + v4);
  *a2 = v4 + 1;
  return result;
}

uint64_t CSBinaryDataRef::Get16(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3 || (uint64_t v4 = *a2, (v3 - v2) <= (unint64_t)(v4 + 1)))
  {
    LOWORD(v5) = 0;
  }

  else
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + v4);
    unsigned int v6 = bswap32(v5) >> 16;
    if (*((_BYTE *)this + 16)) {
      LOWORD(v5) = v6;
    }
    *a2 = v4 + 2;
  }

  return (unsigned __int16)v5;
}

uint64_t CSBinaryDataRef::Get32(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  unsigned int v5 = *(_DWORD *)(v2 + v4);
  unsigned int v6 = bswap32(v5);
  if (*((_BYTE *)this + 16)) {
    uint64_t result = v6;
  }
  else {
    uint64_t result = v5;
  }
  *a2 = v4 + 4;
  return result;
}

unint64_t CSBinaryDataRef::Get64(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  unint64_t v5 = *(void *)(v2 + v4);
  unint64_t v6 = bswap64(v5);
  if (*((_BYTE *)this + 16)) {
    unint64_t result = v6;
  }
  else {
    unint64_t result = v5;
  }
  *a2 = v4 + 8;
  return result;
}

unint64_t CSBinaryDataRef::GetMax64(CSBinaryDataRef *this, unsigned int *a2, int a3)
{
  unint64_t v3 = 0LL;
  switch(a3)
  {
    case 1:
      uint64_t v4 = *(void *)this;
      unint64_t v5 = *((void *)this + 1);
      if (*(void *)this >= v5) {
        return 0LL;
      }
      unint64_t v6 = *a2;
      unint64_t v3 = *(unsigned __int8 *)(v4 + v6);
      unsigned int v7 = v6 + 1;
      goto LABEL_21;
    case 2:
      uint64_t v8 = *(void *)this;
      unint64_t v9 = *((void *)this + 1);
      if (*(void *)this >= v9) {
        return 0LL;
      }
      uint64_t v10 = *a2;
      unsigned int v11 = *(unsigned __int16 *)(v8 + v10);
      unsigned int v12 = bswap32(v11) >> 16;
      if (*((_BYTE *)this + 16)) {
        LOWORD(v11) = v12;
      }
      *a2 = v10 + 2;
      return (unsigned __int16)v11;
    case 4:
      unint64_t v3 = *(void *)this;
      unint64_t v13 = *((void *)this + 1);
      if (*(void *)this >= v13) {
        return 0LL;
      }
      uint64_t v14 = *a2;
      LODWORD(v3) = *(_DWORD *)(v3 + v14);
      unsigned int v15 = bswap32(v3);
      if (*((_BYTE *)this + 16)) {
        unint64_t v3 = v15;
      }
      else {
        unint64_t v3 = v3;
      }
      unsigned int v7 = v14 + 4;
      goto LABEL_21;
    case 8:
      uint64_t v16 = *(void *)this;
      unint64_t v17 = *((void *)this + 1);
      if (*(void *)this >= v17) {
        return 0LL;
      }
      uint64_t v18 = *a2;
      unint64_t v3 = *(void *)(v16 + v18);
      unint64_t v19 = bswap64(v3);
      if (*((_BYTE *)this + 16)) {
        unint64_t v3 = v19;
      }
      unsigned int v7 = v18 + 8;
LABEL_21:
      *a2 = v7;
      return v3;
    default:
      return v3;
  }

unint64_t CSBinaryDataRef::GetPointer(CSBinaryDataRef *this, unsigned int *a2)
{
  return CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
}

uint64_t CSBinaryDataRef::GetDwarfEHPtr(CSBinaryDataRef *this, unsigned int *a2, int a3, void *a4)
{
  if (a3 == 255) {
    return -1LL;
  }
  switch(((a3 & 0x70u) - 16) >> 4)
  {
    case 0u:
      uint64_t v6 = *a4 + *a2;
      goto LABEL_8;
    case 1u:
      int v7 = 0;
      uint64_t v6 = a4[1];
      break;
    case 2u:
      uint64_t v6 = a4[2];
      goto LABEL_8;
    case 3u:
      uint64_t v6 = 0LL;
LABEL_8:
      int v7 = 1;
      break;
    case 4u:
      unsigned int v8 = *((unsigned __int8 *)this + 17);
      if (!*((_BYTE *)this + 17)) {
        goto LABEL_13;
      }
      int v7 = 0;
      uint64_t v6 = 0LL;
      int v9 = *a2 % v8;
      unsigned int v10 = v8 - v9;
      if (!v9) {
        unsigned int v10 = 0;
      }
      a2 += v10;
      break;
    default:
LABEL_13:
      int v7 = 0;
      uint64_t v6 = 0LL;
      break;
  }

  unint64_t Max64 = 0LL;
  switch(a3 & 0xF)
  {
    case 0:
      unint64_t Max64 = CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
      break;
    case 1:
      unint64_t Max64 = CSBinaryDataRef::Get_ULEB128(this, a2);
      break;
    case 2:
      uint64_t v18 = *(void *)this;
      unint64_t v19 = *((void *)this + 1);
      if (*(void *)this >= v19) {
        goto LABEL_46;
      }
      uint64_t v20 = *a2;
      unsigned int v21 = *(unsigned __int16 *)(v18 + v20);
      unsigned int v22 = bswap32(v21) >> 16;
      if (*((_BYTE *)this + 16)) {
        LOWORD(v21) = v22;
      }
      *a2 = v20 + 2;
      unint64_t Max64 = (unsigned __int16)v21;
      break;
    case 3:
      uint64_t v23 = *(void *)this;
      unint64_t v24 = *((void *)this + 1);
      if (*(void *)this >= v24) {
        goto LABEL_46;
      }
      uint64_t v25 = *a2;
      unsigned int v26 = *(_DWORD *)(v23 + v25);
      unsigned int v27 = bswap32(v26);
      if (*((_BYTE *)this + 16)) {
        unint64_t Max64 = v27;
      }
      else {
        unint64_t Max64 = v26;
      }
      unsigned int v17 = v25 + 4;
      goto LABEL_34;
    case 4:
    case 0xC:
      uint64_t v12 = *(void *)this;
      unint64_t v13 = *((void *)this + 1);
      if (*(void *)this >= v13) {
        goto LABEL_46;
      }
      uint64_t v14 = *a2;
      unint64_t v15 = *(void *)(v12 + v14);
      unint64_t v16 = bswap64(v15);
      if (*((_BYTE *)this + 16)) {
        unint64_t Max64 = v16;
      }
      else {
        unint64_t Max64 = v15;
      }
      unsigned int v17 = v14 + 8;
LABEL_34:
      *a2 = v17;
      break;
    case 9:
      unint64_t Max64 = CSBinaryDataRef::Get_SLEB128(this, a2);
      break;
    case 0xA:
      uint64_t v28 = *(void *)this;
      unint64_t v29 = *((void *)this + 1);
      if (*(void *)this >= v29) {
        goto LABEL_46;
      }
      uint64_t v30 = *a2;
      unsigned int v31 = *(unsigned __int16 *)(v28 + v30);
      unsigned int v32 = bswap32(v31) >> 16;
      if (*((_BYTE *)this + 16)) {
        LOWORD(v31) = v32;
      }
      *a2 = v30 + 2;
      unint64_t Max64 = (__int16)v31;
      break;
    case 0xB:
      uint64_t v33 = *(void *)this;
      unint64_t v34 = *((void *)this + 1);
      if (*(void *)this >= v34 || (uint64_t v35 = *a2, (v34 - v33) <= (unint64_t)(v35 + 3)))
      {
LABEL_46:
        unint64_t Max64 = 0LL;
      }

      else
      {
        signed int v36 = *(_DWORD *)(v33 + v35);
        unsigned int v37 = bswap32(v36);
        if (*((_BYTE *)this + 16)) {
          signed int v36 = v37;
        }
        *a2 = v35 + 4;
        unint64_t Max64 = v36;
      }

      break;
    default:
      break;
  }

  if (v7)
  {
    unint64_t v38 = *((unsigned __int8 *)this + 17);
    if (v38 <= 7)
    {
      uint64_t v39 = 1LL << (8 * v38 - 1);
      if ((v39 & Max64) != 0) {
        uint64_t v40 = -v39;
      }
      else {
        uint64_t v40 = 0LL;
      }
      Max64 |= v40;
    }
  }

  return Max64 + v6;
}

uint64_t CSBinaryDataRef::Get_ULEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if (*(void *)this >= v2) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  int v5 = 0;
  uint64_t result = 0LL;
  uint64_t v7 = *a2;
  uint64_t v8 = v3 + v7;
  do
  {
    if (v8 + v4 >= v2) {
      break;
    }
    char v9 = *(_BYTE *)(v8 + v4);
    result |= (v9 & 0x7F) << v5;
    v5 += 7;
    ++v4;
  }

  while (v9 < 0);
  *a2 = v4 + v7;
  return result;
}

uint64_t CSBinaryDataRef::Get_SLEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this >= v3) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = v2 + v4;
  if (v2 + v4 >= v3)
  {
    int v11 = 0;
    uint64_t v7 = 0LL;
    int v10 = 0;
    BOOL v14 = 1;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    int v8 = 0;
    int v9 = v4 + v2;
    int v10 = v3 - (v4 + v2);
    int v11 = -7 * v9 - v3 + 8 * v3;
    while (1)
    {
      int v12 = *(char *)(v5 + v6);
      v7 |= (v12 & 0x7F) << v8;
      if ((v12 & 0x80000000) == 0) {
        break;
      }
      ++v6;
      v8 += 7;
      if (v5 + v6 >= v3) {
        goto LABEL_10;
      }
    }

    int v10 = v6 + 1;
    int v11 = v8 + 7;
LABEL_10:
    BOOL v14 = (v12 & 0x40) == 0;
  }

  if (v11 > 31) {
    BOOL v14 = 1;
  }
  uint64_t v15 = -1LL << v11;
  if (v14) {
    uint64_t v15 = 0LL;
  }
  uint64_t result = v15 | v7;
  *a2 = v10 + v4;
  return result;
}

uint64_t CSBinaryDataRef::GetData(CSBinaryDataRef *this, unsigned int *a2, unsigned int a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *((void *)this + 1);
  if (*(void *)this >= v4) {
    return 0LL;
  }
  uint64_t v5 = *a2;
  uint64_t result = v3 + v5;
  *a2 = v5 + a3;
  return result;
}

void CSThreadArm::CSThreadArm(CSThreadArm *this)
{
  *((_WORD *)this + 4) = 0;
  *((void *)this + 2) = 0LL;
  *(void *)this = off_189DFA4A0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose((const void *)(v11 - 88), 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16_Block_object_dispose((const void *)(v11 - 88), 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 24_Block_object_dispose((const void *)(v11 - 88), 8) = 0u;
  *((void *)this + 37) = 0LL;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
}

uint64_t CSThreadArm::GetRARegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9)) {
    return 30LL;
  }
  else {
    return 14LL;
  }
}

uint64_t CSThreadArm::ConvertRegisterNumberToRegisterIndex(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 9))
  {
    return 0xFFFFFFFFLL;
  }

  return a2;
}

uint64_t CSThreadArm::RegisterNameToRegisterIndex(CSThreadArm *this, const char *a2, int a3)
{
  if (!a2 || !*a2) {
    return 0xFFFFFFFFLL;
  }
  char v4 = a3;
  uint64_t v5 = 0LL;
  if (a3) {
    uint64_t v6 = g64BitRegNames_arm;
  }
  else {
    uint64_t v6 = g32BitRegNames_arm;
  }
  if (a3) {
    uint64_t v7 = 34LL;
  }
  else {
    uint64_t v7 = 17LL;
  }
  while (1)
  {
    int v8 = v6[v5];
    if (v8)
    {
      if (!strcasecmp(a2, v8)) {
        break;
      }
    }

    if (v7 == ++v5)
    {
      if ((v4 & 1) != 0) {
        return 0xFFFFFFFFLL;
      }
      if (!strcasecmp(a2, "fp")) {
        return 7LL;
      }
      if (!strcasecmp(a2, "r13")) {
        return 13LL;
      }
      if (!strcasecmp(a2, "r14")) {
        return 14LL;
      }
      if (!strcasecmp(a2, "r15")) {
        return 15LL;
      }
      if (!strcasecmp(a2, "ip")) {
        return 12LL;
      }
      if (strcasecmp(a2, "psr")) {
        return 0xFFFFFFFFLL;
      }
      return 16LL;
    }
  }

  return v5;
}

uint64_t CSThreadArm::NumRegisters(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9)) {
    return 34LL;
  }
  else {
    return 17LL;
  }
}

uint64_t CSThreadArm::GetFPRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9)) {
    return 29LL;
  }
  else {
    return 11LL;
  }
}

uint64_t CSThreadArm::GetPCRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9)) {
    return 32LL;
  }
  else {
    return 15LL;
  }
}

uint64_t CSThreadArm::ThreadGetState(int8x8_t *this, thread_act_t a2, int a3)
{
  this[1].i8[1] = a3;
  if (a3)
  {
    mach_msg_type_number_t old_stateCnt = 68;
    uint64_t state = thread_get_state(a2, 6, (thread_state_t)&old_state, &old_stateCnt);
    if (!(_DWORD)state) {
      CSThreadArm::SetState(this, &old_state);
    }
  }

  else
  {
    mach_msg_type_number_t old_stateCnt = 17;
    uint64_t state = thread_get_state(a2, 1, (thread_state_t)&old_state, &old_stateCnt);
    if (!(_DWORD)state) {
      CSThreadArm::SetState((CSThreadArm *)this, (const __darwin_arm_thread_state *)&old_state);
    }
  }

  return state;
}

int8x8_t CSThreadArm::SetState(int8x8_t *this, const __darwin_arm_thread_state64 *a2)
{
  this[1].i8[1] = 1;
  memcpy(&this[3], a2, 0x110uLL);
  int v9 = this + 37;
  int v10 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v9, 0x22uLL);
  int64x2_t v3 = (int64x2_t)xmmword_1860A43B0;
  *(int8x8_t *)v4.i8 = this[37];
  uint64_t v5 = 34LL;
  uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(1uLL);
  int64x2_t v7 = vdupq_n_s64(2uLL);
  do
  {
    int8x16_t v4 = vorrq_s8(v4, (int8x16_t)vshlq_u64(v6, (uint64x2_t)v3));
    int64x2_t v3 = vaddq_s64(v3, v7);
    v5 -= 2LL;
  }

  while (v5);
  int8x8_t result = vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  this[37] = result;
  this[2] = (int8x8_t)8LL;
  return result;
}

int8x8_t CSThreadArm::SetState(CSThreadArm *this, const __darwin_arm_thread_state *a2)
{
  *((_BYTE *)this + 9) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2->__r;
  __int128 v3 = *(_OWORD *)&a2->__r[4];
  __int128 v4 = *(_OWORD *)&a2->__r[8];
  __int128 v5 = *(_OWORD *)&a2->__r[12];
  *((_DWORD *)this + 22) = a2->__cpsr;
  *(_OWORD *)((char *)this + 72) = v5;
  *(_OWORD *)((char *)this + 56) = v4;
  *(_OWORD *)((char *)this + 40) = v3;
  uint64x2_t v6 = (uint64_t *)((char *)this + 296);
  unint64_t v16 = (char *)this + 296;
  int v17 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v16, 0x22uLL);
  int64x2_t v7 = (int64x2_t)xmmword_1860A43B0;
  v8.i64[0] = *v6;
  uint64_t v9 = 18LL;
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(1uLL);
  int64x2_t v11 = vdupq_n_s64(2uLL);
  do
  {
    int8x16_t v12 = v8;
    uint64x2_t v13 = (uint64x2_t)v7;
    int8x16_t v8 = vorrq_s8(v8, (int8x16_t)vshlq_u64(v10, (uint64x2_t)v7));
    int64x2_t v7 = vaddq_s64(v7, v11);
    v9 -= 2LL;
  }

  while (v9);
  int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x11uLL), v13), v8, v12);
  int8x8_t result = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  *((int8x8_t *)this + 37) = result;
  *((void *)this + 2) = 4LL;
  return result;
}

uint64_t CSThreadArm::GetSPRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9)) {
    return 31LL;
  }
  else {
    return 13LL;
  }
}

unint64_t CSThreadArm::FPAppearsValidForFPBackchain(CSThreadArm *this, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThreadArm *))(*(void *)this + 120LL))(this);
  unint64_t result = (*(uint64_t (**)(CSThreadArm *, uint64_t, void, void))(*(void *)this + 160LL))( this,  v4,  0LL,  0LL);
  if (result)
  {
    unint64_t v6 = result;
    uint64_t v7 = (*(uint64_t (**)(CSThreadArm *))(*(void *)this + 128LL))(this);
    unint64_t v8 = (*(uint64_t (**)(CSThreadArm *, uint64_t, void, void))(*(void *)this + 160LL))( this,  v7,  0LL,  0LL);
    if ((a2 & 1) == 0 && v6 < v8) {
      return 0LL;
    }
    if (*((_BYTE *)this + 9))
    {
      if ((v6 & 7) != 0) {
        return 0LL;
      }
    }

    else if ((v6 & 3) != 0)
    {
      return 0LL;
    }

    return 1LL;
  }

  return result;
}

uint64_t CSThread::GetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 120LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160LL))(this, v4, a2, 0LL);
}

uint64_t CSThread::GetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 128LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160LL))(this, v4, a2, 0LL);
}

uint64_t CSThreadArm::GetPCRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9)) {
    return 32LL;
  }
  else {
    return 15LL;
  }
}

uint64_t CSThreadArm::GetFPRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 8)) {
    return 5LL;
  }
  if (*((_BYTE *)this + 9)) {
    return 29LL;
  }
  return 7LL;
}

uint64_t CSThreadArm::GetSPRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 8)) {
    return 4LL;
  }
  if (*((_BYTE *)this + 9)) {
    return 31LL;
  }
  return 13LL;
}

uint64_t CSThreadArm::GetLRRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9)) {
    return 30LL;
  }
  else {
    return 14LL;
  }
}

char *CSThreadArm::GetRegisterNameByIndex(CSThreadArm *this, unsigned int a2)
{
  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21)
    {
      uint64_t v2 = g64BitRegNames_arm;
      return v2[a2];
    }
  }

  else if (a2 <= 0x10)
  {
    uint64_t v2 = g32BitRegNames_arm;
    return v2[a2];
  }

  return 0LL;
}

uint64_t CSThreadArm::GetRegisterValueByIndex(CSThreadArm *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  unsigned int v6 = a2;
  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21
      && (*(unsigned int (**)(CSThreadArm *, uint64_t))(*(void *)this + 176LL))(this, a2))
    {
      switch(v6)
      {
        case 0x1Du:
          a3 = *((void *)this + 32);
          break;
        case 0x1Eu:
          a3 = *((void *)this + 33);
          break;
        case 0x1Fu:
          a3 = *((void *)this + 34);
          break;
        case 0x20u:
          a3 = *((void *)this + 35);
          break;
        case 0x21u:
          a3 = *((unsigned int *)this + 72);
          break;
        default:
          a3 = *((void *)this + v6 + 3);
          break;
      }

uint64_t CSThreadArm::SetRegisterValueByIndex(CSThreadArm *this, unsigned int a2, uint64_t a3)
{
  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21)
    {
      switch(a2)
      {
        case 0x1Du:
          *((void *)this + 32) = a3;
          break;
        case 0x1Eu:
          *((void *)this + 33) = a3;
          break;
        case 0x1Fu:
          *((void *)this + 34) = a3;
          break;
        case 0x20u:
          *((void *)this + 35) = a3;
          break;
        case 0x21u:
          *((_DWORD *)this + 72) = a3;
          break;
        default:
          *((void *)this + a2 + 3) = a3;
          break;
      }

      goto LABEL_13;
    }
  }

  else if (a2 <= 0x10)
  {
    *((_DWORD *)this + a2 + 6) = a3;
LABEL_13:
    uint64_t v3 = 1LL;
    goto LABEL_14;
  }

  uint64_t v3 = 0LL;
LABEL_14:
  (*(void (**)(CSThreadArm *))(*(void *)this + 184LL))(this);
  return v3;
}

uint64_t CSThreadArm::RegisterIsPreservedByABI(_BYTE *a1)
{
  if (a1[9]) {
    return 0LL;
  }
  unsigned int v1 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 96LL))(a1);
  if (v1 > 0xC) {
    return 0LL;
  }
  else {
    return (0x1DF0u >> v1) & 1;
  }
}

void CSThreadArm::InvalidateAllRegisters(CSThreadArm *this)
{
  unsigned int v1 = (char *)this + 296;
  int v2 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v1, 0x22uLL);
}

uint64_t CSThreadArm::GetRegisterIsValidByIndex(CSThreadArm *this, unsigned int a2)
{
  if (a2 > 0x21) {
    return 0LL;
  }
  else {
    return (*((void *)this + 37) >> a2) & 1LL;
  }
}

uint64_t CSThreadArm::SetRegisterIsValidByIndex(uint64_t this, unsigned int a2, int a3)
{
  if (a3)
  {
    if (a2 >= 0x22) {
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    }
    uint64_t v3 = *(void *)(this + 296) | (1LL << a2);
  }

  else
  {
    if (a2 >= 0x22) {
      std::__throw_out_of_range[abi:ne180100]("bitset reset argument out of range");
    }
    uint64_t v3 = *(void *)(this + 296) & ~(1LL << a2);
  }

  *(void *)(this + 296) = v3;
  return this;
}

uint64_t CSThread::GetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160LL))(a1, v8, a4, a5);
}

uint64_t CSThread::SetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168LL))(a1, v6, a4);
}

uint64_t CSThread::SetRegisterIsValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 184LL))(a1, v6, a4);
}

uint64_t CSThread::GetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 112LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160LL))(this, v4, a2, 0LL);
}

uint64_t CSThread::GetLR(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 136LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, void))(*(void *)this + 160LL))(this, v4, a2, 0LL);
}

uint64_t CSThread::SetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 112LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168LL))(this, v4, a2);
}

uint64_t CSThread::SetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 120LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168LL))(this, v4, a2);
}

uint64_t CSThread::SetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(CSThread *))(*(void *)this + 128LL))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(void *)this + 168LL))(this, v4, a2);
}

void *CSThreadArm::assign(CSThreadArm *this, const CSThread *a2)
{
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((void *)this + 2) = *((void *)a2 + 2);
  unint64_t result = memcpy((char *)this + 24, (char *)a2 + 24, 0x110uLL);
  *((void *)this + 37) = *((void *)a2 + 37);
  return result;
}

uint64_t CSThreadArm::UnwindThroughSigtramp()
{
  return 0LL;
}

char **CSCallFrameInfo::FindCallFrameInfoForBinary@<X0>( char **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *this;
  uint64_t v4 = this[1];
  if (*this == v4) {
    goto LABEL_13;
  }
  unint64_t v5 = (v4 - v3) >> 4;
  do
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = &v3[16 * (v5 >> 1)];
    uint64_t v9 = *(void *)v7;
    uint64_t v8 = v7 + 16;
    v5 += ~(v5 >> 1);
    if (*(void *)(v9 + 32) + *(void *)(v9 + 24) <= a2) {
      uint64_t v3 = v8;
    }
    else {
      unint64_t v5 = v6;
    }
  }

  while (v5);
  if (v3 == v4 || (uint64_t v10 = *(void *)v3, a2 - *(void *)(*(void *)v3 + 24LL) >= *(void *)(*(void *)v3 + 32LL)))
  {
LABEL_13:
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    uint64_t v11 = *((void *)v3 + 1);
    *a3 = v10;
    a3[1] = v11;
    if (v11)
    {
      int8x16_t v12 = (unint64_t *)(v11 + 8);
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }

  return this;
}

uint64_t CSCallFrameInfo::UnwindThreadState(char **a1, CSThread *a2, uint64_t a3, int a4, CSThread *a5)
{
  uint64_t v5 = 0LL;
  if (a2 && a5)
  {
    (*(void (**)(CSThread *))(*(void *)a5 + 16LL))(a5);
    uint64_t PC = CSThread::GetPC(a2, -1LL);
    if (PC == -1)
    {
      return 0LL;
    }

    else
    {
      if (PC) {
        int8x16_t v12 = (void *)(PC - (a4 ^ 1u));
      }
      else {
        int8x16_t v12 = 0LL;
      }
      CSCallFrameInfo::FindCallFrameInfoForBinary(a1, (unint64_t)v12, v17);
      if (*(void *)v17) {
        uint64_t v5 = CSCallFrameInfoForBinary::UnwindThreadState(*(CSCallFrameInfoForBinary **)v17, a2, a3, a5, v12);
      }
      else {
        uint64_t v5 = 0LL;
      }
      unint64_t v13 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }

  return v5;
}

void sub_18606E26C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CSCallFrameInfo::ParseCFIForTask(CSCallFrameInfo *this)
{
  uint64_t v1 = MEMORY[0x1895F8858](this);
  uint64_t v20 = *MEMORY[0x1895F89C0];
  CSCppMachTask::CSCppMachTask((CSCppMachTask *)v12, v2, 0);
  if (v16)
  {
    uint64_t v9 = off_189DFA730;
    uint64_t v10 = v1;
    int v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator( (uint64_t)v6,  (TMachOHeaderIterator *)v13,  v15,  (uint64_t)v17,  v18,  v19,  0,  (uint64_t)&v9);
  }

  else
  {
    uint64_t v9 = off_189DFA7D0;
    uint64_t v10 = v1;
    int v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator( (uint64_t)v6,  (TMachOHeaderIterator *)v13,  v15,  (uint64_t)v17,  v18,  v19,  0,  (uint64_t)&v9);
  }

  if (v8 < 0) {
    operator delete(__p);
  }
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v6);
  uint64_t v3 = *(__int128 **)(v1 + 8);
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - *(void *)v1) >> 4);
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>( *(__int128 **)v1,  v3,  v5,  1);
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v12);
}

void sub_18606E3B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>( __int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  char v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (char *)a2 - (char *)v8;
    uint64_t v10 = a2 - v8;
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        uint64_t v50 = *((void *)a2 - 2);
        uint64_t v51 = *(void *)a1;
        if (*(void *)(v50 + 24) < *(void *)(*(void *)a1 + 24LL))
        {
          *(void *)a1 = v50;
          *((void *)a2 - 2) = v51;
          uint64_t v52 = *((void *)a1 + 1);
          *((void *)a1 + 1) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v52;
        }

        return;
      case 3LL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a2 - 2);
        return;
      case 4LL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a1 + 4,  (void *)a2 - 2);
        return;
      case 5LL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a1 + 4,  (void *)a1 + 6);
        uint64_t v53 = *((void *)a2 - 2);
        uint64_t v54 = *((void *)a1 + 6);
        if (*(void *)(v53 + 24) < *(void *)(v54 + 24))
        {
          *((void *)a1 + 6) = v53;
          *((void *)a2 - 2) = v54;
          uint64_t v55 = *((void *)a1 + 7);
          *((void *)a1 + 7) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v55;
          uint64_t v56 = *((void *)a1 + 6);
          unint64_t v57 = *(void *)(v56 + 24);
          uint64_t v58 = *((void *)a1 + 4);
          if (v57 < *(void *)(v58 + 24))
          {
            uint64_t v59 = *((void *)a1 + 5);
            uint64_t v60 = *((void *)a1 + 7);
            *((void *)a1 + 4) = v56;
            *((void *)a1 + 5) = v60;
            *((void *)a1 + 6) = v58;
            *((void *)a1 + 7) = v59;
            uint64_t v61 = *((void *)a1 + 2);
            if (v57 < *(void *)(v61 + 24))
            {
              uint64_t v62 = *((void *)a1 + 3);
              *((void *)a1 + 2) = v56;
              *((void *)a1 + 3) = v60;
              *((void *)a1 + 4) = v61;
              *((void *)a1 + 5) = v62;
              uint64_t v63 = *(void *)a1;
              if (v57 < *(void *)(*(void *)a1 + 24LL))
              {
                uint64_t v64 = *((void *)a1 + 1);
                *(void *)a1 = v56;
                *((void *)a1 + 1) = v60;
                *((void *)a1 + 2) = v63;
                *((void *)a1 + 3) = v64;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              uint64_t v65 = a1 + 1;
              if (a1 + 1 != a2)
              {
                uint64_t v66 = 0LL;
                uint64_t v67 = a1;
                do
                {
                  uint64_t v68 = v65;
                  uint64_t v69 = *((void *)v67 + 2);
                  if (*(void *)(v69 + 24) < *(void *)(*(void *)v67 + 24LL))
                  {
                    uint64_t v70 = *((void *)v67 + 3);
                    *(void *)&__int128 v116 = v69;
                    *((void *)&v116 + 1) = v70;
                    *uint64_t v68 = 0LL;
                    v68[1] = 0LL;
                    uint64_t v71 = v66;
                    while (1)
                    {
                      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]( (uint64_t)a1 + v71 + 16,  (__int128 *)((char *)a1 + v71));
                      if (!v71) {
                        break;
                      }
                      unint64_t v72 = *(void *)(*(void *)((char *)a1 + v71 - 16) + 24LL);
                      v71 -= 16LL;
                      if (*(void *)(v116 + 24) >= v72)
                      {
                        uint64_t v73 = (uint64_t)a1 + v71 + 16;
                        goto LABEL_83;
                      }
                    }

                    uint64_t v73 = (uint64_t)a1;
LABEL_83:
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v73, &v116);
                    uint64_t v74 = (std::__shared_weak_count *)*((void *)&v116 + 1);
                    if (*((void *)&v116 + 1))
                    {
                      uint64_t v75 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
                      do
                        unint64_t v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                  }

                  uint64_t v65 = v68 + 2;
                  v66 += 16LL;
                  uint64_t v67 = (__int128 *)v68;
                }

                while (v68 + 2 != (void *)a2);
              }
            }
          }

          else if (a1 != a2)
          {
            uint64_t v108 = a1 + 1;
            while (v108 != a2)
            {
              uint64_t v109 = v108;
              if (*(void *)(*((void *)a1 + 2) + 24LL) < *(void *)(*(void *)a1 + 24LL))
              {
                uint64_t v110 = *((void *)a1 + 3);
                *(void *)&__int128 v116 = *((void *)a1 + 2);
                *((void *)&v116 + 1) = v110;
                *(void *)uint64_t v108 = 0LL;
                *((void *)v108 + 1) = 0LL;
                do
                {
                  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a1 + 1), a1);
                  uint64_t v111 = *((void *)a1-- - 2);
                }

                while (*(void *)(v116 + 24) < *(void *)(v111 + 24));
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v116);
                unint64_t v112 = (std::__shared_weak_count *)*((void *)&v116 + 1);
                if (*((void *)&v116 + 1))
                {
                  unint64_t v113 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
                  do
                    unint64_t v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
              }

              uint64_t v108 = v109 + 1;
              a1 = v109;
            }
          }

          return;
        }

        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v77 = (unint64_t)(v10 - 2) >> 1;
            int64_t v78 = v77;
            do
            {
              int64_t v79 = v78;
              if (v77 >= v78)
              {
                uint64_t v80 = (2 * v78) | 1;
                uint64_t v81 = &a1[v80];
                if (2 * v79 + 2 >= v10)
                {
                  uint64_t v82 = *(void *)v81;
                }

                else
                {
                  uint64_t v82 = *(void *)v81;
                  if (*(void *)(*(void *)v81 + 24LL) < *(void *)(*((void *)v81 + 2) + 24LL))
                  {
                    uint64_t v82 = *((void *)v81++ + 2);
                    uint64_t v80 = 2 * v79 + 2;
                  }
                }

                uint64_t v83 = &a1[v79];
                uint64_t v84 = *(void *)v83;
                if (*(void *)(v82 + 24) >= *(void *)(*(void *)v83 + 24LL))
                {
                  *(void *)&__int128 v116 = *(void *)v83;
                  *((void *)&v116 + 1) = *((void *)&a1[v79] + 1);
                  *(void *)uint64_t v83 = 0LL;
                  *((void *)v83 + 1) = 0LL;
                  do
                  {
                    uint64_t v85 = (uint64_t)v81;
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v83, v81);
                    if (v77 < v80) {
                      break;
                    }
                    uint64_t v81 = &a1[(2 * v80) | 1];
                    if (2 * v80 + 2 >= v10)
                    {
                      uint64_t v86 = *(void *)v81;
                      uint64_t v80 = (2 * v80) | 1;
                    }

                    else
                    {
                      uint64_t v86 = *(void *)v81;
                      if (*(void *)(*(void *)v81 + 24LL) >= *(void *)(*((void *)v81 + 2) + 24LL))
                      {
                        uint64_t v80 = (2 * v80) | 1;
                      }

                      else
                      {
                        uint64_t v86 = *((void *)v81++ + 2);
                        uint64_t v80 = 2 * v80 + 2;
                      }
                    }

                    uint64_t v83 = (__int128 *)v85;
                  }

                  while (*(void *)(v86 + 24) >= *(void *)(v84 + 24));
                  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v85, &v116);
                  int v87 = (std::__shared_weak_count *)*((void *)&v116 + 1);
                  if (*((void *)&v116 + 1))
                  {
                    uint64_t v88 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
                    do
                      unint64_t v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                }
              }

              int64_t v78 = v79 - 1;
            }

            while (v79);
            uint64_t v90 = (unint64_t)v9 >> 4;
            do
            {
              uint64_t v91 = 0LL;
              __int128 v115 = *a1;
              *(void *)a1 = 0LL;
              *((void *)a1 + 1) = 0LL;
              uint64_t v92 = (uint64_t)a1;
              do
              {
                uint64_t v93 = (__int128 *)(v92 + 16 * v91 + 16);
                uint64_t v94 = (2 * v91) | 1;
                uint64_t v95 = 2 * v91 + 2;
                if (v95 < v90 && *(void *)(*(void *)v93 + 24LL) < *(void *)(*((void *)v93 + 2) + 24LL))
                {
                  ++v93;
                  uint64_t v94 = v95;
                }

                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v92, v93);
                uint64_t v92 = (uint64_t)v93;
                uint64_t v91 = v94;
              }

              while (v94 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              if (v93 == --a2)
              {
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, &v115);
              }

              else
              {
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, a2);
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a2, &v115);
                uint64_t v96 = (char *)v93 - (char *)a1 + 16;
                if (v96 >= 17)
                {
                  unint64_t v97 = (((unint64_t)v96 >> 4) - 2) >> 1;
                  uint64_t v98 = &a1[v97];
                  uint64_t v99 = *(void *)v93;
                  if (*(void *)(*(void *)v98 + 24LL) < *(void *)(*(void *)v93 + 24LL))
                  {
                    __int128 v116 = *v93;
                    *(void *)uint64_t v93 = 0LL;
                    *((void *)v93 + 1) = 0LL;
                    do
                    {
                      uint64_t v100 = (uint64_t)v98;
                      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, v98);
                      if (!v97) {
                        break;
                      }
                      unint64_t v97 = (v97 - 1) >> 1;
                      uint64_t v98 = &a1[v97];
                      uint64_t v93 = (__int128 *)v100;
                    }

                    while (*(void *)(*(void *)v98 + 24LL) < *(void *)(v99 + 24));
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v100, &v116);
                    uint64_t v101 = (std::__shared_weak_count *)*((void *)&v116 + 1);
                    if (*((void *)&v116 + 1))
                    {
                      uint64_t v102 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
                      do
                        unint64_t v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                  }
                }
              }

              uint64_t v104 = (std::__shared_weak_count *)*((void *)&v115 + 1);
              if (*((void *)&v115 + 1))
              {
                uint64_t v105 = (unint64_t *)(*((void *)&v115 + 1) + 8LL);
                do
                  unint64_t v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }

            while (v90-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        int8x16_t v12 = &a1[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( v12,  a1,  (void *)a2 - 2);
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  v12,  (void *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( (void *)a1 + 2,  (void *)v12 - 2,  (void *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( (void *)a1 + 4,  &a1[v11 + 1],  (void *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( (void *)v12 - 2,  v12,  &a1[v11 + 1]);
          __int128 v13 = *a1;
          *a1 = *v12;
          *int8x16_t v12 = v13;
        }

        --a3;
        uint64_t v14 = *(void *)a1;
        if ((a4 & 1) == 0 && *(void *)(*((void *)a1 - 2) + 24LL) >= *(void *)(v14 + 24))
        {
          uint64_t v35 = *((void *)a1 + 1);
          *(void *)&__int128 v116 = *(void *)a1;
          *((void *)&v116 + 1) = v35;
          *(void *)a1 = 0LL;
          *((void *)a1 + 1) = 0LL;
          unint64_t v36 = *(void *)(v14 + 24);
          if (v36 >= *(void *)(*((void *)a2 - 2) + 24LL))
          {
            unint64_t v38 = a1 + 1;
            do
            {
              char v8 = v38;
              if (v38 >= a2) {
                break;
              }
              ++v38;
            }

            while (v36 >= *(void *)(*(void *)v8 + 24LL));
          }

          else
          {
            char v8 = a1;
            do
              uint64_t v37 = *((void *)v8++ + 2);
            while (v36 >= *(void *)(v37 + 24));
          }

          uint64_t v39 = a2;
          if (v8 < a2)
          {
            uint64_t v39 = a2;
            do
              uint64_t v40 = *((void *)v39-- - 2);
            while (v36 < *(void *)(v40 + 24));
          }

          if (v8 < v39)
          {
            uint64_t v41 = *(void *)v8;
            uint64_t v42 = *(void *)v39;
            do
            {
              *(void *)char v8 = v42;
              *(void *)uint64_t v39 = v41;
              uint64_t v43 = *((void *)v8 + 1);
              *((void *)v8 + 1) = *((void *)v39 + 1);
              *((void *)v39 + 1) = v43;
              unint64_t v44 = *(void *)(v116 + 24);
              do
              {
                uint64_t v45 = *((void *)v8++ + 2);
                uint64_t v41 = v45;
              }

              while (v44 >= *(void *)(v45 + 24));
              do
              {
                uint64_t v46 = *((void *)v39-- - 2);
                uint64_t v42 = v46;
              }

              while (v44 < *(void *)(v46 + 24));
            }

            while (v8 < v39);
          }

          if (v8 - 1 != a1) {
            std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a1, v8 - 1);
          }
          std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(v8 - 1), &v116);
          unsigned int v47 = (std::__shared_weak_count *)*((void *)&v116 + 1);
          if (*((void *)&v116 + 1))
          {
            int v48 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
            do
              unint64_t v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }

          a4 = 0;
          continue;
        }

        uint64_t v15 = 0LL;
        uint64_t v16 = *((void *)a1 + 1);
        *(void *)&__int128 v116 = *(void *)a1;
        *((void *)&v116 + 1) = v16;
        *(void *)a1 = 0LL;
        *((void *)a1 + 1) = 0LL;
        unint64_t v17 = *(void *)(v14 + 24);
        do
          uint64_t v18 = *(void *)&a1[++v15];
        while (*(void *)(v18 + 24) < v17);
        uint64_t v19 = &a1[v15];
        uint64_t v20 = a2;
        if (v15 == 1)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            uint64_t v22 = *((void *)v20-- - 2);
          }

          while (*(void *)(v22 + 24) >= v17);
        }

        else
        {
          do
            uint64_t v21 = *((void *)v20-- - 2);
          while (*(void *)(v21 + 24) >= v17);
        }

        if (v19 >= v20)
        {
          uint64_t v30 = (uint64_t)(v19 - 1);
        }

        else
        {
          uint64_t v23 = *(void *)v20;
          unint64_t v24 = &a1[v15];
          uint64_t v25 = v20;
          do
          {
            *(void *)unint64_t v24 = v23;
            *(void *)uint64_t v25 = v18;
            uint64_t v26 = *((void *)v24 + 1);
            *((void *)v24 + 1) = *((void *)v25 + 1);
            *((void *)v25 + 1) = v26;
            unint64_t v27 = *(void *)(v116 + 24);
            do
            {
              uint64_t v28 = *((void *)v24++ + 2);
              uint64_t v18 = v28;
            }

            while (*(void *)(v28 + 24) < v27);
            do
            {
              uint64_t v29 = *((void *)v25-- - 2);
              uint64_t v23 = v29;
            }

            while (*(void *)(v29 + 24) >= v27);
          }

          while (v24 < v25);
          uint64_t v30 = (uint64_t)(v24 - 1);
        }

        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v30, &v116);
        unsigned int v31 = (std::__shared_weak_count *)*((void *)&v116 + 1);
        if (*((void *)&v116 + 1))
        {
          unsigned int v32 = (unint64_t *)(*((void *)&v116 + 1) + 8LL);
          do
            unint64_t v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }

        if (v19 < v20)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>( a1,  v30,  a3,  a4 & 1);
          a4 = 0;
          char v8 = (__int128 *)(v30 + 16);
          continue;
        }

        BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( (char *)a1,  (char *)v30);
        char v8 = (__int128 *)(v30 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( (char *)(v30 + 16),  (char *)a2))
        {
          if (v34) {
            continue;
          }
          goto LABEL_36;
        }

        a2 = (__int128 *)v30;
        if (!v34) {
          goto LABEL_1;
        }
        return;
    }
  }

void *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( void *result, void *a2, void *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*a2 + 24LL);
  uint64_t v5 = *result;
  uint64_t v6 = *a3;
  unint64_t v7 = *(void *)(*a3 + 24LL);
  if (v4 < *(void *)(*result + 24LL))
  {
    if (v7 >= v4)
    {
      void *result = v3;
      *a2 = v5;
      uint64_t v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      uint64_t v13 = *a2;
      if (*(void *)(*a3 + 24LL) >= *(void *)(*a2 + 24LL)) {
        return result;
      }
      *a2 = *a3;
      *a3 = v13;
      char v8 = a3 + 1;
      unint64_t result = a2 + 1;
    }

    else
    {
      *result++ = v6;
      *a3 = v5;
      char v8 = a3 + 1;
    }

    uint64_t v9 = v8;
    goto LABEL_10;
  }

  if (v7 < v4)
  {
    *a2 = v6;
    *a3 = v3;
    uint64_t v9 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = *result;
    if (*(void *)(*a2 + 24LL) < *(void *)(*result + 24LL))
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      uint64_t v14 = *result;
      void *result = *v9;
      *uint64_t v9 = v14;
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v6 = *((void *)a2 - 2);
      uint64_t v7 = *(void *)a1;
      if (*(void *)(v6 + 24) < *(void *)(*(void *)a1 + 24LL))
      {
        *(void *)a1 = v6;
        *((void *)a2 - 2) = v7;
        uint64_t v8 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a2 - 2);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a1 + 4,  (void *)a2 - 2);
      return 1LL;
    case 5LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a1 + 4,  (void *)a1 + 6);
      uint64_t v20 = *((void *)a2 - 2);
      uint64_t v21 = *((void *)a1 + 6);
      if (*(void *)(v20 + 24) < *(void *)(v21 + 24))
      {
        *((void *)a1 + 6) = v20;
        *((void *)a2 - 2) = v21;
        uint64_t v22 = *((void *)a1 + 7);
        *((void *)a1 + 7) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v22;
        uint64_t v23 = *((void *)a1 + 6);
        unint64_t v24 = *(void *)(v23 + 24);
        uint64_t v25 = *((void *)a1 + 4);
        if (v24 < *(void *)(v25 + 24))
        {
          uint64_t v26 = *((void *)a1 + 5);
          uint64_t v27 = *((void *)a1 + 7);
          *((void *)a1 + 4) = v23;
          *((void *)a1 + 5) = v27;
          *((void *)a1 + 6) = v25;
          *((void *)a1 + 7) = v26;
          uint64_t v28 = *((void *)a1 + 2);
          if (v24 < *(void *)(v28 + 24))
          {
            uint64_t v29 = *((void *)a1 + 3);
            *((void *)a1 + 2) = v23;
            *((void *)a1 + 3) = v27;
            *((void *)a1 + 4) = v28;
            *((void *)a1 + 5) = v29;
            uint64_t v30 = *(void *)a1;
            if (v24 < *(void *)(*(void *)a1 + 24LL))
            {
              uint64_t v31 = *((void *)a1 + 1);
              *(void *)a1 = v23;
              *((void *)a1 + 1) = v27;
              *((void *)a1 + 2) = v30;
              *((void *)a1 + 3) = v31;
            }
          }
        }
      }

      return 1LL;
    default:
      uint64_t v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  (void *)a1 + 2,  (void *)a1 + 4);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    if (*(void *)(*(void *)v10 + 24LL) < *(void *)(*(void *)v9 + 24LL))
    {
      uint64_t v13 = *((void *)v10 + 1);
      *(void *)&__int128 v32 = *(void *)v10;
      *((void *)&v32 + 1) = v13;
      *(void *)uint64_t v10 = 0LL;
      *((void *)v10 + 1) = 0LL;
      uint64_t v14 = v11;
      while (1)
      {
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]( (uint64_t)&a1[v14 + 48],  (__int128 *)&a1[v14 + 32]);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(*(void *)&a1[v14 + 16] + 24LL);
        v14 -= 16LL;
        if (*(void *)(v32 + 24) >= v15)
        {
          uint64_t v16 = (uint64_t)&a1[v14 + 48];
          goto LABEL_13;
        }
      }

      uint64_t v16 = (uint64_t)a1;
LABEL_13:
      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v16, &v32);
      unint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
      if (*((void *)&v32 + 1))
      {
        uint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }

    uint64_t v9 = v10;
    v11 += 16LL;
    v10 += 16;
    if (v10 == a2) {
      return 1LL;
    }
  }

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( void *a1, void *a2, void *a3, void *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>( a1,  a2,  a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 24LL) < *(void *)(*a3 + 24LL))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = *a2;
    if (*(void *)(*a3 + 24LL) < *(void *)(*a2 + 24LL))
    {
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t v13 = *a1;
      if (*(void *)(*a2 + 24LL) < *(void *)(*a1 + 24LL))
      {
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }

  return result;
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header( uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    uint64_t v5 = "NULL";
    if (a2) {
      uint64_t v5 = a2;
    }
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2080;
    uint64_t v8 = v5;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "pid %d Failure reading CFI info at %s\n",  (uint8_t *)v6,  0x12u);
  }

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer64,LittleEndian>>(char **a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16LL))(*(void *)(a2 + 8));
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(void *)(a2 + 24), "__TEXT");
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    __int16 v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer64,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      uint64_t v8 = *((void *)v7 + 5);
      if (v8)
      {
        if (v4)
        {
          uint64_t v9 = *(void *)(a2 + 32);
          uint64_t v10 = v9 + *((void *)v7 + 4);
          uint64_t v11 = v6 + 3;
        }

        else
        {
          uint64_t v9 = *(void *)(a2 + 16);
          uint64_t v10 = v9 + *((unsigned int *)v7 + 12);
          uint64_t v11 = v6 + 5;
        }

        uint64_t v12 = v9 + *v11;
        v25[0] = v10;
        v25[1] = v8;
        uint64_t v13 = v6[6];
        *(void *)&__int128 v24 = v12;
        *((void *)&v24 + 1) = v13;
        uint64_t v23 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32LL))(*(void *)(a2 + 8));
        if (v23)
        {
          uint64_t Current = CSArchitectureGetCurrent();
          char IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          char v22 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(void *)(a2 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8LL) & 0xFFFFFF) << 32));
          unsigned __int8 v21 = CSArchitectureIs32Bit(*(unsigned int *)(*(void *)(a2 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8LL) & 0xFFFFFF) << 32));
          unint64_t v19 = *(char **)(a2 + 48);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>( &v19,  &v24,  (uint64_t)v25,  &v23,  &v22,  &v21,  &v20);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1, &v20);
          uint64_t v16 = (std::__shared_weak_count *)*((void *)&v20 + 1);
          if (*((void *)&v20 + 1))
          {
            unint64_t v17 = (unint64_t *)(*((void *)&v20 + 1) + 8LL);
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
    }
  }

void sub_18606F3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>@<X0>( char **a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, unsigned __int8 **a4@<X4>, char *a5@<X5>, unsigned __int8 *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0xB8uLL);
  BOOL result = std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>( v14,  a1,  a2,  a3,  a4,  a5,  a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_18606F46C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>( void *a1, char **a2, _OWORD *a3, uint64_t a4, unsigned __int8 **a5, char *a6, unsigned __int8 *a7)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_189DFA780;
  CSCallFrameInfoForBinary::CSCallFrameInfoForBinary((uint64_t)(a1 + 3), *a2, a3, a4, *a5, *a6, *a7);
  return a1;
}

void sub_18606F4C4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189DFA780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189DFA780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__on_zero_shared(uint64_t a1)
{
}

uint64_t CSCallFrameInfoForBinary::CSCallFrameInfoForBinary( uint64_t a1, char *a2, _OWORD *a3, uint64_t a4, unsigned __int8 *a5, char a6, int a7)
{
  uint64_t v13 = std::string::basic_string[abi:ne180100]<0>((void *)a1, a2);
  *(_OWORD *)(v13 + 3) = *a3;
  *(_OWORD *)(v13 + 5) = *(_OWORD *)a4;
  uint64_t v14 = (const unsigned __int8 **)(v13 + 7);
  CSBinaryDataRef::CSBinaryDataRef((CSBinaryDataRef *)(v13 + 7));
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  uint64_t v15 = CSRangeOfDyldSharedCacheInCurrentProcess();
  uint64_t v16 = *(void *)(a4 + 8);
  if ((unint64_t)&a5[-v15] >= v17)
  {
    std::vector<unsigned char>::reserve((unint64_t *)(a1 + 80), *(void *)(a4 + 8));
    uint64_t v18 = *(void *)(a4 + 8);
    a5 = *(unsigned __int8 **)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 88) - (void)a5;
  }

  CSBinaryDataRef::SetData(v14, a5, v16);
  *(_BYTE *)(a1 + 72) = a6;
  if (a7) {
    char v19 = 4;
  }
  else {
    char v19 = 8;
  }
  *(_BYTE *)(a1 + 73) = v19;
  return a1;
}

void sub_18606F62C(_Unwind_Exception *exception_object)
{
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000LL) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    __int16 v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }

      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }

    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2) {
      operator delete((void *)v2);
    }
  }

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]( unint64_t **a1, _BYTE *a2)
{
  int v4 = *a1;
  uint64_t v6 = (_BYTE *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }

    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }

      while (v6 != (_BYTE *)v8);
      uint64_t v6 = (_BYTE *)*v4;
    }

    unint64_t *v4 = v13;
    v4[1] = v7;
    _DWORD v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }

  v4[1] = v7;
  return a1;
}

void CSCallFrameInfoForBinary::~CSCallFrameInfoForBinary(CSCallFrameInfoForBinary *this)
{
  unint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 1_Block_object_dispose((const void *)(v11 - 88), 8) = v2;
    operator delete(v2);
  }

  std::__tree<TRange<Pointer64>>::destroy((uint64_t)this + 112, *((void **)this + 15));
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }

  CSCppAddressSet::sort((CSCallFrameInfoForBinary *)((char *)this + 56));
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header( uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    unint64_t v5 = "NULL";
    if (a2) {
      unint64_t v5 = a2;
    }
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2080;
    unint64_t v8 = v5;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "pid %d Failure reading CFI info at %s\n",  (uint8_t *)v6,  0x12u);
  }

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer32,LittleEndian>>(char **a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16LL))(*(void *)(a2 + 8));
  unint64_t v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(void *)(a2 + 24), "__TEXT");
  if (v5)
  {
    uint64_t v6 = (_DWORD *)v5;
    __int16 v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer32,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      uint64_t v8 = *((unsigned int *)v7 + 9);
      if ((_DWORD)v8)
      {
        if (v4)
        {
          int v9 = *(_DWORD *)(a2 + 32);
          unsigned int v10 = v9 + *((_DWORD *)v7 + 8);
          unint64_t v11 = v6 + 6;
        }

        else
        {
          int v9 = *(_DWORD *)(a2 + 16);
          unsigned int v10 = v9 + *((_DWORD *)v7 + 10);
          unint64_t v11 = v6 + 8;
        }

        int v12 = *v11;
        v25[0] = v10;
        v25[1] = v8;
        uint64_t v13 = v6[9];
        *(void *)&__int128 v24 = (v9 + v12);
        *((void *)&v24 + 1) = v13;
        uint64_t v23 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32LL))(*(void *)(a2 + 8));
        if (v23)
        {
          uint64_t Current = CSArchitectureGetCurrent();
          char IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          char v22 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(void *)(a2 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8LL) & 0xFFFFFF) << 32));
          unsigned __int8 v21 = CSArchitectureIs32Bit(*(unsigned int *)(*(void *)(a2 + 24) + 4LL) | ((unint64_t)(*(_DWORD *)(*(void *)(a2 + 24) + 8LL) & 0xFFFFFF) << 32));
          char v19 = *(char **)(a2 + 40);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>( &v19,  &v24,  (uint64_t)v25,  &v23,  &v22,  &v21,  &v20);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1, &v20);
          char v16 = (std::__shared_weak_count *)*((void *)&v20 + 1);
          if (*((void *)&v20 + 1))
          {
            unint64_t v17 = (unint64_t *)(*((void *)&v20 + 1) + 8LL);
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
    }
  }

void sub_18606FAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *CSCppCoreFileMemory::CSCppCoreFileMemory(void *a1, uint64_t a2)
{
  *a1 = off_189DFA820;
  a1[1] = retain_mapped_memory_cache(a2);
  a1[2] = 0LL;
  return a1;
}

void CSCppCoreFileMemory::~CSCppCoreFileMemory(CSCppCoreFileMemory *this)
{
  *(void *)this = off_189DFA820;
  release_core_file_mapped_memory_cache(*((void *)this + 1));
}

{
  void *v1;
  CSCppCoreFileMemory::~CSCppCoreFileMemory(this);
  operator delete(v1);
}

uint64_t CSCppCoreFileMemory::footprint(CSCppCoreFileMemory *this)
{
  return *((void *)this + 2);
}

void *CSCppCoreFileMemory::to_string@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CSCppCoreFileMemory");
}

uint64_t CSCppCoreFileMemory::bytes_at(uint64_t a1, tree *a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  int v5 = mapped_memory_read(*(const char **)(a1 + 8), a2, a3, &v7);
  uint64_t result = 0LL;
  if (!v5)
  {
    *(void *)(a1 + 16) += a3;
    return v7;
  }

  return result;
}

void CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  *((void *)this + 2) = 0LL;
}

uint64_t CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  return *((void *)this + 1);
}

uint64_t CSCppCoreFileMemory::is_task(CSCppCoreFileMemory *this)
{
  return 1LL;
}

uint64_t CSCppCoreFileMemory::is_dyld_shared_cache(CSCppCoreFileMemory *this)
{
  return 0LL;
}

_OWORD *create_sampling_context_for_task_pid_symbolicator( task_name_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  kern_return_t v11;
  int v12;
  uint64_t v13;
  int FlagsForNListOnlyData;
  uint64_t v15;
  CSCallFrameInfo *v16;
  size_t v18;
  mach_msg_type_number_t task_info_outCnt;
  if ((a5 & 5) == 1) {
    int v9 = a5;
  }
  else {
    int v9 = a5 | 2;
  }
  unsigned int v10 = operator new(0xC0uLL);
  v10[7] = 0u;
  v10[8] = 0u;
  *unsigned int v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  void v10[3] = 0u;
  void v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[9] = 0u;
  *((void *)v10 + 14) = (char *)v10 + 120;
  *((void *)v10 + 1_Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
  *((void *)v10 + 19) = 0LL;
  *((void *)v10 + 17) = v10 + 9;
  *(_DWORD *)unsigned int v10 = a1;
  *((_DWORD *)v10 + 1) = a2;
  mach_msg_type_number_t task_info_outCnt = 1;
  unint64_t v11 = task_info(a1, 0x1Cu, (task_info_t)&v18, &task_info_outCnt);
  int v12 = v18;
  if (v11) {
    int v12 = 0;
  }
  *((_DWORD *)v10 + 41) = v12;
  *((_BYTE *)v10 + 16_Block_object_dispose((const void *)(v11 - 88), 8) = CSTaskIsTranslated();
  *((_DWORD *)v10 + 40) = v9;
  unint64_t v18 = 4LL;
  if (sysctlbyname("machdep.virtual_address_size", &task_info_outCnt, &v18, 0LL, 0LL)) {
    uint64_t v13 = -1LL;
  }
  else {
    uint64_t v13 = ~(-1LL << task_info_outCnt);
  }
  *((void *)v10 + 22) = v13;
  *((void *)v10 + 1) = task_get_mapped_memory_cache_with_label(a1, (uint64_t)"CSSampling");
  if (CSIsNull(a3, a4))
  {
    if ((v9 & 0x10) != 0)
    {
      *((void *)v10 + 3) = 0LL;
      *((void *)v10 + 4) = 0LL;
    }

    else
    {
      int FlagsForNListOnlyData = CSSymbolicatorGetFlagsForNListOnlyData();
      *((void *)v10 + 3) = CSSymbolicatorCreateWithTaskFlagsAndNotification(a1, FlagsForNListOnlyData | 3u, 0LL);
      *((void *)v10 + 4) = v15;
    }
  }

  else
  {
    CSRetain(a3, a4);
    *((void *)v10 + 3) = a3;
    *((void *)v10 + 4) = a4;
  }

  init_sampling_context_from_symbols((sampling_context_t *)v10, 1);
  *((void *)v10 + 2) = 0LL;
  if ((v9 & 0xA) == 2)
  {
    char v16 = (CSCallFrameInfo *)operator new(0x18uLL);
    *(void *)char v16 = 0LL;
    *((void *)v16 + 1) = 0LL;
    *((void *)v16 + 2) = 0LL;
    *((void *)v10 + 2) = v16;
    CSCallFrameInfo::ParseCFIForTask(v16);
  }

  return v10;
}

uint64_t init_sampling_context_from_symbols(sampling_context_t *a1, int a2)
{
  uint64_t result = CSIsNull(*((void *)a1 + 3), *((void *)a1 + 4));
  if ((result & 1) == 0)
  {
    if (!*((void *)a1 + 13) && (*((_BYTE *)a1 + 160) & 8) == 0)
    {
      uint64_t SymbolWithMangledNameFromSymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime( *((void *)a1 + 3),  *((void *)a1 + 4),  (uint64_t)"_dispatch_queue_offsets",  (uint64_t)"libdispatch.dylib",  0x8000000000000000LL);
      uint64_t v7 = v6;
      uint64_t result = CSIsNull(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v6);
      if ((result & 1) == 0)
      {
        unint64_t Range = (tree *)CSSymbolGetRange(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v7);
        uint64_t result = mapped_memory_read(*((const char **)a1 + 1), Range, 34LL, &v20);
        if (!(_DWORD)result)
        {
          int v9 = v20;
          if (v20)
          {
            uint64_t result = (uint64_t)malloc(0x22uLL);
            *((void *)a1 + 13) = result;
            if (result)
            {
              __int128 v10 = *v9;
              __int128 v11 = v9[1];
              *(_WORD *)(result + 32) = *((_WORD *)v9 + 16);
              *(_OWORD *)uint64_t result = v10;
              *(_OWORD *)(result + 16) = v11;
            }
          }
        }
      }
    }

    if (a2)
    {
      if (!*((void *)a1 + 6))
      {
        uint64_t v12 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime( *((void *)a1 + 3),  *((void *)a1 + 4),  (uint64_t)"__sigtramp",  (uint64_t)"libsystem_platform.dylib",  0x8000000000000000LL);
        uint64_t v14 = v13;
        uint64_t result = CSIsNull(v12, v13);
        if ((result & 1) == 0)
        {
          uint64_t result = CSSymbolGetRange(v12, v14);
          *((void *)a1 + 5) = result;
          *((void *)a1 + 6) = v15;
        }
      }

      if (!*((void *)a1 + 8))
      {
        uint64_t v16 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime( *((void *)a1 + 3),  *((void *)a1 + 4),  (uint64_t)"_start_wqthread",  (uint64_t)"libsystem_pthread.dylib",  0x8000000000000000LL);
        uint64_t v18 = v17;
        uint64_t result = CSIsNull(v16, v17);
        if ((result & 1) == 0)
        {
          uint64_t result = CSSymbolGetRange(v16, v18);
          *((void *)a1 + 7) = result;
          *((void *)a1 + _Block_object_dispose((const void *)(v11 - 88), 8) = v19;
        }
      }
    }
  }

  return result;
}

void sampling_context_t::~sampling_context_t(char **this)
{
  unint64_t v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }

uint64_t CSSymbolicatorTranslateFromNativeAddress()
{
  return 0LL;
}

_OWORD *create_sampling_context_for_task(task_name_t a1, int a2)
{
  if (pid_for_task(a1, &x)) {
    return 0LL;
  }
  else {
    return create_sampling_context_for_task_pid_symbolicator(a1, x, 0LL, 0LL, a2);
  }
}

void sampling_context_clear_cache(uint64_t a1)
{
  if (a1) {
    clear_mapped_memory(*(void *)(a1 + 8));
  }
}

void destroy_sampling_context(uint64_t a1)
{
  if (a1)
  {
    task_release_mapped_memory_cache(*(_DWORD *)a1);
    *(void *)(a1 + _Block_object_dispose((const void *)(v11 - 88), 8) = 0LL;
    unint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      int v5 = *(void ***)(a1 + 16);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v5);
      operator delete(v2);
      *(void *)(a1 + 16) = 0LL;
    }

    uint64_t v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 104) = 0LL;
    }

    CSRelease(*(unsigned int **)(a1 + 24), *(void *)(a1 + 32));
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = 0LL;
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy( a1 + 136,  *(char **)(a1 + 144));
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy( a1 + 112,  *(char **)(a1 + 120));
    int v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 8_Block_object_dispose((const void *)(v11 - 88), 8) = v4;
      operator delete(v4);
    }

    operator delete((void *)a1);
  }

uint64_t get_remote_thread_dispatch_queue(sampling_context_t *a1, thread_inspect_t a2, unint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000LL;
  int v16 = 0;
  if (CSGetForceSafeMachVMReads())
  {
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 0x40000000LL;
    void v11[2] = __get_remote_thread_dispatch_queue_block_invoke;
    void v11[3] = &unk_189DFA878;
    v11[4] = &v13;
    v11[5] = a1;
    thread_inspect_t v12 = a2;
    void v11[6] = a3;
    int v6 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v11);
    if (v6 != 4096 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)a1 + 1);
      *(_DWORD *)__int128 buf = 67109376;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v6;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Missing page in pid %d, sampling of thread failed, err code %d\n",  buf,  0xEu);
    }
  }

  else
  {
    int remote_thread_dispatch_queue2 = get_remote_thread_dispatch_queue2(a1, a2, a3);
    *((_DWORD *)v14 + 6) = remote_thread_dispatch_queue2;
  }

  uint64_t v9 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_186070224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __get_remote_thread_dispatch_queue_block_invoke(uint64_t a1)
{
  uint64_t result = get_remote_thread_dispatch_queue2( *(sampling_context_t **)(a1 + 40),  *(_DWORD *)(a1 + 56),  *(unint64_t **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t get_remote_thread_dispatch_queue2( sampling_context_t *a1, thread_inspect_t target_act, unint64_t *a3)
{
  kern_return_t v6;
  int v7;
  _WORD *v9;
  char *v10;
  char *v11;
  thread_inspect_t v12;
  BOOL v13;
  char **v14;
  kern_return_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  void *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  void *v28;
  tree *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t **v33;
  tree *v34;
  char *__src;
  mach_msg_type_number_t v36[2];
  unint64_t v37;
  uint64_t v38;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  tree *v41;
  thread_inspect_t v42;
  unint64_t *v43;
  std::string v44;
  __int128 v45;
  uint64_t *v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  thread_inspect_t v50;
  __int16 v51;
  kern_return_t v52;
  _BYTE v53[88];
  uint64_t v54;
  uint64_t v54 = *MEMORY[0x1895F89C0];
  uint64_t v42 = target_act;
  if (!a1) {
    return 4LL;
  }
  if (a3)
  {
    *a3 = 0LL;
    if (!*((void *)a1 + 13) && (*((_BYTE *)a1 + 160) & 8) == 0) {
      init_sampling_context_from_symbols(a1, 0);
    }
    thread_info_outCnt = 6;
    int v6 = thread_info(target_act, 4u, thread_info_out, &thread_info_outCnt);
    if (v6)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        int v7 = *((_DWORD *)a1 + 1);
        *(_DWORD *)__int128 buf = 67109632;
        int v48 = v7;
        unint64_t v49 = 1024;
        uint64_t v50 = target_act;
        uint64_t v51 = 1024;
        uint64_t v52 = v6;
        _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d",  buf,  0x14u);
      }

      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d",  *((_DWORD *)a1 + 1),  target_act,  v6);
      return 0LL;
    }

    uint64_t v37 = 0LL;
    unint64_t v38 = 0LL;
    uint64_t v9 = (_WORD *)*((void *)a1 + 13);
    if (!v9
      || !v41
      || mapped_memory_read_pointer(*((void *)a1 + 1), v41, &v38)
      || !v38
      || mapped_memory_read_pointer(*((void *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[5]), &v37)
      || !v37
      || (*a3 = v37,
          mapped_memory_read( *((const char **)a1 + 1),  (tree *)(v38 + (unsigned __int16)v9[7]),  (unsigned __int16)v9[8],  v36)))
    {
LABEL_18:
      __int128 v10 = (char *)*((void *)a1 + 18);
      if (!v10) {
        goto LABEL_29;
      }
      __int128 v11 = (char *)a1 + 144;
      do
      {
        thread_inspect_t v12 = *((_DWORD *)v10 + 8);
        uint64_t v13 = v12 >= target_act;
        if (v12 >= target_act) {
          uint64_t v14 = (char **)v10;
        }
        else {
          uint64_t v14 = (char **)(v10 + 8);
        }
        if (v13) {
          __int128 v11 = v10;
        }
        __int128 v10 = *v14;
      }

      while (*v14);
      if (v11 != (char *)a1 + 144 && *((_DWORD *)v11 + 8) <= target_act)
      {
        uint64_t v21 = v37;
        if (v11[72])
        {
          if (v37 != *((void *)v11 + 10)) {
            *((void *)v11 + 10) = 0LL;
          }
        }

        else if (v37)
        {
          v11[72] = 1;
          *((void *)v11 + 10) = v21;
        }
      }

      else
      {
LABEL_29:
        v36[0] = 28;
        uint64_t v15 = thread_info(target_act, 5u, (thread_info_t)buf, v36);
        if (v15 || !v36[0])
        {
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = *((_DWORD *)a1 + 1);
            LODWORD(v44.__r_.__value_.__l.__data_) = 67109632;
            HIDWORD(v44.__r_.__value_.__r.__words[0]) = v17;
            LOWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = target_act;
            HIWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            LODWORD(v44.__r_.__value_.__r.__words[2]) = v15;
            _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d",  (uint8_t *)&v44,  0x14u);
          }

          fprintf( (FILE *)*MEMORY[0x1895F89D0],  "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d",  *((_DWORD *)a1 + 1),  target_act,  v15);
          int v16 = "";
        }

        else
        {
          int v16 = v53;
        }

        int v18 = *(void *)thread_info_out;
        __int16 v19 = v37;
        std::string::basic_string[abi:ne180100]<0>(&v44, v16);
        *(void *)&uint64_t v45 = v18;
        uint64_t v46 = (uint64_t *)v19;
        BYTE8(v45) = v19 != 0;
        uint64_t v43 = (unint64_t *)&v42;
        int v20 = std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t **)a1 + 17,  &v42,  (uint64_t)&std::piecewise_construct,  (_DWORD **)&v43);
        std::string::operator=((std::string *)(v20 + 5), &v44);
        *((_OWORD *)v20 + 4) = v45;
        v20[10] = v46;
      }

      return 0LL;
    }

    char v22 = (unsigned __int16)v9[8];
    if (v22 == 2)
    {
      uint64_t v23 = (unsigned __int16)**(_WORD **)v36;
    }

    else if (v22 == 4)
    {
      uint64_t v23 = **(_DWORD **)v36;
    }

    else
    {
      uint64_t v23 = 0;
    }

    __int128 v24 = (void *)*((void *)a1 + 15);
    if (v24)
    {
      uint64_t v25 = (char *)a1 + 120;
      do
      {
        uint64_t v26 = v24[4];
        uint64_t v27 = v26 >= v37;
        if (v26 >= v37) {
          uint64_t v28 = v24;
        }
        else {
          uint64_t v28 = v24 + 1;
        }
        if (v27) {
          uint64_t v25 = (char *)v24;
        }
        __int128 v24 = (void *)*v28;
      }

      while (*v28);
      if (v25 != (char *)a1 + 120 && v37 >= *((void *)v25 + 4))
      {
        if (*((void *)v25 + 9) != *(void *)thread_info_out) {
          *((void *)v25 + 9) = 0LL;
        }
        if (v23 > *((_DWORD *)v25 + 16)) {
          *((_DWORD *)v25 + 16) = v23;
        }
        goto LABEL_18;
      }
    }

    BOOL v34 = 0LL;
    __src = 0LL;
    if (*v9 == 3)
    {
      uint64_t v29 = (tree *)(v38 + (unsigned __int16)v9[1]);
      BOOL v34 = v29;
    }

    else
    {
      uint64_t v30 = mapped_memory_read_pointer(*((void *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[1]), &v34);
      uint64_t v29 = v34;
      if (v30) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v34 == 0LL;
      }
      if (v31)
      {
LABEL_67:
        if (!v30)
        {
          if (__src)
          {
            strncpy((char *)buf, __src, 0x7FuLL);
            v53[79] = 0;
            __int128 v32 = *(void *)thread_info_out;
            std::string::basic_string[abi:ne180100]<0>(&v44, (char *)buf);
            LODWORD(v45) = v23;
            *((void *)&v45 + 1) = v32;
            uint64_t v43 = &v37;
            unint64_t v33 = std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t **)a1 + 14,  &v37,  (uint64_t)&std::piecewise_construct,  (uint64_t **)&v43);
            std::string::operator=((std::string *)(v33 + 5), &v44);
            *((_OWORD *)v33 + 4) = v45;
          }
        }

        goto LABEL_18;
      }
    }

    uint64_t v30 = mapped_memory_read(*((const char **)a1 + 1), v29, 128LL, &__src);
    goto LABEL_67;
  }

  return 0LL;
}

#error "18607082C: call analysis failed (funcsize=58)"
size_t debug_print_backtrace(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  FILE **v8;
  uint64_t v9;
  char SymbolOwnerWithAddressAtTime;
  uint64_t v11;
  CSCppSymbolOwner *SymbolWithAddressAtTime;
  uint64_t v13;
  FILE *v14;
  uint64_t v8 = (FILE **)MEMORY[0x1895F89D0];
  fprintf((FILE *)*MEMORY[0x1895F89D0], "\nFrame count is %d:\n", a2);
  if (a2)
  {
    uint64_t v9 = 0LL;
    do
    {
      SymbolOwnerWithAddressAtTime = CSSymbolicatorGetSymbolOwnerWithAddressAtTime( *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a3 + 8 * v9),  0x8000000000000000LL);
      CSSymbolOwnerGetName(SymbolOwnerWithAddressAtTime, v11);
      SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime( *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a3 + 8 * v9),  0x8000000000000000LL);
      CSSymbolGetName((uint64_t)SymbolWithAddressAtTime, v13);
      uint64_t v14 = *v8;
      if (a4) {
        fprintf(v14, "[%3d] %#8.8llx fp:%#8.8llx %s %s\n");
      }
      else {
        fprintf(v14, "[%3d] %#8.8llx %s %s\n");
      }
      ++v9;
    }

    while (a2 != v9);
  }

  return fwrite("\n\n", 2uLL, 1uLL, *v8);
}

uint64_t sample_remote_thread_with_dispatch_queue(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  int v15 = 5;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 0x40000000LL;
  _OWORD v9[2] = __sample_remote_thread_with_dispatch_queue_block_invoke;
  void v9[3] = &unk_189DFA8A0;
  v9[4] = &v12;
  void v9[5] = a1;
  int v10 = a2;
  char v11 = a3;
  void v9[6] = a4;
  if (CSGetForceSafeMachVMReads())
  {
    int v5 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v9);
    if (v5 != 4096 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)__int128 buf = 67109376;
      int v17 = v6;
      __int16 v18 = 1024;
      int v19 = v5;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Missing page in pid %d, sampling of thread failed, err code %d\n",  buf,  0xEu);
    }
  }

  else
  {
    __sample_remote_thread_with_dispatch_queue_block_invoke((uint64_t)v9);
  }

  uint64_t v7 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_186070B44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __sample_remote_thread_with_dispatch_queue_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v69 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(result + 40);
  int v3 = 4;
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 48);
    int v5 = *(uint64_t **)v4;
    unint64_t v49 = *(unsigned int **)(v4 + 24);
    if (*(void *)v4 && *(void *)(v4 + 24) != 0LL)
    {
      uint64_t v7 = *(unsigned int *)(result + 56);
      int v48 = *(unsigned __int8 *)(result + 60);
      uint64_t v50 = *(uint64_t **)(v4 + 8);
      int v8 = *(_DWORD *)(v4 + 16);
      int v10 = *(_DWORD **)(v4 + 32);
      uint64_t v9 = *(unint64_t **)(v4 + 40);
      char v11 = *(_BYTE **)(v4 + 48);
      if (v11) {
        *char v11 = 0;
      }
      unsigned int v47 = v11;
      if (!*(void *)(v2 + 48) && !CSIsNull(*(void *)(v2 + 24), *(void *)(v2 + 32)))
      {
        init_sampling_context_from_symbols((sampling_context_t *)v2, 1);
        int v12 = *(_DWORD *)(v2 + 72);
        if (*(void *)(v2 + 48))
        {
          if (v12) {
            fprintf((FILE *)*MEMORY[0x1895F89D0], "Found _sigtramp symbol after %u tries\n", *(_DWORD *)(v2 + 72));
          }
        }

        else
        {
          if (!v12)
          {
            fwrite("Couldn't find _sigtramp symbol in expected dylibs\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
            int v12 = *(_DWORD *)(v2 + 72);
          }

          *(_DWORD *)(v2 + 72) = v12 + 1;
        }
      }

      uint64_t result = get_remote_thread_dispatch_queue2((sampling_context_t *)v2, v7, v9);
      int v3 = result;
      if (!(_DWORD)result)
      {
        thread_uint64_t state = _create_thread_state();
        int v3 = (*(uint64_t (**)(CSThreadArm *, uint64_t, void))(*(void *)thread_state + 24LL))( thread_state,  v7,  (*(_DWORD *)(v2 + 164) >> 1) & 1);
        if (v3)
        {
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
          {
            int v13 = *(_DWORD *)(v2 + 4);
            *(_DWORD *)__int128 buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v13;
            LOWORD(v59) = 1024;
            *(_DWORD *)((char *)&v59 + 2) = v7;
            _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "sample_remote_thread_with_dispatch_queue2 failed to get thread state for pid %u thread %u",  buf,  0xEu);
          }

          fprintf( (FILE *)*MEMORY[0x1895F89D0],  "sample_remote_thread_with_dispatch_queue2 failed to get thread state for pid %u thread %u",  *(_DWORD *)(v2 + 4),  v7);
          uint64_t result = (*(uint64_t (**)(CSThreadArm *))(*(void *)thread_state + 8LL))(thread_state);
          goto LABEL_93;
        }

        uint64_t Architecture = CSSymbolicatorGetArchitecture(*(void *)(v2 + 24), *(void *)(v2 + 32));
        if (*(_BYTE *)(v2 + 168) && CSArchitectureIsX86_64(Architecture)) {
          *((_BYTE *)thread_state + _Block_object_dispose(va, 8) = 1;
        }
        int v44 = v7;
        if (v10) {
          *int v10 = 64;
        }
        uint64_t v41 = *((void *)thread_state + 2);
        uint64_t PC = CSThread::GetPC(thread_state, -1LL);
        uint64_t *v5 = PC;
        uint64_t v16 = *(void *)(v2 + 56);
        unint64_t v17 = *(void *)(v2 + 64);
        if (v50) {
          *uint64_t v50 = CSThread::GetFP(thread_state, 0LL);
        }
        uint64_t v45 = _create_thread_state();
        if ((*(_BYTE *)(v2 + 160) & 4) != 0)
        {
          int segment_content_from_kc_fileset = 1;
        }

        else if (*(void *)(v2 + 16))
        {
          int segment_content_from_kc_fileset = extract_segment_content_from_kc_fileset();
        }

        else
        {
          int segment_content_from_kc_fileset = 0;
        }

        unsigned int v18 = 1;
        unsigned int v43 = v8 - 1;
        if ((v8 - 1) < 2)
        {
          int v20 = v44;
          goto LABEL_85;
        }

        BOOL v19 = PC - v16 >= v17;
        int v20 = v44;
        if (!v19)
        {
LABEL_85:
          unsigned int *v49 = v18;
          if (!CSIsNull(*(void *)(v2 + 24), *(void *)(v2 + 32)))
          {
            uint64_t v38 = *v49;
            if ((_DWORD)v38)
            {
              do
              {
                *v5++ &= *(void *)(v2 + 176);
                --v38;
              }

              while (v38);
            }
          }

          if (!v43)
          {
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
            {
              int v39 = *(_DWORD *)(v2 + 4);
              *(_DWORD *)__int128 buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v39;
              LOWORD(v59) = 1024;
              *(_DWORD *)((char *)&v59 + 2) = v20;
              _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "sample_remote_thread_with_dispatch_queue2 got zero frames for pid %u thread %u",  buf,  0xEu);
            }

            fprintf( (FILE *)*MEMORY[0x1895F89D0],  "sample_remote_thread_with_dispatch_queue2 got zero frames for pid %u thread %u",  *(_DWORD *)(v2 + 4),  v20);
          }

          (*(void (**)(CSThreadArm *))(*(void *)thread_state + 8LL))(thread_state);
          uint64_t result = (*(uint64_t (**)(CSThreadArm *))(*(void *)v45 + 8LL))(v45);
          int v3 = 0;
          goto LABEL_93;
        }

        int v21 = 0;
        BOOL v22 = 1;
        unint64_t v42 = -1LL;
        while (1)
        {
          unint64_t v52 = 0LL;
          unint64_t v53 = -1LL;
          unint64_t v23 = *(void *)(v2 + 48);
          unint64_t v24 = v5[v18 - 1] - *(void *)(v2 + 40);
          if (!v22) {
            goto LABEL_47;
          }
          uint64_t v65 = 0LL;
          uint64_t v66 = &v65;
          uint64_t v67 = 0x2000000000LL;
          char v68 = 0;
          if (CSGetForceSafeMachVMReads())
          {
            *(void *)__int128 buf = MEMORY[0x1895F87A8];
            uint64_t v59 = 0x40000000LL;
            uint64_t v60 = ___ZL19CheckForSecondFrameP18sampling_context_tP8CSThread_block_invoke;
            uint64_t v61 = &unk_189DFA8C8;
            uint64_t v62 = &v65;
            uint64_t v63 = v2;
            uint64_t v64 = thread_state;
            int v25 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)buf);
            if (v25 != 4096 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              int v26 = *(_DWORD *)(v2 + 4);
              *(_DWORD *)uint64_t v54 = 67109376;
              int v55 = v26;
              __int16 v56 = 1024;
              int v57 = v25;
              _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Missing page in pid %d, checking for second frame failed, err code %d\n",  v54,  0xEu);
            }
          }

          else
          {
            char v27 = CheckForSecondFrame2(v2, thread_state);
            *((_BYTE *)v66 + 24) = v27;
          }

          int v28 = *((unsigned __int8 *)v66 + 24);
          _Block_object_dispose(&v65, 8);
          if (v28) {
            break;
          }
          uint64_t v29 = 1LL;
LABEL_48:
          int v30 = (*(uint64_t (**)(CSThreadArm *, void))(*(void *)thread_state + 40LL))( thread_state,  v21 & 1);
          int v31 = v30;
          int v32 = v21;
          unint64_t v33 = *(char ***)(v2 + 16);
          int v46 = v32;
          if (!((v33 == 0LL) | v32 & 1)
            && (((v29 ^ 1 | segment_content_from_kc_fileset) & 1) != 0 || v30 != 1)
            && CSCallFrameInfo::UnwindThreadState(v33, thread_state, *(void *)(v2 + 8), v29, v45)
            && (unint64_t v53 = CSThread::GetPC(v45, -1LL), SP = CSThread::GetSP(v45, -1LL), v53 != -1LL)
            && ((unint64_t v35 = SP, v42 == -1LL) || SP > v42))
          {
            (*(void (**)(CSThreadArm *, CSThreadArm *))(*(void *)thread_state + 16LL))(thread_state, v45);
            int v21 = 0;
            unint64_t v42 = v35;
            int v20 = v44;
          }

          else
          {
            int v20 = v44;
            if (v24 >= v23
              || !(*(unsigned int (**)(CSThreadArm *, char **, void, uint64_t, CSThreadArm *))(*(void *)thread_state + 104LL))( thread_state,  v33,  *(void *)(v2 + 8),  v29,  v45)
              || (unint64_t v53 = CSThread::GetPC(v45, -1LL), v53 == -1LL))
            {
              if (!v31) {
                goto LABEL_85;
              }
              int v21 = v46;
              FP = (tree *)CSThread::GetFP(thread_state, 0LL);
              unint64_t v52 = 0LL;
              if (mapped_memory_read_pointer(*(void *)(v2 + 8), FP, &v52))
              {
                unint64_t v37 = 0LL;
                unint64_t v52 = 0LL;
              }

              else
              {
                unint64_t v37 = v52;
              }

              if (*(_BYTE *)(v2 + 168) && !v37) {
                goto LABEL_85;
              }
              if (v37 >> 60 == 1)
              {
                *(void *)__int128 buf = -1LL;
                if (!v48
                  || mapped_memory_read_pointer(*(void *)(v2 + 8), (tree *)((char *)FP - 8), buf)
                  || mapped_memory_read_pointer(*(void *)(v2 + 8), *(tree **)buf, &v52))
                {
                  v52 &= 0xFFFFFFFFFFFFFFFuLL;
                }

                else
                {
                  if (v47) {
                    _BYTE *v47 = 1;
                  }
                  int v21 = 1;
                  FP = *(tree **)buf;
                }
              }

              (*(void (**)(CSThreadArm *))(*(void *)thread_state + 88LL))(thread_state);
              CSThread::SetFP(thread_state, v52);
              CSThread::SetPC(thread_state, v53);
              unint64_t v42 = -1LL;
            }

            else
            {
              (*(void (**)(CSThreadArm *, CSThreadArm *))(*(void *)thread_state + 16LL))(thread_state, v45);
              unint64_t v42 = -1LL;
              int v21 = v46;
            }
          }

          if (v53 != -1LL)
          {
            v5[v18] = v53;
            if (v50) {
              v50[v18] = v52;
            }
            ++v18;
            BOOL v22 = v24 < v23;
            if (v18 < v43) {
              continue;
            }
          }

          goto LABEL_85;
        }

        unint64_t v53 = CSThread::GetPC(thread_state, -1LL);
        v5[v18] = v53;
        int v20 = v44;
        if (v50) {
          v50[v18] = 0LL;
        }
        if (++v18 >= v43) {
          goto LABEL_85;
        }
LABEL_47:
        uint64_t v29 = 0LL;
        goto LABEL_48;
      }
    }
  }

#error "186071404: call analysis failed (funcsize=72)"
uint64_t sample_remote_thread_with_dispatch_queue_regular_and_swift_async( uint64_t a1,  int a2,  uint64_t a3,  uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  size_t v10;
  void *v11;
  const void *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _BYTE *v16;
  BOOL v17;
  unint64_t v17 = 0;
  if (!sample_should_capture_swift_async(a1, &v17))
  {
    uint64_t result = sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_13;
  }

  uint64_t result = sample_remote_thread_with_dispatch_queue(a1, a2, 1, a4);
  if ((_DWORD)result) {
    return result;
  }
  if (**(_BYTE **)(a4 + 48))
  {
LABEL_13:
    if (v17 && **(_BYTE **)(a4 + 48)) {
      return sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
    }
    else {
      return 0LL;
    }
  }

  uint64_t v9 = **(unsigned int **)(a4 + 24);
  if ((_DWORD)v9)
  {
    int v10 = 8 * v9;
    if (*(void *)a3 && *(void *)a4) {
      memcpy(*(void **)a3, *(const void **)a4, 8 * v9);
    }
    char v11 = *(void **)(a3 + 8);
    if (v11)
    {
      int v12 = *(const void **)(a4 + 8);
      if (v12) {
        memcpy(v11, v12, v10);
      }
    }
  }

  uint64_t result = 0LL;
  int v13 = *(_DWORD **)(a4 + 24);
  uint64_t v14 = *(_DWORD **)(a4 + 32);
  int v15 = *(_DWORD **)(a3 + 32);
  **(_DWORD **)(a3 + 24) = *v13;
  *int v15 = *v14;
  uint64_t v16 = *(_BYTE **)(a3 + 48);
  **(void **)(a3 + 40) = **(void **)(a4 + 40);
  *uint64_t v16 = 0;
  *int v13 = 0;
  return result;
}

BOOL sample_should_capture_swift_async(uint64_t a1, BOOL *a2)
{
  int v3 = *(_DWORD *)(a1 + 160);
  if ((v3 & 0x60) == 0x60 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "SAMPLING_SAMPLE_BOTH_REGULAR_AND_SWIFT_ASYNC will override SAMPLING_IGNORE_SWIFT_ASYNC",  v5,  2u);
  }

  *a2 = (v3 & 0x40) != 0;
  return (v3 & 0x60) != 32;
}

uint64_t sample_remote_thread(uint64_t a1, int a2, uint64_t a3)
{
  char should_capture_swift_async = sample_should_capture_swift_async(a1, &v8);
  return sample_remote_thread_with_dispatch_queue(a1, a2, should_capture_swift_async, a3);
}

uint64_t thread_name_for_thread_port(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  if (!a1) {
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v4 = a1 + 144;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      int v10 = (uint64_t *)v5;
    }
    else {
      int v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }

  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (a3) {
      *a3 = *(void *)(v7 + 64);
    }
    if (a4) {
      *a4 = *(void *)(v7 + 80);
    }
    uint64_t result = v7 + 40;
  }

  else
  {
LABEL_14:
    if (a3) {
      *a3 = 0LL;
    }
    uint64_t result = 0LL;
    if (a4) {
      *a4 = 0LL;
    }
  }

  return result;
}

void *dispatch_queue_name_for_serial_number(uint64_t a1, unint64_t a2, BOOL *a3, void *a4)
{
  if (!a1) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void **)(a1 + 120);
  uint64_t v4 = (void *)(a1 + 120);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = v4;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      int v10 = v5;
    }
    else {
      int v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v4 && v7[4] <= a2)
  {
    if (a3) {
      *a3 = *((_DWORD *)v7 + 16) > 1u;
    }
    if (a4) {
      *a4 = v7[9];
    }
    uint64_t result = v7 + 5;
  }

  else
  {
LABEL_13:
    if (a3) {
      *a3 = 0;
    }
    uint64_t result = 0LL;
    if (a4) {
      *a4 = 0LL;
    }
  }

  return result;
}

void CSSymbolicatorFixupFrames( char a1, uint64_t a2, tree **a3, unsigned int *a4, unsigned int a5, _DWORD *a6, uint64_t a7, int a8, uint64_t a9)
{
  if (!a3 || !a4 || !a6) {
    return;
  }
  unsigned int v16 = *a4;
  if (a7) {
    uint64_t v17 = a7;
  }
  else {
    uint64_t v17 = 0x8000000000000000LL;
  }
  if (*a6 == 65)
  {
    v64[0] = 0LL;
    v64[1] = 0LL;
    unint64_t v63 = (unint64_t)v64;
    if (v16)
    {
      if (a5)
      {
        unsigned int v20 = v16 - a5;
        uint64_t v62 = (uint64_t)a3[v16 - a5];
      }

      else
      {
        uint64_t v62 = -1LL;
        unsigned int v20 = v16;
      }

      int Architecture = CSSymbolicatorGetArchitecture(a1, a2);
      *a6 = 64;
      if (!v20) {
        goto LABEL_70;
      }
      int v31 = Architecture;
      if (a9) {
        int v32 = *(const char **)(a9 + 8);
      }
      else {
        int v32 = 0LL;
      }
      IsValiduint64_t PC = _IsValidPC(v32, *a3);
      if (v20 >= 2)
      {
        if (v62)
        {
          if (v20 + 1 <= v16)
          {
            SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
            uint64_t v36 = v35;
            if (!CSIsNull((char)SymbolWithAddressAtTime, v35))
            {
              unint64_t Range = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v36);
              if (Range)
              {
                if (_IsValidLinkRegister( Range,  v38,  (uint64_t)*a3,  (uint64_t)SymbolWithAddressAtTime,  v36,  v31 != 12LL))
                {
                  memmove(a3 + 2, a3 + 1, 8LL * (v20 - 1));
                  a3[1] = (tree *)v62;
                  ++v20;
                  if (!IsValidPC) {
                    goto LABEL_70;
                  }
LABEL_41:
                  unsigned int v39 = v20 - 1;
                  if (v20 - 1 >= 2)
                  {
                    unsigned int v40 = v20;
                    do
                    {
                      uint64_t v41 = &a3[v39];
                      if (!*v41)
                      {
                        if (v39 < v20 - 1) {
                          memmove(v41, &a3[v40], 8LL * (v20 - v40));
                        }
                        unsigned int v39 = v40 - 2;
                        --v20;
                      }

                      unsigned int v40 = v39--;
                    }

                    while (v39 > 1);
                  }

                  if (v31 == 12LL && v20 >= 2)
                  {
                    unint64_t v42 = a3 + 1;
                    uint64_t v43 = v20 - 1LL;
                    do
                    {
                      *v42++ &= ~1uLL;
                      --v43;
                    }

                    while (v43);
                  }

                  if (a8 && v20 >= 2)
                  {
                    int v44 = (uint64_t *)(a3 + 1);
                    uint64_t v45 = v20 - 1LL;
                    uint64_t v46 = a9;
                    do
                    {
                      uint64_t v47 = *v44;
                      if (*v44 != -1)
                      {
                        if (v31 == 12LL && (v47 & 1) != 0)
                        {
                          if (v46)
                          {
                            unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
                            unsigned int ThumbInstruction = _GetThumbInstruction( *(const char **)(v46 + 8),  (uint64_t)&v63,  (tree *)((v47 & 0xFFFFFFFFFFFFFFFELL) - 4));
                            uint64_t v50 = v46;
                            unsigned int v51 = ThumbInstruction;
                            if (_GetThumbInstruction( *(const char **)(v50 + 8),  (uint64_t)&v63,  (tree *)(v48 - 2)) >> 14 > 2 && v51 >> 12 > 0xE)
                            {
                              uint64_t v53 = -4LL;
                            }

                            else
                            {
                              uint64_t v53 = -2LL;
                            }

                            uint64_t v54 = *v44 + v53;
                            uint64_t v46 = a9;
                          }

                          else
                          {
                            uint64_t v54 = v47 - 2;
                          }
                        }

                        else
                        {
                          uint64_t v54 = v47 - 4;
                        }

                        uint64_t *v44 = v54;
                      }

                      ++v44;
                      --v45;
                    }

                    while (v45);
                  }

                  goto LABEL_70;
                }
              }
            }
          }
        }
      }

      if (IsValidPC) {
        goto LABEL_41;
      }
    }

    else
    {
      unsigned int v20 = 0;
    }

LABEL_70:
    std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v63, v64[0]);
    unsigned int v16 = v20;
    goto LABEL_80;
  }

  if (*a6 == 33 && v16)
  {
    if (a5)
    {
      unsigned int v18 = v16 - a5;
      BOOL v19 = a3[v16 - a5] != 0LL;
    }

    else
    {
      BOOL v19 = 1;
      unsigned int v18 = *a4;
    }

    *a6 = 32;
    if (v18 >= 2 && v19 && v18 + 1 <= v16)
    {
      int v21 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
      uint64_t v23 = v22;
      if (!CSIsNull((char)v21, v22))
      {
        unint64_t v24 = CSSymbolGetRange((uint64_t)v21, v23);
        unint64_t v61 = v25;
        uint64_t InstructionData = CSSymbolGetInstructionData((uint64_t)v21, v23);
        if (InstructionData)
        {
          uint64_t v60 = InstructionData;
          uint64_t v27 = CSSymbolicatorGetArchitecture(a1, a2);
          unint64_t v63 = 0LL;
          uint64_t v65 = 0LL;
          int v28 = (const char *)a9;
          if (a9) {
            int v28 = *(const char **)(a9 + 8);
          }
          if (ScanInstructionsForMissingSecondFrameLocation_Intel( a1,  a2,  v27 == 16777223,  (uint64_t)*a3,  v60,  v61,  (unint64_t)*a3 - v24,  &v63,  &v65,  (char)v21,  SHIDWORD(v21),  v23,  v28))
          {
            if (v63 >= a5) {
              uint64_t v29 = -1LL;
            }
            else {
              uint64_t v29 = (uint64_t)*(&a3[v63] + *a4 - a5);
            }
            memmove(a3 + 2, a3 + 1, 8LL * (v18 - 1));
            a3[1] = (tree *)v29;
            ++v18;
          }
        }
      }
    }

    if (v18 >= 2 && a8)
    {
      int v55 = a3 + 1;
      uint64_t v56 = v18 - 1LL;
      do
      {
        if (*v55 != -1LL) {
          --*v55;
        }
        ++v55;
        --v56;
      }

      while (v56);
    }

    unsigned int v16 = v18;
  }

void sub_186071C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

uint64_t ScanInstructionsForMissingSecondFrameLocation_Intel( char a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, void *a8, void *a9, char a10, int a11, char a12, const char *a13)
{
  BOOL v21 = CSIsNull(a1, a2);
  uint64_t result = 0LL;
  if (a7 >= a6) {
    return result;
  }
  BOOL v23 = !a9 || a8 == 0LL;
  if (v23 || v21) {
    return result;
  }
  unint64_t v25 = a7;
  if (a3)
  {
    unint64_t v25 = a7;
    if (*(_BYTE *)(a5 + a7) == 72)
    {
      unint64_t v25 = a7 + 1;
      if (a7 + 1 >= a6) {
        return 0LL;
      }
    }
  }

  uint64_t result = 0LL;
  unsigned int v26 = *(unsigned __int8 *)(a5 + v25);
  if (v26 <= 0x8A)
  {
    if (v26 == 85)
    {
LABEL_45:
      *a8 = 0LL;
      uint64_t result = 1LL;
      *a9 = 1LL;
      return result;
    }

    if (v26 != 115)
    {
      if (v26 != 137) {
        return result;
      }
      unint64_t v27 = v25 + 1;
LABEL_36:
      uint64_t result = 1LL;
      *a8 = 1LL;
      *a9 = 2LL;
      return result;
    }

    if (a3)
    {
      unint64_t v42 = 0LL;
      if (a7 < 2)
      {
        if (!a13) {
          return 0LL;
        }
        int v28 = v42;
        if (!v42) {
          return 0LL;
        }
      }

      else
      {
        int v28 = (_BYTE *)(a7 + a5 - 2);
        unint64_t v42 = v28;
        if (a7 + a5 == 2) {
          return 0LL;
        }
      }

      if (*v28 != 15 || v28[1] != 5) {
        return 0LL;
      }
      char SymbolWithAddressAtTime = a10;
      char v29 = a12;
      if (CSIsNull(a10, a12))
      {
        char SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime( a1,  a2,  a4,  0x8000000000000000LL);
        char v29 = v31;
      }

      if (CSIsNull(SymbolWithAddressAtTime, v29)) {
        return 0LL;
      }
      char SymbolOwner = CSSymbolGetSymbolOwner(SymbolWithAddressAtTime, v29);
      uint64_t v34 = v33;
      if (CSIsNull(SymbolOwner, v33)) {
        return 0LL;
      }
      Name = (const char *)CSSymbolOwnerGetName(SymbolOwner, v34);
      uint64_t v36 = "libsystem_kernel.dylib";
    }

    else
    {
      unint64_t v42 = 0LL;
      if (a7 < 5)
      {
        if (!a13) {
          return 0LL;
        }
        uint64_t v38 = v42;
        if (!v42) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v38 = (unsigned __int8 *)(a7 + a5 - 5);
        unint64_t v42 = v38;
        if (a7 + a5 == 5) {
          return 0LL;
        }
      }

      if (*v38 != 232) {
        return 0LL;
      }
      uint64_t v39 = *(int *)(v38 + 1);
      unsigned int v40 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, v39 + a4, 0x8000000000000000LL);
      Name = CSSymbolGetName((uint64_t)v40, v41);
      if (!Name) {
        return 0LL;
      }
      uint64_t v36 = "_sysenter_trap";
    }

    if (!strcmp(Name, v36)) {
      goto LABEL_45;
    }
    return 0LL;
  }

  if (v26 == 139)
  {
    unint64_t v37 = v25 + 1;
    return 0LL;
  }

  if (v26 == 195 || v26 == 203)
  {
    *a8 = 0LL;
    uint64_t result = 1LL;
    *a9 = 1LL;
  }

  return result;
}

BOOL _IsValidPC(const char *a1, tree *a2)
{
  BOOL result = 0;
  if ((unint64_t)a2 >= 0x800)
  {
    if (!a1) {
      return 1;
    }
    v5[1] = v2;
    v5[2] = v3;
    v5[0] = 0LL;
  }

  return result;
}

uint64_t _IsValidLinkRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t InstructionData = CSSymbolGetInstructionData(a4, a5);
  if (InstructionData)
  {
    uint64_t v12 = InstructionData;
    MangledName = (const char *)CSSymbolGetMangledName(a4, a5);
    if (MangledName && !strcmp(MangledName, "_objc_msgSend"))
    {
      char v14 = 1;
    }

    else
    {
      char v14 = 1;
      if ((a3 & 1) != 0) {
        char v15 = 1;
      }
      else {
        char v15 = 2;
      }
      unint64_t v16 = ((a3 & 0xFFFFFFFFFFFFFFFELL) - a1) >> v15;
      if (v16 >= 8) {
        unint64_t v16 = 8LL;
      }
      if ((_DWORD)v16)
      {
        uint64_t v17 = 0LL;
        int v18 = 0;
        if ((a3 & 1) != 0) {
          char v19 = 1;
        }
        else {
          char v19 = 2;
        }
        unint64_t v20 = a1 + ((_DWORD)v16 << v19);
        do
        {
          if (a6)
          {
            int v21 = *(_DWORD *)(v12 + 4 * v17);
            v18 |= (v21 & 0xFE407FFF) == -1476363267;
            BOOL v22 = (v21 & 0x1C000000) == 0x10000000 || (v21 & 0xE000000) == 167772160;
            if (!v22 || (*(_DWORD *)(v12 + 4 * v17) & 0x1Fu) - 29 >= 2) {
              goto LABEL_46;
            }
            char v14 = 0;
          }

          else
          {
            if ((a3 & 1) != 0)
            {
              int v31 = *(unsigned __int16 *)(v12 + 2 * v17);
              BOOL v22 = v31 == 18031;
              v18 |= (~v31 & 0xB500) == 0;
              int v32 = v31 & 0xFD87;
              int v33 = v31 & 0xFF00;
              BOOL v30 = v22 || v33 == 44800 || v32 == 17542;
              goto LABEL_42;
            }

            unsigned int v23 = *(_DWORD *)(v12 + 4 * v17);
            if (v23 >> 28 != 15)
            {
              BOOL v25 = (v23 & 0xE5F4000) == 0x80D4000 || (v23 & 0xC5FF000) == 69066752;
              v18 |= v25;
              int v26 = v23 & 0xC00F000;
              int v27 = v23 & 0xC0FF000;
              int v28 = v23 & 0xFFFFFFF;
              BOOL v30 = v27 == 880640 || v28 == 27291661 || v26 == 57344;
LABEL_42:
              char v35 = !v30;
              v14 &= v35;
LABEL_46:
            }
          }

          ++v17;
        }

        while (v16 != v17);
      }
    }
  }

  else
  {
    char v14 = 0;
  }

  return v14 & 1;
}

uint64_t _GetThumbInstruction(const char *a1, uint64_t a2, tree *a3)
{
  uint64_t v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (void *)(a2 + 8);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= (unint64_t)a3;
    else {
      BOOL v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }

  while (*v9);
  if (v6 != (void *)(a2 + 8) && v6[4] <= (unint64_t)a3)
  {
    return (unsigned __int16)*((_DWORD *)v6 + 10);
  }

  else
  {
LABEL_12:
    char v14 = 0LL;
    if (mapped_memory_read(a1, a3, 2LL, &v14))
    {
      LOWORD(std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10) = 0;
    }

    else
    {
      unint64_t v11 = (unsigned __int16)*v14;
      v13[0] = (unint64_t)a3;
      v13[1] = v11;
      std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>( (uint64_t **)a2,  v13,  (uint64_t)v13);
      LOWORD(std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10) = *v14;
    }
  }

  return (unsigned __int16)v10;
}

void std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy( uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy( a1,  *(void *)a2);
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy( a1,  *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }

uint64_t **std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x50uLL);
    uint64_t v12 = **a4;
    v11[9] = 0LL;
    *((_DWORD *)v11 + 16) = 0;
    void v11[6] = 0LL;
    void v11[7] = 0LL;
    v11[4] = v12;
    v11[5] = 0LL;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + _Block_object_dispose(va, 8) = **a4;
    *((void *)v11 + 10) = 0LL;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

CSThreadArm *_create_thread_state()
{
  unint64_t v0 = (CSThreadArm *)operator new(0x130uLL);
  CSThreadArm::CSThreadArm(v0);
  return v0;
}

void sub_186072498(_Unwind_Exception *a1)
{
}

uint64_t ___ZL19CheckForSecondFrameP18sampling_context_tP8CSThread_block_invoke(uint64_t a1)
{
  uint64_t result = CheckForSecondFrame2(*(void *)(a1 + 40), *(CSThread **)(a1 + 48));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t CheckForSecondFrame2(uint64_t result, CSThread *this)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = CSThread::GetLR(this, 0LL);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t PC = (tree *)CSThread::GetPC(this, -1LL);
      if ((*(_BYTE *)(v3 + 160) & 8) != 0)
      {
        uint64_t v6 = CSRangeOfDyldSharedCacheInCurrentProcess();
      }

      uint64_t result = _IsValidPC(*(const char **)(v3 + 8), PC);
      if (!(_DWORD)result) {
        return result;
      }
      if (CSIsNull(*(void *)(v3 + 24), *(void *)(v3 + 32))) {
        return 0LL;
      }
      char SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime( *(void *)(v3 + 24),  *(void *)(v3 + 32),  (uint64_t)PC,  0x8000000000000000LL);
      uint64_t v10 = v9;
      if (CSIsNull((char)SymbolWithAddressAtTime, v9))
      {
        return 0LL;
      }

      else
      {
        uint64_t result = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v10);
        if (result)
        {
          uint64_t result = _IsValidLinkRegister( result,  v11,  (uint64_t)PC,  (uint64_t)SymbolWithAddressAtTime,  v10,  *((unsigned __int8 *)this + 9));
          if ((_DWORD)result)
          {
            CSThread::SetPC(this, v4);
            return 1LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>( uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    void v10[4] = *(void *)a3;
    *((_DWORD *)v10 + 10) = *(_DWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

void TMMapSymbolOwnerData::TMMapSymbolOwnerData( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, TMMapArchive *a3)
{
  *((void *)this + 1) = 1LL;
  *((void *)this + 2) = 850045863LL;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 6_Block_object_dispose(va, 8) = 0u;
  *(void *)this = off_189DFA8F8;
  *((void *)this + 11) = a3;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v6 = (char *)this + 96;
  unint64_t v7 = (char *)this + 120;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 33) = 850045863LL;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0LL;
  *((void *)this + 41) = 850045863LL;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 21) = 0u;
  unint64_t v8 = *((unsigned int *)a3 + 2);
  unint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>( &v16,  (char *)a3 + 96,  (uint64_t)a3 + 32 * v8 + 96,  v8);
  unint64_t v9 = (char *)a2 + 32;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>((uint64_t)v9, (uint64_t)&v16, 1, &__p);
  __int128 v14 = 0uLL;
  uint64_t v15 = 0LL;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>( &v14,  __p,  (uint64_t)v13,  0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 3));
  uint64_t v10 = *(void **)v6;
  if (*(void *)v6)
  {
    *((void *)this + 13) = v10;
    operator delete(v10);
    *(void *)uint64_t v6 = 0LL;
    *((void *)v6 + 1) = 0LL;
    *((void *)v6 + 2) = 0LL;
  }

  *((_OWORD *)this + 6) = v14;
  *((void *)this + 14) = v15;
  uint64_t v15 = 0LL;
  __int128 v14 = 0uLL;
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }

  create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>((uint64_t)&v16, (uint64_t)v9, 1, &__p);
  __int128 v14 = 0uLL;
  uint64_t v15 = 0LL;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>( &v14,  __p,  (uint64_t)v13,  0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 3));
  uint64_t v11 = *(void **)v7;
  if (*(void *)v7)
  {
    *((void *)this + 16) = v11;
    operator delete(v11);
    *(void *)unint64_t v7 = 0LL;
    *((void *)v7 + 1) = 0LL;
    *((void *)v7 + 2) = 0LL;
  }

  *(_OWORD *)((char *)this + 120) = v14;
  *((void *)this + 17) = v15;
  uint64_t v15 = 0LL;
  __int128 v14 = 0uLL;
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }

  atomic_store(*((_DWORD *)a3 + 7), (unsigned int *)this + 3);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }

void sub_18607289C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  CSCppDeferredDemangler::~CSCppDeferredDemangler(v19);
  unsigned int v23 = *v20;
  if (*v20)
  {
    v17[16] = v23;
    operator delete(v23);
  }

  unint64_t v24 = *v21;
  if (*v21)
  {
    v17[13] = v24;
    operator delete(v24);
  }

  *uint64_t v17 = off_189DF5AE8;
  std::mutex::~mutex(v18);
  _Unwind_Resume(a1);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  unint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    unint64_t v48 = 0LL;
    unint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>( &v48,  v7,  v8,  v9 >> 5);
    uint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    uint64_t v46 = 0LL;
    uint64_t v47 = 0LL;
    std::string __p = 0LL;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>( &__p,  v11,  v12,  v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32LL)
    {
      unint64_t v15 = 126 - 2 * __clz((v49 - (_BYTE *)v48) >> 5);
      if (v49 == v48) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>( (unint64_t *)v48,  (unint64_t *)v49,  (uint64_t)&v51,  v16,  1);
      unint64_t v17 = 126 - 2 * __clz((v46 - (_BYTE *)__p) >> 5);
      if (v46 == __p) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>( (char *)__p,  v46,  (uint64_t)&v51,  v18,  1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }

    char v19 = (unint64_t *)v48;
    unint64_t v20 = (char *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    int v21 = v49;
    if (v19 != (unint64_t *)v49)
    {
      BOOL v22 = v46;
      if (v20 != v46)
      {
        while (1)
        {
          unsigned int v23 = (const char *)v19[3];
          if (!v23) {
            unsigned int v23 = (const char *)v19[2];
          }
          if (!strncmp(v20 + 16, v23, 0x10uLL)) {
            goto LABEL_23;
          }
          if (is_relocation_skippable(v23))
          {
            v19 += 4;
          }

          else
          {
            if (is_relocation_skippable(v20 + 16))
            {
              v20 += 32;
              goto LABEL_38;
            }

LABEL_23:
            uint64_t v24 = *(void *)v20;
            unint64_t v25 = *v19;
            unint64_t v26 = v19[1];
            unint64_t v27 = *(void *)v20 - *v19;
            char v29 = (unint64_t *)a4[1];
            unint64_t v28 = (unint64_t)a4[2];
            if ((unint64_t)v29 >= v28)
            {
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (_BYTE *)*a4) >> 3);
              unint64_t v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)*a4) >> 3);
              if (2 * v33 > v32) {
                unint64_t v32 = 2 * v33;
              }
              if (v33 >= 0x555555555555555LL) {
                unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v34 = v32;
              }
              char v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)(a4 + 2),  v34);
              unint64_t v37 = (unint64_t *)&v35[24 * v31];
              unint64_t *v37 = v25;
              v37[1] = v26;
              v37[2] = v27;
              uint64_t v39 = (char *)*a4;
              uint64_t v38 = (char *)a4[1];
              unsigned int v40 = v37;
              if (v38 != *a4)
              {
                do
                {
                  __int128 v41 = *(_OWORD *)(v38 - 24);
                  *(v40 - 1) = *((void *)v38 - 1);
                  *(_OWORD *)(v40 - 3) = v41;
                  v40 -= 3;
                  v38 -= 24;
                }

                while (v38 != v39);
                uint64_t v38 = (char *)*a4;
              }

              BOOL v30 = (char *)(v37 + 3);
              *a4 = v40;
              a4[1] = v37 + 3;
              a4[2] = &v35[24 * v36];
              if (v38) {
                operator delete(v38);
              }
            }

            else
            {
              *char v29 = v25;
              v29[1] = v26;
              BOOL v30 = (char *)(v29 + 3);
              v29[2] = v27;
            }

            a4[1] = v30;
            a3 |= v24 != v25;
            v19 += 4;
            int v21 = v49;
            v20 += 32;
            BOOL v22 = v46;
LABEL_38:
            if (v20 == v22) {
              break;
            }
          }
        }
      }
    }

    if ((a3 & 1) != 0)
    {
      unint64_t v42 = (unint64_t *)a4[1];
      unint64_t v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (_BYTE *)*a4) >> 3));
      if (v42 == *a4) {
        uint64_t v44 = 0LL;
      }
      else {
        uint64_t v44 = v43;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>( (uint64_t)*a4,  v42,  (uint64_t)&v51,  v44,  1);
    }

    else
    {
      a4[1] = *a4;
    }

    if (__p)
    {
      uint64_t v46 = (char *)__p;
      operator delete(__p);
    }

    if (v48)
    {
      unint64_t v49 = (char *)v48;
      operator delete(v48);
    }
  }

void sub_186072C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(va, 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  unint64_t v7 = *(const void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - *(void *)a1;
  if (v8 != *(void *)a1 && *(void *)(a2 + 8) != *(void *)a2)
  {
    unint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>( &v49,  v7,  v8,  v9 >> 5);
    uint64_t v11 = *(const void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    unint64_t v13 = (v12 - *(void *)a2) >> 5;
    uint64_t v47 = 0LL;
    uint64_t v48 = 0LL;
    std::string __p = 0LL;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>( &__p,  v11,  v12,  v13);
    uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    if (v14 != 32 && *(void *)(a2 + 8) - *(void *)a2 != 32LL)
    {
      unint64_t v15 = 126 - 2 * __clz((v50 - (_BYTE *)v49) >> 5);
      if (v50 == v49) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>( (char *)v49,  v50,  (uint64_t)&v52,  v16,  1);
      unint64_t v17 = 126 - 2 * __clz((v47 - (_BYTE *)__p) >> 5);
      if (v47 == __p) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = v17;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>( (unint64_t *)__p,  (unint64_t *)v47,  (uint64_t)&v52,  v18,  1);
      uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
    }

    char v19 = (char *)v49;
    unint64_t v20 = (unint64_t *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    int v21 = v50;
    if (v19 != v50)
    {
      BOOL v22 = v47;
      if (v20 != (unint64_t *)v47)
      {
        while (2)
        {
          unsigned int v23 = (const char *)v20[3];
          while (1)
          {
            uint64_t v24 = v23;
            if (!v23) {
              uint64_t v24 = (const char *)v20[2];
            }
            if (!strncmp(v24, v19 + 16, 0x10uLL)) {
              break;
            }
            if (!is_relocation_skippable(v19 + 16))
            {
              if (!v23) {
                unsigned int v23 = (const char *)v20[2];
              }
              if (is_relocation_skippable(v23))
              {
                if (v19 == v21) {
                  goto LABEL_42;
                }
                v20 += 4;
                goto LABEL_41;
              }

              break;
            }

            v19 += 32;
            if (v19 == v21) {
              goto LABEL_42;
            }
          }

          unint64_t v25 = *v20;
          uint64_t v26 = *(void *)v19;
          uint64_t v27 = *((void *)v19 + 1);
          unint64_t v28 = *v20 - *(void *)v19;
          BOOL v30 = (char *)a4[1];
          unint64_t v29 = (unint64_t)a4[2];
          if ((unint64_t)v30 >= v29)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)*a4) >> 3);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*a4) >> 3);
            if (2 * v34 > v33) {
              unint64_t v33 = 2 * v34;
            }
            if (v34 >= 0x555555555555555LL) {
              unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v35 = v33;
            }
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>( (uint64_t)(a4 + 2),  v35);
            uint64_t v38 = &v36[24 * v32];
            *(void *)uint64_t v38 = v26;
            *((void *)v38 + 1) = v27;
            *((void *)v38 + 2) = v28;
            unsigned int v40 = (char *)*a4;
            uint64_t v39 = (char *)a4[1];
            __int128 v41 = v38;
            if (v39 != *a4)
            {
              do
              {
                __int128 v42 = *(_OWORD *)(v39 - 24);
                *((void *)v41 - 1) = *((void *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }

              while (v39 != v40);
              uint64_t v39 = (char *)*a4;
            }

            unint64_t v31 = v38 + 24;
            *a4 = v41;
            a4[1] = v38 + 24;
            a4[2] = &v36[24 * v37];
            if (v39) {
              operator delete(v39);
            }
          }

          else
          {
            *(void *)BOOL v30 = v26;
            *((void *)v30 + 1) = v27;
            unint64_t v31 = v30 + 24;
            *((void *)v30 + 2) = v28;
          }

          a4[1] = v31;
          a3 |= v25 != v26;
          v19 += 32;
          int v21 = v50;
          if (v19 == v50) {
            break;
          }
          v20 += 4;
          BOOL v22 = v47;
LABEL_41:
          break;
        }
      }
    }

void sub_186072FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(va, 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

BOOL TMMapSymbolOwnerData::is_string_pointer_valid(TMMapArchive **this, char *a2)
{
  return TMMapArchive::is_pointer_within_strtab(this[11], a2);
}

BOOL TMMapArchive::is_pointer_within_strtab(TMMapArchive *this, char *a2)
{
  return (char *)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + *((unsigned int *)this + 20)
       + 96 <= a2
      && TMMapArchive::strtab_end(this) > (unint64_t)a2;
}

uint64_t TMMapSymbolOwnerData::convert_archive_address_to_real_address( TMMapSymbolOwnerData *this, unint64_t a2, unint64_t *a3)
{
  return TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 15, a2, a3);
}

uint64_t TMMapSymbolOwnerData::regions_in_address_range( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 12LL)) {
    BOOL v5 = a3 == -1LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  unint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1LL;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::regions_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }

    v7 += 3;
  }

  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::regions_in_real_address_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  else {
    return 0LL;
  }
}

uint64_t TMMapSymbolOwnerData::footprint(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 4LL) + 416LL;
}

unint64_t TMMapSymbolOwnerData::regions_in_archive_address_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 88);
  unsigned int v8 = *(_DWORD *)(v7 + 12);
  unint64_t v13 = v7 + (32 * *(_DWORD *)(v7 + 8)) + 96;
  unint64_t v12 = v13 + 24LL * v8;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3);
  if (a5)
  {
    uint64_t v10 = a2 | 4;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
      v13 += 24LL;
    }

    while (v13 < v12);
  }

  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<TMMapRegionImpl<Pointer64>>( unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = (void *)*a3;
  BOOL v5 = (void *)*a4;
  uint64_t v6 = (void *)*a3;
  if (*a4 != *a3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a4 - *a3) >> 3);
    uint64_t v6 = (void *)*a3;
    do
    {
      unint64_t v8 = v7 >> 1;
      unint64_t v9 = &v6[3 * (v7 >> 1)];
      unint64_t v11 = *v9;
      uint64_t v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (a1 < v11) {
        unint64_t v7 = v8;
      }
      else {
        uint64_t v6 = v10;
      }
    }

    while (v7);
  }

  while (v6 != v4)
  {
    uint64_t v12 = *(v6 - 3);
    unint64_t v13 = *(v6 - 2);
    v6 -= 3;
    if (a1 - v12 >= v13)
    {
      uint64_t v4 = v6 + 3;
      break;
    }
  }

  *a3 = v4;
  if (v5 != v4)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    BOOL v5 = v4;
    do
    {
      unint64_t v15 = v14 >> 1;
      unint64_t v16 = &v5[3 * (v14 >> 1)];
      unint64_t v18 = *v16;
      unint64_t v17 = v16 + 3;
      v14 += ~(v14 >> 1);
      if (a1 + a2 - 1 < v18) {
        unint64_t v14 = v15;
      }
      else {
        BOOL v5 = v17;
      }
    }

    while (v14);
  }

  *a4 = v5;
  return *a3 != (void)v5;
}

uint64_t TMMapSymbolOwnerData::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 88);
  uint64_t v4 = v3[4];
  if (a3 && (_DWORD)v4)
  {
    uint64_t v6 = (uint64_t)v3 + 32 * v3[2] + (24 * v3[3]) + 96;
    uint64_t v7 = a2 | 5;
    uint64_t v8 = v3[4];
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 24LL;
      --v8;
    }

    while (v8);
  }

  return v4;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_in_archive( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  __s2 = a3;
  unint64_t v9 = *(TMMapArchive **)(a1 + 88);
  int v10 = *((_DWORD *)v9 + 4);
  unint64_t v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
  uint64_t v12 = (_DWORD *)((char *)v11 + *((unsigned int *)v9 + 22));
  unint64_t v13 = (TMMapArchive *)((char *)v12 + (4 * v10) + (unint64_t)*((unsigned int *)v9 + 20));
  v25[0] = v13;
  v25[1] = v9;
  unint64_t v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>( v11,  v12,  (const char **)&__s2,  v25);
  unint64_t v16 = v14;
  unint64_t v17 = v15;
  if (a5)
  {
    if (v14 != v15)
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = a2 | 5;
      unint64_t v20 = v14;
      do
      {
        int v21 = (char *)v16 - *v20;
        if (!TMMapArchive::is_pointer_within_strtab( *(TMMapArchive **)(a1 + 88),  (char *)v13 + *((unsigned int *)v21 + 3))
          || strcmp((const char *)v13 + *((unsigned int *)v21 + 3), __s2))
        {
          break;
        }

        if (a4) {
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v19, v21);
        }
        ++v18;
        ++v20;
        ++v16;
      }

      while (v20 != v17);
      return v18;
    }

    return 0LL;
  }

  BOOL v22 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v22 + 3))
    || strcmp((const char *)v13 + *((unsigned int *)v22 + 3), __s2))
  {
    return 0LL;
  }

  if (a4) {
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v22);
  }
  return 1LL;
}

void sub_186073634(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1860735E0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  unint64_t v9 = (CSCppDeferredDemangler *)(a1 + 144);
  CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(a1 + 144, a1, a2);
  int v10 = CSCppDeferredDemangler::mmapSymbolAddressesForDemangledName(v9, a3);
  if (v10 == v11) {
    return 0LL;
  }
  uint64_t v12 = v10;
  unint64_t v13 = v11;
  uint64_t v14 = 0LL;
  unint64_t v15 = v10;
  do
  {
    ++v14;
    unint64_t v15 = (uint64_t **)*v15;
  }

  while (v15 != v11);
  if (a5)
  {
    if (v10 != v11)
    {
      uint64_t v16 = a2 | 5;
      do
      {
        if (a4) {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, v16, v12[4]);
        }
        uint64_t v12 = (uint64_t **)*v12;
      }

      while (v12 != v13);
    }
  }

  else if (a4 && v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, a2 | 5, v10[4]);
  }

  return v14;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 1);
  return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 1) + v8;
}

uint64_t TMMapSymbolOwnerData::symbol_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t result = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 0);
  if (!result) {
    return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 0);
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  __s2 = a3;
  unint64_t v9 = *(TMMapArchive **)(a1 + 88);
  int v10 = *((_DWORD *)v9 + 4);
  unint64_t v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
                 + (20 * *((_DWORD *)v9 + 6))
  uint64_t v12 = (_DWORD *)((char *)v11 + (4 * v10));
  unint64_t v13 = (TMMapArchive *)((char *)v12 + *((unsigned int *)v9 + 20));
  v24[0] = v13;
  v24[1] = v9;
  uint64_t v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>( v11,  v12,  (const char **)&__s2,  v24);
  uint64_t v16 = v14;
  if (a5)
  {
    if (v14 != v12)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = a2 | 5;
      uint64_t v19 = v14;
      do
      {
        unint64_t v20 = (char *)v16 - *v19;
        if (!TMMapArchive::is_pointer_within_strtab( *(TMMapArchive **)(a1 + 88),  (char *)v13 + *((unsigned int *)v20 + 4))
          || strcmp((const char *)v13 + *((unsigned int *)v20 + 4), __s2))
        {
          break;
        }

        if (a4) {
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v18, v20);
        }
        ++v17;
        ++v19;
        ++v16;
      }

      while (v19 != v12);
      return v17;
    }

    return 0LL;
  }

  if (v15 - (void)v14 != 4) {
    return (v15 - (uint64_t)v14) >> 2;
  }
  int v21 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v21 + 4))
    || strcmp((const char *)v13 + *((unsigned int *)v21 + 4), __s2))
  {
    return 0LL;
  }

  if (a4) {
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v21);
  }
  return 1LL;
}

void sub_1860739C0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18607396CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 1);
}

uint64_t TMMapSymbolOwnerData::symbol_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 0);
}

uint64_t TMMapSymbolOwnerData::symbols_in_address_range( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 16LL)) {
    BOOL v5 = a3 == -1LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  uint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1LL;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::symbols_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }

    v7 += 3;
  }

  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::symbols_in_real_address_range( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 16LL)
    || !TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0LL;
  }

  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  return TMMapSymbolOwnerData::symbols_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::symbols_in_archive_address_range( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(_DWORD **)(a1 + 88);
  int v5 = v4[4];
  if (!v5) {
    return 0LL;
  }
  uint64_t v8 = (char *)v4 + 32 * v4[2] + (24 * v4[3]) + 96;
  uint64_t v12 = &v8[24 * v5];
  unint64_t v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(a3, &v13, &v12)) {
    return 0LL;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
  if (a4)
  {
    uint64_t v10 = a2 | 5;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 24;
    }

    while (v13 < v12);
  }

  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = *a2;
  if (*a3 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((*a3 - *a2) >> 3);
    int v5 = *a2;
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = (unsigned int *)&v5[24 * (v6 >> 1)];
      unsigned int v10 = *v8;
      unint64_t v9 = (char *)(v8 + 6);
      v6 += ~(v6 >> 1);
      else {
        int v5 = v9;
      }
    }

    while (v6);
  }

  while (v5 != v3)
  {
    int v11 = *((_DWORD *)v5 - 6);
    unsigned int v12 = *((_DWORD *)v5 - 5);
    v5 -= 24;
    if ((int)a1 - v11 >= v12)
    {
      uint64_t v3 = v5 + 24;
      break;
    }
  }

  *a2 = v3;
  if (v4 != v3)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
    uint64_t v4 = v3;
    do
    {
      unint64_t v14 = v13 >> 1;
      unint64_t v15 = (unsigned int *)&v4[24 * (v13 >> 1)];
      unsigned int v17 = *v15;
      unint64_t v16 = (char *)(v15 + 6);
      v13 += ~(v13 >> 1);
      else {
        uint64_t v4 = v16;
      }
    }

    while (v13);
  }

  *a3 = v4;
  return *a2 != v4;
}

uint64_t TMMapSymbolOwnerData::symbol_for_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1LL) {
    return 0LL;
  }
  else {
    return TMMapSymbolOwnerData::symbol_for_real_address(this, a2, a3);
  }
}

uint64_t TMMapSymbolOwnerData::symbol_for_real_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 12, a3, v6)
    && *(void *)v6 <= 0xFFFFFFFEuLL)
  {
    return TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, v6[0]);
  }

  else
  {
    return 0LL;
  }

uint64_t TMMapSymbolOwnerData::symbol_for_archive_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  uint64_t v6 = 0LL;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x3802000000LL;
  unint64_t v9 = __Block_byref_object_copy__14;
  unsigned int v10 = __Block_byref_object_dispose__14;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke;
  void v5[3] = &unk_189DFA9F0;
  void v5[4] = &v6;
  TMMapSymbolOwnerData::symbols_in_archive_address_range((uint64_t)this, (uint64_t)a2, a3 | 0x100000000LL, (uint64_t)v5);
  uint64_t v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_186073E44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke( uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 9) & 2) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(result + 32) + 8LL);
    *(void *)(v3 + 40) = a2;
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = a3;
  }

  return result;
}

unint64_t TMMapSymbolOwnerData::child_for_archive_address(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3 != -1)
  {
    uint64_t v4 = *(unsigned int **)(a1 + 88);
    uint64_t v5 = v4[5];
    if (v3 < v5)
    {
      unint64_t v6 = (unint64_t)&v4[9 * v3 + 24 + 8 * v4[2] + 6 * v4[3] + 6 * v4[4]];
      uint64_t v7 = ~v3 + v5;
      unint64_t v8 = v6;
      while (v6 >= (unint64_t)v4)
      {
        uint64_t v9 = v7;
        unint64_t result = 0LL;
        if ((*(_BYTE *)(v8 + 11) & 0x40) == 0)
        {
          --v7;
          v8 += 36LL;
          if (v9) {
            continue;
          }
        }

        return result;
      }
    }
  }

  return 0LL;
}

uint64_t TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3 == -1) {
    return 0LL;
  }
  unint64_t v8 = *(_DWORD **)(a1 + 88);
  uint64_t v9 = (char *)v8 + 32 * v8[2] + (24 * v8[3]);
  int v11 = v8[4];
  unsigned int v10 = v8[5];
  uint64_t v12 = (uint64_t)&v9[36 * v3 + 24 * v11];
  else {
    uint64_t v13 = v3;
  }
  uint64_t v14 = v13 - v3;
  unint64_t v15 = v12 + 96;
  while (v14)
  {
    unint64_t v16 = *(void *)(a1 + 88);
    if (v16 <= v15 && v15 < *(unsigned int *)(v16 + 4) + v16)
    {
      (*(void (**)(uint64_t, unint64_t))(a3 + 16))(a3, v15);
      LODWORD(v3) = v3 + 1;
      --v14;
      char v17 = *(_BYTE *)(v15 + 11);
      v15 += 36LL;
      if ((v17 & 0x40) == 0) {
        continue;
      }
    }

    return (v3 - *(_DWORD *)(a2 + 20));
  }

  LODWORD(v3) = v13;
  return (v3 - *(_DWORD *)(a2 + 20));
}

uint64_t TMMapSymbolOwnerData::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 88);
  uint64_t v4 = v3[6];
  if (a3 && (_DWORD)v4)
  {
    unint64_t v6 = (unint64_t)v3
       + 32 * v3[2]
       + 24 * v3[3]
       + (24 * v3[4])
    uint64_t v7 = a2 | 6;
    uint64_t v8 = v3[6];
    do
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 20LL;
      --v8;
    }

    while (v8);
  }

  return v4;
}

uint64_t TMMapSymbolOwnerData::source_infos_in_address_range( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1[11] + 24LL)) {
    BOOL v5 = a3 == -1LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  uint64_t v7 = (unint64_t *)a1[12];
  uint64_t v8 = (unint64_t *)a1[13];
  if (v7 == v8) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  if (__CFADD__(a4, a3)) {
    unint64_t v13 = -1LL;
  }
  else {
    unint64_t v13 = a4 + a3;
  }
  do
  {
    unint64_t v14 = *v7;
    if (*v7 < v13)
    {
      unint64_t v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3) {
          unint64_t v16 = a3;
        }
        else {
          unint64_t v16 = *v7;
        }
        if (v13 >= v15) {
          unint64_t v17 = v7[1] + v14;
        }
        else {
          unint64_t v17 = v13;
        }
        if (v17 != v16) {
          v12 += TMMapSymbolOwnerData::source_infos_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
        }
      }
    }

    v7 += 3;
  }

  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::source_infos_in_real_address_range( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 24LL)
    || !TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0LL;
  }

  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  return TMMapSymbolOwnerData::source_infos_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::source_infos_in_archive_address_range( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v5 = *(_DWORD *)(v4 + 24);
  if (!v5) {
    return 0LL;
  }
  unint64_t v8 = v4 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v4 + 8), (int32x4_t)xmmword_1860A02E0)) + 96;
  unint64_t v12 = v8 + 20LL * v5;
  unint64_t v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(a3, &v13, &v12)) {
    return 0LL;
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v13) >> 2);
  if (a4)
  {
    uint64_t v10 = a2 | 6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 20LL;
    }

    while (v13 < v12);
  }

  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (_DWORD *)*a2;
  uint64_t v4 = (_DWORD *)*a3;
  unsigned int v5 = (_DWORD *)*a2;
  if (*a3 != *a2)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a3 - *a2) >> 2);
    unsigned int v5 = (_DWORD *)*a2;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v5[5 * (v6 >> 1)];
      unsigned int v10 = *v8;
      unint64_t v9 = v8 + 5;
      v6 += ~(v6 >> 1);
      else {
        unsigned int v5 = v9;
      }
    }

    while (v6);
  }

  while (v5 != v3)
  {
    int v11 = *(v5 - 5);
    unsigned int v12 = *(v5 - 4);
    v5 -= 5;
    if ((int)a1 - v11 >= v12)
    {
      uint64_t v3 = v5 + 5;
      break;
    }
  }

  *a2 = v3;
  if (v4 != v3)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v4 - v3);
    uint64_t v4 = v3;
    do
    {
      unint64_t v14 = v13 >> 1;
      unint64_t v15 = &v4[5 * (v13 >> 1)];
      unsigned int v17 = *v15;
      unint64_t v16 = v15 + 5;
      v13 += ~(v13 >> 1);
      else {
        uint64_t v4 = v16;
      }
    }

    while (v13);
  }

  *a3 = v4;
  return *a2 != (void)v4;
}

unint64_t TMMapSymbolOwnerData::source_info_for_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1LL) {
    return 0LL;
  }
  else {
    return TMMapSymbolOwnerData::source_info_for_real_address(this, a2, a3);
  }
}

unint64_t TMMapSymbolOwnerData::source_info_for_real_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  int v5 = TThreadsafeAddressRelocator<Pointer64>::relocate((void *)this + 12, a3, v7);
  unint64_t result = 0LL;
  if (v5)
  {
    if (*(void *)v7 <= 0xFFFFFFFEuLL) {
      return TMMapSymbolOwnerData::source_info_for_archive_address(this, a2, v7[0]);
    }
  }

  return result;
}

unint64_t TMMapSymbolOwnerData::source_info_for_archive_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  if (!*(_DWORD *)(*((void *)this + 11) + 24LL)) {
    return 0LL;
  }
  char v6 = TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, a3);
  uint64_t v8 = v7;
  if (!CSIsNull(v6, v7)
    && TMMapSymbolOwnerData::child_for_archive_address((uint64_t)this, v8 & 0xFFFFFFFFFFFFFFFCLL, a3))
  {
    return (unint64_t)a2 | 5;
  }

  if (TMMapSymbolOwnerData::do_source_info_lookup(this, a3)) {
    return (unint64_t)a2 | 6;
  }
  return 0LL;
}

_DWORD *TMMapSymbolOwnerData::do_source_info_lookup(TMMapSymbolOwnerData *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 11);
  unint64_t v3 = *(unsigned int *)(v2 + 24);
  if (!(_DWORD)v3) {
    return 0LL;
  }
  unint64_t v4 = v2 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v2 + 8), (int32x4_t)xmmword_1860A02E0)) + 96;
  unint64_t v5 = v3;
  unint64_t v6 = v4;
  do
  {
    unint64_t v7 = v5 >> 1;
    uint64_t v8 = (unsigned int *)(v6 + 20 * (v5 >> 1));
    unsigned int v10 = *v8;
    unint64_t v9 = v8 + 5;
    v5 += ~(v5 >> 1);
    if (v10 > a2) {
      unint64_t v5 = v7;
    }
    else {
      unint64_t v6 = (unint64_t)v9;
    }
  }

  while (v5);
  if (v6 == v4) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = -1LL;
  }
  unsigned int v12 = (_DWORD *)(v6 + 20 * v11);
  if (a2 - *v12 >= v12[1]) {
    return 0LL;
  }
  else {
    return v12;
  }
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_address( TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  if (a3 == -1LL) {
    return 0LL;
  }
  else {
    return TMMapSymbolOwnerData::for_each_stack_frame_at_real_address(a1, a2, a3, a4);
  }
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_real_address( TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  else {
    return 0LL;
  }
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_archive_address( TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unsigned int a3, uint64_t a4)
{
  char v8 = TMMapSymbolOwnerData::symbol_for_archive_address(a1, a2, a3);
  uint64_t v10 = v9;
  if (CSIsNull(v8, v9)) {
    return 0LL;
  }
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  unsigned int v12 = TMMapSymbolOwnerData::do_source_info_lookup(a1, a3);
  if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    return 0LL;
  }
  unint64_t v13 = v12;
  uint64_t v14 = (unint64_t)a2 | 5;
  uint64_t v15 = (unint64_t)a2 | 6;
  unint64_t v16 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v11, a3);
  if (v16)
  {
    unint64_t v17 = v16;
    uint64_t v18 = 1LL;
    do
    {
      if ((*(_DWORD *)(v17 + 8) & 0x80000000) != 0) {
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(a4 + 16))( a4,  v14,  v11,  v14,  v17);
      }
      else {
        (*(void (**)(uint64_t, uint64_t, unint64_t, void, void))(a4 + 16))(a4, v14, v11, 0LL, 0LL);
      }
      unint64_t v11 = v17;
      ++v18;
      unint64_t v17 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v17, a3);
    }

    while (v17);
  }

  else
  {
    uint64_t v18 = 1LL;
  }

  if (v13) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = 0LL;
  }
  if (v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = 0LL;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *))(a4 + 16))(a4, v14, v11, v19, v20);
  return v18;
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  BOOL v30 = 0LL;
  unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  std::string __p = 0LL;
  unsigned int v23 = 0LL;
  uint64_t v24 = 0LL;
  unsigned int v11 = *(_DWORD *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  if ((TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 120), v11, &v21) & 1) != 0)
  {
    v19[1] = a6;
    uint64_t v20 = 0LL;
    v19[0] = &v20;
    unsigned int v12 = operator new(0x48uLL);
    *unsigned int v12 = off_189DFAA38;
    v12[1] = v29;
    void v12[2] = &v25;
    v12[3] = &__p;
    void v12[4] = a2;
    v12[5] = v19;
    v12[6] = &v21;
    *((_DWORD *)v12 + 14) = a5;
    v12[8] = a1;
    unint64_t v32 = (uint8_t *)v12;
    std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100](buf, v29);
    unint64_t v13 = v32;
    if (v32 == buf)
    {
      uint64_t v14 = 4LL;
      unint64_t v13 = buf;
    }

    else
    {
      if (!v32)
      {
LABEL_10:
        *(void *)__int128 buf = v10;
        uint64_t v28 = 0LL;
        if (!v30) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, uint8_t *, uint64_t *))(*v30 + 48LL))(v30, buf, &v28);
        uint64_t v15 = v20;
        if (__p)
        {
          unsigned int v23 = __p;
          operator delete(__p);
        }

        goto LABEL_13;
      }

      uint64_t v14 = 5LL;
    }

    (*(void (**)(void))(*(void *)v13 + 8 * v14))();
    goto LABEL_10;
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Symbol archive address 0x%x could not be relocated to real address\n",  buf,  8u);
  }

  fprintf((FILE *)*MEMORY[0x1895F89D0], "Symbol archive address 0x%x could not be relocated to real address\n", v11);
  uint64_t v15 = 0LL;
LABEL_13:
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }

  unint64_t v16 = v30;
  if (v30 == v29)
  {
    uint64_t v17 = 4LL;
    unint64_t v16 = v29;
    goto LABEL_19;
  }

  if (v30)
  {
    uint64_t v17 = 5LL;
LABEL_19:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  return v15;
}

void sub_186074998( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char *a24)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v25 = a24;
  if (a24 == &a21)
  {
    uint64_t v26 = 4LL;
    unint64_t v25 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_8;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_range( void *a1, os_unfair_lock_s **a2, unint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1[11] + 76LL);
  unsigned int v9 = (CSCppSymbolicator::flags(a2[1]) >> 8) & 1;
  if (v8) {
    LOBYTE(v9) = 0;
  }
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  if (a3 == -1LL) {
    return 0LL;
  }
  unint64_t v10 = (unint64_t *)a1[12];
  unsigned int v11 = (unint64_t *)a1[13];
  if (v10 == v11) {
    return 0LL;
  }
  unint64_t v12 = a4 + a3;
  if (__CFADD__(a4, a3)) {
    unint64_t v12 = -1LL;
  }
  while (1)
  {
    unint64_t v13 = *v10;
    if (*v10 < v12)
    {
      unint64_t v14 = v10[1] + v13;
      if (a3 < v14)
      {
        unint64_t v15 = v13 <= a3 ? a3 : *v10;
        unint64_t v16 = v12 >= v14 ? v10[1] + v13 : v12;
        if (v16 != v15) {
          break;
        }
      }
    }

    v10 += 3;
    if (v10 == v11) {
      return 0LL;
    }
  }

  return TMMapSymbolOwnerData::raw_bytes_for_real_range((uint64_t)a1, (CSCppSymbolOwner *)a2, v15, v16 - v15);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_real_range( uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, unint64_t a4)
{
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  }

  unint64_t v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4) {
    unint64_t v9 = a4;
  }
  unint64_t result = TMMapSymbolOwnerData::raw_bytes_for_archive_range(a1, v8, v11 | (v9 << 32));
  if (!result) {
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_archive_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(v3 + 76);
  if (a3 >= v4
    && HIDWORD(a3) + (int)a3 <= (HIDWORD(v4) + v4)
    && (unint64_t v5 = v3
           + (32 * *(_DWORD *)(v3 + 8))
           + (24 * *(_DWORD *)(v3 + 12))
           + (24 * *(_DWORD *)(v3 + 16))
           + (unint64_t)(4 * *(_DWORD *)(v3 + 16))
           + (36 * *(_DWORD *)(v3 + 20))
           + (unint64_t)(20 * *(_DWORD *)(v3 + 24))
           + *(unsigned int *)(v3 + 88)
           + 96) != 0)
  {
    return v5 + (a3 - v4);
  }

  else
  {
    return 0LL;
  }

uint64_t TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault( uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (!*(void *)(a1 + 408))
  {
    unint64_t v9 = operator new(0x58uLL);
    *unint64_t v9 = 0u;
    v9[1] = 0u;
    *(void *)unint64_t v9 = (char *)v9 + 8;
    *((void *)v9 + 3) = 850045863LL;
    _OWORD v9[2] = 0u;
    void v9[3] = 0u;
    v9[4] = 0u;
    *((void *)v9 + 10) = 0LL;
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = v9;
  }

  std::mutex::unlock(v8);
  uint64_t result = CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(*(void *)(a1 + 408), a3, a4);
  if (result
    || (uint64_t result = (uint64_t)CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range( *(void *)(a1 + 408),  a2,  a3,  a4)) != 0)
  {
    CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>(result, a3, a4, (uint64_t)a2, (uint64_t)v12);
    if (a4 + a3 <= v12[0] + v12[1]) {
      unint64_t v11 = v12[2] + a3 - v12[0];
    }
    else {
      unint64_t v11 = 0LL;
    }
    if (a3 >= v12[0]) {
      return v11;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void sub_186074CF4(_Unwind_Exception *a1)
{
}

TMMapSymbolOwnerData *TMMapSymbolOwnerData::_augment_data_to_include_text_section( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  uint64_t v3 = (unsigned int *)((char *)this + 12);
  __int16 v4 = atomic_load((unsigned int *)this + 3);
  if ((v4 & 0x1000) != 0)
  {
    unint64_t v10 = 0LL;
  }

  else
  {
    std::mutex::lock((std::mutex *)((char *)this + 16));
    __int16 v7 = atomic_load(v3);
    if ((v7 & 0x1000) != 0
      || (uint64_t v8 = CSCppMMapArchiveCache::augment_mmap_archive_to_include_text_section( *((CSCppMMapArchiveCache **)this + 11),  a2,  v6),  (v9 = v8) == 0LL)
      || v8 == *((CSCppMMapArchiveCache **)this + 11))
    {
      unint64_t v10 = 0LL;
    }

    else
    {
      unint64_t v10 = (TMMapSymbolOwnerData *)operator new(0x1A0uLL);
      TMMapSymbolOwnerData::TMMapSymbolOwnerData(v10, a2, v9);
    }

    std::mutex::unlock((std::mutex *)((char *)this + 16));
  }

  if (v10) {
    return v10;
  }
  else {
    return this;
  }
}

void sub_186074DB0(_Unwind_Exception *a1)
{
}

const char *TMMapSymbolOwnerData::demangledNameForSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 88);
  uint64_t result = CSCppDeferredDemangler::demangledNameForSymbol( a1 + 144,  a2,  (uint64_t)v2 + 32 * v2[2] + 24 * v2[3] + (24 * v2[4])
           + (unint64_t)(4 * v2[4])
           + (36 * v2[5])
           + (20 * v2[6])
           + v2[22]
           + v2[20]
           + 96);
  if (!v4) {
    return 0LL;
  }
  return result;
}

void TMMapSymbolOwnerData::~TMMapSymbolOwnerData(TMMapSymbolOwnerData *this, TMMapArchive *a2)
{
  *(void *)this = off_189DFA8F8;
  uint64_t v3 = *((void *)this + 51);
  if (v3)
  {
    uint64_t v4 = (void *)CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(v3);
    operator delete(v4);
  }

  CSCppMMapArchiveCache::release_archive(*((void *)this + 11), a2);
  CSCppDeferredDemangler::~CSCppDeferredDemangler((TMMapSymbolOwnerData *)((char *)this + 144));
  unint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }

  unint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }

  *(void *)this = off_189DF5AE8;
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  void *v2;
  TMMapSymbolOwnerData::~TMMapSymbolOwnerData(this, a2);
  operator delete(v2);
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_path_for_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0LL;
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_name_for_address( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0LL;
}

uint64_t TMMapSymbolOwnerData::unique_relinked_subdylib_count( TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0LL;
}

uint64_t TMMapSymbolOwnerData::type_id(TMMapSymbolOwnerData *this)
{
  return 4LL;
}

uint64_t TMMapSymbolOwnerData::dsym_path(TMMapArchive **this)
{
  return TMMapArchive::dsym_path(this[11]);
}

uint64_t TMMapSymbolOwnerData::dylib_current_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 32LL);
}

uint64_t TMMapSymbolOwnerData::dylib_compatibility_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((void *)this + 11) + 36LL);
}

uint64_t TMMapSymbolOwnerData::version(TMMapArchive **this)
{
  return TMMapArchive::version(this[11]);
}

char *TMMapSymbolOwnerData::optional_symbolicator_flags(TMMapSymbolOwnerData *this)
{
  uint64_t result = (char *)*((void *)this + 11);
  if (result)
  {
    uint64_t result = TMMapArchive::optional_data((TMMapArchive *)result);
    if (result)
    {
      if (*((_DWORD *)result + 1))
      {
        if (*((_DWORD *)result + 2) >= 0x14u) {
          result += 16;
        }
        else {
          return 0LL;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186074FD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    uint64_t v7 = a1;
    unint64_t v8 = a2 - a1;
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      unint64_t v11 = *a3;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        uint64_t v7 = v10 + 1;
        unint64_t v9 = v8 + ~v9;
      }

      else
      {
        unint64_t v13 = *a3;
        unint64_t v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
        SearchSymbolByName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          uint64_t v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>( v7,  &v7[v8 >> 1],  a3,  this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>( v10 + 1,  v4,  a3,  this);
          return v7;
        }

        uint64_t v4 = &v7[v8 >> 1];
      }

      unint64_t v8 = v9;
      if (!v9) {
        return v7;
      }
    }
  }

  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      int v13 = strcmp(v12, v8);
      if (v13 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v13 < 0) {
        uint64_t v4 = v10;
      }
    }

    while (v7);
  }

  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }

      else
      {
        uint64_t v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }

    while (v7);
  }

  return v4;
}

BOOL SearchSymbolByName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  BOOL result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x186E30D68](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1896146E8], MEMORY[0x189614248]);
  }

  return result;
}

void sub_1860752DC(_Unwind_Exception *a1)
{
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a1;
    unint64_t v8 = a2 - a1;
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      unsigned int v11 = *a3;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        unint64_t v7 = v10 + 1;
        unint64_t v9 = v8 + ~v9;
      }

      else
      {
        int v13 = *a3;
        unint64_t v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
        SearchSymbolByMangledName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          unint64_t v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>( v7,  &v7[v8 >> 1],  a3,  this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>( v10 + 1,  v4,  a3,  this);
          return v7;
        }

        uint64_t v4 = &v7[v8 >> 1];
      }

      unint64_t v8 = v9;
      if (!v9) {
        return v7;
      }
    }
  }

  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      int v13 = strcmp(v12, v8);
      if (v13 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v13 < 0) {
        uint64_t v4 = v10;
      }
    }

    while (v7);
  }

  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>( _DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      unint64_t v8 = *a3;
      unint64_t v9 = &v4[v7 >> 1];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 1;
      unint64_t v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }

      else
      {
        uint64_t v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }

    while (v7);
  }

  return v4;
}

BOOL SearchSymbolByMangledName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  BOOL result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x186E30D68](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1896146E8], MEMORY[0x189614248]);
  }

  return result;
}

void sub_1860755D8(_Unwind_Exception *a1)
{
}

void *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_186075648(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1)) {
          uint64_t v24 = (const char *)*(a2 - 1);
        }
        else {
          uint64_t v24 = (const char *)*(a2 - 2);
        }
        if (v9[3]) {
          unint64_t v25 = (const char *)v9[3];
        }
        else {
          unint64_t v25 = (const char *)v9[2];
        }
        int v26 = strncmp(v24, v25, 0x10uLL);
        unint64_t v28 = *(a2 - 4);
        uint64_t v27 = a2 - 4;
        BOOL v29 = v28 < *v9;
        if (v26) {
          BOOL v29 = v26 < 0;
        }
        if (v29)
        {
          __int128 v32 = *(_OWORD *)v9;
          __int128 v34 = *((_OWORD *)v9 + 1);
          __int128 v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)unint64_t v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)uint64_t v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  v9 + 12,  a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( &v9[4 * (v13 >> 1)],  v9,  a2 - 4);
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  &v9[4 * (v13 >> 1)],  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 4,  v15 - 4,  a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 8,  &v9[4 * v14 + 4],  a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v15 - 4,  v15,  &v9[4 * v14 + 4]);
            __int128 v31 = *(_OWORD *)v9;
            __int128 v33 = *((_OWORD *)v9 + 1);
            __int128 v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)unint64_t v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          if (*(v9 - 1)) {
            uint64_t v17 = (const char *)*(v9 - 1);
          }
          else {
            uint64_t v17 = (const char *)*(v9 - 2);
          }
          if (v9[3]) {
            uint64_t v18 = (const char *)v9[3];
          }
          else {
            uint64_t v18 = (const char *)v9[2];
          }
          int v19 = strncmp(v17, v18, 0x10uLL);
          BOOL v20 = *(v9 - 4) < *v9;
          if (v19) {
            BOOL v20 = v19 < 0;
          }
          if (!v20)
          {
            unint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( v9,  a2);
            goto LABEL_24;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(a2 - 1)) {
        unint64_t v6 = (const char *)*(a2 - 1);
      }
      else {
        unint64_t v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        uint64_t v7 = (const char *)a1[3];
      }
      else {
        uint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      unint64_t v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        __int128 v13 = *(_OWORD *)a1;
        __int128 v12 = *((_OWORD *)a1 + 1);
        __int128 v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)unint64_t v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a2 - 4);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a2 - 4);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a1 + 12,  a2 - 4);
      return 1LL;
    default:
      unint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8);
      __int128 v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1LL;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      __int128 v33 = v2;
      break;
  }

  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      uint64_t v21 = (const char *)v16[3];
    }
    else {
      uint64_t v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      char v22 = (const char *)v15[3];
    }
    else {
      char v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (char *)a1 + v26;
        __int128 v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          BOOL v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          BOOL v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32LL;
        if (!v31)
        {
          __int128 v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }

      __int128 v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      *__int128 v32 = v24;
      v32[1] = v34;
      __int128 v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }

    unint64_t v15 = v16;
    v17 += 32LL;
    v16 += 4;
    if (v16 == v2) {
      return 1LL;
    }
  }

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>( char *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = a2 - v9;
    unint64_t v13 = (a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        int v22 = strncmp(a2 - 16, v9 + 16, 0x10uLL);
        unint64_t v24 = *((void *)a2 - 4);
        int v23 = a2 - 32;
        BOOL v25 = v24 < *(void *)v9;
        if (v22) {
          BOOL v25 = v22 < 0;
        }
        if (v25)
        {
          __int128 v28 = *(_OWORD *)v9;
          __int128 v30 = *((_OWORD *)v9 + 1);
          __int128 v26 = *((_OWORD *)v23 + 1);
          *(_OWORD *)unint64_t v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v26;
          *(_OWORD *)int v23 = v28;
          *((_OWORD *)v23 + 1) = v30;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  v9 + 32,  a2 - 32);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (__int128 *)v9,  (__int128 *)v9 + 2,  (__int128 *)v9 + 4,  a2 - 32);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (uint64_t)v9,  (uint64_t)(v9 + 32),  (uint64_t)(v9 + 64),  (__int128 *)v9 + 6,  a2 - 32);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[32 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( &v9[32 * (v13 >> 1)],  v9,  a2 - 32);
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  &v9[32 * (v13 >> 1)],  a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9 + 32,  v15 - 32,  a2 - 64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9 + 64,  &v9[32 * v14 + 32],  a2 - 96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v15 - 32,  v15,  &v9[32 * v14 + 32]);
            __int128 v27 = *(_OWORD *)v9;
            __int128 v29 = *((_OWORD *)v9 + 1);
            __int128 v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)unint64_t v15 = v27;
            *((_OWORD *)v15 + 1) = v29;
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          int v17 = strncmp(v9 - 16, v9 + 16, 0x10uLL);
          BOOL v18 = *((void *)v9 - 4) < *(void *)v9;
          if (v17) {
            BOOL v18 = v17 < 0;
          }
          if (!v18)
          {
            unint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( v9,  a2);
            goto LABEL_18;
          }

_OWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( _OWORD *result, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v5 = 0LL;
      unint64_t v6 = result;
      do
      {
        uint64_t v7 = (const char *)v6;
        unint64_t v6 = v4;
        BOOL result = (_OWORD *)strncmp(v7 + 48, v7 + 16, 0x10uLL);
        BOOL v8 = *((void *)v7 + 4) < *(void *)v7;
        if ((_DWORD)result) {
          BOOL v8 = (int)result < 0;
        }
        if (v8)
        {
          __int128 v15 = *v6;
          __int128 v16 = v6[1];
          uint64_t v9 = v5;
          while (1)
          {
            uint64_t v10 = (char *)v3 + v9;
            __int128 v11 = *(_OWORD *)((char *)v3 + v9 + 16);
            *((_OWORD *)v10 + 2) = *(_OWORD *)((char *)v3 + v9);
            *((_OWORD *)v10 + 3) = v11;
            if (!v9) {
              break;
            }
            BOOL result = (_OWORD *)strncmp((const char *)&v16, v10 - 16, 0x10uLL);
            BOOL v12 = (unint64_t)v15 < *((void *)v10 - 4);
            if ((_DWORD)result) {
              BOOL v12 = (int)result < 0;
            }
            v9 -= 32LL;
            if (!v12)
            {
              unint64_t v13 = (_OWORD *)((char *)v3 + v9 + 32);
              goto LABEL_14;
            }
          }

          unint64_t v13 = v3;
LABEL_14:
          __int128 v14 = v16;
          *unint64_t v13 = v15;
          v13[1] = v14;
        }

        uint64_t v4 = v6 + 2;
        v5 += 32LL;
      }

      while (v6 + 2 != a2);
    }
  }

  return result;
}

_OWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( _OWORD *result, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (result != a2)
  {
    uint64_t v3 = result;
    for (uint64_t i = result + 2; v3 + 2 != a2; uint64_t i = v3 + 2)
    {
      uint64_t v5 = (const char *)v3;
      uint64_t v3 = i;
      BOOL result = (_OWORD *)strncmp(v5 + 48, v5 + 16, 0x10uLL);
      BOOL v6 = *((void *)v5 + 4) < *(void *)v5;
      if ((_DWORD)result) {
        BOOL v6 = (int)result < 0;
      }
      if (v6)
      {
        __int128 v12 = *v3;
        __int128 v13 = v3[1];
        uint64_t v7 = (char *)v3;
        do
        {
          __int128 v9 = *((_OWORD *)v7 - 1);
          *(_OWORD *)uint64_t v7 = *((_OWORD *)v7 - 2);
          *((_OWORD *)v7 + 1) = v9;
          BOOL result = (_OWORD *)strncmp((const char *)&v13, v7 - 48, 0x10uLL);
          BOOL v10 = (unint64_t)v12 < *((void *)v7 - 8);
          if ((_DWORD)result) {
            BOOL v10 = (int)result < 0;
          }
          BOOL v8 = v7 - 32;
          v7 -= 32;
        }

        while (v10);
        __int128 v11 = v13;
        *(_OWORD *)BOOL v8 = v12;
        *((_OWORD *)v8 + 1) = v11;
      }
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( char *a1, char *a2, char *a3)
{
  BOOL v6 = a2 + 16;
  uint64_t v7 = a1 + 16;
  int v8 = strncmp(a2 + 16, a1 + 16, 0x10uLL);
  unint64_t v9 = *(void *)a2;
  if (v8) {
    BOOL v10 = v8 < 0;
  }
  else {
    BOOL v10 = *(void *)a2 < *(void *)a1;
  }
  int v11 = strncmp(a3 + 16, v6, 0x10uLL);
  BOOL v12 = *(void *)a3 < v9;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v10)
  {
    if (v12)
    {
      __int128 v14 = *(_OWORD *)a1;
      __int128 v13 = *((_OWORD *)a1 + 1);
      __int128 v15 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v15;
      *(_OWORD *)a3 = v14;
      *((_OWORD *)a3 + 1) = v13;
      return 1LL;
    }

    __int128 v25 = *(_OWORD *)a1;
    __int128 v24 = *((_OWORD *)a1 + 1);
    __int128 v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v26;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v24;
    int v27 = strncmp(a3 + 16, v6, 0x10uLL);
    BOOL v28 = *(void *)a3 < *(void *)a2;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      return 1LL;
    }
    __int128 v30 = *(_OWORD *)a2;
    __int128 v29 = *((_OWORD *)a2 + 1);
    __int128 v31 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v31;
    *(_OWORD *)a3 = v30;
    *((_OWORD *)a3 + 1) = v29;
    return 2LL;
  }

  if (v12)
  {
    __int128 v17 = *(_OWORD *)a2;
    __int128 v16 = *((_OWORD *)a2 + 1);
    __int128 v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v18;
    *(_OWORD *)a3 = v17;
    *((_OWORD *)a3 + 1) = v16;
    int v19 = strncmp(v6, v7, 0x10uLL);
    BOOL v20 = *(void *)a2 < *(void *)a1;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    if (!v20) {
      return 1LL;
    }
    __int128 v22 = *(_OWORD *)a1;
    __int128 v21 = *((_OWORD *)a1 + 1);
    __int128 v23 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v23;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v21;
    return 2LL;
  }

  return 0LL;
}

char *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( char *a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  __int128 v29 = *(_OWORD *)a1;
  __int128 v30 = *((_OWORD *)a1 + 1);
  uint64_t v4 = (const char *)(a2 - 1);
  int v5 = strncmp((const char *)&v30, (const char *)a2 - 16, 0x10uLL);
  BOOL v6 = (unint64_t)v29 < *((void *)v2 - 4);
  if (v5) {
    BOOL v6 = v5 < 0;
  }
  if (v6)
  {
    uint64_t v7 = a1 + 48;
    do
    {
      int v8 = strncmp((const char *)&v30, v7, 0x10uLL);
      BOOL v9 = (unint64_t)v29 < *((void *)v7 - 2);
      if (v8) {
        BOOL v9 = v8 < 0;
      }
      v7 += 32;
    }

    while (!v9);
    BOOL v10 = (char *)(v7 - 48);
  }

  else
  {
    int v11 = a1 + 32;
    do
    {
      BOOL v10 = (char *)v11;
      if (v11 >= v2) {
        break;
      }
      int v12 = strncmp((const char *)&v30, (const char *)v11 + 16, 0x10uLL);
      int v11 = v10 + 32;
      BOOL v13 = (unint64_t)v29 < *(void *)v10;
      if (v12) {
        BOOL v13 = v12 < 0;
      }
    }

    while (!v13);
  }

  if (v10 < (char *)v2)
  {
    do
    {
      int v14 = strncmp((const char *)&v30, v4, 0x10uLL);
      BOOL v15 = (unint64_t)v29 < *((void *)v4 - 2);
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      v4 -= 32;
    }

    while (v15);
    uint64_t v2 = v4 + 16;
  }

  while (v10 < (char *)v2)
  {
    __int128 v16 = *((_OWORD *)v10 + 1);
    __int128 v31 = *(_OWORD *)v10;
    __int128 v32 = v16;
    __int128 v17 = v2[1];
    *(_OWORD *)BOOL v10 = *v2;
    *((_OWORD *)v10 + 1) = v17;
    __int128 v18 = v10 + 48;
    __int128 v19 = v32;
    *uint64_t v2 = v31;
    v2[1] = v19;
    do
    {
      int v20 = strncmp((const char *)&v30, v18, 0x10uLL);
      BOOL v21 = (unint64_t)v29 < *((void *)v18 - 2);
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      v18 += 32;
    }

    while (!v21);
    BOOL v10 = (char *)(v18 - 48);
    __int128 v22 = (const char *)(v2 - 1);
    do
    {
      int v23 = strncmp((const char *)&v30, v22, 0x10uLL);
      BOOL v24 = (unint64_t)v29 < *((void *)v22 - 2);
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      v22 -= 32;
    }

    while (v24);
    uint64_t v2 = v22 + 16;
  }

  __int128 v25 = v10 - 32;
  if (v10 - 32 != a1)
  {
    __int128 v26 = *((_OWORD *)v10 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v25;
    *((_OWORD *)a1 + 1) = v26;
  }

  __int128 v27 = v30;
  *(_OWORD *)__int128 v25 = v29;
  *((_OWORD *)v10 - 1) = v27;
  return v10;
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( char *a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  __int128 v29 = *(_OWORD *)a1;
  __int128 v30 = *((_OWORD *)a1 + 1);
  do
  {
    int v5 = strncmp(&a1[v4 + 48], (const char *)&v30, 0x10uLL);
    BOOL v6 = *(void *)&a1[v4 + 32] < (unint64_t)v29;
    if (v5) {
      BOOL v6 = v5 < 0;
    }
    v4 += 32LL;
  }

  while (v6);
  unint64_t v7 = (unint64_t)&a1[v4];
  int v8 = &a1[v4 - 32];
  BOOL v9 = (const char *)(a2 - 16);
  if (v4 == 32)
  {
    while (1)
    {
      int v12 = v9 + 16;
      int v27 = strncmp(v9, (const char *)&v30, 0x10uLL);
      BOOL v28 = *((void *)v9 - 2) < (unint64_t)v29;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      v9 -= 32;
      if (v28) {
        goto LABEL_9;
      }
    }
  }

  else
  {
    do
    {
      int v10 = strncmp(v9, (const char *)&v30, 0x10uLL);
      BOOL v11 = *((void *)v9 - 2) < (unint64_t)v29;
      if (v10) {
        BOOL v11 = v10 < 0;
      }
      v9 -= 32;
    }

    while (!v11);
LABEL_9:
    int v12 = v9 + 16;
  }

  if (v7 < (unint64_t)v12)
  {
    BOOL v13 = (char *)v7;
    int v14 = (char *)v12;
    do
    {
      __int128 v15 = *((_OWORD *)v13 + 1);
      __int128 v31 = *(_OWORD *)v13;
      __int128 v32 = v15;
      __int128 v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)BOOL v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
      __int128 v17 = v32;
      *(_OWORD *)int v14 = v31;
      *((_OWORD *)v14 + 1) = v17;
      __int128 v18 = v13 + 48;
      do
      {
        int v19 = strncmp(v18, (const char *)&v30, 0x10uLL);
        BOOL v20 = *((void *)v18 - 2) < (unint64_t)v29;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        v18 += 32;
      }

      while (v20);
      BOOL v13 = (char *)(v18 - 48);
      BOOL v21 = v14 - 16;
      do
      {
        int v22 = strncmp(v21, (const char *)&v30, 0x10uLL);
        BOOL v23 = *((void *)v21 - 2) < (unint64_t)v29;
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v21 -= 32;
      }

      while (!v23);
      int v14 = (char *)(v21 + 16);
    }

    while (v13 < v14);
    int v8 = (char *)(v18 - 80);
  }

  if (v8 != a1)
  {
    __int128 v24 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v24;
  }

  __int128 v25 = v30;
  *(_OWORD *)int v8 = v29;
  *((_OWORD *)v8 + 1) = v25;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      unint64_t v8 = *(void *)(a2 - 32);
      unint64_t v7 = (_OWORD *)(a2 - 32);
      BOOL v9 = v8 < *(void *)a1;
      if (v6) {
        BOOL v9 = v6 < 0;
      }
      if (v9)
      {
        __int128 v11 = *(_OWORD *)a1;
        __int128 v10 = *(_OWORD *)(a1 + 16);
        __int128 v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *unint64_t v7 = v11;
        v7[1] = v10;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (char *)a1,  (char *)(a1 + 32),  (char *)(a2 - 32));
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (__int128 *)a1,  (__int128 *)(a1 + 32),  (__int128 *)(a1 + 64),  (char *)(a2 - 32));
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( a1,  a1 + 32,  a1 + 64,  (__int128 *)(a1 + 96),  (char *)(a2 - 32));
      return 1LL;
    default:
      uint64_t v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (char *)a1,  (char *)(a1 + 32),  (char *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1LL;
      }
      uint64_t v15 = 0LL;
      int v16 = 0;
      break;
  }

  while (1)
  {
    int v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    BOOL v18 = *(void *)v14 < *(void *)v13;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (v18)
    {
      __int128 v26 = *(_OWORD *)v14;
      *(_OWORD *)int v27 = *(_OWORD *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        __int128 v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64) {
          break;
        }
        int v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        BOOL v23 = (unint64_t)v26 < *(void *)(v20 + 32);
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v19 -= 32LL;
        if (!v23)
        {
          __int128 v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }

      __int128 v24 = (_OWORD *)a1;
LABEL_18:
      __int128 v25 = *(_OWORD *)v27;
      *__int128 v24 = v26;
      v24[1] = v25;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }

    uint64_t v13 = v14;
    v15 += 32LL;
    v14 += 32LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( __int128 *a1, __int128 *a2, __int128 *a3, char *a4)
{
  int v8 = strncmp(a4 + 16, (const char *)a3 + 16, 0x10uLL);
  BOOL v10 = *(void *)a4 < *(void *)a3;
  if (v8) {
    BOOL v10 = v8 < 0;
  }
  if (v10)
  {
    __int128 v12 = *a3;
    __int128 v11 = a3[1];
    __int128 v13 = *((_OWORD *)a4 + 1);
    *a3 = *(_OWORD *)a4;
    a3[1] = v13;
    *(_OWORD *)a4 = v12;
    *((_OWORD *)a4 + 1) = v11;
    int v14 = strncmp((const char *)a3 + 16, (const char *)a2 + 16, 0x10uLL);
    BOOL v15 = *(void *)a3 < *(void *)a2;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15)
    {
      __int128 v17 = *a2;
      __int128 v16 = a2[1];
      __int128 v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v17;
      a3[1] = v16;
      int v19 = strncmp((const char *)a2 + 16, (const char *)a1 + 16, 0x10uLL);
      BOOL v20 = *(void *)a2 < *(void *)a1;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (v20)
      {
        __int128 v21 = *a1;
        __n128 result = (__n128)a1[1];
        __int128 v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *a2 = v21;
        a2[1] = (__int128)result;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char *a5)
{
  int v10 = strncmp(a5 + 16, (const char *)a4 + 16, 0x10uLL);
  BOOL v12 = *(void *)a5 < *(void *)a4;
  if (v10) {
    BOOL v12 = v10 < 0;
  }
  if (v12)
  {
    __int128 v14 = *a4;
    __int128 v13 = a4[1];
    __int128 v15 = *((_OWORD *)a5 + 1);
    *a4 = *(_OWORD *)a5;
    a4[1] = v15;
    *(_OWORD *)a5 = v14;
    *((_OWORD *)a5 + 1) = v13;
    int v16 = strncmp((const char *)a4 + 16, (const char *)(a3 + 16), 0x10uLL);
    BOOL v17 = *(void *)a4 < *(void *)a3;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (v17)
    {
      __int128 v19 = *(_OWORD *)a3;
      __int128 v18 = *(_OWORD *)(a3 + 16);
      __int128 v20 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v20;
      *a4 = v19;
      a4[1] = v18;
      int v21 = strncmp((const char *)(a3 + 16), (const char *)(a2 + 16), 0x10uLL);
      BOOL v22 = *(void *)a3 < *(void *)a2;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22)
      {
        __int128 v24 = *(_OWORD *)a2;
        __int128 v23 = *(_OWORD *)(a2 + 16);
        __int128 v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v23;
        int v26 = strncmp((const char *)(a2 + 16), (const char *)(a1 + 16), 0x10uLL);
        BOOL v27 = *(void *)a2 < *(void *)a1;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (v27)
        {
          __int128 v28 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          __int128 v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(_OWORD *)a2 = v28;
          *(__n128 *)(a2 + 16) = result;
        }
      }
    }
  }

  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,MMapSegment*>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  if ((__int128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = (char *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( a1,  a4,  v9,  v12);
        v12 -= 32;
        --v11;
      }

      while (v11);
    }

    __int128 v13 = a2;
    if (a2 != a3)
    {
      __int128 v14 = (char *)a2;
      do
      {
        int v15 = strncmp(v14 + 16, (const char *)(a1 + 16), 0x10uLL);
        BOOL v16 = *(void *)v14 < *(void *)a1;
        if (v15) {
          BOOL v16 = v15 < 0;
        }
        if (v16)
        {
          __int128 v18 = *(_OWORD *)v14;
          __int128 v17 = *((_OWORD *)v14 + 1);
          __int128 v19 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)__int128 v14 = *(_OWORD *)a1;
          *((_OWORD *)v14 + 1) = v19;
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( a1,  a4,  v9,  (char *)a1);
        }

        v14 += 32;
      }

      while (v14 != (char *)a3);
      __int128 v13 = a3;
    }

    if (v8 >= 33)
    {
      uint64_t v20 = (unint64_t)v8 >> 5;
      int v21 = (char *)(a2 - 2);
      do
      {
        __int128 v26 = *(_OWORD *)a1;
        __int128 v27 = *(_OWORD *)(a1 + 16);
        BOOL v22 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (char *)a1,  a4,  v20);
        if (v21 == v22)
        {
          *(_OWORD *)BOOL v22 = v26;
          *((_OWORD *)v22 + 1) = v27;
        }

        else
        {
          __int128 v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)BOOL v22 = *(_OWORD *)v21;
          *((_OWORD *)v22 + 1) = v23;
          *(_OWORD *)int v21 = v26;
          *((_OWORD *)v21 + 1) = v27;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( a1,  (uint64_t)(v22 + 32),  a4,  (uint64_t)&v22[-a1 + 32] >> 5);
        }

        v21 -= 32;
      }

      while (v20-- > 2);
    }

    return v13;
  }

  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)&a4[-a1] >> 5)
    {
      uint64_t v9 = (uint64_t)&a4[-a1] >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (uint64_t *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        unint64_t v15 = *v11;
      }

      else
      {
        int v13 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
        BOOL v14 = *v11 < (unint64_t)v11[4];
        if (v13) {
          BOOL v14 = v13 < 0;
        }
        if (v14) {
          unint64_t v15 = v11[4];
        }
        else {
          unint64_t v15 = *v11;
        }
        if (v14)
        {
          v11 += 4;
          uint64_t v10 = v12;
        }
      }

      int v16 = strncmp((const char *)v11 + 16, v5 + 16, 0x10uLL);
      BOOL v18 = v15 < *(void *)v5;
      if (v16) {
        BOOL v18 = v16 < 0;
      }
      if (!v18)
      {
        __int128 v28 = *(_OWORD *)v5;
        __int128 v29 = *((_OWORD *)v5 + 1);
        do
        {
          __int128 v19 = (char *)v11;
          __int128 v20 = *((_OWORD *)v11 + 1);
          *(_OWORD *)int v5 = *(_OWORD *)v11;
          *((_OWORD *)v5 + 1) = v20;
          if (v7 < v10) {
            break;
          }
          uint64_t v21 = (2 * v10) | 1;
          unint64_t v11 = (uint64_t *)(a1 + 32 * v21);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            unint64_t v24 = *v11;
            uint64_t v10 = v21;
          }

          else
          {
            int v22 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
            BOOL v23 = *v11 < (unint64_t)v11[4];
            if (v22) {
              BOOL v23 = v22 < 0;
            }
            unint64_t v24 = v23 ? v11[4] : *v11;
            if (v23) {
              v11 += 4;
            }
            else {
              uint64_t v10 = v21;
            }
          }

          int v25 = strncmp((const char *)v11 + 16, (const char *)&v29, 0x10uLL);
          BOOL v26 = v24 < (unint64_t)v28;
          if (v25) {
            BOOL v26 = v25 < 0;
          }
          int v5 = v19;
        }

        while (!v26);
        double result = *(double *)&v28;
        __int128 v27 = v29;
        *(_OWORD *)__int128 v19 = v28;
        *((_OWORD *)v19 + 1) = v27;
      }
    }
  }

  return result;
}

const char *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[32 * v5 + 32];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      int v11 = strncmp(v8 + 16, v8 + 48, 0x10uLL);
      BOOL v12 = *(void *)v8 < *((void *)v8 + 4);
      if (v11) {
        BOOL v12 = v11 < 0;
      }
      if (v12)
      {
        v8 += 32;
        uint64_t v9 = v10;
      }
    }

    __int128 v13 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v13;
    a1 = (char *)v8;
    uint64_t v5 = v9;
  }

  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 32 * (v4 >> 1);
    int v9 = strncmp((const char *)(v8 + 16), (const char *)(a2 - 16), 0x10uLL);
    unint64_t v12 = *(void *)(a2 - 32);
    int v11 = (__int128 *)(a2 - 32);
    BOOL v13 = *(void *)v8 < v12;
    if (v9) {
      BOOL v13 = v9 < 0;
    }
    if (v13)
    {
      __int128 v19 = *v11;
      __int128 v20 = v11[1];
      do
      {
        BOOL v14 = (__int128 *)v8;
        __int128 v15 = *(_OWORD *)(v8 + 16);
        *int v11 = *(_OWORD *)v8;
        v11[1] = v15;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 32 * v7;
        int v16 = strncmp((const char *)(v8 + 16), (const char *)&v20, 0x10uLL);
        BOOL v17 = *(void *)v8 < (unint64_t)v19;
        if (v16) {
          BOOL v17 = v16 < 0;
        }
        int v11 = v14;
      }

      while (v17);
      double result = *(double *)&v19;
      __int128 v18 = v20;
      *BOOL v14 = v19;
      v14[1] = v18;
    }
  }

  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>( char *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  int v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = a2 - v9;
    unint64_t v13 = (a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        int v22 = strncmp(a2 - 16, v9 + 16, 0x10uLL);
        unint64_t v24 = *((void *)a2 - 4);
        BOOL v23 = a2 - 32;
        BOOL v25 = v24 < *(void *)v9;
        if (v22) {
          BOOL v25 = v22 < 0;
        }
        if (v25)
        {
          __int128 v28 = *(_OWORD *)v9;
          __int128 v30 = *((_OWORD *)v9 + 1);
          __int128 v26 = *((_OWORD *)v23 + 1);
          *(_OWORD *)int v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v26;
          *(_OWORD *)BOOL v23 = v28;
          *((_OWORD *)v23 + 1) = v30;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  v9 + 32,  a2 - 32);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (__int128 *)v9,  (__int128 *)v9 + 2,  (__int128 *)v9 + 4,  a2 - 32);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (uint64_t)v9,  (uint64_t)(v9 + 32),  (uint64_t)(v9 + 64),  (__int128 *)v9 + 6,  a2 - 32);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          __int128 v15 = &v9[32 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( &v9[32 * (v13 >> 1)],  v9,  a2 - 32);
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9,  &v9[32 * (v13 >> 1)],  a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9 + 32,  v15 - 32,  a2 - 64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v9 + 64,  &v9[32 * v14 + 32],  a2 - 96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( v15 - 32,  v15,  &v9[32 * v14 + 32]);
            __int128 v27 = *(_OWORD *)v9;
            __int128 v29 = *((_OWORD *)v9 + 1);
            __int128 v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)int v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)__int128 v15 = v27;
            *((_OWORD *)v15 + 1) = v29;
            if ((a5 & 1) != 0) {
              goto LABEL_13;
            }
          }

          int v17 = strncmp(v9 - 16, v9 + 16, 0x10uLL);
          BOOL v18 = *((void *)v9 - 4) < *(void *)v9;
          if (v17) {
            BOOL v18 = v17 < 0;
          }
          if (!v18)
          {
            int v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( v9,  a2);
            goto LABEL_18;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*>( uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      unint64_t v8 = *(void *)(a2 - 32);
      unint64_t v7 = (_OWORD *)(a2 - 32);
      BOOL v9 = v8 < *(void *)a1;
      if (v6) {
        BOOL v9 = v6 < 0;
      }
      if (v9)
      {
        __int128 v11 = *(_OWORD *)a1;
        __int128 v10 = *(_OWORD *)(a1 + 16);
        __int128 v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *unint64_t v7 = v11;
        v7[1] = v10;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (char *)a1,  (char *)(a1 + 32),  (char *)(a2 - 32));
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (__int128 *)a1,  (__int128 *)(a1 + 32),  (__int128 *)(a1 + 64),  (char *)(a2 - 32));
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( a1,  a1 + 32,  a1 + 64,  (__int128 *)(a1 + 96),  (char *)(a2 - 32));
      return 1LL;
    default:
      uint64_t v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>( (char *)a1,  (char *)(a1 + 32),  (char *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1LL;
      }
      uint64_t v15 = 0LL;
      int v16 = 0;
      break;
  }

  while (1)
  {
    int v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    BOOL v18 = *(void *)v14 < *(void *)v13;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (v18)
    {
      __int128 v26 = *(_OWORD *)v14;
      *(_OWORD *)__int128 v27 = *(_OWORD *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        __int128 v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64) {
          break;
        }
        int v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        BOOL v23 = (unint64_t)v26 < *(void *)(v20 + 32);
        if (v22) {
          BOOL v23 = v22 < 0;
        }
        v19 -= 32LL;
        if (!v23)
        {
          unint64_t v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }

      unint64_t v24 = (_OWORD *)a1;
LABEL_18:
      __int128 v25 = *(_OWORD *)v27;
      *unint64_t v24 = v26;
      v24[1] = v25;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }

    uint64_t v13 = v14;
    v15 += 32LL;
    v14 += 32LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  BOOL v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1)) {
          unint64_t v24 = (const char *)*(a2 - 1);
        }
        else {
          unint64_t v24 = (const char *)*(a2 - 2);
        }
        if (v9[3]) {
          __int128 v25 = (const char *)v9[3];
        }
        else {
          __int128 v25 = (const char *)v9[2];
        }
        int v26 = strncmp(v24, v25, 0x10uLL);
        unint64_t v28 = *(a2 - 4);
        __int128 v27 = a2 - 4;
        BOOL v29 = v28 < *v9;
        if (v26) {
          BOOL v29 = v26 < 0;
        }
        if (v29)
        {
          __int128 v32 = *(_OWORD *)v9;
          __int128 v34 = *((_OWORD *)v9 + 1);
          __int128 v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)BOOL v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)__int128 v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  v9 + 4,  v9 + 8,  v9 + 12,  a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( &v9[4 * (v13 >> 1)],  v9,  a2 - 4);
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9,  &v9[4 * (v13 >> 1)],  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 4,  v15 - 4,  a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v9 + 8,  &v9[4 * v14 + 4],  a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( v15 - 4,  v15,  &v9[4 * v14 + 4]);
            __int128 v31 = *(_OWORD *)v9;
            __int128 v33 = *((_OWORD *)v9 + 1);
            __int128 v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)BOOL v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)uint64_t v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0) {
              goto LABEL_19;
            }
          }

          if (*(v9 - 1)) {
            int v17 = (const char *)*(v9 - 1);
          }
          else {
            int v17 = (const char *)*(v9 - 2);
          }
          if (v9[3]) {
            BOOL v18 = (const char *)v9[3];
          }
          else {
            BOOL v18 = (const char *)v9[2];
          }
          int v19 = strncmp(v17, v18, 0x10uLL);
          BOOL v20 = *(v9 - 4) < *v9;
          if (v19) {
            BOOL v20 = v19 < 0;
          }
          if (!v20)
          {
            BOOL v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>( v9,  a2);
            goto LABEL_24;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*>( unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(a2 - 1)) {
        int v6 = (const char *)*(a2 - 1);
      }
      else {
        int v6 = (const char *)*(a2 - 2);
      }
      if (a1[3]) {
        unint64_t v7 = (const char *)a1[3];
      }
      else {
        unint64_t v7 = (const char *)a1[2];
      }
      int v8 = strncmp(v6, v7, 0x10uLL);
      unint64_t v10 = *(v2 - 4);
      BOOL v9 = v2 - 4;
      BOOL v11 = v10 < *a1;
      if (v8) {
        BOOL v11 = v8 < 0;
      }
      if (v11)
      {
        __int128 v13 = *(_OWORD *)a1;
        __int128 v12 = *((_OWORD *)a1 + 1);
        __int128 v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)BOOL v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a2 - 4);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a2 - 4);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8,  a1 + 12,  a2 - 4);
      return 1LL;
    default:
      uint64_t v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>( a1,  a1 + 4,  a1 + 8);
      __int128 v16 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1LL;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      __int128 v33 = v2;
      break;
  }

  while (1)
  {
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v19) {
      __int128 v21 = (const char *)v16[3];
    }
    else {
      __int128 v21 = (const char *)v16[2];
    }
    if (v15[3]) {
      char v22 = (const char *)v15[3];
    }
    else {
      char v22 = (const char *)v15[2];
    }
    int v23 = strncmp(v21, v22, 0x10uLL);
    unint64_t v24 = *v16;
    BOOL v25 = *v16 < *v15;
    if (v23) {
      BOOL v25 = v23 < 0;
    }
    if (v25)
    {
      unint64_t v34 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        __int128 v27 = (char *)a1 + v26;
        __int128 v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64) {
          break;
        }
        if (*((void *)v27 + 7)) {
          BOOL v29 = (const char *)*((void *)v27 + 7);
        }
        else {
          BOOL v29 = (const char *)*((void *)v27 + 6);
        }
        int v30 = strncmp(v21, v29, 0x10uLL);
        BOOL v31 = v24 < *((void *)v27 + 4);
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        v26 -= 32LL;
        if (!v31)
        {
          __int128 v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }

      __int128 v32 = a1;
LABEL_33:
      uint64_t v2 = v33;
      *__int128 v32 = v24;
      v32[1] = v34;
      __int128 v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8) {
        return v16 + 4 == v33;
      }
    }

    uint64_t v15 = v16;
    v17 += 32LL;
    v16 += 4;
    if (v16 == v2) {
      return 1LL;
    }
  }

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = off_189DFAA38;
  *(_OWORD *)(v2 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189DFAA38;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  __int128 v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()( uint64_t a1, unint64_t **a2, uint64_t *a3)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  __int128 v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = **a2;
  if ((TThreadsafeAddressRelocator<Pointer64>::relocate((void *)(v6 + 120), v7, &v55) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Symbol archive address 0x%x could not be relocated to real address\n",  buf,  8u);
    }

    fprintf((FILE *)*MEMORY[0x1895F89D0], "Symbol archive address 0x%x could not be relocated to real address\n");
    return;
  }

  unint64_t v8 = v55;
  if (*(_DWORD *)(a1 + 56) == -1 && v55 > **(void **)(a1 + 48))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    (*(void (**)(void))(*(void *)(v9 + 8) + 16LL))();
    ++**(void **)v9;
    **(void **)(a1 + 4_Block_object_dispose(va, 8) = v55;
  }

  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 32) | 5LL;
  __int128 v12 = *(uint64_t **)(v10 + 8);
  unint64_t v13 = *(void *)(v10 + 16);
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = *(uint64_t **)v10;
    uint64_t v16 = ((uint64_t)v12 - *(void *)v10) >> 4;
    unint64_t v17 = v16 + 1;
    uint64_t v18 = v13 - (void)v15;
    if (v18 >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( v10 + 16,  v19);
      uint64_t v15 = *(uint64_t **)v10;
      __int128 v12 = *(uint64_t **)(v10 + 8);
    }

    else
    {
      unint64_t v20 = 0LL;
    }

    __int128 v21 = (uint64_t *)&v20[16 * v16];
    char v22 = &v20[16 * v19];
    uint64_t *v21 = v11;
    v21[1] = (uint64_t)v4;
    __int128 v14 = v21 + 2;
    if (v12 != v15)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
        v21 -= 2;
        v12 -= 2;
      }

      while (v12 != v15);
      uint64_t v15 = *(uint64_t **)v10;
    }

    *(void *)uint64_t v10 = v21;
    *(void *)(v10 + _Block_object_dispose(va, 8) = v14;
    *(void *)(v10 + 16) = v22;
    if (v15) {
      operator delete(v15);
    }
  }

  else
  {
    *__int128 v12 = v11;
    v12[1] = (uint64_t)v4;
    __int128 v14 = v12 + 2;
  }

  *(void *)(v10 + _Block_object_dispose(va, 8) = v14;
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v25 = v24 | 5;
    unint64_t v26 = *(void *)(v23 + 16);
    __int128 v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v26)
    {
      *__int128 v27 = v25;
      v27[1] = v5;
LABEL_30:
      BOOL v29 = v27 + 2;
      goto LABEL_57;
    }

    int v30 = *(uint64_t **)v23;
    uint64_t v31 = ((uint64_t)v27 - *(void *)v23) >> 4;
    unint64_t v32 = v31 + 1;
    uint64_t v33 = v26 - (void)v30;
    if (v33 >> 3 > v32) {
      unint64_t v32 = v33 >> 3;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( v23 + 16,  v34);
      int v30 = *(uint64_t **)v23;
      __int128 v27 = *(uint64_t **)(v23 + 8);
    }

    else
    {
      unint64_t v35 = 0LL;
    }

    __int128 v41 = (uint64_t *)&v35[16 * v31];
    __int128 v42 = &v35[16 * v34];
    *__int128 v41 = v25;
    v41[1] = v5;
    BOOL v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }

      while (v27 != v30);
LABEL_54:
      int v30 = *(uint64_t **)v23;
    }
  }

  else
  {
    unint64_t v28 = *(void *)(v23 + 16);
    __int128 v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v28)
    {
      *__int128 v27 = v24;
      v27[1] = (uint64_t)v4;
      goto LABEL_30;
    }

    int v30 = *(uint64_t **)v23;
    uint64_t v36 = ((uint64_t)v27 - *(void *)v23) >> 4;
    unint64_t v37 = v36 + 1;
    uint64_t v38 = v28 - (void)v30;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      unsigned int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( v23 + 16,  v39);
      int v30 = *(uint64_t **)v23;
      __int128 v27 = *(uint64_t **)(v23 + 8);
    }

    else
    {
      unsigned int v40 = 0LL;
    }

    __int128 v41 = (uint64_t *)&v40[16 * v36];
    __int128 v42 = &v40[16 * v39];
    *__int128 v41 = v24;
    v41[1] = (uint64_t)v4;
    BOOL v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }

      while (v27 != v30);
      goto LABEL_54;
    }
  }

  *(void *)uint64_t v23 = v41;
  *(void *)(v23 + _Block_object_dispose(va, 8) = v29;
  *(void *)(v23 + 16) = v42;
  if (v30) {
    operator delete(v30);
  }
LABEL_57:
  *(void *)(v23 + _Block_object_dispose(va, 8) = v29;
  if (*(int *)(a1 + 56) + 1LL == (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8LL) - **(void **)(a1 + 16)) >> 4)
  {
    uint64_t v43 = *(void *)(a1 + 40);
    CSSymbolGetRange(*(void *)(a1 + 32) | 5LL, (uint64_t)v4);
    (*(void (**)(void))(*(void *)(v43 + 8) + 16LL))();
    ++**(void **)v43;
  }

  unint64_t v44 = v8 + HIDWORD(v7);
  uint64_t v45 = *((unsigned int *)v4 + 5);
  unint64_t v46 = v44;
  if ((_DWORD)v45 == -1)
  {
LABEL_73:
    if (*(_DWORD *)(a1 + 56) != -1)
    {
LABEL_74:
      *(void *)(*(void *)(a1 + 16) + 8LL) -= 16LL;
      *(void *)(*(void *)(a1 + 24) + 8LL) -= 16LL;
      return;
    }

    if (v46 <= **(void **)(a1 + 48))
    {
      unint64_t v46 = **(void **)(a1 + 48);
    }

    else
    {
      uint64_t v53 = *(void *)(a1 + 40);
      (*(void (**)(void))(*(void *)(v53 + 8) + 16LL))();
      ++**(void **)v53;
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = v46;
      if (*(_DWORD *)(a1 + 56) != -1) {
        goto LABEL_74;
      }
    }

    if (v44 > v46)
    {
      uint64_t v54 = *(void *)(a1 + 40);
      (*(void (**)(void))(*(void *)(v54 + 8) + 16LL))();
      ++**(void **)v54;
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = v44;
    }

    goto LABEL_74;
  }

  uint64_t v47 = *(unsigned int **)(v6 + 88);
  uint64_t v48 = v47[5];
  unint64_t v46 = v44;
  if (v45 >= v48
    || (unint64_t v49 = (unint64_t)&v47[9 * v45 + 24 + 8 * v47[2] + 6 * v47[3] + 6 * v47[4]],
        unint64_t v46 = v44,
        (unint64_t)v47 > v49)
    || (unint64_t v46 = v44, v49 >= (unint64_t)v47 + v47[1]))
  {
LABEL_70:
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Out of bounds children index iterating inline ranges",  buf,  2u);
    }

    fwrite("Out of bounds children index iterating inline ranges", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    goto LABEL_73;
  }

  uint64_t v50 = v48 - v45;
  while (1)
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(*(void *)(a1 + 8), v49, v49);
    unint64_t v51 = *(void *)v49;
    if ((*(_BYTE *)(v49 + 11) & 0x40) != 0)
    {
      unint64_t v46 = *(void *)buf + HIDWORD(v51);
      goto LABEL_73;
    }

    if (--v50)
    {
      unint64_t v52 = *(void *)(v6 + 88);
      v49 += 36LL;
    }

    unint64_t v46 = *(void *)buf + HIDWORD(v51);
    goto LABEL_70;
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v56 = 67109120;
    int v57 = v51;
    _os_log_impl( &dword_185FC0000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Child symbol archive address 0x%x could not be relocated to real address\n",  v56,  8u);
  }

  fprintf((FILE *)*MEMORY[0x1895F89D0], "Child symbol archive address 0x%x could not be relocated to real address\n");
}

uint64_t std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target_type()
{
}

void *std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100]( void *result, void *a2)
{
  v6[3] = *MEMORY[0x1895F89C0];
  if (a2 != result)
  {
    __int128 v3 = result;
    __int128 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_186078930(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

std::mutex *task_get_mapped_memory_cache(mach_port_name_t a1)
{
  return task_get_mapped_memory_cache_with_label(a1, (uint64_t)"");
}

std::mutex *task_get_mapped_memory_cache_with_label(mach_port_name_t a1, uint64_t a2)
{
  mach_port_name_t v9 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  __int128 v4 = (_OWORD *)task_to_mapped_memory;
  if (!task_to_mapped_memory)
  {
    __int128 v4 = operator new(0x28uLL);
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    *((_DWORD *)v4 + _Block_object_dispose(va, 8) = 1065353216;
    task_to_mapped_memory = (uint64_t)v4;
  }

  mach_port_name_t v10 = a1;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>( v4,  &v10);
  if (v5 && (uint64_t v6 = (std::mutex *)v5[3]) != 0LL)
  {
    std::mutex::lock(v6 + 2);
    ++*(_DWORD *)&v6[1].__m_.__opaque[32];
    std::mutex::unlock(v6 + 2);
  }

  else
  {
    mapped_memory_cache_for_task_with_label = (std::mutex *)create_mapped_memory_cache_for_task_with_label(a1, 0, a2);
    std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__emplace_unique_key_args<unsigned int,unsigned int &,mapped_memory_t *&>( task_to_mapped_memory,  &v9,  &v9,  &mapped_memory_cache_for_task_with_label);
    uint64_t v6 = mapped_memory_cache_for_task_with_label;
  }

  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v6;
}

void sub_186078A28(_Unwind_Exception *a1)
{
}

_OWORD *create_mapped_memory_cache_for_task_with_label(mach_port_name_t name, char a2, uint64_t a3)
{
  if (name - 1 > 0xFFFFFFFD || mach_port_mod_refs(*MEMORY[0x1895FBBE0], name, 0, 1)) {
    return 0LL;
  }
  uint64_t v6 = operator new(0xC8uLL);
  v6[1] = 0u;
  unsigned int v6[2] = 0u;
  void v6[4] = 0u;
  void v6[5] = 0u;
  *uint64_t v6 = 0u;
  void v6[6] = 0u;
  v6[7] = 0u;
  v6[3] = 0u;
  *((void *)v6 + 5) = v6 + 3;
  *((void *)v6 + _Block_object_dispose(va, 8) = 0LL;
  *((void *)v6 + 9) = 0LL;
  *((void *)v6 + 10) = 0LL;
  *((void *)v6 + 16) = 850045863LL;
  *(_OWORD *)((char *)v6 + 136) = 0u;
  *(_OWORD *)((char *)v6 + 152) = 0u;
  *(_OWORD *)((char *)v6 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)v6 + 184) = 0u;
  *((_DWORD *)v6 + 22) = name;
  *((_DWORD *)v6 + 24) = 0;
  int v8 = CSTaskIs64Bit(name);
  *((_BYTE *)v6 + 101) = v8;
  *((_BYTE *)v6 + 100) = a2;
  *((void *)v6 + 15) = a3;
  *((void *)v6 + 2) = 0LL;
  *((void *)v6 + 3) = 0LL;
  if (v8
    && (CSTaskIsTranslated() & 1) == 0
    && _dyld_get_shared_cache_uuid()
    && _dyld_process_info_create())
  {
    _dyld_process_info_get_cache();
    BOOL v9 = v15 == v12 && v16 == v13;
    if (v9 && v14)
    {
      uint64_t shared_cache_range = _dyld_get_shared_cache_range();
      *((void *)v6 + 2) = v14;
      *((void *)v6 + 3) = v11;
      *((void *)v6 + 4) = shared_cache_range - v14;
    }

    _dyld_process_info_release();
  }

  *((_DWORD *)v6 + 26) = 1;
  return v6;
}

void sub_186078BD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0LL;
  std::default_delete<mapped_memory_t>::operator()[abi:ne180100]((uint64_t)&a11, v11);
  _Unwind_Resume(a1);
}

uint64_t retain_mapped_memory_cache(uint64_t a1)
{
  if (a1)
  {
    std::mutex::lock((std::mutex *)(a1 + 128));
    ++*(_DWORD *)(a1 + 104);
    std::mutex::unlock((std::mutex *)(a1 + 128));
  }

  return a1;
}

uint64_t task_lookup_mapped_memory_cache(unsigned int a1)
{
  unsigned int v5 = a1;
  if (task_to_mapped_memory
    && (uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>( (void *)task_to_mapped_memory,  &v5)) != 0LL)
  {
    uint64_t v3 = v2[3];
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v3;
}

void sub_186078CB4(_Unwind_Exception *a1)
{
}

void task_release_mapped_memory_cache(unsigned int a1)
{
  unsigned int v4 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  unsigned int v5 = a1;
  if (task_to_mapped_memory)
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>( (void *)task_to_mapped_memory,  &v5);
    if (v2)
    {
      uint64_t v3 = (std::mutex *)v2[3];
      if (v3)
      {
        if (!release_mapped_memory_cache(v3)) {
          std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__erase_unique<unsigned int>( (void *)task_to_mapped_memory,  &v4);
        }
      }
    }
  }

  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
}

void sub_186078D44(_Unwind_Exception *a1)
{
}

std::mutex *release_mapped_memory_cache(std::mutex *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    v3.__m_ = result + 2;
    v3.__owns_ = 1;
    std::mutex::lock(result + 2);
    int v2 = *(_DWORD *)(v1 + 104) - 1;
    *(_DWORD *)(v1 + 104) = v2;
    if (v2
      || (std::unique_lock<std::mutex>::unlock(&v3), destroy_mapped_memory_cache(v1), v1 = 0LL, __n128 result = 0LL, v3.__owns_))
    {
      std::mutex::unlock(v3.__m_);
      return (std::mutex *)v1;
    }
  }

  return result;
}

void sub_186078DD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t enumerate_mapped_memory_core_file_dumped_regions(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 192);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    if (v3 != v4)
    {
      uint64_t v6 = v3 + 40;
      do
      {
        char v12 = 0;
        uint64_t v7 = *(void *)(v6 - 8);
        __int128 v8 = *(_OWORD *)(v6 - 24);
        v10[0] = *(_OWORD *)(v6 - 40);
        v10[1] = v8;
        uint64_t v11 = v7;
        __n128 result = (*(uint64_t (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v10, &v12);
        if (v12) {
          break;
        }
        BOOL v9 = v6 == v4;
        v6 += 40LL;
      }

      while (!v9);
    }
  }

  return result;
}

_OWORD *create_mapped_memory_cache_for_core_file_without_exclave_metadata(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 0LL);
}

_OWORD *common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata( char *a1, const char *a2, uint64_t a3)
{
  unsigned int v5 = a1;
  uint64_t v491 = *MEMORY[0x1895F89C0];
  CSCppFileMemory::CSCppFileMemory(v408, a1, 0LL);
  uint64_t v6 = (_DWORD *)(*(uint64_t (**)(void *, void, uint64_t))(v408[0] + 32LL))(v408, 0LL, 28LL);
  if (!v6 || *v6 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v405, v5, 0LL);
    unint64_t v51 = (_DWORD *)(*(uint64_t (**)(uint64_t *, void, uint64_t))(v405 + 32))(&v405, 0LL, 32LL);
    if (!v51 || *v51 != -17958193)
    {
LABEL_267:
      uint64_t v95 = 0LL;
      goto LABEL_268;
    }

    v425[0] = 0LL;
    v425[1] = 0LL;
    v426 = 0LL;
    CSCppFileMemory::CSCppFileMemory(v481, v5, 0LL);
    v398 = a2;
    unint64_t v52 = 32LL;
    do
    {
      uint64_t v53 = (*(uint64_t (**)(_BYTE *, void, unint64_t))(*(void *)v481 + 32LL))(v481, 0LL, v52);
      uint64_t v55 = v53;
      if (!v53 || *(_DWORD *)v53 != -17958193) {
        goto LABEL_183;
      }
      unint64_t v52 = *(unsigned int *)(v53 + 20) + 32LL;
    }

    while (v52 > v54);
    if (*(_DWORD *)(v53 + 12) != 4)
    {
LABEL_183:
      uint64_t v95 = 0LL;
      goto LABEL_184;
    }

    int v394 = 0;
    v423[1] = 0LL;
    v424 = 0LL;
    uint64_t v56 = &v423[1];
    v423[0] = &v423[1];
    LOBYTE(v416) = 0;
    LOBYTE(v419) = 0;
    v458[0] = 0;
    char v480 = 0;
    LOBYTE(v420) = 0;
    LOBYTE(v421) = 0;
    uint64_t v57 = *(unsigned int *)(v53 + 20);
    LODWORD(v412) = *(_DWORD *)(v53 + 16);
    unsigned int v413 = (char *)v53;
    unint64_t v414 = v53 + 32 + v57;
    uint64_t v415 = v53 + 32;
    v402 = v5;
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            unint64_t v58 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v412);
            uint64_t v59 = (const note_command *)v58;
            if (!v58)
            {
              unint64_t v121 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v425[1] - (char *)v425[0]) >> 3));
              if (v425[1] == v425[0]) {
                uint64_t v122 = 0LL;
              }
              else {
                uint64_t v122 = v121;
              }
              std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>( (uint64_t)v425[0],  (unint64_t)v425[1],  v122,  1);
              mach_port_name_t v428 = open(v5, 0x1000000);
              if ((v428 & 0x80000000) != 0)
              {
                unint64_t v153 = (void **)v423[0];
                if (v423[0] != v56)
                {
                  do
                  {
                    mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v153 + 8));
                    unsigned int v154 = (void **)v153[1];
                    if (v154)
                    {
                      do
                      {
                        uint64_t v155 = v154;
                        unsigned int v154 = (void **)*v154;
                      }

                      while (v154);
                    }

                    else
                    {
                      do
                      {
                        uint64_t v155 = (void **)v153[2];
                        BOOL v19 = *v155 == v153;
                        unint64_t v153 = v155;
                      }

                      while (!v19);
                    }

                    unint64_t v153 = v155;
                  }

                  while (v155 != v56);
                }

LABEL_330:
                uint64_t v95 = 0LL;
              }

              else
              {
                uint64_t v95 = operator new(0xC8uLL);
                v95[1] = 0u;
                v95[2] = 0u;
                v95[4] = 0u;
                v95[5] = 0u;
                v95[6] = 0u;
                v95[7] = 0u;
                *uint64_t v95 = 0u;
                v95[3] = 0u;
                *((void *)v95 + 5) = v95 + 3;
                *((void *)v95 + _Block_object_dispose(va, 8) = 0LL;
                *((void *)v95 + 9) = 0LL;
                *((void *)v95 + 10) = 0LL;
                *((void *)v95 + 16) = 850045863LL;
                *(_OWORD *)((char *)v95 + 136) = 0u;
                *(_OWORD *)((char *)v95 + 152) = 0u;
                *(_OWORD *)((char *)v95 + 16_Block_object_dispose(va, 8) = 0u;
                *(_OWORD *)((char *)v95 + 184) = 0u;
                *((_BYTE *)v95 + 101) = CSArchitectureIs64Bit(*(unsigned int *)(v55 + 4) | ((unint64_t)(*(_DWORD *)(v55 + 8) & 0xFFFFFF) << 32));
                *((_BYTE *)v95 + 100) = 0;
                *((void *)v95 + 15) = v398;
                *((void *)v95 + 2) = 0LL;
                *((void *)v95 + 3) = 0LL;
                *(void *)name = *(unsigned int *)(v55 + 4) | ((unint64_t)(*(_DWORD *)(v55 + 8) & 0xFFFFFF) << 32);
                std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>( &v428,  (uint64_t)v425,  (uint64_t *)name,  (uint64_t)v423,  (uint64_t)&v416,  (uint64_t *)&v420,  (const CSCppCoreFileTaskCrashinfo *)v458,  v409);
                __int128 v123 = v409[0];
                v409[0] = 0LL;
                uint64_t v124 = *((void *)v95 + 24);
                *((void *)v95 + 24) = v123;
                if (v124)
                {
                  (*(void (**)(uint64_t))(*(void *)v124 + 8LL))(v124);
                  uint64_t v125 = v409[0];
                  v409[0] = 0LL;
                  if (v125) {
                    (*(void (**)(void *))(*(void *)v125 + 8LL))(v125);
                  }
                }

                *((_DWORD *)v95 + 26) = 1;
              }

              goto LABEL_331;
            }

            int v60 = *(_DWORD *)v58;
            if (*(_DWORD *)v58 != 25) {
              break;
            }
            uint64_t v65 = v56;
            uint64_t v66 = a3;
            uint64_t v68 = *(void *)(v58 + 24);
            uint64_t v67 = *(void *)(v58 + 32);
            uint64_t v70 = *(void *)(v58 + 40);
            uint64_t v69 = *(void *)(v58 + 48);
            int v71 = *(_DWORD *)(v58 + 56);
            int v72 = *(_DWORD *)(v58 + 60);
            uint64_t v73 = (char *)v425[1];
            if (v425[1] >= v426)
            {
              uint64_t v75 = (char *)v425[0];
              unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v425[1] - (char *)v425[0]) >> 3);
              unint64_t v77 = v76 + 1;
              if (v76 + 1 > 0x666666666666666LL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                int64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)&v426,  v78);
                uint64_t v75 = (char *)v425[0];
                uint64_t v73 = (char *)v425[1];
              }

              else
              {
                int64_t v79 = 0LL;
              }

              uint64_t v80 = &v79[40 * v76];
              *(void *)uint64_t v80 = v68;
              *((void *)v80 + 1) = v67;
              *((void *)v80 + 2) = v70;
              *((void *)v80 + 3) = v69;
              *((_DWORD *)v80 + _Block_object_dispose(va, 8) = v72;
              *((_DWORD *)v80 + 9) = v71;
              if (v73 == v75)
              {
                uint64_t v84 = &v79[40 * v76];
                a3 = v66;
                uint64_t v56 = v65;
              }

              else
              {
                uint64_t v81 = &v79[40 * v76];
                a3 = v66;
                uint64_t v56 = v65;
                do
                {
                  __int128 v82 = *(_OWORD *)(v73 - 40);
                  __int128 v83 = *(_OWORD *)(v73 - 24);
                  uint64_t v84 = v81 - 40;
                  *((void *)v81 - 1) = *((void *)v73 - 1);
                  *(_OWORD *)(v81 - 24) = v83;
                  *(_OWORD *)(v81 - 40) = v82;
                  v73 -= 40;
                  v81 -= 40;
                }

                while (v73 != v75);
              }

              uint64_t v74 = v80 + 40;
              v425[0] = v84;
              v425[1] = v80 + 40;
              v426 = &v79[40 * v78];
              unsigned int v5 = v402;
              if (v75) {
                operator delete(v75);
              }
            }

            else
            {
              *(void *)v425[1] = v68;
              *((void *)v73 + 1) = v67;
              *((void *)v73 + 2) = v70;
              *((void *)v73 + 3) = v69;
              uint64_t v74 = v73 + 40;
              *((_DWORD *)v73 + _Block_object_dispose(va, 8) = v72;
              *((_DWORD *)v73 + 9) = v71;
              a3 = v66;
              uint64_t v56 = v65;
              unsigned int v5 = v402;
            }

            v425[1] = v74;
          }

          if (v60 != 49) {
            break;
          }
          if (!strncmp((const char *)(v58 + 8), "vm info", 0x10uLL))
          {
            parse_vm_info_note(v5, v59, v430);
            std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>( (uint64_t)&v416,  (__n128 *)v430);
            if (BYTE8(v431))
            {
              v409[0] = v430;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
            }

            if (!(_BYTE)v419)
            {
              uint64_t v172 = (void **)v423[0];
              if (v423[0] != v56)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v172 + 8));
                  uint64_t v173 = (void **)v172[1];
                  if (v173)
                  {
                    do
                    {
                      uint64_t v174 = v173;
                      uint64_t v173 = (void **)*v173;
                    }

                    while (v173);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v174 = (void **)v172[2];
                      BOOL v19 = *v174 == v172;
                      uint64_t v172 = v174;
                    }

                    while (!v19);
                  }

                  uint64_t v172 = v174;
                }

                while (v174 != v56);
              }

              goto LABEL_330;
            }
          }

          else if (!strncmp(v59->data_owner, "task crashinfo", 0x10uLL))
          {
            parse_task_crashinfo_note(v5, v59, v430);
            std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>( (CSCppCoreFileTaskCrashinfo *)v458,  (uint64_t)v430);
            if (v457)
            {
              if (v456 && __p)
              {
                v455 = __p;
                operator delete(__p);
              }

              if (v453 && v451)
              {
                __int128 v452 = v451;
                operator delete(v451);
              }

              if (v441 && v440 < 0) {
                operator delete(v438);
              }
              if ((_BYTE)v437 && SHIBYTE(v436) < 0) {
                operator delete(*(void **)&v433[24]);
              }
              if (v433[16] && (v433[15] & 0x80000000) != 0) {
                operator delete(v432);
              }
              if (BYTE8(v431) && SBYTE7(v431) < 0) {
                operator delete(v430[0]);
              }
            }

            if (!v480)
            {
              __int128 v178 = (void **)v423[0];
              if (v423[0] != v56)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v178 + 8));
                  size_t v179 = (void **)v178[1];
                  if (v179)
                  {
                    do
                    {
                      __n128 v180 = v179;
                      size_t v179 = (void **)*v179;
                    }

                    while (v179);
                  }

                  else
                  {
                    do
                    {
                      __n128 v180 = (void **)v178[2];
                      BOOL v19 = *v180 == v178;
                      __int128 v178 = v180;
                    }

                    while (!v19);
                  }

                  __int128 v178 = v180;
                }

                while (v180 != v56);
                goto LABEL_330;
              }

              uint64_t v95 = 0LL;
LABEL_355:
              if ((_BYTE)v419)
              {
                *(void *)__int128 v458 = &v416;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
              }

              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v423,  (void *)v423[1]);
LABEL_184:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v481);
              if (v425[0])
              {
                v425[1] = v425[0];
                operator delete(v425[0]);
              }

              if ((_DWORD)a3)
              {
                if (CSArchitectureIsArm64(*(void *)(*((void *)v95 + 24) + 40LL)))
                {
                  unint64_t v106 = (void *)CSSymbolicatorCreateWithCoreFilePathAndFlags(v5, 0LL, 0LL, 0LL);
                  char v107 = (char)v106;
                  uint64_t v109 = (uint64_t)v108;
                  int v416 = v106;
                  int v417 = v108;
                  if (!CSIsNull((char)v106, (char)v108))
                  {
                    v430[0] = off_189DFAB48;
                    v430[1] = &v416;
                    *((void *)&v431 + 1) = v430;
                    *(void *)&v458[24] = v458;
                    *(void *)__int128 v458 = off_189DFAB48;
                    *(void *)&v458[8] = &v416;
                    char SymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolOwnerWithNameAtTime( v107,  v109,  (uint64_t)"dyld",  0x8000000000000000LL);
                    mach_port_name_t v112 = CSIsNull(SymbolOwnerWithNameAtTime, v111);
                    uint64_t SymbolWithMangledNameAtTime = CSSymbolicatorGetSymbolWithMangledNameAtTime( (char)v416,  (uint64_t)v417,  (uint64_t)"_vas__segmentinfo_table",  0x8000000000000000LL);
                    uint64_t v115 = v114;
                    if (CSIsNull(SymbolWithMangledNameAtTime, v114))
                    {
                      DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
                      goto LABEL_254;
                    }

                    unint64_t Range = CSSymbolGetRange(SymbolWithMangledNameAtTime, v115);
                    uint64_t v142 = CSCppCoreFileMemory::CSCppCoreFileMemory(v481, (uint64_t)v95);
                    uint64_t v143 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v481 + 32LL))( v142,  Range,  8LL);
                    if (v144 >= 8
                      && (__int128 v145 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *, void, uint64_t))(*(void *)v481 + 32LL))( v481,  *v143,  24LL),  v146 >= 0x18))
                    {
                      char v152 = 0;
                      unsigned int v151 = *v145;
                      unint64_t v150 = ((unint64_t)*(unsigned int *)(v145 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v145 + 5) | (v145[7] << 16)) << 40);
                      int v147 = v145[16];
                      unsigned int v148 = v145[17];
                      LODWORD(v149) = v145[18];
                    }

                    else
                    {
                      int v147 = 0;
                      unsigned int v148 = 0;
                      LODWORD(v149) = 0;
                      unint64_t v150 = 0LL;
                      unsigned int v151 = 0;
                      char v152 = 1;
                    }

                    CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v481);
                    DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
                    if ((v152 & 1) == 0)
                    {
                      mach_port_name_t v428 = v112;
                      CSCppCoreFileMemory::CSCppCoreFileMemory(&v416, (uint64_t)v95);
                      if (v147 == 1 && v149 <= v148 && (_DWORD)v149)
                      {
                        uint64_t v149 = v149;
                        unint64_t v165 = v150 + v151;
                        do
                        {
                          __int128 v166 = (uint64_t *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v416 + 4))( &v416,  v165,  8LL);
                          if (v167 < 8) {
                            break;
                          }
                          uint64_t v168 = *v166;
                          if (!*v166) {
                            break;
                          }
                          uint64_t v169 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v416 + 4))(&v416, v168, 32LL);
                          if (v170 < 0x20 || *(_BYTE *)v169 != 1) {
                            break;
                          }
                          if (!*(_BYTE *)(v169 + 16))
                          {
                            v481[0] = 1;
                            uint64_t v210 = *(void *)(v169 + 1);
                            int v211 = *(_DWORD *)(v169 + 9);
                            __int16 v212 = *(_WORD *)(v169 + 13);
                            char v484 = *(_BYTE *)(v169 + 15);
                            __int16 v483 = v212;
                            int v482 = v211;
                            *(void *)&v481[1] = v210;
                            char v485 = 0;
                            LODWORD(v210) = *(_DWORD *)(v169 + 25);
                            LOWORD(v211) = *(_WORD *)(v169 + 29);
                            LOBYTE(v212) = *(_BYTE *)(v169 + 31);
                            uint64_t v486 = *(void *)(v169 + 17);
                            char v489 = v212;
                            __int16 v488 = v211;
                            int v487 = v210;
                            char v490 = 1;
                            unsigned int v412 = 0LL;
                            unsigned int v413 = 0LL;
                            unint64_t v414 = 0LL;
                            unsigned int v213 = *(unsigned __int16 *)&v481[6];
                            if (*(_WORD *)&v481[6])
                            {
                              unint64_t v214 = 0LL;
                              do
                              {
                                uint64_t v215 = (*((uint64_t (**)(void **, unint64_t, uint64_t))v416 + 4))( &v416,  v168 + v481[1] + v214 * v481[2],  32LL);
                                if (v216 < 0x20)
                                {
LABEL_709:
                                  BOOL v386 = 0;
                                  goto LABEL_710;
                                }

                                char v217 = *(_BYTE *)v215;
                                *(_OWORD *)__int128 v458 = *(_OWORD *)(v215 + 1);
                                *(void *)&v458[15] = *(void *)(v215 + 16);
                                int v218 = *(unsigned __int8 *)(v215 + 24);
                                LODWORD(v430[0]) = *(_DWORD *)(v215 + 25);
                                *(_DWORD *)((char *)v430 + 3) = *(_DWORD *)(v215 + 28);
                                if (v218)
                                {
                                  int v219 = (__int128 *)v413;
                                  if ((unint64_t)v413 >= v414)
                                  {
                                    int64_t v221 = (v413 - (_BYTE *)v412) >> 5;
                                    unint64_t v222 = v221 + 1;
                                    uint64_t v223 = v414 - (void)v412;
                                    else {
                                      unint64_t v224 = v222;
                                    }
                                    if (v224) {
                                      uint64_t v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>( (uint64_t)&v414,  v224);
                                    }
                                    else {
                                      uint64_t v225 = 0LL;
                                    }
                                    uint64_t v226 = (__int128 *)&v225[32 * v221];
                                    *(_BYTE *)uint64_t v226 = v217;
                                    *(__int128 *)((char *)v226 + 1) = *(_OWORD *)v458;
                                    *((void *)v226 + 2) = *(void *)&v458[15];
                                    *((_BYTE *)v226 + 24) = v218;
                                    *(_DWORD *)((char *)v226 + 25) = v430[0];
                                    *((_DWORD *)v226 + 7) = *(_DWORD *)((char *)v430 + 3);
                                    unsigned int v228 = (__int128 *)v412;
                                    unint64_t v227 = (__int128 *)v413;
                                    uint64_t v229 = v226;
                                    if (v413 != v412)
                                    {
                                      do
                                      {
                                        __int128 v230 = *(v227 - 1);
                                        *(v229 - 2) = *(v227 - 2);
                                        *(v229 - 1) = v230;
                                        v229 -= 2;
                                        v227 -= 2;
                                      }

                                      while (v227 != v228);
                                      unint64_t v227 = v228;
                                    }

                                    uint64_t v220 = v226 + 2;
                                    unsigned int v412 = v229;
                                    unsigned int v413 = (char *)(v226 + 2);
                                    unint64_t v414 = (unint64_t)&v225[32 * v224];
                                    if (v227) {
                                      operator delete(v227);
                                    }
                                  }

                                  else
                                  {
                                    *unsigned int v413 = v217;
                                    *(__int128 *)((char *)v219 + 1) = *(_OWORD *)v458;
                                    *((void *)v219 + 2) = *(void *)&v458[15];
                                    *((_BYTE *)v219 + 24) = v218;
                                    *(_DWORD *)((char *)v219 + 25) = v430[0];
                                    *((_DWORD *)v219 + 7) = *(_DWORD *)((char *)v430 + 3);
                                    uint64_t v220 = v219 + 2;
                                  }

                                  unsigned int v413 = (char *)v220;
                                  unsigned int v213 = *(unsigned __int16 *)&v481[6];
                                }

                                ++v214;
                              }

                              while (v214 < v213);
                              uint64_t v231 = (__n128 *)v412;
                              __int128 v232 = (__n128 *)v413;
                            }

                            else
                            {
                              __int128 v232 = 0LL;
                              uint64_t v231 = 0LL;
                            }

                            unint64_t v312 = 126 - 2 * __clz(((char *)v232 - (char *)v231) >> 5);
                            if (v232 == v231) {
                              uint64_t v313 = 0LL;
                            }
                            else {
                              uint64_t v313 = v312;
                            }
                            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (uint64_t)v231,  v232,  v313,  1);
                            *(void *)&v458[16] = 0LL;
                            *(void *)&v458[8] = 0LL;
                            *(void *)__int128 v458 = &v458[8];
                            v430[0] = (void *)1;
                            __int128 v314 = v412;
                            unint64_t v315 = 1LL;
                            while (1)
                            {
                              if (CSRangeIntersectsRange( v314[4 * v315 - 4],  v314[4 * v315 - 3],  v314[4 * v315],  v314[4 * v315 + 1]))
                              {
                                unint64_t v316 = v314[4 * v315 - 2];
                                unint64_t v317 = v314[4 * v315 + 2];
                                if (v316 >= v317)
                                {
                                  if (v316 <= v317)
                                  {
                                    std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(void **)&v458[8]);
                                    goto LABEL_709;
                                  }

                                  std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>( (uint64_t **)v458,  (unint64_t *)v430,  (uint64_t *)v430);
                                }

                                else
                                {
                                  v409[0] = (char *)v430[0] - 1;
                                  std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>( (uint64_t **)v458,  (unint64_t *)v409,  (uint64_t *)v409);
                                }
                              }

                              unint64_t v315 = (unint64_t)v430[0] + 1;
                              v430[0] = (void *)v315;
                              __int128 v314 = v412;
                              uint64_t v318 = (__int128 *)v413;
                              if (v315 >= (v413 - (_BYTE *)v412) >> 5)
                              {
                                uint64_t v319 = *(void **)v458;
                                if (*(_BYTE **)v458 != &v458[8])
                                {
                                  do
                                  {
                                    uint64_t v320 = (char *)v412 + 32 * v319[4];
                                    int64_t v321 = (char *)v318 - (v320 + 32);
                                    uint64_t v318 = (__int128 *)&v320[v321];
                                    unsigned int v413 = &v320[v321];
                                    v322 = (void *)v319[1];
                                    if (v322)
                                    {
                                      do
                                      {
                                        unint64_t v323 = v322;
                                        v322 = (void *)*v322;
                                      }

                                      while (v322);
                                    }

                                    else
                                    {
                                      do
                                      {
                                        unint64_t v323 = (_BYTE *)v319[2];
                                        BOOL v19 = *(void *)v323 == (void)v319;
                                        uint64_t v319 = v323;
                                      }

                                      while (!v19);
                                    }

                                    uint64_t v319 = v323;
                                  }

                                  while (v323 != &v458[8]);
                                }

LABEL_576:
                                std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(void **)&v458[8]);
                                v409[0] = 0LL;
                                v409[1] = 0LL;
                                unint64_t v410 = 0LL;
                                uint64_t v324 = (unsigned __int8 *)v412;
                                v392 = (__int128 *)v413;
                                if (v412 != v413)
                                {
                                  do
                                  {
                                    unint64_t v325 = *(void *)v324;
                                    uint64_t v326 = *((void *)v324 + 1);
                                    *(void *)__int128 v458 = *(void *)v324;
                                    *(void *)&v458[8] = v326;
                                    memset(&v458[16], 0, 52);
                                    v458[68] = 1;
                                    uint64_t v459 = 0LL;
                                    __int16 v460 = 0;
                                    *(void *)__int128 v461 = 0LL;
                                    *(void *)&v461[8] = 0LL;
                                    *(_DWORD *)&v461[16] = *((_DWORD *)v324 + 7);
                                    LOBYTE(v462) = 0;
                                    char v466 = 0;
                                    LOBYTE(v467) = 0;
                                    char v469 = 0;
                                    LOBYTE(v470) = 0;
                                    char v472 = 0;
                                    __int128 v474 = 0LL;
                                    __int128 v475 = 0LL;
                                    __int128 v473 = 0LL;
                                    char v400 = v324;
                                    unsigned int v327 = *((_DWORD *)v324 + 7);
                                    if ((v327 & 1) != 0) {
                                      int v328 = 3;
                                    }
                                    else {
                                      int v328 = 1;
                                    }
                                    __int16 v427 = 9;
                                    uint64_t v329 = *((void *)v95 + 24);
                                    uint64_t v331 = *(unint64_t **)(v329 + 16);
                                    char v330 = *(unint64_t **)(v329 + 24);
                                    if (v331 == v330)
                                    {
                                      uint64_t v338 = v326;
                                      unint64_t v337 = v325;
                                    }

                                    else
                                    {
                                      unsigned int v332 = v328 & 0xFFFFFFFB | (4 * ((v327 >> 1) & 1));
                                      int v396 = (v327 >> 2) & 1;
                                      do
                                      {
                                        unint64_t v333 = *v331;
                                        uint64_t v334 = v331[1];
                                        if (CSRangeIntersectsRange(*v331, v334, v325, v326))
                                        {
                                          v430[0] = (void *)CSRangeIntersectionRange(v333, v334, v325, v326);
                                          v430[1] = (void *)v335;
                                          LODWORD(v431) = 1;
                                          DWORD1(v431) = v332;
                                          *((void *)&v431 + 1) = v332;
                                          v432 = 0LL;
                                          *(_DWORD *)__int128 v433 = v324[25];
                                          *(void *)&v433[4] = 0LL;
                                          *(void *)&v433[12] = 0LL;
                                          *(void *)&v433[19] = 0LL;
                                          *(_WORD *)&v433[27] = v396;
                                          uint64_t v434 = 0LL;
                                          __int16 v435 = 0;
                                          int v436 = 0;
                                          uint64_t v437 = 0LL;
                                          LODWORD(v43_Block_object_dispose(va, 8) = 3;
                                          HIDWORD(v43_Block_object_dispose(va, 8) = *((_DWORD *)v324 + 7);
                                          LOBYTE(v439) = 0;
                                          uint64_t v336 = v335 >> 14;
                                          char v443 = 0;
                                          std::vector<unsigned short>::vector(v425, v335 >> 14, &v427);
                                          __int128 v444 = *(_OWORD *)v425;
                                          __int128 v445 = v426;
                                          v425[1] = 0LL;
                                          v426 = 0LL;
                                          v425[0] = 0LL;
                                          char v446 = 1;
                                          std::vector<unsigned short>::vector(v423, v336, &v427);
                                          __int128 v447 = *(_OWORD *)v423;
                                          v448 = v424;
                                          v423[1] = 0LL;
                                          v424 = 0LL;
                                          v423[0] = 0LL;
                                          char v449 = 1;
                                          v451 = 0LL;
                                          __int128 v452 = 0LL;
                                          uint64_t v450 = 0LL;
                                          std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]( (uint64_t *)&v473,  (__int128 *)v430);
                                          *(void *)name = &v450;
                                          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)name);
                                          if (v449 && (void)v447)
                                          {
                                            *((void *)&v447 + 1) = v447;
                                            operator delete((void *)v447);
                                          }

                                          if (v446 && (void)v444)
                                          {
                                            *((void *)&v444 + 1) = v444;
                                            operator delete((void *)v444);
                                          }

                                          if (v443 && v442 < 0) {
                                            operator delete(v439);
                                          }
                                          if (v423[0])
                                          {
                                            v423[1] = v423[0];
                                            operator delete(v423[0]);
                                          }

                                          if (v425[0])
                                          {
                                            v425[1] = v425[0];
                                            operator delete(v425[0]);
                                          }
                                        }

                                        v331 += 5;
                                      }

                                      while (v331 != v330);
                                      unint64_t v337 = *(void *)v458;
                                      uint64_t v338 = *(void *)&v458[8];
                                    }

                                    __int128 v339 = 0LL;
                                    uint64_t v340 = 0LL;
                                    v425[0] = 0LL;
                                    v425[1] = 0LL;
                                    v426 = 0LL;
                                    if (v337 < v337 + v338)
                                    {
                                      uint64_t v341 = v473;
                                      unint64_t v342 = v326 + v325;
                                      do
                                      {
                                        *(_OWORD *)__int128 v430 = *(_OWORD *)v324;
                                        __int128 v431 = *((_OWORD *)v324 + 1);
                                        v432 = (void *)0x4000;
                                        *(void *)__int128 v433 = v337;
                                        *(void *)&v433[8] = v425;
                                        if (v341 == v474)
                                        {
                                          set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()( (uint64_t)v430,  v342);
                                          unint64_t v337 = v342;
                                        }

                                        else
                                        {
                                          unint64_t v343 = *v341;
                                          if (v337 < *v341)
                                          {
                                            if (v342 >= v343) {
                                              unint64_t v344 = *v341;
                                            }
                                            else {
                                              unint64_t v344 = v342;
                                            }
                                            set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()( (uint64_t)v430,  v344);
                                            unint64_t v343 = *v341;
                                          }

                                          unint64_t v337 = v341[1] + v343;
                                          v341 += 28;
                                        }
                                      }

                                      while (v337 < *(void *)&v458[8] + *(void *)v458);
                                      uint64_t v340 = (uint64_t *)v425[0];
                                      __int128 v339 = v425[1];
                                    }

                                    std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>( (uint64_t *)&v473,  (__int128 *)v474,  v340,  (uint64_t)v339,  0x6DB6DB6DB6DB6DB7LL * ((v339 - (_BYTE *)v340) >> 5));
                                    unint64_t v345 = 126
                                         - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)v474 - (_BYTE *)v473) >> 5));
                                    if (v474 == v473) {
                                      uint64_t v346 = 0LL;
                                    }
                                    else {
                                      uint64_t v346 = v345;
                                    }
                                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (unint64_t)v473,  (__int128 *)v474,  v346,  1);
                                    std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]( (uint64_t *)v409,  (__int128 *)v458);
                                    v430[0] = v425;
                                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                                    v430[0] = &v473;
                                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                                    if (v472 && (void)v470)
                                    {
                                      *((void *)&v470 + 1) = v470;
                                      operator delete((void *)v470);
                                    }

                                    if (v469 && (void)v467)
                                    {
                                      *((void *)&v467 + 1) = v467;
                                      operator delete((void *)v467);
                                    }

                                    if (v466 && v465 < 0) {
                                      operator delete(v462);
                                    }
                                    v324 += 32;
                                  }

                                  while (v400 + 32 != (unsigned __int8 *)v392);
                                }

                                uint64_t v347 = *((void *)v95 + 24);
                                uint64_t v348 = *(void *)(v347 + 16);
                                uint64_t v404 = *(void *)(v347 + 24);
                                if (v348 != v404)
                                {
                                  do
                                  {
                                    unint64_t v350 = *(void *)v348;
                                    uint64_t v349 = *(void *)(v348 + 8);
                                    v430[1] = 0LL;
                                    v430[0] = 0LL;
                                    *(void *)&__int128 v431 = 0LL;
                                    unint64_t v352 = (char *)v409[0];
                                    uint64_t v351 = (char *)v409[1];
                                    if (v409[0] == v409[1])
                                    {
                                      v359 = 0LL;
                                      goto LABEL_653;
                                    }

                                    do
                                    {
                                      if (CSRangeContainsRange(*(void *)v352, *((void *)v352 + 1), v350, v349))
                                      {
                                        v359 = (unint64_t *)v430[1];
                                        goto LABEL_672;
                                      }

                                      BOOL v353 = CSRangeIntersectsRange(v350, v349, *(void *)v352, *((void *)v352 + 1));
                                      unint64_t v354 = *(void *)v352;
                                      if (v353)
                                      {
                                        unint64_t v355 = *((void *)v352 + 1);
                                        if (v350 - v354 >= v355)
                                        {
                                          unint64_t v357 = v354 - v350;
                                          char v358 = (char *)v430[1];
                                          if (v430[1] >= (void *)v431)
                                          {
                                            uint64_t v360 = (char *)v430[0];
                                            int64_t v361 = ((char *)v430[1] - (char *)v430[0]) >> 4;
                                            unint64_t v362 = v361 + 1;
                                            uint64_t v363 = v431 - (unint64_t)v430[0];
                                            else {
                                              unint64_t v364 = v362;
                                            }
                                            if (v364)
                                            {
                                              unint64_t v365 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)&v431,  v364);
                                              char v358 = (char *)v430[1];
                                              uint64_t v360 = (char *)v430[0];
                                            }

                                            else
                                            {
                                              unint64_t v365 = 0LL;
                                            }

                                            uint64_t v366 = (unint64_t *)&v365[16 * v361];
                                            *uint64_t v366 = v350;
                                            v366[1] = v357;
                                            v367 = v366;
                                            if (v358 != v360)
                                            {
                                              do
                                              {
                                                *((_OWORD *)v367 - 1) = *((_OWORD *)v358 - 1);
                                                v367 -= 2;
                                                v358 -= 16;
                                              }

                                              while (v358 != v360);
                                              uint64_t v360 = (char *)v430[0];
                                            }

                                            v359 = v366 + 2;
                                            v430[0] = v367;
                                            v430[1] = v366 + 2;
                                            *(void *)&__int128 v431 = &v365[16 * v364];
                                            if (v360) {
                                              operator delete(v360);
                                            }
                                          }

                                          else
                                          {
                                            *(void *)v430[1] = v350;
                                            *((void *)v358 + 1) = v357;
                                            v359 = (unint64_t *)(v358 + 16);
                                          }

                                          v430[1] = v359;
                                          unint64_t v368 = *(void *)v352;
                                          unint64_t v369 = *((void *)v352 + 1);
                                          unint64_t v370 = v349 + v350;
                                          if (v349 + v350 - *(void *)v352 < v369) {
                                            goto LABEL_672;
                                          }
                                          unint64_t v350 = v369 + v368;
                                          uint64_t v349 = v370 - (v369 + v368);
                                        }

                                        else
                                        {
                                          unint64_t v356 = v349 + v350;
                                          unint64_t v350 = v355 + v354;
                                          uint64_t v349 = v356 - (v355 + v354);
                                        }
                                      }

                                      else if (v354 > v349 + v350)
                                      {
                                        break;
                                      }

                                      v352 += 224;
                                    }

                                    while (v352 != v351);
                                    v359 = (unint64_t *)v430[1];
LABEL_653:
                                    if (v349)
                                    {
                                      if ((unint64_t)v359 >= (unint64_t)v431)
                                      {
                                        v371 = (unint64_t *)v430[0];
                                        uint64_t v372 = ((char *)v359 - (char *)v430[0]) >> 4;
                                        unint64_t v373 = v372 + 1;
                                        uint64_t v374 = v431 - (unint64_t)v430[0];
                                        else {
                                          unint64_t v375 = v373;
                                        }
                                        if (v375)
                                        {
                                          v376 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)&v431,  v375);
                                          v359 = (unint64_t *)v430[1];
                                          v371 = (unint64_t *)v430[0];
                                        }

                                        else
                                        {
                                          v376 = 0LL;
                                        }

                                        unint64_t v377 = (unint64_t *)&v376[16 * v372];
                                        *unint64_t v377 = v350;
                                        v377[1] = v349;
                                        uint64_t v378 = v377;
                                        if (v359 != v371)
                                        {
                                          do
                                          {
                                            *((_OWORD *)v378 - 1) = *((_OWORD *)v359 - 1);
                                            v378 -= 2;
                                            v359 -= 2;
                                          }

                                          while (v359 != v371);
                                          v371 = (unint64_t *)v430[0];
                                        }

                                        v359 = v377 + 2;
                                        v430[0] = v378;
                                        v430[1] = v377 + 2;
                                        *(void *)&__int128 v431 = &v376[16 * v375];
                                        if (v371) {
                                          operator delete(v371);
                                        }
                                      }

                                      else
                                      {
                                        unint64_t *v359 = v350;
                                        v359[1] = v349;
                                        v359 += 2;
                                      }

                                      v430[1] = v359;
                                    }

LABEL_672:
                                    uint64_t v379 = (unint64_t *)v430[0];
                                    if (v430[0] != v359)
                                    {
                                      do
                                      {
                                        __int16 v427 = 9;
                                        int v380 = *(_DWORD *)(v348 + 32);
                                        int v381 = *(_DWORD *)(v348 + 36);
                                        __int128 v382 = *(_OWORD *)v379;
                                        *(_DWORD *)&v458[16] = 0;
                                        *(_DWORD *)&v458[20] = v380 | 1;
                                        if ((v380 & 4) != 0) {
                                          int v383 = 3;
                                        }
                                        else {
                                          int v383 = 1;
                                        }
                                        *(_OWORD *)__int128 v458 = v382;
                                        *(_DWORD *)&v458[24] = v381 | 1;
                                        uint64_t v459 = 0LL;
                                        __int16 v460 = 0;
                                        *(_DWORD *)__int128 v461 = 0;
                                        *(void *)&v461[4] = 0LL;
                                        memset(&v458[28], 0, 41);
                                        *(_DWORD *)&v461[12] = 3;
                                        *(_DWORD *)&v461[16] = v383;
                                        LOBYTE(v462) = 0;
                                        char v466 = 0;
                                        std::vector<unsigned short>::vector(v425, v379[1] >> 14, &v427);
                                        __int128 v467 = *(_OWORD *)v425;
                                        v468 = v426;
                                        v425[1] = 0LL;
                                        v426 = 0LL;
                                        v425[0] = 0LL;
                                        char v469 = 1;
                                        std::vector<unsigned short>::vector(v423, v379[1] >> 14, &v427);
                                        __int128 v470 = *(_OWORD *)v423;
                                        __int128 v471 = v424;
                                        v423[1] = 0LL;
                                        v424 = 0LL;
                                        v423[0] = 0LL;
                                        char v472 = 1;
                                        __int128 v474 = 0LL;
                                        __int128 v475 = 0LL;
                                        __int128 v473 = 0LL;
                                        std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]( (uint64_t *)v409,  (__int128 *)v458);
                                        *(void *)name = &v473;
                                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)name);
                                        if (v472 && (void)v470)
                                        {
                                          *((void *)&v470 + 1) = v470;
                                          operator delete((void *)v470);
                                        }

                                        if (v469 && (void)v467)
                                        {
                                          *((void *)&v467 + 1) = v467;
                                          operator delete((void *)v467);
                                        }

                                        if (v466 && v465 < 0) {
                                          operator delete(v462);
                                        }
                                        if (v423[0])
                                        {
                                          v423[1] = v423[0];
                                          operator delete(v423[0]);
                                        }

                                        if (v425[0])
                                        {
                                          v425[1] = v425[0];
                                          operator delete(v425[0]);
                                        }

                                        v379 += 2;
                                      }

                                      while (v379 != v359);
                                      unint64_t v384 = 126
                                           - 2
                                           * __clz(0x6DB6DB6DB6DB6DB7LL * (((char *)v409[1] - (char *)v409[0]) >> 5));
                                      if (v409[1] == v409[0]) {
                                        uint64_t v385 = 0LL;
                                      }
                                      else {
                                        uint64_t v385 = v384;
                                      }
                                      _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (unint64_t)v409[0],  (__int128 *)v409[1],  v385,  1);
                                      v359 = (unint64_t *)v430[0];
                                    }

                                    if (v359)
                                    {
                                      v430[1] = v359;
                                      operator delete(v359);
                                    }

                                    v348 += 40LL;
                                  }

                                  while (v348 != v404);
                                  uint64_t v347 = *((void *)v95 + 24);
                                }

                                std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]( (uint64_t *)v458,  v347 + 48);
                                *(void *)&__int128 v431 = 0LL;
                                v430[1] = 0LL;
                                v430[0] = &v430[1];
                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign( *((void *)v95 + 24) + 48LL,  v430);
                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v430,  (void *)v430[1]);
                                name[0] = dup(*(_DWORD *)(*((void *)v95 + 24) + 8LL));
                                BOOL v386 = name[0] != -1;
                                if (name[0] != -1)
                                {
                                  uint64_t v387 = *((void *)v95 + 24);
                                  uint64_t v421 = 0LL;
                                  uint64_t v422 = 0LL;
                                  uint64_t v420 = 0LL;
                                  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( &v420,  (uint64_t)v409[0],  (uint64_t)v409[1],  0x6DB6DB6DB6DB6DB7LL * (((char *)v409[1] - (char *)v409[0]) >> 5));
                                  v430[1] = 0LL;
                                  v430[0] = 0LL;
                                  *(void *)&__int128 v431 = 0LL;
                                  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( v430,  (uint64_t)v420,  v421,  0x6DB6DB6DB6DB6DB7LL * ((v421 - (uint64_t)v420) >> 5));
                                  std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>( name,  v387 + 16,  (uint64_t *)(v387 + 40),  (uint64_t)v458,  (uint64_t *)(v387 + 72),  (__int128 *)v430,  (int *)&v428,  (uint64_t *)&v481[8],  v423);
                                  unint64_t v388 = v423[0];
                                  v423[0] = 0LL;
                                  uint64_t v389 = *((void *)v95 + 24);
                                  *((void *)v95 + 24) = v388;
                                  if (v389)
                                  {
                                    (*(void (**)(uint64_t))(*(void *)v389 + 8LL))(v389);
                                    v390 = v423[0];
                                    v423[0] = 0LL;
                                    if (v390) {
                                      (*(void (**)(void *))(*(void *)v390 + 8LL))(v390);
                                    }
                                  }

                                  v425[0] = v430;
                                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
                                  v425[0] = &v420;
                                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
                                }

                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v458,  *(void **)&v458[8]);
                                *(void *)__int128 v458 = v409;
                                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
LABEL_710:
                                if (v412)
                                {
                                  unsigned int v413 = (char *)v412;
                                  operator delete(v412);
                                }

                                CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v416);
                                if (!v386)
                                {
LABEL_266:
                                  release_mapped_memory_cache((std::mutex *)v95);
                                  goto LABEL_267;
                                }

                                goto LABEL_254;
                              }
                            }
                          }

                          v165 += 8LL;
                          --v149;
                        }

                        while (v149);
                      }

                      CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v416);
                      goto LABEL_266;
                    }
                  }
                }

LABEL_254:
                clear_mapped_memory((uint64_t)v95);
              }

LABEL_268:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v405);
              goto LABEL_269;
            }
          }

          else if (!strncmp(v59->data_owner, "addrable bits", 0x10uLL))
          {
            uint64_t v420 = (void **)parse_addrable_bits_note(v5, v59);
            LOBYTE(v421) = v64;
            if (!v64)
            {
              uint64_t v184 = (void **)v423[0];
              if (v423[0] == v56) {
                goto LABEL_330;
              }
              do
              {
                mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v184 + 8));
                uint64_t v185 = (void **)v184[1];
                if (v185)
                {
                  do
                  {
                    int v186 = v185;
                    uint64_t v185 = (void **)*v185;
                  }

                  while (v185);
                }

                else
                {
                  do
                  {
                    int v186 = (void **)v184[2];
                    BOOL v19 = *v186 == v184;
                    uint64_t v184 = v186;
                  }

                  while (!v19);
                }

                uint64_t v95 = 0LL;
                uint64_t v184 = v186;
              }

              while (v186 != v56);
LABEL_331:
              if (v480)
              {
                if (v479 && v477)
                {
                  char v478 = v477;
                  operator delete(v477);
                }

                if (v476 && v474)
                {
                  __int128 v475 = v474;
                  operator delete(v474);
                }

                if (v464 && v463 < 0) {
                  operator delete(*(void **)&v461[12]);
                }
                if (v461[4] && (v461[3] & 0x80000000) != 0) {
                  operator delete(*(void **)&v458[64]);
                }
                if (v458[56] && (v458[55] & 0x80000000) != 0) {
                  operator delete(*(void **)&v458[32]);
                }
                if (v458[24] && (v458[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v458);
                }
              }

              goto LABEL_355;
            }
          }
        }
      }

      while (v60 != 4);
      parse_thread_load_command((const thread_command *)v58, (uint64_t)v430);
      if (BYTE8(v431))
      {
        mach_port_name_t v428 = 0;
        if (!mach_port_allocate(*MEMORY[0x1895FBBE0], 4u, &v428))
        {
          LODWORD(v409[0]) = v394;
          std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v409[1], (uint64_t)v430);
          *(void *)name = &v428;
          unint64_t v89 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t **)v423,  &v428,  (uint64_t)&std::piecewise_construct,  (_DWORD **)name);
          uint64_t v91 = (char **)(v89 + 7);
          uint64_t v90 = v89[7];
          *((_DWORD *)v89 + 10) = v409[0];
          uint64_t v92 = (char ***)(v89 + 6);
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)(v89 + 6),  v90);
          uint64_t v93 = v410;
          *(v91 - 1) = (char *)v409[1];
          *uint64_t v91 = v93;
          uint64_t v94 = v411;
          v91[1] = v411;
          if (v94)
          {
            *((void *)v93 + 2) = v91;
            v409[1] = &v410;
            unint64_t v410 = 0LL;
            uint64_t v411 = 0LL;
            uint64_t v93 = 0LL;
          }

          else
          {
            *uint64_t v92 = v91;
          }

          ++v394;
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)&v409[1],  v93);
          int v88 = 0;
          goto LABEL_171;
        }

        unint64_t v61 = (void **)v423[0];
        if (v423[0] != v56)
        {
          do
          {
            mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v61 + 8));
            uint64_t v62 = (void **)v61[1];
            if (v62)
            {
              do
              {
                unint64_t v63 = v62;
                uint64_t v62 = (void **)*v62;
              }

              while (v62);
            }

            else
            {
              do
              {
                unint64_t v63 = (void **)v61[2];
                BOOL v19 = *v63 == v61;
                unint64_t v61 = v63;
              }

              while (!v19);
            }

            unint64_t v61 = v63;
          }

          while (v63 != v56);
        }
      }

      else
      {
        uint64_t v85 = (void **)v423[0];
        if (v423[0] == v56) {
          goto LABEL_330;
        }
        do
        {
          mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v85 + 8));
          uint64_t v86 = (void **)v85[1];
          if (v86)
          {
            do
            {
              int v87 = v86;
              uint64_t v86 = (void **)*v86;
            }

            while (v86);
          }

          else
          {
            do
            {
              int v87 = (void **)v85[2];
              BOOL v19 = *v87 == v85;
              uint64_t v85 = v87;
            }

            while (!v19);
          }

          uint64_t v85 = v87;
        }

        while (v87 != v56);
      }

      int v88 = 1;
LABEL_171:
      if (BYTE8(v431)) {
        std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)v430,  (void *)v430[1]);
      }
      if (v88) {
        goto LABEL_330;
      }
    }
  }

  v409[0] = 0LL;
  v409[1] = 0LL;
  unint64_t v410 = 0LL;
  CSCppFileMemory::CSCppFileMemory(v481, v5, 0LL);
  v397 = a2;
  unint64_t v7 = 28LL;
  do
  {
    __int128 v8 = (__n128 *)(*(uint64_t (**)(_BYTE *, void, unint64_t))(*(void *)v481 + 32LL))( v481,  0LL,  v7);
    mach_port_name_t v10 = v8;
    if (!v8 || v8->n128_u32[0] != -17958194) {
      goto LABEL_175;
    }
    unint64_t v7 = v8[1].n128_u32[1] + 28LL;
  }

  while (v7 > v9);
  if (v8->n128_u32[3] != 4)
  {
LABEL_175:
    uint64_t v95 = 0LL;
    goto LABEL_176;
  }

  int v393 = 0;
  v425[1] = 0LL;
  v426 = 0LL;
  uint64_t v11 = &v425[1];
  v425[0] = &v425[1];
  LOBYTE(v405) = 0;
  char v407 = 0;
  v458[0] = 0;
  char v480 = 0;
  LOBYTE(v423[0]) = 0;
  LOBYTE(v423[1]) = 0;
  uint64_t v12 = v8[1].n128_u32[1];
  LODWORD(v416) = v8[1].n128_u32[0];
  int v417 = v8;
  unint64_t v418 = (unint64_t)&v8[1].n128_u64[1] + v12 + 4;
  uint64_t v419 = &v8[1].n128_u32[3];
  v401 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v13 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v416);
            uint64_t v14 = (const note_command *)v13;
            if (!v13)
            {
              unint64_t v116 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v409[1] - (char *)v409[0]) >> 3));
              if (v409[1] == v409[0]) {
                uint64_t v117 = 0LL;
              }
              else {
                uint64_t v117 = v116;
              }
              std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>( (uint64_t)v409[0],  (unint64_t)v409[1],  v117,  1);
              name[0] = open(v5, 0x1000000);
              if ((name[0] & 0x80000000) != 0)
              {
                unint64_t v138 = (void **)v425[0];
                if (v425[0] != v11)
                {
                  do
                  {
                    mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v138 + 8));
                    uint64_t v139 = (void **)v138[1];
                    if (v139)
                    {
                      do
                      {
                        uint64_t v140 = v139;
                        uint64_t v139 = (void **)*v139;
                      }

                      while (v139);
                    }

                    else
                    {
                      do
                      {
                        uint64_t v140 = (void **)v138[2];
                        BOOL v19 = *v140 == v138;
                        unint64_t v138 = v140;
                      }

                      while (!v19);
                    }

                    unint64_t v138 = v140;
                  }

                  while (v140 != v11);
                }

                goto LABEL_302;
              }

              uint64_t v95 = operator new(0xC8uLL);
              v95[1] = 0u;
              v95[2] = 0u;
              v95[4] = 0u;
              v95[5] = 0u;
              v95[6] = 0u;
              v95[7] = 0u;
              *uint64_t v95 = 0u;
              v95[3] = 0u;
              *((void *)v95 + 5) = v95 + 3;
              *((void *)v95 + _Block_object_dispose(va, 8) = 0LL;
              *((void *)v95 + 9) = 0LL;
              *((void *)v95 + 10) = 0LL;
              *((void *)v95 + 16) = 850045863LL;
              *(_OWORD *)((char *)v95 + 136) = 0u;
              *(_OWORD *)((char *)v95 + 152) = 0u;
              *(_OWORD *)((char *)v95 + 16_Block_object_dispose(va, 8) = 0u;
              *(_OWORD *)((char *)v95 + 184) = 0u;
              *((_BYTE *)v95 + 101) = CSArchitectureIs64Bit(v10->n128_u32[1] | ((unint64_t)(v10->n128_u32[2] & 0xFFFFFF) << 32));
              *((_BYTE *)v95 + 100) = 0;
              *((void *)v95 + 15) = v397;
              *((void *)v95 + 2) = 0LL;
              *((void *)v95 + 3) = 0LL;
              uint64_t v420 = (void **)(v10->n128_u32[1] | ((unint64_t)(v10->n128_u32[2] & 0xFFFFFF) << 32));
              std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>( name,  (uint64_t)v409,  (uint64_t *)&v420,  (uint64_t)v425,  (uint64_t)&v405,  (uint64_t *)v423,  (const CSCppCoreFileTaskCrashinfo *)v458,  &v412);
              uint64_t v118 = v412;
              unsigned int v412 = 0LL;
              uint64_t v119 = *((void *)v95 + 24);
              *((void *)v95 + 24) = v118;
              if (v119)
              {
                (*(void (**)(uint64_t))(*(void *)v119 + 8LL))(v119);
                uint64_t v120 = v412;
                unsigned int v412 = 0LL;
                if (v120) {
                  (*(void (**)(void *))(*(void *)v120 + 8LL))(v120);
                }
              }

              *((_DWORD *)v95 + 26) = 1;
              goto LABEL_303;
            }

            int v15 = *(_DWORD *)v13;
            if (*(_DWORD *)v13 != 1) {
              break;
            }
            __int128 v21 = v11;
            uint64_t v22 = a3;
            uint64_t v23 = *(unsigned int *)(v13 + 24);
            uint64_t v24 = *(unsigned int *)(v13 + 28);
            uint64_t v25 = *(unsigned int *)(v13 + 32);
            uint64_t v26 = *(unsigned int *)(v13 + 36);
            int v27 = *(_DWORD *)(v13 + 40);
            int v28 = *(_DWORD *)(v13 + 44);
            BOOL v29 = (char *)v409[1];
            if (v409[1] >= v410)
            {
              uint64_t v31 = (char *)v409[0];
              unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v409[1] - (char *)v409[0]) >> 3);
              unint64_t v33 = v32 + 1;
              if (v32 + 1 > 0x666666666666666LL) {
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34)
              {
                unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)&v410,  v34);
                uint64_t v31 = (char *)v409[0];
                BOOL v29 = (char *)v409[1];
              }

              else
              {
                unint64_t v35 = 0LL;
              }

              uint64_t v36 = &v35[40 * v32];
              *(void *)uint64_t v36 = v23;
              *((void *)v36 + 1) = v24;
              *((void *)v36 + 2) = v25;
              *((void *)v36 + 3) = v26;
              *((_DWORD *)v36 + _Block_object_dispose(va, 8) = v28;
              *((_DWORD *)v36 + 9) = v27;
              if (v29 == v31)
              {
                unsigned int v40 = &v35[40 * v32];
                a3 = v22;
                uint64_t v11 = v21;
              }

              else
              {
                unint64_t v37 = &v35[40 * v32];
                a3 = v22;
                uint64_t v11 = v21;
                do
                {
                  __int128 v38 = *(_OWORD *)(v29 - 40);
                  __int128 v39 = *(_OWORD *)(v29 - 24);
                  unsigned int v40 = v37 - 40;
                  *((void *)v37 - 1) = *((void *)v29 - 1);
                  *(_OWORD *)(v37 - 24) = v39;
                  *(_OWORD *)(v37 - 40) = v38;
                  v29 -= 40;
                  v37 -= 40;
                }

                while (v29 != v31);
              }

              int v30 = v36 + 40;
              v409[0] = v40;
              v409[1] = v36 + 40;
              unint64_t v410 = &v35[40 * v34];
              unsigned int v5 = v401;
              if (v31) {
                operator delete(v31);
              }
            }

            else
            {
              *(void *)v409[1] = v23;
              *((void *)v29 + 1) = v24;
              *((void *)v29 + 2) = v25;
              *((void *)v29 + 3) = v26;
              int v30 = v29 + 40;
              *((_DWORD *)v29 + _Block_object_dispose(va, 8) = v28;
              *((_DWORD *)v29 + 9) = v27;
              a3 = v22;
              uint64_t v11 = v21;
              unsigned int v5 = v401;
            }

            v409[1] = v30;
          }

          if (v15 == 49) {
            break;
          }
          if (v15 == 4)
          {
            parse_thread_load_command((const thread_command *)v13, (uint64_t)v430);
            if (BYTE8(v431))
            {
              name[0] = 0;
              if (!mach_port_allocate(*MEMORY[0x1895FBBE0], 4u, name))
              {
                LODWORD(v412) = v393;
                std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v413, (uint64_t)v430);
                uint64_t v420 = (void **)name;
                uint64_t v45 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t **)v425,  name,  (uint64_t)&std::piecewise_construct,  (_DWORD **)&v420);
                uint64_t v47 = v45 + 7;
                unint64_t v46 = v45[7];
                *((_DWORD *)v45 + 10) = (_DWORD)v412;
                uint64_t v48 = v45 + 6;
                std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)(v45 + 6),  v46);
                unint64_t v49 = (void *)v414;
                *(v47 - 1) = v413;
                void *v47 = v49;
                uint64_t v50 = v415;
                v47[1] = v415;
                if (v50)
                {
                  v49[2] = v47;
                  unsigned int v413 = (char *)&v414;
                  unint64_t v414 = 0LL;
                  uint64_t v415 = 0LL;
                  unint64_t v49 = 0LL;
                }

                else
                {
                  void *v48 = v47;
                }

                ++v393;
                std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)&v413,  v49);
                int v44 = 0;
                goto LABEL_84;
              }

              uint64_t v16 = (void **)v425[0];
              if (v425[0] != v11)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v16 + 8));
                  unint64_t v17 = (void **)v16[1];
                  if (v17)
                  {
                    do
                    {
                      uint64_t v18 = v17;
                      unint64_t v17 = (void **)*v17;
                    }

                    while (v17);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v18 = (void **)v16[2];
                      BOOL v19 = *v18 == v16;
                      uint64_t v16 = v18;
                    }

                    while (!v19);
                  }

                  uint64_t v16 = v18;
                }

                while (v18 != v11);
              }
            }

            else
            {
              __int128 v41 = (void **)v425[0];
              if (v425[0] == v11) {
                goto LABEL_302;
              }
              do
              {
                mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v41 + 8));
                __int128 v42 = (void **)v41[1];
                if (v42)
                {
                  do
                  {
                    uint64_t v43 = v42;
                    __int128 v42 = (void **)*v42;
                  }

                  while (v42);
                }

                else
                {
                  do
                  {
                    uint64_t v43 = (void **)v41[2];
                    BOOL v19 = *v43 == v41;
                    __int128 v41 = v43;
                  }

                  while (!v19);
                }

                __int128 v41 = v43;
              }

              while (v43 != v11);
            }

            int v44 = 1;
LABEL_84:
            if (BYTE8(v431)) {
              std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)v430,  (void *)v430[1]);
            }
            if (v44) {
              goto LABEL_302;
            }
          }
        }

        parse_vm_info_note(v5, v14, v430);
        std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>( (uint64_t)&v405,  (__n128 *)v430);
        if (BYTE8(v431))
        {
          unsigned int v412 = v430;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v412);
        }

        if (!v407)
        {
          int v162 = (void **)v425[0];
          if (v425[0] != v11)
          {
            do
            {
              mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v162 + 8));
              uint64_t v163 = (void **)v162[1];
              if (v163)
              {
                do
                {
                  unsigned int v164 = v163;
                  uint64_t v163 = (void **)*v163;
                }

                while (v163);
              }

              else
              {
                do
                {
                  unsigned int v164 = (void **)v162[2];
                  BOOL v19 = *v164 == v162;
                  int v162 = v164;
                }

                while (!v19);
              }

              int v162 = v164;
            }

            while (v164 != v11);
          }

          goto LABEL_302;
        }
      }

      if (strncmp(v14->data_owner, "task crashinfo", 0x10uLL)) {
        break;
      }
      parse_task_crashinfo_note(v5, v14, v430);
      std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>( (CSCppCoreFileTaskCrashinfo *)v458,  (uint64_t)v430);
      if (v457)
      {
        if (v456 && __p)
        {
          v455 = __p;
          operator delete(__p);
        }

        if (v453 && v451)
        {
          __int128 v452 = v451;
          operator delete(v451);
        }

        if (v441 && v440 < 0) {
          operator delete(v438);
        }
        if ((_BYTE)v437 && SHIBYTE(v436) < 0) {
          operator delete(*(void **)&v433[24]);
        }
        if (v433[16] && (v433[15] & 0x80000000) != 0) {
          operator delete(v432);
        }
        if (BYTE8(v431) && SBYTE7(v431) < 0) {
          operator delete(v430[0]);
        }
      }

      if (!v480)
      {
        __int128 v175 = (void **)v425[0];
        if (v425[0] == v11)
        {
          uint64_t v95 = 0LL;
          goto LABEL_351;
        }

        do
        {
          mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v175 + 8));
          __int128 v176 = (void **)v175[1];
          if (v176)
          {
            do
            {
              __int128 v177 = v176;
              __int128 v176 = (void **)*v176;
            }

            while (v176);
          }

          else
          {
            do
            {
              __int128 v177 = (void **)v175[2];
              BOOL v19 = *v177 == v175;
              __int128 v175 = v177;
            }

            while (!v19);
          }

          __int128 v175 = v177;
        }

        while (v177 != v11);
        goto LABEL_302;
      }
    }

    if (!strncmp(v14->data_owner, "addrable bits", 0x10uLL))
    {
      v423[0] = (void *)parse_addrable_bits_note(v5, v14);
      LOBYTE(v423[1]) = v20;
      if (!v20) {
        break;
      }
    }
  }

  unint64_t v181 = (void **)v425[0];
  if (v425[0] == v11)
  {
LABEL_302:
    uint64_t v95 = 0LL;
    goto LABEL_303;
  }

  do
  {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], *((_DWORD *)v181 + 8));
    BOOL v182 = (void **)v181[1];
    if (v182)
    {
      do
      {
        v183 = v182;
        BOOL v182 = (void **)*v182;
      }

      while (v182);
    }

    else
    {
      do
      {
        v183 = (void **)v181[2];
        BOOL v19 = *v183 == v181;
        unint64_t v181 = v183;
      }

      while (!v19);
    }

    uint64_t v95 = 0LL;
    unint64_t v181 = v183;
  }

  while (v183 != v11);
LABEL_303:
  if (v480)
  {
    if (v479 && v477)
    {
      char v478 = v477;
      operator delete(v477);
    }

    if (v476 && v474)
    {
      __int128 v475 = v474;
      operator delete(v474);
    }

    if (v464 && v463 < 0) {
      operator delete(*(void **)&v461[12]);
    }
    if (v461[4] && (v461[3] & 0x80000000) != 0) {
      operator delete(*(void **)&v458[64]);
    }
    if (v458[56] && (v458[55] & 0x80000000) != 0) {
      operator delete(*(void **)&v458[32]);
    }
    if (v458[24] && (v458[23] & 0x80000000) != 0) {
      operator delete(*(void **)v458);
    }
  }

LABEL_351:
  if (v407)
  {
    *(void *)__int128 v458 = &v405;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
  }

  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v425,  (void *)v425[1]);
LABEL_176:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v481);
  if (v409[0])
  {
    v409[1] = v409[0];
    operator delete(v409[0]);
  }

  if ((_DWORD)a3)
  {
    if (!CSArchitectureIsArm64(*(void *)(*((void *)v95 + 24) + 40LL))) {
      goto LABEL_231;
    }
    uint64_t v96 = CSSymbolicatorCreateWithCoreFilePathAndFlags(v5, 0LL, 0LL, 0LL);
    char v97 = v96;
    uint64_t v99 = v98;
    uint64_t v405 = v96;
    uint64_t v406 = v98;
    if (CSIsNull(v96, v98)) {
      goto LABEL_231;
    }
    v430[0] = off_189DFAAC8;
    v430[1] = &v405;
    *((void *)&v431 + 1) = v430;
    *(void *)&v458[24] = v458;
    *(void *)__int128 v458 = off_189DFAAC8;
    *(void *)&v458[8] = &v405;
    char v100 = CSSymbolicatorGetSymbolOwnerWithNameAtTime(v97, v99, (uint64_t)"dyld", 0x8000000000000000LL);
    BOOL v102 = CSIsNull(v100, v101);
    uint64_t v103 = CSSymbolicatorGetSymbolWithMangledNameAtTime( v405,  v406,  (uint64_t)"_vas__segmentinfo_table",  0x8000000000000000LL);
    uint64_t v105 = v104;
    if (CSIsNull(v103, v104))
    {
      DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
      goto LABEL_231;
    }

    unint64_t v126 = CSSymbolGetRange(v103, v105);
    unint64_t v127 = CSCppCoreFileMemory::CSCppCoreFileMemory(v481, (uint64_t)v95);
    unint64_t v128 = (unsigned int *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v481 + 32LL))( v127,  v126,  4LL);
    if (v129 >= 4
      && (mach_vm_address_t v130 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *, void, uint64_t))(*(void *)v481 + 32LL))( v481,  *v128,  24LL),  v131 >= 0x18))
    {
      char v137 = 0;
      unsigned int v136 = *v130;
      unint64_t v135 = ((unint64_t)*(unsigned int *)(v130 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v130 + 5) | (v130[7] << 16)) << 40);
      int v132 = v130[16];
      unsigned int v133 = v130[17];
      LODWORD(v134) = v130[18];
    }

    else
    {
      int v132 = 0;
      unsigned int v133 = 0;
      LODWORD(v134) = 0;
      unint64_t v135 = 0LL;
      unsigned int v136 = 0;
      char v137 = 1;
    }

    CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v481);
    DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
    if ((v137 & 1) != 0)
    {
LABEL_231:
      clear_mapped_memory((uint64_t)v95);
    }

    else
    {
      name[0] = v102;
      CSCppCoreFileMemory::CSCppCoreFileMemory(&v405, (uint64_t)v95);
      if (v132 == 1 && v134 <= v133 && (_DWORD)v134)
      {
        uint64_t v134 = v134;
        unint64_t v156 = v135 + v136;
        do
        {
          uint64_t v157 = (unsigned int *)(*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(v405 + 32))( &v405,  v156,  4LL);
          if (v158 < 4) {
            break;
          }
          uint64_t v159 = *v157;
          if (!(_DWORD)v159) {
            break;
          }
          uint64_t v160 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v405 + 32))(&v405, v159, 32LL);
          if (v161 < 0x20 || *(_BYTE *)v160 != 1) {
            break;
          }
          if (!*(_BYTE *)(v160 + 16))
          {
            v481[0] = 1;
            uint64_t v187 = *(void *)(v160 + 1);
            int v188 = *(_DWORD *)(v160 + 9);
            __int16 v189 = *(_WORD *)(v160 + 13);
            char v484 = *(_BYTE *)(v160 + 15);
            __int16 v483 = v189;
            int v482 = v188;
            *(void *)&v481[1] = v187;
            char v485 = 0;
            LODWORD(v187) = *(_DWORD *)(v160 + 25);
            LOWORD(v18_Block_object_dispose(va, 8) = *(_WORD *)(v160 + 29);
            LOBYTE(v189) = *(_BYTE *)(v160 + 31);
            uint64_t v486 = *(void *)(v160 + 17);
            char v489 = v189;
            __int16 v488 = v188;
            int v487 = v187;
            char v490 = 1;
            int v416 = 0LL;
            int v417 = 0LL;
            unint64_t v418 = 0LL;
            unsigned int v190 = *(unsigned __int16 *)&v481[6];
            if (*(_WORD *)&v481[6])
            {
              uint64_t v191 = 0LL;
              while (1)
              {
                uint64_t v192 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v405 + 32))( &v405,  v481[1] + v159 + v191 * v481[2],  32LL);
                if (v193 < 0x20) {
                  break;
                }
                unsigned __int8 v194 = *(_BYTE *)v192;
                *(_OWORD *)__int128 v458 = *(_OWORD *)(v192 + 1);
                *(void *)&v458[15] = *(void *)(v192 + 16);
                int v195 = *(unsigned __int8 *)(v192 + 24);
                LODWORD(v430[0]) = *(_DWORD *)(v192 + 25);
                *(_DWORD *)((char *)v430 + 3) = *(_DWORD *)(v192 + 28);
                if (v195)
                {
                  uint64_t v196 = v417;
                  if ((unint64_t)v417 >= v418)
                  {
                    uint64_t v198 = ((char *)v417 - (_BYTE *)v416) >> 5;
                    unint64_t v199 = v198 + 1;
                    uint64_t v200 = v418 - (void)v416;
                    else {
                      unint64_t v201 = v199;
                    }
                    if (v201) {
                      char v202 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>( (uint64_t)&v418,  v201);
                    }
                    else {
                      char v202 = 0LL;
                    }
                    v203 = &v202[32 * v198];
                    char *v203 = v194;
                    *(_OWORD *)(v203 + 1) = *(_OWORD *)v458;
                    *((void *)v203 + 2) = *(void *)&v458[15];
                    v203[24] = v195;
                    *(_DWORD *)(v203 + 25) = v430[0];
                    *((_DWORD *)v203 + 7) = *(_DWORD *)((char *)v430 + 3);
                    unint64_t v205 = (__n128 *)v416;
                    size_t v204 = v417;
                    BOOL v206 = (__n128 *)v203;
                    if (v417 != v416)
                    {
                      do
                      {
                        __n128 v207 = v204[-1];
                        v206[-2] = v204[-2];
                        v206[-1] = v207;
                        v206 -= 2;
                        v204 -= 2;
                      }

                      while (v204 != v205);
                      size_t v204 = v205;
                    }

                    uint64_t v197 = (__n128 *)(v203 + 32);
                    int v416 = v206;
                    int v417 = (__n128 *)(v203 + 32);
                    unint64_t v418 = (unint64_t)&v202[32 * v201];
                    if (v204) {
                      operator delete(v204);
                    }
                  }

                  else
                  {
                    v417->n128_u8[0] = v194;
                    *(__n128 *)((char *)v196 + 1) = *(__n128 *)v458;
                    v196[1].n128_u64[0] = *(void *)&v458[15];
                    v196[1].n128_u8[8] = v195;
                    *(unsigned __int32 *)((char *)&v196[1].n128_u32[2] + 1) = (unsigned __int32)v430[0];
                    v196[1].n128_u32[3] = *(_DWORD *)((char *)v430 + 3);
                    uint64_t v197 = v196 + 2;
                  }

                  int v417 = v197;
                  unsigned int v190 = *(unsigned __int16 *)&v481[6];
                }

                if (++v191 >= (unint64_t)v190)
                {
                  uint64_t v208 = (__n128 *)v416;
                  uint64_t v209 = v417;
                  goto LABEL_405;
                }
              }

LABEL_704:
              BOOL v307 = 0;
            }

            else
            {
              uint64_t v209 = 0LL;
              uint64_t v208 = 0LL;
LABEL_405:
              unint64_t v233 = 126 - 2 * __clz(((char *)v209 - (char *)v208) >> 5);
              if (v209 == v208) {
                uint64_t v234 = 0LL;
              }
              else {
                uint64_t v234 = v233;
              }
              _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (uint64_t)v208,  v209,  v234,  1);
              *(void *)&v458[16] = 0LL;
              *(void *)&v458[8] = 0LL;
              *(void *)__int128 v458 = &v458[8];
              v430[0] = (void *)1;
              unsigned int v235 = v416;
              if ((unint64_t)((char *)v417 - (_BYTE *)v416) >= 0x21)
              {
                unint64_t v236 = 1LL;
                do
                {
                  if (CSRangeIntersectsRange( v235[4 * v236 - 4],  v235[4 * v236 - 3],  v235[4 * v236],  v235[4 * v236 + 1]))
                  {
                    unint64_t v237 = v235[4 * v236 - 2];
                    unint64_t v238 = v235[4 * v236 + 2];
                    if (v237 >= v238)
                    {
                      if (v237 <= v238)
                      {
                        std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(void **)&v458[8]);
                        goto LABEL_704;
                      }

                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>( (uint64_t **)v458,  (unint64_t *)v430,  (uint64_t *)v430);
                    }

                    else
                    {
                      unsigned int v412 = (char *)v430[0] - 1;
                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>( (uint64_t **)v458,  (unint64_t *)&v412,  (uint64_t *)&v412);
                    }
                  }

                  unint64_t v236 = (unint64_t)v430[0] + 1;
                  v430[0] = (void *)v236;
                  unsigned int v235 = v416;
                  unint64_t v239 = (char *)v417;
                }

                while (v236 < ((char *)v417 - (_BYTE *)v416) >> 5);
                uint64_t v240 = *(void **)v458;
                if (*(_BYTE **)v458 != &v458[8])
                {
                  do
                  {
                    uint64_t v241 = (char *)v416 + 32 * v240[4];
                    int64_t v242 = v239 - (v241 + 32);
                    if (v239 != v241 + 32) {
                      memmove((char *)v416 + 32 * v240[4], v241 + 32, v239 - (v241 + 32));
                    }
                    unint64_t v239 = &v241[v242];
                    int v417 = (__n128 *)&v241[v242];
                    unint64_t v243 = (void *)v240[1];
                    if (v243)
                    {
                      do
                      {
                        unint64_t v244 = v243;
                        unint64_t v243 = (void *)*v243;
                      }

                      while (v243);
                    }

                    else
                    {
                      do
                      {
                        unint64_t v244 = (_BYTE *)v240[2];
                        BOOL v19 = *(void *)v244 == (void)v240;
                        uint64_t v240 = v244;
                      }

                      while (!v19);
                    }

                    uint64_t v240 = v244;
                  }

                  while (v244 != &v458[8]);
                }
              }

              std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(void **)&v458[8]);
              unsigned int v412 = 0LL;
              unsigned int v413 = 0LL;
              unint64_t v414 = 0LL;
              mach_vm_address_t v245 = (unsigned __int8 *)v416;
              v391 = v417;
              if (v416 != v417)
              {
                do
                {
                  unint64_t v246 = *(void *)v245;
                  uint64_t v247 = *((void *)v245 + 1);
                  *(void *)__int128 v458 = *(void *)v245;
                  *(void *)&v458[8] = v247;
                  memset(&v458[16], 0, 52);
                  v458[68] = 1;
                  uint64_t v459 = 0LL;
                  __int16 v460 = 0;
                  *(_OWORD *)__int128 v461 = 0uLL;
                  *(_DWORD *)&v461[16] = *((_DWORD *)v245 + 7);
                  LOBYTE(v462) = 0;
                  char v466 = 0;
                  LOBYTE(v467) = 0;
                  char v469 = 0;
                  LOBYTE(v470) = 0;
                  char v472 = 0;
                  __int128 v474 = 0LL;
                  __int128 v475 = 0LL;
                  __int128 v473 = 0LL;
                  unint64_t v399 = v245;
                  unsigned int v248 = *((_DWORD *)v245 + 7);
                  if ((v248 & 1) != 0) {
                    int v249 = 3;
                  }
                  else {
                    int v249 = 1;
                  }
                  LOWORD(v42_Block_object_dispose(va, 8) = 9;
                  uint64_t v250 = *((void *)v95 + 24);
                  int v252 = *(unint64_t **)(v250 + 16);
                  uint64_t v251 = *(unint64_t **)(v250 + 24);
                  if (v252 == v251)
                  {
                    uint64_t v259 = v247;
                    unint64_t v258 = v246;
                  }

                  else
                  {
                    unsigned int v253 = v249 & 0xFFFFFFFB | (4 * ((v248 >> 1) & 1));
                    int v395 = (v248 >> 2) & 1;
                    do
                    {
                      unint64_t v254 = *v252;
                      uint64_t v255 = v252[1];
                      if (CSRangeIntersectsRange(*v252, v255, v246, v247))
                      {
                        v430[0] = (void *)CSRangeIntersectionRange(v254, v255, v246, v247);
                        v430[1] = (void *)v256;
                        LODWORD(v431) = 1;
                        DWORD1(v431) = v253;
                        *((void *)&v431 + 1) = v253;
                        v432 = 0LL;
                        *(_DWORD *)__int128 v433 = v245[25];
                        *(void *)&v433[4] = 0LL;
                        *(void *)&v433[12] = 0LL;
                        *(void *)&v433[19] = 0LL;
                        *(_WORD *)&v433[27] = v395;
                        uint64_t v434 = 0LL;
                        __int16 v435 = 0;
                        int v436 = 0;
                        uint64_t v437 = 0LL;
                        LODWORD(v43_Block_object_dispose(va, 8) = 3;
                        HIDWORD(v43_Block_object_dispose(va, 8) = *((_DWORD *)v245 + 7);
                        LOBYTE(v439) = 0;
                        uint64_t v257 = v256 >> 14;
                        char v443 = 0;
                        std::vector<unsigned short>::vector(v409, v256 >> 14, &v428);
                        __int128 v444 = *(_OWORD *)v409;
                        __int128 v445 = v410;
                        v409[1] = 0LL;
                        unint64_t v410 = 0LL;
                        v409[0] = 0LL;
                        char v446 = 1;
                        std::vector<unsigned short>::vector(v425, v257, &v428);
                        __int128 v447 = *(_OWORD *)v425;
                        v448 = v426;
                        v425[1] = 0LL;
                        v426 = 0LL;
                        v425[0] = 0LL;
                        char v449 = 1;
                        v451 = 0LL;
                        __int128 v452 = 0LL;
                        uint64_t v450 = 0LL;
                        std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]( (uint64_t *)&v473,  (__int128 *)v430);
                        uint64_t v420 = (void **)&v450;
                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v420);
                        if (v449 && (void)v447)
                        {
                          *((void *)&v447 + 1) = v447;
                          operator delete((void *)v447);
                        }

                        if (v446 && (void)v444)
                        {
                          *((void *)&v444 + 1) = v444;
                          operator delete((void *)v444);
                        }

                        if (v443 && v442 < 0) {
                          operator delete(v439);
                        }
                        if (v425[0])
                        {
                          v425[1] = v425[0];
                          operator delete(v425[0]);
                        }

                        if (v409[0])
                        {
                          v409[1] = v409[0];
                          operator delete(v409[0]);
                        }
                      }

                      v252 += 5;
                    }

                    while (v252 != v251);
                    unint64_t v258 = *(void *)v458;
                    uint64_t v259 = *(void *)&v458[8];
                  }

                  uint64_t v260 = 0LL;
                  uint64_t v261 = 0LL;
                  v409[0] = 0LL;
                  v409[1] = 0LL;
                  unint64_t v410 = 0LL;
                  if (v258 < v258 + v259)
                  {
                    unint64_t v262 = v473;
                    unint64_t v263 = v247 + v246;
                    do
                    {
                      *(_OWORD *)__int128 v430 = *(_OWORD *)v245;
                      __int128 v431 = *((_OWORD *)v245 + 1);
                      v432 = (void *)0x4000;
                      *(void *)__int128 v433 = v258;
                      *(void *)&v433[8] = v409;
                      if (v262 == v474)
                      {
                        set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()( (uint64_t)v430,  v263);
                        unint64_t v258 = v263;
                      }

                      else
                      {
                        unint64_t v264 = *v262;
                        if (v258 < *v262)
                        {
                          if (v263 >= v264) {
                            unint64_t v265 = *v262;
                          }
                          else {
                            unint64_t v265 = v263;
                          }
                          set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()( (uint64_t)v430,  v265);
                          unint64_t v264 = *v262;
                        }

                        unint64_t v258 = v262[1] + v264;
                        v262 += 28;
                      }
                    }

                    while (v258 < *(void *)&v458[8] + *(void *)v458);
                    uint64_t v261 = (uint64_t *)v409[0];
                    uint64_t v260 = v409[1];
                  }

                  std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>( (uint64_t *)&v473,  (__int128 *)v474,  v261,  (uint64_t)v260,  0x6DB6DB6DB6DB6DB7LL * ((v260 - (_BYTE *)v261) >> 5));
                  unint64_t v266 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)v474 - (_BYTE *)v473) >> 5));
                  if (v474 == v473) {
                    uint64_t v267 = 0LL;
                  }
                  else {
                    uint64_t v267 = v266;
                  }
                  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (unint64_t)v473,  (__int128 *)v474,  v267,  1);
                  std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v412, (__int128 *)v458);
                  v430[0] = v409;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                  v430[0] = &v473;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                  if (v472 && (void)v470)
                  {
                    *((void *)&v470 + 1) = v470;
                    operator delete((void *)v470);
                  }

                  if (v469 && (void)v467)
                  {
                    *((void *)&v467 + 1) = v467;
                    operator delete((void *)v467);
                  }

                  if (v466 && v465 < 0) {
                    operator delete(v462);
                  }
                  v245 += 32;
                }

                while (v399 + 32 != (unsigned __int8 *)v391);
              }

              uint64_t v268 = *((void *)v95 + 24);
              uint64_t v269 = *(void *)(v268 + 16);
              uint64_t v403 = *(void *)(v268 + 24);
              if (v269 != v403)
              {
                do
                {
                  unint64_t v271 = *(void *)v269;
                  uint64_t v270 = *(void *)(v269 + 8);
                  v430[1] = 0LL;
                  v430[0] = 0LL;
                  *(void *)&__int128 v431 = 0LL;
                  unsigned int v273 = (__int128 *)v412;
                  unint64_t v272 = (__int128 *)v413;
                  if (v412 == v413)
                  {
                    unint64_t v280 = 0LL;
LABEL_503:
                    if (v270)
                    {
                      if ((unint64_t)v280 >= (unint64_t)v431)
                      {
                        __int128 v292 = (unint64_t *)v430[0];
                        uint64_t v293 = ((char *)v280 - (char *)v430[0]) >> 4;
                        unint64_t v294 = v293 + 1;
                        uint64_t v295 = v431 - (unint64_t)v430[0];
                        else {
                          unint64_t v296 = v294;
                        }
                        if (v296)
                        {
                          unint64_t v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)&v431,  v296);
                          unint64_t v280 = (unint64_t *)v430[1];
                          __int128 v292 = (unint64_t *)v430[0];
                        }

                        else
                        {
                          unint64_t v297 = 0LL;
                        }

                        uint64_t v298 = (unint64_t *)&v297[16 * v293];
                        *uint64_t v298 = v271;
                        v298[1] = v270;
                        uint64_t v299 = v298;
                        if (v280 != v292)
                        {
                          do
                          {
                            *((_OWORD *)v299 - 1) = *((_OWORD *)v280 - 1);
                            v299 -= 2;
                            v280 -= 2;
                          }

                          while (v280 != v292);
                          __int128 v292 = (unint64_t *)v430[0];
                        }

                        unint64_t v280 = v298 + 2;
                        v430[0] = v299;
                        v430[1] = v298 + 2;
                        *(void *)&__int128 v431 = &v297[16 * v296];
                        if (v292) {
                          operator delete(v292);
                        }
                      }

                      else
                      {
                        *unint64_t v280 = v271;
                        v280[1] = v270;
                        v280 += 2;
                      }

                      v430[1] = v280;
                    }
                  }

                  else
                  {
                    while (!CSRangeContainsRange(*(void *)v273, *((void *)v273 + 1), v271, v270))
                    {
                      BOOL v274 = CSRangeIntersectsRange(v271, v270, *(void *)v273, *((void *)v273 + 1));
                      unint64_t v275 = *(void *)v273;
                      if (v274)
                      {
                        unint64_t v276 = *((void *)v273 + 1);
                        if (v271 - v275 >= v276)
                        {
                          unint64_t v278 = v275 - v271;
                          __int128 v279 = (char *)v430[1];
                          if (v430[1] >= (void *)v431)
                          {
                            unint64_t v281 = (char *)v430[0];
                            int64_t v282 = ((char *)v430[1] - (char *)v430[0]) >> 4;
                            unint64_t v283 = v282 + 1;
                            uint64_t v284 = v431 - (unint64_t)v430[0];
                            else {
                              unint64_t v285 = v283;
                            }
                            if (v285)
                            {
                              v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>( (uint64_t)&v431,  v285);
                              __int128 v279 = (char *)v430[1];
                              unint64_t v281 = (char *)v430[0];
                            }

                            else
                            {
                              v286 = 0LL;
                            }

                            v287 = (unint64_t *)&v286[16 * v282];
                            unint64_t *v287 = v271;
                            v287[1] = v278;
                            v288 = v287;
                            if (v279 != v281)
                            {
                              do
                              {
                                *((_OWORD *)v288 - 1) = *((_OWORD *)v279 - 1);
                                v288 -= 2;
                                v279 -= 16;
                              }

                              while (v279 != v281);
                              unint64_t v281 = (char *)v430[0];
                            }

                            unint64_t v280 = v287 + 2;
                            v430[0] = v288;
                            v430[1] = v287 + 2;
                            *(void *)&__int128 v431 = &v286[16 * v285];
                            if (v281) {
                              operator delete(v281);
                            }
                          }

                          else
                          {
                            *(void *)v430[1] = v271;
                            *((void *)v279 + 1) = v278;
                            unint64_t v280 = (unint64_t *)(v279 + 16);
                          }

                          v430[1] = v280;
                          unint64_t v289 = *(void *)v273;
                          unint64_t v290 = *((void *)v273 + 1);
                          unint64_t v291 = v270 + v271;
                          if (v270 + v271 - *(void *)v273 < v290) {
                            goto LABEL_522;
                          }
                          unint64_t v271 = v290 + v289;
                          uint64_t v270 = v291 - (v290 + v289);
                        }

                        else
                        {
                          unint64_t v277 = v270 + v271;
                          unint64_t v271 = v276 + v275;
                          uint64_t v270 = v277 - (v276 + v275);
                        }
                      }

                      else if (v275 > v270 + v271)
                      {
                        goto LABEL_501;
                      }

                      v273 += 14;
                      if (v273 == v272)
                      {
LABEL_501:
                        unint64_t v280 = (unint64_t *)v430[1];
                        goto LABEL_503;
                      }
                    }

                    unint64_t v280 = (unint64_t *)v430[1];
                  }

LABEL_522:
                  uint64_t v300 = (unint64_t *)v430[0];
                  if (v430[0] != v280)
                  {
                    do
                    {
                      LOWORD(v42_Block_object_dispose(va, 8) = 9;
                      int v301 = *(_DWORD *)(v269 + 32);
                      int v302 = *(_DWORD *)(v269 + 36);
                      __int128 v303 = *(_OWORD *)v300;
                      *(_DWORD *)&v458[16] = 0;
                      *(_DWORD *)&v458[20] = v301 | 1;
                      if ((v301 & 4) != 0) {
                        int v304 = 3;
                      }
                      else {
                        int v304 = 1;
                      }
                      *(_OWORD *)__int128 v458 = v303;
                      *(_DWORD *)&v458[24] = v302 | 1;
                      uint64_t v459 = 0LL;
                      __int16 v460 = 0;
                      *(_DWORD *)__int128 v461 = 0;
                      *(void *)&v461[4] = 0LL;
                      memset(&v458[28], 0, 41);
                      *(_DWORD *)&v461[12] = 3;
                      *(_DWORD *)&v461[16] = v304;
                      LOBYTE(v462) = 0;
                      char v466 = 0;
                      std::vector<unsigned short>::vector(v409, v300[1] >> 14, &v428);
                      __int128 v467 = *(_OWORD *)v409;
                      v468 = v410;
                      v409[1] = 0LL;
                      unint64_t v410 = 0LL;
                      v409[0] = 0LL;
                      char v469 = 1;
                      std::vector<unsigned short>::vector(v425, v300[1] >> 14, &v428);
                      __int128 v470 = *(_OWORD *)v425;
                      __int128 v471 = v426;
                      v425[1] = 0LL;
                      v426 = 0LL;
                      v425[0] = 0LL;
                      char v472 = 1;
                      __int128 v474 = 0LL;
                      __int128 v475 = 0LL;
                      __int128 v473 = 0LL;
                      std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v412, (__int128 *)v458);
                      uint64_t v420 = (void **)&v473;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v420);
                      if (v472 && (void)v470)
                      {
                        *((void *)&v470 + 1) = v470;
                        operator delete((void *)v470);
                      }

                      if (v469 && (void)v467)
                      {
                        *((void *)&v467 + 1) = v467;
                        operator delete((void *)v467);
                      }

                      if (v466 && v465 < 0) {
                        operator delete(v462);
                      }
                      if (v425[0])
                      {
                        v425[1] = v425[0];
                        operator delete(v425[0]);
                      }

                      if (v409[0])
                      {
                        v409[1] = v409[0];
                        operator delete(v409[0]);
                      }

                      v300 += 2;
                    }

                    while (v300 != v280);
                    unint64_t v305 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7LL * ((v413 - (_BYTE *)v412) >> 5));
                    if (v413 == v412) {
                      uint64_t v306 = 0LL;
                    }
                    else {
                      uint64_t v306 = v305;
                    }
                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb( (unint64_t)v412,  (__int128 *)v413,  v306,  1);
                    unint64_t v280 = (unint64_t *)v430[0];
                  }

                  if (v280)
                  {
                    v430[1] = v280;
                    operator delete(v280);
                  }

                  v269 += 40LL;
                }

                while (v269 != v403);
                uint64_t v268 = *((void *)v95 + 24);
              }

              std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]( (uint64_t *)v458,  v268 + 48);
              *(void *)&__int128 v431 = 0LL;
              v430[1] = 0LL;
              v430[0] = &v430[1];
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign( *((void *)v95 + 24) + 48LL,  v430);
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v430,  (void *)v430[1]);
              LODWORD(v420) = dup(*(_DWORD *)(*((void *)v95 + 24) + 8LL));
              BOOL v307 = (_DWORD)v420 != -1;
              if ((_DWORD)v420 != -1)
              {
                uint64_t v308 = *((void *)v95 + 24);
                v423[1] = 0LL;
                v424 = 0LL;
                v423[0] = 0LL;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( v423,  (uint64_t)v412,  (uint64_t)v413,  0x6DB6DB6DB6DB6DB7LL * ((v413 - (_BYTE *)v412) >> 5));
                v430[1] = 0LL;
                v430[0] = 0LL;
                *(void *)&__int128 v431 = 0LL;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>( v430,  (uint64_t)v423[0],  (uint64_t)v423[1],  0x6DB6DB6DB6DB6DB7LL * (((char *)v423[1] - (char *)v423[0]) >> 5));
                std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>( &v420,  v308 + 16,  (uint64_t *)(v308 + 40),  (uint64_t)v458,  (uint64_t *)(v308 + 72),  (__int128 *)v430,  (int *)name,  (uint64_t *)&v481[8],  v425);
                unint64_t v309 = v425[0];
                v425[0] = 0LL;
                uint64_t v310 = *((void *)v95 + 24);
                *((void *)v95 + 24) = v309;
                if (v310)
                {
                  (*(void (**)(uint64_t))(*(void *)v310 + 8LL))(v310);
                  v311 = v425[0];
                  v425[0] = 0LL;
                  if (v311) {
                    (*(void (**)(void *))(*(void *)v311 + 8LL))(v311);
                  }
                }

                v409[0] = v430;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
                v409[0] = v423;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
              }

              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v458,  *(void **)&v458[8]);
              *(void *)__int128 v458 = &v412;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
            }

            if (v416)
            {
              int v417 = (__n128 *)v416;
              operator delete(v416);
            }

            CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v405);
            if (v307) {
              goto LABEL_231;
            }
            goto LABEL_243;
          }

          v156 += 4LL;
          --v134;
        }

        while (v134);
      }

      CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v405);
LABEL_243:
      release_mapped_memory_cache((std::mutex *)v95);
      uint64_t v95 = 0LL;
    }
  }

LABEL_269:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v408);
  return v95;
}

void sub_18607C0A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,uint64_t a61,uint64_t a62,void *a63)
{
  a67 = &a60;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)&STACK[0x3C0],  (void *)STACK[0x3C8]);
  STACK[0x3C0] = (unint64_t)&a47;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }

  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&a56);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a17);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

_OWORD *create_mapped_memory_cache_for_core_file_with_label(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 1LL);
}

BOOL mapped_memory_is_64_bit(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 101) != 0;
  }
  return result;
}

_OWORD *create_mapped_memory_cache_for_task(mach_port_name_t a1, char a2)
{
  return create_mapped_memory_cache_for_task_with_label(a1, a2, (uint64_t)"");
}

void set_mapped_memory_cache_region_info_block(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  *(void *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

void destroy_mapped_memory_cache(uint64_t a1)
{
  if (a1)
  {
    clear_mapped_memory(a1);
    mach_port_name_t v2 = *(_DWORD *)(a1 + 88);
    if (v2) {
      mach_port_deallocate(*MEMORY[0x1895FBBE0], v2);
    }
    task_suspension_token_t v3 = *(_DWORD *)(a1 + 92);
    if (v3) {
      task_resume2(v3);
    }
    uint64_t v4 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    unsigned int v5 = *(void **)(a1 + 64);
    if (v5)
    {
      *(void *)(a1 + 72) = v5;
      operator delete(v5);
    }

    std::__tree<TRange<Pointer64>>::destroy(a1 + 40, *(void **)(a1 + 48));
    operator delete((void *)a1);
  }

void clear_mapped_memory(uint64_t a1)
{
  mach_port_name_t v2 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  task_suspension_token_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)(a1 + 48);
  if (v3 != (void *)(a1 + 48))
  {
    do
    {
      __int128 v5 = *((_OWORD *)v3 + 3);
      __int128 v12 = *((_OWORD *)v3 + 2);
      __int128 v13 = v5;
      uint64_t v14 = v3[8];
      deallocate_node((uint64_t)&v12);
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          unint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          task_suspension_token_t v3 = v7;
        }

        while (!v8);
      }

      task_suspension_token_t v3 = v7;
    }

    while (v7 != v4);
  }

  std::__tree<TRange<Pointer64>>::destroy(a1 + 40, *(void **)(a1 + 48));
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 40) = v4;
  unint64_t v9 = *(__int128 **)(a1 + 64);
  mach_port_name_t v10 = *(__int128 **)(a1 + 72);
  if (v9 != v10)
  {
    do
    {
      __int128 v11 = v9[1];
      __int128 v12 = *v9;
      __int128 v13 = v11;
      uint64_t v14 = *((void *)v9 + 4);
      deallocate_node((uint64_t)&v12);
      unint64_t v9 = (__int128 *)((char *)v9 + 40);
    }

    while (v9 != v10);
    unint64_t v9 = *(__int128 **)(a1 + 64);
  }

  *(void *)(a1 + 72) = v9;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  std::mutex::unlock(v2);
}

void sub_18607C924(_Unwind_Exception *a1)
{
}

tree *__cdecl find_node(const char *a1, tree *a2)
{
  uint64_t v4 = a1;
  if (a1)
  {
    int v5 = v3;
    uint64_t v6 = v2;
    BOOL v8 = (std::mutex *)(a1 + 128);
    std::mutex::lock((std::mutex *)a1 + 2);
    unint64_t v9 = (uint64_t *)(v4 + 48);
    mach_port_name_t v10 = (void *)*((void *)v4 + 6);
    if (v10)
    {
      do
      {
        unint64_t v11 = v10[4];
        BOOL v12 = v11 > (unint64_t)a2;
        else {
          __int128 v13 = v10;
        }
        if (v12) {
          unint64_t v9 = v10;
        }
        mach_port_name_t v10 = (void *)*v13;
      }

      while (*v13);
    }

    uint64_t v14 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(void *)(v14 + 8);
      }

      while (v14);
    }

    else
    {
      do
      {
        uint64_t v15 = v9[2];
        BOOL v18 = *(void *)v15 == (void)v9;
        unint64_t v9 = (uint64_t *)v15;
      }

      while (v18);
    }

    uint64_t v4 = (const char *)(v15 + 32);
    unint64_t v16 = *(void *)(v15 + 32);
    unint64_t v17 = *(void *)(v15 + 40) + v16;
    BOOL v18 = v17 <= (unint64_t)a2 || v5 == 0;
    if (v18)
    {
      if (v17 <= (unint64_t)a2)
      {
LABEL_24:
        uint64_t v4 = 0LL;
        goto LABEL_25;
      }
    }

    else if (v17 < (unint64_t)a2 + v6)
    {
      goto LABEL_24;
    }

    ++*(_DWORD *)(v15 + 64);
LABEL_25:
    std::mutex::unlock(v8);
  }

  return (tree *)v4;
}

BOOL vm_tag_is_malloc(unsigned int a1)
{
  BOOL result = 1LL;
  if (a1 > 0xD || ((1 << a1) & 0x3BDE) == 0) {
    return a1 == 99;
  }
  return result;
}

uint64_t **map_new_node(uint64_t a1, mach_vm_address_t a2, uint64_t a3, int *a4)
{
  if (!a1)
  {
    if (a4)
    {
      unint64_t v17 = 0LL;
      int v18 = 4;
LABEL_11:
      *a4 = v18;
      return v17;
    }

    return 0LL;
  }

  if (!a2)
  {
    if (a4)
    {
      unint64_t v17 = 0LL;
      int v18 = 1;
      goto LABEL_11;
    }

    return 0LL;
  }

  uint64_t v9 = *(void *)(a1 + 192);
  mach_port_name_t v10 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  if (!v9)
  {
    vm_map_read_t v19 = *(_DWORD *)(a1 + 88);
    nesting_depth[0] = 999999;
    mach_msg_type_number_t infoCnt = 12;
    mach_vm_size_t size = 0LL;
    mach_vm_address_t address = a2;
    if (mach_vm_region_recurse(v19, &address, &size, nesting_depth, info, &infoCnt)
      || (mach_vm_address_t v20 = address, address > a2)
      || (mach_vm_size_t v21 = size, size + address <= a2))
    {
      unsigned __int8 v22 = 0;
      unsigned __int8 v23 = 0;
      mach_vm_address_t v20 = 0LL;
      mach_vm_size_t v21 = 0LL;
    }

    else
    {
      unsigned __int8 v23 = info[0];
      unsigned __int8 v22 = info[1];
    }

    if (v20 - 1 >= a2)
    {
      if (a4)
      {
        unint64_t v17 = 0LL;
        *a4 = 1;
        goto LABEL_214;
      }

      goto LABEL_162;
    }

    unsigned int v154 = v10;
    int v24 = (v23 & 2) == 0;
    char v25 = ((v23 | v22) & 2) == 0;
    mach_vm_size_t v26 = a3 + a2;
    mach_vm_address_t v27 = v21 + v20;
    if (v26 > v21 + v20)
    {
      do
      {
        nesting_depth[0] = 999999;
        mach_msg_type_number_t infoCnt = 12;
        mach_vm_size_t size = 0LL;
        mach_vm_address_t address = v27;
        if (mach_vm_region_recurse(v19, &address, &size, nesting_depth, info, &infoCnt)
          || (mach_vm_address_t v28 = address, address > v27)
          || (mach_vm_size_t v29 = size, size + address <= v27))
        {
          char v30 = 0;
          char v31 = 0;
          mach_vm_address_t v28 = 0LL;
          mach_vm_size_t v29 = 0LL;
        }

        else
        {
          char v31 = info[0];
          char v30 = info[1];
        }

        if (!v28)
        {
          unint64_t v17 = 0LL;
          if (a4) {
            *a4 = 1;
          }
          mach_port_name_t v10 = v154;
          goto LABEL_214;
        }

        BOOL v32 = (v31 & 2) == 0;
        v24 &= v32;
        if ((v30 & 2) != 0) {
          char v25 = 0;
        }
        else {
          v25 &= v32;
        }
        mach_vm_address_t v27 = v29 + v28;
      }

      while (v26 > v29 + v28);
    }

    mach_vm_size_t v33 = v27 - v20;
    BOOL v34 = CSRangeContainsRange(*(void *)(a1 + 16), *(void *)(a1 + 24), v20, v27 - v20);
    mach_port_name_t v10 = v154;
    if ((v25 & 1) != 0 || (!*(void *)(a1 + 32) ? (v35 = v24) : (v35 = 0), vm_map_read_t v36 = v19, v35 == 1)) {
      vm_map_read_t v36 = *MEMORY[0x1895FBBE0];
    }
    if (v34) {
      task_name_t v37 = v36;
    }
    else {
      task_name_t v37 = v19;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      if (!mach_task_is_self(v37))
      {
        int v80 = mach_vm_read_overwrite(*(_DWORD *)(a1 + 88), v20, 1uLL, (mach_vm_address_t)info, &size);
        if (v80) {
          goto LABEL_125;
        }
      }
    }

    *(void *)info = v20;
    mach_vm_size_t v163 = v33;
    task_name_t v165 = v37;
    int v166 = 0;
    if (mach_task_is_self(v37))
    {
      mach_vm_size_t v38 = *(void *)(a1 + 32) + v20;
    }

    else
    {
      LODWORD(address) = 0;
      nesting_depth[0] = 1;
      mach_vm_size_t size = 0LL;
      int v80 = remap_memory_from_target( *MEMORY[0x1895FBBE0],  &size,  v33,  0LL,  33,  v37,  v20,  0,  (vm_prot_t *)&address,  (vm_prot_t *)nesting_depth,  1u);
      if (v80)
      {
LABEL_125:
        if (a4) {
          *a4 = v80;
        }
        goto LABEL_162;
      }

      mach_vm_size_t v38 = size;
    }

    mach_vm_address_t v164 = v38;
    __int128 v39 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>( (uint64_t **)(a1 + 40),  (unint64_t *)info,  (uint64_t)info);
    mach_vm_size_t v152 = v33;
    tasunint64_t k = v37;
    uint64_t v147 = v40;
    unsigned int v148 = v39;
    if (v40)
    {
      __int128 v41 = v39[1];
      if (v41)
      {
        do
        {
          __int128 v42 = v41;
          __int128 v41 = (uint64_t *)*v41;
        }

        while (v41);
      }

      else
      {
        uint64_t v85 = v39;
        do
        {
          __int128 v42 = v85[2];
          BOOL v66 = *v42 == (void)v85;
          uint64_t v85 = (uint64_t **)v42;
        }

        while (!v66);
      }
    }

    else
    {
      __int128 v42 = (uint64_t *)v39;
    }

    if (v42 != (uint64_t *)(a1 + 48))
    {
      uint64_t v86 = (char **)(a1 + 64);
      do
      {
        int v88 = v42 + 4;
        unint64_t v87 = v42[4];
        if (*(void *)info > v87) {
          break;
        }
        unint64_t v89 = v42;
        if (v42[5] + v87 > v163 + *(void *)info) {
          break;
        }
        uint64_t v90 = (uint64_t *)v42[1];
        uint64_t v91 = v42;
        if (v90)
        {
          do
          {
            __int128 v42 = v90;
            uint64_t v90 = (uint64_t *)*v90;
          }

          while (v90);
        }

        else
        {
          do
          {
            __int128 v42 = (uint64_t *)v91[2];
            BOOL v66 = *v42 == (void)v91;
            uint64_t v91 = v42;
          }

          while (!v66);
        }

        unint64_t v92 = *(void *)(a1 + 72);
        unint64_t v93 = *(void *)(a1 + 80);
        if (v92 >= v93)
        {
          unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - (void)*v86) >> 3);
          unint64_t v98 = v97 + 1;
          if (v97 + 1 > 0x666666666666666LL) {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (void)*v86) >> 3);
          if (2 * v99 > v98) {
            unint64_t v98 = 2 * v99;
          }
          if (v99 >= 0x333333333333333LL) {
            unint64_t v100 = 0x666666666666666LL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100) {
            char v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( a1 + 80,  v100);
          }
          else {
            char v101 = 0LL;
          }
          BOOL v102 = &v101[40 * v97];
          __int128 v103 = *(_OWORD *)v88;
          __int128 v104 = *((_OWORD *)v88 + 1);
          *((void *)v102 + 4) = v88[4];
          *(_OWORD *)BOOL v102 = v103;
          *((_OWORD *)v102 + 1) = v104;
          unint64_t v106 = *(char **)(a1 + 64);
          uint64_t v105 = *(char **)(a1 + 72);
          char v107 = v102;
          if (v105 != v106)
          {
            do
            {
              __int128 v108 = *(_OWORD *)(v105 - 40);
              __int128 v109 = *(_OWORD *)(v105 - 24);
              *((_DWORD *)v107 - 2) = *((_DWORD *)v105 - 2);
              *(_OWORD *)(v107 - 24) = v109;
              *(_OWORD *)(v107 - 40) = v108;
              v107 -= 40;
              v105 -= 40;
            }

            while (v105 != v106);
            uint64_t v105 = *v86;
          }

          uint64_t v96 = v102 + 40;
          *(void *)(a1 + 64) = v107;
          *(void *)(a1 + 72) = v102 + 40;
          *(void *)(a1 + 80) = &v101[40 * v100];
          if (v105) {
            operator delete(v105);
          }
        }

        else
        {
          __int128 v94 = *(_OWORD *)v88;
          __int128 v95 = *((_OWORD *)v88 + 1);
          *(void *)(v92 + 32) = v88[4];
          *(_OWORD *)unint64_t v92 = v94;
          *(_OWORD *)(v92 + 16) = v95;
          uint64_t v96 = (char *)(v92 + 40);
        }

        *(void *)(a1 + 72) = v96;
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v89);
        operator delete(v89);
      }

      while (v42 != (uint64_t *)(a1 + 48));
    }

    mach_port_name_t v10 = v154;
    uint64_t v110 = v148;
    if (!v147)
    {
      char v111 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>( (uint64_t **)(a1 + 40),  (unint64_t *)info,  (uint64_t)info);
      if (!v112)
      {
LABEL_162:
        unint64_t v17 = 0LL;
        goto LABEL_214;
      }

      uint64_t v110 = v111;
    }

    if (!mach_task_is_self(task))
    {
      ++*(_DWORD *)a1;
      *(void *)(a1 + 8) += v152;
    }

    unint64_t v17 = v110 + 4;
    goto LABEL_214;
  }

  mach_vm_size_t size = 0LL;
  unint64_t v158 = 0LL;
  uint64_t v159 = 0LL;
  uint64_t v11 = *(void *)(a1 + 192);
  if (v11)
  {
    core_file_dumped_region_containing_location = find_core_file_dumped_region_containing_location(v11 + 16, a2);
    if (v13)
    {
      uint64_t v151 = *core_file_dumped_region_containing_location;
      unint64_t v15 = core_file_dumped_region_containing_location[2];
      mach_vm_address_t v14 = core_file_dumped_region_containing_location[3];
      unint64_t v4 = v15 >> 8;
      char v16 = 1;
      goto LABEL_57;
    }

    uint64_t v11 = *(void *)(a1 + 192);
  }

  if (!*(_BYTE *)(v11 + 112)
    || (region_at_mach_vm_address_t address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v11 + 88), a2, 0x270FuLL), !v44)
    || (mach_vm_address_t v14 = *(void *)(region_at_address + 8), a2 - *(void *)region_at_address >= v14)
    || *(_BYTE *)(region_at_address + 67) != 3)
  {
    unint64_t v17 = 0LL;
    if (!a4) {
      goto LABEL_212;
    }
    int v45 = 1;
LABEL_107:
    *a4 = v45;
    goto LABEL_212;
  }

  uint64_t v151 = *(void *)region_at_address;
  char v16 = 0;
  LOBYTE(v15) = 0;
LABEL_57:
  unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3) + 1;
  if (v46 > 0x666666666666666LL) {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  else {
    unint64_t v47 = v46;
  }
  if (v47) {
    uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)&v159,  v47);
  }
  else {
    uint64_t v48 = 0LL;
  }
  mach_vm_size_t v49 = (mach_vm_size_t)&v48[8 * ((uint64_t)&v158[-size] >> 3)];
  uint64_t v50 = &v48[40 * v47];
  *(void *)mach_vm_size_t v49 = v15 | (v4 << 8);
  *(void *)(v49 + _Block_object_dispose(va, 8) = v14;
  *(_BYTE *)(v49 + 16) = v16;
  *(_DWORD *)(v49 + 17) = nesting_depth[0];
  *(_DWORD *)(v49 + 20) = *(natural_t *)((char *)nesting_depth + 3);
  *(void *)(v49 + 24) = v151;
  *(void *)(v49 + 32) = v14;
  unint64_t v51 = (char *)(v49 + 40);
  mach_vm_size_t v53 = size;
  unint64_t v52 = v158;
  if (v158 != (char *)size)
  {
    do
    {
      __int128 v54 = *(_OWORD *)(v52 - 40);
      __int128 v55 = *(_OWORD *)(v52 - 24);
      *(void *)(v49 - _Block_object_dispose(va, 8) = *((void *)v52 - 1);
      *(_OWORD *)(v49 - 24) = v55;
      *(_OWORD *)(v49 - 40) = v54;
      v49 -= 40LL;
      v52 -= 40;
    }

    while (v52 != (char *)v53);
    unint64_t v52 = (char *)v53;
  }

  mach_vm_size_t size = v49;
  unint64_t v158 = v51;
  uint64_t v159 = v50;
  if (v52) {
    operator delete(v52);
  }
  uint64_t v155 = v10;
  unint64_t v158 = v51;
  unint64_t v56 = a3 + a2;
  unint64_t v57 = v14 + v151;
  if (v56 <= v14 + v151)
  {
LABEL_102:
    mach_vm_size_t v78 = v57 - v151;
    *(void *)info = v151;
    mach_vm_size_t v163 = v57 - v151;
    task_name_t v165 = *(_DWORD *)(a1 + 88);
    int v166 = 0;
    mach_port_name_t v10 = v155;
    if (!*(void *)(a1 + 192)
      || (char *)size == v51
      || (address = 0LL, int64_t v79 = (vm_map_t *)MEMORY[0x1895FBBE0], mach_vm_allocate(*MEMORY[0x1895FBBE0], &address, v78, 1)))
    {
LABEL_105:
      if (a4)
      {
        unint64_t v17 = 0LL;
        int v45 = 5;
        goto LABEL_107;
      }
    }

    else
    {
      mach_vm_size_t v81 = size;
      if ((char *)size != v158)
      {
        uint64_t v82 = *MEMORY[0x1895FD578];
        mach_vm_size_t v83 = size;
        while (!*(_BYTE *)(v83 + 16) || (*(void *)v83 & v82) == 0 && (*(void *)(v83 + 8) & v82) == 0)
        {
          v83 += 40LL;
          if ((char *)v83 == v158)
          {
            char v84 = 1;
            goto LABEL_164;
          }
        }

        char v84 = 0;
        do
        {
LABEL_164:
          if (*(_BYTE *)(v81 + 16))
          {
            uint64_t v113 = *(void *)(v81 + 24) - *(void *)(size + 24);
            if ((v84 & 1) != 0)
            {
              if (mmap( (void *)(address + v113),  *(void *)(v81 + 8),  1,  18,  *(_DWORD *)(*(void *)(a1 + 192) + 8LL),  *(void *)v81) == (void *)-1LL) {
                goto LABEL_178;
              }
            }

            else
            {
              while (1)
              {
                unint64_t v114 = pread( *(_DWORD *)(*(void *)(a1 + 192) + 8LL),  (void *)(address + v113),  *(void *)(v81 + 8),  *(void *)v81);
                if (v114 != -1LL) {
                  break;
                }
                if (*__error() != 4) {
                  goto LABEL_172;
                }
              }

              if (v114 < *(void *)(v81 + 8))
              {
LABEL_178:
                mach_vm_deallocate(*v79, address, v78);
                goto LABEL_105;
              }
            }
          }

LABEL_172:
          v81 += 40LL;
        }

        while ((char *)v81 != v158);
      }

      mach_vm_address_t v164 = address;
      uint64_t v115 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>( (uint64_t **)(a1 + 40),  (unint64_t *)info,  (uint64_t)info);
      *(void *)taska = v116;
      unint64_t v153 = v115;
      if (v116)
      {
        uint64_t v117 = v115[1];
        if (v117)
        {
          do
          {
            uint64_t v118 = v117;
            uint64_t v117 = (uint64_t *)*v117;
          }

          while (v117);
        }

        else
        {
          uint64_t v119 = v115;
          do
          {
            uint64_t v118 = v119[2];
            BOOL v66 = *v118 == (void)v119;
            uint64_t v119 = (uint64_t **)v118;
          }

          while (!v66);
        }
      }

      else
      {
        uint64_t v118 = (uint64_t *)v115;
      }

      if (v118 != (uint64_t *)(a1 + 48))
      {
        uint64_t v120 = (char **)(a1 + 64);
        do
        {
          uint64_t v122 = v118 + 4;
          unint64_t v121 = v118[4];
          if (*(void *)info > v121) {
            break;
          }
          __int128 v123 = v118;
          if (v118[5] + v121 > v163 + *(void *)info) {
            break;
          }
          uint64_t v124 = (uint64_t *)v118[1];
          uint64_t v125 = v118;
          if (v124)
          {
            do
            {
              uint64_t v118 = v124;
              uint64_t v124 = (uint64_t *)*v124;
            }

            while (v124);
          }

          else
          {
            do
            {
              uint64_t v118 = (uint64_t *)v125[2];
              BOOL v66 = *v118 == (void)v125;
              uint64_t v125 = v118;
            }

            while (!v66);
          }

          unint64_t v126 = *(void *)(a1 + 72);
          unint64_t v127 = *(void *)(a1 + 80);
          if (v126 >= v127)
          {
            unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v126 - (void)*v120) >> 3);
            unint64_t v132 = v131 + 1;
            if (v131 + 1 > 0x666666666666666LL) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - (void)*v120) >> 3);
            if (2 * v133 > v132) {
              unint64_t v132 = 2 * v133;
            }
            if (v133 >= 0x333333333333333LL) {
              unint64_t v134 = 0x666666666666666LL;
            }
            else {
              unint64_t v134 = v132;
            }
            if (v134) {
              unint64_t v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( a1 + 80,  v134);
            }
            else {
              unint64_t v135 = 0LL;
            }
            unsigned int v136 = &v135[40 * v131];
            __int128 v137 = *(_OWORD *)v122;
            __int128 v138 = *((_OWORD *)v122 + 1);
            *((void *)v136 + 4) = v122[4];
            *(_OWORD *)unsigned int v136 = v137;
            *((_OWORD *)v136 + 1) = v138;
            uint64_t v140 = *(char **)(a1 + 64);
            uint64_t v139 = *(char **)(a1 + 72);
            uint64_t v141 = v136;
            if (v139 != v140)
            {
              do
              {
                __int128 v142 = *(_OWORD *)(v139 - 40);
                __int128 v143 = *(_OWORD *)(v139 - 24);
                *((_DWORD *)v141 - 2) = *((_DWORD *)v139 - 2);
                *(_OWORD *)(v141 - 24) = v143;
                *(_OWORD *)(v141 - 40) = v142;
                v141 -= 40;
                v139 -= 40;
              }

              while (v139 != v140);
              uint64_t v139 = *v120;
            }

            mach_vm_address_t v130 = v136 + 40;
            *(void *)(a1 + 64) = v141;
            *(void *)(a1 + 72) = v136 + 40;
            *(void *)(a1 + 80) = &v135[40 * v134];
            if (v139) {
              operator delete(v139);
            }
          }

          else
          {
            __int128 v128 = *(_OWORD *)v122;
            __int128 v129 = *((_OWORD *)v122 + 1);
            *(void *)(v126 + 32) = v122[4];
            *(_OWORD *)unint64_t v126 = v128;
            *(_OWORD *)(v126 + 16) = v129;
            mach_vm_address_t v130 = (char *)(v126 + 40);
          }

          *(void *)(a1 + 72) = v130;
          std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v123);
          operator delete(v123);
        }

        while (v118 != (uint64_t *)(a1 + 48));
      }

      mach_port_name_t v10 = v155;
      unint64_t v144 = v153;
      if (*(void *)taska
        || (unint64_t v144 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>( (uint64_t **)(a1 + 40),  (unint64_t *)info,  (uint64_t)info),  v145))
      {
        ++*(_DWORD *)a1;
        *(void *)(a1 + 8) += v14;
        unint64_t v17 = v144 + 4;
        goto LABEL_212;
      }
    }

    unint64_t v17 = 0LL;
    goto LABEL_212;
  }

  unint64_t v58 = 0LL;
  while (1)
  {
    uint64_t v59 = *(void *)(a1 + 192);
    if (!v59) {
      break;
    }
    int v60 = find_core_file_dumped_region_containing_location(v59 + 16, v57);
    if (!v61)
    {
      uint64_t v59 = *(void *)(a1 + 192);
      break;
    }

    unint64_t v57 = *v60;
    mach_port_name_t v10 = (std::mutex *)v60[3];
    uint64_t v62 = v60[2];
    unint64_t v58 = v60[2] >> 8;
    char v63 = 1;
    mach_vm_address_t v14 = (mach_vm_address_t)v10;
LABEL_85:
    uint64_t v67 = v158;
    if (v158 >= v159)
    {
      unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3);
      unint64_t v69 = v68 + 1;
      if (v68 + 1 > 0x666666666666666LL) {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70) {
        int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>( (uint64_t)&v159,  v70);
      }
      else {
        int v71 = 0LL;
      }
      int v72 = &v71[8 * ((uint64_t)&v158[-size] >> 3)];
      *(void *)int v72 = v62 | (v58 << 8);
      *((void *)v72 + 1) = v10;
      v72[16] = v63;
      *(_DWORD *)(v72 + 17) = info[0];
      *((_DWORD *)v72 + 5) = *(int *)((char *)info + 3);
      *((void *)v72 + 3) = v57;
      *((void *)v72 + 4) = v14;
      mach_vm_size_t v74 = size;
      uint64_t v73 = v158;
      mach_vm_size_t v75 = (mach_vm_size_t)&v71[40 * v68];
      if (v158 != (char *)size)
      {
        do
        {
          __int128 v76 = *(_OWORD *)(v73 - 40);
          __int128 v77 = *(_OWORD *)(v73 - 24);
          *(void *)(v75 - _Block_object_dispose(va, 8) = *((void *)v73 - 1);
          *(_OWORD *)(v75 - 24) = v77;
          *(_OWORD *)(v75 - 40) = v76;
          v75 -= 40LL;
          v73 -= 40;
        }

        while (v73 != (char *)v74);
        uint64_t v73 = (char *)v74;
      }

      unint64_t v51 = v72 + 40;
      mach_vm_size_t size = v75;
      unint64_t v158 = v72 + 40;
      uint64_t v159 = &v71[40 * v70];
      if (v73) {
        operator delete(v73);
      }
    }

    else
    {
      *(void *)unint64_t v158 = v62 | (v58 << 8);
      v67[1] = v10;
      *((_BYTE *)v67 + 16) = v63;
      *(_DWORD *)((char *)v67 + 17) = info[0];
      *((_DWORD *)v67 + 5) = *(int *)((char *)info + 3);
      v67[3] = v57;
      v67[4] = v14;
      unint64_t v51 = (char *)(v67 + 5);
    }

    unint64_t v158 = v51;
    v57 += v14;
    if (v56 <= v57) {
      goto LABEL_102;
    }
  }

  if (*(_BYTE *)(v59 + 112))
  {
    uint64_t v64 = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v59 + 88), v57, 0x270FuLL);
    if (v65)
    {
      BOOL v66 = *(void *)v64 == v57 && *(_BYTE *)(v64 + 67) == 3;
      if (v66)
      {
        uint64_t v62 = 0LL;
        char v63 = 0;
        mach_vm_address_t v14 = *(void *)(v64 + 8);
        goto LABEL_85;
      }
    }
  }

  if (a4) {
    *a4 = 1;
  }
  unint64_t v17 = 0LL;
  mach_port_name_t v10 = v155;
LABEL_212:
  if (size)
  {
    unint64_t v158 = (char *)size;
    operator delete((void *)size);
  }

LABEL_214:
  std::mutex::unlock(v10);
  return v17;
}

void sub_18607D78C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

uint64_t unmap_node(uint64_t a1, tree *a2, uint64_t a3, unint64_t *a4, void *a5)
{
  node = find_node((const char *)a1, a2);
  if (node)
  {
    uint64_t v9 = (unint64_t *)node;
    std::mutex::lock((std::mutex *)(a1 + 128));
    if (*((_DWORD *)v9 + 6) == *MEMORY[0x1895FBBE0])
    {
      uint64_t v10 = 0LL;
      if (!a4)
      {
LABEL_5:
        if (a5) {
          *a5 = v9[1];
        }
        std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__erase_unique<mapped_region_node_internal_t>( a1 + 40,  v9);
        std::mutex::unlock((std::mutex *)(a1 + 128));
        return v10;
      }
    }

    else
    {
      --*(_DWORD *)a1;
      *(void *)(a1 + 8) -= v9[1];
      __int128 v12 = *((_OWORD *)v9 + 1);
      v13[0] = *(_OWORD *)v9;
      v13[1] = v12;
      unint64_t v14 = v9[4];
      uint64_t v10 = deallocate_node((uint64_t)v13);
      if (!a4) {
        goto LABEL_5;
      }
    }

    *a4 = *v9;
    goto LABEL_5;
  }

  if (a4) {
    *a4 = 0LL;
  }
  uint64_t v10 = 0LL;
  if (a5) {
    *a5 = 0LL;
  }
  return v10;
}

void sub_18607D914(_Unwind_Exception *a1)
{
}

uint64_t deallocate_node(uint64_t a1)
{
  if (mach_task_is_self(*(_DWORD *)(a1 + 24))) {
    return 0LL;
  }
  else {
    return mach_vm_deallocate(*MEMORY[0x1895FBBE0], *(void *)(a1 + 16), *(void *)(a1 + 8));
  }
}

void *next_node(uint64_t a1, unint64_t *a2)
{
  if (!a2) {
    return 0LL;
  }
  unint64_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  unint64_t v7 = *(void **)(a1 + 48);
  uint64_t v6 = (void *)(a1 + 48);
  int v5 = v7;
  if (!v7) {
    goto LABEL_13;
  }
  unint64_t v8 = *a2;
  uint64_t v9 = v6;
  do
  {
    unint64_t v10 = v5[4];
    BOOL v11 = v8 >= v10;
    if (v8 >= v10) {
      __int128 v12 = v5 + 1;
    }
    else {
      __int128 v12 = v5;
    }
    if (!v11) {
      uint64_t v9 = v5;
    }
    int v5 = (void *)*v12;
  }

  while (*v12);
  if (v9 == v6 || (v14 = v9 + 4, unint64_t v13 = v9[4], v13 <= v8) && v9[5] + v13 > v8) {
LABEL_13:
  }
    unint64_t v14 = 0LL;
  std::mutex::unlock(v4);
  return v14;
}

void enumerate_mapped_memory_cache(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  int v5 = *(void **)(a1 + 40);
  if (v5 != (void *)(a1 + 48))
  {
    do
    {
      __int128 v6 = *((_OWORD *)v5 + 3);
      __int128 v14 = *((_OWORD *)v5 + 2);
      __int128 v15 = v6;
      uint64_t v16 = v5[8];
      (*(void (**)(uint64_t, __int128 *, void))(a2 + 16))(a2, &v14, 0LL);
      unint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          int v5 = v8;
        }

        while (!v9);
      }

      int v5 = v8;
    }

    while (v8 != (void *)(a1 + 48));
  }

  BOOL v11 = *(__int128 **)(a1 + 64);
  unint64_t v10 = *(__int128 **)(a1 + 72);
  while (v11 != v10)
  {
    __int128 v12 = *v11;
    __int128 v13 = v11[1];
    uint64_t v16 = *((void *)v11 + 4);
    __int128 v14 = v12;
    __int128 v15 = v13;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(a2 + 16))(a2, &v14, 1LL);
    BOOL v11 = (__int128 *)((char *)v11 + 40);
  }

  std::mutex::unlock(v4);
}

void sub_18607DB04(_Unwind_Exception *a1)
{
}

uint64_t mapped_memory_suspend_target(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 4LL;
  }
  if (*(void *)(a1 + 192)) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v2 + 1;
  if (v2 || mach_task_is_self(*(_DWORD *)(a1 + 88))) {
    return 0LL;
  }
  uint64_t v3 = task_suspend2(*(_DWORD *)(a1 + 88), (task_suspension_token_t *)(a1 + 92));
  if ((_DWORD)v3)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_suspend_target", "can't suspend");
    mach_error(__str, v3);
  }

  return v3;
}

uint64_t mapped_memory_resume_target(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 4LL;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0LL;
  }
  if (*(void *)(a1 + 192)) {
    return 0LL;
  }
  int v3 = v2 - 1;
  *(_DWORD *)(a1 + 96) = v3;
  if (v3 || mach_task_is_self(*(_DWORD *)(a1 + 88))) {
    return 0LL;
  }
  uint64_t v4 = task_resume2(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a1 + 92) = 0;
  if ((_DWORD)v4)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_resume_target", "can't suspend");
    mach_error(__str, v4);
  }

  return v4;
}

uint64_t mapped_memory_read_pointer(uint64_t a1, tree *a2, void *a3)
{
  if (*(_BYTE *)(a1 + 101)) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = 4LL;
  }
  unint64_t v8 = 0LL;
  uint64_t result = mapped_memory_read((const char *)a1, a2, v5, &v8);
  if (v8)
  {
    if (*(_BYTE *)(a1 + 101)) {
      uint64_t v7 = *(void *)v8;
    }
    else {
      uint64_t v7 = *v8;
    }
    uint64_t result = 0LL;
    *a3 = v7;
  }

  return result;
}

uint64_t mapped_memory_read(const char *a1, tree *a2, uint64_t a3, void *a4)
{
  node = find_node(a1, a2);
  if (!node)
  {
    unsigned int v10 = 0;
    node = map_new_node((uint64_t)a1, (mach_vm_address_t)a2, a3, (int *)&v10);
    if (!node) {
      return v10;
    }
  }

  uint64_t result = 0LL;
  *a4 = (char *)a2 + node[2] - *node;
  return result;
}

uint64_t mapped_memory_task_threads(uint64_t a1, unsigned int **a2, unsigned int *a3)
{
  if (!a1) {
    return 4LL;
  }
  if (*(void *)(a1 + 192)) {
    return CSCppCoreFileMetadata::task_threads(*(CSCppCoreFileMetadata **)(a1 + 192), a2, a3);
  }
  return task_threads(*(_DWORD *)(a1 + 88), a2, a3);
}

uint64_t mapped_memory_thread_get_state( uint64_t a1, thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  if (!a1) {
    return 4LL;
  }
  uint64_t v5 = *(CSCppCoreFileMetadata **)(a1 + 192);
  if (v5) {
    return CSCppCoreFileMetadata::thread_get_state(v5, target_act, flavor, old_state, old_stateCnt);
  }
  else {
    return thread_get_state(target_act, flavor, old_state, old_stateCnt);
  }
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_short_64( uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 && (uint64_t v5 = *(void *)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64(v5, a2, a3, a4, a5);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_64( uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  if (a1 && (uint64_t v5 = *(void *)(a1 + 192)) != 0) {
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64(v5, a2, a3, a4, a5);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_mach_vm_page_range_query( uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  if (a1 && (uint64_t v6 = *(CSCppCoreFileMetadata **)(a1 + 192)) != 0LL) {
    return CSCppCoreFileMetadata::mach_vm_page_range_query(v6, a2, a3, a4, a5, a6);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_mach_vm_purgable_control(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_udata_ptrs(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16LL))(v1);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_owned_vm_objects(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  else {
    return 4LL;
  }
}

unint64_t mapped_memory_core_file_region_filename( uint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  else {
    return 0LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_name(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_path(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_parent_proc_name(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_parent_proc_path(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_pid(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ppid(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_starttime_sec(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 80LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_starttime_usec(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_userstack(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 96LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_flags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 104LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_argslen(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_proc_argc(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_dirty_flags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_dyld_all_image_infos_addr(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_dyld_shared_cache_range(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_internal(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_internal_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_iokit_mapped(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_alternate_accounting(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_alternate_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_page_table(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 216LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 224LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint_lifetime_max(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 232LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 240LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 248LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_wired_mem(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 256LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 264LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 272LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 280LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 288LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 296LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 304LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 312LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint_compressed(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 320LL))(v2);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_get_architecture(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 136LL))(v1);
  }
  else {
    return 4LL;
  }
}

uint64_t mapped_memory_core_file_has_info_for_memory_analysis(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 192)) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1);
  }
  else {
    return 0LL;
  }
}

void *mapped_memory_core_file_is_exclavecore(void *result)
{
  if (result)
  {
    uint64_t result = (void *)result[24];
    if (result)
    {
      if (result) {
        return (void *)(*((_DWORD *)result + 30) == 1);
      }
    }
  }

  return result;
}

void *mapped_memory_core_file_is_exclave(void *result)
{
  if (result)
  {
    uint64_t result = (void *)result[24];
    if (result) {
  }
    }

  return result;
}

uint64_t mapped_memory_core_file_get_exclave_vm_flags_for_address( uint64_t a1, unint64_t a2, unsigned int *a3)
{
  if (a1 {
    && (int v3 = *(const void **)(a1 + 192)) != 0LL
  }
  {
    return CSCppCoreFileExclavesMetadata::get_exclave_vm_flags_for_address(v6, a2, a3);
  }

  else
  {
    return 4LL;
  }

uint64_t mapped_memory_core_file_get_addressing_mask(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4LL;
  }
  uint64_t result = 4LL;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 192);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 80))
      {
        uint64_t result = 0LL;
        *a2 = *(void *)(v4 + 72);
      }

      else
      {
        return 5LL;
      }
    }
  }

  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>( void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

void parse_thread_load_command(const thread_command *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v32 = 0LL;
  uint64_t v33 = 0LL;
  char v31 = (uint64_t *)&v32;
  cmdmach_vm_size_t size = a1->cmdsize;
  if (cmdsize <= 8)
  {
    *(void *)a2 = &v32;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    uint64_t v24 = a2 + 8;
    *(void *)(a2 + 16) = 0LL;
LABEL_34:
    *(void *)a2 = v24;
    char v25 = 1;
  }

  else
  {
    uint64_t v26 = a2;
    unint64_t v3 = 8LL;
    mach_vm_address_t v27 = a1;
    do
    {
      if (v3 + 8 > cmdsize
        || (uint8x8_t v4 = (thread_command *)((char *)a1 + v3),
            uint64_t v5 = *(unsigned int *)((char *)&a1->cmdsize + v3),
            v5 >> 30)
        || (unint64_t v6 = 4 * v5 + 8, v6 > cmdsize))
      {
        char v25 = 0;
        a2 = v26;
        *(_BYTE *)uint64_t v26 = 0;
        goto LABEL_36;
      }

      std::string __p = 0LL;
      mach_vm_size_t v29 = 0LL;
      char v30 = 0LL;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, 4 * v5);
      if ((v5 & 0x3FFFFFFF) != 0)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = (4 * v5);
        BOOL v9 = v29;
        do
        {
          unsigned int v10 = (char *)&v4[1] + v7;
          if (v9 >= v30)
          {
            __int128 v12 = (char *)__p;
            int64_t v13 = v9 - (_BYTE *)__p;
            uint64_t v14 = v9 - (_BYTE *)__p + 1;
            if (v14 < 0) {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v15 = v30 - (_BYTE *)__p;
            if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v16 = v14;
            }
            if (v16) {
              unint64_t v17 = (char *)operator new(v16);
            }
            else {
              unint64_t v17 = 0LL;
            }
            int v18 = &v17[v13];
            v17[v13] = *v10;
            BOOL v11 = &v17[v13 + 1];
            if (v9 != v12)
            {
              vm_map_read_t v19 = &v9[~(unint64_t)v12];
              do
              {
                char v20 = *--v9;
                (v19--)[(void)v17] = v20;
              }

              while (v9 != v12);
              BOOL v9 = (char *)__p;
              int v18 = v17;
            }

            std::string __p = v18;
            mach_vm_size_t v29 = &v17[v13 + 1];
            char v30 = &v17[v16];
            if (v9) {
              operator delete(v9);
            }
          }

          else
          {
            *BOOL v9 = *v10;
            BOOL v11 = v9 + 1;
          }

          mach_vm_size_t v29 = v11;
          ++v7;
          BOOL v9 = v11;
        }

        while (v7 != v8);
      }

      BOOL v34 = v4;
      mach_vm_size_t v21 = std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>( &v31,  (int *)v4,  (uint64_t)&std::piecewise_construct,  &v34)
          + 5;
      if (v21 != (uint64_t **)&__p) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>( v21,  (char *)__p,  v29,  v29 - (_BYTE *)__p);
      }
      if (__p)
      {
        mach_vm_size_t v29 = (char *)__p;
        operator delete(__p);
      }

      v3 += v6;
      a1 = v27;
      cmdmach_vm_size_t size = v27->cmdsize;
    }

    while (v3 < cmdsize);
    unsigned __int8 v22 = v32;
    uint64_t v23 = v33;
    a2 = v26;
    *(void *)uint64_t v26 = v31;
    *(void *)(v26 + _Block_object_dispose(va, 8) = v22;
    uint64_t v24 = v26 + 8;
    *(void *)(v26 + 16) = v23;
    if (!v23) {
      goto LABEL_34;
    }
    void v22[2] = v24;
    char v31 = (uint64_t *)&v32;
    char v25 = 1;
    BOOL v32 = 0LL;
    uint64_t v33 = 0LL;
  }

void sub_18607E858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)&a16,  a17);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>( _DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, const CSCppCoreFileTaskCrashinfo *a7@<X6>, void *a8@<X8>)
{
  size_t v16 = operator new(0x238uLL);
  LODWORD(a1) = *a1;
  __int128 v42 = 0LL;
  uint64_t v43 = 0LL;
  __int128 v41 = 0LL;
  std::vector<mapped_memory_core_file_dumped_region_info_t>::__init_with_size[abi:ne180100]<mapped_memory_core_file_dumped_region_info_t*,mapped_memory_core_file_dumped_region_info_t*>( &v41,  *(const void **)a2,  *(void *)(a2 + 8),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v17 = *a3;
  std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100](v40, a4);
  std::__optional_copy_base<CSCppCoreFileRegionsTree,false>::__optional_copy_base[abi:ne180100]((uint64_t)v39, a5);
  uint64_t v19 = *a6;
  uint64_t v18 = a6[1];
  std::__optional_copy_base<CSCppCoreFileTaskCrashinfo,false>::__optional_copy_base[abi:ne180100]( (CSCppCoreFileTaskCrashinfo *)v20,  a7);
  CSCppCoreFileDarwinMetadata::CSCppCoreFileDarwinMetadata( v16,  (int)a1,  (uint64_t)&v41,  v17,  (uint64_t)v40,  (uint64_t)v39,  v19,  v18,  (const CSCppCoreFileTaskCrashinfo *)v20);
  *a8 = v16;
  if (v38)
  {
    if (v37 && __p)
    {
      vm_map_read_t v36 = __p;
      operator delete(__p);
    }

    if (v34 && v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }

    if (v31 && v30 < 0) {
      operator delete(v29);
    }
    if (v28 && v27 < 0) {
      operator delete(v26);
    }
    if (v25 && v24 < 0) {
      operator delete(v23);
    }
    if (v22 && v21 < 0) {
      operator delete(v20[0]);
    }
  }

  if (v39[24])
  {
    char v44 = (void **)v39;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v44);
  }

  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( (uint64_t)v40,  (void *)v40[1]);
  if (v41)
  {
    __int128 v42 = v41;
    operator delete(v41);
  }

void sub_18607EA48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a65) {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo((CSCppCoreFileTaskCrashinfo *)&a10);
  }
  if (*(_BYTE *)(v66 - 144))
  {
    *(void *)(v66 - 8_Block_object_dispose(va, 8) = v66 - 168;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v66 - 88));
  }

  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy( v66 - 136,  *(void **)(v66 - 128));
  unint64_t v68 = *(void **)(v66 - 112);
  if (v68)
  {
    *(void *)(v66 - 104) = v68;
    operator delete(v68);
  }

  operator delete(v65);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>( uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 5) = 0LL;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>( void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  BOOL v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      unsigned int v7[2] = 0LL;
    }

    if ((a4 & 0x8000000000000000LL) != 0) {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    BOOL v9 = (char *)v7[1];
    goto LABEL_17;
  }

  __int128 v12 = (_BYTE *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    unint64_t v15 = &v9[v16];
    goto LABEL_20;
  }

  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    BOOL v9 = (char *)v7[1];
  }

  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  unint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t *std::map<int,std::vector<unsigned char>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::vector<unsigned char>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<unsigned char>>,std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *> *,long>>>( a1,  *(int **)a2,  (int *)(a2 + 8));
  return a1;
}

void sub_18607ED18(_Unwind_Exception *a1)
{
}

uint64_t *std::map<int,std::vector<unsigned char>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<unsigned char>>,std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *> *,long>>>( uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint8x8_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<unsigned char>> const&>( v5,  v6,  v4 + 8,  (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint8x8_t v4 = v8;
        }

        while (!v9);
      }

      uint8x8_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<unsigned char>> const&>( uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__find_equal<int>( a1,  a2,  &v10,  &v9,  a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__construct_node<std::pair<int const,std::vector<unsigned char>> const&>( (uint64_t)a1,  a4,  (uint64_t)&v8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__find_equal<int>( void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }

      while (v14);
    }

    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      uint64_t v17 = a1 + 1;
    }

void *std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::__construct_node<std::pair<int const,std::vector<unsigned char>> const&>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(void *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  *((void *)v6 + 6) = 0LL;
  *((void *)v6 + 7) = 0LL;
  *((void *)v6 + 5) = 0LL;
  uint64_t result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>( (void *)v6 + 5,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_18607F050(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100]( v3,  v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x48uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((void *)v11 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 6) = v11 + 14;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy( (uint64_t)(a2 + 6),  a2[7]);
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

__n128 std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>( uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0LL;
      a2->n128_u64[1] = 0LL;
      a2[1].n128_u64[0] = 0LL;
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    uint64_t v5 = (void **)a1;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

void std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CSCppCoreFileRegionInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void std::vector<CSCppCoreFileRegionInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 224LL)
  {
    int v7 = (void **)(i - 24);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v7);
    if (*(_BYTE *)(i - 32))
    {
      uint64_t v5 = *(void **)(i - 56);
      if (v5)
      {
        *(void *)(i - 4_Block_object_dispose(va, 8) = v5;
        operator delete(v5);
      }
    }

    if (*(_BYTE *)(i - 64))
    {
      int v6 = *(void **)(i - 88);
      if (v6)
      {
        *(void *)(i - 80) = v6;
        operator delete(v6);
      }
    }
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
}

void CSCppCoreFileRegionInfo::~CSCppCoreFileRegionInfo(CSCppCoreFileRegionInfo *this)
{
  uint8x8_t v4 = (void **)((char *)this + 200);
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((_BYTE *)this + 192))
  {
    int8x8_t v2 = (void *)*((void *)this + 21);
    if (v2)
    {
      *((void *)this + 22) = v2;
      operator delete(v2);
    }
  }

  if (*((_BYTE *)this + 160))
  {
    uint64_t v3 = (void *)*((void *)this + 17);
    if (v3)
    {
      *((void *)this + 1_Block_object_dispose(va, 8) = v3;
      operator delete(v3);
    }
  }

  if (*((_BYTE *)this + 128))
  {
  }

void std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>( CSCppCoreFileTaskCrashinfo *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 440) == *(unsigned __int8 *)(a2 + 440))
  {
    if (*((_BYTE *)this + 440)) {
      CSCppCoreFileTaskCrashinfo::operator=((uint64_t)this, a2);
    }
  }

  else if (*((_BYTE *)this + 440))
  {
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(this);
    *((_BYTE *)this + 440) = 0;
  }

  else
  {
    std::construct_at[abi:ne180100]<CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo*>( (uint64_t)this,  (__int128 *)a2);
    *((_BYTE *)this + 440) = 1;
  }

uint64_t CSCppCoreFileTaskCrashinfo::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  __int128 v4 = *(_OWORD *)(a2 + 144);
  __int128 v5 = *(_OWORD *)(a2 + 160);
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 144) = v4;
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>( a1 + 208,  (__n128 *)(a2 + 208));
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>( a1 + 240,  (__n128 *)(a2 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 272);
  __int128 v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 272) = v7;
  __int128 v9 = *(_OWORD *)(a2 + 320);
  __int128 v10 = *(_OWORD *)(a2 + 336);
  __int128 v11 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v11;
  *(_OWORD *)(a1 + 320) = v9;
  *(_OWORD *)(a1 + 336) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 384);
  __int128 v13 = *(_OWORD *)(a2 + 400);
  __int128 v14 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v13;
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 384) = v12;
  return a1;
}

__n128 std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>( uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24)) {
      result.n128_u64[0] = std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1, a2).n128_u64[0];
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    __int128 v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
      operator delete(v4);
    }

    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

__n128 std::construct_at[abi:ne180100]<CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo,CSCppCoreFileTaskCrashinfo*>( uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    __int128 v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    __int128 v3 = a2[2];
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 6) = 0LL;
    *((void *)a2 + 4) = 0LL;
    *(_BYTE *)(a1 + 56) = 1;
  }

  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    __int128 v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0LL;
    *((void *)a2 + 10) = 0LL;
    *((void *)a2 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  }

  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    __int128 v5 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v5;
    *((void *)a2 + 13) = 0LL;
    *((void *)a2 + 14) = 0LL;
    *((void *)a2 + 12) = 0LL;
    *(_BYTE *)(a1 + 120) = 1;
  }

  __int128 v6 = a2[10];
  __int128 v7 = a2[11];
  __int128 v8 = *(__int128 *)((char *)a2 + 188);
  __int128 v10 = a2[8];
  __int128 v9 = a2[9];
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 18_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 216) = 0LL;
    *(void *)(a1 + 224) = 0LL;
    *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = a2[13];
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    *((void *)a2 + 26) = 0LL;
    *((void *)a2 + 27) = 0LL;
    *((void *)a2 + 2_Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(a1 + 232) = 1;
  }

  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    *(void *)(a1 + 240) = 0LL;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 256) = 0LL;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *((void *)a2 + 30) = 0LL;
    *((void *)a2 + 31) = 0LL;
    *((void *)a2 + 32) = 0LL;
    *(_BYTE *)(a1 + 264) = 1;
  }

  __int128 v11 = a2[17];
  __int128 v12 = a2[19];
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = a2[18];
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v11;
  __int128 v13 = a2[20];
  __int128 v14 = a2[21];
  __int128 v15 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 36_Block_object_dispose(va, 8) = v15;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  __n128 result = (__n128)a2[24];
  __int128 v17 = a2[25];
  __int128 v18 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 416) = v18;
  *(__n128 *)(a1 + 384) = result;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>( uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        unint64_t v44 = *(void *)(a2 - 40);
        unint64_t v43 = a2 - 40;
        if (v44 < *(void *)v8)
        {
          uint64_t v141 = *(void *)(v8 + 32);
          __int128 v122 = *(_OWORD *)v8;
          __int128 v131 = *(_OWORD *)(v8 + 16);
          __int128 v45 = *(_OWORD *)v43;
          __int128 v46 = *(_OWORD *)(v43 + 16);
          *(void *)(v8 + 32) = *(void *)(v43 + 32);
          *(_OWORD *)unint64_t v8 = v45;
          *(_OWORD *)(v8 + 16) = v46;
          *(void *)(v43 + 32) = v141;
          *(_OWORD *)unint64_t v43 = v122;
          *(_OWORD *)(v43 + 16) = v131;
        }

        return;
      case 3LL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)v8,  (unint64_t *)(v8 + 40),  (unint64_t *)(a2 - 40));
        return;
      case 4LL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( v8,  v8 + 40,  v8 + 80,  a2 - 40);
        return;
      case 5LL:
        unint64_t v47 = (__int128 *)(v8 + 40);
        uint64_t v48 = (__int128 *)(v8 + 80);
        mach_vm_size_t v49 = (__int128 *)(v8 + 120);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( v8,  v8 + 40,  v8 + 80,  v8 + 120);
        unint64_t v51 = *(void *)(a2 - 40);
        unint64_t v50 = a2 - 40;
        if (v51 < *(void *)(v8 + 120))
        {
          __int128 v52 = *v49;
          __int128 v132 = *(_OWORD *)(v8 + 136);
          uint64_t v53 = *(void *)(v8 + 152);
          __int128 v55 = *(_OWORD *)v50;
          __int128 v54 = *(_OWORD *)(v50 + 16);
          *(void *)(v8 + 152) = *(void *)(v50 + 32);
          __int128 *v49 = v55;
          *(_OWORD *)(v8 + 136) = v54;
          *(void *)(v50 + 32) = v53;
          *(_OWORD *)unint64_t v50 = v52;
          *(_OWORD *)(v50 + 16) = v132;
          if (*(void *)v49 < *(void *)v48)
          {
            uint64_t v56 = *(void *)(v8 + 112);
            __int128 v58 = *v48;
            __int128 v57 = *(_OWORD *)(v8 + 96);
            __int128 v59 = *(_OWORD *)(v8 + 136);
            __int128 *v48 = *v49;
            *(_OWORD *)(v8 + 96) = v59;
            *(void *)(v8 + 112) = *(void *)(v8 + 152);
            __int128 *v49 = v58;
            *(_OWORD *)(v8 + 136) = v57;
            *(void *)(v8 + 152) = v56;
            if (*(void *)v48 < *(void *)v47)
            {
              uint64_t v60 = *(void *)(v8 + 72);
              __int128 v62 = *v47;
              __int128 v61 = *(_OWORD *)(v8 + 56);
              __int128 v63 = *(_OWORD *)(v8 + 96);
              __int128 *v47 = *v48;
              *(_OWORD *)(v8 + 56) = v63;
              *(void *)(v8 + 72) = *(void *)(v8 + 112);
              __int128 *v48 = v62;
              *(_OWORD *)(v8 + 96) = v61;
              *(void *)(v8 + 112) = v60;
              if (*(void *)(v8 + 40) < *(void *)v8)
              {
                uint64_t v142 = *(void *)(v8 + 32);
                __int128 v123 = *(_OWORD *)v8;
                __int128 v133 = *(_OWORD *)(v8 + 16);
                __int128 v64 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)unint64_t v8 = *v47;
                *(_OWORD *)(v8 + 16) = v64;
                *(void *)(v8 + 32) = *(void *)(v8 + 72);
                __int128 *v47 = v123;
                *(_OWORD *)(v8 + 56) = v133;
                *(void *)(v8 + 72) = v142;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 959)
        {
          unint64_t v65 = v8 + 40;
          BOOL v67 = v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              uint64_t v68 = 0LL;
              unint64_t v69 = v8;
              do
              {
                unint64_t v70 = v65;
                unint64_t v71 = *(void *)(v69 + 40);
                if (v71 < *(void *)v69)
                {
                  __int128 v124 = *(_OWORD *)(v69 + 48);
                  __int128 v134 = *(_OWORD *)(v69 + 64);
                  uint64_t v72 = v68;
                  while (1)
                  {
                    uint64_t v73 = v8 + v72;
                    __int128 v74 = *(_OWORD *)(v8 + v72 + 16);
                    *(_OWORD *)(v73 + 40) = *(_OWORD *)(v8 + v72);
                    *(_OWORD *)(v73 + 56) = v74;
                    *(void *)(v73 + 72) = *(void *)(v8 + v72 + 32);
                    if (!v72) {
                      break;
                    }
                    v72 -= 40LL;
                    if (v71 >= *(void *)(v73 - 40))
                    {
                      uint64_t v75 = v8 + v72 + 40;
                      goto LABEL_75;
                    }
                  }

                  uint64_t v75 = v8;
LABEL_75:
                  *(void *)uint64_t v75 = v71;
                  *(_OWORD *)(v75 + 24) = v134;
                  *(_OWORD *)(v75 + _Block_object_dispose(va, 8) = v124;
                }

                unint64_t v65 = v70 + 40;
                v68 += 40LL;
                unint64_t v69 = v70;
              }

              while (v70 + 40 != a2);
            }
          }

          else if (!v67)
          {
            do
            {
              uint64_t v109 = v65;
              unint64_t v110 = *(void *)(a1 + 40);
              if (v110 < *(void *)a1)
              {
                __int128 v127 = *(_OWORD *)(a1 + 48);
                __int128 v137 = *(_OWORD *)(a1 + 64);
                do
                {
                  __int128 v111 = *(_OWORD *)(v65 - 24);
                  *(_OWORD *)unint64_t v65 = *(_OWORD *)(v65 - 40);
                  *(_OWORD *)(v65 + 16) = v111;
                  *(void *)(v65 + 32) = *(void *)(v65 - 8);
                  unint64_t v112 = *(void *)(v65 - 80);
                  v65 -= 40LL;
                }

                while (v110 < v112);
                *(void *)unint64_t v65 = v110;
                *(_OWORD *)(v65 + 24) = v137;
                *(_OWORD *)(v65 + _Block_object_dispose(va, 8) = v127;
              }

              unint64_t v65 = v109 + 40;
              a1 = v109;
            }

            while (v109 + 40 != a2);
          }

          return;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v76 = (unint64_t)(v10 - 2) >> 1;
            int64_t v77 = v76;
            do
            {
              int64_t v78 = v77;
              if (v76 >= v77)
              {
                uint64_t v79 = (2 * v77) | 1;
                unint64_t v80 = v8 + 40 * v79;
                if (2 * v78 + 2 >= v10)
                {
                  unint64_t v81 = *(void *)v80;
                }

                else
                {
                  unint64_t v81 = *(void *)(v80 + 40);
                  BOOL v82 = *(void *)v80 >= v81;
                  if (*(void *)v80 > v81) {
                    unint64_t v81 = *(void *)v80;
                  }
                  if (!v82)
                  {
                    v80 += 40LL;
                    uint64_t v79 = 2 * v78 + 2;
                  }
                }

                unint64_t v83 = v8 + 40 * v78;
                unint64_t v84 = *(void *)v83;
                if (v81 >= *(void *)v83)
                {
                  __int128 v125 = *(_OWORD *)(v83 + 8);
                  __int128 v135 = *(_OWORD *)(v83 + 24);
                  do
                  {
                    unint64_t v85 = v83;
                    unint64_t v83 = v80;
                    __int128 v86 = *(_OWORD *)v80;
                    __int128 v87 = *(_OWORD *)(v80 + 16);
                    *(void *)(v85 + 32) = *(void *)(v80 + 32);
                    *(_OWORD *)unint64_t v85 = v86;
                    *(_OWORD *)(v85 + 16) = v87;
                    if (v76 < v79) {
                      break;
                    }
                    uint64_t v88 = (2 * v79) | 1;
                    unint64_t v80 = v8 + 40 * v88;
                    uint64_t v79 = 2 * v79 + 2;
                    if (v79 >= v10)
                    {
                      unint64_t v89 = *(void *)v80;
                      uint64_t v79 = v88;
                    }

                    else
                    {
                      unint64_t v89 = *(void *)v80;
                      unint64_t v90 = *(void *)(v80 + 40);
                      if (*(void *)v80 <= v90) {
                        unint64_t v89 = *(void *)(v80 + 40);
                      }
                      if (*(void *)v80 >= v90) {
                        uint64_t v79 = v88;
                      }
                      else {
                        v80 += 40LL;
                      }
                    }
                  }

                  while (v89 >= v84);
                  *(void *)unint64_t v83 = v84;
                  *(_OWORD *)(v83 + 24) = v135;
                  *(_OWORD *)(v83 + _Block_object_dispose(va, 8) = v125;
                }
              }

              int64_t v77 = v78 - 1;
            }

            while (v78);
            int64_t v91 = v9 / 0x28uLL;
            do
            {
              uint64_t v92 = 0LL;
              uint64_t v143 = *(void *)(v8 + 32);
              __int128 v126 = *(_OWORD *)v8;
              __int128 v136 = *(_OWORD *)(v8 + 16);
              unint64_t v93 = v8;
              do
              {
                uint64_t v94 = v93 + 40 * v92 + 40;
                uint64_t v95 = (2 * v92) | 1;
                uint64_t v96 = 2 * v92 + 2;
                if (v96 < v91 && *(void *)v94 < *(void *)(v94 + 40))
                {
                  v94 += 40LL;
                  uint64_t v95 = v96;
                }

                __int128 v97 = *(_OWORD *)v94;
                __int128 v98 = *(_OWORD *)(v94 + 16);
                *(void *)(v93 + 32) = *(void *)(v94 + 32);
                *(_OWORD *)unint64_t v93 = v97;
                *(_OWORD *)(v93 + 16) = v98;
                unint64_t v93 = v94;
                uint64_t v92 = v95;
              }

              while (v95 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
              a2 -= 40LL;
              if (v94 == a2)
              {
                *(void *)(v94 + 32) = v143;
                *(_OWORD *)uint64_t v94 = v126;
                *(_OWORD *)(v94 + 16) = v136;
              }

              else
              {
                __int128 v99 = *(_OWORD *)a2;
                __int128 v100 = *(_OWORD *)(a2 + 16);
                *(void *)(v94 + 32) = *(void *)(a2 + 32);
                *(_OWORD *)uint64_t v94 = v99;
                *(_OWORD *)(v94 + 16) = v100;
                *(void *)(a2 + 32) = v143;
                *(_OWORD *)a2 = v126;
                *(_OWORD *)(a2 + 16) = v136;
                uint64_t v101 = v94 - v8 + 40;
                if (v101 >= 41)
                {
                  unint64_t v102 = (v101 / 0x28uLL - 2) >> 1;
                  uint64_t v103 = v8 + 40 * v102;
                  unint64_t v104 = *(void *)v94;
                  if (*(void *)v103 < *(void *)v94)
                  {
                    __int128 v115 = *(_OWORD *)(v94 + 8);
                    __int128 v118 = *(_OWORD *)(v94 + 24);
                    do
                    {
                      uint64_t v105 = v94;
                      uint64_t v94 = v103;
                      __int128 v106 = *(_OWORD *)v103;
                      __int128 v107 = *(_OWORD *)(v103 + 16);
                      *(void *)(v105 + 32) = *(void *)(v103 + 32);
                      *(_OWORD *)uint64_t v105 = v106;
                      *(_OWORD *)(v105 + 16) = v107;
                      if (!v102) {
                        break;
                      }
                      unint64_t v102 = (v102 - 1) >> 1;
                      uint64_t v103 = v8 + 40 * v102;
                    }

                    while (*(void *)v103 < v104);
                    *(void *)uint64_t v94 = v104;
                    *(_OWORD *)(v94 + 24) = v118;
                    *(_OWORD *)(v94 + _Block_object_dispose(va, 8) = v115;
                  }
                }
              }
            }

            while (v91-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)v12,  (unint64_t *)a1,  (unint64_t *)(a2 - 40));
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)a1,  (unint64_t *)v12,  (unint64_t *)(a2 - 40));
          uint64_t v13 = 5 * v11;
          __int128 v14 = (unint64_t *)(a1 + 40 * v11 - 40);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)(a1 + 40),  v14,  (unint64_t *)(a2 - 80));
          __int128 v15 = (unint64_t *)(a1 + 40 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)(a1 + 80),  v15,  (unint64_t *)(a2 - 120));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( (__int128 *)v14,  (unint64_t *)v12,  v15);
          uint64_t v138 = *(void *)(a1 + 32);
          __int128 v119 = *(_OWORD *)a1;
          __int128 v128 = *(_OWORD *)(a1 + 16);
          __int128 v16 = *(_OWORD *)v12;
          __int128 v17 = *(_OWORD *)(v12 + 16);
          *(void *)(a1 + 32) = *(void *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(void *)(v12 + 32) = v138;
          *(_OWORD *)unint64_t v12 = v119;
          *(_OWORD *)(v12 + 16) = v128;
        }

        --a3;
        unint64_t v18 = *(void *)a1;
        if ((a4 & 1) == 0 && *(void *)(a1 - 40) >= v18)
        {
          __int128 v114 = *(_OWORD *)(a1 + 8);
          __int128 v117 = *(_OWORD *)(a1 + 24);
          if (v18 >= *(void *)(a2 - 40))
          {
            unint64_t v34 = a1 + 40;
            do
            {
              unint64_t v8 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 40LL;
            }

            while (v18 >= *(void *)v8);
          }

          else
          {
            unint64_t v8 = a1;
            do
            {
              unint64_t v33 = *(void *)(v8 + 40);
              v8 += 40LL;
            }

            while (v18 >= v33);
          }

          unint64_t v35 = a2;
          if (v8 < a2)
          {
            unint64_t v35 = a2;
            do
            {
              unint64_t v36 = *(void *)(v35 - 40);
              v35 -= 40LL;
            }

            while (v18 < v36);
          }

          while (v8 < v35)
          {
            uint64_t v140 = *(void *)(v8 + 32);
            __int128 v121 = *(_OWORD *)v8;
            __int128 v130 = *(_OWORD *)(v8 + 16);
            __int128 v37 = *(_OWORD *)v35;
            __int128 v38 = *(_OWORD *)(v35 + 16);
            *(void *)(v8 + 32) = *(void *)(v35 + 32);
            *(_OWORD *)unint64_t v8 = v37;
            *(_OWORD *)(v8 + 16) = v38;
            *(void *)(v35 + 32) = v140;
            *(_OWORD *)unint64_t v35 = v121;
            *(_OWORD *)(v35 + 16) = v130;
            do
            {
              unint64_t v39 = *(void *)(v8 + 40);
              v8 += 40LL;
            }

            while (v18 >= v39);
            do
            {
              unint64_t v40 = *(void *)(v35 - 40);
              v35 -= 40LL;
            }

            while (v18 < v40);
          }

          if (v8 - 40 != a1)
          {
            __int128 v41 = *(_OWORD *)(v8 - 40);
            __int128 v42 = *(_OWORD *)(v8 - 24);
            *(void *)(a1 + 32) = *(void *)(v8 - 8);
            *(_OWORD *)a1 = v41;
            *(_OWORD *)(a1 + 16) = v42;
          }

          a4 = 0;
          *(void *)(v8 - 40) = v18;
          *(_OWORD *)(v8 - 32) = v114;
          *(_OWORD *)(v8 - 16) = v117;
          continue;
        }

        uint64_t v19 = 0LL;
        __int128 v113 = *(_OWORD *)(a1 + 8);
        __int128 v116 = *(_OWORD *)(a1 + 24);
        do
        {
          unint64_t v20 = *(void *)(a1 + v19 + 40);
          v19 += 40LL;
        }

        while (v20 < v18);
        unint64_t v21 = a1 + v19;
        unint64_t v22 = a2;
        if (v19 == 40)
        {
          unint64_t v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            unint64_t v24 = *(void *)(v22 - 40);
            v22 -= 40LL;
          }

          while (v24 >= v18);
        }

        else
        {
          do
          {
            unint64_t v23 = *(void *)(v22 - 40);
            v22 -= 40LL;
          }

          while (v23 >= v18);
        }

        unint64_t v8 = a1 + v19;
        if (v21 < v22)
        {
          unint64_t v25 = v22;
          do
          {
            uint64_t v139 = *(void *)(v8 + 32);
            __int128 v120 = *(_OWORD *)v8;
            __int128 v129 = *(_OWORD *)(v8 + 16);
            __int128 v26 = *(_OWORD *)v25;
            __int128 v27 = *(_OWORD *)(v25 + 16);
            *(void *)(v8 + 32) = *(void *)(v25 + 32);
            *(_OWORD *)unint64_t v8 = v26;
            *(_OWORD *)(v8 + 16) = v27;
            *(void *)(v25 + 32) = v139;
            *(_OWORD *)unint64_t v25 = v120;
            *(_OWORD *)(v25 + 16) = v129;
            do
            {
              unint64_t v28 = *(void *)(v8 + 40);
              v8 += 40LL;
            }

            while (v28 < v18);
            do
            {
              unint64_t v29 = *(void *)(v25 - 40);
              v25 -= 40LL;
            }

            while (v29 >= v18);
          }

          while (v8 < v25);
        }

        if (v8 - 40 != a1)
        {
          __int128 v30 = *(_OWORD *)(v8 - 40);
          __int128 v31 = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 32) = *(void *)(v8 - 8);
          *(_OWORD *)a1 = v30;
          *(_OWORD *)(a1 + 16) = v31;
        }

        *(void *)(v8 - 40) = v18;
        *(_OWORD *)(v8 - 32) = v113;
        *(_OWORD *)(v8 - 16) = v116;
        if (v21 < v22)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>( a1,  v8 - 40,  a3,  a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( a1,  v8 - 40);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>( v8,  a2))
        {
          if (v32) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = v8 - 40;
        if (!v32) {
          goto LABEL_1;
        }
        return;
    }
  }